#
# Autogenerated by Thrift Compiler (0.14.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
use 5.10.0;
use strict;
use warnings;
use Thrift::Exception;
use Thrift::MessageType;
use Thrift::Type;

use Types;


# HELPER FUNCTIONS AND STRUCTURES

package SquareService_getSquareChatAnnouncements_args;
use base qw(Class::Accessor);
SquareService_getSquareChatAnnouncements_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_getSquareChatAnnouncements_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = GetSquareChatAnnouncementsRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_getSquareChatAnnouncements_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_getSquareChatAnnouncements_result;
use base qw(Class::Accessor);
SquareService_getSquareChatAnnouncements_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_getSquareChatAnnouncements_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = GetSquareChatAnnouncementsResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_getSquareChatAnnouncements_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_deleteSquareChatAnnouncement_args;
use base qw(Class::Accessor);
SquareService_deleteSquareChatAnnouncement_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_deleteSquareChatAnnouncement_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = DeleteSquareChatAnnouncementRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_deleteSquareChatAnnouncement_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_deleteSquareChatAnnouncement_result;
use base qw(Class::Accessor);
SquareService_deleteSquareChatAnnouncement_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_deleteSquareChatAnnouncement_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = DeleteSquareChatAnnouncementResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_deleteSquareChatAnnouncement_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_createSquareChatAnnouncement_args;
use base qw(Class::Accessor);
SquareService_createSquareChatAnnouncement_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_createSquareChatAnnouncement_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = CreateSquareChatAnnouncementRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_createSquareChatAnnouncement_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_createSquareChatAnnouncement_result;
use base qw(Class::Accessor);
SquareService_createSquareChatAnnouncement_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_createSquareChatAnnouncement_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = CreateSquareChatAnnouncementResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_createSquareChatAnnouncement_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_getNoteStatus_args;
use base qw(Class::Accessor);
SquareService_getNoteStatus_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_getNoteStatus_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = GetNoteStatusRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_getNoteStatus_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_getNoteStatus_result;
use base qw(Class::Accessor);
SquareService_getNoteStatus_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_getNoteStatus_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = GetNoteStatusResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_getNoteStatus_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_getSquareStatus_args;
use base qw(Class::Accessor);
SquareService_getSquareStatus_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_getSquareStatus_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = GetSquareStatusRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_getSquareStatus_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_getSquareStatus_result;
use base qw(Class::Accessor);
SquareService_getSquareStatus_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_getSquareStatus_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = GetSquareStatusResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_getSquareStatus_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_reportSquareMember_args;
use base qw(Class::Accessor);
SquareService_reportSquareMember_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_reportSquareMember_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = ReportSquareMemberRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_reportSquareMember_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_reportSquareMember_result;
use base qw(Class::Accessor);
SquareService_reportSquareMember_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_reportSquareMember_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = ReportSquareMemberResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_reportSquareMember_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_reportSquareMessage_args;
use base qw(Class::Accessor);
SquareService_reportSquareMessage_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_reportSquareMessage_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = ReportSquareMessageRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_reportSquareMessage_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_reportSquareMessage_result;
use base qw(Class::Accessor);
SquareService_reportSquareMessage_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_reportSquareMessage_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = ReportSquareMessageResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_reportSquareMessage_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_reportSquareChat_args;
use base qw(Class::Accessor);
SquareService_reportSquareChat_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_reportSquareChat_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = ReportSquareChatRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_reportSquareChat_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_reportSquareChat_result;
use base qw(Class::Accessor);
SquareService_reportSquareChat_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_reportSquareChat_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = ReportSquareChatResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_reportSquareChat_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_reportSquare_args;
use base qw(Class::Accessor);
SquareService_reportSquare_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_reportSquare_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = ReportSquareRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_reportSquare_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_reportSquare_result;
use base qw(Class::Accessor);
SquareService_reportSquare_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_reportSquare_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = ReportSquareResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_reportSquare_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_updateSquareMemberRelation_args;
use base qw(Class::Accessor);
SquareService_updateSquareMemberRelation_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_updateSquareMemberRelation_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = UpdateSquareMemberRelationRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_updateSquareMemberRelation_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_updateSquareMemberRelation_result;
use base qw(Class::Accessor);
SquareService_updateSquareMemberRelation_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_updateSquareMemberRelation_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = UpdateSquareMemberRelationResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_updateSquareMemberRelation_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_updateSquareAuthority_args;
use base qw(Class::Accessor);
SquareService_updateSquareAuthority_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_updateSquareAuthority_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = UpdateSquareAuthorityRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_updateSquareAuthority_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_updateSquareAuthority_result;
use base qw(Class::Accessor);
SquareService_updateSquareAuthority_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_updateSquareAuthority_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = UpdateSquareAuthorityResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_updateSquareAuthority_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_updateSquareChatMember_args;
use base qw(Class::Accessor);
SquareService_updateSquareChatMember_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_updateSquareChatMember_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = UpdateSquareChatMemberRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_updateSquareChatMember_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_updateSquareChatMember_result;
use base qw(Class::Accessor);
SquareService_updateSquareChatMember_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_updateSquareChatMember_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = UpdateSquareChatMemberResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_updateSquareChatMember_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_updateSquareChat_args;
use base qw(Class::Accessor);
SquareService_updateSquareChat_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_updateSquareChat_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = UpdateSquareChatRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_updateSquareChat_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_updateSquareChat_result;
use base qw(Class::Accessor);
SquareService_updateSquareChat_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_updateSquareChat_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = UpdateSquareChatResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_updateSquareChat_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_refreshSubscriptions_args;
use base qw(Class::Accessor);
SquareService_refreshSubscriptions_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_refreshSubscriptions_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = RefreshSubscriptionsRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_refreshSubscriptions_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_refreshSubscriptions_result;
use base qw(Class::Accessor);
SquareService_refreshSubscriptions_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_refreshSubscriptions_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = RefreshSubscriptionsResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_refreshSubscriptions_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_removeSubscriptions_args;
use base qw(Class::Accessor);
SquareService_removeSubscriptions_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_removeSubscriptions_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = RemoveSubscriptionsRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_removeSubscriptions_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_removeSubscriptions_result;
use base qw(Class::Accessor);
SquareService_removeSubscriptions_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_removeSubscriptions_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = RemoveSubscriptionsResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_removeSubscriptions_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_rejectSquareMembers_args;
use base qw(Class::Accessor);
SquareService_rejectSquareMembers_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_rejectSquareMembers_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = RejectSquareMembersRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_rejectSquareMembers_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_rejectSquareMembers_result;
use base qw(Class::Accessor);
SquareService_rejectSquareMembers_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_rejectSquareMembers_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = RejectSquareMembersResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_rejectSquareMembers_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_updateSquareMembers_args;
use base qw(Class::Accessor);
SquareService_updateSquareMembers_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_updateSquareMembers_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = UpdateSquareMembersRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_updateSquareMembers_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_updateSquareMembers_result;
use base qw(Class::Accessor);
SquareService_updateSquareMembers_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_updateSquareMembers_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = UpdateSquareMembersResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_updateSquareMembers_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_updateSquareMember_args;
use base qw(Class::Accessor);
SquareService_updateSquareMember_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_updateSquareMember_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = UpdateSquareMemberRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_updateSquareMember_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_updateSquareMember_result;
use base qw(Class::Accessor);
SquareService_updateSquareMember_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_updateSquareMember_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = UpdateSquareMemberResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_updateSquareMember_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_updateSquareFeatureSet_args;
use base qw(Class::Accessor);
SquareService_updateSquareFeatureSet_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_updateSquareFeatureSet_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = UpdateSquareFeatureSetRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_updateSquareFeatureSet_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_updateSquareFeatureSet_result;
use base qw(Class::Accessor);
SquareService_updateSquareFeatureSet_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_updateSquareFeatureSet_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = UpdateSquareFeatureSetResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_updateSquareFeatureSet_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_getSquareFeatureSet_args;
use base qw(Class::Accessor);
SquareService_getSquareFeatureSet_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_getSquareFeatureSet_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = GetSquareFeatureSetRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_getSquareFeatureSet_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_getSquareFeatureSet_result;
use base qw(Class::Accessor);
SquareService_getSquareFeatureSet_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_getSquareFeatureSet_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = GetSquareFeatureSetResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_getSquareFeatureSet_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_searchSquares_args;
use base qw(Class::Accessor);
SquareService_searchSquares_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_searchSquares_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = SearchSquaresRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_searchSquares_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_searchSquares_result;
use base qw(Class::Accessor);
SquareService_searchSquares_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_searchSquares_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = SearchSquaresResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_searchSquares_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_updateSquare_args;
use base qw(Class::Accessor);
SquareService_updateSquare_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_updateSquare_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = UpdateSquareRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_updateSquare_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_updateSquare_result;
use base qw(Class::Accessor);
SquareService_updateSquare_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_updateSquare_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = UpdateSquareResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_updateSquare_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_getCategories_args;
use base qw(Class::Accessor);
SquareService_getCategories_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_getCategories_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = GetSquareCategoriesRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_getCategories_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_getCategories_result;
use base qw(Class::Accessor);
SquareService_getCategories_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_getCategories_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = GetSquareCategoriesResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_getCategories_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_searchSquareMembers_args;
use base qw(Class::Accessor);
SquareService_searchSquareMembers_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_searchSquareMembers_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = SearchSquareMembersRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_searchSquareMembers_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_searchSquareMembers_result;
use base qw(Class::Accessor);
SquareService_searchSquareMembers_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_searchSquareMembers_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = SearchSquareMembersResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_searchSquareMembers_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_fetchSquareChatEvents_args;
use base qw(Class::Accessor);
SquareService_fetchSquareChatEvents_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_fetchSquareChatEvents_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = FetchSquareChatEventsRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_fetchSquareChatEvents_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_fetchSquareChatEvents_result;
use base qw(Class::Accessor);
SquareService_fetchSquareChatEvents_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_fetchSquareChatEvents_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = FetchSquareChatEventsResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_fetchSquareChatEvents_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_fetchMyEvents_args;
use base qw(Class::Accessor);
SquareService_fetchMyEvents_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_fetchMyEvents_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = FetchMyEventsRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_fetchMyEvents_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_fetchMyEvents_result;
use base qw(Class::Accessor);
SquareService_fetchMyEvents_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_fetchMyEvents_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = FetchMyEventsResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_fetchMyEvents_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_markAsRead_args;
use base qw(Class::Accessor);
SquareService_markAsRead_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_markAsRead_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = MarkAsReadRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_markAsRead_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_markAsRead_result;
use base qw(Class::Accessor);
SquareService_markAsRead_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_markAsRead_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = MarkAsReadResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_markAsRead_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_getSquareAuthority_args;
use base qw(Class::Accessor);
SquareService_getSquareAuthority_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_getSquareAuthority_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = GetSquareAuthorityRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_getSquareAuthority_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_getSquareAuthority_result;
use base qw(Class::Accessor);
SquareService_getSquareAuthority_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_getSquareAuthority_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = GetSquareAuthorityResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_getSquareAuthority_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_sendMessage_args;
use base qw(Class::Accessor);
SquareService_sendMessage_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_sendMessage_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = SendMessageRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_sendMessage_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_sendMessage_result;
use base qw(Class::Accessor);
SquareService_sendMessage_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_sendMessage_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = SendMessageResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_sendMessage_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_leaveSquare_args;
use base qw(Class::Accessor);
SquareService_leaveSquare_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_leaveSquare_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = LeaveSquareRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_leaveSquare_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_leaveSquare_result;
use base qw(Class::Accessor);
SquareService_leaveSquare_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_leaveSquare_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = LeaveSquareResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_leaveSquare_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_leaveSquareChat_args;
use base qw(Class::Accessor);
SquareService_leaveSquareChat_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_leaveSquareChat_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = LeaveSquareChatRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_leaveSquareChat_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_leaveSquareChat_result;
use base qw(Class::Accessor);
SquareService_leaveSquareChat_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_leaveSquareChat_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = LeaveSquareChatResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_leaveSquareChat_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_joinSquareChat_args;
use base qw(Class::Accessor);
SquareService_joinSquareChat_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_joinSquareChat_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = JoinSquareChatRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_joinSquareChat_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_joinSquareChat_result;
use base qw(Class::Accessor);
SquareService_joinSquareChat_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_joinSquareChat_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = JoinSquareChatResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_joinSquareChat_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_joinSquare_args;
use base qw(Class::Accessor);
SquareService_joinSquare_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_joinSquare_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = JoinSquareRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_joinSquare_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_joinSquare_result;
use base qw(Class::Accessor);
SquareService_joinSquare_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_joinSquare_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = JoinSquareResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_joinSquare_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_inviteToSquare_args;
use base qw(Class::Accessor);
SquareService_inviteToSquare_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_inviteToSquare_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = InviteToSquareRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_inviteToSquare_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_inviteToSquare_result;
use base qw(Class::Accessor);
SquareService_inviteToSquare_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_inviteToSquare_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = InviteToSquareResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_inviteToSquare_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_inviteToSquareChat_args;
use base qw(Class::Accessor);
SquareService_inviteToSquareChat_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_inviteToSquareChat_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = InviteToSquareChatRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_inviteToSquareChat_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_inviteToSquareChat_result;
use base qw(Class::Accessor);
SquareService_inviteToSquareChat_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_inviteToSquareChat_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = InviteToSquareChatResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_inviteToSquareChat_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_getSquareMember_args;
use base qw(Class::Accessor);
SquareService_getSquareMember_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_getSquareMember_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = GetSquareMemberRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_getSquareMember_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_getSquareMember_result;
use base qw(Class::Accessor);
SquareService_getSquareMember_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_getSquareMember_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = GetSquareMemberResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_getSquareMember_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_getSquareMembers_args;
use base qw(Class::Accessor);
SquareService_getSquareMembers_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_getSquareMembers_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = GetSquareMembersRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_getSquareMembers_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_getSquareMembers_result;
use base qw(Class::Accessor);
SquareService_getSquareMembers_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_getSquareMembers_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = GetSquareMembersResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_getSquareMembers_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_getSquareMemberRelation_args;
use base qw(Class::Accessor);
SquareService_getSquareMemberRelation_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_getSquareMemberRelation_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = GetSquareMemberRelationRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_getSquareMemberRelation_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_getSquareMemberRelation_result;
use base qw(Class::Accessor);
SquareService_getSquareMemberRelation_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_getSquareMemberRelation_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = GetSquareMemberRelationResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_getSquareMemberRelation_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_getSquareMemberRelations_args;
use base qw(Class::Accessor);
SquareService_getSquareMemberRelations_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_getSquareMemberRelations_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = GetSquareMemberRelationsRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_getSquareMemberRelations_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_getSquareMemberRelations_result;
use base qw(Class::Accessor);
SquareService_getSquareMemberRelations_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_getSquareMemberRelations_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = GetSquareMemberRelationsResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_getSquareMemberRelations_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_getSquareChatMembers_args;
use base qw(Class::Accessor);
SquareService_getSquareChatMembers_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_getSquareChatMembers_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = GetSquareChatMembersRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_getSquareChatMembers_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_getSquareChatMembers_result;
use base qw(Class::Accessor);
SquareService_getSquareChatMembers_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_getSquareChatMembers_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = GetSquareChatMembersResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_getSquareChatMembers_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_getSquareChatStatus_args;
use base qw(Class::Accessor);
SquareService_getSquareChatStatus_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_getSquareChatStatus_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = GetSquareChatStatusRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_getSquareChatStatus_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_getSquareChatStatus_result;
use base qw(Class::Accessor);
SquareService_getSquareChatStatus_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_getSquareChatStatus_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = GetSquareChatStatusResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_getSquareChatStatus_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_getSquareChat_args;
use base qw(Class::Accessor);
SquareService_getSquareChat_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_getSquareChat_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = GetSquareChatRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_getSquareChat_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_getSquareChat_result;
use base qw(Class::Accessor);
SquareService_getSquareChat_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_getSquareChat_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = GetSquareChatResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_getSquareChat_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_getSquare_args;
use base qw(Class::Accessor);
SquareService_getSquare_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_getSquare_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = GetSquareRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_getSquare_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_getSquare_result;
use base qw(Class::Accessor);
SquareService_getSquare_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_getSquare_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = GetSquareResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_getSquare_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_getJoinedSquares_args;
use base qw(Class::Accessor);
SquareService_getJoinedSquares_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_getJoinedSquares_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = GetJoinedSquaresRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_getJoinedSquares_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_getJoinedSquares_result;
use base qw(Class::Accessor);
SquareService_getJoinedSquares_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_getJoinedSquares_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = GetJoinedSquaresResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_getJoinedSquares_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_getJoinedSquareChats_args;
use base qw(Class::Accessor);
SquareService_getJoinedSquareChats_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_getJoinedSquareChats_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = GetJoinedSquareChatsRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_getJoinedSquareChats_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_getJoinedSquareChats_result;
use base qw(Class::Accessor);
SquareService_getJoinedSquareChats_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_getJoinedSquareChats_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = GetJoinedSquareChatsResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_getJoinedSquareChats_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_approveSquareMembers_args;
use base qw(Class::Accessor);
SquareService_approveSquareMembers_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_approveSquareMembers_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = ApproveSquareMembersRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_approveSquareMembers_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_approveSquareMembers_result;
use base qw(Class::Accessor);
SquareService_approveSquareMembers_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_approveSquareMembers_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = ApproveSquareMembersResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_approveSquareMembers_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_createSquareChat_args;
use base qw(Class::Accessor);
SquareService_createSquareChat_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_createSquareChat_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = CreateSquareChatRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_createSquareChat_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_createSquareChat_result;
use base qw(Class::Accessor);
SquareService_createSquareChat_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_createSquareChat_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = CreateSquareChatResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_createSquareChat_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_createSquare_args;
use base qw(Class::Accessor);
SquareService_createSquare_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_createSquare_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = CreateSquareRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_createSquare_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_createSquare_result;
use base qw(Class::Accessor);
SquareService_createSquare_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_createSquare_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = CreateSquareResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_createSquare_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_deleteSquareChat_args;
use base qw(Class::Accessor);
SquareService_deleteSquareChat_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_deleteSquareChat_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = DeleteSquareChatRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_deleteSquareChat_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_deleteSquareChat_result;
use base qw(Class::Accessor);
SquareService_deleteSquareChat_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_deleteSquareChat_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = DeleteSquareChatResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_deleteSquareChat_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_deleteSquare_args;
use base qw(Class::Accessor);
SquareService_deleteSquare_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_deleteSquare_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = DeleteSquareRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_deleteSquare_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_deleteSquare_result;
use base qw(Class::Accessor);
SquareService_deleteSquare_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_deleteSquare_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = DeleteSquareResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_deleteSquare_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_destroyMessage_args;
use base qw(Class::Accessor);
SquareService_destroyMessage_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_destroyMessage_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = DestroyMessageRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_destroyMessage_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_destroyMessage_result;
use base qw(Class::Accessor);
SquareService_destroyMessage_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_destroyMessage_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = DestroyMessageResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_destroyMessage_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_getJoinableSquareChats_args;
use base qw(Class::Accessor);
SquareService_getJoinableSquareChats_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_getJoinableSquareChats_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = GetJoinableSquareChatsRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_getJoinableSquareChats_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_getJoinableSquareChats_result;
use base qw(Class::Accessor);
SquareService_getJoinableSquareChats_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_getJoinableSquareChats_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = GetJoinableSquareChatsResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_getJoinableSquareChats_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_getInvitationTicketUrl_args;
use base qw(Class::Accessor);
SquareService_getInvitationTicketUrl_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_getInvitationTicketUrl_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = GetInvitationTicketUrlRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_getInvitationTicketUrl_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_getInvitationTicketUrl_result;
use base qw(Class::Accessor);
SquareService_getInvitationTicketUrl_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_getInvitationTicketUrl_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = GetInvitationTicketUrlResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_getInvitationTicketUrl_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_findSquareByInvitationTicket_args;
use base qw(Class::Accessor);
SquareService_findSquareByInvitationTicket_args->mk_accessors( qw( request ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{request} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{request}) {
                                    $self->{request} = $vals->{request};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_findSquareByInvitationTicket_args';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{request} = FindSquareByInvitationTicketRequest->new();
                                      $xfer += $self->{request}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_findSquareByInvitationTicket_args');
                                if (defined $self->{request}) {
                                  $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{request}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareService_findSquareByInvitationTicket_result;
use base qw(Class::Accessor);
SquareService_findSquareByInvitationTicket_result->mk_accessors( qw( success ) );

sub new {
                                my $classname = shift;
                                my $self      = {};
                                my $vals      = shift || {};
                                $self->{success} = undef;
                                $self->{e} = undef;
                                if (UNIVERSAL::isa($vals,'HASH')) {
                                  if (defined $vals->{success}) {
                                    $self->{success} = $vals->{success};
                                  }
                                  if (defined $vals->{e}) {
                                    $self->{e} = $vals->{e};
                                  }
                                }
                                return bless ($self, $classname);
}

sub getName {
                                return 'SquareService_findSquareByInvitationTicket_result';
                              }

sub read {
                                my ($self, $input) = @_;
                                my $xfer  = 0;
                                my $fname;
                                my $ftype = 0;
                                my $fid   = 0;
                                $xfer += $input->readStructBegin(\$fname);
                                while (1)
                                {
                                  $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                                  if ($ftype == Thrift::TType::STOP) {
                                    last;
                                  }
                                  SWITCH: for($fid)
                                  {
                                    /^0$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{success} = FindSquareByInvitationTicketResponse->new();
                                      $xfer += $self->{success}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                    /^1$/ && do{                                    if ($ftype == Thrift::TType::STRUCT) {
                                      $self->{e} = SquareException->new();
                                      $xfer += $self->{e}->read($input);
                                    } else {
                                      $xfer += $input->skip($ftype);
                                    }
                                    last; };
                                      $xfer += $input->skip($ftype);
                                  }
                                  $xfer += $input->readFieldEnd();
                                }
                                $xfer += $input->readStructEnd();
                                return $xfer;
                              }

sub write {
                                my ($self, $output) = @_;
                                my $xfer   = 0;
                                $xfer += $output->writeStructBegin('SquareService_findSquareByInvitationTicket_result');
                                if (defined $self->{success}) {
                                  $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                                  $xfer += $self->{success}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                if (defined $self->{e}) {
                                  $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                                  $xfer += $self->{e}->write($output);
                                  $xfer += $output->writeFieldEnd();
                                }
                                $xfer += $output->writeFieldStop();
                                $xfer += $output->writeStructEnd();
                                return $xfer;
                              }

package SquareServiceIf;

use strict;


sub getSquareChatAnnouncements{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub deleteSquareChatAnnouncement{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub createSquareChatAnnouncement{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub getNoteStatus{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub getSquareStatus{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub reportSquareMember{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub reportSquareMessage{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub reportSquareChat{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub reportSquare{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub updateSquareMemberRelation{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub updateSquareAuthority{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub updateSquareChatMember{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub updateSquareChat{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub refreshSubscriptions{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub removeSubscriptions{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub rejectSquareMembers{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub updateSquareMembers{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub updateSquareMember{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub updateSquareFeatureSet{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub getSquareFeatureSet{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub searchSquares{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub updateSquare{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub getCategories{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub searchSquareMembers{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub fetchSquareChatEvents{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub fetchMyEvents{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub markAsRead{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub getSquareAuthority{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub sendMessage{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub leaveSquare{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub leaveSquareChat{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub joinSquareChat{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub joinSquare{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub inviteToSquare{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub inviteToSquareChat{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub getSquareMember{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub getSquareMembers{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub getSquareMemberRelation{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub getSquareMemberRelations{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub getSquareChatMembers{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub getSquareChatStatus{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub getSquareChat{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub getSquare{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub getJoinedSquares{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub getJoinedSquareChats{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub approveSquareMembers{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub createSquareChat{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub createSquare{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub deleteSquareChat{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub deleteSquare{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub destroyMessage{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub getJoinableSquareChats{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub getInvitationTicketUrl{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub findSquareByInvitationTicket{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

package SquareServiceRest;

use strict;


sub new {
                                my ($classname, $impl) = @_;
                                my $self     ={ impl => $impl };

                                return bless($self,$classname);
}

sub getSquareChatAnnouncements{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->getSquareChatAnnouncements($request);
                              }

sub deleteSquareChatAnnouncement{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->deleteSquareChatAnnouncement($request);
                              }

sub createSquareChatAnnouncement{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->createSquareChatAnnouncement($request);
                              }

sub getNoteStatus{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->getNoteStatus($request);
                              }

sub getSquareStatus{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->getSquareStatus($request);
                              }

sub reportSquareMember{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->reportSquareMember($request);
                              }

sub reportSquareMessage{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->reportSquareMessage($request);
                              }

sub reportSquareChat{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->reportSquareChat($request);
                              }

sub reportSquare{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->reportSquare($request);
                              }

sub updateSquareMemberRelation{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->updateSquareMemberRelation($request);
                              }

sub updateSquareAuthority{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->updateSquareAuthority($request);
                              }

sub updateSquareChatMember{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->updateSquareChatMember($request);
                              }

sub updateSquareChat{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->updateSquareChat($request);
                              }

sub refreshSubscriptions{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->refreshSubscriptions($request);
                              }

sub removeSubscriptions{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->removeSubscriptions($request);
                              }

sub rejectSquareMembers{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->rejectSquareMembers($request);
                              }

sub updateSquareMembers{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->updateSquareMembers($request);
                              }

sub updateSquareMember{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->updateSquareMember($request);
                              }

sub updateSquareFeatureSet{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->updateSquareFeatureSet($request);
                              }

sub getSquareFeatureSet{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->getSquareFeatureSet($request);
                              }

sub searchSquares{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->searchSquares($request);
                              }

sub updateSquare{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->updateSquare($request);
                              }

sub getCategories{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->getCategories($request);
                              }

sub searchSquareMembers{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->searchSquareMembers($request);
                              }

sub fetchSquareChatEvents{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->fetchSquareChatEvents($request);
                              }

sub fetchMyEvents{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->fetchMyEvents($request);
                              }

sub markAsRead{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->markAsRead($request);
                              }

sub getSquareAuthority{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->getSquareAuthority($request);
                              }

sub sendMessage{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->sendMessage($request);
                              }

sub leaveSquare{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->leaveSquare($request);
                              }

sub leaveSquareChat{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->leaveSquareChat($request);
                              }

sub joinSquareChat{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->joinSquareChat($request);
                              }

sub joinSquare{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->joinSquare($request);
                              }

sub inviteToSquare{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->inviteToSquare($request);
                              }

sub inviteToSquareChat{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->inviteToSquareChat($request);
                              }

sub getSquareMember{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->getSquareMember($request);
                              }

sub getSquareMembers{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->getSquareMembers($request);
                              }

sub getSquareMemberRelation{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->getSquareMemberRelation($request);
                              }

sub getSquareMemberRelations{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->getSquareMemberRelations($request);
                              }

sub getSquareChatMembers{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->getSquareChatMembers($request);
                              }

sub getSquareChatStatus{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->getSquareChatStatus($request);
                              }

sub getSquareChat{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->getSquareChat($request);
                              }

sub getSquare{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->getSquare($request);
                              }

sub getJoinedSquares{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->getJoinedSquares($request);
                              }

sub getJoinedSquareChats{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->getJoinedSquareChats($request);
                              }

sub approveSquareMembers{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->approveSquareMembers($request);
                              }

sub createSquareChat{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->createSquareChat($request);
                              }

sub createSquare{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->createSquare($request);
                              }

sub deleteSquareChat{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->deleteSquareChat($request);
                              }

sub deleteSquare{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->deleteSquare($request);
                              }

sub destroyMessage{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->destroyMessage($request);
                              }

sub getJoinableSquareChats{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->getJoinableSquareChats($request);
                              }

sub getInvitationTicketUrl{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->getInvitationTicketUrl($request);
                              }

sub findSquareByInvitationTicket{
                                my ($self, $request) = @_;

                                my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                                return $self->{impl}->findSquareByInvitationTicket($request);
                              }

package SquareServiceClient;


use base qw(SquareServiceIf);
sub new {
                                my ($classname, $input, $output) = @_;
                                my $self      = {};
                                $self->{input}  = $input;
                                $self->{output} = defined $output ? $output : $input;
                                $self->{seqid}  = 0;
                                return bless($self,$classname);
}

sub getSquareChatAnnouncements{
  my $self = shift;
  my $request = shift;

                                                                $self->send_getSquareChatAnnouncements($request);
                                return $self->recv_getSquareChatAnnouncements();
}

sub send_getSquareChatAnnouncements{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('getSquareChatAnnouncements', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_getSquareChatAnnouncements_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_getSquareChatAnnouncements{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_getSquareChatAnnouncements_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "getSquareChatAnnouncements failed: unknown result";
}
sub deleteSquareChatAnnouncement{
  my $self = shift;
  my $request = shift;

                                                                $self->send_deleteSquareChatAnnouncement($request);
                                return $self->recv_deleteSquareChatAnnouncement();
}

sub send_deleteSquareChatAnnouncement{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('deleteSquareChatAnnouncement', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_deleteSquareChatAnnouncement_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_deleteSquareChatAnnouncement{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_deleteSquareChatAnnouncement_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "deleteSquareChatAnnouncement failed: unknown result";
}
sub createSquareChatAnnouncement{
  my $self = shift;
  my $request = shift;

                                                                $self->send_createSquareChatAnnouncement($request);
                                return $self->recv_createSquareChatAnnouncement();
}

sub send_createSquareChatAnnouncement{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('createSquareChatAnnouncement', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_createSquareChatAnnouncement_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_createSquareChatAnnouncement{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_createSquareChatAnnouncement_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "createSquareChatAnnouncement failed: unknown result";
}
sub getNoteStatus{
  my $self = shift;
  my $request = shift;

                                                                $self->send_getNoteStatus($request);
                                return $self->recv_getNoteStatus();
}

sub send_getNoteStatus{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('getNoteStatus', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_getNoteStatus_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_getNoteStatus{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_getNoteStatus_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "getNoteStatus failed: unknown result";
}
sub getSquareStatus{
  my $self = shift;
  my $request = shift;

                                                                $self->send_getSquareStatus($request);
                                return $self->recv_getSquareStatus();
}

sub send_getSquareStatus{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('getSquareStatus', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_getSquareStatus_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_getSquareStatus{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_getSquareStatus_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "getSquareStatus failed: unknown result";
}
sub reportSquareMember{
  my $self = shift;
  my $request = shift;

                                                                $self->send_reportSquareMember($request);
                                return $self->recv_reportSquareMember();
}

sub send_reportSquareMember{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('reportSquareMember', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_reportSquareMember_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_reportSquareMember{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_reportSquareMember_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "reportSquareMember failed: unknown result";
}
sub reportSquareMessage{
  my $self = shift;
  my $request = shift;

                                                                $self->send_reportSquareMessage($request);
                                return $self->recv_reportSquareMessage();
}

sub send_reportSquareMessage{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('reportSquareMessage', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_reportSquareMessage_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_reportSquareMessage{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_reportSquareMessage_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "reportSquareMessage failed: unknown result";
}
sub reportSquareChat{
  my $self = shift;
  my $request = shift;

                                                                $self->send_reportSquareChat($request);
                                return $self->recv_reportSquareChat();
}

sub send_reportSquareChat{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('reportSquareChat', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_reportSquareChat_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_reportSquareChat{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_reportSquareChat_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "reportSquareChat failed: unknown result";
}
sub reportSquare{
  my $self = shift;
  my $request = shift;

                                                                $self->send_reportSquare($request);
                                return $self->recv_reportSquare();
}

sub send_reportSquare{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('reportSquare', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_reportSquare_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_reportSquare{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_reportSquare_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "reportSquare failed: unknown result";
}
sub updateSquareMemberRelation{
  my $self = shift;
  my $request = shift;

                                                                $self->send_updateSquareMemberRelation($request);
                                return $self->recv_updateSquareMemberRelation();
}

sub send_updateSquareMemberRelation{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('updateSquareMemberRelation', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_updateSquareMemberRelation_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_updateSquareMemberRelation{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_updateSquareMemberRelation_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "updateSquareMemberRelation failed: unknown result";
}
sub updateSquareAuthority{
  my $self = shift;
  my $request = shift;

                                                                $self->send_updateSquareAuthority($request);
                                return $self->recv_updateSquareAuthority();
}

sub send_updateSquareAuthority{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('updateSquareAuthority', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_updateSquareAuthority_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_updateSquareAuthority{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_updateSquareAuthority_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "updateSquareAuthority failed: unknown result";
}
sub updateSquareChatMember{
  my $self = shift;
  my $request = shift;

                                                                $self->send_updateSquareChatMember($request);
                                return $self->recv_updateSquareChatMember();
}

sub send_updateSquareChatMember{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('updateSquareChatMember', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_updateSquareChatMember_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_updateSquareChatMember{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_updateSquareChatMember_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "updateSquareChatMember failed: unknown result";
}
sub updateSquareChat{
  my $self = shift;
  my $request = shift;

                                                                $self->send_updateSquareChat($request);
                                return $self->recv_updateSquareChat();
}

sub send_updateSquareChat{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('updateSquareChat', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_updateSquareChat_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_updateSquareChat{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_updateSquareChat_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "updateSquareChat failed: unknown result";
}
sub refreshSubscriptions{
  my $self = shift;
  my $request = shift;

                                                                $self->send_refreshSubscriptions($request);
                                return $self->recv_refreshSubscriptions();
}

sub send_refreshSubscriptions{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('refreshSubscriptions', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_refreshSubscriptions_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_refreshSubscriptions{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_refreshSubscriptions_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "refreshSubscriptions failed: unknown result";
}
sub removeSubscriptions{
  my $self = shift;
  my $request = shift;

                                                                $self->send_removeSubscriptions($request);
                                return $self->recv_removeSubscriptions();
}

sub send_removeSubscriptions{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('removeSubscriptions', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_removeSubscriptions_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_removeSubscriptions{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_removeSubscriptions_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "removeSubscriptions failed: unknown result";
}
sub rejectSquareMembers{
  my $self = shift;
  my $request = shift;

                                                                $self->send_rejectSquareMembers($request);
                                return $self->recv_rejectSquareMembers();
}

sub send_rejectSquareMembers{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('rejectSquareMembers', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_rejectSquareMembers_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_rejectSquareMembers{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_rejectSquareMembers_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "rejectSquareMembers failed: unknown result";
}
sub updateSquareMembers{
  my $self = shift;
  my $request = shift;

                                                                $self->send_updateSquareMembers($request);
                                return $self->recv_updateSquareMembers();
}

sub send_updateSquareMembers{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('updateSquareMembers', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_updateSquareMembers_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_updateSquareMembers{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_updateSquareMembers_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "updateSquareMembers failed: unknown result";
}
sub updateSquareMember{
  my $self = shift;
  my $request = shift;

                                                                $self->send_updateSquareMember($request);
                                return $self->recv_updateSquareMember();
}

sub send_updateSquareMember{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('updateSquareMember', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_updateSquareMember_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_updateSquareMember{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_updateSquareMember_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "updateSquareMember failed: unknown result";
}
sub updateSquareFeatureSet{
  my $self = shift;
  my $request = shift;

                                                                $self->send_updateSquareFeatureSet($request);
                                return $self->recv_updateSquareFeatureSet();
}

sub send_updateSquareFeatureSet{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('updateSquareFeatureSet', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_updateSquareFeatureSet_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_updateSquareFeatureSet{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_updateSquareFeatureSet_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "updateSquareFeatureSet failed: unknown result";
}
sub getSquareFeatureSet{
  my $self = shift;
  my $request = shift;

                                                                $self->send_getSquareFeatureSet($request);
                                return $self->recv_getSquareFeatureSet();
}

sub send_getSquareFeatureSet{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('getSquareFeatureSet', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_getSquareFeatureSet_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_getSquareFeatureSet{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_getSquareFeatureSet_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "getSquareFeatureSet failed: unknown result";
}
sub searchSquares{
  my $self = shift;
  my $request = shift;

                                                                $self->send_searchSquares($request);
                                return $self->recv_searchSquares();
}

sub send_searchSquares{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('searchSquares', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_searchSquares_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_searchSquares{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_searchSquares_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "searchSquares failed: unknown result";
}
sub updateSquare{
  my $self = shift;
  my $request = shift;

                                                                $self->send_updateSquare($request);
                                return $self->recv_updateSquare();
}

sub send_updateSquare{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('updateSquare', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_updateSquare_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_updateSquare{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_updateSquare_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "updateSquare failed: unknown result";
}
sub getCategories{
  my $self = shift;
  my $request = shift;

                                                                $self->send_getCategories($request);
                                return $self->recv_getCategories();
}

sub send_getCategories{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('getCategories', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_getCategories_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_getCategories{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_getCategories_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "getCategories failed: unknown result";
}
sub searchSquareMembers{
  my $self = shift;
  my $request = shift;

                                                                $self->send_searchSquareMembers($request);
                                return $self->recv_searchSquareMembers();
}

sub send_searchSquareMembers{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('searchSquareMembers', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_searchSquareMembers_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_searchSquareMembers{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_searchSquareMembers_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "searchSquareMembers failed: unknown result";
}
sub fetchSquareChatEvents{
  my $self = shift;
  my $request = shift;

                                                                $self->send_fetchSquareChatEvents($request);
                                return $self->recv_fetchSquareChatEvents();
}

sub send_fetchSquareChatEvents{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('fetchSquareChatEvents', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_fetchSquareChatEvents_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_fetchSquareChatEvents{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_fetchSquareChatEvents_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "fetchSquareChatEvents failed: unknown result";
}
sub fetchMyEvents{
  my $self = shift;
  my $request = shift;

                                                                $self->send_fetchMyEvents($request);
                                return $self->recv_fetchMyEvents();
}

sub send_fetchMyEvents{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('fetchMyEvents', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_fetchMyEvents_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_fetchMyEvents{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_fetchMyEvents_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "fetchMyEvents failed: unknown result";
}
sub markAsRead{
  my $self = shift;
  my $request = shift;

                                                                $self->send_markAsRead($request);
                                return $self->recv_markAsRead();
}

sub send_markAsRead{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('markAsRead', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_markAsRead_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_markAsRead{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_markAsRead_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "markAsRead failed: unknown result";
}
sub getSquareAuthority{
  my $self = shift;
  my $request = shift;

                                                                $self->send_getSquareAuthority($request);
                                return $self->recv_getSquareAuthority();
}

sub send_getSquareAuthority{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('getSquareAuthority', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_getSquareAuthority_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_getSquareAuthority{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_getSquareAuthority_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "getSquareAuthority failed: unknown result";
}
sub sendMessage{
  my $self = shift;
  my $request = shift;

                                                                $self->send_sendMessage($request);
                                return $self->recv_sendMessage();
}

sub send_sendMessage{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('sendMessage', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_sendMessage_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_sendMessage{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_sendMessage_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "sendMessage failed: unknown result";
}
sub leaveSquare{
  my $self = shift;
  my $request = shift;

                                                                $self->send_leaveSquare($request);
                                return $self->recv_leaveSquare();
}

sub send_leaveSquare{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('leaveSquare', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_leaveSquare_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_leaveSquare{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_leaveSquare_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "leaveSquare failed: unknown result";
}
sub leaveSquareChat{
  my $self = shift;
  my $request = shift;

                                                                $self->send_leaveSquareChat($request);
                                return $self->recv_leaveSquareChat();
}

sub send_leaveSquareChat{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('leaveSquareChat', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_leaveSquareChat_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_leaveSquareChat{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_leaveSquareChat_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "leaveSquareChat failed: unknown result";
}
sub joinSquareChat{
  my $self = shift;
  my $request = shift;

                                                                $self->send_joinSquareChat($request);
                                return $self->recv_joinSquareChat();
}

sub send_joinSquareChat{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('joinSquareChat', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_joinSquareChat_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_joinSquareChat{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_joinSquareChat_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "joinSquareChat failed: unknown result";
}
sub joinSquare{
  my $self = shift;
  my $request = shift;

                                                                $self->send_joinSquare($request);
                                return $self->recv_joinSquare();
}

sub send_joinSquare{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('joinSquare', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_joinSquare_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_joinSquare{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_joinSquare_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "joinSquare failed: unknown result";
}
sub inviteToSquare{
  my $self = shift;
  my $request = shift;

                                                                $self->send_inviteToSquare($request);
                                return $self->recv_inviteToSquare();
}

sub send_inviteToSquare{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('inviteToSquare', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_inviteToSquare_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_inviteToSquare{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_inviteToSquare_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "inviteToSquare failed: unknown result";
}
sub inviteToSquareChat{
  my $self = shift;
  my $request = shift;

                                                                $self->send_inviteToSquareChat($request);
                                return $self->recv_inviteToSquareChat();
}

sub send_inviteToSquareChat{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('inviteToSquareChat', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_inviteToSquareChat_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_inviteToSquareChat{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_inviteToSquareChat_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "inviteToSquareChat failed: unknown result";
}
sub getSquareMember{
  my $self = shift;
  my $request = shift;

                                                                $self->send_getSquareMember($request);
                                return $self->recv_getSquareMember();
}

sub send_getSquareMember{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('getSquareMember', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_getSquareMember_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_getSquareMember{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_getSquareMember_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "getSquareMember failed: unknown result";
}
sub getSquareMembers{
  my $self = shift;
  my $request = shift;

                                                                $self->send_getSquareMembers($request);
                                return $self->recv_getSquareMembers();
}

sub send_getSquareMembers{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('getSquareMembers', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_getSquareMembers_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_getSquareMembers{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_getSquareMembers_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "getSquareMembers failed: unknown result";
}
sub getSquareMemberRelation{
  my $self = shift;
  my $request = shift;

                                                                $self->send_getSquareMemberRelation($request);
                                return $self->recv_getSquareMemberRelation();
}

sub send_getSquareMemberRelation{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('getSquareMemberRelation', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_getSquareMemberRelation_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_getSquareMemberRelation{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_getSquareMemberRelation_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "getSquareMemberRelation failed: unknown result";
}
sub getSquareMemberRelations{
  my $self = shift;
  my $request = shift;

                                                                $self->send_getSquareMemberRelations($request);
                                return $self->recv_getSquareMemberRelations();
}

sub send_getSquareMemberRelations{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('getSquareMemberRelations', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_getSquareMemberRelations_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_getSquareMemberRelations{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_getSquareMemberRelations_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "getSquareMemberRelations failed: unknown result";
}
sub getSquareChatMembers{
  my $self = shift;
  my $request = shift;

                                                                $self->send_getSquareChatMembers($request);
                                return $self->recv_getSquareChatMembers();
}

sub send_getSquareChatMembers{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('getSquareChatMembers', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_getSquareChatMembers_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_getSquareChatMembers{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_getSquareChatMembers_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "getSquareChatMembers failed: unknown result";
}
sub getSquareChatStatus{
  my $self = shift;
  my $request = shift;

                                                                $self->send_getSquareChatStatus($request);
                                return $self->recv_getSquareChatStatus();
}

sub send_getSquareChatStatus{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('getSquareChatStatus', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_getSquareChatStatus_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_getSquareChatStatus{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_getSquareChatStatus_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "getSquareChatStatus failed: unknown result";
}
sub getSquareChat{
  my $self = shift;
  my $request = shift;

                                                                $self->send_getSquareChat($request);
                                return $self->recv_getSquareChat();
}

sub send_getSquareChat{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('getSquareChat', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_getSquareChat_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_getSquareChat{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_getSquareChat_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "getSquareChat failed: unknown result";
}
sub getSquare{
  my $self = shift;
  my $request = shift;

                                                                $self->send_getSquare($request);
                                return $self->recv_getSquare();
}

sub send_getSquare{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('getSquare', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_getSquare_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_getSquare{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_getSquare_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "getSquare failed: unknown result";
}
sub getJoinedSquares{
  my $self = shift;
  my $request = shift;

                                                                $self->send_getJoinedSquares($request);
                                return $self->recv_getJoinedSquares();
}

sub send_getJoinedSquares{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('getJoinedSquares', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_getJoinedSquares_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_getJoinedSquares{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_getJoinedSquares_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "getJoinedSquares failed: unknown result";
}
sub getJoinedSquareChats{
  my $self = shift;
  my $request = shift;

                                                                $self->send_getJoinedSquareChats($request);
                                return $self->recv_getJoinedSquareChats();
}

sub send_getJoinedSquareChats{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('getJoinedSquareChats', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_getJoinedSquareChats_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_getJoinedSquareChats{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_getJoinedSquareChats_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "getJoinedSquareChats failed: unknown result";
}
sub approveSquareMembers{
  my $self = shift;
  my $request = shift;

                                                                $self->send_approveSquareMembers($request);
                                return $self->recv_approveSquareMembers();
}

sub send_approveSquareMembers{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('approveSquareMembers', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_approveSquareMembers_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_approveSquareMembers{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_approveSquareMembers_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "approveSquareMembers failed: unknown result";
}
sub createSquareChat{
  my $self = shift;
  my $request = shift;

                                                                $self->send_createSquareChat($request);
                                return $self->recv_createSquareChat();
}

sub send_createSquareChat{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('createSquareChat', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_createSquareChat_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_createSquareChat{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_createSquareChat_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "createSquareChat failed: unknown result";
}
sub createSquare{
  my $self = shift;
  my $request = shift;

                                                                $self->send_createSquare($request);
                                return $self->recv_createSquare();
}

sub send_createSquare{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('createSquare', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_createSquare_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_createSquare{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_createSquare_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "createSquare failed: unknown result";
}
sub deleteSquareChat{
  my $self = shift;
  my $request = shift;

                                                                $self->send_deleteSquareChat($request);
                                return $self->recv_deleteSquareChat();
}

sub send_deleteSquareChat{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('deleteSquareChat', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_deleteSquareChat_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_deleteSquareChat{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_deleteSquareChat_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "deleteSquareChat failed: unknown result";
}
sub deleteSquare{
  my $self = shift;
  my $request = shift;

                                                                $self->send_deleteSquare($request);
                                return $self->recv_deleteSquare();
}

sub send_deleteSquare{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('deleteSquare', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_deleteSquare_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_deleteSquare{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_deleteSquare_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "deleteSquare failed: unknown result";
}
sub destroyMessage{
  my $self = shift;
  my $request = shift;

                                                                $self->send_destroyMessage($request);
                                return $self->recv_destroyMessage();
}

sub send_destroyMessage{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('destroyMessage', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_destroyMessage_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_destroyMessage{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_destroyMessage_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "destroyMessage failed: unknown result";
}
sub getJoinableSquareChats{
  my $self = shift;
  my $request = shift;

                                                                $self->send_getJoinableSquareChats($request);
                                return $self->recv_getJoinableSquareChats();
}

sub send_getJoinableSquareChats{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('getJoinableSquareChats', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_getJoinableSquareChats_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_getJoinableSquareChats{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_getJoinableSquareChats_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "getJoinableSquareChats failed: unknown result";
}
sub getInvitationTicketUrl{
  my $self = shift;
  my $request = shift;

                                                                $self->send_getInvitationTicketUrl($request);
                                return $self->recv_getInvitationTicketUrl();
}

sub send_getInvitationTicketUrl{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('getInvitationTicketUrl', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_getInvitationTicketUrl_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_getInvitationTicketUrl{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_getInvitationTicketUrl_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "getInvitationTicketUrl failed: unknown result";
}
sub findSquareByInvitationTicket{
  my $self = shift;
  my $request = shift;

                                                                $self->send_findSquareByInvitationTicket($request);
                                return $self->recv_findSquareByInvitationTicket();
}

sub send_findSquareByInvitationTicket{
  my $self = shift;
  my $request = shift;

                                $self->{output}->writeMessageBegin('findSquareByInvitationTicket', Thrift::TMessageType::CALL, $self->{seqid});
                                my $args = SquareService_findSquareByInvitationTicket_args->new();
                                $args->{request} = $request;
                                $args->write($self->{output});
                                $self->{output}->writeMessageEnd();
                                $self->{output}->getTransport()->flush();
}

sub recv_findSquareByInvitationTicket{
  my $self = shift;

                                my $rseqid = 0;
                                my $fname;
                                my $mtype = 0;

                                $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                if ($mtype == Thrift::TMessageType::EXCEPTION) {
                                  my $x = Thrift::TApplicationException->new();
                                  $x->read($self->{input});
                                  $self->{input}->readMessageEnd();
                                  die $x;
                                }
                                my $result = SquareService_findSquareByInvitationTicket_result->new();
                                $result->read($self->{input});
                                $self->{input}->readMessageEnd();

                                if (defined $result->{success} ) {
                                  return $result->{success};
                                }
                                if (defined $result->{e}) {
                                  die $result->{e};
                                }
                                die "findSquareByInvitationTicket failed: unknown result";
}
package SquareServiceProcessor;

use strict;


sub new {
                                  my ($classname, $handler) = @_;
                                  my $self      = {};
                                  $self->{handler} = $handler;
                                  return bless ($self, $classname);
}

sub process {
                                  my ($self, $input, $output) = @_;
                                  my $rseqid = 0;
                                  my $fname  = undef;
                                  my $mtype  = 0;

                                  $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
                                  my $methodname = 'process_'.$fname;
                                  if (!$self->can($methodname)) {
                                    $input->skip(Thrift::TType::STRUCT);
                                    $input->readMessageEnd();
                                    my $x = Thrift::TApplicationException->new('Function '.$fname.' not implemented.', Thrift::TApplicationException::UNKNOWN_METHOD);
                                    $output->writeMessageBegin($fname, Thrift::TMessageType::EXCEPTION, $rseqid);
                                    $x->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    return;
                                  }
                                  $self->$methodname($rseqid, $input, $output);
                                  return 1;
}

sub process_getSquareChatAnnouncements {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_getSquareChatAnnouncements_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_getSquareChatAnnouncements_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->getSquareChatAnnouncements($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('getSquareChatAnnouncements', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('getSquareChatAnnouncements', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_deleteSquareChatAnnouncement {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_deleteSquareChatAnnouncement_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_deleteSquareChatAnnouncement_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->deleteSquareChatAnnouncement($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('deleteSquareChatAnnouncement', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('deleteSquareChatAnnouncement', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_createSquareChatAnnouncement {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_createSquareChatAnnouncement_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_createSquareChatAnnouncement_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->createSquareChatAnnouncement($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('createSquareChatAnnouncement', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('createSquareChatAnnouncement', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_getNoteStatus {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_getNoteStatus_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_getNoteStatus_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->getNoteStatus($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('getNoteStatus', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('getNoteStatus', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_getSquareStatus {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_getSquareStatus_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_getSquareStatus_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->getSquareStatus($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('getSquareStatus', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('getSquareStatus', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_reportSquareMember {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_reportSquareMember_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_reportSquareMember_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->reportSquareMember($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('reportSquareMember', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('reportSquareMember', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_reportSquareMessage {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_reportSquareMessage_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_reportSquareMessage_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->reportSquareMessage($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('reportSquareMessage', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('reportSquareMessage', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_reportSquareChat {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_reportSquareChat_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_reportSquareChat_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->reportSquareChat($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('reportSquareChat', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('reportSquareChat', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_reportSquare {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_reportSquare_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_reportSquare_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->reportSquare($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('reportSquare', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('reportSquare', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_updateSquareMemberRelation {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_updateSquareMemberRelation_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_updateSquareMemberRelation_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->updateSquareMemberRelation($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('updateSquareMemberRelation', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('updateSquareMemberRelation', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_updateSquareAuthority {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_updateSquareAuthority_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_updateSquareAuthority_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->updateSquareAuthority($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('updateSquareAuthority', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('updateSquareAuthority', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_updateSquareChatMember {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_updateSquareChatMember_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_updateSquareChatMember_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->updateSquareChatMember($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('updateSquareChatMember', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('updateSquareChatMember', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_updateSquareChat {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_updateSquareChat_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_updateSquareChat_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->updateSquareChat($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('updateSquareChat', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('updateSquareChat', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_refreshSubscriptions {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_refreshSubscriptions_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_refreshSubscriptions_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->refreshSubscriptions($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('refreshSubscriptions', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('refreshSubscriptions', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_removeSubscriptions {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_removeSubscriptions_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_removeSubscriptions_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->removeSubscriptions($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('removeSubscriptions', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('removeSubscriptions', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_rejectSquareMembers {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_rejectSquareMembers_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_rejectSquareMembers_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->rejectSquareMembers($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('rejectSquareMembers', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('rejectSquareMembers', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_updateSquareMembers {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_updateSquareMembers_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_updateSquareMembers_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->updateSquareMembers($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('updateSquareMembers', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('updateSquareMembers', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_updateSquareMember {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_updateSquareMember_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_updateSquareMember_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->updateSquareMember($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('updateSquareMember', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('updateSquareMember', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_updateSquareFeatureSet {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_updateSquareFeatureSet_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_updateSquareFeatureSet_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->updateSquareFeatureSet($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('updateSquareFeatureSet', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('updateSquareFeatureSet', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_getSquareFeatureSet {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_getSquareFeatureSet_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_getSquareFeatureSet_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->getSquareFeatureSet($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('getSquareFeatureSet', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('getSquareFeatureSet', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_searchSquares {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_searchSquares_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_searchSquares_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->searchSquares($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('searchSquares', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('searchSquares', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_updateSquare {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_updateSquare_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_updateSquare_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->updateSquare($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('updateSquare', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('updateSquare', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_getCategories {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_getCategories_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_getCategories_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->getCategories($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('getCategories', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('getCategories', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_searchSquareMembers {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_searchSquareMembers_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_searchSquareMembers_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->searchSquareMembers($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('searchSquareMembers', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('searchSquareMembers', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_fetchSquareChatEvents {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_fetchSquareChatEvents_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_fetchSquareChatEvents_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->fetchSquareChatEvents($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('fetchSquareChatEvents', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('fetchSquareChatEvents', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_fetchMyEvents {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_fetchMyEvents_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_fetchMyEvents_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->fetchMyEvents($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('fetchMyEvents', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('fetchMyEvents', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_markAsRead {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_markAsRead_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_markAsRead_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->markAsRead($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('markAsRead', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('markAsRead', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_getSquareAuthority {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_getSquareAuthority_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_getSquareAuthority_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->getSquareAuthority($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('getSquareAuthority', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('getSquareAuthority', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_sendMessage {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_sendMessage_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_sendMessage_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->sendMessage($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('sendMessage', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('sendMessage', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_leaveSquare {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_leaveSquare_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_leaveSquare_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->leaveSquare($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('leaveSquare', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('leaveSquare', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_leaveSquareChat {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_leaveSquareChat_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_leaveSquareChat_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->leaveSquareChat($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('leaveSquareChat', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('leaveSquareChat', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_joinSquareChat {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_joinSquareChat_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_joinSquareChat_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->joinSquareChat($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('joinSquareChat', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('joinSquareChat', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_joinSquare {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_joinSquare_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_joinSquare_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->joinSquare($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('joinSquare', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('joinSquare', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_inviteToSquare {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_inviteToSquare_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_inviteToSquare_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->inviteToSquare($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('inviteToSquare', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('inviteToSquare', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_inviteToSquareChat {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_inviteToSquareChat_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_inviteToSquareChat_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->inviteToSquareChat($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('inviteToSquareChat', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('inviteToSquareChat', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_getSquareMember {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_getSquareMember_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_getSquareMember_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->getSquareMember($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('getSquareMember', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('getSquareMember', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_getSquareMembers {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_getSquareMembers_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_getSquareMembers_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->getSquareMembers($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('getSquareMembers', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('getSquareMembers', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_getSquareMemberRelation {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_getSquareMemberRelation_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_getSquareMemberRelation_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->getSquareMemberRelation($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('getSquareMemberRelation', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('getSquareMemberRelation', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_getSquareMemberRelations {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_getSquareMemberRelations_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_getSquareMemberRelations_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->getSquareMemberRelations($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('getSquareMemberRelations', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('getSquareMemberRelations', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_getSquareChatMembers {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_getSquareChatMembers_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_getSquareChatMembers_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->getSquareChatMembers($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('getSquareChatMembers', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('getSquareChatMembers', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_getSquareChatStatus {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_getSquareChatStatus_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_getSquareChatStatus_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->getSquareChatStatus($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('getSquareChatStatus', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('getSquareChatStatus', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_getSquareChat {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_getSquareChat_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_getSquareChat_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->getSquareChat($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('getSquareChat', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('getSquareChat', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_getSquare {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_getSquare_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_getSquare_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->getSquare($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('getSquare', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('getSquare', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_getJoinedSquares {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_getJoinedSquares_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_getJoinedSquares_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->getJoinedSquares($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('getJoinedSquares', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('getJoinedSquares', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_getJoinedSquareChats {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_getJoinedSquareChats_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_getJoinedSquareChats_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->getJoinedSquareChats($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('getJoinedSquareChats', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('getJoinedSquareChats', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_approveSquareMembers {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_approveSquareMembers_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_approveSquareMembers_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->approveSquareMembers($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('approveSquareMembers', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('approveSquareMembers', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_createSquareChat {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_createSquareChat_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_createSquareChat_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->createSquareChat($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('createSquareChat', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('createSquareChat', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_createSquare {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_createSquare_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_createSquare_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->createSquare($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('createSquare', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('createSquare', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_deleteSquareChat {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_deleteSquareChat_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_deleteSquareChat_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->deleteSquareChat($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('deleteSquareChat', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('deleteSquareChat', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_deleteSquare {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_deleteSquare_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_deleteSquare_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->deleteSquare($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('deleteSquare', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('deleteSquare', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_destroyMessage {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_destroyMessage_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_destroyMessage_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->destroyMessage($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('destroyMessage', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('destroyMessage', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_getJoinableSquareChats {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_getJoinableSquareChats_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_getJoinableSquareChats_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->getJoinableSquareChats($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('getJoinableSquareChats', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('getJoinableSquareChats', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_getInvitationTicketUrl {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_getInvitationTicketUrl_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_getInvitationTicketUrl_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->getInvitationTicketUrl($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('getInvitationTicketUrl', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('getInvitationTicketUrl', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

sub process_findSquareByInvitationTicket {
                                  my ($self, $seqid, $input, $output) = @_;
                                  my $args = SquareService_findSquareByInvitationTicket_args->new();
                                  $args->read($input);
                                  $input->readMessageEnd();
                                  my $result = SquareService_findSquareByInvitationTicket_result->new();
                                  eval {
                                    $result->{success} = $self->{handler}->findSquareByInvitationTicket($args->request);
                                  }; if( UNIVERSAL::isa($@,'SquareException') ){ 
                                    $result->{e} = $@;
                                    $@ = undef;
                                  }
                                  if ($@) {
                                    $@ =~ s/^\s+|\s+$//g;
                                    my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                    $output->writeMessageBegin('findSquareByInvitationTicket', Thrift::TMessageType::EXCEPTION, $seqid);
                                    $err->write($output);
                                    $output->writeMessageEnd();
                                    $output->getTransport()->flush();
                                    $@ = undef;
                                    return;
                                  }
                                  $output->writeMessageBegin('findSquareByInvitationTicket', Thrift::TMessageType::REPLY, $seqid);
                                  $result->write($output);
                                  $output->writeMessageEnd();
                                  $output->getTransport()->flush();
}

1;
