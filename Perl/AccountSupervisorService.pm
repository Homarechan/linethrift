#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
use 5.10.0;
use strict;
use warnings;
use Thrift::Exception;
use Thrift::MessageType;
use Thrift::Type;

use Types;


# HELPER FUNCTIONS AND STRUCTURES

package AccountSupervisorService_getRSAKey_args;
use base qw(Class::Accessor);

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  return bless ($self, $classname);
}

sub getName {
  return 'AccountSupervisorService_getRSAKey_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('AccountSupervisorService_getRSAKey_args');
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package AccountSupervisorService_getRSAKey_result;
use base qw(Class::Accessor);
AccountSupervisorService_getRSAKey_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{e} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{e}) {
      $self->{e} = $vals->{e};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'AccountSupervisorService_getRSAKey_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{success} = RSAKey->new();
        $xfer += $self->{success}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{e} = TalkException->new();
        $xfer += $self->{e}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('AccountSupervisorService_getRSAKey_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
    $xfer += $self->{success}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{e}) {
    $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
    $xfer += $self->{e}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package AccountSupervisorService_notifyEmailConfirmationResult_args;
use base qw(Class::Accessor);
AccountSupervisorService_notifyEmailConfirmationResult_args->mk_accessors( qw( parameterMap ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{parameterMap} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{parameterMap}) {
      $self->{parameterMap} = $vals->{parameterMap};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'AccountSupervisorService_notifyEmailConfirmationResult_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size961 = 0;
          $self->{parameterMap} = {};
          my $_ktype962 = 0;
          my $_vtype963 = 0;
          $xfer += $input->readMapBegin(\$_ktype962, \$_vtype963, \$_size961);
          for (my $_i965 = 0; $_i965 < $_size961; ++$_i965)
          {
            my $key966 = '';
            my $val967 = '';
            $xfer += $input->readString(\$key966);
            $xfer += $input->readString(\$val967);
            $self->{parameterMap}->{$key966} = $val967;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('AccountSupervisorService_notifyEmailConfirmationResult_args');
  if (defined $self->{parameterMap}) {
    $xfer += $output->writeFieldBegin('parameterMap', Thrift::TType::MAP, 2);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{parameterMap}}));
      {
        while( my ($kiter968,$viter969) = each %{$self->{parameterMap}}) 
        {
          $xfer += $output->writeString($kiter968);
          $xfer += $output->writeString($viter969);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package AccountSupervisorService_notifyEmailConfirmationResult_result;
use base qw(Class::Accessor);
AccountSupervisorService_notifyEmailConfirmationResult_result->mk_accessors( qw( ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{e} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{e}) {
      $self->{e} = $vals->{e};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'AccountSupervisorService_notifyEmailConfirmationResult_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{e} = TalkException->new();
        $xfer += $self->{e}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('AccountSupervisorService_notifyEmailConfirmationResult_result');
  if (defined $self->{e}) {
    $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
    $xfer += $self->{e}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package AccountSupervisorService_registerVirtualAccount_args;
use base qw(Class::Accessor);
AccountSupervisorService_registerVirtualAccount_args->mk_accessors( qw( locale encryptedVirtualUserId encryptedPassword ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{locale} = undef;
  $self->{encryptedVirtualUserId} = undef;
  $self->{encryptedPassword} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{locale}) {
      $self->{locale} = $vals->{locale};
    }
    if (defined $vals->{encryptedVirtualUserId}) {
      $self->{encryptedVirtualUserId} = $vals->{encryptedVirtualUserId};
    }
    if (defined $vals->{encryptedPassword}) {
      $self->{encryptedPassword} = $vals->{encryptedPassword};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'AccountSupervisorService_registerVirtualAccount_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{locale});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{encryptedVirtualUserId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{encryptedPassword});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('AccountSupervisorService_registerVirtualAccount_args');
  if (defined $self->{locale}) {
    $xfer += $output->writeFieldBegin('locale', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{locale});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{encryptedVirtualUserId}) {
    $xfer += $output->writeFieldBegin('encryptedVirtualUserId', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{encryptedVirtualUserId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{encryptedPassword}) {
    $xfer += $output->writeFieldBegin('encryptedPassword', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{encryptedPassword});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package AccountSupervisorService_registerVirtualAccount_result;
use base qw(Class::Accessor);
AccountSupervisorService_registerVirtualAccount_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{e} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{e}) {
      $self->{e} = $vals->{e};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'AccountSupervisorService_registerVirtualAccount_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{e} = TalkException->new();
        $xfer += $self->{e}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('AccountSupervisorService_registerVirtualAccount_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', Thrift::TType::STRING, 0);
    $xfer += $output->writeString($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{e}) {
    $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
    $xfer += $self->{e}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package AccountSupervisorService_requestVirtualAccountPasswordChange_args;
use base qw(Class::Accessor);
AccountSupervisorService_requestVirtualAccountPasswordChange_args->mk_accessors( qw( virtualMid encryptedVirtualUserId encryptedOldPassword encryptedNewPassword ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{virtualMid} = undef;
  $self->{encryptedVirtualUserId} = undef;
  $self->{encryptedOldPassword} = undef;
  $self->{encryptedNewPassword} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{virtualMid}) {
      $self->{virtualMid} = $vals->{virtualMid};
    }
    if (defined $vals->{encryptedVirtualUserId}) {
      $self->{encryptedVirtualUserId} = $vals->{encryptedVirtualUserId};
    }
    if (defined $vals->{encryptedOldPassword}) {
      $self->{encryptedOldPassword} = $vals->{encryptedOldPassword};
    }
    if (defined $vals->{encryptedNewPassword}) {
      $self->{encryptedNewPassword} = $vals->{encryptedNewPassword};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'AccountSupervisorService_requestVirtualAccountPasswordChange_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{virtualMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{encryptedVirtualUserId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{encryptedOldPassword});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{encryptedNewPassword});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('AccountSupervisorService_requestVirtualAccountPasswordChange_args');
  if (defined $self->{virtualMid}) {
    $xfer += $output->writeFieldBegin('virtualMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{virtualMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{encryptedVirtualUserId}) {
    $xfer += $output->writeFieldBegin('encryptedVirtualUserId', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{encryptedVirtualUserId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{encryptedOldPassword}) {
    $xfer += $output->writeFieldBegin('encryptedOldPassword', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{encryptedOldPassword});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{encryptedNewPassword}) {
    $xfer += $output->writeFieldBegin('encryptedNewPassword', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{encryptedNewPassword});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package AccountSupervisorService_requestVirtualAccountPasswordChange_result;
use base qw(Class::Accessor);
AccountSupervisorService_requestVirtualAccountPasswordChange_result->mk_accessors( qw( ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{e} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{e}) {
      $self->{e} = $vals->{e};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'AccountSupervisorService_requestVirtualAccountPasswordChange_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{e} = TalkException->new();
        $xfer += $self->{e}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('AccountSupervisorService_requestVirtualAccountPasswordChange_result');
  if (defined $self->{e}) {
    $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
    $xfer += $self->{e}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package AccountSupervisorService_requestVirtualAccountPasswordSet_args;
use base qw(Class::Accessor);
AccountSupervisorService_requestVirtualAccountPasswordSet_args->mk_accessors( qw( virtualMid encryptedVirtualUserId encryptedNewPassword ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{virtualMid} = undef;
  $self->{encryptedVirtualUserId} = undef;
  $self->{encryptedNewPassword} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{virtualMid}) {
      $self->{virtualMid} = $vals->{virtualMid};
    }
    if (defined $vals->{encryptedVirtualUserId}) {
      $self->{encryptedVirtualUserId} = $vals->{encryptedVirtualUserId};
    }
    if (defined $vals->{encryptedNewPassword}) {
      $self->{encryptedNewPassword} = $vals->{encryptedNewPassword};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'AccountSupervisorService_requestVirtualAccountPasswordSet_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{virtualMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{encryptedVirtualUserId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{encryptedNewPassword});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('AccountSupervisorService_requestVirtualAccountPasswordSet_args');
  if (defined $self->{virtualMid}) {
    $xfer += $output->writeFieldBegin('virtualMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{virtualMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{encryptedVirtualUserId}) {
    $xfer += $output->writeFieldBegin('encryptedVirtualUserId', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{encryptedVirtualUserId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{encryptedNewPassword}) {
    $xfer += $output->writeFieldBegin('encryptedNewPassword', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{encryptedNewPassword});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package AccountSupervisorService_requestVirtualAccountPasswordSet_result;
use base qw(Class::Accessor);
AccountSupervisorService_requestVirtualAccountPasswordSet_result->mk_accessors( qw( ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{e} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{e}) {
      $self->{e} = $vals->{e};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'AccountSupervisorService_requestVirtualAccountPasswordSet_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{e} = TalkException->new();
        $xfer += $self->{e}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('AccountSupervisorService_requestVirtualAccountPasswordSet_result');
  if (defined $self->{e}) {
    $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
    $xfer += $self->{e}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package AccountSupervisorService_unregisterVirtualAccount_args;
use base qw(Class::Accessor);
AccountSupervisorService_unregisterVirtualAccount_args->mk_accessors( qw( virtualMid ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{virtualMid} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{virtualMid}) {
      $self->{virtualMid} = $vals->{virtualMid};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'AccountSupervisorService_unregisterVirtualAccount_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{virtualMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('AccountSupervisorService_unregisterVirtualAccount_args');
  if (defined $self->{virtualMid}) {
    $xfer += $output->writeFieldBegin('virtualMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{virtualMid});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package AccountSupervisorService_unregisterVirtualAccount_result;
use base qw(Class::Accessor);
AccountSupervisorService_unregisterVirtualAccount_result->mk_accessors( qw( ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{e} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{e}) {
      $self->{e} = $vals->{e};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'AccountSupervisorService_unregisterVirtualAccount_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{e} = TalkException->new();
        $xfer += $self->{e}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('AccountSupervisorService_unregisterVirtualAccount_result');
  if (defined $self->{e}) {
    $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
    $xfer += $self->{e}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package AccountSupervisorServiceIf;

use strict;


sub getRSAKey{
  my $self = shift;

  die 'implement interface';
}

sub notifyEmailConfirmationResult{
  my $self = shift;
  my $parameterMap = shift;

  die 'implement interface';
}

sub registerVirtualAccount{
  my $self = shift;
  my $locale = shift;
  my $encryptedVirtualUserId = shift;
  my $encryptedPassword = shift;

  die 'implement interface';
}

sub requestVirtualAccountPasswordChange{
  my $self = shift;
  my $virtualMid = shift;
  my $encryptedVirtualUserId = shift;
  my $encryptedOldPassword = shift;
  my $encryptedNewPassword = shift;

  die 'implement interface';
}

sub requestVirtualAccountPasswordSet{
  my $self = shift;
  my $virtualMid = shift;
  my $encryptedVirtualUserId = shift;
  my $encryptedNewPassword = shift;

  die 'implement interface';
}

sub unregisterVirtualAccount{
  my $self = shift;
  my $virtualMid = shift;

  die 'implement interface';
}

package AccountSupervisorServiceRest;

use strict;


sub new {
  my ($classname, $impl) = @_;
  my $self     ={ impl => $impl };

  return bless($self,$classname);
}

sub getRSAKey{
  my ($self, $request) = @_;

  return $self->{impl}->getRSAKey();
}

sub notifyEmailConfirmationResult{
  my ($self, $request) = @_;

  my $parameterMap = ($request->{'parameterMap'}) ? $request->{'parameterMap'} : undef;
  return $self->{impl}->notifyEmailConfirmationResult($parameterMap);
}

sub registerVirtualAccount{
  my ($self, $request) = @_;

  my $locale = ($request->{'locale'}) ? $request->{'locale'} : undef;
  my $encryptedVirtualUserId = ($request->{'encryptedVirtualUserId'}) ? $request->{'encryptedVirtualUserId'} : undef;
  my $encryptedPassword = ($request->{'encryptedPassword'}) ? $request->{'encryptedPassword'} : undef;
  return $self->{impl}->registerVirtualAccount($locale, $encryptedVirtualUserId, $encryptedPassword);
}

sub requestVirtualAccountPasswordChange{
  my ($self, $request) = @_;

  my $virtualMid = ($request->{'virtualMid'}) ? $request->{'virtualMid'} : undef;
  my $encryptedVirtualUserId = ($request->{'encryptedVirtualUserId'}) ? $request->{'encryptedVirtualUserId'} : undef;
  my $encryptedOldPassword = ($request->{'encryptedOldPassword'}) ? $request->{'encryptedOldPassword'} : undef;
  my $encryptedNewPassword = ($request->{'encryptedNewPassword'}) ? $request->{'encryptedNewPassword'} : undef;
  return $self->{impl}->requestVirtualAccountPasswordChange($virtualMid, $encryptedVirtualUserId, $encryptedOldPassword, $encryptedNewPassword);
}

sub requestVirtualAccountPasswordSet{
  my ($self, $request) = @_;

  my $virtualMid = ($request->{'virtualMid'}) ? $request->{'virtualMid'} : undef;
  my $encryptedVirtualUserId = ($request->{'encryptedVirtualUserId'}) ? $request->{'encryptedVirtualUserId'} : undef;
  my $encryptedNewPassword = ($request->{'encryptedNewPassword'}) ? $request->{'encryptedNewPassword'} : undef;
  return $self->{impl}->requestVirtualAccountPasswordSet($virtualMid, $encryptedVirtualUserId, $encryptedNewPassword);
}

sub unregisterVirtualAccount{
  my ($self, $request) = @_;

  my $virtualMid = ($request->{'virtualMid'}) ? $request->{'virtualMid'} : undef;
  return $self->{impl}->unregisterVirtualAccount($virtualMid);
}

package AccountSupervisorServiceClient;


use base qw(AccountSupervisorServiceIf);
sub new {
  my ($classname, $input, $output) = @_;
  my $self      = {};
  $self->{input}  = $input;
  $self->{output} = defined $output ? $output : $input;
  $self->{seqid}  = 0;
  return bless($self,$classname);
}

sub getRSAKey{
  my $self = shift;

    $self->send_getRSAKey();
  return $self->recv_getRSAKey();
}

sub send_getRSAKey{
  my $self = shift;

  $self->{output}->writeMessageBegin('getRSAKey', Thrift::TMessageType::CALL, $self->{seqid});
  my $args = new AccountSupervisorService_getRSAKey_args();
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_getRSAKey{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == Thrift::TMessageType::EXCEPTION) {
    my $x = new Thrift::TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new AccountSupervisorService_getRSAKey_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{e}) {
    die $result->{e};
  }
  die "getRSAKey failed: unknown result";
}
sub notifyEmailConfirmationResult{
  my $self = shift;
  my $parameterMap = shift;

    $self->send_notifyEmailConfirmationResult($parameterMap);
  $self->recv_notifyEmailConfirmationResult();
}

sub send_notifyEmailConfirmationResult{
  my $self = shift;
  my $parameterMap = shift;

  $self->{output}->writeMessageBegin('notifyEmailConfirmationResult', Thrift::TMessageType::CALL, $self->{seqid});
  my $args = new AccountSupervisorService_notifyEmailConfirmationResult_args();
  $args->{parameterMap} = $parameterMap;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_notifyEmailConfirmationResult{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == Thrift::TMessageType::EXCEPTION) {
    my $x = new Thrift::TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new AccountSupervisorService_notifyEmailConfirmationResult_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{e}) {
    die $result->{e};
  }
  return;
}
sub registerVirtualAccount{
  my $self = shift;
  my $locale = shift;
  my $encryptedVirtualUserId = shift;
  my $encryptedPassword = shift;

    $self->send_registerVirtualAccount($locale, $encryptedVirtualUserId, $encryptedPassword);
  return $self->recv_registerVirtualAccount();
}

sub send_registerVirtualAccount{
  my $self = shift;
  my $locale = shift;
  my $encryptedVirtualUserId = shift;
  my $encryptedPassword = shift;

  $self->{output}->writeMessageBegin('registerVirtualAccount', Thrift::TMessageType::CALL, $self->{seqid});
  my $args = new AccountSupervisorService_registerVirtualAccount_args();
  $args->{locale} = $locale;
  $args->{encryptedVirtualUserId} = $encryptedVirtualUserId;
  $args->{encryptedPassword} = $encryptedPassword;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_registerVirtualAccount{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == Thrift::TMessageType::EXCEPTION) {
    my $x = new Thrift::TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new AccountSupervisorService_registerVirtualAccount_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{e}) {
    die $result->{e};
  }
  die "registerVirtualAccount failed: unknown result";
}
sub requestVirtualAccountPasswordChange{
  my $self = shift;
  my $virtualMid = shift;
  my $encryptedVirtualUserId = shift;
  my $encryptedOldPassword = shift;
  my $encryptedNewPassword = shift;

    $self->send_requestVirtualAccountPasswordChange($virtualMid, $encryptedVirtualUserId, $encryptedOldPassword, $encryptedNewPassword);
  $self->recv_requestVirtualAccountPasswordChange();
}

sub send_requestVirtualAccountPasswordChange{
  my $self = shift;
  my $virtualMid = shift;
  my $encryptedVirtualUserId = shift;
  my $encryptedOldPassword = shift;
  my $encryptedNewPassword = shift;

  $self->{output}->writeMessageBegin('requestVirtualAccountPasswordChange', Thrift::TMessageType::CALL, $self->{seqid});
  my $args = new AccountSupervisorService_requestVirtualAccountPasswordChange_args();
  $args->{virtualMid} = $virtualMid;
  $args->{encryptedVirtualUserId} = $encryptedVirtualUserId;
  $args->{encryptedOldPassword} = $encryptedOldPassword;
  $args->{encryptedNewPassword} = $encryptedNewPassword;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_requestVirtualAccountPasswordChange{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == Thrift::TMessageType::EXCEPTION) {
    my $x = new Thrift::TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new AccountSupervisorService_requestVirtualAccountPasswordChange_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{e}) {
    die $result->{e};
  }
  return;
}
sub requestVirtualAccountPasswordSet{
  my $self = shift;
  my $virtualMid = shift;
  my $encryptedVirtualUserId = shift;
  my $encryptedNewPassword = shift;

    $self->send_requestVirtualAccountPasswordSet($virtualMid, $encryptedVirtualUserId, $encryptedNewPassword);
  $self->recv_requestVirtualAccountPasswordSet();
}

sub send_requestVirtualAccountPasswordSet{
  my $self = shift;
  my $virtualMid = shift;
  my $encryptedVirtualUserId = shift;
  my $encryptedNewPassword = shift;

  $self->{output}->writeMessageBegin('requestVirtualAccountPasswordSet', Thrift::TMessageType::CALL, $self->{seqid});
  my $args = new AccountSupervisorService_requestVirtualAccountPasswordSet_args();
  $args->{virtualMid} = $virtualMid;
  $args->{encryptedVirtualUserId} = $encryptedVirtualUserId;
  $args->{encryptedNewPassword} = $encryptedNewPassword;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_requestVirtualAccountPasswordSet{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == Thrift::TMessageType::EXCEPTION) {
    my $x = new Thrift::TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new AccountSupervisorService_requestVirtualAccountPasswordSet_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{e}) {
    die $result->{e};
  }
  return;
}
sub unregisterVirtualAccount{
  my $self = shift;
  my $virtualMid = shift;

    $self->send_unregisterVirtualAccount($virtualMid);
  $self->recv_unregisterVirtualAccount();
}

sub send_unregisterVirtualAccount{
  my $self = shift;
  my $virtualMid = shift;

  $self->{output}->writeMessageBegin('unregisterVirtualAccount', Thrift::TMessageType::CALL, $self->{seqid});
  my $args = new AccountSupervisorService_unregisterVirtualAccount_args();
  $args->{virtualMid} = $virtualMid;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_unregisterVirtualAccount{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == Thrift::TMessageType::EXCEPTION) {
    my $x = new Thrift::TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new AccountSupervisorService_unregisterVirtualAccount_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{e}) {
    die $result->{e};
  }
  return;
}
package AccountSupervisorServiceProcessor;

use strict;


sub new {
    my ($classname, $handler) = @_;
    my $self      = {};
    $self->{handler} = $handler;
    return bless ($self, $classname);
}

sub process {
    my ($self, $input, $output) = @_;
    my $rseqid = 0;
    my $fname  = undef;
    my $mtype  = 0;

    $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
    my $methodname = 'process_'.$fname;
    if (!$self->can($methodname)) {
      $input->skip(Thrift::TType::STRUCT);
      $input->readMessageEnd();
      my $x = new Thrift::TApplicationException('Function '.$fname.' not implemented.', Thrift::TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, Thrift::TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $self->$methodname($rseqid, $input, $output);
    return 1;
}

sub process_getRSAKey {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new AccountSupervisorService_getRSAKey_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new AccountSupervisorService_getRSAKey_result();
    eval {
      $result->{success} = $self->{handler}->getRSAKey();
    }; if( UNIVERSAL::isa($@,'TalkException') ){ 
      $result->{e} = $@;
      $@ = undef;
    }
    if ($@) {
      $@ =~ s/^\s+|\s+$//g;
      my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
      $output->writeMessageBegin('getRSAKey', Thrift::TMessageType::EXCEPTION, $seqid);
      $err->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      $@ = undef;
      return;
    }
    $output->writeMessageBegin('getRSAKey', Thrift::TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_notifyEmailConfirmationResult {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new AccountSupervisorService_notifyEmailConfirmationResult_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new AccountSupervisorService_notifyEmailConfirmationResult_result();
    eval {
      $self->{handler}->notifyEmailConfirmationResult($args->parameterMap);
    }; if( UNIVERSAL::isa($@,'TalkException') ){ 
      $result->{e} = $@;
      $@ = undef;
    }
    if ($@) {
      $@ =~ s/^\s+|\s+$//g;
      my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
      $output->writeMessageBegin('notifyEmailConfirmationResult', Thrift::TMessageType::EXCEPTION, $seqid);
      $err->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      $@ = undef;
      return;
    }
    $output->writeMessageBegin('notifyEmailConfirmationResult', Thrift::TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_registerVirtualAccount {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new AccountSupervisorService_registerVirtualAccount_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new AccountSupervisorService_registerVirtualAccount_result();
    eval {
      $result->{success} = $self->{handler}->registerVirtualAccount($args->locale, $args->encryptedVirtualUserId, $args->encryptedPassword);
    }; if( UNIVERSAL::isa($@,'TalkException') ){ 
      $result->{e} = $@;
      $@ = undef;
    }
    if ($@) {
      $@ =~ s/^\s+|\s+$//g;
      my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
      $output->writeMessageBegin('registerVirtualAccount', Thrift::TMessageType::EXCEPTION, $seqid);
      $err->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      $@ = undef;
      return;
    }
    $output->writeMessageBegin('registerVirtualAccount', Thrift::TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_requestVirtualAccountPasswordChange {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new AccountSupervisorService_requestVirtualAccountPasswordChange_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new AccountSupervisorService_requestVirtualAccountPasswordChange_result();
    eval {
      $self->{handler}->requestVirtualAccountPasswordChange($args->virtualMid, $args->encryptedVirtualUserId, $args->encryptedOldPassword, $args->encryptedNewPassword);
    }; if( UNIVERSAL::isa($@,'TalkException') ){ 
      $result->{e} = $@;
      $@ = undef;
    }
    if ($@) {
      $@ =~ s/^\s+|\s+$//g;
      my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
      $output->writeMessageBegin('requestVirtualAccountPasswordChange', Thrift::TMessageType::EXCEPTION, $seqid);
      $err->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      $@ = undef;
      return;
    }
    $output->writeMessageBegin('requestVirtualAccountPasswordChange', Thrift::TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_requestVirtualAccountPasswordSet {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new AccountSupervisorService_requestVirtualAccountPasswordSet_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new AccountSupervisorService_requestVirtualAccountPasswordSet_result();
    eval {
      $self->{handler}->requestVirtualAccountPasswordSet($args->virtualMid, $args->encryptedVirtualUserId, $args->encryptedNewPassword);
    }; if( UNIVERSAL::isa($@,'TalkException') ){ 
      $result->{e} = $@;
      $@ = undef;
    }
    if ($@) {
      $@ =~ s/^\s+|\s+$//g;
      my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
      $output->writeMessageBegin('requestVirtualAccountPasswordSet', Thrift::TMessageType::EXCEPTION, $seqid);
      $err->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      $@ = undef;
      return;
    }
    $output->writeMessageBegin('requestVirtualAccountPasswordSet', Thrift::TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_unregisterVirtualAccount {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new AccountSupervisorService_unregisterVirtualAccount_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new AccountSupervisorService_unregisterVirtualAccount_result();
    eval {
      $self->{handler}->unregisterVirtualAccount($args->virtualMid);
    }; if( UNIVERSAL::isa($@,'TalkException') ){ 
      $result->{e} = $@;
      $@ = undef;
    }
    if ($@) {
      $@ =~ s/^\s+|\s+$//g;
      my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
      $output->writeMessageBegin('unregisterVirtualAccount', Thrift::TMessageType::EXCEPTION, $seqid);
      $err->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      $@ = undef;
      return;
    }
    $output->writeMessageBegin('unregisterVirtualAccount', Thrift::TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

1;
