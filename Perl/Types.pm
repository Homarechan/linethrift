#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
use 5.10.0;
use strict;
use warnings;
use Thrift::Exception;
use Thrift::MessageType;
use Thrift::Type;

package ApplicationType;
use constant IOS => 16;
use constant IOS_RC => 17;
use constant IOS_BETA => 18;
use constant IOS_ALPHA => 19;
use constant ANDROID => 32;
use constant ANDROID_RC => 33;
use constant ANDROID_BETA => 34;
use constant ANDROID_ALPHA => 35;
use constant WAP => 48;
use constant WAP_RC => 49;
use constant WAP_BETA => 50;
use constant WAP_ALPHA => 51;
use constant BOT => 64;
use constant BOT_RC => 65;
use constant BOT_BETA => 66;
use constant BOT_ALPHA => 67;
use constant WEB => 80;
use constant WEB_RC => 81;
use constant WEB_BETA => 82;
use constant WEB_ALPHA => 83;
use constant DESKTOPWIN => 96;
use constant DESKTOPWIN_RC => 97;
use constant DESKTOPWIN_BETA => 98;
use constant DESKTOPWIN_ALPHA => 99;
use constant DESKTOPMAC => 112;
use constant DESKTOPMAC_RC => 113;
use constant DESKTOPMAC_BETA => 114;
use constant DESKTOPMAC_ALPHA => 115;
use constant CHANNELGW => 128;
use constant CHANNELGW_RC => 129;
use constant CHANNELGW_BETA => 130;
use constant CHANNELGW_ALPHA => 131;
use constant CHANNELCP => 144;
use constant CHANNELCP_RC => 145;
use constant CHANNELCP_BETA => 146;
use constant CHANNELCP_ALPHA => 147;
use constant WINPHONE => 160;
use constant WINPHONE_RC => 161;
use constant WINPHONE_BETA => 162;
use constant WINPHONE_ALPHA => 163;
use constant BLACKBERRY => 176;
use constant BLACKBERRY_RC => 177;
use constant BLACKBERRY_BETA => 178;
use constant BLACKBERRY_ALPHA => 179;
use constant WINMETRO => 192;
use constant WINMETRO_RC => 193;
use constant WINMETRO_BETA => 194;
use constant WINMETRO_ALPHA => 195;
use constant S40 => 208;
use constant S40_RC => 209;
use constant S40_BETA => 210;
use constant S40_ALPHA => 211;
use constant CHRONO => 224;
use constant CHRONO_RC => 225;
use constant CHRONO_BETA => 226;
use constant CHRONO_ALPHA => 227;
use constant TIZEN => 256;
use constant TIZEN_RC => 257;
use constant TIZEN_BETA => 258;
use constant TIZEN_ALPHA => 259;
use constant VIRTUAL => 272;
use constant FIREFOXOS => 288;
use constant FIREFOXOS_RC => 289;
use constant FIREFOXOS_BETA => 290;
use constant FIREFOXOS_ALPHA => 291;
use constant IOSIPAD => 304;
use constant IOSIPAD_RC => 305;
use constant IOSIPAD_BETA => 306;
use constant IOSIPAD_ALPHA => 307;
use constant BIZIOS => 320;
use constant BIZIOS_RC => 321;
use constant BIZIOS_BETA => 322;
use constant BIZIOS_ALPHA => 323;
use constant BIZANDROID => 336;
use constant BIZANDROID_RC => 337;
use constant BIZANDROID_BETA => 338;
use constant BIZANDROID_ALPHA => 339;
use constant BIZBOT => 352;
use constant BIZBOT_RC => 353;
use constant BIZBOT_BETA => 354;
use constant BIZBOT_ALPHA => 355;
use constant CHROMEOS => 368;
use constant CHROMEOS_RC => 369;
use constant CHROMEOS_BETA => 370;
use constant CHROMEOS_ALPHA => 371;
use constant ANDROIDLITE => 384;
use constant ANDROIDLITE_RC => 385;
use constant ANDROIDLITE_BETA => 386;
use constant ANDROIDLITE_ALPHA => 387;
use constant WIN10 => 400;
use constant WIN10_RC => 401;
use constant WIN10_BETA => 402;
use constant WIN10_ALPHA => 403;
use constant BIZWEB => 416;
use constant BIZWEB_RC => 417;
use constant BIZWEB_BETA => 418;
use constant BIZWEB_ALPHA => 419;
use constant DUMMYPRIMARY => 432;
use constant DUMMYPRIMARY_RC => 433;
use constant DUMMYPRIMARY_BETA => 434;
use constant DUMMYPRIMARY_ALPHA => 435;
use constant SQUARE => 448;
use constant SQUARE_RC => 449;
use constant SQUARE_BETA => 450;
use constant SQUARE_ALPHA => 451;
use constant INTERNAL => 464;
use constant INTERNAL_RC => 465;
use constant INTERNAL_BETA => 466;
use constant INTERNAL_ALPHA => 467;
use constant CLOVAFRIENDS => 480;
use constant CLOVAFRIENDS_RC => 481;
use constant CLOVAFRIENDS_BETA => 482;
use constant CLOVAFRIENDS_ALPHA => 483;
package ExtendedProfileAttribute;
package PrivacyLevelType;
use constant PUBLIC => 0;
use constant PRIVATE => 1;
package PaidCallerIdStatus;
use constant NOT_SPECIFIED => 0;
use constant VALID => 1;
use constant VERIFICATION_REQUIRED => 2;
use constant NOT_PERMITTED => 3;
use constant LIMIT_EXCEEDED => 4;
use constant LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED => 5;
package PaidCallProductType;
use constant COIN => 0;
use constant CREDIT => 1;
use constant MONTHLY => 2;
package PaidCallType;
use constant OUT => 0;
use constant IN => 1;
use constant TOLLFREE => 2;
use constant RECORD => 3;
use constant AD => 4;
use constant CS => 5;
package BotType;
use constant RESERVED => 0;
use constant OFFICIAL => 1;
use constant LINE_AT_0 => 2;
use constant LINE_AT => 3;
package BuddyOnAirLabel;
use constant ON_AIR => 0;
use constant LIVE => 1;
package BuddyBannerLinkType;
use constant BUDDY_BANNER_LINK_HIDDEN => 0;
use constant BUDDY_BANNER_LINK_MID => 1;
use constant BUDDY_BANNER_LINK_URL => 2;
package BuddyOnAirType;
use constant NORMAL => 0;
use constant LIVE => 1;
use constant VOIP => 2;
package Diff;
use constant ADDED => 0;
use constant UPDATED => 1;
use constant REMOVED => 2;
package ReportType;
use constant ADVERTISING => 1;
use constant GENDER_HARASSMENT => 2;
use constant HARASSMENT => 3;
use constant OTHER => 4;
package SyncTriggerReason;
use constant OTHER => 0;
use constant REVISION_GAP_TOO_LARGE => 1;
use constant OPERATION_EXPIRED => 2;
package ReportCategory;
use constant PUSH_NORMAL_PLAIN => 0;
use constant PUSH_NORMAL_E2EE => 1;
use constant PUSH_VOIP_PLAIN => 2;
use constant PUSH_VOIP_E2EE => 3;
package BuddyResultState;
use constant ACCEPTED => 1;
use constant SUCCEEDED => 2;
use constant FAILED => 3;
use constant CANCELLED => 4;
use constant NOTIFY_FAILED => 5;
use constant STORING => 11;
use constant UPLOADING => 21;
use constant NOTIFYING => 31;
use constant REMOVING_SUBSCRIPTION => 41;
use constant UNREGISTERING_ACCOUNT => 42;
use constant NOTIFYING_LEAVE_CHAT => 43;
package BuddySearchRequestSource;
use constant NA => 0;
use constant FRIEND_VIEW => 1;
use constant OFFICIAL_ACCOUNT_VIEW => 2;
package CarrierCode;
use constant NOT_SPECIFIED => 0;
use constant JP_DOCOMO => 1;
use constant JP_AU => 2;
use constant JP_SOFTBANK => 3;
use constant JP_DOCOMO_LINE => 4;
use constant KR_SKT => 17;
use constant KR_KT => 18;
use constant KR_LGT => 19;
package ChannelConfiguration;
use constant MESSAGE => 0;
use constant MESSAGE_NOTIFICATION => 1;
use constant NOTIFICATION_CENTER => 2;
package ChannelPermission;
use constant PROFILE => 0;
use constant FRIENDS => 1;
use constant GROUP => 2;
package ChannelFeatureLicense;
use constant BLE_LCS_API_USABLE => 26;
use constant PROHIBIT_MINIMIZE_CHANNEL_BROWSER => 27;
use constant ALLOW_IOS_WEBKIT => 28;
package ChannelErrorCode;
use constant ILLEGAL_ARGUMENT => 0;
use constant INTERNAL_ERROR => 1;
use constant CONNECTION_ERROR => 2;
use constant AUTHENTICATIONI_FAILED => 3;
use constant NEED_PERMISSION_APPROVAL => 4;
use constant COIN_NOT_USABLE => 5;
use constant WEBVIEW_NOT_ALLOWED => 6;
package ChannelSyncType;
use constant SYNC => 0;
use constant REMOVE => 1;
use constant REMOVE_ALL => 2;
package LoginType;
use constant ID_CREDENTIAL => 0;
use constant QRCODE => 1;
use constant ID_CREDENTIAL_WITH_E2EE => 2;
package ContactAttribute;
use constant CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL => 1;
use constant CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL => 2;
use constant CONTACT_ATTRIBUTE_CAPABLE_MY_HOME => 16;
use constant CONTACT_ATTRIBUTE_CAPABLE_BUDDY => 32;
package ContactCategory;
use constant NORMAL => 0;
use constant RECOMMEND => 1;
package ContactRelation;
use constant ONEWAY => 0;
use constant BOTH => 1;
use constant NOT_REGISTERED => 2;
package AsymmetricKeyAlgorithm;
use constant ASYMMETRIC_KEY_ALGORITHM_RSA => 1;
use constant ASYMMETRIC_KEY_ALGORITHM_ECDH => 2;
package ContactSetting;
use constant CONTACT_SETTING_NOTIFICATION_DISABLE => 1;
use constant CONTACT_SETTING_DISPLAY_NAME_OVERRIDE => 2;
use constant CONTACT_SETTING_CONTACT_HIDE => 4;
use constant CONTACT_SETTING_FAVORITE => 8;
use constant CONTACT_SETTING_DELETE => 16;
package ContactStatus;
use constant UNSPECIFIED => 0;
use constant FRIEND => 1;
use constant FRIEND_BLOCKED => 2;
use constant RECOMMEND => 3;
use constant RECOMMEND_BLOCKED => 4;
use constant DELETED => 5;
use constant DELETED_BLOCKED => 6;
package ContactType;
use constant MID => 0;
use constant PHONE => 1;
use constant EMAIL => 2;
use constant USERID => 3;
use constant PROXIMITY => 4;
use constant GROUP => 5;
use constant USER => 6;
use constant QRCODE => 7;
use constant PROMOTION_BOT => 8;
use constant CONTACT_MESSAGE => 9;
use constant FRIEND_REQUEST => 10;
use constant REPAIR => 128;
use constant FACEBOOK => 2305;
use constant SINA => 2306;
use constant RENREN => 2307;
use constant FEIXIN => 2308;
use constant BBM => 2309;
use constant BEACON => 11;
package GroupPreferenceAttribute;
use constant INVITATION_TICKET => 1;
use constant FAVORITE_TIMESTAMP => 2;
package ContentType;
use constant NONE => 0;
use constant IMAGE => 1;
use constant VIDEO => 2;
use constant AUDIO => 3;
use constant HTML => 4;
use constant PDF => 5;
use constant CALL => 6;
use constant STICKER => 7;
use constant PRESENCE => 8;
use constant GIFT => 9;
use constant GROUPBOARD => 10;
use constant APPLINK => 11;
use constant LINK => 12;
use constant CONTACT => 13;
use constant FILE => 14;
use constant LOCATION => 15;
use constant POSTNOTIFICATION => 16;
use constant RICH => 17;
use constant CHATEVENT => 18;
use constant MUSIC => 19;
use constant PAYMENT => 20;
use constant EXTIMAGE => 21;
package MessageRelationType;
use constant FORWARD => 0;
use constant AUTO_REPLY => 1;
use constant SUBORDINATE => 2;
package CustomMode;
use constant PROMOTION_FRIENDS_INVITE => 1;
use constant CAPABILITY_SERVER_SIDE_SMS => 2;
use constant LINE_CLIENT_ANALYTICS_CONFIGURATION => 3;
package RoomAttribute;
use constant ALL => 255;
use constant NOTIFICATION_SETTING => 1;
package UserStatus;
use constant NORMAL => 0;
use constant UNBOUND => 1;
use constant UNREGISTERED => 2;
package EmailConfirmationStatus;
use constant NOT_SPECIFIED => 0;
use constant NOT_YET => 1;
use constant DONE => 3;
use constant NEED_ENFORCED_INPUT => 4;
package AccountMigrationPincodeType;
use constant NOT_APPLICABLE => 0;
use constant NOT_SET => 1;
use constant SET => 2;
use constant NEED_ENFORCED_INPUT => 3;
package AccountMigrationCheckType;
use constant SKIP => 0;
use constant PINCODE => 1;
use constant SECURITY_CENTER => 2;
package SecurityCenterSettingsType;
use constant NOT_APPLICABLE => 0;
use constant NOT_SET => 1;
use constant SET => 2;
use constant NEED_ENFORCED_INPUT => 3;
package EmailConfirmationType;
use constant SERVER_SIDE_EMAIL => 0;
use constant CLIENT_SIDE_EMAIL => 1;
package SquareChatAnnouncementType;
use constant TEXT_MESSAGE => 0;
package SquareChatAttribute;
use constant NAME => 2;
use constant SQUARE_CHAT_IMAGE => 3;
use constant STATE => 4;
package SquareMemberAttribute;
use constant DISPLAY_NAME => 1;
use constant PROFILE_IMAGE => 2;
use constant ABLE_TO_RECEIVE_MESSAGE => 3;
use constant MEMBERSHIP_STATE => 5;
use constant ROLE => 6;
use constant PREFERENCE => 7;
package SquareMemberRelationAttribute;
use constant BLOCKED => 1;
package SquarePreferenceAttribute;
use constant FAVORITE => 1;
use constant NOTI_FOR_NEW_JOIN_REQUEST => 2;
package SquareState;
use constant ALIVE => 0;
use constant DELETED => 1;
use constant SUSPENDED => 2;
package CommitMessageResultCode;
use constant DELIVERED => 0;
use constant DELIVERY_SKIPPED => 1;
use constant DELIVERY_RESTRICTED => 2;
package ErrorCode;
use constant ILLEGAL_ARGUMENT => 0;
use constant AUTHENTICATION_FAILED => 1;
use constant DB_FAILED => 2;
use constant INVALID_STATE => 3;
use constant EXCESSIVE_ACCESS => 4;
use constant NOT_FOUND => 5;
use constant INVALID_MID => 9;
use constant NOT_A_MEMBER => 10;
use constant INVALID_LENGTH => 6;
use constant NOT_AVAILABLE_USER => 7;
use constant NOT_AUTHORIZED_DEVICE => 8;
use constant NOT_AUTHORIZED_SESSION => 14;
use constant INCOMPATIBLE_APP_VERSION => 11;
use constant NOT_READY => 12;
use constant NOT_AVAILABLE_SESSION => 13;
use constant SYSTEM_ERROR => 15;
use constant NO_AVAILABLE_VERIFICATION_METHOD => 16;
use constant NOT_AUTHENTICATED => 17;
use constant INVALID_IDENTITY_CREDENTIAL => 18;
use constant NOT_AVAILABLE_IDENTITY_IDENTIFIER => 19;
use constant INTERNAL_ERROR => 20;
use constant NO_SUCH_IDENTITY_IDENFIER => 21;
use constant DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY => 22;
use constant ILLEGAL_IDENTITY_CREDENTIAL => 23;
use constant UNKNOWN_CHANNEL => 24;
use constant NO_SUCH_MESSAGE_BOX => 25;
use constant NOT_AVAILABLE_MESSAGE_BOX => 26;
use constant CHANNEL_DOES_NOT_MATCH => 27;
use constant NOT_YOUR_MESSAGE => 28;
use constant MESSAGE_DEFINED_ERROR => 29;
use constant USER_CANNOT_ACCEPT_PRESENTS => 30;
use constant USER_NOT_STICKER_OWNER => 32;
use constant MAINTENANCE_ERROR => 33;
use constant ACCOUNT_NOT_MATCHED => 34;
use constant ABUSE_BLOCK => 35;
use constant NOT_FRIEND => 36;
use constant NOT_ALLOWED_CALL => 37;
use constant BLOCK_FRIEND => 38;
use constant INCOMPATIBLE_VOIP_VERSION => 39;
use constant INVALID_SNS_ACCESS_TOKEN => 40;
use constant EXTERNAL_SERVICE_NOT_AVAILABLE => 41;
use constant NOT_ALLOWED_ADD_CONTACT => 42;
use constant NOT_CERTIFICATED => 43;
use constant NOT_ALLOWED_SECONDARY_DEVICE => 44;
use constant INVALID_PIN_CODE => 45;
use constant NOT_FOUND_IDENTITY_CREDENTIAL => 46;
use constant EXCEED_FILE_MAX_SIZE => 47;
use constant EXCEED_DAILY_QUOTA => 48;
use constant NOT_SUPPORT_SEND_FILE => 49;
use constant MUST_UPGRADE => 50;
use constant NOT_AVAILABLE_PIN_CODE_SESSION => 51;
use constant EXPIRED_REVISION => 52;
use constant NOT_YET_PHONE_NUMBER => 54;
use constant BAD_CALL_NUMBER => 55;
use constant UNAVAILABLE_CALL_NUMBER => 56;
use constant NOT_SUPPORT_CALL_SERVICE => 57;
use constant CONGESTION_CONTROL => 58;
use constant NO_BALANCE => 59;
use constant NOT_PERMITTED_CALLER_ID => 60;
use constant NO_CALLER_ID_LIMIT_EXCEEDED => 61;
use constant CALLER_ID_VERIFICATION_REQUIRED => 62;
use constant NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED => 63;
use constant MESSAGE_NOT_FOUND => 64;
use constant INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT => 65;
use constant ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED => 66;
use constant ACCOUNT_MIGRATION_PINCODE_BLOCKED => 67;
use constant INVALID_PASSWORD_FORMAT => 69;
use constant FEATURE_RESTRICTED => 70;
use constant MESSAGE_NOT_DESTRUCTIBLE => 71;
use constant PAID_CALL_REDEEM_FAILED => 72;
use constant PREVENTED_JOIN_BY_TICKET => 73;
use constant SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT => 75;
use constant SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY => 76;
use constant SECURITY_CENTER_NOT_VERIFIED => 77;
use constant SECURITY_CENTER_BLOCKED_BY_SETTING => 78;
use constant SECURITY_CENTER_BLOCKED => 79;
use constant TALK_PROXY_EXCEPTION => 80;
use constant E2EE_INVALID_PROTOCOL => 81;
use constant E2EE_RETRY_ENCRYPT => 82;
use constant E2EE_UPDATE_SENDER_KEY => 83;
use constant E2EE_UPDATE_RECEIVER_KEY => 84;
use constant E2EE_INVALID_ARGUMENT => 85;
use constant E2EE_INVALID_VERSION => 86;
use constant E2EE_SENDER_DISABLED => 87;
use constant E2EE_RECEIVER_DISABLED => 88;
use constant E2EE_SENDER_NOT_ALLOWED => 89;
use constant E2EE_RECEIVER_NOT_ALLOWED => 90;
use constant E2EE_RESEND_FAIL => 91;
use constant E2EE_RESEND_OK => 92;
use constant HITOKOTO_BACKUP_NO_AVAILABLE_DATA => 93;
use constant E2EE_UPDATE_PRIMARY_DEVICE => 94;
use constant SUCCESS => 95;
use constant CANCEL => 96;
use constant E2EE_PRIMARY_NOT_SUPPORT => 97;
use constant E2EE_RETRY_PLAIN => 98;
use constant E2EE_RECREATE_GROUP_KEY => 99;
use constant E2EE_GROUP_TOO_MANY_MEMBERS => 100;
use constant SERVER_BUSY => 101;
use constant NOT_ALLOWED_ADD_FOLLOW => 102;
use constant INCOMING_FRIEND_REQUEST_LIMIT => 103;
use constant OUTGOING_FRIEND_REQUEST_LIMIT => 104;
use constant OUTGOING_FRIEND_REQUEST_QUOTA => 105;
use constant DUPLICATED => 106;
use constant BANNED => 107;
package FeatureType;
use constant OBS_VIDEO => 1;
use constant OBS_GENERAL => 2;
package GroupAttribute;
use constant NAME => 1;
use constant PICTURE_STATUS => 2;
use constant ALL => 255;
use constant PREVENTED_JOIN_BY_TICKET => 4;
use constant NOTIFICATION_SETTING => 8;
package IdentityProvider;
use constant UNKNOWN => 0;
use constant LINE => 1;
use constant NAVER_KR => 2;
use constant LINE_PHONE => 3;
package LoginResultType;
use constant SUCCESS => 1;
use constant REQUIRE_QRCODE => 2;
use constant REQUIRE_DEVICE_CONFIRM => 3;
use constant REQUIRE_SMS_CONFIRM => 4;
package MessageOperationType;
use constant SEND_MESSAGE => 1;
use constant RECEIVE_MESSAGE => 2;
use constant READ_MESSAGE => 3;
use constant NOTIFIED_READ_MESSAGE => 4;
use constant NOTIFIED_JOIN_CHAT => 5;
use constant FAILED_SEND_MESSAGE => 6;
use constant SEND_CONTENT => 7;
use constant SEND_CONTENT_RECEIPT => 8;
use constant SEND_CHAT_REMOVED => 9;
use constant REMOVE_ALL_MESSAGES => 10;
package MIDType;
use constant USER => 0;
use constant ROOM => 1;
use constant GROUP => 2;
use constant SQUARE => 3;
use constant SQUARE_CHAT => 4;
use constant SQUARE_MEMBER => 5;
use constant BOT => 6;
package ServiceCode;
use constant UNKNOWN => 0;
use constant TALK => 1;
use constant SQUARE => 2;
package FriendRequestDirection;
use constant INCOMING => 1;
use constant OUTGOING => 2;
package FriendRequestMethod;
use constant TIMELINE => 1;
use constant NEARBY => 2;
use constant SQUARE => 3;
package FriendRequestStatus;
use constant NONE => 0;
use constant AVAILABLE => 1;
use constant ALREADY_REQUESTED => 2;
use constant UNAVAILABLE => 3;
package ModificationType;
use constant ADD => 0;
use constant REMOVE => 1;
use constant MODIFY => 2;
package NotificationItemFetchMode;
use constant ALL => 0;
use constant APPEND => 1;
package NotificationQueueType;
use constant GLOBAL => 1;
use constant MESSAGE => 2;
use constant PRIMARY => 3;
package GroupCallMediaType;
use constant AUDIO => 1;
use constant VIDEO => 2;
package PersonalInfo;
use constant EMAIL => 0;
use constant PHONE => 1;
use constant BIRTHDAY => 2;
use constant RAW_BIRTHDAY => 3;
package NotificationStatus;
use constant NOTIFICATION_ITEM_EXIST => 1;
use constant TIMELINE_ITEM_EXIST => 2;
use constant NOTE_GROUP_NEW_ITEM_EXIST => 4;
use constant TIMELINE_BUDDYGROUP_CHANGED => 8;
use constant NOTE_ONE_TO_ONE_NEW_ITEM_EXIST => 16;
use constant ALBUM_ITEM_EXIST => 32;
use constant TIMELINE_ITEM_DELETED => 64;
use constant OTOGROUP_ITEM_EXIST => 128;
use constant GROUPHOME_NEW_ITEM_EXIST => 256;
use constant GROUPHOME_HIDDEN_ITEM_CHANGED => 512;
use constant NOTIFICATION_ITEM_CHANGED => 1024;
use constant BEAD_ITEM_HIDE => 2048;
use constant BEAD_ITEM_SHOW => 4096;
package NotificationType;
use constant APPLE_APNS => 1;
use constant GOOGLE_C2DM => 2;
use constant NHN_NNI => 3;
use constant SKT_AOM => 4;
use constant MS_MPNS => 5;
use constant RIM_BIS => 6;
use constant GOOGLE_GCM => 7;
use constant NOKIA_NNAPI => 8;
use constant TIZEN => 9;
use constant LINE_BOT => 17;
use constant LINE_WAP => 18;
use constant APPLE_APNS_VOIP => 19;
use constant MS_WNS => 20;
use constant GOOGLE_FCM => 21;
package OpStatus;
use constant NORMAL => 0;
use constant ALERT_DISABLED => 1;
use constant ALWAYS => 2;
package OpType;
use constant END_OF_OPERATION => 0;
use constant UPDATE_PROFILE => 1;
use constant UPDATE_SETTINGS => 36;
use constant NOTIFIED_UPDATE_PROFILE => 2;
use constant REGISTER_USERID => 3;
use constant ADD_CONTACT => 4;
use constant NOTIFIED_ADD_CONTACT => 5;
use constant BLOCK_CONTACT => 6;
use constant UNBLOCK_CONTACT => 7;
use constant NOTIFIED_RECOMMEND_CONTACT => 8;
use constant CREATE_GROUP => 9;
use constant UPDATE_GROUP => 10;
use constant NOTIFIED_UPDATE_GROUP => 11;
use constant INVITE_INTO_GROUP => 12;
use constant NOTIFIED_INVITE_INTO_GROUP => 13;
use constant CANCEL_INVITATION_GROUP => 31;
use constant NOTIFIED_CANCEL_INVITATION_GROUP => 32;
use constant LEAVE_GROUP => 14;
use constant NOTIFIED_LEAVE_GROUP => 15;
use constant ACCEPT_GROUP_INVITATION => 16;
use constant NOTIFIED_ACCEPT_GROUP_INVITATION => 17;
use constant REJECT_GROUP_INVITATION => 34;
use constant NOTIFIED_REJECT_GROUP_INVITATION => 35;
use constant KICKOUT_FROM_GROUP => 18;
use constant NOTIFIED_KICKOUT_FROM_GROUP => 19;
use constant CREATE_ROOM => 20;
use constant INVITE_INTO_ROOM => 21;
use constant NOTIFIED_INVITE_INTO_ROOM => 22;
use constant LEAVE_ROOM => 23;
use constant NOTIFIED_LEAVE_ROOM => 24;
use constant SEND_MESSAGE => 25;
use constant RECEIVE_MESSAGE => 26;
use constant SEND_MESSAGE_RECEIPT => 27;
use constant RECEIVE_MESSAGE_RECEIPT => 28;
use constant SEND_CONTENT_RECEIPT => 29;
use constant RECEIVE_ANNOUNCEMENT => 30;
use constant NOTIFIED_UNREGISTER_USER => 33;
use constant INVITE_VIA_EMAIL => 38;
use constant NOTIFIED_REGISTER_USER => 37;
use constant NOTIFIED_REQUEST_RECOVERY => 39;
use constant SEND_CHAT_CHECKED => 40;
use constant SEND_CHAT_REMOVED => 41;
use constant NOTIFIED_FORCE_SYNC => 42;
use constant SEND_CONTENT => 43;
use constant SEND_MESSAGE_MYHOME => 44;
use constant NOTIFIED_UPDATE_CONTENT_PREVIEW => 45;
use constant REMOVE_ALL_MESSAGES => 46;
use constant NOTIFIED_UPDATE_PURCHASES => 47;
use constant DUMMY => 48;
use constant UPDATE_CONTACT => 49;
use constant NOTIFIED_RECEIVED_CALL => 50;
use constant CANCEL_CALL => 51;
use constant NOTIFIED_REDIRECT => 52;
use constant NOTIFIED_CHANNEL_SYNC => 53;
use constant FAILED_SEND_MESSAGE => 54;
use constant NOTIFIED_READ_MESSAGE => 55;
use constant FAILED_EMAIL_CONFIRMATION => 56;
use constant NOTIFIED_CHAT_CONTENT => 58;
use constant NOTIFIED_PUSH_NOTICENTER_ITEM => 59;
use constant NOTIFIED_JOIN_CHAT => 60;
use constant NOTIFIED_LEAVE_CHAT => 61;
use constant NOTIFIED_TYPING => 62;
use constant FRIEND_REQUEST_ACCEPTED => 63;
use constant DESTROY_MESSAGE => 64;
use constant NOTIFIED_DESTROY_MESSAGE => 65;
use constant UPDATE_PUBLICKEYCHAIN => 66;
use constant NOTIFIED_UPDATE_PUBLICKEYCHAIN => 67;
use constant NOTIFIED_BLOCK_CONTACT => 68;
use constant NOTIFIED_UNBLOCK_CONTACT => 69;
use constant UPDATE_GROUPPREFERENCE => 70;
use constant NOTIFIED_PAYMENT_EVENT => 71;
use constant REGISTER_E2EE_PUBLICKEY => 72;
use constant NOTIFIED_E2EE_KEY_EXCHANGE_REQ => 73;
use constant NOTIFIED_E2EE_KEY_EXCHANGE_RESP => 74;
use constant NOTIFIED_E2EE_MESSAGE_RESEND_REQ => 75;
use constant NOTIFIED_E2EE_MESSAGE_RESEND_RESP => 76;
use constant NOTIFIED_E2EE_KEY_UPDATE => 77;
use constant NOTIFIED_BUDDY_UPDATE_PROFILE => 78;
use constant NOTIFIED_UPDATE_LINEAT_TABS => 79;
use constant UPDATE_ROOM => 80;
use constant NOTIFIED_BEACON_DETECTED => 81;
use constant UPDATE_EXTENDED_PROFILE => 82;
use constant ADD_FOLLOW => 83;
use constant NOTIFIED_ADD_FOLLOW => 84;
use constant DELETE_FOLLOW => 85;
use constant NOTIFIED_DELETE_FOLLOW => 86;
use constant UPDATE_TIMELINE_SETTINGS => 87;
use constant NOTIFIED_FRIEND_REQUEST => 88;
use constant UPDATE_RINGBACK_TONE => 89;
use constant NOTIFIED_POSTBACK => 90;
use constant RECEIVE_READ_WATERMARK => 91;
use constant NOTIFIED_MESSAGE_DELIVERED => 92;
use constant NOTIFIED_UPDATE_CHAT_BAR => 93;
use constant NOTIFIED_CHATAPP_INSTALLED => 94;
use constant NOTIFIED_CHATAPP_UPDATED => 95;
use constant NOTIFIED_CHATAPP_NEW_MARK => 96;
use constant NOTIFIED_CHATAPP_DELETED => 97;
use constant NOTIFIED_CHATAPP_SYNC => 98;
use constant NOTIFIED_UPDATE_MESSAGE => 99;
package PayloadType;
use constant PAYLOAD_BUY => 101;
use constant PAYLOAD_CS => 111;
use constant PAYLOAD_BONUS => 121;
use constant PAYLOAD_EVENT => 131;
package PaymentPgType;
use constant PAYMENT_PG_NONE => 0;
use constant PAYMENT_PG_AU => 1;
use constant PAYMENT_PG_AL => 2;
package PaymentType;
use constant PAYMENT_APPLE => 1;
use constant PAYMENT_GOOGLE => 2;
package ProductBannerLinkType;
use constant BANNER_LINK_NONE => 0;
use constant BANNER_LINK_ITEM => 1;
use constant BANNER_LINK_URL => 2;
use constant BANNER_LINK_CATEGORY => 3;
package ProductEventType;
use constant NO_EVENT => 0;
use constant CARRIER_ANY => 65537;
use constant BUDDY_ANY => 131073;
use constant INSTALL_IOS => 196609;
use constant INSTALL_ANDROID => 196610;
use constant MISSION_ANY => 262145;
use constant MUSTBUY_ANY => 327681;
package StickerResourceType;
use constant STATIC => 1;
use constant ANIMATION => 2;
use constant SOUND => 3;
use constant ANIMATION_SOUND => 4;
use constant POPUP => 5;
use constant POPUP_SOUND => 6;
package PlaceSearchProvider;
use constant GOOGLE => 0;
use constant BAIDU => 1;
package PointErrorCode;
use constant REQUEST_DUPLICATION => 3001;
use constant INVALID_PARAMETER => 3002;
use constant NOT_ENOUGH_BALANCE => 3003;
use constant AUTHENTICATION_FAIL => 3004;
use constant API_ACCESS_FORBIDDEN => 3005;
use constant MEMBER_ACCOUNT_NOT_FOUND => 3006;
use constant SERVICE_ACCOUNT_NOT_FOUND => 3007;
use constant TRANSACTION_NOT_FOUND => 3008;
use constant ALREADY_REVERSED_TRANSACTION => 3009;
use constant MESSAGE_NOT_READABLE => 3010;
use constant HTTP_REQUEST_METHOD_NOT_SUPPORTED => 3011;
use constant HTTP_MEDIA_TYPE_NOT_SUPPORTED => 3012;
use constant NOT_ALLOWED_TO_DEPOSIT => 3013;
use constant NOT_ALLOWED_TO_PAY => 3014;
use constant TRANSACTION_ACCESS_FORBIDDEN => 3015;
use constant INVALID_SERVICE_CONFIGURATION => 4001;
use constant DCS_COMMUNICATION_FAIL => 5004;
use constant UPDATE_BALANCE_FAIL => 5007;
use constant SYSTEM_ERROR => 5999;
use constant SYSTEM_MAINTENANCE => 5888;
package ProfileAttribute;
use constant ALL => 511;
use constant EMAIL => 1;
use constant DISPLAY_NAME => 2;
use constant PHONETIC_NAME => 4;
use constant PICTURE => 8;
use constant STATUS_MESSAGE => 16;
use constant ALLOW_SEARCH_BY_USERID => 32;
use constant ALLOW_SEARCH_BY_EMAIL => 64;
use constant BUDDY_STATUS => 128;
use constant MUSIC_PROFILE => 256;
package PublicType;
use constant HIDDEN => 0;
use constant PUBLIC => 1000;
package RedirectType;
use constant NONE => 0;
use constant EXPIRE_SECOND => 1;
package RegistrationType;
use constant PHONE => 0;
use constant EMAIL_WAP => 1;
use constant FACEBOOK => 2305;
use constant SINA => 2306;
use constant RENREN => 2307;
use constant FEIXIN => 2308;
package ChatRoomAnnouncementType;
use constant MESSAGE => 0;
use constant NOTE => 1;
package SettingsAttribute;
use constant ALL => 2147483647;
use constant NOTIFICATION_ENABLE => 1;
use constant NOTIFICATION_MUTE_EXPIRATION => 2;
use constant NOTIFICATION_NEW_MESSAGE => 4;
use constant NOTIFICATION_GROUP_INVITATION => 8;
use constant NOTIFICATION_SHOW_MESSAGE => 16;
use constant NOTIFICATION_INCOMING_CALL => 32;
use constant NOTIFICATION_SOUND_MESSAGE => 256;
use constant NOTIFICATION_SOUND_GROUP => 512;
use constant NOTIFICATION_DISABLED_WITH_SUB => 65536;
use constant NOTIFICATION_PAYMENT => 131072;
use constant PRIVACY_SYNC_CONTACTS => 64;
use constant PRIVACY_SEARCH_BY_PHONE_NUMBER => 128;
use constant PRIVACY_SEARCH_BY_USERID => 8192;
use constant PRIVACY_SEARCH_BY_EMAIL => 16384;
use constant PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN => 2097152;
use constant PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME => 8388608;
use constant PRIVACY_ALLOW_FRIEND_REQUEST => 1073741824;
use constant PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND => 33554432;
use constant PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL => 67108864;
use constant PRIVACY_AGREE_USE_PAIDCALL => 134217728;
use constant CONTACT_MY_TICKET => 1024;
use constant IDENTITY_PROVIDER => 2048;
use constant IDENTITY_IDENTIFIER => 4096;
use constant SNS_ACCOUNT => 524288;
use constant PHONE_REGISTRATION => 1048576;
use constant PREFERENCE_LOCALE => 32768;
use constant CUSTOM_MODE => 4194304;
use constant EMAIL_CONFIRMATION_STATUS => 16777216;
use constant ACCOUNT_MIGRATION_PINCODE => 268435456;
use constant ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE => 536870912;
use constant SECURITY_CENTER_SETTINGS => 262144;
package SettingsAttributeEx;
use constant NOTIFICATION_ENABLE => 0;
use constant NOTIFICATION_MUTE_EXPIRATION => 1;
use constant NOTIFICATION_NEW_MESSAGE => 2;
use constant NOTIFICATION_GROUP_INVITATION => 3;
use constant NOTIFICATION_SHOW_MESSAGE => 4;
use constant NOTIFICATION_INCOMING_CALL => 5;
use constant NOTIFICATION_SOUND_MESSAGE => 8;
use constant NOTIFICATION_SOUND_GROUP => 9;
use constant NOTIFICATION_DISABLED_WITH_SUB => 16;
use constant NOTIFICATION_PAYMENT => 17;
use constant NOTIFICATION_MENTION => 40;
use constant NOTIFICATION_THUMBNAIL => 45;
use constant PRIVACY_SYNC_CONTACTS => 6;
use constant PRIVACY_SEARCH_BY_PHONE_NUMBER => 7;
use constant PRIVACY_SEARCH_BY_USERID => 13;
use constant PRIVACY_SEARCH_BY_EMAIL => 14;
use constant PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN => 21;
use constant PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME => 23;
use constant PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME => 35;
use constant PRIVACY_ALLOW_FRIEND_REQUEST => 30;
use constant PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND => 25;
use constant PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL => 26;
use constant PRIVACY_AGREE_USE_PAIDCALL => 27;
use constant CONTACT_MY_TICKET => 10;
use constant IDENTITY_PROVIDER => 11;
use constant IDENTITY_IDENTIFIER => 12;
use constant SNS_ACCOUNT => 19;
use constant PHONE_REGISTRATION => 20;
use constant PREFERENCE_LOCALE => 15;
use constant CUSTOM_MODE => 22;
use constant EMAIL_CONFIRMATION_STATUS => 24;
use constant ACCOUNT_MIGRATION_PINCODE => 28;
use constant ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE => 29;
use constant SECURITY_CENTER_SETTINGS => 18;
use constant E2EE_ENABLE => 33;
use constant ENABLE_SOUND_TO_TEXT => 47;
use constant HITOKOTO_BACKUP_REQUESTED => 34;
use constant CONTACT_ALLOW_FOLLOWING => 36;
use constant PRIVACY_ALLOW_NEARBY => 37;
use constant AGREEMENT_NEARBY => 38;
use constant AGREEMENT_SQUARE => 39;
use constant ALLOW_UNREGISTRATION_SECONDARY_DEVICE => 41;
use constant AGREEMENT_BOT_USE => 42;
use constant AGREEMENT_SHAKE_FUNCTION => 43;
use constant AGREEMENT_MOBILE_CONTACT_NAME => 44;
use constant AGREEMENT_SOUND_TO_TEXT => 46;
package SnsIdType;
use constant FACEBOOK => 1;
use constant SINA => 2;
use constant RENREN => 3;
use constant FEIXIN => 4;
use constant BBM => 5;
package SpammerReason;
use constant OTHER => 0;
use constant ADVERTISING => 1;
use constant GENDER_HARASSMENT => 2;
use constant HARASSMENT => 3;
package SyncActionType;
use constant SYNC => 0;
use constant REPORT => 1;
package SpotCategory;
use constant UNKNOWN => 0;
use constant GOURMET => 1;
use constant BEAUTY => 2;
use constant TRAVEL => 3;
use constant SHOPPING => 4;
use constant ENTERTAINMENT => 5;
use constant SPORTS => 6;
use constant TRANSPORT => 7;
use constant LIFE => 8;
use constant HOSPITAL => 9;
use constant FINANCE => 10;
use constant EDUCATION => 11;
use constant OTHER => 12;
use constant ALL => 10000;
package SyncCategory;
use constant PROFILE => 0;
use constant SETTINGS => 1;
use constant OPS => 2;
use constant CONTACT => 3;
use constant RECOMMEND => 4;
use constant BLOCK => 5;
use constant GROUP => 6;
use constant ROOM => 7;
use constant NOTIFICATION => 8;
use constant ADDRESS_BOOK => 9;
package TMessageBoxStatus;
use constant ACTIVATED => 1;
use constant UNREAD => 2;
package UniversalNotificationServiceErrorCode;
use constant INTERNAL_ERROR => 0;
use constant INVALID_KEY => 1;
use constant ILLEGAL_ARGUMENT => 2;
use constant TOO_MANY_REQUEST => 3;
use constant AUTHENTICATION_FAILED => 4;
use constant NO_WRITE_PERMISSION => 5;
package UnregistrationReason;
use constant UNREGISTRATION_REASON_UNREGISTER_USER => 1;
use constant UNREGISTRATION_REASON_UNBIND_DEVICE => 2;
package UserAgeType;
use constant OVER => 1;
use constant UNDER => 2;
use constant UNDEFINED => 3;
package VerificationMethod;
use constant NO_AVAILABLE => 0;
use constant PIN_VIA_SMS => 1;
use constant CALLERID_INDIGO => 2;
use constant PIN_VIA_TTS => 4;
use constant SKIP => 10;
package VerificationResult;
use constant FAILED => 0;
use constant OK_NOT_REGISTERED_YET => 1;
use constant OK_REGISTERED_WITH_SAME_DEVICE => 2;
use constant OK_REGISTERED_WITH_ANOTHER_DEVICE => 3;
package WapInvitationType;
use constant REGISTRATION => 1;
use constant CHAT => 2;
package MediaType;
use constant AUDIO => 1;
use constant VIDEO => 2;
package SQErrorCode;
use constant UNKNOWN => 0;
use constant ILLEGAL_ARGUMENT => 400;
use constant AUTHENTICATION_FAILURE => 401;
use constant FORBIDDEN => 403;
use constant NOT_FOUND => 404;
use constant REVISION_MISMATCH => 409;
use constant PRECONDITION_FAILED => 410;
use constant INTERNAL_ERROR => 500;
use constant NOT_IMPLEMENTED => 501;
use constant TRY_AGAIN_LATER => 505;
package SquareEventType;
use constant RECEIVE_MESSAGE => 0;
use constant SEND_MESSAGE => 1;
use constant NOTIFIED_JOIN_SQUARE_CHAT => 2;
use constant NOTIFIED_INVITE_INTO_SQUARE_CHAT => 3;
use constant NOTIFIED_LEAVE_SQUARE_CHAT => 4;
use constant NOTIFIED_DESTROY_MESSAGE => 5;
use constant NOTIFIED_MARK_AS_READ => 6;
use constant NOTIFIED_UPDATE_SQUARE_MEMBER_PROFILE => 7;
use constant NOTIFIED_KICKOUT_FROM_SQUARE => 19;
use constant NOTIFIED_SHUTDOWN_SQUARE => 18;
use constant NOTIFIED_DELETE_SQUARE_CHAT => 20;
use constant NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_NAME => 30;
use constant NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_IMAGE => 31;
use constant NOTIFIED_UPDATE_SQUARE_CHAT_ANNOUNCEMENT => 37;
use constant NOTIFIED_ADD_BOT => 33;
use constant NOTIFIED_REMOVE_BOT => 34;
use constant NOTIFIED_UPDATE_SQUARE => 8;
use constant NOTIFIED_UPDATE_SQUARE_STATUS => 9;
use constant NOTIFIED_UPDATE_SQUARE_AUTHORITY => 10;
use constant NOTIFIED_UPDATE_SQUARE_MEMBER => 11;
use constant NOTIFIED_UPDATE_SQUARE_CHAT => 12;
use constant NOTIFIED_UPDATE_SQUARE_CHAT_STATUS => 13;
use constant NOTIFIED_UPDATE_SQUARE_CHAT_MEMBER => 14;
use constant NOTIFIED_CREATE_SQUARE_MEMBER => 15;
use constant NOTIFIED_CREATE_SQUARE_CHAT_MEMBER => 16;
use constant NOTIFIED_UPDATE_SQUARE_MEMBER_RELATION => 17;
use constant NOTIFIED_UPDATE_SQUARE_FEATURE_SET => 32;
use constant NOTIFIED_UPDATE_SQUARE_NOTE_STATUS => 36;
use constant NOTIFICATION_JOIN_REQUEST => 21;
use constant NOTIFICATION_JOINED => 22;
use constant NOTIFICATION_PROMOTED_COADMIN => 23;
use constant NOTIFICATION_PROMOTED_ADMIN => 24;
use constant NOTIFICATION_DEMOTED_MEMBER => 25;
use constant NOTIFICATION_KICKED_OUT => 26;
use constant NOTIFICATION_SQUARE_DELETE => 27;
use constant NOTIFICATION_SQUARE_CHAT_DELETE => 28;
use constant NOTIFICATION_MESSAGE => 29;
package SquareMemberRelationState;
use constant NONE => 1;
use constant BLOCKED => 2;
package SquareFeatureControlState;
use constant DISABLED => 1;
use constant ENABLED => 2;
package BooleanState;
use constant NONE => 0;
use constant OFF => 1;
use constant ON => 2;
package SquareType;
use constant CLOSED => 0;
use constant OPEN => 1;
package SquareChatType;
use constant OPEN => 1;
use constant SECRET => 2;
use constant ONE_ON_ONE => 3;
use constant SQUARE_DEFAULT => 4;
package SquareErrorCode;
use constant UNKNOWN => 0;
use constant INTERNAL_ERROR => 500;
use constant NOT_IMPLEMENTED => 501;
use constant TRY_AGAIN_LATER => 503;
use constant MAINTENANCE => 505;
use constant ILLEGAL_ARGUMENT => 400;
use constant AUTHENTICATION_FAILURE => 401;
use constant FORBIDDEN => 403;
use constant NOT_FOUND => 404;
use constant REVISION_MISMATCH => 409;
use constant PRECONDITION_FAILED => 410;
package SquareChatState;
use constant ALIVE => 0;
use constant DELETED => 1;
use constant SUSPENDED => 2;
package SquareFeatureSetAttribute;
use constant CREATING_SECRET_SQUARE_CHAT => 1;
use constant INVITING_INTO_OPEN_SQUARE_CHAT => 2;
package SquareMembershipState;
use constant JOIN_REQUESTED => 1;
use constant JOINED => 2;
use constant REJECTED => 3;
use constant LEFT => 4;
use constant KICK_OUT => 5;
use constant BANNED => 6;
use constant DELETED => 7;
package SquareChatMemberAttribute;
use constant MEMBERSHIP_STATE => 4;
use constant NOTIFICATION_MESSAGE => 6;
package SquareMemberRole;
use constant ADMIN => 1;
use constant CO_ADMIN => 2;
use constant MEMBER => 10;
package PreconditionFailedExtraInfo;
use constant DUPLICATED_DISPLAY_NAME => 0;
package SquareChatMembershipState;
use constant JOINED => 1;
use constant LEFT => 2;
package FetchDirection;
use constant FORWARD => 1;
use constant BACKWARD => 2;
package SquareAttribute;
use constant NAME => 1;
use constant WELCOME_MESSAGE => 2;
use constant PROFILE_IMAGE => 3;
use constant DESCRIPTION => 4;
use constant SEARCHABLE => 6;
use constant CATEGORY => 7;
use constant INVITATION_URL => 8;
use constant ABLE_TO_USE_INVITATION_URL => 9;
use constant STATE => 10;
package SquareAuthorityAttribute;
use constant UPDATE_SQUARE_PROFILE => 1;
use constant INVITE_NEW_MEMBER => 2;
use constant APPROVE_JOIN_REQUEST => 3;
use constant CREATE_POST => 4;
use constant CREATE_OPEN_SQUARE_CHAT => 5;
use constant DELETE_SQUARE_CHAT_OR_POST => 6;
use constant REMOVE_SQUARE_MEMBER => 7;
use constant GRANT_ROLE => 8;
use constant ENABLE_INVITATION_TICKET => 9;
use constant CREATE_CHAT_ANNOUNCEMENT => 10;
package SquareEventStatus;
use constant NORMAL => 1;
use constant ALERT_DISABLED => 2;
package SuggestDictionaryIncrementStatus;
use constant SUCCESS => 0;
use constant INVALID_REVISION => 1;
use constant TOO_LARGE_DATA => 2;
use constant SCHEME_CHANGED => 3;
use constant RETRY => 4;
use constant FAIL => 5;
use constant TOO_OLD_DATA => 6;

package Location;
use base qw(Class::Accessor);
Location->mk_accessors( qw( title address latitude longitude phone ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{title} = undef;
  $self->{address} = undef;
  $self->{latitude} = undef;
  $self->{longitude} = undef;
  $self->{phone} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{title}) {
      $self->{title} = $vals->{title};
    }
    if (defined $vals->{address}) {
      $self->{address} = $vals->{address};
    }
    if (defined $vals->{latitude}) {
      $self->{latitude} = $vals->{latitude};
    }
    if (defined $vals->{longitude}) {
      $self->{longitude} = $vals->{longitude};
    }
    if (defined $vals->{phone}) {
      $self->{phone} = $vals->{phone};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Location';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{title});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{address});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::DOUBLE) {
        $xfer += $input->readDouble(\$self->{latitude});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::DOUBLE) {
        $xfer += $input->readDouble(\$self->{longitude});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{phone});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Location');
  if (defined $self->{title}) {
    $xfer += $output->writeFieldBegin('title', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{title});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{address}) {
    $xfer += $output->writeFieldBegin('address', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{address});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{latitude}) {
    $xfer += $output->writeFieldBegin('latitude', Thrift::TType::DOUBLE, 3);
    $xfer += $output->writeDouble($self->{latitude});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{longitude}) {
    $xfer += $output->writeFieldBegin('longitude', Thrift::TType::DOUBLE, 4);
    $xfer += $output->writeDouble($self->{longitude});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{phone}) {
    $xfer += $output->writeFieldBegin('phone', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{phone});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package MessageBoxV2MessageId;
use base qw(Class::Accessor);
MessageBoxV2MessageId->mk_accessors( qw( deliveredTime messageId ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{deliveredTime} = undef;
  $self->{messageId} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{deliveredTime}) {
      $self->{deliveredTime} = $vals->{deliveredTime};
    }
    if (defined $vals->{messageId}) {
      $self->{messageId} = $vals->{messageId};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'MessageBoxV2MessageId';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{deliveredTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{messageId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('MessageBoxV2MessageId');
  if (defined $self->{deliveredTime}) {
    $xfer += $output->writeFieldBegin('deliveredTime', Thrift::TType::I64, 1);
    $xfer += $output->writeI64($self->{deliveredTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{messageId}) {
    $xfer += $output->writeFieldBegin('messageId', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{messageId});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package MessageCommitResult;
use base qw(Class::Accessor);
MessageCommitResult->mk_accessors( qw( requestId state messageStoreRequestId messageIds receiverCount successCount failCount blockCount unregisteredCount unrelatedCount errorDescription ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{requestId} = undef;
  $self->{state} = undef;
  $self->{messageStoreRequestId} = undef;
  $self->{messageIds} = undef;
  $self->{receiverCount} = undef;
  $self->{successCount} = undef;
  $self->{failCount} = undef;
  $self->{blockCount} = undef;
  $self->{unregisteredCount} = undef;
  $self->{unrelatedCount} = undef;
  $self->{errorDescription} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{requestId}) {
      $self->{requestId} = $vals->{requestId};
    }
    if (defined $vals->{state}) {
      $self->{state} = $vals->{state};
    }
    if (defined $vals->{messageStoreRequestId}) {
      $self->{messageStoreRequestId} = $vals->{messageStoreRequestId};
    }
    if (defined $vals->{messageIds}) {
      $self->{messageIds} = $vals->{messageIds};
    }
    if (defined $vals->{receiverCount}) {
      $self->{receiverCount} = $vals->{receiverCount};
    }
    if (defined $vals->{successCount}) {
      $self->{successCount} = $vals->{successCount};
    }
    if (defined $vals->{failCount}) {
      $self->{failCount} = $vals->{failCount};
    }
    if (defined $vals->{blockCount}) {
      $self->{blockCount} = $vals->{blockCount};
    }
    if (defined $vals->{unregisteredCount}) {
      $self->{unregisteredCount} = $vals->{unregisteredCount};
    }
    if (defined $vals->{unrelatedCount}) {
      $self->{unrelatedCount} = $vals->{unrelatedCount};
    }
    if (defined $vals->{errorDescription}) {
      $self->{errorDescription} = $vals->{errorDescription};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'MessageCommitResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{requestId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{state});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{messageStoreRequestId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size0 = 0;
          $self->{messageIds} = [];
          my $_etype3 = 0;
          $xfer += $input->readListBegin(\$_etype3, \$_size0);
          for (my $_i4 = 0; $_i4 < $_size0; ++$_i4)
          {
            my $elem5 = undef;
            $xfer += $input->readString(\$elem5);
            push(@{$self->{messageIds}},$elem5);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{receiverCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{successCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^13$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{failCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^14$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{blockCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^15$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{unregisteredCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^16$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{unrelatedCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^21$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{errorDescription});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('MessageCommitResult');
  if (defined $self->{requestId}) {
    $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{requestId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{state}) {
    $xfer += $output->writeFieldBegin('state', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{state});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{messageStoreRequestId}) {
    $xfer += $output->writeFieldBegin('messageStoreRequestId', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{messageStoreRequestId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{messageIds}) {
    $xfer += $output->writeFieldBegin('messageIds', Thrift::TType::LIST, 4);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{messageIds}}));
      {
        foreach my $iter6 (@{$self->{messageIds}}) 
        {
          $xfer += $output->writeString($iter6);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{receiverCount}) {
    $xfer += $output->writeFieldBegin('receiverCount', Thrift::TType::I64, 11);
    $xfer += $output->writeI64($self->{receiverCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{successCount}) {
    $xfer += $output->writeFieldBegin('successCount', Thrift::TType::I64, 12);
    $xfer += $output->writeI64($self->{successCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{failCount}) {
    $xfer += $output->writeFieldBegin('failCount', Thrift::TType::I64, 13);
    $xfer += $output->writeI64($self->{failCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{blockCount}) {
    $xfer += $output->writeFieldBegin('blockCount', Thrift::TType::I64, 14);
    $xfer += $output->writeI64($self->{blockCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{unregisteredCount}) {
    $xfer += $output->writeFieldBegin('unregisteredCount', Thrift::TType::I64, 15);
    $xfer += $output->writeI64($self->{unregisteredCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{unrelatedCount}) {
    $xfer += $output->writeFieldBegin('unrelatedCount', Thrift::TType::I64, 16);
    $xfer += $output->writeI64($self->{unrelatedCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{errorDescription}) {
    $xfer += $output->writeFieldBegin('errorDescription', Thrift::TType::STRING, 21);
    $xfer += $output->writeString($self->{errorDescription});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package CallHost;
use base qw(Class::Accessor);
CallHost->mk_accessors( qw( host port zone ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{host} = undef;
  $self->{port} = undef;
  $self->{zone} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{host}) {
      $self->{host} = $vals->{host};
    }
    if (defined $vals->{port}) {
      $self->{port} = $vals->{port};
    }
    if (defined $vals->{zone}) {
      $self->{zone} = $vals->{zone};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'CallHost';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{host});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{port});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{zone});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('CallHost');
  if (defined $self->{host}) {
    $xfer += $output->writeFieldBegin('host', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{host});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{port}) {
    $xfer += $output->writeFieldBegin('port', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{port});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{zone}) {
    $xfer += $output->writeFieldBegin('zone', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{zone});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package AgeCheckDocomoResult;
use base qw(Class::Accessor);
AgeCheckDocomoResult->mk_accessors( qw( authUrl userAgeType ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{authUrl} = undef;
  $self->{userAgeType} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{authUrl}) {
      $self->{authUrl} = $vals->{authUrl};
    }
    if (defined $vals->{userAgeType}) {
      $self->{userAgeType} = $vals->{userAgeType};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'AgeCheckDocomoResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{authUrl});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{userAgeType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('AgeCheckDocomoResult');
  if (defined $self->{authUrl}) {
    $xfer += $output->writeFieldBegin('authUrl', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{authUrl});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{userAgeType}) {
    $xfer += $output->writeFieldBegin('userAgeType', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{userAgeType});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package AgeCheckRequestResult;
use base qw(Class::Accessor);
AgeCheckRequestResult->mk_accessors( qw( authUrl sessionId ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{authUrl} = undef;
  $self->{sessionId} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{authUrl}) {
      $self->{authUrl} = $vals->{authUrl};
    }
    if (defined $vals->{sessionId}) {
      $self->{sessionId} = $vals->{sessionId};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'AgeCheckRequestResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{authUrl});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{sessionId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('AgeCheckRequestResult');
  if (defined $self->{authUrl}) {
    $xfer += $output->writeFieldBegin('authUrl', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{authUrl});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{sessionId}) {
    $xfer += $output->writeFieldBegin('sessionId', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{sessionId});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TextMessageAnnouncementContents;
use base qw(Class::Accessor);
TextMessageAnnouncementContents->mk_accessors( qw( messageId text senderSquareMemberMid createdAt ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{messageId} = undef;
  $self->{text} = undef;
  $self->{senderSquareMemberMid} = undef;
  $self->{createdAt} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{messageId}) {
      $self->{messageId} = $vals->{messageId};
    }
    if (defined $vals->{text}) {
      $self->{text} = $vals->{text};
    }
    if (defined $vals->{senderSquareMemberMid}) {
      $self->{senderSquareMemberMid} = $vals->{senderSquareMemberMid};
    }
    if (defined $vals->{createdAt}) {
      $self->{createdAt} = $vals->{createdAt};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TextMessageAnnouncementContents';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{messageId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{text});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{senderSquareMemberMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{createdAt});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TextMessageAnnouncementContents');
  if (defined $self->{messageId}) {
    $xfer += $output->writeFieldBegin('messageId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{messageId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{text}) {
    $xfer += $output->writeFieldBegin('text', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{text});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{senderSquareMemberMid}) {
    $xfer += $output->writeFieldBegin('senderSquareMemberMid', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{senderSquareMemberMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{createdAt}) {
    $xfer += $output->writeFieldBegin('createdAt', Thrift::TType::I64, 4);
    $xfer += $output->writeI64($self->{createdAt});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareChatAnnouncementContents;
use base qw(Class::Accessor);
SquareChatAnnouncementContents->mk_accessors( qw( textMessageAnnouncementContents ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{textMessageAnnouncementContents} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{textMessageAnnouncementContents}) {
      $self->{textMessageAnnouncementContents} = $vals->{textMessageAnnouncementContents};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareChatAnnouncementContents';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{textMessageAnnouncementContents} = TextMessageAnnouncementContents->new();
        $xfer += $self->{textMessageAnnouncementContents}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareChatAnnouncementContents');
  if (defined $self->{textMessageAnnouncementContents}) {
    $xfer += $output->writeFieldBegin('textMessageAnnouncementContents', Thrift::TType::STRUCT, 1);
    $xfer += $self->{textMessageAnnouncementContents}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareChatAnnouncement;
use base qw(Class::Accessor);
SquareChatAnnouncement->mk_accessors( qw( announcementSeq type contents ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{announcementSeq} = undef;
  $self->{type} = undef;
  $self->{contents} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{announcementSeq}) {
      $self->{announcementSeq} = $vals->{announcementSeq};
    }
    if (defined $vals->{type}) {
      $self->{type} = $vals->{type};
    }
    if (defined $vals->{contents}) {
      $self->{contents} = $vals->{contents};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareChatAnnouncement';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{announcementSeq});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{type});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{contents} = SquareChatAnnouncementContents->new();
        $xfer += $self->{contents}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareChatAnnouncement');
  if (defined $self->{announcementSeq}) {
    $xfer += $output->writeFieldBegin('announcementSeq', Thrift::TType::I64, 1);
    $xfer += $output->writeI64($self->{announcementSeq});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type}) {
    $xfer += $output->writeFieldBegin('type', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{type});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{contents}) {
    $xfer += $output->writeFieldBegin('contents', Thrift::TType::STRUCT, 3);
    $xfer += $self->{contents}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Announcement;
use base qw(Class::Accessor);
Announcement->mk_accessors( qw( index forceUpdate title text createdTime pictureUrl thumbnailUrl ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{index} = undef;
  $self->{forceUpdate} = undef;
  $self->{title} = undef;
  $self->{text} = undef;
  $self->{createdTime} = undef;
  $self->{pictureUrl} = undef;
  $self->{thumbnailUrl} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{index}) {
      $self->{index} = $vals->{index};
    }
    if (defined $vals->{forceUpdate}) {
      $self->{forceUpdate} = $vals->{forceUpdate};
    }
    if (defined $vals->{title}) {
      $self->{title} = $vals->{title};
    }
    if (defined $vals->{text}) {
      $self->{text} = $vals->{text};
    }
    if (defined $vals->{createdTime}) {
      $self->{createdTime} = $vals->{createdTime};
    }
    if (defined $vals->{pictureUrl}) {
      $self->{pictureUrl} = $vals->{pictureUrl};
    }
    if (defined $vals->{thumbnailUrl}) {
      $self->{thumbnailUrl} = $vals->{thumbnailUrl};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Announcement';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{index});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{forceUpdate});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{title});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{text});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^13$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{createdTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^14$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{pictureUrl});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^15$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{thumbnailUrl});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Announcement');
  if (defined $self->{index}) {
    $xfer += $output->writeFieldBegin('index', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{index});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{forceUpdate}) {
    $xfer += $output->writeFieldBegin('forceUpdate', Thrift::TType::BOOL, 10);
    $xfer += $output->writeBool($self->{forceUpdate});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{title}) {
    $xfer += $output->writeFieldBegin('title', Thrift::TType::STRING, 11);
    $xfer += $output->writeString($self->{title});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{text}) {
    $xfer += $output->writeFieldBegin('text', Thrift::TType::STRING, 12);
    $xfer += $output->writeString($self->{text});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{createdTime}) {
    $xfer += $output->writeFieldBegin('createdTime', Thrift::TType::I64, 13);
    $xfer += $output->writeI64($self->{createdTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{pictureUrl}) {
    $xfer += $output->writeFieldBegin('pictureUrl', Thrift::TType::STRING, 14);
    $xfer += $output->writeString($self->{pictureUrl});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{thumbnailUrl}) {
    $xfer += $output->writeFieldBegin('thumbnailUrl', Thrift::TType::STRING, 15);
    $xfer += $output->writeString($self->{thumbnailUrl});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ChannelProvider;
use base qw(Class::Accessor);
ChannelProvider->mk_accessors( qw( name ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{name} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{name}) {
      $self->{name} = $vals->{name};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ChannelProvider';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{name});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ChannelProvider');
  if (defined $self->{name}) {
    $xfer += $output->writeFieldBegin('name', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{name});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package E2EEPublicKey;
use base qw(Class::Accessor);
E2EEPublicKey->mk_accessors( qw( version keyId keyData createdTime ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{version} = undef;
  $self->{keyId} = undef;
  $self->{keyData} = undef;
  $self->{createdTime} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{version}) {
      $self->{version} = $vals->{version};
    }
    if (defined $vals->{keyId}) {
      $self->{keyId} = $vals->{keyId};
    }
    if (defined $vals->{keyData}) {
      $self->{keyData} = $vals->{keyData};
    }
    if (defined $vals->{createdTime}) {
      $self->{createdTime} = $vals->{createdTime};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'E2EEPublicKey';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{version});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{keyId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{keyData});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{createdTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('E2EEPublicKey');
  if (defined $self->{version}) {
    $xfer += $output->writeFieldBegin('version', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{version});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{keyId}) {
    $xfer += $output->writeFieldBegin('keyId', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{keyId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{keyData}) {
    $xfer += $output->writeFieldBegin('keyData', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{keyData});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{createdTime}) {
    $xfer += $output->writeFieldBegin('createdTime', Thrift::TType::I64, 5);
    $xfer += $output->writeI64($self->{createdTime});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ChannelDomain;
use base qw(Class::Accessor);
ChannelDomain->mk_accessors( qw( host removed ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{host} = undef;
  $self->{removed} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{host}) {
      $self->{host} = $vals->{host};
    }
    if (defined $vals->{removed}) {
      $self->{removed} = $vals->{removed};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ChannelDomain';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{host});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{removed});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ChannelDomain');
  if (defined $self->{host}) {
    $xfer += $output->writeFieldBegin('host', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{host});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{removed}) {
    $xfer += $output->writeFieldBegin('removed', Thrift::TType::BOOL, 2);
    $xfer += $output->writeBool($self->{removed});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package E2EENegotiationResult;
use base qw(Class::Accessor);
E2EENegotiationResult->mk_accessors( qw( allowedTypes publicKey ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{allowedTypes} = undef;
  $self->{publicKey} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{allowedTypes}) {
      $self->{allowedTypes} = $vals->{allowedTypes};
    }
    if (defined $vals->{publicKey}) {
      $self->{publicKey} = $vals->{publicKey};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'E2EENegotiationResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::SET) {
        {
          my $_size7 = 0;
          $self->{allowedTypes} = {};
          my $_etype10 = 0;
          $xfer += $input->readSetBegin(\$_etype10, \$_size7);
          for (my $_i11 = 0; $_i11 < $_size7; ++$_i11)
          {
            my $elem12 = undef;
            $xfer += $input->readI32(\$elem12);
            $self->{allowedTypes}->{$elem12} = 1;
          }
          $xfer += $input->readSetEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{publicKey} = E2EEPublicKey->new();
        $xfer += $self->{publicKey}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('E2EENegotiationResult');
  if (defined $self->{allowedTypes}) {
    $xfer += $output->writeFieldBegin('allowedTypes', Thrift::TType::SET, 1);
    {
      $xfer += $output->writeSetBegin(Thrift::TType::I32, scalar(@{$self->{allowedTypes}}));
      {
        foreach my $iter13 (@{$self->{allowedTypes}})
        {
          $xfer += $output->writeI32($iter13);
        }
      }
      $xfer += $output->writeSetEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{publicKey}) {
    $xfer += $output->writeFieldBegin('publicKey', Thrift::TType::STRUCT, 2);
    $xfer += $self->{publicKey}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package OTPResult;
use base qw(Class::Accessor);
OTPResult->mk_accessors( qw( otpId otp ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{otpId} = undef;
  $self->{otp} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{otpId}) {
      $self->{otpId} = $vals->{otpId};
    }
    if (defined $vals->{otp}) {
      $self->{otp} = $vals->{otp};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'OTPResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{otpId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{otp});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('OTPResult');
  if (defined $self->{otpId}) {
    $xfer += $output->writeFieldBegin('otpId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{otpId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{otp}) {
    $xfer += $output->writeFieldBegin('otp', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{otp});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Square;
use base qw(Class::Accessor);
Square->mk_accessors( qw( mid name welcomeMessage profileImageObsHash desc searchable type categoryID invitationURL revision ableToUseInvitationTicket state ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{mid} = undef;
  $self->{name} = undef;
  $self->{welcomeMessage} = undef;
  $self->{profileImageObsHash} = undef;
  $self->{desc} = undef;
  $self->{searchable} = undef;
  $self->{type} = undef;
  $self->{categoryID} = undef;
  $self->{invitationURL} = undef;
  $self->{revision} = undef;
  $self->{ableToUseInvitationTicket} = undef;
  $self->{state} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{mid}) {
      $self->{mid} = $vals->{mid};
    }
    if (defined $vals->{name}) {
      $self->{name} = $vals->{name};
    }
    if (defined $vals->{welcomeMessage}) {
      $self->{welcomeMessage} = $vals->{welcomeMessage};
    }
    if (defined $vals->{profileImageObsHash}) {
      $self->{profileImageObsHash} = $vals->{profileImageObsHash};
    }
    if (defined $vals->{desc}) {
      $self->{desc} = $vals->{desc};
    }
    if (defined $vals->{searchable}) {
      $self->{searchable} = $vals->{searchable};
    }
    if (defined $vals->{type}) {
      $self->{type} = $vals->{type};
    }
    if (defined $vals->{categoryID}) {
      $self->{categoryID} = $vals->{categoryID};
    }
    if (defined $vals->{invitationURL}) {
      $self->{invitationURL} = $vals->{invitationURL};
    }
    if (defined $vals->{revision}) {
      $self->{revision} = $vals->{revision};
    }
    if (defined $vals->{ableToUseInvitationTicket}) {
      $self->{ableToUseInvitationTicket} = $vals->{ableToUseInvitationTicket};
    }
    if (defined $vals->{state}) {
      $self->{state} = $vals->{state};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Square';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{mid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{name});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{welcomeMessage});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{profileImageObsHash});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{desc});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{searchable});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{type});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{categoryID});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^9$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{invitationURL});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{revision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{ableToUseInvitationTicket});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{state});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Square');
  if (defined $self->{mid}) {
    $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{mid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{name}) {
    $xfer += $output->writeFieldBegin('name', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{name});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{welcomeMessage}) {
    $xfer += $output->writeFieldBegin('welcomeMessage', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{welcomeMessage});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{profileImageObsHash}) {
    $xfer += $output->writeFieldBegin('profileImageObsHash', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{profileImageObsHash});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{desc}) {
    $xfer += $output->writeFieldBegin('desc', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{desc});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{searchable}) {
    $xfer += $output->writeFieldBegin('searchable', Thrift::TType::BOOL, 6);
    $xfer += $output->writeBool($self->{searchable});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type}) {
    $xfer += $output->writeFieldBegin('type', Thrift::TType::I32, 7);
    $xfer += $output->writeI32($self->{type});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{categoryID}) {
    $xfer += $output->writeFieldBegin('categoryID', Thrift::TType::I32, 8);
    $xfer += $output->writeI32($self->{categoryID});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{invitationURL}) {
    $xfer += $output->writeFieldBegin('invitationURL', Thrift::TType::STRING, 9);
    $xfer += $output->writeString($self->{invitationURL});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{revision}) {
    $xfer += $output->writeFieldBegin('revision', Thrift::TType::I64, 10);
    $xfer += $output->writeI64($self->{revision});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ableToUseInvitationTicket}) {
    $xfer += $output->writeFieldBegin('ableToUseInvitationTicket', Thrift::TType::BOOL, 11);
    $xfer += $output->writeBool($self->{ableToUseInvitationTicket});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{state}) {
    $xfer += $output->writeFieldBegin('state', Thrift::TType::I32, 12);
    $xfer += $output->writeI32($self->{state});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareAuthority;
use base qw(Class::Accessor);
SquareAuthority->mk_accessors( qw( squareMid updateSquareProfile inviteNewMember approveJoinRequest createPost createOpenSquareChat deleteSquareChatOrPost removeSquareMember grantRole enableInvitationTicket revision ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareMid} = undef;
  $self->{updateSquareProfile} = undef;
  $self->{inviteNewMember} = undef;
  $self->{approveJoinRequest} = undef;
  $self->{createPost} = undef;
  $self->{createOpenSquareChat} = undef;
  $self->{deleteSquareChatOrPost} = undef;
  $self->{removeSquareMember} = undef;
  $self->{grantRole} = undef;
  $self->{enableInvitationTicket} = undef;
  $self->{revision} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareMid}) {
      $self->{squareMid} = $vals->{squareMid};
    }
    if (defined $vals->{updateSquareProfile}) {
      $self->{updateSquareProfile} = $vals->{updateSquareProfile};
    }
    if (defined $vals->{inviteNewMember}) {
      $self->{inviteNewMember} = $vals->{inviteNewMember};
    }
    if (defined $vals->{approveJoinRequest}) {
      $self->{approveJoinRequest} = $vals->{approveJoinRequest};
    }
    if (defined $vals->{createPost}) {
      $self->{createPost} = $vals->{createPost};
    }
    if (defined $vals->{createOpenSquareChat}) {
      $self->{createOpenSquareChat} = $vals->{createOpenSquareChat};
    }
    if (defined $vals->{deleteSquareChatOrPost}) {
      $self->{deleteSquareChatOrPost} = $vals->{deleteSquareChatOrPost};
    }
    if (defined $vals->{removeSquareMember}) {
      $self->{removeSquareMember} = $vals->{removeSquareMember};
    }
    if (defined $vals->{grantRole}) {
      $self->{grantRole} = $vals->{grantRole};
    }
    if (defined $vals->{enableInvitationTicket}) {
      $self->{enableInvitationTicket} = $vals->{enableInvitationTicket};
    }
    if (defined $vals->{revision}) {
      $self->{revision} = $vals->{revision};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareAuthority';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{updateSquareProfile});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{inviteNewMember});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{approveJoinRequest});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{createPost});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{createOpenSquareChat});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{deleteSquareChatOrPost});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{removeSquareMember});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^9$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{grantRole});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{enableInvitationTicket});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{revision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareAuthority');
  if (defined $self->{squareMid}) {
    $xfer += $output->writeFieldBegin('squareMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{updateSquareProfile}) {
    $xfer += $output->writeFieldBegin('updateSquareProfile', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{updateSquareProfile});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{inviteNewMember}) {
    $xfer += $output->writeFieldBegin('inviteNewMember', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{inviteNewMember});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{approveJoinRequest}) {
    $xfer += $output->writeFieldBegin('approveJoinRequest', Thrift::TType::I32, 4);
    $xfer += $output->writeI32($self->{approveJoinRequest});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{createPost}) {
    $xfer += $output->writeFieldBegin('createPost', Thrift::TType::I32, 5);
    $xfer += $output->writeI32($self->{createPost});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{createOpenSquareChat}) {
    $xfer += $output->writeFieldBegin('createOpenSquareChat', Thrift::TType::I32, 6);
    $xfer += $output->writeI32($self->{createOpenSquareChat});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{deleteSquareChatOrPost}) {
    $xfer += $output->writeFieldBegin('deleteSquareChatOrPost', Thrift::TType::I32, 7);
    $xfer += $output->writeI32($self->{deleteSquareChatOrPost});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{removeSquareMember}) {
    $xfer += $output->writeFieldBegin('removeSquareMember', Thrift::TType::I32, 8);
    $xfer += $output->writeI32($self->{removeSquareMember});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{grantRole}) {
    $xfer += $output->writeFieldBegin('grantRole', Thrift::TType::I32, 9);
    $xfer += $output->writeI32($self->{grantRole});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{enableInvitationTicket}) {
    $xfer += $output->writeFieldBegin('enableInvitationTicket', Thrift::TType::I32, 10);
    $xfer += $output->writeI32($self->{enableInvitationTicket});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{revision}) {
    $xfer += $output->writeFieldBegin('revision', Thrift::TType::I64, 11);
    $xfer += $output->writeI64($self->{revision});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquarePreference;
use base qw(Class::Accessor);
SquarePreference->mk_accessors( qw( favoriteTimestamp notiForNewJoinRequest ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{favoriteTimestamp} = undef;
  $self->{notiForNewJoinRequest} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{favoriteTimestamp}) {
      $self->{favoriteTimestamp} = $vals->{favoriteTimestamp};
    }
    if (defined $vals->{notiForNewJoinRequest}) {
      $self->{notiForNewJoinRequest} = $vals->{notiForNewJoinRequest};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquarePreference';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{favoriteTimestamp});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{notiForNewJoinRequest});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquarePreference');
  if (defined $self->{favoriteTimestamp}) {
    $xfer += $output->writeFieldBegin('favoriteTimestamp', Thrift::TType::I64, 1);
    $xfer += $output->writeI64($self->{favoriteTimestamp});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notiForNewJoinRequest}) {
    $xfer += $output->writeFieldBegin('notiForNewJoinRequest', Thrift::TType::BOOL, 2);
    $xfer += $output->writeBool($self->{notiForNewJoinRequest});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareMember;
use base qw(Class::Accessor);
SquareMember->mk_accessors( qw( squareMemberMid squareMid displayName profileImageObsHash ableToReceiveMessage membershipState role revision preference joinMessage ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareMemberMid} = undef;
  $self->{squareMid} = undef;
  $self->{displayName} = undef;
  $self->{profileImageObsHash} = undef;
  $self->{ableToReceiveMessage} = undef;
  $self->{membershipState} = undef;
  $self->{role} = undef;
  $self->{revision} = undef;
  $self->{preference} = undef;
  $self->{joinMessage} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareMemberMid}) {
      $self->{squareMemberMid} = $vals->{squareMemberMid};
    }
    if (defined $vals->{squareMid}) {
      $self->{squareMid} = $vals->{squareMid};
    }
    if (defined $vals->{displayName}) {
      $self->{displayName} = $vals->{displayName};
    }
    if (defined $vals->{profileImageObsHash}) {
      $self->{profileImageObsHash} = $vals->{profileImageObsHash};
    }
    if (defined $vals->{ableToReceiveMessage}) {
      $self->{ableToReceiveMessage} = $vals->{ableToReceiveMessage};
    }
    if (defined $vals->{membershipState}) {
      $self->{membershipState} = $vals->{membershipState};
    }
    if (defined $vals->{role}) {
      $self->{role} = $vals->{role};
    }
    if (defined $vals->{revision}) {
      $self->{revision} = $vals->{revision};
    }
    if (defined $vals->{preference}) {
      $self->{preference} = $vals->{preference};
    }
    if (defined $vals->{joinMessage}) {
      $self->{joinMessage} = $vals->{joinMessage};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareMember';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMemberMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{displayName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{profileImageObsHash});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{ableToReceiveMessage});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{membershipState});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{role});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^9$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{revision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{preference} = SquarePreference->new();
        $xfer += $self->{preference}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{joinMessage});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareMember');
  if (defined $self->{squareMemberMid}) {
    $xfer += $output->writeFieldBegin('squareMemberMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareMemberMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareMid}) {
    $xfer += $output->writeFieldBegin('squareMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{displayName}) {
    $xfer += $output->writeFieldBegin('displayName', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{displayName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{profileImageObsHash}) {
    $xfer += $output->writeFieldBegin('profileImageObsHash', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{profileImageObsHash});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ableToReceiveMessage}) {
    $xfer += $output->writeFieldBegin('ableToReceiveMessage', Thrift::TType::BOOL, 5);
    $xfer += $output->writeBool($self->{ableToReceiveMessage});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{membershipState}) {
    $xfer += $output->writeFieldBegin('membershipState', Thrift::TType::I32, 7);
    $xfer += $output->writeI32($self->{membershipState});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{role}) {
    $xfer += $output->writeFieldBegin('role', Thrift::TType::I32, 8);
    $xfer += $output->writeI32($self->{role});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{revision}) {
    $xfer += $output->writeFieldBegin('revision', Thrift::TType::I64, 9);
    $xfer += $output->writeI64($self->{revision});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{preference}) {
    $xfer += $output->writeFieldBegin('preference', Thrift::TType::STRUCT, 10);
    $xfer += $self->{preference}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{joinMessage}) {
    $xfer += $output->writeFieldBegin('joinMessage', Thrift::TType::STRING, 11);
    $xfer += $output->writeString($self->{joinMessage});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareMemberRelation;
use base qw(Class::Accessor);
SquareMemberRelation->mk_accessors( qw( state revision ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{state} = undef;
  $self->{revision} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{state}) {
      $self->{state} = $vals->{state};
    }
    if (defined $vals->{revision}) {
      $self->{revision} = $vals->{revision};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareMemberRelation';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{state});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{revision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareMemberRelation');
  if (defined $self->{state}) {
    $xfer += $output->writeFieldBegin('state', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{state});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{revision}) {
    $xfer += $output->writeFieldBegin('revision', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{revision});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareFeature;
use base qw(Class::Accessor);
SquareFeature->mk_accessors( qw( controlState booleanValue ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{controlState} = undef;
  $self->{booleanValue} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{controlState}) {
      $self->{controlState} = $vals->{controlState};
    }
    if (defined $vals->{booleanValue}) {
      $self->{booleanValue} = $vals->{booleanValue};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareFeature';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{controlState});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{booleanValue});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareFeature');
  if (defined $self->{controlState}) {
    $xfer += $output->writeFieldBegin('controlState', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{controlState});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{booleanValue}) {
    $xfer += $output->writeFieldBegin('booleanValue', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{booleanValue});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareFeatureSet;
use base qw(Class::Accessor);
SquareFeatureSet->mk_accessors( qw( squareMid revision creatingSecretSquareChat invitingIntoOpenSquareChat ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareMid} = undef;
  $self->{revision} = undef;
  $self->{creatingSecretSquareChat} = undef;
  $self->{invitingIntoOpenSquareChat} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareMid}) {
      $self->{squareMid} = $vals->{squareMid};
    }
    if (defined $vals->{revision}) {
      $self->{revision} = $vals->{revision};
    }
    if (defined $vals->{creatingSecretSquareChat}) {
      $self->{creatingSecretSquareChat} = $vals->{creatingSecretSquareChat};
    }
    if (defined $vals->{invitingIntoOpenSquareChat}) {
      $self->{invitingIntoOpenSquareChat} = $vals->{invitingIntoOpenSquareChat};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareFeatureSet';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{revision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{creatingSecretSquareChat} = SquareFeature->new();
        $xfer += $self->{creatingSecretSquareChat}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{invitingIntoOpenSquareChat} = SquareFeature->new();
        $xfer += $self->{invitingIntoOpenSquareChat}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareFeatureSet');
  if (defined $self->{squareMid}) {
    $xfer += $output->writeFieldBegin('squareMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{revision}) {
    $xfer += $output->writeFieldBegin('revision', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{revision});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{creatingSecretSquareChat}) {
    $xfer += $output->writeFieldBegin('creatingSecretSquareChat', Thrift::TType::STRUCT, 11);
    $xfer += $self->{creatingSecretSquareChat}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{invitingIntoOpenSquareChat}) {
    $xfer += $output->writeFieldBegin('invitingIntoOpenSquareChat', Thrift::TType::STRUCT, 12);
    $xfer += $self->{invitingIntoOpenSquareChat}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareStatus;
use base qw(Class::Accessor);
SquareStatus->mk_accessors( qw( memberCount joinRequestCount lastJoinRequestAt openChatCount ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{memberCount} = undef;
  $self->{joinRequestCount} = undef;
  $self->{lastJoinRequestAt} = undef;
  $self->{openChatCount} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{memberCount}) {
      $self->{memberCount} = $vals->{memberCount};
    }
    if (defined $vals->{joinRequestCount}) {
      $self->{joinRequestCount} = $vals->{joinRequestCount};
    }
    if (defined $vals->{lastJoinRequestAt}) {
      $self->{lastJoinRequestAt} = $vals->{lastJoinRequestAt};
    }
    if (defined $vals->{openChatCount}) {
      $self->{openChatCount} = $vals->{openChatCount};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareStatus';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{memberCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{joinRequestCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{lastJoinRequestAt});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{openChatCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareStatus');
  if (defined $self->{memberCount}) {
    $xfer += $output->writeFieldBegin('memberCount', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{memberCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{joinRequestCount}) {
    $xfer += $output->writeFieldBegin('joinRequestCount', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{joinRequestCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{lastJoinRequestAt}) {
    $xfer += $output->writeFieldBegin('lastJoinRequestAt', Thrift::TType::I64, 3);
    $xfer += $output->writeI64($self->{lastJoinRequestAt});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{openChatCount}) {
    $xfer += $output->writeFieldBegin('openChatCount', Thrift::TType::I32, 4);
    $xfer += $output->writeI32($self->{openChatCount});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareChat;
use base qw(Class::Accessor);
SquareChat->mk_accessors( qw( squareChatMid squareMid type name chatImageObsHash squareChatRevision maxMemberCount state ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareChatMid} = undef;
  $self->{squareMid} = undef;
  $self->{type} = undef;
  $self->{name} = undef;
  $self->{chatImageObsHash} = undef;
  $self->{squareChatRevision} = undef;
  $self->{maxMemberCount} = undef;
  $self->{state} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
    if (defined $vals->{squareMid}) {
      $self->{squareMid} = $vals->{squareMid};
    }
    if (defined $vals->{type}) {
      $self->{type} = $vals->{type};
    }
    if (defined $vals->{name}) {
      $self->{name} = $vals->{name};
    }
    if (defined $vals->{chatImageObsHash}) {
      $self->{chatImageObsHash} = $vals->{chatImageObsHash};
    }
    if (defined $vals->{squareChatRevision}) {
      $self->{squareChatRevision} = $vals->{squareChatRevision};
    }
    if (defined $vals->{maxMemberCount}) {
      $self->{maxMemberCount} = $vals->{maxMemberCount};
    }
    if (defined $vals->{state}) {
      $self->{state} = $vals->{state};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareChat';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{type});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{name});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{chatImageObsHash});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{squareChatRevision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{maxMemberCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{state});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareChat');
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareMid}) {
    $xfer += $output->writeFieldBegin('squareMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type}) {
    $xfer += $output->writeFieldBegin('type', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{type});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{name}) {
    $xfer += $output->writeFieldBegin('name', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{name});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{chatImageObsHash}) {
    $xfer += $output->writeFieldBegin('chatImageObsHash', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{chatImageObsHash});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareChatRevision}) {
    $xfer += $output->writeFieldBegin('squareChatRevision', Thrift::TType::I64, 6);
    $xfer += $output->writeI64($self->{squareChatRevision});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{maxMemberCount}) {
    $xfer += $output->writeFieldBegin('maxMemberCount', Thrift::TType::I32, 7);
    $xfer += $output->writeI32($self->{maxMemberCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{state}) {
    $xfer += $output->writeFieldBegin('state', Thrift::TType::I32, 8);
    $xfer += $output->writeI32($self->{state});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package NoteStatus;
use base qw(Class::Accessor);
NoteStatus->mk_accessors( qw( noteCount latestCreatedAt ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{noteCount} = undef;
  $self->{latestCreatedAt} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{noteCount}) {
      $self->{noteCount} = $vals->{noteCount};
    }
    if (defined $vals->{latestCreatedAt}) {
      $self->{latestCreatedAt} = $vals->{latestCreatedAt};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'NoteStatus';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{noteCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{latestCreatedAt});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('NoteStatus');
  if (defined $self->{noteCount}) {
    $xfer += $output->writeFieldBegin('noteCount', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{noteCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{latestCreatedAt}) {
    $xfer += $output->writeFieldBegin('latestCreatedAt', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{latestCreatedAt});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareInfo;
use base qw(Class::Accessor);
SquareInfo->mk_accessors( qw( square squareStatus squareNoteStatus ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{square} = undef;
  $self->{squareStatus} = undef;
  $self->{squareNoteStatus} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{square}) {
      $self->{square} = $vals->{square};
    }
    if (defined $vals->{squareStatus}) {
      $self->{squareStatus} = $vals->{squareStatus};
    }
    if (defined $vals->{squareNoteStatus}) {
      $self->{squareNoteStatus} = $vals->{squareNoteStatus};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareInfo';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{square} = Square->new();
        $xfer += $self->{square}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareStatus} = SquareStatus->new();
        $xfer += $self->{squareStatus}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareNoteStatus} = NoteStatus->new();
        $xfer += $self->{squareNoteStatus}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareInfo');
  if (defined $self->{square}) {
    $xfer += $output->writeFieldBegin('square', Thrift::TType::STRUCT, 1);
    $xfer += $self->{square}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareStatus}) {
    $xfer += $output->writeFieldBegin('squareStatus', Thrift::TType::STRUCT, 2);
    $xfer += $self->{squareStatus}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareNoteStatus}) {
    $xfer += $output->writeFieldBegin('squareNoteStatus', Thrift::TType::STRUCT, 3);
    $xfer += $self->{squareNoteStatus}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package BotUseInfo;
use base qw(Class::Accessor);
BotUseInfo->mk_accessors( qw( botUseAgreementAccepted botInFriends primaryApplication locale ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{botUseAgreementAccepted} = undef;
  $self->{botInFriends} = undef;
  $self->{primaryApplication} = undef;
  $self->{locale} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{botUseAgreementAccepted}) {
      $self->{botUseAgreementAccepted} = $vals->{botUseAgreementAccepted};
    }
    if (defined $vals->{botInFriends}) {
      $self->{botInFriends} = $vals->{botInFriends};
    }
    if (defined $vals->{primaryApplication}) {
      $self->{primaryApplication} = $vals->{primaryApplication};
    }
    if (defined $vals->{locale}) {
      $self->{locale} = $vals->{locale};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BotUseInfo';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{botUseAgreementAccepted});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{botInFriends});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{primaryApplication});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{locale});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BotUseInfo');
  if (defined $self->{botUseAgreementAccepted}) {
    $xfer += $output->writeFieldBegin('botUseAgreementAccepted', Thrift::TType::BOOL, 1);
    $xfer += $output->writeBool($self->{botUseAgreementAccepted});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{botInFriends}) {
    $xfer += $output->writeFieldBegin('botInFriends', Thrift::TType::BOOL, 2);
    $xfer += $output->writeBool($self->{botInFriends});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{primaryApplication}) {
    $xfer += $output->writeFieldBegin('primaryApplication', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{primaryApplication});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{locale}) {
    $xfer += $output->writeFieldBegin('locale', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{locale});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package PaidCallAdCountry;
use base qw(Class::Accessor);
PaidCallAdCountry->mk_accessors( qw( countryCode rateDivision ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{countryCode} = undef;
  $self->{rateDivision} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{countryCode}) {
      $self->{countryCode} = $vals->{countryCode};
    }
    if (defined $vals->{rateDivision}) {
      $self->{rateDivision} = $vals->{rateDivision};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'PaidCallAdCountry';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{countryCode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{rateDivision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('PaidCallAdCountry');
  if (defined $self->{countryCode}) {
    $xfer += $output->writeFieldBegin('countryCode', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{countryCode});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{rateDivision}) {
    $xfer += $output->writeFieldBegin('rateDivision', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{rateDivision});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package PaidCallAdResult;
use base qw(Class::Accessor);
PaidCallAdResult->mk_accessors( qw( adRemains ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{adRemains} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{adRemains}) {
      $self->{adRemains} = $vals->{adRemains};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'PaidCallAdResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{adRemains});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('PaidCallAdResult');
  if (defined $self->{adRemains}) {
    $xfer += $output->writeFieldBegin('adRemains', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{adRemains});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package PaidCallBalance;
use base qw(Class::Accessor);
PaidCallBalance->mk_accessors( qw( productType productName unit limitedPaidBalance limitedFreeBalance unlimitedPaidBalance unlimitedFreeBalance startTime endTime autopayEnabled ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{productType} = undef;
  $self->{productName} = undef;
  $self->{unit} = undef;
  $self->{limitedPaidBalance} = undef;
  $self->{limitedFreeBalance} = undef;
  $self->{unlimitedPaidBalance} = undef;
  $self->{unlimitedFreeBalance} = undef;
  $self->{startTime} = undef;
  $self->{endTime} = undef;
  $self->{autopayEnabled} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{productType}) {
      $self->{productType} = $vals->{productType};
    }
    if (defined $vals->{productName}) {
      $self->{productName} = $vals->{productName};
    }
    if (defined $vals->{unit}) {
      $self->{unit} = $vals->{unit};
    }
    if (defined $vals->{limitedPaidBalance}) {
      $self->{limitedPaidBalance} = $vals->{limitedPaidBalance};
    }
    if (defined $vals->{limitedFreeBalance}) {
      $self->{limitedFreeBalance} = $vals->{limitedFreeBalance};
    }
    if (defined $vals->{unlimitedPaidBalance}) {
      $self->{unlimitedPaidBalance} = $vals->{unlimitedPaidBalance};
    }
    if (defined $vals->{unlimitedFreeBalance}) {
      $self->{unlimitedFreeBalance} = $vals->{unlimitedFreeBalance};
    }
    if (defined $vals->{startTime}) {
      $self->{startTime} = $vals->{startTime};
    }
    if (defined $vals->{endTime}) {
      $self->{endTime} = $vals->{endTime};
    }
    if (defined $vals->{autopayEnabled}) {
      $self->{autopayEnabled} = $vals->{autopayEnabled};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'PaidCallBalance';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{productType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{productName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{unit});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{limitedPaidBalance});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{limitedFreeBalance});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{unlimitedPaidBalance});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{unlimitedFreeBalance});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{startTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^9$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{endTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{autopayEnabled});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('PaidCallBalance');
  if (defined $self->{productType}) {
    $xfer += $output->writeFieldBegin('productType', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{productType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{productName}) {
    $xfer += $output->writeFieldBegin('productName', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{productName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{unit}) {
    $xfer += $output->writeFieldBegin('unit', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{unit});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{limitedPaidBalance}) {
    $xfer += $output->writeFieldBegin('limitedPaidBalance', Thrift::TType::I32, 4);
    $xfer += $output->writeI32($self->{limitedPaidBalance});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{limitedFreeBalance}) {
    $xfer += $output->writeFieldBegin('limitedFreeBalance', Thrift::TType::I32, 5);
    $xfer += $output->writeI32($self->{limitedFreeBalance});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{unlimitedPaidBalance}) {
    $xfer += $output->writeFieldBegin('unlimitedPaidBalance', Thrift::TType::I32, 6);
    $xfer += $output->writeI32($self->{unlimitedPaidBalance});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{unlimitedFreeBalance}) {
    $xfer += $output->writeFieldBegin('unlimitedFreeBalance', Thrift::TType::I32, 7);
    $xfer += $output->writeI32($self->{unlimitedFreeBalance});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{startTime}) {
    $xfer += $output->writeFieldBegin('startTime', Thrift::TType::I64, 8);
    $xfer += $output->writeI64($self->{startTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{endTime}) {
    $xfer += $output->writeFieldBegin('endTime', Thrift::TType::I64, 9);
    $xfer += $output->writeI64($self->{endTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{autopayEnabled}) {
    $xfer += $output->writeFieldBegin('autopayEnabled', Thrift::TType::BOOL, 10);
    $xfer += $output->writeBool($self->{autopayEnabled});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package PaidCallCurrencyExchangeRate;
use base qw(Class::Accessor);
PaidCallCurrencyExchangeRate->mk_accessors( qw( currencyCode currencyName currencySign preferred coinRate creditRate ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{currencyCode} = undef;
  $self->{currencyName} = undef;
  $self->{currencySign} = undef;
  $self->{preferred} = undef;
  $self->{coinRate} = undef;
  $self->{creditRate} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{currencyCode}) {
      $self->{currencyCode} = $vals->{currencyCode};
    }
    if (defined $vals->{currencyName}) {
      $self->{currencyName} = $vals->{currencyName};
    }
    if (defined $vals->{currencySign}) {
      $self->{currencySign} = $vals->{currencySign};
    }
    if (defined $vals->{preferred}) {
      $self->{preferred} = $vals->{preferred};
    }
    if (defined $vals->{coinRate}) {
      $self->{coinRate} = $vals->{coinRate};
    }
    if (defined $vals->{creditRate}) {
      $self->{creditRate} = $vals->{creditRate};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'PaidCallCurrencyExchangeRate';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{currencyCode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{currencyName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{currencySign});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{preferred});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{coinRate});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{creditRate});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('PaidCallCurrencyExchangeRate');
  if (defined $self->{currencyCode}) {
    $xfer += $output->writeFieldBegin('currencyCode', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{currencyCode});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{currencyName}) {
    $xfer += $output->writeFieldBegin('currencyName', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{currencyName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{currencySign}) {
    $xfer += $output->writeFieldBegin('currencySign', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{currencySign});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{preferred}) {
    $xfer += $output->writeFieldBegin('preferred', Thrift::TType::BOOL, 4);
    $xfer += $output->writeBool($self->{preferred});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{coinRate}) {
    $xfer += $output->writeFieldBegin('coinRate', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{coinRate});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{creditRate}) {
    $xfer += $output->writeFieldBegin('creditRate', Thrift::TType::STRING, 6);
    $xfer += $output->writeString($self->{creditRate});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ExtendedProfileBirthday;
use base qw(Class::Accessor);
ExtendedProfileBirthday->mk_accessors( qw( year yearPrivacyLevelType yearEnabled day dayPrivacyLevelType dayEnabled ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{year} = undef;
  $self->{yearPrivacyLevelType} = undef;
  $self->{yearEnabled} = undef;
  $self->{day} = undef;
  $self->{dayPrivacyLevelType} = undef;
  $self->{dayEnabled} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{year}) {
      $self->{year} = $vals->{year};
    }
    if (defined $vals->{yearPrivacyLevelType}) {
      $self->{yearPrivacyLevelType} = $vals->{yearPrivacyLevelType};
    }
    if (defined $vals->{yearEnabled}) {
      $self->{yearEnabled} = $vals->{yearEnabled};
    }
    if (defined $vals->{day}) {
      $self->{day} = $vals->{day};
    }
    if (defined $vals->{dayPrivacyLevelType}) {
      $self->{dayPrivacyLevelType} = $vals->{dayPrivacyLevelType};
    }
    if (defined $vals->{dayEnabled}) {
      $self->{dayEnabled} = $vals->{dayEnabled};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ExtendedProfileBirthday';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{year});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{yearPrivacyLevelType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{yearEnabled});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{day});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{dayPrivacyLevelType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{dayEnabled});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ExtendedProfileBirthday');
  if (defined $self->{year}) {
    $xfer += $output->writeFieldBegin('year', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{year});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{yearPrivacyLevelType}) {
    $xfer += $output->writeFieldBegin('yearPrivacyLevelType', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{yearPrivacyLevelType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{yearEnabled}) {
    $xfer += $output->writeFieldBegin('yearEnabled', Thrift::TType::BOOL, 3);
    $xfer += $output->writeBool($self->{yearEnabled});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{day}) {
    $xfer += $output->writeFieldBegin('day', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{day});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{dayPrivacyLevelType}) {
    $xfer += $output->writeFieldBegin('dayPrivacyLevelType', Thrift::TType::I32, 6);
    $xfer += $output->writeI32($self->{dayPrivacyLevelType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{dayEnabled}) {
    $xfer += $output->writeFieldBegin('dayEnabled', Thrift::TType::BOOL, 7);
    $xfer += $output->writeBool($self->{dayEnabled});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ExtendedProfile;
use base qw(Class::Accessor);
ExtendedProfile->mk_accessors( qw( birthday ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{birthday} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{birthday}) {
      $self->{birthday} = $vals->{birthday};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ExtendedProfile';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{birthday} = ExtendedProfileBirthday->new();
        $xfer += $self->{birthday}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ExtendedProfile');
  if (defined $self->{birthday}) {
    $xfer += $output->writeFieldBegin('birthday', Thrift::TType::STRUCT, 1);
    $xfer += $self->{birthday}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package PaidCallDialing;
use base qw(Class::Accessor);
PaidCallDialing->mk_accessors( qw( type dialedNumber serviceDomain productType productName multipleProduct callerIdStatus balance unit rate displayCode calledNumber calleeNationalNumber calleeCallingCode rateDivision adMaxMin adRemains adSessionId ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{type} = undef;
  $self->{dialedNumber} = undef;
  $self->{serviceDomain} = undef;
  $self->{productType} = undef;
  $self->{productName} = undef;
  $self->{multipleProduct} = undef;
  $self->{callerIdStatus} = undef;
  $self->{balance} = undef;
  $self->{unit} = undef;
  $self->{rate} = undef;
  $self->{displayCode} = undef;
  $self->{calledNumber} = undef;
  $self->{calleeNationalNumber} = undef;
  $self->{calleeCallingCode} = undef;
  $self->{rateDivision} = undef;
  $self->{adMaxMin} = undef;
  $self->{adRemains} = undef;
  $self->{adSessionId} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{type}) {
      $self->{type} = $vals->{type};
    }
    if (defined $vals->{dialedNumber}) {
      $self->{dialedNumber} = $vals->{dialedNumber};
    }
    if (defined $vals->{serviceDomain}) {
      $self->{serviceDomain} = $vals->{serviceDomain};
    }
    if (defined $vals->{productType}) {
      $self->{productType} = $vals->{productType};
    }
    if (defined $vals->{productName}) {
      $self->{productName} = $vals->{productName};
    }
    if (defined $vals->{multipleProduct}) {
      $self->{multipleProduct} = $vals->{multipleProduct};
    }
    if (defined $vals->{callerIdStatus}) {
      $self->{callerIdStatus} = $vals->{callerIdStatus};
    }
    if (defined $vals->{balance}) {
      $self->{balance} = $vals->{balance};
    }
    if (defined $vals->{unit}) {
      $self->{unit} = $vals->{unit};
    }
    if (defined $vals->{rate}) {
      $self->{rate} = $vals->{rate};
    }
    if (defined $vals->{displayCode}) {
      $self->{displayCode} = $vals->{displayCode};
    }
    if (defined $vals->{calledNumber}) {
      $self->{calledNumber} = $vals->{calledNumber};
    }
    if (defined $vals->{calleeNationalNumber}) {
      $self->{calleeNationalNumber} = $vals->{calleeNationalNumber};
    }
    if (defined $vals->{calleeCallingCode}) {
      $self->{calleeCallingCode} = $vals->{calleeCallingCode};
    }
    if (defined $vals->{rateDivision}) {
      $self->{rateDivision} = $vals->{rateDivision};
    }
    if (defined $vals->{adMaxMin}) {
      $self->{adMaxMin} = $vals->{adMaxMin};
    }
    if (defined $vals->{adRemains}) {
      $self->{adRemains} = $vals->{adRemains};
    }
    if (defined $vals->{adSessionId}) {
      $self->{adSessionId} = $vals->{adSessionId};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'PaidCallDialing';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{type});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{dialedNumber});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{serviceDomain});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{productType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{productName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{multipleProduct});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{callerIdStatus});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{balance});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{unit});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{rate});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^13$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{displayCode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^14$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{calledNumber});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^15$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{calleeNationalNumber});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^16$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{calleeCallingCode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^17$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{rateDivision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^20$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{adMaxMin});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^21$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{adRemains});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^22$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{adSessionId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('PaidCallDialing');
  if (defined $self->{type}) {
    $xfer += $output->writeFieldBegin('type', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{type});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{dialedNumber}) {
    $xfer += $output->writeFieldBegin('dialedNumber', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{dialedNumber});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{serviceDomain}) {
    $xfer += $output->writeFieldBegin('serviceDomain', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{serviceDomain});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{productType}) {
    $xfer += $output->writeFieldBegin('productType', Thrift::TType::I32, 4);
    $xfer += $output->writeI32($self->{productType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{productName}) {
    $xfer += $output->writeFieldBegin('productName', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{productName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{multipleProduct}) {
    $xfer += $output->writeFieldBegin('multipleProduct', Thrift::TType::BOOL, 6);
    $xfer += $output->writeBool($self->{multipleProduct});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{callerIdStatus}) {
    $xfer += $output->writeFieldBegin('callerIdStatus', Thrift::TType::I32, 7);
    $xfer += $output->writeI32($self->{callerIdStatus});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{balance}) {
    $xfer += $output->writeFieldBegin('balance', Thrift::TType::I32, 10);
    $xfer += $output->writeI32($self->{balance});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{unit}) {
    $xfer += $output->writeFieldBegin('unit', Thrift::TType::STRING, 11);
    $xfer += $output->writeString($self->{unit});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{rate}) {
    $xfer += $output->writeFieldBegin('rate', Thrift::TType::I32, 12);
    $xfer += $output->writeI32($self->{rate});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{displayCode}) {
    $xfer += $output->writeFieldBegin('displayCode', Thrift::TType::STRING, 13);
    $xfer += $output->writeString($self->{displayCode});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{calledNumber}) {
    $xfer += $output->writeFieldBegin('calledNumber', Thrift::TType::STRING, 14);
    $xfer += $output->writeString($self->{calledNumber});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{calleeNationalNumber}) {
    $xfer += $output->writeFieldBegin('calleeNationalNumber', Thrift::TType::STRING, 15);
    $xfer += $output->writeString($self->{calleeNationalNumber});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{calleeCallingCode}) {
    $xfer += $output->writeFieldBegin('calleeCallingCode', Thrift::TType::STRING, 16);
    $xfer += $output->writeString($self->{calleeCallingCode});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{rateDivision}) {
    $xfer += $output->writeFieldBegin('rateDivision', Thrift::TType::STRING, 17);
    $xfer += $output->writeString($self->{rateDivision});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{adMaxMin}) {
    $xfer += $output->writeFieldBegin('adMaxMin', Thrift::TType::I32, 20);
    $xfer += $output->writeI32($self->{adMaxMin});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{adRemains}) {
    $xfer += $output->writeFieldBegin('adRemains', Thrift::TType::I32, 21);
    $xfer += $output->writeI32($self->{adRemains});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{adSessionId}) {
    $xfer += $output->writeFieldBegin('adSessionId', Thrift::TType::STRING, 22);
    $xfer += $output->writeString($self->{adSessionId});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SpotItem;
use base qw(Class::Accessor);
SpotItem->mk_accessors( qw( name phone category mid countryAreaCode freePhoneCallable ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{name} = undef;
  $self->{phone} = undef;
  $self->{category} = undef;
  $self->{mid} = undef;
  $self->{countryAreaCode} = undef;
  $self->{freePhoneCallable} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{name}) {
      $self->{name} = $vals->{name};
    }
    if (defined $vals->{phone}) {
      $self->{phone} = $vals->{phone};
    }
    if (defined $vals->{category}) {
      $self->{category} = $vals->{category};
    }
    if (defined $vals->{mid}) {
      $self->{mid} = $vals->{mid};
    }
    if (defined $vals->{countryAreaCode}) {
      $self->{countryAreaCode} = $vals->{countryAreaCode};
    }
    if (defined $vals->{freePhoneCallable}) {
      $self->{freePhoneCallable} = $vals->{freePhoneCallable};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SpotItem';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{name});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{phone});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{category});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{mid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{countryAreaCode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{freePhoneCallable});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SpotItem');
  if (defined $self->{name}) {
    $xfer += $output->writeFieldBegin('name', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{name});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{phone}) {
    $xfer += $output->writeFieldBegin('phone', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{phone});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{category}) {
    $xfer += $output->writeFieldBegin('category', Thrift::TType::I32, 4);
    $xfer += $output->writeI32($self->{category});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{mid}) {
    $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{mid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{countryAreaCode}) {
    $xfer += $output->writeFieldBegin('countryAreaCode', Thrift::TType::STRING, 6);
    $xfer += $output->writeString($self->{countryAreaCode});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{freePhoneCallable}) {
    $xfer += $output->writeFieldBegin('freePhoneCallable', Thrift::TType::BOOL, 10);
    $xfer += $output->writeBool($self->{freePhoneCallable});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SpotNearbyItem;
use base qw(Class::Accessor);
SpotNearbyItem->mk_accessors( qw( spotItem location ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{spotItem} = undef;
  $self->{location} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{spotItem}) {
      $self->{spotItem} = $vals->{spotItem};
    }
    if (defined $vals->{location}) {
      $self->{location} = $vals->{location};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SpotNearbyItem';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{spotItem} = SpotItem->new();
        $xfer += $self->{spotItem}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{location} = Location->new();
        $xfer += $self->{location}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SpotNearbyItem');
  if (defined $self->{spotItem}) {
    $xfer += $output->writeFieldBegin('spotItem', Thrift::TType::STRUCT, 2);
    $xfer += $self->{spotItem}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{location}) {
    $xfer += $output->writeFieldBegin('location', Thrift::TType::STRUCT, 11);
    $xfer += $self->{location}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SpotNearbyResponse;
use base qw(Class::Accessor);
SpotNearbyResponse->mk_accessors( qw( spotNearbyItems ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{spotNearbyItems} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{spotNearbyItems}) {
      $self->{spotNearbyItems} = $vals->{spotNearbyItems};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SpotNearbyResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size14 = 0;
          $self->{spotNearbyItems} = [];
          my $_etype17 = 0;
          $xfer += $input->readListBegin(\$_etype17, \$_size14);
          for (my $_i18 = 0; $_i18 < $_size14; ++$_i18)
          {
            my $elem19 = undef;
            $elem19 = SpotNearbyItem->new();
            $xfer += $elem19->read($input);
            push(@{$self->{spotNearbyItems}},$elem19);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SpotNearbyResponse');
  if (defined $self->{spotNearbyItems}) {
    $xfer += $output->writeFieldBegin('spotNearbyItems', Thrift::TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{spotNearbyItems}}));
      {
        foreach my $iter20 (@{$self->{spotNearbyItems}}) 
        {
          $xfer += ${iter20}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SpotPhoneNumberResponse;
use base qw(Class::Accessor);
SpotPhoneNumberResponse->mk_accessors( qw( spotItems ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{spotItems} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{spotItems}) {
      $self->{spotItems} = $vals->{spotItems};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SpotPhoneNumberResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size21 = 0;
          $self->{spotItems} = [];
          my $_etype24 = 0;
          $xfer += $input->readListBegin(\$_etype24, \$_size21);
          for (my $_i25 = 0; $_i25 < $_size21; ++$_i25)
          {
            my $elem26 = undef;
            $elem26 = SpotItem->new();
            $xfer += $elem26->read($input);
            push(@{$self->{spotItems}},$elem26);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SpotPhoneNumberResponse');
  if (defined $self->{spotItems}) {
    $xfer += $output->writeFieldBegin('spotItems', Thrift::TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{spotItems}}));
      {
        foreach my $iter27 (@{$self->{spotItems}}) 
        {
          $xfer += ${iter27}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package PaidCallHistory;
use base qw(Class::Accessor);
PaidCallHistory->mk_accessors( qw( seq type dialedNumber calledNumber toMid toName setupTime startTime endTime duration terminate productType charge unit result ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{seq} = undef;
  $self->{type} = undef;
  $self->{dialedNumber} = undef;
  $self->{calledNumber} = undef;
  $self->{toMid} = undef;
  $self->{toName} = undef;
  $self->{setupTime} = undef;
  $self->{startTime} = undef;
  $self->{endTime} = undef;
  $self->{duration} = undef;
  $self->{terminate} = undef;
  $self->{productType} = undef;
  $self->{charge} = undef;
  $self->{unit} = undef;
  $self->{result} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{seq}) {
      $self->{seq} = $vals->{seq};
    }
    if (defined $vals->{type}) {
      $self->{type} = $vals->{type};
    }
    if (defined $vals->{dialedNumber}) {
      $self->{dialedNumber} = $vals->{dialedNumber};
    }
    if (defined $vals->{calledNumber}) {
      $self->{calledNumber} = $vals->{calledNumber};
    }
    if (defined $vals->{toMid}) {
      $self->{toMid} = $vals->{toMid};
    }
    if (defined $vals->{toName}) {
      $self->{toName} = $vals->{toName};
    }
    if (defined $vals->{setupTime}) {
      $self->{setupTime} = $vals->{setupTime};
    }
    if (defined $vals->{startTime}) {
      $self->{startTime} = $vals->{startTime};
    }
    if (defined $vals->{endTime}) {
      $self->{endTime} = $vals->{endTime};
    }
    if (defined $vals->{duration}) {
      $self->{duration} = $vals->{duration};
    }
    if (defined $vals->{terminate}) {
      $self->{terminate} = $vals->{terminate};
    }
    if (defined $vals->{productType}) {
      $self->{productType} = $vals->{productType};
    }
    if (defined $vals->{charge}) {
      $self->{charge} = $vals->{charge};
    }
    if (defined $vals->{unit}) {
      $self->{unit} = $vals->{unit};
    }
    if (defined $vals->{result}) {
      $self->{result} = $vals->{result};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'PaidCallHistory';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{seq});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{type});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{dialedNumber});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{calledNumber});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{toMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{toName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{setupTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{startTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^9$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{endTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{duration});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{terminate});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{productType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^13$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{charge});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^14$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{unit});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^15$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{result});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('PaidCallHistory');
  if (defined $self->{seq}) {
    $xfer += $output->writeFieldBegin('seq', Thrift::TType::I64, 1);
    $xfer += $output->writeI64($self->{seq});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type}) {
    $xfer += $output->writeFieldBegin('type', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{type});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{dialedNumber}) {
    $xfer += $output->writeFieldBegin('dialedNumber', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{dialedNumber});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{calledNumber}) {
    $xfer += $output->writeFieldBegin('calledNumber', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{calledNumber});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{toMid}) {
    $xfer += $output->writeFieldBegin('toMid', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{toMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{toName}) {
    $xfer += $output->writeFieldBegin('toName', Thrift::TType::STRING, 6);
    $xfer += $output->writeString($self->{toName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{setupTime}) {
    $xfer += $output->writeFieldBegin('setupTime', Thrift::TType::I64, 7);
    $xfer += $output->writeI64($self->{setupTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{startTime}) {
    $xfer += $output->writeFieldBegin('startTime', Thrift::TType::I64, 8);
    $xfer += $output->writeI64($self->{startTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{endTime}) {
    $xfer += $output->writeFieldBegin('endTime', Thrift::TType::I64, 9);
    $xfer += $output->writeI64($self->{endTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{duration}) {
    $xfer += $output->writeFieldBegin('duration', Thrift::TType::I64, 10);
    $xfer += $output->writeI64($self->{duration});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{terminate}) {
    $xfer += $output->writeFieldBegin('terminate', Thrift::TType::I32, 11);
    $xfer += $output->writeI32($self->{terminate});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{productType}) {
    $xfer += $output->writeFieldBegin('productType', Thrift::TType::I32, 12);
    $xfer += $output->writeI32($self->{productType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{charge}) {
    $xfer += $output->writeFieldBegin('charge', Thrift::TType::I32, 13);
    $xfer += $output->writeI32($self->{charge});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{unit}) {
    $xfer += $output->writeFieldBegin('unit', Thrift::TType::STRING, 14);
    $xfer += $output->writeString($self->{unit});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{result}) {
    $xfer += $output->writeFieldBegin('result', Thrift::TType::STRING, 15);
    $xfer += $output->writeString($self->{result});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package PaidCallHistoryResult;
use base qw(Class::Accessor);
PaidCallHistoryResult->mk_accessors( qw( historys hasNext ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{historys} = undef;
  $self->{hasNext} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{historys}) {
      $self->{historys} = $vals->{historys};
    }
    if (defined $vals->{hasNext}) {
      $self->{hasNext} = $vals->{hasNext};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'PaidCallHistoryResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size28 = 0;
          $self->{historys} = [];
          my $_etype31 = 0;
          $xfer += $input->readListBegin(\$_etype31, \$_size28);
          for (my $_i32 = 0; $_i32 < $_size28; ++$_i32)
          {
            my $elem33 = undef;
            $elem33 = PaidCallHistory->new();
            $xfer += $elem33->read($input);
            push(@{$self->{historys}},$elem33);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{hasNext});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('PaidCallHistoryResult');
  if (defined $self->{historys}) {
    $xfer += $output->writeFieldBegin('historys', Thrift::TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{historys}}));
      {
        foreach my $iter34 (@{$self->{historys}}) 
        {
          $xfer += ${iter34}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{hasNext}) {
    $xfer += $output->writeFieldBegin('hasNext', Thrift::TType::BOOL, 2);
    $xfer += $output->writeBool($self->{hasNext});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package PaidCallMetadataResult;
use base qw(Class::Accessor);
PaidCallMetadataResult->mk_accessors( qw( currencyExchangeRates recommendedCountryCodes adCountries ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{currencyExchangeRates} = undef;
  $self->{recommendedCountryCodes} = undef;
  $self->{adCountries} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{currencyExchangeRates}) {
      $self->{currencyExchangeRates} = $vals->{currencyExchangeRates};
    }
    if (defined $vals->{recommendedCountryCodes}) {
      $self->{recommendedCountryCodes} = $vals->{recommendedCountryCodes};
    }
    if (defined $vals->{adCountries}) {
      $self->{adCountries} = $vals->{adCountries};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'PaidCallMetadataResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size35 = 0;
          $self->{currencyExchangeRates} = [];
          my $_etype38 = 0;
          $xfer += $input->readListBegin(\$_etype38, \$_size35);
          for (my $_i39 = 0; $_i39 < $_size35; ++$_i39)
          {
            my $elem40 = undef;
            $elem40 = PaidCallCurrencyExchangeRate->new();
            $xfer += $elem40->read($input);
            push(@{$self->{currencyExchangeRates}},$elem40);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size41 = 0;
          $self->{recommendedCountryCodes} = [];
          my $_etype44 = 0;
          $xfer += $input->readListBegin(\$_etype44, \$_size41);
          for (my $_i45 = 0; $_i45 < $_size41; ++$_i45)
          {
            my $elem46 = undef;
            $xfer += $input->readString(\$elem46);
            push(@{$self->{recommendedCountryCodes}},$elem46);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size47 = 0;
          $self->{adCountries} = [];
          my $_etype50 = 0;
          $xfer += $input->readListBegin(\$_etype50, \$_size47);
          for (my $_i51 = 0; $_i51 < $_size47; ++$_i51)
          {
            my $elem52 = undef;
            $elem52 = PaidCallAdCountry->new();
            $xfer += $elem52->read($input);
            push(@{$self->{adCountries}},$elem52);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('PaidCallMetadataResult');
  if (defined $self->{currencyExchangeRates}) {
    $xfer += $output->writeFieldBegin('currencyExchangeRates', Thrift::TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{currencyExchangeRates}}));
      {
        foreach my $iter53 (@{$self->{currencyExchangeRates}}) 
        {
          $xfer += ${iter53}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{recommendedCountryCodes}) {
    $xfer += $output->writeFieldBegin('recommendedCountryCodes', Thrift::TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{recommendedCountryCodes}}));
      {
        foreach my $iter54 (@{$self->{recommendedCountryCodes}}) 
        {
          $xfer += $output->writeString($iter54);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{adCountries}) {
    $xfer += $output->writeFieldBegin('adCountries', Thrift::TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{adCountries}}));
      {
        foreach my $iter55 (@{$self->{adCountries}}) 
        {
          $xfer += ${iter55}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package PaidCallRedeemResult;
use base qw(Class::Accessor);
PaidCallRedeemResult->mk_accessors( qw( eventName eventAmount ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{eventName} = undef;
  $self->{eventAmount} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{eventName}) {
      $self->{eventName} = $vals->{eventName};
    }
    if (defined $vals->{eventAmount}) {
      $self->{eventAmount} = $vals->{eventAmount};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'PaidCallRedeemResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{eventName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{eventAmount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('PaidCallRedeemResult');
  if (defined $self->{eventName}) {
    $xfer += $output->writeFieldBegin('eventName', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{eventName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{eventAmount}) {
    $xfer += $output->writeFieldBegin('eventAmount', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{eventAmount});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package PaidCallResponse;
use base qw(Class::Accessor);
PaidCallResponse->mk_accessors( qw( host dialing token spotItems ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{host} = undef;
  $self->{dialing} = undef;
  $self->{token} = undef;
  $self->{spotItems} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{host}) {
      $self->{host} = $vals->{host};
    }
    if (defined $vals->{dialing}) {
      $self->{dialing} = $vals->{dialing};
    }
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{spotItems}) {
      $self->{spotItems} = $vals->{spotItems};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'PaidCallResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{host} = CallHost->new();
        $xfer += $self->{host}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{dialing} = PaidCallDialing->new();
        $xfer += $self->{dialing}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size56 = 0;
          $self->{spotItems} = [];
          my $_etype59 = 0;
          $xfer += $input->readListBegin(\$_etype59, \$_size56);
          for (my $_i60 = 0; $_i60 < $_size56; ++$_i60)
          {
            my $elem61 = undef;
            $elem61 = SpotItem->new();
            $xfer += $elem61->read($input);
            push(@{$self->{spotItems}},$elem61);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('PaidCallResponse');
  if (defined $self->{host}) {
    $xfer += $output->writeFieldBegin('host', Thrift::TType::STRUCT, 1);
    $xfer += $self->{host}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{dialing}) {
    $xfer += $output->writeFieldBegin('dialing', Thrift::TType::STRUCT, 2);
    $xfer += $self->{dialing}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{spotItems}) {
    $xfer += $output->writeFieldBegin('spotItems', Thrift::TType::LIST, 4);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{spotItems}}));
      {
        foreach my $iter62 (@{$self->{spotItems}}) 
        {
          $xfer += ${iter62}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package PaidCallUserRate;
use base qw(Class::Accessor);
PaidCallUserRate->mk_accessors( qw( countryCode rate rateDivision rateName ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{countryCode} = undef;
  $self->{rate} = undef;
  $self->{rateDivision} = undef;
  $self->{rateName} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{countryCode}) {
      $self->{countryCode} = $vals->{countryCode};
    }
    if (defined $vals->{rate}) {
      $self->{rate} = $vals->{rate};
    }
    if (defined $vals->{rateDivision}) {
      $self->{rateDivision} = $vals->{rateDivision};
    }
    if (defined $vals->{rateName}) {
      $self->{rateName} = $vals->{rateName};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'PaidCallUserRate';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{countryCode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{rate});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{rateDivision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{rateName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('PaidCallUserRate');
  if (defined $self->{countryCode}) {
    $xfer += $output->writeFieldBegin('countryCode', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{countryCode});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{rate}) {
    $xfer += $output->writeFieldBegin('rate', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{rate});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{rateDivision}) {
    $xfer += $output->writeFieldBegin('rateDivision', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{rateDivision});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{rateName}) {
    $xfer += $output->writeFieldBegin('rateName', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{rateName});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ChannelInfo;
use base qw(Class::Accessor);
ChannelInfo->mk_accessors( qw( channelId name entryPageUrl descriptionText provider publicType iconImage permissions iconThumbnailImage channelConfigurations lcsAllApiUsable allowedPermissions channelDomains updatedTimestamp ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{channelId} = undef;
  $self->{name} = undef;
  $self->{entryPageUrl} = undef;
  $self->{descriptionText} = undef;
  $self->{provider} = undef;
  $self->{publicType} = undef;
  $self->{iconImage} = undef;
  $self->{permissions} = undef;
  $self->{iconThumbnailImage} = undef;
  $self->{channelConfigurations} = undef;
  $self->{lcsAllApiUsable} = undef;
  $self->{allowedPermissions} = undef;
  $self->{channelDomains} = undef;
  $self->{updatedTimestamp} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{channelId}) {
      $self->{channelId} = $vals->{channelId};
    }
    if (defined $vals->{name}) {
      $self->{name} = $vals->{name};
    }
    if (defined $vals->{entryPageUrl}) {
      $self->{entryPageUrl} = $vals->{entryPageUrl};
    }
    if (defined $vals->{descriptionText}) {
      $self->{descriptionText} = $vals->{descriptionText};
    }
    if (defined $vals->{provider}) {
      $self->{provider} = $vals->{provider};
    }
    if (defined $vals->{publicType}) {
      $self->{publicType} = $vals->{publicType};
    }
    if (defined $vals->{iconImage}) {
      $self->{iconImage} = $vals->{iconImage};
    }
    if (defined $vals->{permissions}) {
      $self->{permissions} = $vals->{permissions};
    }
    if (defined $vals->{iconThumbnailImage}) {
      $self->{iconThumbnailImage} = $vals->{iconThumbnailImage};
    }
    if (defined $vals->{channelConfigurations}) {
      $self->{channelConfigurations} = $vals->{channelConfigurations};
    }
    if (defined $vals->{lcsAllApiUsable}) {
      $self->{lcsAllApiUsable} = $vals->{lcsAllApiUsable};
    }
    if (defined $vals->{allowedPermissions}) {
      $self->{allowedPermissions} = $vals->{allowedPermissions};
    }
    if (defined $vals->{channelDomains}) {
      $self->{channelDomains} = $vals->{channelDomains};
    }
    if (defined $vals->{updatedTimestamp}) {
      $self->{updatedTimestamp} = $vals->{updatedTimestamp};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ChannelInfo';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{channelId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{name});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{entryPageUrl});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{descriptionText});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{provider} = ChannelProvider->new();
        $xfer += $self->{provider}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{publicType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{iconImage});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^9$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size63 = 0;
          $self->{permissions} = [];
          my $_etype66 = 0;
          $xfer += $input->readListBegin(\$_etype66, \$_size63);
          for (my $_i67 = 0; $_i67 < $_size63; ++$_i67)
          {
            my $elem68 = undef;
            $xfer += $input->readString(\$elem68);
            push(@{$self->{permissions}},$elem68);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{iconThumbnailImage});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size69 = 0;
          $self->{channelConfigurations} = [];
          my $_etype72 = 0;
          $xfer += $input->readListBegin(\$_etype72, \$_size69);
          for (my $_i73 = 0; $_i73 < $_size69; ++$_i73)
          {
            my $elem74 = undef;
            $xfer += $input->readI32(\$elem74);
            push(@{$self->{channelConfigurations}},$elem74);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^13$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{lcsAllApiUsable});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^14$/ && do{      if ($ftype == Thrift::TType::SET) {
        {
          my $_size75 = 0;
          $self->{allowedPermissions} = {};
          my $_etype78 = 0;
          $xfer += $input->readSetBegin(\$_etype78, \$_size75);
          for (my $_i79 = 0; $_i79 < $_size75; ++$_i79)
          {
            my $elem80 = undef;
            $xfer += $input->readI32(\$elem80);
            $self->{allowedPermissions}->{$elem80} = 1;
          }
          $xfer += $input->readSetEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^15$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size81 = 0;
          $self->{channelDomains} = [];
          my $_etype84 = 0;
          $xfer += $input->readListBegin(\$_etype84, \$_size81);
          for (my $_i85 = 0; $_i85 < $_size81; ++$_i85)
          {
            my $elem86 = undef;
            $elem86 = ChannelDomain->new();
            $xfer += $elem86->read($input);
            push(@{$self->{channelDomains}},$elem86);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^16$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{updatedTimestamp});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ChannelInfo');
  if (defined $self->{channelId}) {
    $xfer += $output->writeFieldBegin('channelId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{channelId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{name}) {
    $xfer += $output->writeFieldBegin('name', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{name});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{entryPageUrl}) {
    $xfer += $output->writeFieldBegin('entryPageUrl', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{entryPageUrl});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{descriptionText}) {
    $xfer += $output->writeFieldBegin('descriptionText', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{descriptionText});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{provider}) {
    $xfer += $output->writeFieldBegin('provider', Thrift::TType::STRUCT, 6);
    $xfer += $self->{provider}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{publicType}) {
    $xfer += $output->writeFieldBegin('publicType', Thrift::TType::I32, 7);
    $xfer += $output->writeI32($self->{publicType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{iconImage}) {
    $xfer += $output->writeFieldBegin('iconImage', Thrift::TType::STRING, 8);
    $xfer += $output->writeString($self->{iconImage});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{permissions}) {
    $xfer += $output->writeFieldBegin('permissions', Thrift::TType::LIST, 9);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{permissions}}));
      {
        foreach my $iter87 (@{$self->{permissions}}) 
        {
          $xfer += $output->writeString($iter87);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{iconThumbnailImage}) {
    $xfer += $output->writeFieldBegin('iconThumbnailImage', Thrift::TType::STRING, 11);
    $xfer += $output->writeString($self->{iconThumbnailImage});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{channelConfigurations}) {
    $xfer += $output->writeFieldBegin('channelConfigurations', Thrift::TType::LIST, 12);
    {
      $xfer += $output->writeListBegin(Thrift::TType::I32, scalar(@{$self->{channelConfigurations}}));
      {
        foreach my $iter88 (@{$self->{channelConfigurations}}) 
        {
          $xfer += $output->writeI32($iter88);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{lcsAllApiUsable}) {
    $xfer += $output->writeFieldBegin('lcsAllApiUsable', Thrift::TType::BOOL, 13);
    $xfer += $output->writeBool($self->{lcsAllApiUsable});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{allowedPermissions}) {
    $xfer += $output->writeFieldBegin('allowedPermissions', Thrift::TType::SET, 14);
    {
      $xfer += $output->writeSetBegin(Thrift::TType::I32, scalar(@{$self->{allowedPermissions}}));
      {
        foreach my $iter89 (@{$self->{allowedPermissions}})
        {
          $xfer += $output->writeI32($iter89);
        }
      }
      $xfer += $output->writeSetEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{channelDomains}) {
    $xfer += $output->writeFieldBegin('channelDomains', Thrift::TType::LIST, 15);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{channelDomains}}));
      {
        foreach my $iter90 (@{$self->{channelDomains}}) 
        {
          $xfer += ${iter90}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{updatedTimestamp}) {
    $xfer += $output->writeFieldBegin('updatedTimestamp', Thrift::TType::I64, 16);
    $xfer += $output->writeI64($self->{updatedTimestamp});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ApprovedChannelInfo;
use base qw(Class::Accessor);
ApprovedChannelInfo->mk_accessors( qw( channelInfo approvedAt ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{channelInfo} = undef;
  $self->{approvedAt} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{channelInfo}) {
      $self->{channelInfo} = $vals->{channelInfo};
    }
    if (defined $vals->{approvedAt}) {
      $self->{approvedAt} = $vals->{approvedAt};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ApprovedChannelInfo';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{channelInfo} = ChannelInfo->new();
        $xfer += $self->{channelInfo}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{approvedAt});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ApprovedChannelInfo');
  if (defined $self->{channelInfo}) {
    $xfer += $output->writeFieldBegin('channelInfo', Thrift::TType::STRUCT, 1);
    $xfer += $self->{channelInfo}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{approvedAt}) {
    $xfer += $output->writeFieldBegin('approvedAt', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{approvedAt});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ApprovedChannelInfos;
use base qw(Class::Accessor);
ApprovedChannelInfos->mk_accessors( qw( approvedChannelInfos revision ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{approvedChannelInfos} = undef;
  $self->{revision} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{approvedChannelInfos}) {
      $self->{approvedChannelInfos} = $vals->{approvedChannelInfos};
    }
    if (defined $vals->{revision}) {
      $self->{revision} = $vals->{revision};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ApprovedChannelInfos';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size91 = 0;
          $self->{approvedChannelInfos} = [];
          my $_etype94 = 0;
          $xfer += $input->readListBegin(\$_etype94, \$_size91);
          for (my $_i95 = 0; $_i95 < $_size91; ++$_i95)
          {
            my $elem96 = undef;
            $elem96 = ApprovedChannelInfo->new();
            $xfer += $elem96->read($input);
            push(@{$self->{approvedChannelInfos}},$elem96);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{revision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ApprovedChannelInfos');
  if (defined $self->{approvedChannelInfos}) {
    $xfer += $output->writeFieldBegin('approvedChannelInfos', Thrift::TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{approvedChannelInfos}}));
      {
        foreach my $iter97 (@{$self->{approvedChannelInfos}}) 
        {
          $xfer += ${iter97}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{revision}) {
    $xfer += $output->writeFieldBegin('revision', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{revision});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package AuthQrcode;
use base qw(Class::Accessor);
AuthQrcode->mk_accessors( qw( qrcode verifier callbackUrl ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{qrcode} = undef;
  $self->{verifier} = undef;
  $self->{callbackUrl} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{qrcode}) {
      $self->{qrcode} = $vals->{qrcode};
    }
    if (defined $vals->{verifier}) {
      $self->{verifier} = $vals->{verifier};
    }
    if (defined $vals->{callbackUrl}) {
      $self->{callbackUrl} = $vals->{callbackUrl};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'AuthQrcode';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{qrcode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{verifier});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{callbackUrl});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('AuthQrcode');
  if (defined $self->{qrcode}) {
    $xfer += $output->writeFieldBegin('qrcode', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{qrcode});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{verifier}) {
    $xfer += $output->writeFieldBegin('verifier', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{verifier});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{callbackUrl}) {
    $xfer += $output->writeFieldBegin('callbackUrl', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{callbackUrl});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package AnalyticsInfo;
use base qw(Class::Accessor);
AnalyticsInfo->mk_accessors( qw( gaSamplingRate tmid ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{gaSamplingRate} = undef;
  $self->{tmid} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{gaSamplingRate}) {
      $self->{gaSamplingRate} = $vals->{gaSamplingRate};
    }
    if (defined $vals->{tmid}) {
      $self->{tmid} = $vals->{tmid};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'AnalyticsInfo';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::DOUBLE) {
        $xfer += $input->readDouble(\$self->{gaSamplingRate});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{tmid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('AnalyticsInfo');
  if (defined $self->{gaSamplingRate}) {
    $xfer += $output->writeFieldBegin('gaSamplingRate', Thrift::TType::DOUBLE, 1);
    $xfer += $output->writeDouble($self->{gaSamplingRate});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{tmid}) {
    $xfer += $output->writeFieldBegin('tmid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{tmid});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ContactTransition;
use base qw(Class::Accessor);
ContactTransition->mk_accessors( qw( ownerMid targetMid previousStatus resultStatus ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{ownerMid} = undef;
  $self->{targetMid} = undef;
  $self->{previousStatus} = undef;
  $self->{resultStatus} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{ownerMid}) {
      $self->{ownerMid} = $vals->{ownerMid};
    }
    if (defined $vals->{targetMid}) {
      $self->{targetMid} = $vals->{targetMid};
    }
    if (defined $vals->{previousStatus}) {
      $self->{previousStatus} = $vals->{previousStatus};
    }
    if (defined $vals->{resultStatus}) {
      $self->{resultStatus} = $vals->{resultStatus};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ContactTransition';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{ownerMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{targetMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{previousStatus});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{resultStatus});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ContactTransition');
  if (defined $self->{ownerMid}) {
    $xfer += $output->writeFieldBegin('ownerMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{ownerMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{targetMid}) {
    $xfer += $output->writeFieldBegin('targetMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{targetMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{previousStatus}) {
    $xfer += $output->writeFieldBegin('previousStatus', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{previousStatus});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{resultStatus}) {
    $xfer += $output->writeFieldBegin('resultStatus', Thrift::TType::I32, 4);
    $xfer += $output->writeI32($self->{resultStatus});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package UserTicketResponse;
use base qw(Class::Accessor);
UserTicketResponse->mk_accessors( qw( mid userTicket ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{mid} = undef;
  $self->{userTicket} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{mid}) {
      $self->{mid} = $vals->{mid};
    }
    if (defined $vals->{userTicket}) {
      $self->{userTicket} = $vals->{userTicket};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'UserTicketResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{mid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{userTicket});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('UserTicketResponse');
  if (defined $self->{mid}) {
    $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{mid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{userTicket}) {
    $xfer += $output->writeFieldBegin('userTicket', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{userTicket});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package BuddyBanner;
use base qw(Class::Accessor);
BuddyBanner->mk_accessors( qw( buddyBannerLinkType buddyBannerLink buddyBannerImageUrl ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{buddyBannerLinkType} = undef;
  $self->{buddyBannerLink} = undef;
  $self->{buddyBannerImageUrl} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{buddyBannerLinkType}) {
      $self->{buddyBannerLinkType} = $vals->{buddyBannerLinkType};
    }
    if (defined $vals->{buddyBannerLink}) {
      $self->{buddyBannerLink} = $vals->{buddyBannerLink};
    }
    if (defined $vals->{buddyBannerImageUrl}) {
      $self->{buddyBannerImageUrl} = $vals->{buddyBannerImageUrl};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BuddyBanner';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{buddyBannerLinkType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{buddyBannerLink});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{buddyBannerImageUrl});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BuddyBanner');
  if (defined $self->{buddyBannerLinkType}) {
    $xfer += $output->writeFieldBegin('buddyBannerLinkType', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{buddyBannerLinkType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{buddyBannerLink}) {
    $xfer += $output->writeFieldBegin('buddyBannerLink', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{buddyBannerLink});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{buddyBannerImageUrl}) {
    $xfer += $output->writeFieldBegin('buddyBannerImageUrl', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{buddyBannerImageUrl});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package BuddyDetail;
use base qw(Class::Accessor);
BuddyDetail->mk_accessors( qw( mid memberCount onAir businessAccount addable acceptableContentTypes capableMyhome ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{mid} = undef;
  $self->{memberCount} = undef;
  $self->{onAir} = undef;
  $self->{businessAccount} = undef;
  $self->{addable} = undef;
  $self->{acceptableContentTypes} = undef;
  $self->{capableMyhome} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{mid}) {
      $self->{mid} = $vals->{mid};
    }
    if (defined $vals->{memberCount}) {
      $self->{memberCount} = $vals->{memberCount};
    }
    if (defined $vals->{onAir}) {
      $self->{onAir} = $vals->{onAir};
    }
    if (defined $vals->{businessAccount}) {
      $self->{businessAccount} = $vals->{businessAccount};
    }
    if (defined $vals->{addable}) {
      $self->{addable} = $vals->{addable};
    }
    if (defined $vals->{acceptableContentTypes}) {
      $self->{acceptableContentTypes} = $vals->{acceptableContentTypes};
    }
    if (defined $vals->{capableMyhome}) {
      $self->{capableMyhome} = $vals->{capableMyhome};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BuddyDetail';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{mid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{memberCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{onAir});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{businessAccount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{addable});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::SET) {
        {
          my $_size98 = 0;
          $self->{acceptableContentTypes} = {};
          my $_etype101 = 0;
          $xfer += $input->readSetBegin(\$_etype101, \$_size98);
          for (my $_i102 = 0; $_i102 < $_size98; ++$_i102)
          {
            my $elem103 = undef;
            $xfer += $input->readI32(\$elem103);
            $self->{acceptableContentTypes}->{$elem103} = 1;
          }
          $xfer += $input->readSetEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{capableMyhome});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BuddyDetail');
  if (defined $self->{mid}) {
    $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{mid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{memberCount}) {
    $xfer += $output->writeFieldBegin('memberCount', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{memberCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{onAir}) {
    $xfer += $output->writeFieldBegin('onAir', Thrift::TType::BOOL, 3);
    $xfer += $output->writeBool($self->{onAir});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{businessAccount}) {
    $xfer += $output->writeFieldBegin('businessAccount', Thrift::TType::BOOL, 4);
    $xfer += $output->writeBool($self->{businessAccount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{addable}) {
    $xfer += $output->writeFieldBegin('addable', Thrift::TType::BOOL, 5);
    $xfer += $output->writeBool($self->{addable});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{acceptableContentTypes}) {
    $xfer += $output->writeFieldBegin('acceptableContentTypes', Thrift::TType::SET, 6);
    {
      $xfer += $output->writeSetBegin(Thrift::TType::I32, scalar(@{$self->{acceptableContentTypes}}));
      {
        foreach my $iter104 (@{$self->{acceptableContentTypes}})
        {
          $xfer += $output->writeI32($iter104);
        }
      }
      $xfer += $output->writeSetEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{capableMyhome}) {
    $xfer += $output->writeFieldBegin('capableMyhome', Thrift::TType::BOOL, 7);
    $xfer += $output->writeBool($self->{capableMyhome});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Contact;
use base qw(Class::Accessor);
Contact->mk_accessors( qw( mid createdTime type status relation displayName phoneticName pictureStatus thumbnailUrl statusMessage displayNameOverridden favoriteTime capableVoiceCall capableVideoCall capableMyhome capableBuddy attributes settings picturePath recommendParams friendRequestStatus musicProfile videoProfile ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{mid} = undef;
  $self->{createdTime} = undef;
  $self->{type} = undef;
  $self->{status} = undef;
  $self->{relation} = undef;
  $self->{displayName} = undef;
  $self->{phoneticName} = undef;
  $self->{pictureStatus} = undef;
  $self->{thumbnailUrl} = undef;
  $self->{statusMessage} = undef;
  $self->{displayNameOverridden} = undef;
  $self->{favoriteTime} = undef;
  $self->{capableVoiceCall} = undef;
  $self->{capableVideoCall} = undef;
  $self->{capableMyhome} = undef;
  $self->{capableBuddy} = undef;
  $self->{attributes} = undef;
  $self->{settings} = undef;
  $self->{picturePath} = undef;
  $self->{recommendParams} = undef;
  $self->{friendRequestStatus} = undef;
  $self->{musicProfile} = undef;
  $self->{videoProfile} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{mid}) {
      $self->{mid} = $vals->{mid};
    }
    if (defined $vals->{createdTime}) {
      $self->{createdTime} = $vals->{createdTime};
    }
    if (defined $vals->{type}) {
      $self->{type} = $vals->{type};
    }
    if (defined $vals->{status}) {
      $self->{status} = $vals->{status};
    }
    if (defined $vals->{relation}) {
      $self->{relation} = $vals->{relation};
    }
    if (defined $vals->{displayName}) {
      $self->{displayName} = $vals->{displayName};
    }
    if (defined $vals->{phoneticName}) {
      $self->{phoneticName} = $vals->{phoneticName};
    }
    if (defined $vals->{pictureStatus}) {
      $self->{pictureStatus} = $vals->{pictureStatus};
    }
    if (defined $vals->{thumbnailUrl}) {
      $self->{thumbnailUrl} = $vals->{thumbnailUrl};
    }
    if (defined $vals->{statusMessage}) {
      $self->{statusMessage} = $vals->{statusMessage};
    }
    if (defined $vals->{displayNameOverridden}) {
      $self->{displayNameOverridden} = $vals->{displayNameOverridden};
    }
    if (defined $vals->{favoriteTime}) {
      $self->{favoriteTime} = $vals->{favoriteTime};
    }
    if (defined $vals->{capableVoiceCall}) {
      $self->{capableVoiceCall} = $vals->{capableVoiceCall};
    }
    if (defined $vals->{capableVideoCall}) {
      $self->{capableVideoCall} = $vals->{capableVideoCall};
    }
    if (defined $vals->{capableMyhome}) {
      $self->{capableMyhome} = $vals->{capableMyhome};
    }
    if (defined $vals->{capableBuddy}) {
      $self->{capableBuddy} = $vals->{capableBuddy};
    }
    if (defined $vals->{attributes}) {
      $self->{attributes} = $vals->{attributes};
    }
    if (defined $vals->{settings}) {
      $self->{settings} = $vals->{settings};
    }
    if (defined $vals->{picturePath}) {
      $self->{picturePath} = $vals->{picturePath};
    }
    if (defined $vals->{recommendParams}) {
      $self->{recommendParams} = $vals->{recommendParams};
    }
    if (defined $vals->{friendRequestStatus}) {
      $self->{friendRequestStatus} = $vals->{friendRequestStatus};
    }
    if (defined $vals->{musicProfile}) {
      $self->{musicProfile} = $vals->{musicProfile};
    }
    if (defined $vals->{videoProfile}) {
      $self->{videoProfile} = $vals->{videoProfile};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Contact';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{mid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{createdTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{type});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{status});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^21$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{relation});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^22$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{displayName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^23$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{phoneticName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^24$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{pictureStatus});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^25$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{thumbnailUrl});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^26$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{statusMessage});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^27$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{displayNameOverridden});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^28$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{favoriteTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^31$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{capableVoiceCall});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^32$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{capableVideoCall});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^33$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{capableMyhome});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^34$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{capableBuddy});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^35$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{attributes});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^36$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{settings});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^37$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{picturePath});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^38$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{recommendParams});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^39$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{friendRequestStatus});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^40$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{musicProfile});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^42$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{videoProfile});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Contact');
  if (defined $self->{mid}) {
    $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{mid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{createdTime}) {
    $xfer += $output->writeFieldBegin('createdTime', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{createdTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type}) {
    $xfer += $output->writeFieldBegin('type', Thrift::TType::I32, 10);
    $xfer += $output->writeI32($self->{type});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{status}) {
    $xfer += $output->writeFieldBegin('status', Thrift::TType::I32, 11);
    $xfer += $output->writeI32($self->{status});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{relation}) {
    $xfer += $output->writeFieldBegin('relation', Thrift::TType::I32, 21);
    $xfer += $output->writeI32($self->{relation});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{displayName}) {
    $xfer += $output->writeFieldBegin('displayName', Thrift::TType::STRING, 22);
    $xfer += $output->writeString($self->{displayName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{phoneticName}) {
    $xfer += $output->writeFieldBegin('phoneticName', Thrift::TType::STRING, 23);
    $xfer += $output->writeString($self->{phoneticName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{pictureStatus}) {
    $xfer += $output->writeFieldBegin('pictureStatus', Thrift::TType::STRING, 24);
    $xfer += $output->writeString($self->{pictureStatus});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{thumbnailUrl}) {
    $xfer += $output->writeFieldBegin('thumbnailUrl', Thrift::TType::STRING, 25);
    $xfer += $output->writeString($self->{thumbnailUrl});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{statusMessage}) {
    $xfer += $output->writeFieldBegin('statusMessage', Thrift::TType::STRING, 26);
    $xfer += $output->writeString($self->{statusMessage});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{displayNameOverridden}) {
    $xfer += $output->writeFieldBegin('displayNameOverridden', Thrift::TType::STRING, 27);
    $xfer += $output->writeString($self->{displayNameOverridden});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{favoriteTime}) {
    $xfer += $output->writeFieldBegin('favoriteTime', Thrift::TType::I64, 28);
    $xfer += $output->writeI64($self->{favoriteTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{capableVoiceCall}) {
    $xfer += $output->writeFieldBegin('capableVoiceCall', Thrift::TType::BOOL, 31);
    $xfer += $output->writeBool($self->{capableVoiceCall});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{capableVideoCall}) {
    $xfer += $output->writeFieldBegin('capableVideoCall', Thrift::TType::BOOL, 32);
    $xfer += $output->writeBool($self->{capableVideoCall});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{capableMyhome}) {
    $xfer += $output->writeFieldBegin('capableMyhome', Thrift::TType::BOOL, 33);
    $xfer += $output->writeBool($self->{capableMyhome});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{capableBuddy}) {
    $xfer += $output->writeFieldBegin('capableBuddy', Thrift::TType::BOOL, 34);
    $xfer += $output->writeBool($self->{capableBuddy});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attributes}) {
    $xfer += $output->writeFieldBegin('attributes', Thrift::TType::I32, 35);
    $xfer += $output->writeI32($self->{attributes});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{settings}) {
    $xfer += $output->writeFieldBegin('settings', Thrift::TType::I64, 36);
    $xfer += $output->writeI64($self->{settings});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{picturePath}) {
    $xfer += $output->writeFieldBegin('picturePath', Thrift::TType::STRING, 37);
    $xfer += $output->writeString($self->{picturePath});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{recommendParams}) {
    $xfer += $output->writeFieldBegin('recommendParams', Thrift::TType::STRING, 38);
    $xfer += $output->writeString($self->{recommendParams});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{friendRequestStatus}) {
    $xfer += $output->writeFieldBegin('friendRequestStatus', Thrift::TType::I32, 39);
    $xfer += $output->writeI32($self->{friendRequestStatus});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{musicProfile}) {
    $xfer += $output->writeFieldBegin('musicProfile', Thrift::TType::STRING, 40);
    $xfer += $output->writeString($self->{musicProfile});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{videoProfile}) {
    $xfer += $output->writeFieldBegin('videoProfile', Thrift::TType::STRING, 42);
    $xfer += $output->writeString($self->{videoProfile});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package BuddyList;
use base qw(Class::Accessor);
BuddyList->mk_accessors( qw( classification displayName totalBuddyCount popularContacts ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{classification} = undef;
  $self->{displayName} = undef;
  $self->{totalBuddyCount} = undef;
  $self->{popularContacts} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{classification}) {
      $self->{classification} = $vals->{classification};
    }
    if (defined $vals->{displayName}) {
      $self->{displayName} = $vals->{displayName};
    }
    if (defined $vals->{totalBuddyCount}) {
      $self->{totalBuddyCount} = $vals->{totalBuddyCount};
    }
    if (defined $vals->{popularContacts}) {
      $self->{popularContacts} = $vals->{popularContacts};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BuddyList';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{classification});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{displayName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{totalBuddyCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size105 = 0;
          $self->{popularContacts} = [];
          my $_etype108 = 0;
          $xfer += $input->readListBegin(\$_etype108, \$_size105);
          for (my $_i109 = 0; $_i109 < $_size105; ++$_i109)
          {
            my $elem110 = undef;
            $elem110 = Contact->new();
            $xfer += $elem110->read($input);
            push(@{$self->{popularContacts}},$elem110);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BuddyList');
  if (defined $self->{classification}) {
    $xfer += $output->writeFieldBegin('classification', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{classification});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{displayName}) {
    $xfer += $output->writeFieldBegin('displayName', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{displayName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{totalBuddyCount}) {
    $xfer += $output->writeFieldBegin('totalBuddyCount', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{totalBuddyCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{popularContacts}) {
    $xfer += $output->writeFieldBegin('popularContacts', Thrift::TType::LIST, 4);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{popularContacts}}));
      {
        foreach my $iter111 (@{$self->{popularContacts}}) 
        {
          $xfer += ${iter111}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package RegisterWithPhoneNumberResult;
use base qw(Class::Accessor);
RegisterWithPhoneNumberResult->mk_accessors( qw( authToken recommendEmailRegistration certificate ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{authToken} = undef;
  $self->{recommendEmailRegistration} = undef;
  $self->{certificate} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{authToken}) {
      $self->{authToken} = $vals->{authToken};
    }
    if (defined $vals->{recommendEmailRegistration}) {
      $self->{recommendEmailRegistration} = $vals->{recommendEmailRegistration};
    }
    if (defined $vals->{certificate}) {
      $self->{certificate} = $vals->{certificate};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RegisterWithPhoneNumberResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{authToken});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{recommendEmailRegistration});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{certificate});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RegisterWithPhoneNumberResult');
  if (defined $self->{authToken}) {
    $xfer += $output->writeFieldBegin('authToken', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{authToken});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{recommendEmailRegistration}) {
    $xfer += $output->writeFieldBegin('recommendEmailRegistration', Thrift::TType::BOOL, 2);
    $xfer += $output->writeBool($self->{recommendEmailRegistration});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{certificate}) {
    $xfer += $output->writeFieldBegin('certificate', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{certificate});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package BuddyMessageRequest;
use base qw(Class::Accessor);
BuddyMessageRequest->mk_accessors( qw( contentType text location content contentMetadata ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{contentType} = undef;
  $self->{text} = undef;
  $self->{location} = undef;
  $self->{content} = undef;
  $self->{contentMetadata} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{contentType}) {
      $self->{contentType} = $vals->{contentType};
    }
    if (defined $vals->{text}) {
      $self->{text} = $vals->{text};
    }
    if (defined $vals->{location}) {
      $self->{location} = $vals->{location};
    }
    if (defined $vals->{content}) {
      $self->{content} = $vals->{content};
    }
    if (defined $vals->{contentMetadata}) {
      $self->{contentMetadata} = $vals->{contentMetadata};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BuddyMessageRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{contentType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{text});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{location} = Location->new();
        $xfer += $self->{location}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{content});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size112 = 0;
          $self->{contentMetadata} = {};
          my $_ktype113 = 0;
          my $_vtype114 = 0;
          $xfer += $input->readMapBegin(\$_ktype113, \$_vtype114, \$_size112);
          for (my $_i116 = 0; $_i116 < $_size112; ++$_i116)
          {
            my $key117 = '';
            my $val118 = '';
            $xfer += $input->readString(\$key117);
            $xfer += $input->readString(\$val118);
            $self->{contentMetadata}->{$key117} = $val118;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BuddyMessageRequest');
  if (defined $self->{contentType}) {
    $xfer += $output->writeFieldBegin('contentType', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{contentType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{text}) {
    $xfer += $output->writeFieldBegin('text', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{text});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{location}) {
    $xfer += $output->writeFieldBegin('location', Thrift::TType::STRUCT, 3);
    $xfer += $self->{location}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{content}) {
    $xfer += $output->writeFieldBegin('content', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{content});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{contentMetadata}) {
    $xfer += $output->writeFieldBegin('contentMetadata', Thrift::TType::MAP, 5);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{contentMetadata}}));
      {
        while( my ($kiter119,$viter120) = each %{$self->{contentMetadata}}) 
        {
          $xfer += $output->writeString($kiter119);
          $xfer += $output->writeString($viter120);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package BuddyOnAirUrls;
use base qw(Class::Accessor);
BuddyOnAirUrls->mk_accessors( qw( hls smoothStreaming ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{hls} = undef;
  $self->{smoothStreaming} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{hls}) {
      $self->{hls} = $vals->{hls};
    }
    if (defined $vals->{smoothStreaming}) {
      $self->{smoothStreaming} = $vals->{smoothStreaming};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BuddyOnAirUrls';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size121 = 0;
          $self->{hls} = {};
          my $_ktype122 = 0;
          my $_vtype123 = 0;
          $xfer += $input->readMapBegin(\$_ktype122, \$_vtype123, \$_size121);
          for (my $_i125 = 0; $_i125 < $_size121; ++$_i125)
          {
            my $key126 = '';
            my $val127 = '';
            $xfer += $input->readString(\$key126);
            $xfer += $input->readString(\$val127);
            $self->{hls}->{$key126} = $val127;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size128 = 0;
          $self->{smoothStreaming} = {};
          my $_ktype129 = 0;
          my $_vtype130 = 0;
          $xfer += $input->readMapBegin(\$_ktype129, \$_vtype130, \$_size128);
          for (my $_i132 = 0; $_i132 < $_size128; ++$_i132)
          {
            my $key133 = '';
            my $val134 = '';
            $xfer += $input->readString(\$key133);
            $xfer += $input->readString(\$val134);
            $self->{smoothStreaming}->{$key133} = $val134;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BuddyOnAirUrls');
  if (defined $self->{hls}) {
    $xfer += $output->writeFieldBegin('hls', Thrift::TType::MAP, 1);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{hls}}));
      {
        while( my ($kiter135,$viter136) = each %{$self->{hls}}) 
        {
          $xfer += $output->writeString($kiter135);
          $xfer += $output->writeString($viter136);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{smoothStreaming}) {
    $xfer += $output->writeFieldBegin('smoothStreaming', Thrift::TType::MAP, 2);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{smoothStreaming}}));
      {
        while( my ($kiter137,$viter138) = each %{$self->{smoothStreaming}}) 
        {
          $xfer += $output->writeString($kiter137);
          $xfer += $output->writeString($viter138);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package BuddyOnAir;
use base qw(Class::Accessor);
BuddyOnAir->mk_accessors( qw( mid freshnessLifetime onAirId onAir text viewerCount targetCount onAirType onAirUrls ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{mid} = undef;
  $self->{freshnessLifetime} = undef;
  $self->{onAirId} = undef;
  $self->{onAir} = undef;
  $self->{text} = undef;
  $self->{viewerCount} = undef;
  $self->{targetCount} = undef;
  $self->{onAirType} = undef;
  $self->{onAirUrls} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{mid}) {
      $self->{mid} = $vals->{mid};
    }
    if (defined $vals->{freshnessLifetime}) {
      $self->{freshnessLifetime} = $vals->{freshnessLifetime};
    }
    if (defined $vals->{onAirId}) {
      $self->{onAirId} = $vals->{onAirId};
    }
    if (defined $vals->{onAir}) {
      $self->{onAir} = $vals->{onAir};
    }
    if (defined $vals->{text}) {
      $self->{text} = $vals->{text};
    }
    if (defined $vals->{viewerCount}) {
      $self->{viewerCount} = $vals->{viewerCount};
    }
    if (defined $vals->{targetCount}) {
      $self->{targetCount} = $vals->{targetCount};
    }
    if (defined $vals->{onAirType}) {
      $self->{onAirType} = $vals->{onAirType};
    }
    if (defined $vals->{onAirUrls}) {
      $self->{onAirUrls} = $vals->{onAirUrls};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BuddyOnAir';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{mid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{freshnessLifetime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{onAirId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{onAir});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{text});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{viewerCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^13$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{targetCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^31$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{onAirType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^32$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{onAirUrls} = BuddyOnAirUrls->new();
        $xfer += $self->{onAirUrls}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BuddyOnAir');
  if (defined $self->{mid}) {
    $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{mid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{freshnessLifetime}) {
    $xfer += $output->writeFieldBegin('freshnessLifetime', Thrift::TType::I64, 3);
    $xfer += $output->writeI64($self->{freshnessLifetime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{onAirId}) {
    $xfer += $output->writeFieldBegin('onAirId', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{onAirId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{onAir}) {
    $xfer += $output->writeFieldBegin('onAir', Thrift::TType::BOOL, 5);
    $xfer += $output->writeBool($self->{onAir});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{text}) {
    $xfer += $output->writeFieldBegin('text', Thrift::TType::STRING, 11);
    $xfer += $output->writeString($self->{text});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{viewerCount}) {
    $xfer += $output->writeFieldBegin('viewerCount', Thrift::TType::I64, 12);
    $xfer += $output->writeI64($self->{viewerCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{targetCount}) {
    $xfer += $output->writeFieldBegin('targetCount', Thrift::TType::I64, 13);
    $xfer += $output->writeI64($self->{targetCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{onAirType}) {
    $xfer += $output->writeFieldBegin('onAirType', Thrift::TType::I32, 31);
    $xfer += $output->writeI32($self->{onAirType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{onAirUrls}) {
    $xfer += $output->writeFieldBegin('onAirUrls', Thrift::TType::STRUCT, 32);
    $xfer += $self->{onAirUrls}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package BuddyProfile;
use base qw(Class::Accessor);
BuddyProfile->mk_accessors( qw( buddyId mid searchId displayName statusMessage contactCount ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{buddyId} = undef;
  $self->{mid} = undef;
  $self->{searchId} = undef;
  $self->{displayName} = undef;
  $self->{statusMessage} = undef;
  $self->{contactCount} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{buddyId}) {
      $self->{buddyId} = $vals->{buddyId};
    }
    if (defined $vals->{mid}) {
      $self->{mid} = $vals->{mid};
    }
    if (defined $vals->{searchId}) {
      $self->{searchId} = $vals->{searchId};
    }
    if (defined $vals->{displayName}) {
      $self->{displayName} = $vals->{displayName};
    }
    if (defined $vals->{statusMessage}) {
      $self->{statusMessage} = $vals->{statusMessage};
    }
    if (defined $vals->{contactCount}) {
      $self->{contactCount} = $vals->{contactCount};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BuddyProfile';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{buddyId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{mid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{searchId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{displayName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{statusMessage});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{contactCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BuddyProfile');
  if (defined $self->{buddyId}) {
    $xfer += $output->writeFieldBegin('buddyId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{buddyId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{mid}) {
    $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{mid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{searchId}) {
    $xfer += $output->writeFieldBegin('searchId', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{searchId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{displayName}) {
    $xfer += $output->writeFieldBegin('displayName', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{displayName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{statusMessage}) {
    $xfer += $output->writeFieldBegin('statusMessage', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{statusMessage});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{contactCount}) {
    $xfer += $output->writeFieldBegin('contactCount', Thrift::TType::I64, 11);
    $xfer += $output->writeI64($self->{contactCount});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package CommitMessageResult;
use base qw(Class::Accessor);
CommitMessageResult->mk_accessors( qw( message code reason successCount failCount unregisterCount blockCount ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{message} = undef;
  $self->{code} = undef;
  $self->{reason} = undef;
  $self->{successCount} = undef;
  $self->{failCount} = undef;
  $self->{unregisterCount} = undef;
  $self->{blockCount} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{message}) {
      $self->{message} = $vals->{message};
    }
    if (defined $vals->{code}) {
      $self->{code} = $vals->{code};
    }
    if (defined $vals->{reason}) {
      $self->{reason} = $vals->{reason};
    }
    if (defined $vals->{successCount}) {
      $self->{successCount} = $vals->{successCount};
    }
    if (defined $vals->{failCount}) {
      $self->{failCount} = $vals->{failCount};
    }
    if (defined $vals->{unregisterCount}) {
      $self->{unregisterCount} = $vals->{unregisterCount};
    }
    if (defined $vals->{blockCount}) {
      $self->{blockCount} = $vals->{blockCount};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'CommitMessageResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{message} = Message->new();
        $xfer += $self->{message}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{code});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{reason});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{successCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{failCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{unregisterCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{blockCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('CommitMessageResult');
  if (defined $self->{message}) {
    $xfer += $output->writeFieldBegin('message', Thrift::TType::STRUCT, 1);
    $xfer += $self->{message}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{code}) {
    $xfer += $output->writeFieldBegin('code', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{code});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reason}) {
    $xfer += $output->writeFieldBegin('reason', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{reason});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{successCount}) {
    $xfer += $output->writeFieldBegin('successCount', Thrift::TType::I64, 4);
    $xfer += $output->writeI64($self->{successCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{failCount}) {
    $xfer += $output->writeFieldBegin('failCount', Thrift::TType::I64, 5);
    $xfer += $output->writeI64($self->{failCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{unregisterCount}) {
    $xfer += $output->writeFieldBegin('unregisterCount', Thrift::TType::I64, 6);
    $xfer += $output->writeI64($self->{unregisterCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{blockCount}) {
    $xfer += $output->writeFieldBegin('blockCount', Thrift::TType::I64, 7);
    $xfer += $output->writeI64($self->{blockCount});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package BuddySearchResult;
use base qw(Class::Accessor);
BuddySearchResult->mk_accessors( qw( mid displayName pictureStatus picturePath statusMessage businessAccount ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{mid} = undef;
  $self->{displayName} = undef;
  $self->{pictureStatus} = undef;
  $self->{picturePath} = undef;
  $self->{statusMessage} = undef;
  $self->{businessAccount} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{mid}) {
      $self->{mid} = $vals->{mid};
    }
    if (defined $vals->{displayName}) {
      $self->{displayName} = $vals->{displayName};
    }
    if (defined $vals->{pictureStatus}) {
      $self->{pictureStatus} = $vals->{pictureStatus};
    }
    if (defined $vals->{picturePath}) {
      $self->{picturePath} = $vals->{picturePath};
    }
    if (defined $vals->{statusMessage}) {
      $self->{statusMessage} = $vals->{statusMessage};
    }
    if (defined $vals->{businessAccount}) {
      $self->{businessAccount} = $vals->{businessAccount};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BuddySearchResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{mid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{displayName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{pictureStatus});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{picturePath});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{statusMessage});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{businessAccount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BuddySearchResult');
  if (defined $self->{mid}) {
    $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{mid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{displayName}) {
    $xfer += $output->writeFieldBegin('displayName', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{displayName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{pictureStatus}) {
    $xfer += $output->writeFieldBegin('pictureStatus', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{pictureStatus});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{picturePath}) {
    $xfer += $output->writeFieldBegin('picturePath', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{picturePath});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{statusMessage}) {
    $xfer += $output->writeFieldBegin('statusMessage', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{statusMessage});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{businessAccount}) {
    $xfer += $output->writeFieldBegin('businessAccount', Thrift::TType::BOOL, 6);
    $xfer += $output->writeBool($self->{businessAccount});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SyncParamMid;
use base qw(Class::Accessor);
SyncParamMid->mk_accessors( qw( mid diff revision ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{mid} = undef;
  $self->{diff} = undef;
  $self->{revision} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{mid}) {
      $self->{mid} = $vals->{mid};
    }
    if (defined $vals->{diff}) {
      $self->{diff} = $vals->{diff};
    }
    if (defined $vals->{revision}) {
      $self->{revision} = $vals->{revision};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SyncParamMid';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{mid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{diff});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{revision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SyncParamMid');
  if (defined $self->{mid}) {
    $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{mid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{diff}) {
    $xfer += $output->writeFieldBegin('diff', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{diff});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{revision}) {
    $xfer += $output->writeFieldBegin('revision', Thrift::TType::I64, 3);
    $xfer += $output->writeI64($self->{revision});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SIMInfo;
use base qw(Class::Accessor);
SIMInfo->mk_accessors( qw( phoneNumber countryCode ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{phoneNumber} = undef;
  $self->{countryCode} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{phoneNumber}) {
      $self->{phoneNumber} = $vals->{phoneNumber};
    }
    if (defined $vals->{countryCode}) {
      $self->{countryCode} = $vals->{countryCode};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SIMInfo';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{phoneNumber});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{countryCode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SIMInfo');
  if (defined $self->{phoneNumber}) {
    $xfer += $output->writeFieldBegin('phoneNumber', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{phoneNumber});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{countryCode}) {
    $xfer += $output->writeFieldBegin('countryCode', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{countryCode});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SyncParamContact;
use base qw(Class::Accessor);
SyncParamContact->mk_accessors( qw( syncParamMid contactStatus ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{syncParamMid} = undef;
  $self->{contactStatus} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{syncParamMid}) {
      $self->{syncParamMid} = $vals->{syncParamMid};
    }
    if (defined $vals->{contactStatus}) {
      $self->{contactStatus} = $vals->{contactStatus};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SyncParamContact';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{syncParamMid} = SyncParamMid->new();
        $xfer += $self->{syncParamMid}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{contactStatus});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SyncParamContact');
  if (defined $self->{syncParamMid}) {
    $xfer += $output->writeFieldBegin('syncParamMid', Thrift::TType::STRUCT, 1);
    $xfer += $self->{syncParamMid}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{contactStatus}) {
    $xfer += $output->writeFieldBegin('contactStatus', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{contactStatus});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ChannelDomains;
use base qw(Class::Accessor);
ChannelDomains->mk_accessors( qw( channelDomains revision ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{channelDomains} = undef;
  $self->{revision} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{channelDomains}) {
      $self->{channelDomains} = $vals->{channelDomains};
    }
    if (defined $vals->{revision}) {
      $self->{revision} = $vals->{revision};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ChannelDomains';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size139 = 0;
          $self->{channelDomains} = [];
          my $_etype142 = 0;
          $xfer += $input->readListBegin(\$_etype142, \$_size139);
          for (my $_i143 = 0; $_i143 < $_size139; ++$_i143)
          {
            my $elem144 = undef;
            $elem144 = ChannelDomain->new();
            $xfer += $elem144->read($input);
            push(@{$self->{channelDomains}},$elem144);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{revision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ChannelDomains');
  if (defined $self->{channelDomains}) {
    $xfer += $output->writeFieldBegin('channelDomains', Thrift::TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{channelDomains}}));
      {
        foreach my $iter145 (@{$self->{channelDomains}}) 
        {
          $xfer += ${iter145}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{revision}) {
    $xfer += $output->writeFieldBegin('revision', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{revision});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ProductCategory;
use base qw(Class::Accessor);
ProductCategory->mk_accessors( qw( productCategoryId title productCount newFlag ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{productCategoryId} = undef;
  $self->{title} = undef;
  $self->{productCount} = undef;
  $self->{newFlag} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{productCategoryId}) {
      $self->{productCategoryId} = $vals->{productCategoryId};
    }
    if (defined $vals->{title}) {
      $self->{title} = $vals->{title};
    }
    if (defined $vals->{productCount}) {
      $self->{productCount} = $vals->{productCount};
    }
    if (defined $vals->{newFlag}) {
      $self->{newFlag} = $vals->{newFlag};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ProductCategory';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{productCategoryId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{title});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{productCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{newFlag});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ProductCategory');
  if (defined $self->{productCategoryId}) {
    $xfer += $output->writeFieldBegin('productCategoryId', Thrift::TType::I64, 1);
    $xfer += $output->writeI64($self->{productCategoryId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{title}) {
    $xfer += $output->writeFieldBegin('title', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{title});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{productCount}) {
    $xfer += $output->writeFieldBegin('productCount', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{productCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{newFlag}) {
    $xfer += $output->writeFieldBegin('newFlag', Thrift::TType::BOOL, 4);
    $xfer += $output->writeBool($self->{newFlag});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ChannelInfos;
use base qw(Class::Accessor);
ChannelInfos->mk_accessors( qw( channelInfos revision ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{channelInfos} = undef;
  $self->{revision} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{channelInfos}) {
      $self->{channelInfos} = $vals->{channelInfos};
    }
    if (defined $vals->{revision}) {
      $self->{revision} = $vals->{revision};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ChannelInfos';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size146 = 0;
          $self->{channelInfos} = [];
          my $_etype149 = 0;
          $xfer += $input->readListBegin(\$_etype149, \$_size146);
          for (my $_i150 = 0; $_i150 < $_size146; ++$_i150)
          {
            my $elem151 = undef;
            $elem151 = ChannelInfo->new();
            $xfer += $elem151->read($input);
            push(@{$self->{channelInfos}},$elem151);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{revision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ChannelInfos');
  if (defined $self->{channelInfos}) {
    $xfer += $output->writeFieldBegin('channelInfos', Thrift::TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{channelInfos}}));
      {
        foreach my $iter152 (@{$self->{channelInfos}}) 
        {
          $xfer += ${iter152}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{revision}) {
    $xfer += $output->writeFieldBegin('revision', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{revision});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ChannelNotificationSetting;
use base qw(Class::Accessor);
ChannelNotificationSetting->mk_accessors( qw( channelId name notificationReceivable messageReceivable showDefault ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{channelId} = undef;
  $self->{name} = undef;
  $self->{notificationReceivable} = undef;
  $self->{messageReceivable} = undef;
  $self->{showDefault} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{channelId}) {
      $self->{channelId} = $vals->{channelId};
    }
    if (defined $vals->{name}) {
      $self->{name} = $vals->{name};
    }
    if (defined $vals->{notificationReceivable}) {
      $self->{notificationReceivable} = $vals->{notificationReceivable};
    }
    if (defined $vals->{messageReceivable}) {
      $self->{messageReceivable} = $vals->{messageReceivable};
    }
    if (defined $vals->{showDefault}) {
      $self->{showDefault} = $vals->{showDefault};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ChannelNotificationSetting';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{channelId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{name});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{notificationReceivable});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{messageReceivable});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{showDefault});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ChannelNotificationSetting');
  if (defined $self->{channelId}) {
    $xfer += $output->writeFieldBegin('channelId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{channelId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{name}) {
    $xfer += $output->writeFieldBegin('name', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{name});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notificationReceivable}) {
    $xfer += $output->writeFieldBegin('notificationReceivable', Thrift::TType::BOOL, 3);
    $xfer += $output->writeBool($self->{notificationReceivable});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{messageReceivable}) {
    $xfer += $output->writeFieldBegin('messageReceivable', Thrift::TType::BOOL, 4);
    $xfer += $output->writeBool($self->{messageReceivable});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{showDefault}) {
    $xfer += $output->writeFieldBegin('showDefault', Thrift::TType::BOOL, 5);
    $xfer += $output->writeBool($self->{showDefault});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ChannelSyncDatas;
use base qw(Class::Accessor);
ChannelSyncDatas->mk_accessors( qw( channelInfos channelDomains revision expires ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{channelInfos} = undef;
  $self->{channelDomains} = undef;
  $self->{revision} = undef;
  $self->{expires} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{channelInfos}) {
      $self->{channelInfos} = $vals->{channelInfos};
    }
    if (defined $vals->{channelDomains}) {
      $self->{channelDomains} = $vals->{channelDomains};
    }
    if (defined $vals->{revision}) {
      $self->{revision} = $vals->{revision};
    }
    if (defined $vals->{expires}) {
      $self->{expires} = $vals->{expires};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ChannelSyncDatas';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size153 = 0;
          $self->{channelInfos} = [];
          my $_etype156 = 0;
          $xfer += $input->readListBegin(\$_etype156, \$_size153);
          for (my $_i157 = 0; $_i157 < $_size153; ++$_i157)
          {
            my $elem158 = undef;
            $elem158 = ChannelInfo->new();
            $xfer += $elem158->read($input);
            push(@{$self->{channelInfos}},$elem158);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size159 = 0;
          $self->{channelDomains} = [];
          my $_etype162 = 0;
          $xfer += $input->readListBegin(\$_etype162, \$_size159);
          for (my $_i163 = 0; $_i163 < $_size159; ++$_i163)
          {
            my $elem164 = undef;
            $elem164 = ChannelDomain->new();
            $xfer += $elem164->read($input);
            push(@{$self->{channelDomains}},$elem164);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{revision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{expires});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ChannelSyncDatas');
  if (defined $self->{channelInfos}) {
    $xfer += $output->writeFieldBegin('channelInfos', Thrift::TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{channelInfos}}));
      {
        foreach my $iter165 (@{$self->{channelInfos}}) 
        {
          $xfer += ${iter165}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{channelDomains}) {
    $xfer += $output->writeFieldBegin('channelDomains', Thrift::TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{channelDomains}}));
      {
        foreach my $iter166 (@{$self->{channelDomains}}) 
        {
          $xfer += ${iter166}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{revision}) {
    $xfer += $output->writeFieldBegin('revision', Thrift::TType::I64, 3);
    $xfer += $output->writeI64($self->{revision});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{expires}) {
    $xfer += $output->writeFieldBegin('expires', Thrift::TType::I64, 4);
    $xfer += $output->writeI64($self->{expires});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package NotiCenterEventData;
use base qw(Class::Accessor);
NotiCenterEventData->mk_accessors( qw( id to from_ toChannel fromChannel eventType createdTime operationRevision content push ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{id} = undef;
  $self->{to} = undef;
  $self->{from_} = undef;
  $self->{toChannel} = undef;
  $self->{fromChannel} = undef;
  $self->{eventType} = undef;
  $self->{createdTime} = undef;
  $self->{operationRevision} = undef;
  $self->{content} = undef;
  $self->{push} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{id}) {
      $self->{id} = $vals->{id};
    }
    if (defined $vals->{to}) {
      $self->{to} = $vals->{to};
    }
    if (defined $vals->{from_}) {
      $self->{from_} = $vals->{from_};
    }
    if (defined $vals->{toChannel}) {
      $self->{toChannel} = $vals->{toChannel};
    }
    if (defined $vals->{fromChannel}) {
      $self->{fromChannel} = $vals->{fromChannel};
    }
    if (defined $vals->{eventType}) {
      $self->{eventType} = $vals->{eventType};
    }
    if (defined $vals->{createdTime}) {
      $self->{createdTime} = $vals->{createdTime};
    }
    if (defined $vals->{operationRevision}) {
      $self->{operationRevision} = $vals->{operationRevision};
    }
    if (defined $vals->{content}) {
      $self->{content} = $vals->{content};
    }
    if (defined $vals->{push}) {
      $self->{push} = $vals->{push};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'NotiCenterEventData';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{id});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{to});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{from_});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{toChannel});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{fromChannel});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{eventType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{createdTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{operationRevision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^9$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size167 = 0;
          $self->{content} = {};
          my $_ktype168 = 0;
          my $_vtype169 = 0;
          $xfer += $input->readMapBegin(\$_ktype168, \$_vtype169, \$_size167);
          for (my $_i171 = 0; $_i171 < $_size167; ++$_i171)
          {
            my $key172 = '';
            my $val173 = '';
            $xfer += $input->readString(\$key172);
            $xfer += $input->readString(\$val173);
            $self->{content}->{$key172} = $val173;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size174 = 0;
          $self->{push} = {};
          my $_ktype175 = 0;
          my $_vtype176 = 0;
          $xfer += $input->readMapBegin(\$_ktype175, \$_vtype176, \$_size174);
          for (my $_i178 = 0; $_i178 < $_size174; ++$_i178)
          {
            my $key179 = '';
            my $val180 = '';
            $xfer += $input->readString(\$key179);
            $xfer += $input->readString(\$val180);
            $self->{push}->{$key179} = $val180;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('NotiCenterEventData');
  if (defined $self->{id}) {
    $xfer += $output->writeFieldBegin('id', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{id});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{to}) {
    $xfer += $output->writeFieldBegin('to', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{to});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{from_}) {
    $xfer += $output->writeFieldBegin('from_', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{from_});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{toChannel}) {
    $xfer += $output->writeFieldBegin('toChannel', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{toChannel});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{fromChannel}) {
    $xfer += $output->writeFieldBegin('fromChannel', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{fromChannel});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{eventType}) {
    $xfer += $output->writeFieldBegin('eventType', Thrift::TType::STRING, 6);
    $xfer += $output->writeString($self->{eventType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{createdTime}) {
    $xfer += $output->writeFieldBegin('createdTime', Thrift::TType::I64, 7);
    $xfer += $output->writeI64($self->{createdTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{operationRevision}) {
    $xfer += $output->writeFieldBegin('operationRevision', Thrift::TType::I64, 8);
    $xfer += $output->writeI64($self->{operationRevision});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{content}) {
    $xfer += $output->writeFieldBegin('content', Thrift::TType::MAP, 9);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{content}}));
      {
        while( my ($kiter181,$viter182) = each %{$self->{content}}) 
        {
          $xfer += $output->writeString($kiter181);
          $xfer += $output->writeString($viter182);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{push}) {
    $xfer += $output->writeFieldBegin('push', Thrift::TType::MAP, 10);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{push}}));
      {
        while( my ($kiter183,$viter184) = each %{$self->{push}}) 
        {
          $xfer += $output->writeString($kiter183);
          $xfer += $output->writeString($viter184);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ChannelToken;
use base qw(Class::Accessor);
ChannelToken->mk_accessors( qw( token obsToken expiration refreshToken channelAccessToken ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{obsToken} = undef;
  $self->{expiration} = undef;
  $self->{refreshToken} = undef;
  $self->{channelAccessToken} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{obsToken}) {
      $self->{obsToken} = $vals->{obsToken};
    }
    if (defined $vals->{expiration}) {
      $self->{expiration} = $vals->{expiration};
    }
    if (defined $vals->{refreshToken}) {
      $self->{refreshToken} = $vals->{refreshToken};
    }
    if (defined $vals->{channelAccessToken}) {
      $self->{channelAccessToken} = $vals->{channelAccessToken};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ChannelToken';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{obsToken});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{expiration});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{refreshToken});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{channelAccessToken});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ChannelToken');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{obsToken}) {
    $xfer += $output->writeFieldBegin('obsToken', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{obsToken});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{expiration}) {
    $xfer += $output->writeFieldBegin('expiration', Thrift::TType::I64, 3);
    $xfer += $output->writeI64($self->{expiration});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{refreshToken}) {
    $xfer += $output->writeFieldBegin('refreshToken', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{refreshToken});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{channelAccessToken}) {
    $xfer += $output->writeFieldBegin('channelAccessToken', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{channelAccessToken});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ChannelSettings;
use base qw(Class::Accessor);
ChannelSettings->mk_accessors( qw( unapprovedMessageReceivable ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{unapprovedMessageReceivable} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{unapprovedMessageReceivable}) {
      $self->{unapprovedMessageReceivable} = $vals->{unapprovedMessageReceivable};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ChannelSettings';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{unapprovedMessageReceivable});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ChannelSettings');
  if (defined $self->{unapprovedMessageReceivable}) {
    $xfer += $output->writeFieldBegin('unapprovedMessageReceivable', Thrift::TType::BOOL, 1);
    $xfer += $output->writeBool($self->{unapprovedMessageReceivable});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ChannelIdWithLastUpdated;
use base qw(Class::Accessor);
ChannelIdWithLastUpdated->mk_accessors( qw( channelId lastUpdated ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{channelId} = undef;
  $self->{lastUpdated} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{channelId}) {
      $self->{channelId} = $vals->{channelId};
    }
    if (defined $vals->{lastUpdated}) {
      $self->{lastUpdated} = $vals->{lastUpdated};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ChannelIdWithLastUpdated';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{channelId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{lastUpdated});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ChannelIdWithLastUpdated');
  if (defined $self->{channelId}) {
    $xfer += $output->writeFieldBegin('channelId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{channelId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{lastUpdated}) {
    $xfer += $output->writeFieldBegin('lastUpdated', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{lastUpdated});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Coin;
use base qw(Class::Accessor);
Coin->mk_accessors( qw( freeCoinBalance payedCoinBalance totalCoinBalance rewardCoinBalance ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{freeCoinBalance} = undef;
  $self->{payedCoinBalance} = undef;
  $self->{totalCoinBalance} = undef;
  $self->{rewardCoinBalance} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{freeCoinBalance}) {
      $self->{freeCoinBalance} = $vals->{freeCoinBalance};
    }
    if (defined $vals->{payedCoinBalance}) {
      $self->{payedCoinBalance} = $vals->{payedCoinBalance};
    }
    if (defined $vals->{totalCoinBalance}) {
      $self->{totalCoinBalance} = $vals->{totalCoinBalance};
    }
    if (defined $vals->{rewardCoinBalance}) {
      $self->{rewardCoinBalance} = $vals->{rewardCoinBalance};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Coin';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{freeCoinBalance});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{payedCoinBalance});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{totalCoinBalance});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{rewardCoinBalance});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Coin');
  if (defined $self->{freeCoinBalance}) {
    $xfer += $output->writeFieldBegin('freeCoinBalance', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{freeCoinBalance});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{payedCoinBalance}) {
    $xfer += $output->writeFieldBegin('payedCoinBalance', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{payedCoinBalance});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{totalCoinBalance}) {
    $xfer += $output->writeFieldBegin('totalCoinBalance', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{totalCoinBalance});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{rewardCoinBalance}) {
    $xfer += $output->writeFieldBegin('rewardCoinBalance', Thrift::TType::I32, 4);
    $xfer += $output->writeI32($self->{rewardCoinBalance});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package CoinPayLoad;
use base qw(Class::Accessor);
CoinPayLoad->mk_accessors( qw( payCoin freeCoin type rewardCoin ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{payCoin} = undef;
  $self->{freeCoin} = undef;
  $self->{type} = undef;
  $self->{rewardCoin} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{payCoin}) {
      $self->{payCoin} = $vals->{payCoin};
    }
    if (defined $vals->{freeCoin}) {
      $self->{freeCoin} = $vals->{freeCoin};
    }
    if (defined $vals->{type}) {
      $self->{type} = $vals->{type};
    }
    if (defined $vals->{rewardCoin}) {
      $self->{rewardCoin} = $vals->{rewardCoin};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'CoinPayLoad';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{payCoin});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{freeCoin});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{type});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{rewardCoin});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('CoinPayLoad');
  if (defined $self->{payCoin}) {
    $xfer += $output->writeFieldBegin('payCoin', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{payCoin});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{freeCoin}) {
    $xfer += $output->writeFieldBegin('freeCoin', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{freeCoin});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type}) {
    $xfer += $output->writeFieldBegin('type', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{type});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{rewardCoin}) {
    $xfer += $output->writeFieldBegin('rewardCoin', Thrift::TType::I32, 4);
    $xfer += $output->writeI32($self->{rewardCoin});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package CoinHistory;
use base qw(Class::Accessor);
CoinHistory->mk_accessors( qw( payDate coinBalance coin price title refund paySeq currency currencySign displayPrice payload channelId ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{payDate} = undef;
  $self->{coinBalance} = undef;
  $self->{coin} = undef;
  $self->{price} = undef;
  $self->{title} = undef;
  $self->{refund} = undef;
  $self->{paySeq} = undef;
  $self->{currency} = undef;
  $self->{currencySign} = undef;
  $self->{displayPrice} = undef;
  $self->{payload} = undef;
  $self->{channelId} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{payDate}) {
      $self->{payDate} = $vals->{payDate};
    }
    if (defined $vals->{coinBalance}) {
      $self->{coinBalance} = $vals->{coinBalance};
    }
    if (defined $vals->{coin}) {
      $self->{coin} = $vals->{coin};
    }
    if (defined $vals->{price}) {
      $self->{price} = $vals->{price};
    }
    if (defined $vals->{title}) {
      $self->{title} = $vals->{title};
    }
    if (defined $vals->{refund}) {
      $self->{refund} = $vals->{refund};
    }
    if (defined $vals->{paySeq}) {
      $self->{paySeq} = $vals->{paySeq};
    }
    if (defined $vals->{currency}) {
      $self->{currency} = $vals->{currency};
    }
    if (defined $vals->{currencySign}) {
      $self->{currencySign} = $vals->{currencySign};
    }
    if (defined $vals->{displayPrice}) {
      $self->{displayPrice} = $vals->{displayPrice};
    }
    if (defined $vals->{payload}) {
      $self->{payload} = $vals->{payload};
    }
    if (defined $vals->{channelId}) {
      $self->{channelId} = $vals->{channelId};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'CoinHistory';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{payDate});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{coinBalance});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{coin});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{price});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{title});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{refund});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{paySeq});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{currency});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^9$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{currencySign});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{displayPrice});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{payload} = CoinPayLoad->new();
        $xfer += $self->{payload}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{channelId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('CoinHistory');
  if (defined $self->{payDate}) {
    $xfer += $output->writeFieldBegin('payDate', Thrift::TType::I64, 1);
    $xfer += $output->writeI64($self->{payDate});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{coinBalance}) {
    $xfer += $output->writeFieldBegin('coinBalance', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{coinBalance});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{coin}) {
    $xfer += $output->writeFieldBegin('coin', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{coin});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{price}) {
    $xfer += $output->writeFieldBegin('price', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{price});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{title}) {
    $xfer += $output->writeFieldBegin('title', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{title});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{refund}) {
    $xfer += $output->writeFieldBegin('refund', Thrift::TType::BOOL, 6);
    $xfer += $output->writeBool($self->{refund});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{paySeq}) {
    $xfer += $output->writeFieldBegin('paySeq', Thrift::TType::STRING, 7);
    $xfer += $output->writeString($self->{paySeq});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{currency}) {
    $xfer += $output->writeFieldBegin('currency', Thrift::TType::STRING, 8);
    $xfer += $output->writeString($self->{currency});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{currencySign}) {
    $xfer += $output->writeFieldBegin('currencySign', Thrift::TType::STRING, 9);
    $xfer += $output->writeString($self->{currencySign});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{displayPrice}) {
    $xfer += $output->writeFieldBegin('displayPrice', Thrift::TType::STRING, 10);
    $xfer += $output->writeString($self->{displayPrice});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{payload}) {
    $xfer += $output->writeFieldBegin('payload', Thrift::TType::STRUCT, 11);
    $xfer += $self->{payload}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{channelId}) {
    $xfer += $output->writeFieldBegin('channelId', Thrift::TType::STRING, 12);
    $xfer += $output->writeString($self->{channelId});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package CoinHistoryCondition;
use base qw(Class::Accessor);
CoinHistoryCondition->mk_accessors( qw( start size language eddt appStoreCode ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{start} = undef;
  $self->{size} = undef;
  $self->{language} = undef;
  $self->{eddt} = undef;
  $self->{appStoreCode} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{start}) {
      $self->{start} = $vals->{start};
    }
    if (defined $vals->{size}) {
      $self->{size} = $vals->{size};
    }
    if (defined $vals->{language}) {
      $self->{language} = $vals->{language};
    }
    if (defined $vals->{eddt}) {
      $self->{eddt} = $vals->{eddt};
    }
    if (defined $vals->{appStoreCode}) {
      $self->{appStoreCode} = $vals->{appStoreCode};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'CoinHistoryCondition';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{start});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{size});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{language});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{eddt});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{appStoreCode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('CoinHistoryCondition');
  if (defined $self->{start}) {
    $xfer += $output->writeFieldBegin('start', Thrift::TType::I64, 1);
    $xfer += $output->writeI64($self->{start});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{size}) {
    $xfer += $output->writeFieldBegin('size', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{size});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{language}) {
    $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{language});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{eddt}) {
    $xfer += $output->writeFieldBegin('eddt', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{eddt});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{appStoreCode}) {
    $xfer += $output->writeFieldBegin('appStoreCode', Thrift::TType::I32, 5);
    $xfer += $output->writeI32($self->{appStoreCode});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package CoinHistoryResult;
use base qw(Class::Accessor);
CoinHistoryResult->mk_accessors( qw( historys balance hasNext ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{historys} = undef;
  $self->{balance} = undef;
  $self->{hasNext} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{historys}) {
      $self->{historys} = $vals->{historys};
    }
    if (defined $vals->{balance}) {
      $self->{balance} = $vals->{balance};
    }
    if (defined $vals->{hasNext}) {
      $self->{hasNext} = $vals->{hasNext};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'CoinHistoryResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size185 = 0;
          $self->{historys} = [];
          my $_etype188 = 0;
          $xfer += $input->readListBegin(\$_etype188, \$_size185);
          for (my $_i189 = 0; $_i189 < $_size185; ++$_i189)
          {
            my $elem190 = undef;
            $elem190 = CoinHistory->new();
            $xfer += $elem190->read($input);
            push(@{$self->{historys}},$elem190);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{balance} = Coin->new();
        $xfer += $self->{balance}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{hasNext});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('CoinHistoryResult');
  if (defined $self->{historys}) {
    $xfer += $output->writeFieldBegin('historys', Thrift::TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{historys}}));
      {
        foreach my $iter191 (@{$self->{historys}}) 
        {
          $xfer += ${iter191}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{balance}) {
    $xfer += $output->writeFieldBegin('balance', Thrift::TType::STRUCT, 2);
    $xfer += $self->{balance}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{hasNext}) {
    $xfer += $output->writeFieldBegin('hasNext', Thrift::TType::BOOL, 3);
    $xfer += $output->writeBool($self->{hasNext});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package CoinProductItem;
use base qw(Class::Accessor);
CoinProductItem->mk_accessors( qw( itemId coin freeCoin currency price displayPrice name desc ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{itemId} = undef;
  $self->{coin} = undef;
  $self->{freeCoin} = undef;
  $self->{currency} = undef;
  $self->{price} = undef;
  $self->{displayPrice} = undef;
  $self->{name} = undef;
  $self->{desc} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{itemId}) {
      $self->{itemId} = $vals->{itemId};
    }
    if (defined $vals->{coin}) {
      $self->{coin} = $vals->{coin};
    }
    if (defined $vals->{freeCoin}) {
      $self->{freeCoin} = $vals->{freeCoin};
    }
    if (defined $vals->{currency}) {
      $self->{currency} = $vals->{currency};
    }
    if (defined $vals->{price}) {
      $self->{price} = $vals->{price};
    }
    if (defined $vals->{displayPrice}) {
      $self->{displayPrice} = $vals->{displayPrice};
    }
    if (defined $vals->{name}) {
      $self->{name} = $vals->{name};
    }
    if (defined $vals->{desc}) {
      $self->{desc} = $vals->{desc};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'CoinProductItem';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{itemId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{coin});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{freeCoin});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{currency});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{price});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{displayPrice});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{name});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^9$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{desc});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('CoinProductItem');
  if (defined $self->{itemId}) {
    $xfer += $output->writeFieldBegin('itemId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{itemId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{coin}) {
    $xfer += $output->writeFieldBegin('coin', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{coin});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{freeCoin}) {
    $xfer += $output->writeFieldBegin('freeCoin', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{freeCoin});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{currency}) {
    $xfer += $output->writeFieldBegin('currency', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{currency});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{price}) {
    $xfer += $output->writeFieldBegin('price', Thrift::TType::STRING, 6);
    $xfer += $output->writeString($self->{price});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{displayPrice}) {
    $xfer += $output->writeFieldBegin('displayPrice', Thrift::TType::STRING, 7);
    $xfer += $output->writeString($self->{displayPrice});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{name}) {
    $xfer += $output->writeFieldBegin('name', Thrift::TType::STRING, 8);
    $xfer += $output->writeString($self->{name});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{desc}) {
    $xfer += $output->writeFieldBegin('desc', Thrift::TType::STRING, 9);
    $xfer += $output->writeString($self->{desc});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package CoinPurchaseConfirm;
use base qw(Class::Accessor);
CoinPurchaseConfirm->mk_accessors( qw( orderId appStoreCode receipt signature seller requestType ignoreReceipt ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{orderId} = undef;
  $self->{appStoreCode} = undef;
  $self->{receipt} = undef;
  $self->{signature} = undef;
  $self->{seller} = undef;
  $self->{requestType} = undef;
  $self->{ignoreReceipt} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{orderId}) {
      $self->{orderId} = $vals->{orderId};
    }
    if (defined $vals->{appStoreCode}) {
      $self->{appStoreCode} = $vals->{appStoreCode};
    }
    if (defined $vals->{receipt}) {
      $self->{receipt} = $vals->{receipt};
    }
    if (defined $vals->{signature}) {
      $self->{signature} = $vals->{signature};
    }
    if (defined $vals->{seller}) {
      $self->{seller} = $vals->{seller};
    }
    if (defined $vals->{requestType}) {
      $self->{requestType} = $vals->{requestType};
    }
    if (defined $vals->{ignoreReceipt}) {
      $self->{ignoreReceipt} = $vals->{ignoreReceipt};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'CoinPurchaseConfirm';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{orderId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{appStoreCode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{receipt});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{signature});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{seller});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{requestType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{ignoreReceipt});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('CoinPurchaseConfirm');
  if (defined $self->{orderId}) {
    $xfer += $output->writeFieldBegin('orderId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{orderId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{appStoreCode}) {
    $xfer += $output->writeFieldBegin('appStoreCode', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{appStoreCode});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{receipt}) {
    $xfer += $output->writeFieldBegin('receipt', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{receipt});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{signature}) {
    $xfer += $output->writeFieldBegin('signature', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{signature});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{seller}) {
    $xfer += $output->writeFieldBegin('seller', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{seller});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{requestType}) {
    $xfer += $output->writeFieldBegin('requestType', Thrift::TType::STRING, 6);
    $xfer += $output->writeString($self->{requestType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ignoreReceipt}) {
    $xfer += $output->writeFieldBegin('ignoreReceipt', Thrift::TType::BOOL, 7);
    $xfer += $output->writeBool($self->{ignoreReceipt});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package CoinPurchaseReservation;
use base qw(Class::Accessor);
CoinPurchaseReservation->mk_accessors( qw( productId country currency price appStoreCode language pgCode redirectUrl ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{productId} = undef;
  $self->{country} = undef;
  $self->{currency} = undef;
  $self->{price} = undef;
  $self->{appStoreCode} = undef;
  $self->{language} = undef;
  $self->{pgCode} = undef;
  $self->{redirectUrl} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{productId}) {
      $self->{productId} = $vals->{productId};
    }
    if (defined $vals->{country}) {
      $self->{country} = $vals->{country};
    }
    if (defined $vals->{currency}) {
      $self->{currency} = $vals->{currency};
    }
    if (defined $vals->{price}) {
      $self->{price} = $vals->{price};
    }
    if (defined $vals->{appStoreCode}) {
      $self->{appStoreCode} = $vals->{appStoreCode};
    }
    if (defined $vals->{language}) {
      $self->{language} = $vals->{language};
    }
    if (defined $vals->{pgCode}) {
      $self->{pgCode} = $vals->{pgCode};
    }
    if (defined $vals->{redirectUrl}) {
      $self->{redirectUrl} = $vals->{redirectUrl};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'CoinPurchaseReservation';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{productId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{country});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{currency});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{price});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{appStoreCode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{language});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{pgCode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{redirectUrl});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('CoinPurchaseReservation');
  if (defined $self->{productId}) {
    $xfer += $output->writeFieldBegin('productId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{productId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{country}) {
    $xfer += $output->writeFieldBegin('country', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{country});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{currency}) {
    $xfer += $output->writeFieldBegin('currency', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{currency});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{price}) {
    $xfer += $output->writeFieldBegin('price', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{price});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{appStoreCode}) {
    $xfer += $output->writeFieldBegin('appStoreCode', Thrift::TType::I32, 5);
    $xfer += $output->writeI32($self->{appStoreCode});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{language}) {
    $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 6);
    $xfer += $output->writeString($self->{language});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{pgCode}) {
    $xfer += $output->writeFieldBegin('pgCode', Thrift::TType::I32, 7);
    $xfer += $output->writeI32($self->{pgCode});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{redirectUrl}) {
    $xfer += $output->writeFieldBegin('redirectUrl', Thrift::TType::STRING, 8);
    $xfer += $output->writeString($self->{redirectUrl});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package CoinUseReservationItem;
use base qw(Class::Accessor);
CoinUseReservationItem->mk_accessors( qw( itemId itemName amount ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{itemId} = undef;
  $self->{itemName} = undef;
  $self->{amount} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{itemId}) {
      $self->{itemId} = $vals->{itemId};
    }
    if (defined $vals->{itemName}) {
      $self->{itemName} = $vals->{itemName};
    }
    if (defined $vals->{amount}) {
      $self->{amount} = $vals->{amount};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'CoinUseReservationItem';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{itemId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{itemName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{amount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('CoinUseReservationItem');
  if (defined $self->{itemId}) {
    $xfer += $output->writeFieldBegin('itemId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{itemId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{itemName}) {
    $xfer += $output->writeFieldBegin('itemName', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{itemName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{amount}) {
    $xfer += $output->writeFieldBegin('amount', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{amount});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package CoinUseReservation;
use base qw(Class::Accessor);
CoinUseReservation->mk_accessors( qw( channelId shopOrderId appStoreCode items country ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{channelId} = undef;
  $self->{shopOrderId} = undef;
  $self->{appStoreCode} = undef;
  $self->{items} = undef;
  $self->{country} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{channelId}) {
      $self->{channelId} = $vals->{channelId};
    }
    if (defined $vals->{shopOrderId}) {
      $self->{shopOrderId} = $vals->{shopOrderId};
    }
    if (defined $vals->{appStoreCode}) {
      $self->{appStoreCode} = $vals->{appStoreCode};
    }
    if (defined $vals->{items}) {
      $self->{items} = $vals->{items};
    }
    if (defined $vals->{country}) {
      $self->{country} = $vals->{country};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'CoinUseReservation';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{channelId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{shopOrderId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{appStoreCode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size192 = 0;
          $self->{items} = [];
          my $_etype195 = 0;
          $xfer += $input->readListBegin(\$_etype195, \$_size192);
          for (my $_i196 = 0; $_i196 < $_size192; ++$_i196)
          {
            my $elem197 = undef;
            $elem197 = CoinUseReservationItem->new();
            $xfer += $elem197->read($input);
            push(@{$self->{items}},$elem197);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{country});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('CoinUseReservation');
  if (defined $self->{channelId}) {
    $xfer += $output->writeFieldBegin('channelId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{channelId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{shopOrderId}) {
    $xfer += $output->writeFieldBegin('shopOrderId', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{shopOrderId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{appStoreCode}) {
    $xfer += $output->writeFieldBegin('appStoreCode', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{appStoreCode});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{items}) {
    $xfer += $output->writeFieldBegin('items', Thrift::TType::LIST, 4);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{items}}));
      {
        foreach my $iter198 (@{$self->{items}}) 
        {
          $xfer += ${iter198}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{country}) {
    $xfer += $output->writeFieldBegin('country', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{country});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package CompactContact;
use base qw(Class::Accessor);
CompactContact->mk_accessors( qw( mid createdTime modifiedTime status settings displayNameOverridden ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{mid} = undef;
  $self->{createdTime} = undef;
  $self->{modifiedTime} = undef;
  $self->{status} = undef;
  $self->{settings} = undef;
  $self->{displayNameOverridden} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{mid}) {
      $self->{mid} = $vals->{mid};
    }
    if (defined $vals->{createdTime}) {
      $self->{createdTime} = $vals->{createdTime};
    }
    if (defined $vals->{modifiedTime}) {
      $self->{modifiedTime} = $vals->{modifiedTime};
    }
    if (defined $vals->{status}) {
      $self->{status} = $vals->{status};
    }
    if (defined $vals->{settings}) {
      $self->{settings} = $vals->{settings};
    }
    if (defined $vals->{displayNameOverridden}) {
      $self->{displayNameOverridden} = $vals->{displayNameOverridden};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'CompactContact';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{mid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{createdTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{modifiedTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{status});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{settings});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{displayNameOverridden});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('CompactContact');
  if (defined $self->{mid}) {
    $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{mid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{createdTime}) {
    $xfer += $output->writeFieldBegin('createdTime', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{createdTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{modifiedTime}) {
    $xfer += $output->writeFieldBegin('modifiedTime', Thrift::TType::I64, 3);
    $xfer += $output->writeI64($self->{modifiedTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{status}) {
    $xfer += $output->writeFieldBegin('status', Thrift::TType::I32, 4);
    $xfer += $output->writeI32($self->{status});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{settings}) {
    $xfer += $output->writeFieldBegin('settings', Thrift::TType::I64, 5);
    $xfer += $output->writeI64($self->{settings});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{displayNameOverridden}) {
    $xfer += $output->writeFieldBegin('displayNameOverridden', Thrift::TType::STRING, 6);
    $xfer += $output->writeString($self->{displayNameOverridden});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ContactModification;
use base qw(Class::Accessor);
ContactModification->mk_accessors( qw( type luid phones emails userids ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{type} = undef;
  $self->{luid} = undef;
  $self->{phones} = undef;
  $self->{emails} = undef;
  $self->{userids} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{type}) {
      $self->{type} = $vals->{type};
    }
    if (defined $vals->{luid}) {
      $self->{luid} = $vals->{luid};
    }
    if (defined $vals->{phones}) {
      $self->{phones} = $vals->{phones};
    }
    if (defined $vals->{emails}) {
      $self->{emails} = $vals->{emails};
    }
    if (defined $vals->{userids}) {
      $self->{userids} = $vals->{userids};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ContactModification';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{type});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{luid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size199 = 0;
          $self->{phones} = [];
          my $_etype202 = 0;
          $xfer += $input->readListBegin(\$_etype202, \$_size199);
          for (my $_i203 = 0; $_i203 < $_size199; ++$_i203)
          {
            my $elem204 = undef;
            $xfer += $input->readString(\$elem204);
            push(@{$self->{phones}},$elem204);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size205 = 0;
          $self->{emails} = [];
          my $_etype208 = 0;
          $xfer += $input->readListBegin(\$_etype208, \$_size205);
          for (my $_i209 = 0; $_i209 < $_size205; ++$_i209)
          {
            my $elem210 = undef;
            $xfer += $input->readString(\$elem210);
            push(@{$self->{emails}},$elem210);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^13$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size211 = 0;
          $self->{userids} = [];
          my $_etype214 = 0;
          $xfer += $input->readListBegin(\$_etype214, \$_size211);
          for (my $_i215 = 0; $_i215 < $_size211; ++$_i215)
          {
            my $elem216 = undef;
            $xfer += $input->readString(\$elem216);
            push(@{$self->{userids}},$elem216);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ContactModification');
  if (defined $self->{type}) {
    $xfer += $output->writeFieldBegin('type', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{type});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{luid}) {
    $xfer += $output->writeFieldBegin('luid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{luid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{phones}) {
    $xfer += $output->writeFieldBegin('phones', Thrift::TType::LIST, 11);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{phones}}));
      {
        foreach my $iter217 (@{$self->{phones}}) 
        {
          $xfer += $output->writeString($iter217);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{emails}) {
    $xfer += $output->writeFieldBegin('emails', Thrift::TType::LIST, 12);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{emails}}));
      {
        foreach my $iter218 (@{$self->{emails}}) 
        {
          $xfer += $output->writeString($iter218);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{userids}) {
    $xfer += $output->writeFieldBegin('userids', Thrift::TType::LIST, 13);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{userids}}));
      {
        foreach my $iter219 (@{$self->{userids}}) 
        {
          $xfer += $output->writeString($iter219);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ContactRegistration;
use base qw(Class::Accessor);
ContactRegistration->mk_accessors( qw( contact luid contactType contactKey ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{contact} = undef;
  $self->{luid} = undef;
  $self->{contactType} = undef;
  $self->{contactKey} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{contact}) {
      $self->{contact} = $vals->{contact};
    }
    if (defined $vals->{luid}) {
      $self->{luid} = $vals->{luid};
    }
    if (defined $vals->{contactType}) {
      $self->{contactType} = $vals->{contactType};
    }
    if (defined $vals->{contactKey}) {
      $self->{contactKey} = $vals->{contactKey};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ContactRegistration';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{contact} = Contact->new();
        $xfer += $self->{contact}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{luid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{contactType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{contactKey});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ContactRegistration');
  if (defined $self->{contact}) {
    $xfer += $output->writeFieldBegin('contact', Thrift::TType::STRUCT, 1);
    $xfer += $self->{contact}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{luid}) {
    $xfer += $output->writeFieldBegin('luid', Thrift::TType::STRING, 10);
    $xfer += $output->writeString($self->{luid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{contactType}) {
    $xfer += $output->writeFieldBegin('contactType', Thrift::TType::I32, 11);
    $xfer += $output->writeI32($self->{contactType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{contactKey}) {
    $xfer += $output->writeFieldBegin('contactKey', Thrift::TType::STRING, 12);
    $xfer += $output->writeString($self->{contactKey});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ContactReport;
use base qw(Class::Accessor);
ContactReport->mk_accessors( qw( mid exists contact ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{mid} = undef;
  $self->{exists} = undef;
  $self->{contact} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{mid}) {
      $self->{mid} = $vals->{mid};
    }
    if (defined $vals->{exists}) {
      $self->{exists} = $vals->{exists};
    }
    if (defined $vals->{contact}) {
      $self->{contact} = $vals->{contact};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ContactReport';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{mid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{exists});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{contact} = Contact->new();
        $xfer += $self->{contact}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ContactReport');
  if (defined $self->{mid}) {
    $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{mid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{exists}) {
    $xfer += $output->writeFieldBegin('exists', Thrift::TType::BOOL, 2);
    $xfer += $output->writeBool($self->{exists});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{contact}) {
    $xfer += $output->writeFieldBegin('contact', Thrift::TType::STRUCT, 3);
    $xfer += $self->{contact}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ContactReportResult;
use base qw(Class::Accessor);
ContactReportResult->mk_accessors( qw( mid exists ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{mid} = undef;
  $self->{exists} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{mid}) {
      $self->{mid} = $vals->{mid};
    }
    if (defined $vals->{exists}) {
      $self->{exists} = $vals->{exists};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ContactReportResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{mid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{exists});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ContactReportResult');
  if (defined $self->{mid}) {
    $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{mid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{exists}) {
    $xfer += $output->writeFieldBegin('exists', Thrift::TType::BOOL, 2);
    $xfer += $output->writeBool($self->{exists});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DeviceInfo;
use base qw(Class::Accessor);
DeviceInfo->mk_accessors( qw( deviceName systemName systemVersion model carrierCode carrierName applicationType ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{deviceName} = undef;
  $self->{systemName} = undef;
  $self->{systemVersion} = undef;
  $self->{model} = undef;
  $self->{carrierCode} = undef;
  $self->{carrierName} = undef;
  $self->{applicationType} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{deviceName}) {
      $self->{deviceName} = $vals->{deviceName};
    }
    if (defined $vals->{systemName}) {
      $self->{systemName} = $vals->{systemName};
    }
    if (defined $vals->{systemVersion}) {
      $self->{systemVersion} = $vals->{systemVersion};
    }
    if (defined $vals->{model}) {
      $self->{model} = $vals->{model};
    }
    if (defined $vals->{carrierCode}) {
      $self->{carrierCode} = $vals->{carrierCode};
    }
    if (defined $vals->{carrierName}) {
      $self->{carrierName} = $vals->{carrierName};
    }
    if (defined $vals->{applicationType}) {
      $self->{applicationType} = $vals->{applicationType};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'DeviceInfo';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{deviceName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{systemName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{systemVersion});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{model});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{carrierCode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{carrierName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^20$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{applicationType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('DeviceInfo');
  if (defined $self->{deviceName}) {
    $xfer += $output->writeFieldBegin('deviceName', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{deviceName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{systemName}) {
    $xfer += $output->writeFieldBegin('systemName', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{systemName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{systemVersion}) {
    $xfer += $output->writeFieldBegin('systemVersion', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{systemVersion});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{model}) {
    $xfer += $output->writeFieldBegin('model', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{model});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{carrierCode}) {
    $xfer += $output->writeFieldBegin('carrierCode', Thrift::TType::I32, 10);
    $xfer += $output->writeI32($self->{carrierCode});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{carrierName}) {
    $xfer += $output->writeFieldBegin('carrierName', Thrift::TType::STRING, 11);
    $xfer += $output->writeString($self->{carrierName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{applicationType}) {
    $xfer += $output->writeFieldBegin('applicationType', Thrift::TType::I32, 20);
    $xfer += $output->writeI32($self->{applicationType});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package EmailConfirmation;
use base qw(Class::Accessor);
EmailConfirmation->mk_accessors( qw( usePasswordSet email password ignoreDuplication ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{usePasswordSet} = undef;
  $self->{email} = undef;
  $self->{password} = undef;
  $self->{ignoreDuplication} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{usePasswordSet}) {
      $self->{usePasswordSet} = $vals->{usePasswordSet};
    }
    if (defined $vals->{email}) {
      $self->{email} = $vals->{email};
    }
    if (defined $vals->{password}) {
      $self->{password} = $vals->{password};
    }
    if (defined $vals->{ignoreDuplication}) {
      $self->{ignoreDuplication} = $vals->{ignoreDuplication};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'EmailConfirmation';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{usePasswordSet});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{email});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{password});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{ignoreDuplication});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('EmailConfirmation');
  if (defined $self->{usePasswordSet}) {
    $xfer += $output->writeFieldBegin('usePasswordSet', Thrift::TType::BOOL, 1);
    $xfer += $output->writeBool($self->{usePasswordSet});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{email}) {
    $xfer += $output->writeFieldBegin('email', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{email});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{password}) {
    $xfer += $output->writeFieldBegin('password', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{password});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ignoreDuplication}) {
    $xfer += $output->writeFieldBegin('ignoreDuplication', Thrift::TType::BOOL, 4);
    $xfer += $output->writeBool($self->{ignoreDuplication});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package EmailConfirmationSession;
use base qw(Class::Accessor);
EmailConfirmationSession->mk_accessors( qw( emailConfirmationType verifier targetEmail ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{emailConfirmationType} = undef;
  $self->{verifier} = undef;
  $self->{targetEmail} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{emailConfirmationType}) {
      $self->{emailConfirmationType} = $vals->{emailConfirmationType};
    }
    if (defined $vals->{verifier}) {
      $self->{verifier} = $vals->{verifier};
    }
    if (defined $vals->{targetEmail}) {
      $self->{targetEmail} = $vals->{targetEmail};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'EmailConfirmationSession';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{emailConfirmationType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{verifier});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{targetEmail});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('EmailConfirmationSession');
  if (defined $self->{emailConfirmationType}) {
    $xfer += $output->writeFieldBegin('emailConfirmationType', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{emailConfirmationType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{verifier}) {
    $xfer += $output->writeFieldBegin('verifier', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{verifier});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{targetEmail}) {
    $xfer += $output->writeFieldBegin('targetEmail', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{targetEmail});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package FriendChannelMatrix;
use base qw(Class::Accessor);
FriendChannelMatrix->mk_accessors( qw( channelId representMid count point ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{channelId} = undef;
  $self->{representMid} = undef;
  $self->{count} = undef;
  $self->{point} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{channelId}) {
      $self->{channelId} = $vals->{channelId};
    }
    if (defined $vals->{representMid}) {
      $self->{representMid} = $vals->{representMid};
    }
    if (defined $vals->{count}) {
      $self->{count} = $vals->{count};
    }
    if (defined $vals->{point}) {
      $self->{point} = $vals->{point};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'FriendChannelMatrix';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{channelId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{representMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{count});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{point});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('FriendChannelMatrix');
  if (defined $self->{channelId}) {
    $xfer += $output->writeFieldBegin('channelId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{channelId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{representMid}) {
    $xfer += $output->writeFieldBegin('representMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{representMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{count}) {
    $xfer += $output->writeFieldBegin('count', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{count});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{point}) {
    $xfer += $output->writeFieldBegin('point', Thrift::TType::I32, 4);
    $xfer += $output->writeI32($self->{point});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package FriendChannelMatricesResponse;
use base qw(Class::Accessor);
FriendChannelMatricesResponse->mk_accessors( qw( expires matrices ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{expires} = undef;
  $self->{matrices} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{expires}) {
      $self->{expires} = $vals->{expires};
    }
    if (defined $vals->{matrices}) {
      $self->{matrices} = $vals->{matrices};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'FriendChannelMatricesResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{expires});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size220 = 0;
          $self->{matrices} = [];
          my $_etype223 = 0;
          $xfer += $input->readListBegin(\$_etype223, \$_size220);
          for (my $_i224 = 0; $_i224 < $_size220; ++$_i224)
          {
            my $elem225 = undef;
            $elem225 = FriendChannelMatrix->new();
            $xfer += $elem225->read($input);
            push(@{$self->{matrices}},$elem225);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('FriendChannelMatricesResponse');
  if (defined $self->{expires}) {
    $xfer += $output->writeFieldBegin('expires', Thrift::TType::I64, 1);
    $xfer += $output->writeI64($self->{expires});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{matrices}) {
    $xfer += $output->writeFieldBegin('matrices', Thrift::TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{matrices}}));
      {
        foreach my $iter226 (@{$self->{matrices}}) 
        {
          $xfer += ${iter226}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package FriendRequest;
use base qw(Class::Accessor);
FriendRequest->mk_accessors( qw( eMid mid direction method param timestamp seqId displayName picturePath pictureStatus ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{eMid} = undef;
  $self->{mid} = undef;
  $self->{direction} = undef;
  $self->{method} = undef;
  $self->{param} = undef;
  $self->{timestamp} = undef;
  $self->{seqId} = undef;
  $self->{displayName} = undef;
  $self->{picturePath} = undef;
  $self->{pictureStatus} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{eMid}) {
      $self->{eMid} = $vals->{eMid};
    }
    if (defined $vals->{mid}) {
      $self->{mid} = $vals->{mid};
    }
    if (defined $vals->{direction}) {
      $self->{direction} = $vals->{direction};
    }
    if (defined $vals->{method}) {
      $self->{method} = $vals->{method};
    }
    if (defined $vals->{param}) {
      $self->{param} = $vals->{param};
    }
    if (defined $vals->{timestamp}) {
      $self->{timestamp} = $vals->{timestamp};
    }
    if (defined $vals->{seqId}) {
      $self->{seqId} = $vals->{seqId};
    }
    if (defined $vals->{displayName}) {
      $self->{displayName} = $vals->{displayName};
    }
    if (defined $vals->{picturePath}) {
      $self->{picturePath} = $vals->{picturePath};
    }
    if (defined $vals->{pictureStatus}) {
      $self->{pictureStatus} = $vals->{pictureStatus};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'FriendRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{eMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{mid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{direction});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{method});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{param});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{timestamp});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{seqId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{displayName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{picturePath});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{pictureStatus});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('FriendRequest');
  if (defined $self->{eMid}) {
    $xfer += $output->writeFieldBegin('eMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{eMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{mid}) {
    $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{mid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{direction}) {
    $xfer += $output->writeFieldBegin('direction', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{direction});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{method}) {
    $xfer += $output->writeFieldBegin('method', Thrift::TType::I32, 4);
    $xfer += $output->writeI32($self->{method});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{param}) {
    $xfer += $output->writeFieldBegin('param', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{param});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{timestamp}) {
    $xfer += $output->writeFieldBegin('timestamp', Thrift::TType::I64, 6);
    $xfer += $output->writeI64($self->{timestamp});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{seqId}) {
    $xfer += $output->writeFieldBegin('seqId', Thrift::TType::I64, 7);
    $xfer += $output->writeI64($self->{seqId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{displayName}) {
    $xfer += $output->writeFieldBegin('displayName', Thrift::TType::STRING, 10);
    $xfer += $output->writeString($self->{displayName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{picturePath}) {
    $xfer += $output->writeFieldBegin('picturePath', Thrift::TType::STRING, 11);
    $xfer += $output->writeString($self->{picturePath});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{pictureStatus}) {
    $xfer += $output->writeFieldBegin('pictureStatus', Thrift::TType::STRING, 12);
    $xfer += $output->writeString($self->{pictureStatus});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package FriendRequestsInfo;
use base qw(Class::Accessor);
FriendRequestsInfo->mk_accessors( qw( totalIncomingCount totalOutgoingCount recentIncomings recentOutgoings totalIncomingLimit totalOutgoingLimit ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{totalIncomingCount} = undef;
  $self->{totalOutgoingCount} = undef;
  $self->{recentIncomings} = undef;
  $self->{recentOutgoings} = undef;
  $self->{totalIncomingLimit} = undef;
  $self->{totalOutgoingLimit} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{totalIncomingCount}) {
      $self->{totalIncomingCount} = $vals->{totalIncomingCount};
    }
    if (defined $vals->{totalOutgoingCount}) {
      $self->{totalOutgoingCount} = $vals->{totalOutgoingCount};
    }
    if (defined $vals->{recentIncomings}) {
      $self->{recentIncomings} = $vals->{recentIncomings};
    }
    if (defined $vals->{recentOutgoings}) {
      $self->{recentOutgoings} = $vals->{recentOutgoings};
    }
    if (defined $vals->{totalIncomingLimit}) {
      $self->{totalIncomingLimit} = $vals->{totalIncomingLimit};
    }
    if (defined $vals->{totalOutgoingLimit}) {
      $self->{totalOutgoingLimit} = $vals->{totalOutgoingLimit};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'FriendRequestsInfo';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{totalIncomingCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{totalOutgoingCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size227 = 0;
          $self->{recentIncomings} = [];
          my $_etype230 = 0;
          $xfer += $input->readListBegin(\$_etype230, \$_size227);
          for (my $_i231 = 0; $_i231 < $_size227; ++$_i231)
          {
            my $elem232 = undef;
            $elem232 = FriendRequest->new();
            $xfer += $elem232->read($input);
            push(@{$self->{recentIncomings}},$elem232);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size233 = 0;
          $self->{recentOutgoings} = [];
          my $_etype236 = 0;
          $xfer += $input->readListBegin(\$_etype236, \$_size233);
          for (my $_i237 = 0; $_i237 < $_size233; ++$_i237)
          {
            my $elem238 = undef;
            $elem238 = FriendRequest->new();
            $xfer += $elem238->read($input);
            push(@{$self->{recentOutgoings}},$elem238);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{totalIncomingLimit});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{totalOutgoingLimit});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('FriendRequestsInfo');
  if (defined $self->{totalIncomingCount}) {
    $xfer += $output->writeFieldBegin('totalIncomingCount', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{totalIncomingCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{totalOutgoingCount}) {
    $xfer += $output->writeFieldBegin('totalOutgoingCount', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{totalOutgoingCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{recentIncomings}) {
    $xfer += $output->writeFieldBegin('recentIncomings', Thrift::TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{recentIncomings}}));
      {
        foreach my $iter239 (@{$self->{recentIncomings}}) 
        {
          $xfer += ${iter239}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{recentOutgoings}) {
    $xfer += $output->writeFieldBegin('recentOutgoings', Thrift::TType::LIST, 4);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{recentOutgoings}}));
      {
        foreach my $iter240 (@{$self->{recentOutgoings}}) 
        {
          $xfer += ${iter240}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{totalIncomingLimit}) {
    $xfer += $output->writeFieldBegin('totalIncomingLimit', Thrift::TType::I32, 5);
    $xfer += $output->writeI32($self->{totalIncomingLimit});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{totalOutgoingLimit}) {
    $xfer += $output->writeFieldBegin('totalOutgoingLimit', Thrift::TType::I32, 6);
    $xfer += $output->writeI32($self->{totalOutgoingLimit});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Geolocation;
use base qw(Class::Accessor);
Geolocation->mk_accessors( qw( longitude latitude ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{longitude} = undef;
  $self->{latitude} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{longitude}) {
      $self->{longitude} = $vals->{longitude};
    }
    if (defined $vals->{latitude}) {
      $self->{latitude} = $vals->{latitude};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Geolocation';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::DOUBLE) {
        $xfer += $input->readDouble(\$self->{longitude});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::DOUBLE) {
        $xfer += $input->readDouble(\$self->{latitude});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Geolocation');
  if (defined $self->{longitude}) {
    $xfer += $output->writeFieldBegin('longitude', Thrift::TType::DOUBLE, 1);
    $xfer += $output->writeDouble($self->{longitude});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{latitude}) {
    $xfer += $output->writeFieldBegin('latitude', Thrift::TType::DOUBLE, 2);
    $xfer += $output->writeDouble($self->{latitude});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package NotificationTarget;
use base qw(Class::Accessor);
NotificationTarget->mk_accessors( qw( applicationType applicationVersion region ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{applicationType} = undef;
  $self->{applicationVersion} = undef;
  $self->{region} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{applicationType}) {
      $self->{applicationType} = $vals->{applicationType};
    }
    if (defined $vals->{applicationVersion}) {
      $self->{applicationVersion} = $vals->{applicationVersion};
    }
    if (defined $vals->{region}) {
      $self->{region} = $vals->{region};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'NotificationTarget';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{applicationType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{applicationVersion});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{region});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('NotificationTarget');
  if (defined $self->{applicationType}) {
    $xfer += $output->writeFieldBegin('applicationType', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{applicationType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{applicationVersion}) {
    $xfer += $output->writeFieldBegin('applicationVersion', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{applicationVersion});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{region}) {
    $xfer += $output->writeFieldBegin('region', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{region});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GlobalEvent;
use base qw(Class::Accessor);
GlobalEvent->mk_accessors( qw( key targets createdTime data maxDelay ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{key} = undef;
  $self->{targets} = undef;
  $self->{createdTime} = undef;
  $self->{data} = undef;
  $self->{maxDelay} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{key}) {
      $self->{key} = $vals->{key};
    }
    if (defined $vals->{targets}) {
      $self->{targets} = $vals->{targets};
    }
    if (defined $vals->{createdTime}) {
      $self->{createdTime} = $vals->{createdTime};
    }
    if (defined $vals->{data}) {
      $self->{data} = $vals->{data};
    }
    if (defined $vals->{maxDelay}) {
      $self->{maxDelay} = $vals->{maxDelay};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GlobalEvent';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{key});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size241 = 0;
          $self->{targets} = [];
          my $_etype244 = 0;
          $xfer += $input->readListBegin(\$_etype244, \$_size241);
          for (my $_i245 = 0; $_i245 < $_size241; ++$_i245)
          {
            my $elem246 = undef;
            $elem246 = NotificationTarget->new();
            $xfer += $elem246->read($input);
            push(@{$self->{targets}},$elem246);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{createdTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{data});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{maxDelay});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GlobalEvent');
  if (defined $self->{key}) {
    $xfer += $output->writeFieldBegin('key', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{key});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{targets}) {
    $xfer += $output->writeFieldBegin('targets', Thrift::TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{targets}}));
      {
        foreach my $iter247 (@{$self->{targets}}) 
        {
          $xfer += ${iter247}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{createdTime}) {
    $xfer += $output->writeFieldBegin('createdTime', Thrift::TType::I64, 3);
    $xfer += $output->writeI64($self->{createdTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{data}) {
    $xfer += $output->writeFieldBegin('data', Thrift::TType::I64, 4);
    $xfer += $output->writeI64($self->{data});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{maxDelay}) {
    $xfer += $output->writeFieldBegin('maxDelay', Thrift::TType::I32, 5);
    $xfer += $output->writeI32($self->{maxDelay});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GroupPreference;
use base qw(Class::Accessor);
GroupPreference->mk_accessors( qw( invitationTicket favoriteTimestamp ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{invitationTicket} = undef;
  $self->{favoriteTimestamp} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{invitationTicket}) {
      $self->{invitationTicket} = $vals->{invitationTicket};
    }
    if (defined $vals->{favoriteTimestamp}) {
      $self->{favoriteTimestamp} = $vals->{favoriteTimestamp};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GroupPreference';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{invitationTicket});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{favoriteTimestamp});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GroupPreference');
  if (defined $self->{invitationTicket}) {
    $xfer += $output->writeFieldBegin('invitationTicket', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{invitationTicket});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{favoriteTimestamp}) {
    $xfer += $output->writeFieldBegin('favoriteTimestamp', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{favoriteTimestamp});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Group;
use base qw(Class::Accessor);
Group->mk_accessors( qw( id createdTime name pictureStatus preventedJoinByTicket groupPreference members creator invitee notificationDisabled ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{id} = undef;
  $self->{createdTime} = undef;
  $self->{name} = undef;
  $self->{pictureStatus} = undef;
  $self->{preventedJoinByTicket} = undef;
  $self->{groupPreference} = undef;
  $self->{members} = undef;
  $self->{creator} = undef;
  $self->{invitee} = undef;
  $self->{notificationDisabled} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{id}) {
      $self->{id} = $vals->{id};
    }
    if (defined $vals->{createdTime}) {
      $self->{createdTime} = $vals->{createdTime};
    }
    if (defined $vals->{name}) {
      $self->{name} = $vals->{name};
    }
    if (defined $vals->{pictureStatus}) {
      $self->{pictureStatus} = $vals->{pictureStatus};
    }
    if (defined $vals->{preventedJoinByTicket}) {
      $self->{preventedJoinByTicket} = $vals->{preventedJoinByTicket};
    }
    if (defined $vals->{groupPreference}) {
      $self->{groupPreference} = $vals->{groupPreference};
    }
    if (defined $vals->{members}) {
      $self->{members} = $vals->{members};
    }
    if (defined $vals->{creator}) {
      $self->{creator} = $vals->{creator};
    }
    if (defined $vals->{invitee}) {
      $self->{invitee} = $vals->{invitee};
    }
    if (defined $vals->{notificationDisabled}) {
      $self->{notificationDisabled} = $vals->{notificationDisabled};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Group';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{id});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{createdTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{name});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{pictureStatus});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{preventedJoinByTicket});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^13$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{groupPreference} = GroupPreference->new();
        $xfer += $self->{groupPreference}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^20$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size248 = 0;
          $self->{members} = [];
          my $_etype251 = 0;
          $xfer += $input->readListBegin(\$_etype251, \$_size248);
          for (my $_i252 = 0; $_i252 < $_size248; ++$_i252)
          {
            my $elem253 = undef;
            $elem253 = Contact->new();
            $xfer += $elem253->read($input);
            push(@{$self->{members}},$elem253);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^21$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{creator} = Contact->new();
        $xfer += $self->{creator}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^22$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size254 = 0;
          $self->{invitee} = [];
          my $_etype257 = 0;
          $xfer += $input->readListBegin(\$_etype257, \$_size254);
          for (my $_i258 = 0; $_i258 < $_size254; ++$_i258)
          {
            my $elem259 = undef;
            $elem259 = Contact->new();
            $xfer += $elem259->read($input);
            push(@{$self->{invitee}},$elem259);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^31$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{notificationDisabled});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Group');
  if (defined $self->{id}) {
    $xfer += $output->writeFieldBegin('id', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{id});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{createdTime}) {
    $xfer += $output->writeFieldBegin('createdTime', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{createdTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{name}) {
    $xfer += $output->writeFieldBegin('name', Thrift::TType::STRING, 10);
    $xfer += $output->writeString($self->{name});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{pictureStatus}) {
    $xfer += $output->writeFieldBegin('pictureStatus', Thrift::TType::STRING, 11);
    $xfer += $output->writeString($self->{pictureStatus});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{preventedJoinByTicket}) {
    $xfer += $output->writeFieldBegin('preventedJoinByTicket', Thrift::TType::BOOL, 12);
    $xfer += $output->writeBool($self->{preventedJoinByTicket});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{groupPreference}) {
    $xfer += $output->writeFieldBegin('groupPreference', Thrift::TType::STRUCT, 13);
    $xfer += $self->{groupPreference}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{members}) {
    $xfer += $output->writeFieldBegin('members', Thrift::TType::LIST, 20);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{members}}));
      {
        foreach my $iter260 (@{$self->{members}}) 
        {
          $xfer += ${iter260}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{creator}) {
    $xfer += $output->writeFieldBegin('creator', Thrift::TType::STRUCT, 21);
    $xfer += $self->{creator}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{invitee}) {
    $xfer += $output->writeFieldBegin('invitee', Thrift::TType::LIST, 22);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{invitee}}));
      {
        foreach my $iter261 (@{$self->{invitee}}) 
        {
          $xfer += ${iter261}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notificationDisabled}) {
    $xfer += $output->writeFieldBegin('notificationDisabled', Thrift::TType::BOOL, 31);
    $xfer += $output->writeBool($self->{notificationDisabled});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package IdentityCredential;
use base qw(Class::Accessor);
IdentityCredential->mk_accessors( qw( provider identifier password ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{provider} = undef;
  $self->{identifier} = undef;
  $self->{password} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{provider}) {
      $self->{provider} = $vals->{provider};
    }
    if (defined $vals->{identifier}) {
      $self->{identifier} = $vals->{identifier};
    }
    if (defined $vals->{password}) {
      $self->{password} = $vals->{password};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'IdentityCredential';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{provider});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{identifier});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{password});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('IdentityCredential');
  if (defined $self->{provider}) {
    $xfer += $output->writeFieldBegin('provider', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{provider});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{identifier}) {
    $xfer += $output->writeFieldBegin('identifier', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{identifier});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{password}) {
    $xfer += $output->writeFieldBegin('password', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{password});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package LastReadMessageId;
use base qw(Class::Accessor);
LastReadMessageId->mk_accessors( qw( mid lastReadMessageId ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{mid} = undef;
  $self->{lastReadMessageId} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{mid}) {
      $self->{mid} = $vals->{mid};
    }
    if (defined $vals->{lastReadMessageId}) {
      $self->{lastReadMessageId} = $vals->{lastReadMessageId};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'LastReadMessageId';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{mid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{lastReadMessageId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('LastReadMessageId');
  if (defined $self->{mid}) {
    $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{mid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{lastReadMessageId}) {
    $xfer += $output->writeFieldBegin('lastReadMessageId', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{lastReadMessageId});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package LastReadMessageIds;
use base qw(Class::Accessor);
LastReadMessageIds->mk_accessors( qw( chatId lastReadMessageIds ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{chatId} = undef;
  $self->{lastReadMessageIds} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{chatId}) {
      $self->{chatId} = $vals->{chatId};
    }
    if (defined $vals->{lastReadMessageIds}) {
      $self->{lastReadMessageIds} = $vals->{lastReadMessageIds};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'LastReadMessageIds';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{chatId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size262 = 0;
          $self->{lastReadMessageIds} = [];
          my $_etype265 = 0;
          $xfer += $input->readListBegin(\$_etype265, \$_size262);
          for (my $_i266 = 0; $_i266 < $_size262; ++$_i266)
          {
            my $elem267 = undef;
            $elem267 = LastReadMessageId->new();
            $xfer += $elem267->read($input);
            push(@{$self->{lastReadMessageIds}},$elem267);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('LastReadMessageIds');
  if (defined $self->{chatId}) {
    $xfer += $output->writeFieldBegin('chatId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{chatId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{lastReadMessageIds}) {
    $xfer += $output->writeFieldBegin('lastReadMessageIds', Thrift::TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{lastReadMessageIds}}));
      {
        foreach my $iter268 (@{$self->{lastReadMessageIds}}) 
        {
          $xfer += ${iter268}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package VerificationSessionData;
use base qw(Class::Accessor);
VerificationSessionData->mk_accessors( qw( sessionId method callback normalizedPhone countryCode nationalSignificantNumber availableVerificationMethods ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{sessionId} = undef;
  $self->{method} = undef;
  $self->{callback} = undef;
  $self->{normalizedPhone} = undef;
  $self->{countryCode} = undef;
  $self->{nationalSignificantNumber} = undef;
  $self->{availableVerificationMethods} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{sessionId}) {
      $self->{sessionId} = $vals->{sessionId};
    }
    if (defined $vals->{method}) {
      $self->{method} = $vals->{method};
    }
    if (defined $vals->{callback}) {
      $self->{callback} = $vals->{callback};
    }
    if (defined $vals->{normalizedPhone}) {
      $self->{normalizedPhone} = $vals->{normalizedPhone};
    }
    if (defined $vals->{countryCode}) {
      $self->{countryCode} = $vals->{countryCode};
    }
    if (defined $vals->{nationalSignificantNumber}) {
      $self->{nationalSignificantNumber} = $vals->{nationalSignificantNumber};
    }
    if (defined $vals->{availableVerificationMethods}) {
      $self->{availableVerificationMethods} = $vals->{availableVerificationMethods};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'VerificationSessionData';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{sessionId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{method});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{callback});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{normalizedPhone});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{countryCode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{nationalSignificantNumber});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size269 = 0;
          $self->{availableVerificationMethods} = [];
          my $_etype272 = 0;
          $xfer += $input->readListBegin(\$_etype272, \$_size269);
          for (my $_i273 = 0; $_i273 < $_size269; ++$_i273)
          {
            my $elem274 = undef;
            $xfer += $input->readI32(\$elem274);
            push(@{$self->{availableVerificationMethods}},$elem274);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('VerificationSessionData');
  if (defined $self->{sessionId}) {
    $xfer += $output->writeFieldBegin('sessionId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{sessionId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{method}) {
    $xfer += $output->writeFieldBegin('method', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{method});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{callback}) {
    $xfer += $output->writeFieldBegin('callback', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{callback});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{normalizedPhone}) {
    $xfer += $output->writeFieldBegin('normalizedPhone', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{normalizedPhone});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{countryCode}) {
    $xfer += $output->writeFieldBegin('countryCode', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{countryCode});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{nationalSignificantNumber}) {
    $xfer += $output->writeFieldBegin('nationalSignificantNumber', Thrift::TType::STRING, 6);
    $xfer += $output->writeString($self->{nationalSignificantNumber});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{availableVerificationMethods}) {
    $xfer += $output->writeFieldBegin('availableVerificationMethods', Thrift::TType::LIST, 7);
    {
      $xfer += $output->writeListBegin(Thrift::TType::I32, scalar(@{$self->{availableVerificationMethods}}));
      {
        foreach my $iter275 (@{$self->{availableVerificationMethods}}) 
        {
          $xfer += $output->writeI32($iter275);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package LoginResult;
use base qw(Class::Accessor);
LoginResult->mk_accessors( qw( authToken certificate verifier pinCode type lastPrimaryBindTime displayMessage sessionForSMSConfirm ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{authToken} = undef;
  $self->{certificate} = undef;
  $self->{verifier} = undef;
  $self->{pinCode} = undef;
  $self->{type} = undef;
  $self->{lastPrimaryBindTime} = undef;
  $self->{displayMessage} = undef;
  $self->{sessionForSMSConfirm} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{authToken}) {
      $self->{authToken} = $vals->{authToken};
    }
    if (defined $vals->{certificate}) {
      $self->{certificate} = $vals->{certificate};
    }
    if (defined $vals->{verifier}) {
      $self->{verifier} = $vals->{verifier};
    }
    if (defined $vals->{pinCode}) {
      $self->{pinCode} = $vals->{pinCode};
    }
    if (defined $vals->{type}) {
      $self->{type} = $vals->{type};
    }
    if (defined $vals->{lastPrimaryBindTime}) {
      $self->{lastPrimaryBindTime} = $vals->{lastPrimaryBindTime};
    }
    if (defined $vals->{displayMessage}) {
      $self->{displayMessage} = $vals->{displayMessage};
    }
    if (defined $vals->{sessionForSMSConfirm}) {
      $self->{sessionForSMSConfirm} = $vals->{sessionForSMSConfirm};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'LoginResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{authToken});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{certificate});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{verifier});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{pinCode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{type});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{lastPrimaryBindTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{displayMessage});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{sessionForSMSConfirm} = VerificationSessionData->new();
        $xfer += $self->{sessionForSMSConfirm}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('LoginResult');
  if (defined $self->{authToken}) {
    $xfer += $output->writeFieldBegin('authToken', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{authToken});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{certificate}) {
    $xfer += $output->writeFieldBegin('certificate', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{certificate});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{verifier}) {
    $xfer += $output->writeFieldBegin('verifier', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{verifier});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{pinCode}) {
    $xfer += $output->writeFieldBegin('pinCode', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{pinCode});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type}) {
    $xfer += $output->writeFieldBegin('type', Thrift::TType::I32, 5);
    $xfer += $output->writeI32($self->{type});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{lastPrimaryBindTime}) {
    $xfer += $output->writeFieldBegin('lastPrimaryBindTime', Thrift::TType::I64, 6);
    $xfer += $output->writeI64($self->{lastPrimaryBindTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{displayMessage}) {
    $xfer += $output->writeFieldBegin('displayMessage', Thrift::TType::STRING, 7);
    $xfer += $output->writeString($self->{displayMessage});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{sessionForSMSConfirm}) {
    $xfer += $output->writeFieldBegin('sessionForSMSConfirm', Thrift::TType::STRUCT, 8);
    $xfer += $self->{sessionForSMSConfirm}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package LoginRequest;
use base qw(Class::Accessor);
LoginRequest->mk_accessors( qw( type identityProvider identifier password keepLoggedIn accessLocation systemName certificate verifier secret e2eeVersion ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{type} = undef;
  $self->{identityProvider} = undef;
  $self->{identifier} = undef;
  $self->{password} = undef;
  $self->{keepLoggedIn} = undef;
  $self->{accessLocation} = undef;
  $self->{systemName} = undef;
  $self->{certificate} = undef;
  $self->{verifier} = undef;
  $self->{secret} = undef;
  $self->{e2eeVersion} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{type}) {
      $self->{type} = $vals->{type};
    }
    if (defined $vals->{identityProvider}) {
      $self->{identityProvider} = $vals->{identityProvider};
    }
    if (defined $vals->{identifier}) {
      $self->{identifier} = $vals->{identifier};
    }
    if (defined $vals->{password}) {
      $self->{password} = $vals->{password};
    }
    if (defined $vals->{keepLoggedIn}) {
      $self->{keepLoggedIn} = $vals->{keepLoggedIn};
    }
    if (defined $vals->{accessLocation}) {
      $self->{accessLocation} = $vals->{accessLocation};
    }
    if (defined $vals->{systemName}) {
      $self->{systemName} = $vals->{systemName};
    }
    if (defined $vals->{certificate}) {
      $self->{certificate} = $vals->{certificate};
    }
    if (defined $vals->{verifier}) {
      $self->{verifier} = $vals->{verifier};
    }
    if (defined $vals->{secret}) {
      $self->{secret} = $vals->{secret};
    }
    if (defined $vals->{e2eeVersion}) {
      $self->{e2eeVersion} = $vals->{e2eeVersion};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'LoginRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{type});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{identityProvider});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{identifier});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{password});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{keepLoggedIn});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{accessLocation});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{systemName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{certificate});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^9$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{verifier});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{secret});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{e2eeVersion});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('LoginRequest');
  if (defined $self->{type}) {
    $xfer += $output->writeFieldBegin('type', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{type});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{identityProvider}) {
    $xfer += $output->writeFieldBegin('identityProvider', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{identityProvider});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{identifier}) {
    $xfer += $output->writeFieldBegin('identifier', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{identifier});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{password}) {
    $xfer += $output->writeFieldBegin('password', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{password});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{keepLoggedIn}) {
    $xfer += $output->writeFieldBegin('keepLoggedIn', Thrift::TType::BOOL, 5);
    $xfer += $output->writeBool($self->{keepLoggedIn});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{accessLocation}) {
    $xfer += $output->writeFieldBegin('accessLocation', Thrift::TType::STRING, 6);
    $xfer += $output->writeString($self->{accessLocation});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{systemName}) {
    $xfer += $output->writeFieldBegin('systemName', Thrift::TType::STRING, 7);
    $xfer += $output->writeString($self->{systemName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{certificate}) {
    $xfer += $output->writeFieldBegin('certificate', Thrift::TType::STRING, 8);
    $xfer += $output->writeString($self->{certificate});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{verifier}) {
    $xfer += $output->writeFieldBegin('verifier', Thrift::TType::STRING, 9);
    $xfer += $output->writeString($self->{verifier});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{secret}) {
    $xfer += $output->writeFieldBegin('secret', Thrift::TType::STRING, 10);
    $xfer += $output->writeString($self->{secret});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{e2eeVersion}) {
    $xfer += $output->writeFieldBegin('e2eeVersion', Thrift::TType::I32, 11);
    $xfer += $output->writeI32($self->{e2eeVersion});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package LoginSession;
use base qw(Class::Accessor);
LoginSession->mk_accessors( qw( tokenKey expirationTime applicationType systemName accessLocation ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{tokenKey} = undef;
  $self->{expirationTime} = undef;
  $self->{applicationType} = undef;
  $self->{systemName} = undef;
  $self->{accessLocation} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{tokenKey}) {
      $self->{tokenKey} = $vals->{tokenKey};
    }
    if (defined $vals->{expirationTime}) {
      $self->{expirationTime} = $vals->{expirationTime};
    }
    if (defined $vals->{applicationType}) {
      $self->{applicationType} = $vals->{applicationType};
    }
    if (defined $vals->{systemName}) {
      $self->{systemName} = $vals->{systemName};
    }
    if (defined $vals->{accessLocation}) {
      $self->{accessLocation} = $vals->{accessLocation};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'LoginSession';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{tokenKey});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{expirationTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{applicationType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{systemName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^22$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{accessLocation});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('LoginSession');
  if (defined $self->{tokenKey}) {
    $xfer += $output->writeFieldBegin('tokenKey', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{tokenKey});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{expirationTime}) {
    $xfer += $output->writeFieldBegin('expirationTime', Thrift::TType::I64, 3);
    $xfer += $output->writeI64($self->{expirationTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{applicationType}) {
    $xfer += $output->writeFieldBegin('applicationType', Thrift::TType::I32, 11);
    $xfer += $output->writeI32($self->{applicationType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{systemName}) {
    $xfer += $output->writeFieldBegin('systemName', Thrift::TType::STRING, 12);
    $xfer += $output->writeString($self->{systemName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{accessLocation}) {
    $xfer += $output->writeFieldBegin('accessLocation', Thrift::TType::STRING, 22);
    $xfer += $output->writeString($self->{accessLocation});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Message;
use base qw(Class::Accessor);
Message->mk_accessors( qw( _from to toType id createdTime deliveredTime text location hasContent contentType contentPreview contentMetadata sessionId chunks relatedMessageId messageRelationType readCount relatedMessageServiceCode ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{_from} = undef;
  $self->{to} = undef;
  $self->{toType} = undef;
  $self->{id} = undef;
  $self->{createdTime} = undef;
  $self->{deliveredTime} = undef;
  $self->{text} = undef;
  $self->{location} = undef;
  $self->{hasContent} = undef;
  $self->{contentType} = undef;
  $self->{contentPreview} = undef;
  $self->{contentMetadata} = undef;
  $self->{sessionId} = undef;
  $self->{chunks} = undef;
  $self->{relatedMessageId} = undef;
  $self->{messageRelationType} = undef;
  $self->{readCount} = undef;
  $self->{relatedMessageServiceCode} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{_from}) {
      $self->{_from} = $vals->{_from};
    }
    if (defined $vals->{to}) {
      $self->{to} = $vals->{to};
    }
    if (defined $vals->{toType}) {
      $self->{toType} = $vals->{toType};
    }
    if (defined $vals->{id}) {
      $self->{id} = $vals->{id};
    }
    if (defined $vals->{createdTime}) {
      $self->{createdTime} = $vals->{createdTime};
    }
    if (defined $vals->{deliveredTime}) {
      $self->{deliveredTime} = $vals->{deliveredTime};
    }
    if (defined $vals->{text}) {
      $self->{text} = $vals->{text};
    }
    if (defined $vals->{location}) {
      $self->{location} = $vals->{location};
    }
    if (defined $vals->{hasContent}) {
      $self->{hasContent} = $vals->{hasContent};
    }
    if (defined $vals->{contentType}) {
      $self->{contentType} = $vals->{contentType};
    }
    if (defined $vals->{contentPreview}) {
      $self->{contentPreview} = $vals->{contentPreview};
    }
    if (defined $vals->{contentMetadata}) {
      $self->{contentMetadata} = $vals->{contentMetadata};
    }
    if (defined $vals->{sessionId}) {
      $self->{sessionId} = $vals->{sessionId};
    }
    if (defined $vals->{chunks}) {
      $self->{chunks} = $vals->{chunks};
    }
    if (defined $vals->{relatedMessageId}) {
      $self->{relatedMessageId} = $vals->{relatedMessageId};
    }
    if (defined $vals->{messageRelationType}) {
      $self->{messageRelationType} = $vals->{messageRelationType};
    }
    if (defined $vals->{readCount}) {
      $self->{readCount} = $vals->{readCount};
    }
    if (defined $vals->{relatedMessageServiceCode}) {
      $self->{relatedMessageServiceCode} = $vals->{relatedMessageServiceCode};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Message';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{_from});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{to});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{toType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{id});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{createdTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{deliveredTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{text});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{location} = Location->new();
        $xfer += $self->{location}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^14$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{hasContent});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^15$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{contentType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^17$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{contentPreview});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^18$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size276 = 0;
          $self->{contentMetadata} = {};
          my $_ktype277 = 0;
          my $_vtype278 = 0;
          $xfer += $input->readMapBegin(\$_ktype277, \$_vtype278, \$_size276);
          for (my $_i280 = 0; $_i280 < $_size276; ++$_i280)
          {
            my $key281 = '';
            my $val282 = '';
            $xfer += $input->readString(\$key281);
            $xfer += $input->readString(\$val282);
            $self->{contentMetadata}->{$key281} = $val282;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^19$/ && do{      if ($ftype == Thrift::TType::BYTE) {
        $xfer += $input->readByte(\$self->{sessionId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^20$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size283 = 0;
          $self->{chunks} = [];
          my $_etype286 = 0;
          $xfer += $input->readListBegin(\$_etype286, \$_size283);
          for (my $_i287 = 0; $_i287 < $_size283; ++$_i287)
          {
            my $elem288 = undef;
            $xfer += $input->readString(\$elem288);
            push(@{$self->{chunks}},$elem288);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^21$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{relatedMessageId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^22$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{messageRelationType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^23$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{readCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^24$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{relatedMessageServiceCode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Message');
  if (defined $self->{_from}) {
    $xfer += $output->writeFieldBegin('_from', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{_from});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{to}) {
    $xfer += $output->writeFieldBegin('to', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{to});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{toType}) {
    $xfer += $output->writeFieldBegin('toType', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{toType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{id}) {
    $xfer += $output->writeFieldBegin('id', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{id});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{createdTime}) {
    $xfer += $output->writeFieldBegin('createdTime', Thrift::TType::I64, 5);
    $xfer += $output->writeI64($self->{createdTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{deliveredTime}) {
    $xfer += $output->writeFieldBegin('deliveredTime', Thrift::TType::I64, 6);
    $xfer += $output->writeI64($self->{deliveredTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{text}) {
    $xfer += $output->writeFieldBegin('text', Thrift::TType::STRING, 10);
    $xfer += $output->writeString($self->{text});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{location}) {
    $xfer += $output->writeFieldBegin('location', Thrift::TType::STRUCT, 11);
    $xfer += $self->{location}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{hasContent}) {
    $xfer += $output->writeFieldBegin('hasContent', Thrift::TType::BOOL, 14);
    $xfer += $output->writeBool($self->{hasContent});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{contentType}) {
    $xfer += $output->writeFieldBegin('contentType', Thrift::TType::I32, 15);
    $xfer += $output->writeI32($self->{contentType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{contentPreview}) {
    $xfer += $output->writeFieldBegin('contentPreview', Thrift::TType::STRING, 17);
    $xfer += $output->writeString($self->{contentPreview});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{contentMetadata}) {
    $xfer += $output->writeFieldBegin('contentMetadata', Thrift::TType::MAP, 18);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{contentMetadata}}));
      {
        while( my ($kiter289,$viter290) = each %{$self->{contentMetadata}}) 
        {
          $xfer += $output->writeString($kiter289);
          $xfer += $output->writeString($viter290);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{sessionId}) {
    $xfer += $output->writeFieldBegin('sessionId', Thrift::TType::BYTE, 19);
    $xfer += $output->writeByte($self->{sessionId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{chunks}) {
    $xfer += $output->writeFieldBegin('chunks', Thrift::TType::LIST, 20);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{chunks}}));
      {
        foreach my $iter291 (@{$self->{chunks}}) 
        {
          $xfer += $output->writeString($iter291);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{relatedMessageId}) {
    $xfer += $output->writeFieldBegin('relatedMessageId', Thrift::TType::STRING, 21);
    $xfer += $output->writeString($self->{relatedMessageId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{messageRelationType}) {
    $xfer += $output->writeFieldBegin('messageRelationType', Thrift::TType::I32, 22);
    $xfer += $output->writeI32($self->{messageRelationType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{readCount}) {
    $xfer += $output->writeFieldBegin('readCount', Thrift::TType::I64, 23);
    $xfer += $output->writeI64($self->{readCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{relatedMessageServiceCode}) {
    $xfer += $output->writeFieldBegin('relatedMessageServiceCode', Thrift::TType::I32, 24);
    $xfer += $output->writeI32($self->{relatedMessageServiceCode});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareMessage;
use base qw(Class::Accessor);
SquareMessage->mk_accessors( qw( message fromType squareMessageRevision ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{message} = undef;
  $self->{fromType} = undef;
  $self->{squareMessageRevision} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{message}) {
      $self->{message} = $vals->{message};
    }
    if (defined $vals->{fromType}) {
      $self->{fromType} = $vals->{fromType};
    }
    if (defined $vals->{squareMessageRevision}) {
      $self->{squareMessageRevision} = $vals->{squareMessageRevision};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareMessage';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{message} = Message->new();
        $xfer += $self->{message}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{fromType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{squareMessageRevision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareMessage');
  if (defined $self->{message}) {
    $xfer += $output->writeFieldBegin('message', Thrift::TType::STRUCT, 1);
    $xfer += $self->{message}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{fromType}) {
    $xfer += $output->writeFieldBegin('fromType', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{fromType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareMessageRevision}) {
    $xfer += $output->writeFieldBegin('squareMessageRevision', Thrift::TType::I64, 4);
    $xfer += $output->writeI64($self->{squareMessageRevision});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareChatStatusWithoutMessage;
use base qw(Class::Accessor);
SquareChatStatusWithoutMessage->mk_accessors( qw( memberCount unreadMessageCount ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{memberCount} = undef;
  $self->{unreadMessageCount} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{memberCount}) {
      $self->{memberCount} = $vals->{memberCount};
    }
    if (defined $vals->{unreadMessageCount}) {
      $self->{unreadMessageCount} = $vals->{unreadMessageCount};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareChatStatusWithoutMessage';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{memberCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{unreadMessageCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareChatStatusWithoutMessage');
  if (defined $self->{memberCount}) {
    $xfer += $output->writeFieldBegin('memberCount', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{memberCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{unreadMessageCount}) {
    $xfer += $output->writeFieldBegin('unreadMessageCount', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{unreadMessageCount});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareChatStatus;
use base qw(Class::Accessor);
SquareChatStatus->mk_accessors( qw( lastMessage senderDisplayName otherStatus ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{lastMessage} = undef;
  $self->{senderDisplayName} = undef;
  $self->{otherStatus} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{lastMessage}) {
      $self->{lastMessage} = $vals->{lastMessage};
    }
    if (defined $vals->{senderDisplayName}) {
      $self->{senderDisplayName} = $vals->{senderDisplayName};
    }
    if (defined $vals->{otherStatus}) {
      $self->{otherStatus} = $vals->{otherStatus};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareChatStatus';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{lastMessage} = SquareMessage->new();
        $xfer += $self->{lastMessage}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{senderDisplayName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{otherStatus} = SquareChatStatusWithoutMessage->new();
        $xfer += $self->{otherStatus}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareChatStatus');
  if (defined $self->{lastMessage}) {
    $xfer += $output->writeFieldBegin('lastMessage', Thrift::TType::STRUCT, 3);
    $xfer += $self->{lastMessage}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{senderDisplayName}) {
    $xfer += $output->writeFieldBegin('senderDisplayName', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{senderDisplayName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{otherStatus}) {
    $xfer += $output->writeFieldBegin('otherStatus', Thrift::TType::STRUCT, 5);
    $xfer += $self->{otherStatus}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareChatMember;
use base qw(Class::Accessor);
SquareChatMember->mk_accessors( qw( squareMemberMid squareChatMid revision membershipState notificationForMessage ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareMemberMid} = undef;
  $self->{squareChatMid} = undef;
  $self->{revision} = undef;
  $self->{membershipState} = undef;
  $self->{notificationForMessage} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareMemberMid}) {
      $self->{squareMemberMid} = $vals->{squareMemberMid};
    }
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
    if (defined $vals->{revision}) {
      $self->{revision} = $vals->{revision};
    }
    if (defined $vals->{membershipState}) {
      $self->{membershipState} = $vals->{membershipState};
    }
    if (defined $vals->{notificationForMessage}) {
      $self->{notificationForMessage} = $vals->{notificationForMessage};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareChatMember';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMemberMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{revision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{membershipState});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{notificationForMessage});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareChatMember');
  if (defined $self->{squareMemberMid}) {
    $xfer += $output->writeFieldBegin('squareMemberMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareMemberMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{revision}) {
    $xfer += $output->writeFieldBegin('revision', Thrift::TType::I64, 3);
    $xfer += $output->writeI64($self->{revision});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{membershipState}) {
    $xfer += $output->writeFieldBegin('membershipState', Thrift::TType::I32, 4);
    $xfer += $output->writeI32($self->{membershipState});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notificationForMessage}) {
    $xfer += $output->writeFieldBegin('notificationForMessage', Thrift::TType::BOOL, 5);
    $xfer += $output->writeBool($self->{notificationForMessage});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package MessageOperation;
use base qw(Class::Accessor);
MessageOperation->mk_accessors( qw( revision createdTime type reqSeq status param1 param2 param3 message ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{revision} = undef;
  $self->{createdTime} = undef;
  $self->{type} = undef;
  $self->{reqSeq} = undef;
  $self->{status} = undef;
  $self->{param1} = undef;
  $self->{param2} = undef;
  $self->{param3} = undef;
  $self->{message} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{revision}) {
      $self->{revision} = $vals->{revision};
    }
    if (defined $vals->{createdTime}) {
      $self->{createdTime} = $vals->{createdTime};
    }
    if (defined $vals->{type}) {
      $self->{type} = $vals->{type};
    }
    if (defined $vals->{reqSeq}) {
      $self->{reqSeq} = $vals->{reqSeq};
    }
    if (defined $vals->{status}) {
      $self->{status} = $vals->{status};
    }
    if (defined $vals->{param1}) {
      $self->{param1} = $vals->{param1};
    }
    if (defined $vals->{param2}) {
      $self->{param2} = $vals->{param2};
    }
    if (defined $vals->{param3}) {
      $self->{param3} = $vals->{param3};
    }
    if (defined $vals->{message}) {
      $self->{message} = $vals->{message};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'MessageOperation';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{revision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{createdTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{type});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{reqSeq});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{status});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{param1});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{param2});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{param3});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^20$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{message} = Message->new();
        $xfer += $self->{message}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('MessageOperation');
  if (defined $self->{revision}) {
    $xfer += $output->writeFieldBegin('revision', Thrift::TType::I64, 1);
    $xfer += $output->writeI64($self->{revision});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{createdTime}) {
    $xfer += $output->writeFieldBegin('createdTime', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{createdTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type}) {
    $xfer += $output->writeFieldBegin('type', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{type});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reqSeq}) {
    $xfer += $output->writeFieldBegin('reqSeq', Thrift::TType::I32, 4);
    $xfer += $output->writeI32($self->{reqSeq});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{status}) {
    $xfer += $output->writeFieldBegin('status', Thrift::TType::I32, 5);
    $xfer += $output->writeI32($self->{status});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{param1}) {
    $xfer += $output->writeFieldBegin('param1', Thrift::TType::STRING, 10);
    $xfer += $output->writeString($self->{param1});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{param2}) {
    $xfer += $output->writeFieldBegin('param2', Thrift::TType::STRING, 11);
    $xfer += $output->writeString($self->{param2});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{param3}) {
    $xfer += $output->writeFieldBegin('param3', Thrift::TType::STRING, 12);
    $xfer += $output->writeString($self->{param3});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{message}) {
    $xfer += $output->writeFieldBegin('message', Thrift::TType::STRUCT, 20);
    $xfer += $self->{message}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package MessageOperations;
use base qw(Class::Accessor);
MessageOperations->mk_accessors( qw( operations endFlag ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{operations} = undef;
  $self->{endFlag} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{operations}) {
      $self->{operations} = $vals->{operations};
    }
    if (defined $vals->{endFlag}) {
      $self->{endFlag} = $vals->{endFlag};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'MessageOperations';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size292 = 0;
          $self->{operations} = [];
          my $_etype295 = 0;
          $xfer += $input->readListBegin(\$_etype295, \$_size292);
          for (my $_i296 = 0; $_i296 < $_size292; ++$_i296)
          {
            my $elem297 = undef;
            $elem297 = MessageOperation->new();
            $xfer += $elem297->read($input);
            push(@{$self->{operations}},$elem297);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{endFlag});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('MessageOperations');
  if (defined $self->{operations}) {
    $xfer += $output->writeFieldBegin('operations', Thrift::TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{operations}}));
      {
        foreach my $iter298 (@{$self->{operations}}) 
        {
          $xfer += ${iter298}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{endFlag}) {
    $xfer += $output->writeFieldBegin('endFlag', Thrift::TType::BOOL, 2);
    $xfer += $output->writeBool($self->{endFlag});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package MessageStoreResult;
use base qw(Class::Accessor);
MessageStoreResult->mk_accessors( qw( requestId messageIds ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{requestId} = undef;
  $self->{messageIds} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{requestId}) {
      $self->{requestId} = $vals->{requestId};
    }
    if (defined $vals->{messageIds}) {
      $self->{messageIds} = $vals->{messageIds};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'MessageStoreResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{requestId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size299 = 0;
          $self->{messageIds} = [];
          my $_etype302 = 0;
          $xfer += $input->readListBegin(\$_etype302, \$_size299);
          for (my $_i303 = 0; $_i303 < $_size299; ++$_i303)
          {
            my $elem304 = undef;
            $xfer += $input->readString(\$elem304);
            push(@{$self->{messageIds}},$elem304);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('MessageStoreResult');
  if (defined $self->{requestId}) {
    $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{requestId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{messageIds}) {
    $xfer += $output->writeFieldBegin('messageIds', Thrift::TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{messageIds}}));
      {
        foreach my $iter305 (@{$self->{messageIds}}) 
        {
          $xfer += $output->writeString($iter305);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package MetaProfile;
use base qw(Class::Accessor);
MetaProfile->mk_accessors( qw( createTime regionCode identities ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{createTime} = undef;
  $self->{regionCode} = undef;
  $self->{identities} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{createTime}) {
      $self->{createTime} = $vals->{createTime};
    }
    if (defined $vals->{regionCode}) {
      $self->{regionCode} = $vals->{regionCode};
    }
    if (defined $vals->{identities}) {
      $self->{identities} = $vals->{identities};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'MetaProfile';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{createTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{regionCode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size306 = 0;
          $self->{identities} = {};
          my $_ktype307 = 0;
          my $_vtype308 = 0;
          $xfer += $input->readMapBegin(\$_ktype307, \$_vtype308, \$_size306);
          for (my $_i310 = 0; $_i310 < $_size306; ++$_i310)
          {
            my $key311 = 0;
            my $val312 = '';
            $xfer += $input->readI32(\$key311);
            $xfer += $input->readString(\$val312);
            $self->{identities}->{$key311} = $val312;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('MetaProfile');
  if (defined $self->{createTime}) {
    $xfer += $output->writeFieldBegin('createTime', Thrift::TType::I64, 1);
    $xfer += $output->writeI64($self->{createTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{regionCode}) {
    $xfer += $output->writeFieldBegin('regionCode', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{regionCode});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{identities}) {
    $xfer += $output->writeFieldBegin('identities', Thrift::TType::MAP, 3);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::I32, Thrift::TType::STRING, scalar(keys %{$self->{identities}}));
      {
        while( my ($kiter313,$viter314) = each %{$self->{identities}}) 
        {
          $xfer += $output->writeI32($kiter313);
          $xfer += $output->writeString($viter314);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package NotificationItem;
use base qw(Class::Accessor);
NotificationItem->mk_accessors( qw( id _from to fromChannel toChannel revision createdTime content ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{id} = undef;
  $self->{_from} = undef;
  $self->{to} = undef;
  $self->{fromChannel} = undef;
  $self->{toChannel} = undef;
  $self->{revision} = undef;
  $self->{createdTime} = undef;
  $self->{content} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{id}) {
      $self->{id} = $vals->{id};
    }
    if (defined $vals->{_from}) {
      $self->{_from} = $vals->{_from};
    }
    if (defined $vals->{to}) {
      $self->{to} = $vals->{to};
    }
    if (defined $vals->{fromChannel}) {
      $self->{fromChannel} = $vals->{fromChannel};
    }
    if (defined $vals->{toChannel}) {
      $self->{toChannel} = $vals->{toChannel};
    }
    if (defined $vals->{revision}) {
      $self->{revision} = $vals->{revision};
    }
    if (defined $vals->{createdTime}) {
      $self->{createdTime} = $vals->{createdTime};
    }
    if (defined $vals->{content}) {
      $self->{content} = $vals->{content};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'NotificationItem';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{id});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{_from});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{to});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{fromChannel});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{toChannel});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{revision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{createdTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^9$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size315 = 0;
          $self->{content} = {};
          my $_ktype316 = 0;
          my $_vtype317 = 0;
          $xfer += $input->readMapBegin(\$_ktype316, \$_vtype317, \$_size315);
          for (my $_i319 = 0; $_i319 < $_size315; ++$_i319)
          {
            my $key320 = '';
            my $val321 = '';
            $xfer += $input->readString(\$key320);
            $xfer += $input->readString(\$val321);
            $self->{content}->{$key320} = $val321;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('NotificationItem');
  if (defined $self->{id}) {
    $xfer += $output->writeFieldBegin('id', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{id});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{_from}) {
    $xfer += $output->writeFieldBegin('_from', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{_from});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{to}) {
    $xfer += $output->writeFieldBegin('to', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{to});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{fromChannel}) {
    $xfer += $output->writeFieldBegin('fromChannel', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{fromChannel});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{toChannel}) {
    $xfer += $output->writeFieldBegin('toChannel', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{toChannel});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{revision}) {
    $xfer += $output->writeFieldBegin('revision', Thrift::TType::I64, 7);
    $xfer += $output->writeI64($self->{revision});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{createdTime}) {
    $xfer += $output->writeFieldBegin('createdTime', Thrift::TType::I64, 8);
    $xfer += $output->writeI64($self->{createdTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{content}) {
    $xfer += $output->writeFieldBegin('content', Thrift::TType::MAP, 9);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{content}}));
      {
        while( my ($kiter322,$viter323) = each %{$self->{content}}) 
        {
          $xfer += $output->writeString($kiter322);
          $xfer += $output->writeString($viter323);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package NotificationFetchResult;
use base qw(Class::Accessor);
NotificationFetchResult->mk_accessors( qw( fetchMode itemList ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{fetchMode} = undef;
  $self->{itemList} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{fetchMode}) {
      $self->{fetchMode} = $vals->{fetchMode};
    }
    if (defined $vals->{itemList}) {
      $self->{itemList} = $vals->{itemList};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'NotificationFetchResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{fetchMode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size324 = 0;
          $self->{itemList} = [];
          my $_etype327 = 0;
          $xfer += $input->readListBegin(\$_etype327, \$_size324);
          for (my $_i328 = 0; $_i328 < $_size324; ++$_i328)
          {
            my $elem329 = undef;
            $elem329 = NotificationItem->new();
            $xfer += $elem329->read($input);
            push(@{$self->{itemList}},$elem329);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('NotificationFetchResult');
  if (defined $self->{fetchMode}) {
    $xfer += $output->writeFieldBegin('fetchMode', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{fetchMode});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{itemList}) {
    $xfer += $output->writeFieldBegin('itemList', Thrift::TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{itemList}}));
      {
        foreach my $iter330 (@{$self->{itemList}}) 
        {
          $xfer += ${iter330}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Operation;
use base qw(Class::Accessor);
Operation->mk_accessors( qw( revision createdTime type reqSeq checksum status param1 param2 param3 message ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{revision} = undef;
  $self->{createdTime} = undef;
  $self->{type} = undef;
  $self->{reqSeq} = undef;
  $self->{checksum} = undef;
  $self->{status} = undef;
  $self->{param1} = undef;
  $self->{param2} = undef;
  $self->{param3} = undef;
  $self->{message} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{revision}) {
      $self->{revision} = $vals->{revision};
    }
    if (defined $vals->{createdTime}) {
      $self->{createdTime} = $vals->{createdTime};
    }
    if (defined $vals->{type}) {
      $self->{type} = $vals->{type};
    }
    if (defined $vals->{reqSeq}) {
      $self->{reqSeq} = $vals->{reqSeq};
    }
    if (defined $vals->{checksum}) {
      $self->{checksum} = $vals->{checksum};
    }
    if (defined $vals->{status}) {
      $self->{status} = $vals->{status};
    }
    if (defined $vals->{param1}) {
      $self->{param1} = $vals->{param1};
    }
    if (defined $vals->{param2}) {
      $self->{param2} = $vals->{param2};
    }
    if (defined $vals->{param3}) {
      $self->{param3} = $vals->{param3};
    }
    if (defined $vals->{message}) {
      $self->{message} = $vals->{message};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Operation';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{revision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{createdTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{type});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{reqSeq});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{checksum});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{status});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{param1});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{param2});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{param3});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^20$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{message} = Message->new();
        $xfer += $self->{message}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Operation');
  if (defined $self->{revision}) {
    $xfer += $output->writeFieldBegin('revision', Thrift::TType::I64, 1);
    $xfer += $output->writeI64($self->{revision});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{createdTime}) {
    $xfer += $output->writeFieldBegin('createdTime', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{createdTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type}) {
    $xfer += $output->writeFieldBegin('type', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{type});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reqSeq}) {
    $xfer += $output->writeFieldBegin('reqSeq', Thrift::TType::I32, 4);
    $xfer += $output->writeI32($self->{reqSeq});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{checksum}) {
    $xfer += $output->writeFieldBegin('checksum', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{checksum});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{status}) {
    $xfer += $output->writeFieldBegin('status', Thrift::TType::I32, 7);
    $xfer += $output->writeI32($self->{status});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{param1}) {
    $xfer += $output->writeFieldBegin('param1', Thrift::TType::STRING, 10);
    $xfer += $output->writeString($self->{param1});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{param2}) {
    $xfer += $output->writeFieldBegin('param2', Thrift::TType::STRING, 11);
    $xfer += $output->writeString($self->{param2});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{param3}) {
    $xfer += $output->writeFieldBegin('param3', Thrift::TType::STRING, 12);
    $xfer += $output->writeString($self->{param3});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{message}) {
    $xfer += $output->writeFieldBegin('message', Thrift::TType::STRUCT, 20);
    $xfer += $self->{message}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package PaymentReservation;
use base qw(Class::Accessor);
PaymentReservation->mk_accessors( qw( receiverMid productId language location currency price appStoreCode messageText messageTemplate packageId ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{receiverMid} = undef;
  $self->{productId} = undef;
  $self->{language} = undef;
  $self->{location} = undef;
  $self->{currency} = undef;
  $self->{price} = undef;
  $self->{appStoreCode} = undef;
  $self->{messageText} = undef;
  $self->{messageTemplate} = undef;
  $self->{packageId} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{receiverMid}) {
      $self->{receiverMid} = $vals->{receiverMid};
    }
    if (defined $vals->{productId}) {
      $self->{productId} = $vals->{productId};
    }
    if (defined $vals->{language}) {
      $self->{language} = $vals->{language};
    }
    if (defined $vals->{location}) {
      $self->{location} = $vals->{location};
    }
    if (defined $vals->{currency}) {
      $self->{currency} = $vals->{currency};
    }
    if (defined $vals->{price}) {
      $self->{price} = $vals->{price};
    }
    if (defined $vals->{appStoreCode}) {
      $self->{appStoreCode} = $vals->{appStoreCode};
    }
    if (defined $vals->{messageText}) {
      $self->{messageText} = $vals->{messageText};
    }
    if (defined $vals->{messageTemplate}) {
      $self->{messageTemplate} = $vals->{messageTemplate};
    }
    if (defined $vals->{packageId}) {
      $self->{packageId} = $vals->{packageId};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'PaymentReservation';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{receiverMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{productId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{language});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{location});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{currency});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{price});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{appStoreCode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{messageText});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^9$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{messageTemplate});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{packageId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('PaymentReservation');
  if (defined $self->{receiverMid}) {
    $xfer += $output->writeFieldBegin('receiverMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{receiverMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{productId}) {
    $xfer += $output->writeFieldBegin('productId', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{productId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{language}) {
    $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{language});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{location}) {
    $xfer += $output->writeFieldBegin('location', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{location});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{currency}) {
    $xfer += $output->writeFieldBegin('currency', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{currency});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{price}) {
    $xfer += $output->writeFieldBegin('price', Thrift::TType::STRING, 6);
    $xfer += $output->writeString($self->{price});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{appStoreCode}) {
    $xfer += $output->writeFieldBegin('appStoreCode', Thrift::TType::I32, 7);
    $xfer += $output->writeI32($self->{appStoreCode});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{messageText}) {
    $xfer += $output->writeFieldBegin('messageText', Thrift::TType::STRING, 8);
    $xfer += $output->writeString($self->{messageText});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{messageTemplate}) {
    $xfer += $output->writeFieldBegin('messageTemplate', Thrift::TType::I32, 9);
    $xfer += $output->writeI32($self->{messageTemplate});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{packageId}) {
    $xfer += $output->writeFieldBegin('packageId', Thrift::TType::I64, 10);
    $xfer += $output->writeI64($self->{packageId});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package PaymentReservationResult;
use base qw(Class::Accessor);
PaymentReservationResult->mk_accessors( qw( orderId confirmUrl extras ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{orderId} = undef;
  $self->{confirmUrl} = undef;
  $self->{extras} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{orderId}) {
      $self->{orderId} = $vals->{orderId};
    }
    if (defined $vals->{confirmUrl}) {
      $self->{confirmUrl} = $vals->{confirmUrl};
    }
    if (defined $vals->{extras}) {
      $self->{extras} = $vals->{extras};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'PaymentReservationResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{orderId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{confirmUrl});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size331 = 0;
          $self->{extras} = {};
          my $_ktype332 = 0;
          my $_vtype333 = 0;
          $xfer += $input->readMapBegin(\$_ktype332, \$_vtype333, \$_size331);
          for (my $_i335 = 0; $_i335 < $_size331; ++$_i335)
          {
            my $key336 = '';
            my $val337 = '';
            $xfer += $input->readString(\$key336);
            $xfer += $input->readString(\$val337);
            $self->{extras}->{$key336} = $val337;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('PaymentReservationResult');
  if (defined $self->{orderId}) {
    $xfer += $output->writeFieldBegin('orderId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{orderId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{confirmUrl}) {
    $xfer += $output->writeFieldBegin('confirmUrl', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{confirmUrl});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{extras}) {
    $xfer += $output->writeFieldBegin('extras', Thrift::TType::MAP, 3);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{extras}}));
      {
        while( my ($kiter338,$viter339) = each %{$self->{extras}}) 
        {
          $xfer += $output->writeString($kiter338);
          $xfer += $output->writeString($viter339);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Product;
use base qw(Class::Accessor);
Product->mk_accessors( qw( productId packageId version authorName onSale validDays saleType copyright title descriptionText shopOrderId fromMid toMid validUntil priceTier price currency currencySymbol paymentType createDate ownFlag eventType urlSchema downloadUrl buddyMid publishSince newFlag missionFlag categories missionButtonText missionShortDescription authorId grantedByDefault displayOrder availableForPresent availableForMyself hasAnimation hasSound recommendationsEnabled stickerResourceType ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{productId} = undef;
  $self->{packageId} = undef;
  $self->{version} = undef;
  $self->{authorName} = undef;
  $self->{onSale} = undef;
  $self->{validDays} = undef;
  $self->{saleType} = undef;
  $self->{copyright} = undef;
  $self->{title} = undef;
  $self->{descriptionText} = undef;
  $self->{shopOrderId} = undef;
  $self->{fromMid} = undef;
  $self->{toMid} = undef;
  $self->{validUntil} = undef;
  $self->{priceTier} = undef;
  $self->{price} = undef;
  $self->{currency} = undef;
  $self->{currencySymbol} = undef;
  $self->{paymentType} = undef;
  $self->{createDate} = undef;
  $self->{ownFlag} = undef;
  $self->{eventType} = undef;
  $self->{urlSchema} = undef;
  $self->{downloadUrl} = undef;
  $self->{buddyMid} = undef;
  $self->{publishSince} = undef;
  $self->{newFlag} = undef;
  $self->{missionFlag} = undef;
  $self->{categories} = undef;
  $self->{missionButtonText} = undef;
  $self->{missionShortDescription} = undef;
  $self->{authorId} = undef;
  $self->{grantedByDefault} = undef;
  $self->{displayOrder} = undef;
  $self->{availableForPresent} = undef;
  $self->{availableForMyself} = undef;
  $self->{hasAnimation} = undef;
  $self->{hasSound} = undef;
  $self->{recommendationsEnabled} = undef;
  $self->{stickerResourceType} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{productId}) {
      $self->{productId} = $vals->{productId};
    }
    if (defined $vals->{packageId}) {
      $self->{packageId} = $vals->{packageId};
    }
    if (defined $vals->{version}) {
      $self->{version} = $vals->{version};
    }
    if (defined $vals->{authorName}) {
      $self->{authorName} = $vals->{authorName};
    }
    if (defined $vals->{onSale}) {
      $self->{onSale} = $vals->{onSale};
    }
    if (defined $vals->{validDays}) {
      $self->{validDays} = $vals->{validDays};
    }
    if (defined $vals->{saleType}) {
      $self->{saleType} = $vals->{saleType};
    }
    if (defined $vals->{copyright}) {
      $self->{copyright} = $vals->{copyright};
    }
    if (defined $vals->{title}) {
      $self->{title} = $vals->{title};
    }
    if (defined $vals->{descriptionText}) {
      $self->{descriptionText} = $vals->{descriptionText};
    }
    if (defined $vals->{shopOrderId}) {
      $self->{shopOrderId} = $vals->{shopOrderId};
    }
    if (defined $vals->{fromMid}) {
      $self->{fromMid} = $vals->{fromMid};
    }
    if (defined $vals->{toMid}) {
      $self->{toMid} = $vals->{toMid};
    }
    if (defined $vals->{validUntil}) {
      $self->{validUntil} = $vals->{validUntil};
    }
    if (defined $vals->{priceTier}) {
      $self->{priceTier} = $vals->{priceTier};
    }
    if (defined $vals->{price}) {
      $self->{price} = $vals->{price};
    }
    if (defined $vals->{currency}) {
      $self->{currency} = $vals->{currency};
    }
    if (defined $vals->{currencySymbol}) {
      $self->{currencySymbol} = $vals->{currencySymbol};
    }
    if (defined $vals->{paymentType}) {
      $self->{paymentType} = $vals->{paymentType};
    }
    if (defined $vals->{createDate}) {
      $self->{createDate} = $vals->{createDate};
    }
    if (defined $vals->{ownFlag}) {
      $self->{ownFlag} = $vals->{ownFlag};
    }
    if (defined $vals->{eventType}) {
      $self->{eventType} = $vals->{eventType};
    }
    if (defined $vals->{urlSchema}) {
      $self->{urlSchema} = $vals->{urlSchema};
    }
    if (defined $vals->{downloadUrl}) {
      $self->{downloadUrl} = $vals->{downloadUrl};
    }
    if (defined $vals->{buddyMid}) {
      $self->{buddyMid} = $vals->{buddyMid};
    }
    if (defined $vals->{publishSince}) {
      $self->{publishSince} = $vals->{publishSince};
    }
    if (defined $vals->{newFlag}) {
      $self->{newFlag} = $vals->{newFlag};
    }
    if (defined $vals->{missionFlag}) {
      $self->{missionFlag} = $vals->{missionFlag};
    }
    if (defined $vals->{categories}) {
      $self->{categories} = $vals->{categories};
    }
    if (defined $vals->{missionButtonText}) {
      $self->{missionButtonText} = $vals->{missionButtonText};
    }
    if (defined $vals->{missionShortDescription}) {
      $self->{missionShortDescription} = $vals->{missionShortDescription};
    }
    if (defined $vals->{authorId}) {
      $self->{authorId} = $vals->{authorId};
    }
    if (defined $vals->{grantedByDefault}) {
      $self->{grantedByDefault} = $vals->{grantedByDefault};
    }
    if (defined $vals->{displayOrder}) {
      $self->{displayOrder} = $vals->{displayOrder};
    }
    if (defined $vals->{availableForPresent}) {
      $self->{availableForPresent} = $vals->{availableForPresent};
    }
    if (defined $vals->{availableForMyself}) {
      $self->{availableForMyself} = $vals->{availableForMyself};
    }
    if (defined $vals->{hasAnimation}) {
      $self->{hasAnimation} = $vals->{hasAnimation};
    }
    if (defined $vals->{hasSound}) {
      $self->{hasSound} = $vals->{hasSound};
    }
    if (defined $vals->{recommendationsEnabled}) {
      $self->{recommendationsEnabled} = $vals->{recommendationsEnabled};
    }
    if (defined $vals->{stickerResourceType}) {
      $self->{stickerResourceType} = $vals->{stickerResourceType};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Product';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{productId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{packageId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{version});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{authorName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{onSale});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{validDays});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{saleType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{copyright});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^9$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{title});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{descriptionText});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{shopOrderId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{fromMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^13$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{toMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^14$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{validUntil});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^15$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{priceTier});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^16$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{price});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^17$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{currency});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^18$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{currencySymbol});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^19$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{paymentType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^20$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{createDate});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^21$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{ownFlag});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^22$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{eventType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^23$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{urlSchema});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^24$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{downloadUrl});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^25$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{buddyMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^26$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{publishSince});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^27$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{newFlag});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^28$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{missionFlag});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^29$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size340 = 0;
          $self->{categories} = [];
          my $_etype343 = 0;
          $xfer += $input->readListBegin(\$_etype343, \$_size340);
          for (my $_i344 = 0; $_i344 < $_size340; ++$_i344)
          {
            my $elem345 = undef;
            $elem345 = ProductCategory->new();
            $xfer += $elem345->read($input);
            push(@{$self->{categories}},$elem345);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^30$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{missionButtonText});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^31$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{missionShortDescription});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^32$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{authorId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^41$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{grantedByDefault});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^42$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{displayOrder});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^43$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{availableForPresent});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^44$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{availableForMyself});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^51$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{hasAnimation});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^52$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{hasSound});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^53$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{recommendationsEnabled});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^54$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{stickerResourceType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Product');
  if (defined $self->{productId}) {
    $xfer += $output->writeFieldBegin('productId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{productId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{packageId}) {
    $xfer += $output->writeFieldBegin('packageId', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{packageId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{version}) {
    $xfer += $output->writeFieldBegin('version', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{version});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorName}) {
    $xfer += $output->writeFieldBegin('authorName', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{authorName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{onSale}) {
    $xfer += $output->writeFieldBegin('onSale', Thrift::TType::BOOL, 5);
    $xfer += $output->writeBool($self->{onSale});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{validDays}) {
    $xfer += $output->writeFieldBegin('validDays', Thrift::TType::I32, 6);
    $xfer += $output->writeI32($self->{validDays});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{saleType}) {
    $xfer += $output->writeFieldBegin('saleType', Thrift::TType::I32, 7);
    $xfer += $output->writeI32($self->{saleType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{copyright}) {
    $xfer += $output->writeFieldBegin('copyright', Thrift::TType::STRING, 8);
    $xfer += $output->writeString($self->{copyright});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{title}) {
    $xfer += $output->writeFieldBegin('title', Thrift::TType::STRING, 9);
    $xfer += $output->writeString($self->{title});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{descriptionText}) {
    $xfer += $output->writeFieldBegin('descriptionText', Thrift::TType::STRING, 10);
    $xfer += $output->writeString($self->{descriptionText});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{shopOrderId}) {
    $xfer += $output->writeFieldBegin('shopOrderId', Thrift::TType::I64, 11);
    $xfer += $output->writeI64($self->{shopOrderId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{fromMid}) {
    $xfer += $output->writeFieldBegin('fromMid', Thrift::TType::STRING, 12);
    $xfer += $output->writeString($self->{fromMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{toMid}) {
    $xfer += $output->writeFieldBegin('toMid', Thrift::TType::STRING, 13);
    $xfer += $output->writeString($self->{toMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{validUntil}) {
    $xfer += $output->writeFieldBegin('validUntil', Thrift::TType::I64, 14);
    $xfer += $output->writeI64($self->{validUntil});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{priceTier}) {
    $xfer += $output->writeFieldBegin('priceTier', Thrift::TType::I32, 15);
    $xfer += $output->writeI32($self->{priceTier});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{price}) {
    $xfer += $output->writeFieldBegin('price', Thrift::TType::STRING, 16);
    $xfer += $output->writeString($self->{price});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{currency}) {
    $xfer += $output->writeFieldBegin('currency', Thrift::TType::STRING, 17);
    $xfer += $output->writeString($self->{currency});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{currencySymbol}) {
    $xfer += $output->writeFieldBegin('currencySymbol', Thrift::TType::STRING, 18);
    $xfer += $output->writeString($self->{currencySymbol});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{paymentType}) {
    $xfer += $output->writeFieldBegin('paymentType', Thrift::TType::I32, 19);
    $xfer += $output->writeI32($self->{paymentType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{createDate}) {
    $xfer += $output->writeFieldBegin('createDate', Thrift::TType::I64, 20);
    $xfer += $output->writeI64($self->{createDate});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ownFlag}) {
    $xfer += $output->writeFieldBegin('ownFlag', Thrift::TType::BOOL, 21);
    $xfer += $output->writeBool($self->{ownFlag});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{eventType}) {
    $xfer += $output->writeFieldBegin('eventType', Thrift::TType::I32, 22);
    $xfer += $output->writeI32($self->{eventType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{urlSchema}) {
    $xfer += $output->writeFieldBegin('urlSchema', Thrift::TType::STRING, 23);
    $xfer += $output->writeString($self->{urlSchema});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{downloadUrl}) {
    $xfer += $output->writeFieldBegin('downloadUrl', Thrift::TType::STRING, 24);
    $xfer += $output->writeString($self->{downloadUrl});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{buddyMid}) {
    $xfer += $output->writeFieldBegin('buddyMid', Thrift::TType::STRING, 25);
    $xfer += $output->writeString($self->{buddyMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{publishSince}) {
    $xfer += $output->writeFieldBegin('publishSince', Thrift::TType::I64, 26);
    $xfer += $output->writeI64($self->{publishSince});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{newFlag}) {
    $xfer += $output->writeFieldBegin('newFlag', Thrift::TType::BOOL, 27);
    $xfer += $output->writeBool($self->{newFlag});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{missionFlag}) {
    $xfer += $output->writeFieldBegin('missionFlag', Thrift::TType::BOOL, 28);
    $xfer += $output->writeBool($self->{missionFlag});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{categories}) {
    $xfer += $output->writeFieldBegin('categories', Thrift::TType::LIST, 29);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{categories}}));
      {
        foreach my $iter346 (@{$self->{categories}}) 
        {
          $xfer += ${iter346}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{missionButtonText}) {
    $xfer += $output->writeFieldBegin('missionButtonText', Thrift::TType::STRING, 30);
    $xfer += $output->writeString($self->{missionButtonText});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{missionShortDescription}) {
    $xfer += $output->writeFieldBegin('missionShortDescription', Thrift::TType::STRING, 31);
    $xfer += $output->writeString($self->{missionShortDescription});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorId}) {
    $xfer += $output->writeFieldBegin('authorId', Thrift::TType::STRING, 32);
    $xfer += $output->writeString($self->{authorId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{grantedByDefault}) {
    $xfer += $output->writeFieldBegin('grantedByDefault', Thrift::TType::BOOL, 41);
    $xfer += $output->writeBool($self->{grantedByDefault});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{displayOrder}) {
    $xfer += $output->writeFieldBegin('displayOrder', Thrift::TType::I32, 42);
    $xfer += $output->writeI32($self->{displayOrder});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{availableForPresent}) {
    $xfer += $output->writeFieldBegin('availableForPresent', Thrift::TType::BOOL, 43);
    $xfer += $output->writeBool($self->{availableForPresent});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{availableForMyself}) {
    $xfer += $output->writeFieldBegin('availableForMyself', Thrift::TType::BOOL, 44);
    $xfer += $output->writeBool($self->{availableForMyself});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{hasAnimation}) {
    $xfer += $output->writeFieldBegin('hasAnimation', Thrift::TType::BOOL, 51);
    $xfer += $output->writeBool($self->{hasAnimation});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{hasSound}) {
    $xfer += $output->writeFieldBegin('hasSound', Thrift::TType::BOOL, 52);
    $xfer += $output->writeBool($self->{hasSound});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{recommendationsEnabled}) {
    $xfer += $output->writeFieldBegin('recommendationsEnabled', Thrift::TType::BOOL, 53);
    $xfer += $output->writeBool($self->{recommendationsEnabled});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{stickerResourceType}) {
    $xfer += $output->writeFieldBegin('stickerResourceType', Thrift::TType::I32, 54);
    $xfer += $output->writeI32($self->{stickerResourceType});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ProductList;
use base qw(Class::Accessor);
ProductList->mk_accessors( qw( hasNext bannerSequence bannerTargetType bannerTargetPath productList bannerLang ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{hasNext} = undef;
  $self->{bannerSequence} = undef;
  $self->{bannerTargetType} = undef;
  $self->{bannerTargetPath} = undef;
  $self->{productList} = undef;
  $self->{bannerLang} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{hasNext}) {
      $self->{hasNext} = $vals->{hasNext};
    }
    if (defined $vals->{bannerSequence}) {
      $self->{bannerSequence} = $vals->{bannerSequence};
    }
    if (defined $vals->{bannerTargetType}) {
      $self->{bannerTargetType} = $vals->{bannerTargetType};
    }
    if (defined $vals->{bannerTargetPath}) {
      $self->{bannerTargetPath} = $vals->{bannerTargetPath};
    }
    if (defined $vals->{productList}) {
      $self->{productList} = $vals->{productList};
    }
    if (defined $vals->{bannerLang}) {
      $self->{bannerLang} = $vals->{bannerLang};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ProductList';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{hasNext});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{bannerSequence});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{bannerTargetType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{bannerTargetPath});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size347 = 0;
          $self->{productList} = [];
          my $_etype350 = 0;
          $xfer += $input->readListBegin(\$_etype350, \$_size347);
          for (my $_i351 = 0; $_i351 < $_size347; ++$_i351)
          {
            my $elem352 = undef;
            $elem352 = Product->new();
            $xfer += $elem352->read($input);
            push(@{$self->{productList}},$elem352);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{bannerLang});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ProductList');
  if (defined $self->{hasNext}) {
    $xfer += $output->writeFieldBegin('hasNext', Thrift::TType::BOOL, 1);
    $xfer += $output->writeBool($self->{hasNext});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{bannerSequence}) {
    $xfer += $output->writeFieldBegin('bannerSequence', Thrift::TType::I64, 4);
    $xfer += $output->writeI64($self->{bannerSequence});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{bannerTargetType}) {
    $xfer += $output->writeFieldBegin('bannerTargetType', Thrift::TType::I32, 5);
    $xfer += $output->writeI32($self->{bannerTargetType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{bannerTargetPath}) {
    $xfer += $output->writeFieldBegin('bannerTargetPath', Thrift::TType::STRING, 6);
    $xfer += $output->writeString($self->{bannerTargetPath});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{productList}) {
    $xfer += $output->writeFieldBegin('productList', Thrift::TType::LIST, 7);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{productList}}));
      {
        foreach my $iter353 (@{$self->{productList}}) 
        {
          $xfer += ${iter353}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{bannerLang}) {
    $xfer += $output->writeFieldBegin('bannerLang', Thrift::TType::STRING, 8);
    $xfer += $output->writeString($self->{bannerLang});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package StickerIdRange;
use base qw(Class::Accessor);
StickerIdRange->mk_accessors( qw( start size ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{start} = undef;
  $self->{size} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{start}) {
      $self->{start} = $vals->{start};
    }
    if (defined $vals->{size}) {
      $self->{size} = $vals->{size};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'StickerIdRange';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{start});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{size});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('StickerIdRange');
  if (defined $self->{start}) {
    $xfer += $output->writeFieldBegin('start', Thrift::TType::I64, 1);
    $xfer += $output->writeI64($self->{start});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{size}) {
    $xfer += $output->writeFieldBegin('size', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{size});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ProductSimple;
use base qw(Class::Accessor);
ProductSimple->mk_accessors( qw( productId packageId version onSale validUntil stickerIdRanges grantedByDefault displayOrder ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{productId} = undef;
  $self->{packageId} = undef;
  $self->{version} = undef;
  $self->{onSale} = undef;
  $self->{validUntil} = undef;
  $self->{stickerIdRanges} = undef;
  $self->{grantedByDefault} = undef;
  $self->{displayOrder} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{productId}) {
      $self->{productId} = $vals->{productId};
    }
    if (defined $vals->{packageId}) {
      $self->{packageId} = $vals->{packageId};
    }
    if (defined $vals->{version}) {
      $self->{version} = $vals->{version};
    }
    if (defined $vals->{onSale}) {
      $self->{onSale} = $vals->{onSale};
    }
    if (defined $vals->{validUntil}) {
      $self->{validUntil} = $vals->{validUntil};
    }
    if (defined $vals->{stickerIdRanges}) {
      $self->{stickerIdRanges} = $vals->{stickerIdRanges};
    }
    if (defined $vals->{grantedByDefault}) {
      $self->{grantedByDefault} = $vals->{grantedByDefault};
    }
    if (defined $vals->{displayOrder}) {
      $self->{displayOrder} = $vals->{displayOrder};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ProductSimple';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{productId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{packageId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{version});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{onSale});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{validUntil});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size354 = 0;
          $self->{stickerIdRanges} = [];
          my $_etype357 = 0;
          $xfer += $input->readListBegin(\$_etype357, \$_size354);
          for (my $_i358 = 0; $_i358 < $_size354; ++$_i358)
          {
            my $elem359 = undef;
            $elem359 = StickerIdRange->new();
            $xfer += $elem359->read($input);
            push(@{$self->{stickerIdRanges}},$elem359);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^41$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{grantedByDefault});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^42$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{displayOrder});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ProductSimple');
  if (defined $self->{productId}) {
    $xfer += $output->writeFieldBegin('productId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{productId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{packageId}) {
    $xfer += $output->writeFieldBegin('packageId', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{packageId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{version}) {
    $xfer += $output->writeFieldBegin('version', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{version});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{onSale}) {
    $xfer += $output->writeFieldBegin('onSale', Thrift::TType::BOOL, 4);
    $xfer += $output->writeBool($self->{onSale});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{validUntil}) {
    $xfer += $output->writeFieldBegin('validUntil', Thrift::TType::I64, 5);
    $xfer += $output->writeI64($self->{validUntil});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{stickerIdRanges}) {
    $xfer += $output->writeFieldBegin('stickerIdRanges', Thrift::TType::LIST, 10);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{stickerIdRanges}}));
      {
        foreach my $iter360 (@{$self->{stickerIdRanges}}) 
        {
          $xfer += ${iter360}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{grantedByDefault}) {
    $xfer += $output->writeFieldBegin('grantedByDefault', Thrift::TType::BOOL, 41);
    $xfer += $output->writeBool($self->{grantedByDefault});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{displayOrder}) {
    $xfer += $output->writeFieldBegin('displayOrder', Thrift::TType::I32, 42);
    $xfer += $output->writeI32($self->{displayOrder});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ProductSimpleList;
use base qw(Class::Accessor);
ProductSimpleList->mk_accessors( qw( hasNext reinvokeHour lastVersionSeq productList recentNewReleaseDate recentEventReleaseDate ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{hasNext} = undef;
  $self->{reinvokeHour} = undef;
  $self->{lastVersionSeq} = undef;
  $self->{productList} = undef;
  $self->{recentNewReleaseDate} = undef;
  $self->{recentEventReleaseDate} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{hasNext}) {
      $self->{hasNext} = $vals->{hasNext};
    }
    if (defined $vals->{reinvokeHour}) {
      $self->{reinvokeHour} = $vals->{reinvokeHour};
    }
    if (defined $vals->{lastVersionSeq}) {
      $self->{lastVersionSeq} = $vals->{lastVersionSeq};
    }
    if (defined $vals->{productList}) {
      $self->{productList} = $vals->{productList};
    }
    if (defined $vals->{recentNewReleaseDate}) {
      $self->{recentNewReleaseDate} = $vals->{recentNewReleaseDate};
    }
    if (defined $vals->{recentEventReleaseDate}) {
      $self->{recentEventReleaseDate} = $vals->{recentEventReleaseDate};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ProductSimpleList';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{hasNext});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{reinvokeHour});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{lastVersionSeq});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size361 = 0;
          $self->{productList} = [];
          my $_etype364 = 0;
          $xfer += $input->readListBegin(\$_etype364, \$_size361);
          for (my $_i365 = 0; $_i365 < $_size361; ++$_i365)
          {
            my $elem366 = undef;
            $elem366 = ProductSimple->new();
            $xfer += $elem366->read($input);
            push(@{$self->{productList}},$elem366);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{recentNewReleaseDate});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{recentEventReleaseDate});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ProductSimpleList');
  if (defined $self->{hasNext}) {
    $xfer += $output->writeFieldBegin('hasNext', Thrift::TType::BOOL, 1);
    $xfer += $output->writeBool($self->{hasNext});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reinvokeHour}) {
    $xfer += $output->writeFieldBegin('reinvokeHour', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{reinvokeHour});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{lastVersionSeq}) {
    $xfer += $output->writeFieldBegin('lastVersionSeq', Thrift::TType::I64, 3);
    $xfer += $output->writeI64($self->{lastVersionSeq});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{productList}) {
    $xfer += $output->writeFieldBegin('productList', Thrift::TType::LIST, 4);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{productList}}));
      {
        foreach my $iter367 (@{$self->{productList}}) 
        {
          $xfer += ${iter367}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{recentNewReleaseDate}) {
    $xfer += $output->writeFieldBegin('recentNewReleaseDate', Thrift::TType::I64, 5);
    $xfer += $output->writeI64($self->{recentNewReleaseDate});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{recentEventReleaseDate}) {
    $xfer += $output->writeFieldBegin('recentEventReleaseDate', Thrift::TType::I64, 6);
    $xfer += $output->writeI64($self->{recentEventReleaseDate});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Profile;
use base qw(Class::Accessor);
Profile->mk_accessors( qw( mid userid phone email regionCode displayName phoneticName pictureStatus thumbnailUrl statusMessage allowSearchByUserid allowSearchByEmail picturePath musicProfile videoProfile ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{mid} = undef;
  $self->{userid} = undef;
  $self->{phone} = undef;
  $self->{email} = undef;
  $self->{regionCode} = undef;
  $self->{displayName} = undef;
  $self->{phoneticName} = undef;
  $self->{pictureStatus} = undef;
  $self->{thumbnailUrl} = undef;
  $self->{statusMessage} = undef;
  $self->{allowSearchByUserid} = undef;
  $self->{allowSearchByEmail} = undef;
  $self->{picturePath} = undef;
  $self->{musicProfile} = undef;
  $self->{videoProfile} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{mid}) {
      $self->{mid} = $vals->{mid};
    }
    if (defined $vals->{userid}) {
      $self->{userid} = $vals->{userid};
    }
    if (defined $vals->{phone}) {
      $self->{phone} = $vals->{phone};
    }
    if (defined $vals->{email}) {
      $self->{email} = $vals->{email};
    }
    if (defined $vals->{regionCode}) {
      $self->{regionCode} = $vals->{regionCode};
    }
    if (defined $vals->{displayName}) {
      $self->{displayName} = $vals->{displayName};
    }
    if (defined $vals->{phoneticName}) {
      $self->{phoneticName} = $vals->{phoneticName};
    }
    if (defined $vals->{pictureStatus}) {
      $self->{pictureStatus} = $vals->{pictureStatus};
    }
    if (defined $vals->{thumbnailUrl}) {
      $self->{thumbnailUrl} = $vals->{thumbnailUrl};
    }
    if (defined $vals->{statusMessage}) {
      $self->{statusMessage} = $vals->{statusMessage};
    }
    if (defined $vals->{allowSearchByUserid}) {
      $self->{allowSearchByUserid} = $vals->{allowSearchByUserid};
    }
    if (defined $vals->{allowSearchByEmail}) {
      $self->{allowSearchByEmail} = $vals->{allowSearchByEmail};
    }
    if (defined $vals->{picturePath}) {
      $self->{picturePath} = $vals->{picturePath};
    }
    if (defined $vals->{musicProfile}) {
      $self->{musicProfile} = $vals->{musicProfile};
    }
    if (defined $vals->{videoProfile}) {
      $self->{videoProfile} = $vals->{videoProfile};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Profile';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{mid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{userid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{phone});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{email});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{regionCode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^20$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{displayName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^21$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{phoneticName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^22$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{pictureStatus});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^23$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{thumbnailUrl});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^24$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{statusMessage});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^31$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{allowSearchByUserid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^32$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{allowSearchByEmail});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^33$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{picturePath});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^34$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{musicProfile});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^35$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{videoProfile});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Profile');
  if (defined $self->{mid}) {
    $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{mid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{userid}) {
    $xfer += $output->writeFieldBegin('userid', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{userid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{phone}) {
    $xfer += $output->writeFieldBegin('phone', Thrift::TType::STRING, 10);
    $xfer += $output->writeString($self->{phone});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{email}) {
    $xfer += $output->writeFieldBegin('email', Thrift::TType::STRING, 11);
    $xfer += $output->writeString($self->{email});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{regionCode}) {
    $xfer += $output->writeFieldBegin('regionCode', Thrift::TType::STRING, 12);
    $xfer += $output->writeString($self->{regionCode});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{displayName}) {
    $xfer += $output->writeFieldBegin('displayName', Thrift::TType::STRING, 20);
    $xfer += $output->writeString($self->{displayName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{phoneticName}) {
    $xfer += $output->writeFieldBegin('phoneticName', Thrift::TType::STRING, 21);
    $xfer += $output->writeString($self->{phoneticName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{pictureStatus}) {
    $xfer += $output->writeFieldBegin('pictureStatus', Thrift::TType::STRING, 22);
    $xfer += $output->writeString($self->{pictureStatus});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{thumbnailUrl}) {
    $xfer += $output->writeFieldBegin('thumbnailUrl', Thrift::TType::STRING, 23);
    $xfer += $output->writeString($self->{thumbnailUrl});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{statusMessage}) {
    $xfer += $output->writeFieldBegin('statusMessage', Thrift::TType::STRING, 24);
    $xfer += $output->writeString($self->{statusMessage});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{allowSearchByUserid}) {
    $xfer += $output->writeFieldBegin('allowSearchByUserid', Thrift::TType::BOOL, 31);
    $xfer += $output->writeBool($self->{allowSearchByUserid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{allowSearchByEmail}) {
    $xfer += $output->writeFieldBegin('allowSearchByEmail', Thrift::TType::BOOL, 32);
    $xfer += $output->writeBool($self->{allowSearchByEmail});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{picturePath}) {
    $xfer += $output->writeFieldBegin('picturePath', Thrift::TType::STRING, 33);
    $xfer += $output->writeString($self->{picturePath});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{musicProfile}) {
    $xfer += $output->writeFieldBegin('musicProfile', Thrift::TType::STRING, 34);
    $xfer += $output->writeString($self->{musicProfile});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{videoProfile}) {
    $xfer += $output->writeFieldBegin('videoProfile', Thrift::TType::STRING, 35);
    $xfer += $output->writeString($self->{videoProfile});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ProximityMatchCandidateResult;
use base qw(Class::Accessor);
ProximityMatchCandidateResult->mk_accessors( qw( users buddies ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{users} = undef;
  $self->{buddies} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{users}) {
      $self->{users} = $vals->{users};
    }
    if (defined $vals->{buddies}) {
      $self->{buddies} = $vals->{buddies};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ProximityMatchCandidateResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size368 = 0;
          $self->{users} = [];
          my $_etype371 = 0;
          $xfer += $input->readListBegin(\$_etype371, \$_size368);
          for (my $_i372 = 0; $_i372 < $_size368; ++$_i372)
          {
            my $elem373 = undef;
            $elem373 = Contact->new();
            $xfer += $elem373->read($input);
            push(@{$self->{users}},$elem373);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size374 = 0;
          $self->{buddies} = [];
          my $_etype377 = 0;
          $xfer += $input->readListBegin(\$_etype377, \$_size374);
          for (my $_i378 = 0; $_i378 < $_size374; ++$_i378)
          {
            my $elem379 = undef;
            $elem379 = Contact->new();
            $xfer += $elem379->read($input);
            push(@{$self->{buddies}},$elem379);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ProximityMatchCandidateResult');
  if (defined $self->{users}) {
    $xfer += $output->writeFieldBegin('users', Thrift::TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{users}}));
      {
        foreach my $iter380 (@{$self->{users}}) 
        {
          $xfer += ${iter380}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{buddies}) {
    $xfer += $output->writeFieldBegin('buddies', Thrift::TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{buddies}}));
      {
        foreach my $iter381 (@{$self->{buddies}}) 
        {
          $xfer += ${iter381}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package RegisterWithSnsIdResult;
use base qw(Class::Accessor);
RegisterWithSnsIdResult->mk_accessors( qw( authToken userCreated ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{authToken} = undef;
  $self->{userCreated} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{authToken}) {
      $self->{authToken} = $vals->{authToken};
    }
    if (defined $vals->{userCreated}) {
      $self->{userCreated} = $vals->{userCreated};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RegisterWithSnsIdResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{authToken});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{userCreated});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RegisterWithSnsIdResult');
  if (defined $self->{authToken}) {
    $xfer += $output->writeFieldBegin('authToken', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{authToken});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{userCreated}) {
    $xfer += $output->writeFieldBegin('userCreated', Thrift::TType::BOOL, 2);
    $xfer += $output->writeBool($self->{userCreated});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package RequestTokenResponse;
use base qw(Class::Accessor);
RequestTokenResponse->mk_accessors( qw( requestToken returnUrl ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{requestToken} = undef;
  $self->{returnUrl} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{requestToken}) {
      $self->{requestToken} = $vals->{requestToken};
    }
    if (defined $vals->{returnUrl}) {
      $self->{returnUrl} = $vals->{returnUrl};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RequestTokenResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{requestToken});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{returnUrl});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RequestTokenResponse');
  if (defined $self->{requestToken}) {
    $xfer += $output->writeFieldBegin('requestToken', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{requestToken});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{returnUrl}) {
    $xfer += $output->writeFieldBegin('returnUrl', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{returnUrl});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Room;
use base qw(Class::Accessor);
Room->mk_accessors( qw( mid createdTime contacts notificationDisabled memberMids ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{mid} = undef;
  $self->{createdTime} = undef;
  $self->{contacts} = undef;
  $self->{notificationDisabled} = undef;
  $self->{memberMids} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{mid}) {
      $self->{mid} = $vals->{mid};
    }
    if (defined $vals->{createdTime}) {
      $self->{createdTime} = $vals->{createdTime};
    }
    if (defined $vals->{contacts}) {
      $self->{contacts} = $vals->{contacts};
    }
    if (defined $vals->{notificationDisabled}) {
      $self->{notificationDisabled} = $vals->{notificationDisabled};
    }
    if (defined $vals->{memberMids}) {
      $self->{memberMids} = $vals->{memberMids};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Room';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{mid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{createdTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size382 = 0;
          $self->{contacts} = [];
          my $_etype385 = 0;
          $xfer += $input->readListBegin(\$_etype385, \$_size382);
          for (my $_i386 = 0; $_i386 < $_size382; ++$_i386)
          {
            my $elem387 = undef;
            $elem387 = Contact->new();
            $xfer += $elem387->read($input);
            push(@{$self->{contacts}},$elem387);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^31$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{notificationDisabled});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^40$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size388 = 0;
          $self->{memberMids} = [];
          my $_etype391 = 0;
          $xfer += $input->readListBegin(\$_etype391, \$_size388);
          for (my $_i392 = 0; $_i392 < $_size388; ++$_i392)
          {
            my $elem393 = undef;
            $xfer += $input->readString(\$elem393);
            push(@{$self->{memberMids}},$elem393);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Room');
  if (defined $self->{mid}) {
    $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{mid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{createdTime}) {
    $xfer += $output->writeFieldBegin('createdTime', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{createdTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{contacts}) {
    $xfer += $output->writeFieldBegin('contacts', Thrift::TType::LIST, 10);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{contacts}}));
      {
        foreach my $iter394 (@{$self->{contacts}}) 
        {
          $xfer += ${iter394}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notificationDisabled}) {
    $xfer += $output->writeFieldBegin('notificationDisabled', Thrift::TType::BOOL, 31);
    $xfer += $output->writeBool($self->{notificationDisabled});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{memberMids}) {
    $xfer += $output->writeFieldBegin('memberMids', Thrift::TType::LIST, 40);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{memberMids}}));
      {
        foreach my $iter395 (@{$self->{memberMids}}) 
        {
          $xfer += $output->writeString($iter395);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SuggestDictionary;
use base qw(Class::Accessor);
SuggestDictionary->mk_accessors( qw( language name ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{language} = undef;
  $self->{name} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{language}) {
      $self->{language} = $vals->{language};
    }
    if (defined $vals->{name}) {
      $self->{name} = $vals->{name};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SuggestDictionary';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{language});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{name});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SuggestDictionary');
  if (defined $self->{language}) {
    $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{language});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{name}) {
    $xfer += $output->writeFieldBegin('name', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{name});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SuggestItemDictionaryIncrement;
use base qw(Class::Accessor);
SuggestItemDictionaryIncrement->mk_accessors( qw( status revision scheme data ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{status} = undef;
  $self->{revision} = undef;
  $self->{scheme} = undef;
  $self->{data} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{status}) {
      $self->{status} = $vals->{status};
    }
    if (defined $vals->{revision}) {
      $self->{revision} = $vals->{revision};
    }
    if (defined $vals->{scheme}) {
      $self->{scheme} = $vals->{scheme};
    }
    if (defined $vals->{data}) {
      $self->{data} = $vals->{data};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SuggestItemDictionaryIncrement';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{status});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{revision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{scheme});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{data});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SuggestItemDictionaryIncrement');
  if (defined $self->{status}) {
    $xfer += $output->writeFieldBegin('status', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{status});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{revision}) {
    $xfer += $output->writeFieldBegin('revision', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{revision});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{scheme}) {
    $xfer += $output->writeFieldBegin('scheme', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{scheme});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{data}) {
    $xfer += $output->writeFieldBegin('data', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{data});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SuggestTagDictionaryIncrement;
use base qw(Class::Accessor);
SuggestTagDictionaryIncrement->mk_accessors( qw( status language revision scheme data ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{status} = undef;
  $self->{language} = undef;
  $self->{revision} = undef;
  $self->{scheme} = undef;
  $self->{data} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{status}) {
      $self->{status} = $vals->{status};
    }
    if (defined $vals->{language}) {
      $self->{language} = $vals->{language};
    }
    if (defined $vals->{revision}) {
      $self->{revision} = $vals->{revision};
    }
    if (defined $vals->{scheme}) {
      $self->{scheme} = $vals->{scheme};
    }
    if (defined $vals->{data}) {
      $self->{data} = $vals->{data};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SuggestTagDictionaryIncrement';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{status});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{language});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{revision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{scheme});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{data});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SuggestTagDictionaryIncrement');
  if (defined $self->{status}) {
    $xfer += $output->writeFieldBegin('status', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{status});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{language}) {
    $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{language});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{revision}) {
    $xfer += $output->writeFieldBegin('revision', Thrift::TType::I64, 3);
    $xfer += $output->writeI64($self->{revision});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{scheme}) {
    $xfer += $output->writeFieldBegin('scheme', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{scheme});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{data}) {
    $xfer += $output->writeFieldBegin('data', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{data});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SuggestDictionaryIncrements;
use base qw(Class::Accessor);
SuggestDictionaryIncrements->mk_accessors( qw( itemIncrement tagIncrements ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{itemIncrement} = undef;
  $self->{tagIncrements} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{itemIncrement}) {
      $self->{itemIncrement} = $vals->{itemIncrement};
    }
    if (defined $vals->{tagIncrements}) {
      $self->{tagIncrements} = $vals->{tagIncrements};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SuggestDictionaryIncrements';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{itemIncrement} = SuggestItemDictionaryIncrement->new();
        $xfer += $self->{itemIncrement}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size396 = 0;
          $self->{tagIncrements} = [];
          my $_etype399 = 0;
          $xfer += $input->readListBegin(\$_etype399, \$_size396);
          for (my $_i400 = 0; $_i400 < $_size396; ++$_i400)
          {
            my $elem401 = undef;
            $elem401 = SuggestTagDictionaryIncrement->new();
            $xfer += $elem401->read($input);
            push(@{$self->{tagIncrements}},$elem401);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SuggestDictionaryIncrements');
  if (defined $self->{itemIncrement}) {
    $xfer += $output->writeFieldBegin('itemIncrement', Thrift::TType::STRUCT, 1);
    $xfer += $self->{itemIncrement}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{tagIncrements}) {
    $xfer += $output->writeFieldBegin('tagIncrements', Thrift::TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{tagIncrements}}));
      {
        foreach my $iter402 (@{$self->{tagIncrements}}) 
        {
          $xfer += ${iter402}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SuggestItemDictionaryRevision;
use base qw(Class::Accessor);
SuggestItemDictionaryRevision->mk_accessors( qw( revision scheme ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{revision} = undef;
  $self->{scheme} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{revision}) {
      $self->{revision} = $vals->{revision};
    }
    if (defined $vals->{scheme}) {
      $self->{scheme} = $vals->{scheme};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SuggestItemDictionaryRevision';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{revision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{scheme});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SuggestItemDictionaryRevision');
  if (defined $self->{revision}) {
    $xfer += $output->writeFieldBegin('revision', Thrift::TType::I64, 1);
    $xfer += $output->writeI64($self->{revision});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{scheme}) {
    $xfer += $output->writeFieldBegin('scheme', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{scheme});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SuggestTagDictionaryRevision;
use base qw(Class::Accessor);
SuggestTagDictionaryRevision->mk_accessors( qw( language revision scheme ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{language} = undef;
  $self->{revision} = undef;
  $self->{scheme} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{language}) {
      $self->{language} = $vals->{language};
    }
    if (defined $vals->{revision}) {
      $self->{revision} = $vals->{revision};
    }
    if (defined $vals->{scheme}) {
      $self->{scheme} = $vals->{scheme};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SuggestTagDictionaryRevision';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{language});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{revision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{scheme});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SuggestTagDictionaryRevision');
  if (defined $self->{language}) {
    $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{language});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{revision}) {
    $xfer += $output->writeFieldBegin('revision', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{revision});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{scheme}) {
    $xfer += $output->writeFieldBegin('scheme', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{scheme});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SuggestDictionaryRevisions;
use base qw(Class::Accessor);
SuggestDictionaryRevisions->mk_accessors( qw( itemRevision tagRevisions ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{itemRevision} = undef;
  $self->{tagRevisions} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{itemRevision}) {
      $self->{itemRevision} = $vals->{itemRevision};
    }
    if (defined $vals->{tagRevisions}) {
      $self->{tagRevisions} = $vals->{tagRevisions};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SuggestDictionaryRevisions';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{itemRevision} = SuggestItemDictionaryRevision->new();
        $xfer += $self->{itemRevision}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size403 = 0;
          $self->{tagRevisions} = [];
          my $_etype406 = 0;
          $xfer += $input->readListBegin(\$_etype406, \$_size403);
          for (my $_i407 = 0; $_i407 < $_size403; ++$_i407)
          {
            my $elem408 = undef;
            $elem408 = SuggestTagDictionaryRevision->new();
            $xfer += $elem408->read($input);
            push(@{$self->{tagRevisions}},$elem408);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SuggestDictionaryRevisions');
  if (defined $self->{itemRevision}) {
    $xfer += $output->writeFieldBegin('itemRevision', Thrift::TType::STRUCT, 1);
    $xfer += $self->{itemRevision}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{tagRevisions}) {
    $xfer += $output->writeFieldBegin('tagRevisions', Thrift::TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{tagRevisions}}));
      {
        foreach my $iter409 (@{$self->{tagRevisions}}) 
        {
          $xfer += ${iter409}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SuggestDictionarySettings;
use base qw(Class::Accessor);
SuggestDictionarySettings->mk_accessors( qw( revision newRevision dictionaries preloadedDictionaries ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{revision} = undef;
  $self->{newRevision} = undef;
  $self->{dictionaries} = undef;
  $self->{preloadedDictionaries} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{revision}) {
      $self->{revision} = $vals->{revision};
    }
    if (defined $vals->{newRevision}) {
      $self->{newRevision} = $vals->{newRevision};
    }
    if (defined $vals->{dictionaries}) {
      $self->{dictionaries} = $vals->{dictionaries};
    }
    if (defined $vals->{preloadedDictionaries}) {
      $self->{preloadedDictionaries} = $vals->{preloadedDictionaries};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SuggestDictionarySettings';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{revision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{newRevision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size410 = 0;
          $self->{dictionaries} = [];
          my $_etype413 = 0;
          $xfer += $input->readListBegin(\$_etype413, \$_size410);
          for (my $_i414 = 0; $_i414 < $_size410; ++$_i414)
          {
            my $elem415 = undef;
            $elem415 = SuggestDictionary->new();
            $xfer += $elem415->read($input);
            push(@{$self->{dictionaries}},$elem415);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size416 = 0;
          $self->{preloadedDictionaries} = [];
          my $_etype419 = 0;
          $xfer += $input->readListBegin(\$_etype419, \$_size416);
          for (my $_i420 = 0; $_i420 < $_size416; ++$_i420)
          {
            my $elem421 = undef;
            $xfer += $input->readString(\$elem421);
            push(@{$self->{preloadedDictionaries}},$elem421);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SuggestDictionarySettings');
  if (defined $self->{revision}) {
    $xfer += $output->writeFieldBegin('revision', Thrift::TType::I64, 1);
    $xfer += $output->writeI64($self->{revision});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{newRevision}) {
    $xfer += $output->writeFieldBegin('newRevision', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{newRevision});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{dictionaries}) {
    $xfer += $output->writeFieldBegin('dictionaries', Thrift::TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{dictionaries}}));
      {
        foreach my $iter422 (@{$self->{dictionaries}}) 
        {
          $xfer += ${iter422}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{preloadedDictionaries}) {
    $xfer += $output->writeFieldBegin('preloadedDictionaries', Thrift::TType::LIST, 4);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{preloadedDictionaries}}));
      {
        foreach my $iter423 (@{$self->{preloadedDictionaries}}) 
        {
          $xfer += $output->writeString($iter423);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package PhoneInfoForChannel;
use base qw(Class::Accessor);
PhoneInfoForChannel->mk_accessors( qw( mid normalizedPhoneNumber allowedToSearchByPhoneNumber allowedToReceiveMessageFromNonFriend region ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{mid} = undef;
  $self->{normalizedPhoneNumber} = undef;
  $self->{allowedToSearchByPhoneNumber} = undef;
  $self->{allowedToReceiveMessageFromNonFriend} = undef;
  $self->{region} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{mid}) {
      $self->{mid} = $vals->{mid};
    }
    if (defined $vals->{normalizedPhoneNumber}) {
      $self->{normalizedPhoneNumber} = $vals->{normalizedPhoneNumber};
    }
    if (defined $vals->{allowedToSearchByPhoneNumber}) {
      $self->{allowedToSearchByPhoneNumber} = $vals->{allowedToSearchByPhoneNumber};
    }
    if (defined $vals->{allowedToReceiveMessageFromNonFriend}) {
      $self->{allowedToReceiveMessageFromNonFriend} = $vals->{allowedToReceiveMessageFromNonFriend};
    }
    if (defined $vals->{region}) {
      $self->{region} = $vals->{region};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'PhoneInfoForChannel';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{mid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{normalizedPhoneNumber});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{allowedToSearchByPhoneNumber});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{allowedToReceiveMessageFromNonFriend});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{region});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('PhoneInfoForChannel');
  if (defined $self->{mid}) {
    $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{mid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{normalizedPhoneNumber}) {
    $xfer += $output->writeFieldBegin('normalizedPhoneNumber', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{normalizedPhoneNumber});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{allowedToSearchByPhoneNumber}) {
    $xfer += $output->writeFieldBegin('allowedToSearchByPhoneNumber', Thrift::TType::BOOL, 3);
    $xfer += $output->writeBool($self->{allowedToSearchByPhoneNumber});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{allowedToReceiveMessageFromNonFriend}) {
    $xfer += $output->writeFieldBegin('allowedToReceiveMessageFromNonFriend', Thrift::TType::BOOL, 4);
    $xfer += $output->writeBool($self->{allowedToReceiveMessageFromNonFriend});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{region}) {
    $xfer += $output->writeFieldBegin('region', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{region});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package PhoneVerificationResult;
use base qw(Class::Accessor);
PhoneVerificationResult->mk_accessors( qw( verificationResult accountMigrationCheckType recommendAddFriends ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{verificationResult} = undef;
  $self->{accountMigrationCheckType} = undef;
  $self->{recommendAddFriends} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{verificationResult}) {
      $self->{verificationResult} = $vals->{verificationResult};
    }
    if (defined $vals->{accountMigrationCheckType}) {
      $self->{accountMigrationCheckType} = $vals->{accountMigrationCheckType};
    }
    if (defined $vals->{recommendAddFriends}) {
      $self->{recommendAddFriends} = $vals->{recommendAddFriends};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'PhoneVerificationResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{verificationResult});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{accountMigrationCheckType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{recommendAddFriends});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('PhoneVerificationResult');
  if (defined $self->{verificationResult}) {
    $xfer += $output->writeFieldBegin('verificationResult', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{verificationResult});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{accountMigrationCheckType}) {
    $xfer += $output->writeFieldBegin('accountMigrationCheckType', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{accountMigrationCheckType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{recommendAddFriends}) {
    $xfer += $output->writeFieldBegin('recommendAddFriends', Thrift::TType::BOOL, 3);
    $xfer += $output->writeBool($self->{recommendAddFriends});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package PlaceSearchInfo;
use base qw(Class::Accessor);
PlaceSearchInfo->mk_accessors( qw( name address latitude longitude ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{name} = undef;
  $self->{address} = undef;
  $self->{latitude} = undef;
  $self->{longitude} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{name}) {
      $self->{name} = $vals->{name};
    }
    if (defined $vals->{address}) {
      $self->{address} = $vals->{address};
    }
    if (defined $vals->{latitude}) {
      $self->{latitude} = $vals->{latitude};
    }
    if (defined $vals->{longitude}) {
      $self->{longitude} = $vals->{longitude};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'PlaceSearchInfo';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{name});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{address});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::DOUBLE) {
        $xfer += $input->readDouble(\$self->{latitude});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::DOUBLE) {
        $xfer += $input->readDouble(\$self->{longitude});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('PlaceSearchInfo');
  if (defined $self->{name}) {
    $xfer += $output->writeFieldBegin('name', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{name});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{address}) {
    $xfer += $output->writeFieldBegin('address', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{address});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{latitude}) {
    $xfer += $output->writeFieldBegin('latitude', Thrift::TType::DOUBLE, 3);
    $xfer += $output->writeDouble($self->{latitude});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{longitude}) {
    $xfer += $output->writeFieldBegin('longitude', Thrift::TType::DOUBLE, 4);
    $xfer += $output->writeDouble($self->{longitude});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package RSAKey;
use base qw(Class::Accessor);
RSAKey->mk_accessors( qw( keynm nvalue evalue sessionKey ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{keynm} = undef;
  $self->{nvalue} = undef;
  $self->{evalue} = undef;
  $self->{sessionKey} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{keynm}) {
      $self->{keynm} = $vals->{keynm};
    }
    if (defined $vals->{nvalue}) {
      $self->{nvalue} = $vals->{nvalue};
    }
    if (defined $vals->{evalue}) {
      $self->{evalue} = $vals->{evalue};
    }
    if (defined $vals->{sessionKey}) {
      $self->{sessionKey} = $vals->{sessionKey};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RSAKey';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{keynm});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{nvalue});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{evalue});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{sessionKey});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RSAKey');
  if (defined $self->{keynm}) {
    $xfer += $output->writeFieldBegin('keynm', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{keynm});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{nvalue}) {
    $xfer += $output->writeFieldBegin('nvalue', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{nvalue});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{evalue}) {
    $xfer += $output->writeFieldBegin('evalue', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{evalue});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{sessionKey}) {
    $xfer += $output->writeFieldBegin('sessionKey', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{sessionKey});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SecurityCenterResult;
use base qw(Class::Accessor);
SecurityCenterResult->mk_accessors( qw( uri token cookiePath skip ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{uri} = undef;
  $self->{token} = undef;
  $self->{cookiePath} = undef;
  $self->{skip} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{uri}) {
      $self->{uri} = $vals->{uri};
    }
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{cookiePath}) {
      $self->{cookiePath} = $vals->{cookiePath};
    }
    if (defined $vals->{skip}) {
      $self->{skip} = $vals->{skip};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SecurityCenterResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{uri});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{cookiePath});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{skip});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SecurityCenterResult');
  if (defined $self->{uri}) {
    $xfer += $output->writeFieldBegin('uri', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{uri});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{cookiePath}) {
    $xfer += $output->writeFieldBegin('cookiePath', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{cookiePath});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{skip}) {
    $xfer += $output->writeFieldBegin('skip', Thrift::TType::BOOL, 4);
    $xfer += $output->writeBool($self->{skip});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SendBuddyMessageResult;
use base qw(Class::Accessor);
SendBuddyMessageResult->mk_accessors( qw( requestId state messageId eventNo receiverCount successCount failCount cancelCount blockCount unregisterCount timestamp message ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{requestId} = undef;
  $self->{state} = undef;
  $self->{messageId} = undef;
  $self->{eventNo} = undef;
  $self->{receiverCount} = undef;
  $self->{successCount} = undef;
  $self->{failCount} = undef;
  $self->{cancelCount} = undef;
  $self->{blockCount} = undef;
  $self->{unregisterCount} = undef;
  $self->{timestamp} = undef;
  $self->{message} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{requestId}) {
      $self->{requestId} = $vals->{requestId};
    }
    if (defined $vals->{state}) {
      $self->{state} = $vals->{state};
    }
    if (defined $vals->{messageId}) {
      $self->{messageId} = $vals->{messageId};
    }
    if (defined $vals->{eventNo}) {
      $self->{eventNo} = $vals->{eventNo};
    }
    if (defined $vals->{receiverCount}) {
      $self->{receiverCount} = $vals->{receiverCount};
    }
    if (defined $vals->{successCount}) {
      $self->{successCount} = $vals->{successCount};
    }
    if (defined $vals->{failCount}) {
      $self->{failCount} = $vals->{failCount};
    }
    if (defined $vals->{cancelCount}) {
      $self->{cancelCount} = $vals->{cancelCount};
    }
    if (defined $vals->{blockCount}) {
      $self->{blockCount} = $vals->{blockCount};
    }
    if (defined $vals->{unregisterCount}) {
      $self->{unregisterCount} = $vals->{unregisterCount};
    }
    if (defined $vals->{timestamp}) {
      $self->{timestamp} = $vals->{timestamp};
    }
    if (defined $vals->{message}) {
      $self->{message} = $vals->{message};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SendBuddyMessageResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{requestId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{state});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{messageId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{eventNo});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{receiverCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{successCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^13$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{failCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^14$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{cancelCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^15$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{blockCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^16$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{unregisterCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^21$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{timestamp});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^22$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{message});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SendBuddyMessageResult');
  if (defined $self->{requestId}) {
    $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{requestId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{state}) {
    $xfer += $output->writeFieldBegin('state', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{state});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{messageId}) {
    $xfer += $output->writeFieldBegin('messageId', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{messageId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{eventNo}) {
    $xfer += $output->writeFieldBegin('eventNo', Thrift::TType::I32, 4);
    $xfer += $output->writeI32($self->{eventNo});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{receiverCount}) {
    $xfer += $output->writeFieldBegin('receiverCount', Thrift::TType::I64, 11);
    $xfer += $output->writeI64($self->{receiverCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{successCount}) {
    $xfer += $output->writeFieldBegin('successCount', Thrift::TType::I64, 12);
    $xfer += $output->writeI64($self->{successCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{failCount}) {
    $xfer += $output->writeFieldBegin('failCount', Thrift::TType::I64, 13);
    $xfer += $output->writeI64($self->{failCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{cancelCount}) {
    $xfer += $output->writeFieldBegin('cancelCount', Thrift::TType::I64, 14);
    $xfer += $output->writeI64($self->{cancelCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{blockCount}) {
    $xfer += $output->writeFieldBegin('blockCount', Thrift::TType::I64, 15);
    $xfer += $output->writeI64($self->{blockCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{unregisterCount}) {
    $xfer += $output->writeFieldBegin('unregisterCount', Thrift::TType::I64, 16);
    $xfer += $output->writeI64($self->{unregisterCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{timestamp}) {
    $xfer += $output->writeFieldBegin('timestamp', Thrift::TType::I64, 21);
    $xfer += $output->writeI64($self->{timestamp});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{message}) {
    $xfer += $output->writeFieldBegin('message', Thrift::TType::STRING, 22);
    $xfer += $output->writeString($self->{message});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SetBuddyOnAirResult;
use base qw(Class::Accessor);
SetBuddyOnAirResult->mk_accessors( qw( requestId state eventNo receiverCount successCount failCount cancelCount unregisterCount timestamp message ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{requestId} = undef;
  $self->{state} = undef;
  $self->{eventNo} = undef;
  $self->{receiverCount} = undef;
  $self->{successCount} = undef;
  $self->{failCount} = undef;
  $self->{cancelCount} = undef;
  $self->{unregisterCount} = undef;
  $self->{timestamp} = undef;
  $self->{message} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{requestId}) {
      $self->{requestId} = $vals->{requestId};
    }
    if (defined $vals->{state}) {
      $self->{state} = $vals->{state};
    }
    if (defined $vals->{eventNo}) {
      $self->{eventNo} = $vals->{eventNo};
    }
    if (defined $vals->{receiverCount}) {
      $self->{receiverCount} = $vals->{receiverCount};
    }
    if (defined $vals->{successCount}) {
      $self->{successCount} = $vals->{successCount};
    }
    if (defined $vals->{failCount}) {
      $self->{failCount} = $vals->{failCount};
    }
    if (defined $vals->{cancelCount}) {
      $self->{cancelCount} = $vals->{cancelCount};
    }
    if (defined $vals->{unregisterCount}) {
      $self->{unregisterCount} = $vals->{unregisterCount};
    }
    if (defined $vals->{timestamp}) {
      $self->{timestamp} = $vals->{timestamp};
    }
    if (defined $vals->{message}) {
      $self->{message} = $vals->{message};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SetBuddyOnAirResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{requestId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{state});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{eventNo});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{receiverCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{successCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^13$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{failCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^14$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{cancelCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^15$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{unregisterCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^21$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{timestamp});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^22$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{message});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SetBuddyOnAirResult');
  if (defined $self->{requestId}) {
    $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{requestId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{state}) {
    $xfer += $output->writeFieldBegin('state', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{state});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{eventNo}) {
    $xfer += $output->writeFieldBegin('eventNo', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{eventNo});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{receiverCount}) {
    $xfer += $output->writeFieldBegin('receiverCount', Thrift::TType::I64, 11);
    $xfer += $output->writeI64($self->{receiverCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{successCount}) {
    $xfer += $output->writeFieldBegin('successCount', Thrift::TType::I64, 12);
    $xfer += $output->writeI64($self->{successCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{failCount}) {
    $xfer += $output->writeFieldBegin('failCount', Thrift::TType::I64, 13);
    $xfer += $output->writeI64($self->{failCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{cancelCount}) {
    $xfer += $output->writeFieldBegin('cancelCount', Thrift::TType::I64, 14);
    $xfer += $output->writeI64($self->{cancelCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{unregisterCount}) {
    $xfer += $output->writeFieldBegin('unregisterCount', Thrift::TType::I64, 15);
    $xfer += $output->writeI64($self->{unregisterCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{timestamp}) {
    $xfer += $output->writeFieldBegin('timestamp', Thrift::TType::I64, 21);
    $xfer += $output->writeI64($self->{timestamp});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{message}) {
    $xfer += $output->writeFieldBegin('message', Thrift::TType::STRING, 22);
    $xfer += $output->writeString($self->{message});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Settings;
use base qw(Class::Accessor);
Settings->mk_accessors( qw( notificationEnable notificationMuteExpiration notificationNewMessage notificationGroupInvitation notificationShowMessage notificationIncomingCall notificationSoundMessage notificationSoundGroup notificationDisabledWithSub privacySyncContacts privacySearchByPhoneNumber privacySearchByUserid privacySearchByEmail privacyAllowSecondaryDeviceLogin privacyProfileImagePostToMyhome privacyReceiveMessagesFromNotFriend contactMyTicket identityProvider identityIdentifier snsAccounts phoneRegistration emailConfirmationStatus preferenceLocale customModes e2eeEnable hitokotoBackupRequested privacyProfileMusicPostToMyhome privacyAllowNearby agreementNearbyTime agreementSquareTime notificationMention botUseAgreementAcceptedAt ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{notificationEnable} = undef;
  $self->{notificationMuteExpiration} = undef;
  $self->{notificationNewMessage} = undef;
  $self->{notificationGroupInvitation} = undef;
  $self->{notificationShowMessage} = undef;
  $self->{notificationIncomingCall} = undef;
  $self->{notificationSoundMessage} = undef;
  $self->{notificationSoundGroup} = undef;
  $self->{notificationDisabledWithSub} = undef;
  $self->{privacySyncContacts} = undef;
  $self->{privacySearchByPhoneNumber} = undef;
  $self->{privacySearchByUserid} = undef;
  $self->{privacySearchByEmail} = undef;
  $self->{privacyAllowSecondaryDeviceLogin} = undef;
  $self->{privacyProfileImagePostToMyhome} = undef;
  $self->{privacyReceiveMessagesFromNotFriend} = undef;
  $self->{contactMyTicket} = undef;
  $self->{identityProvider} = undef;
  $self->{identityIdentifier} = undef;
  $self->{snsAccounts} = undef;
  $self->{phoneRegistration} = undef;
  $self->{emailConfirmationStatus} = undef;
  $self->{preferenceLocale} = undef;
  $self->{customModes} = undef;
  $self->{e2eeEnable} = undef;
  $self->{hitokotoBackupRequested} = undef;
  $self->{privacyProfileMusicPostToMyhome} = undef;
  $self->{privacyAllowNearby} = undef;
  $self->{agreementNearbyTime} = undef;
  $self->{agreementSquareTime} = undef;
  $self->{notificationMention} = undef;
  $self->{botUseAgreementAcceptedAt} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{notificationEnable}) {
      $self->{notificationEnable} = $vals->{notificationEnable};
    }
    if (defined $vals->{notificationMuteExpiration}) {
      $self->{notificationMuteExpiration} = $vals->{notificationMuteExpiration};
    }
    if (defined $vals->{notificationNewMessage}) {
      $self->{notificationNewMessage} = $vals->{notificationNewMessage};
    }
    if (defined $vals->{notificationGroupInvitation}) {
      $self->{notificationGroupInvitation} = $vals->{notificationGroupInvitation};
    }
    if (defined $vals->{notificationShowMessage}) {
      $self->{notificationShowMessage} = $vals->{notificationShowMessage};
    }
    if (defined $vals->{notificationIncomingCall}) {
      $self->{notificationIncomingCall} = $vals->{notificationIncomingCall};
    }
    if (defined $vals->{notificationSoundMessage}) {
      $self->{notificationSoundMessage} = $vals->{notificationSoundMessage};
    }
    if (defined $vals->{notificationSoundGroup}) {
      $self->{notificationSoundGroup} = $vals->{notificationSoundGroup};
    }
    if (defined $vals->{notificationDisabledWithSub}) {
      $self->{notificationDisabledWithSub} = $vals->{notificationDisabledWithSub};
    }
    if (defined $vals->{privacySyncContacts}) {
      $self->{privacySyncContacts} = $vals->{privacySyncContacts};
    }
    if (defined $vals->{privacySearchByPhoneNumber}) {
      $self->{privacySearchByPhoneNumber} = $vals->{privacySearchByPhoneNumber};
    }
    if (defined $vals->{privacySearchByUserid}) {
      $self->{privacySearchByUserid} = $vals->{privacySearchByUserid};
    }
    if (defined $vals->{privacySearchByEmail}) {
      $self->{privacySearchByEmail} = $vals->{privacySearchByEmail};
    }
    if (defined $vals->{privacyAllowSecondaryDeviceLogin}) {
      $self->{privacyAllowSecondaryDeviceLogin} = $vals->{privacyAllowSecondaryDeviceLogin};
    }
    if (defined $vals->{privacyProfileImagePostToMyhome}) {
      $self->{privacyProfileImagePostToMyhome} = $vals->{privacyProfileImagePostToMyhome};
    }
    if (defined $vals->{privacyReceiveMessagesFromNotFriend}) {
      $self->{privacyReceiveMessagesFromNotFriend} = $vals->{privacyReceiveMessagesFromNotFriend};
    }
    if (defined $vals->{contactMyTicket}) {
      $self->{contactMyTicket} = $vals->{contactMyTicket};
    }
    if (defined $vals->{identityProvider}) {
      $self->{identityProvider} = $vals->{identityProvider};
    }
    if (defined $vals->{identityIdentifier}) {
      $self->{identityIdentifier} = $vals->{identityIdentifier};
    }
    if (defined $vals->{snsAccounts}) {
      $self->{snsAccounts} = $vals->{snsAccounts};
    }
    if (defined $vals->{phoneRegistration}) {
      $self->{phoneRegistration} = $vals->{phoneRegistration};
    }
    if (defined $vals->{emailConfirmationStatus}) {
      $self->{emailConfirmationStatus} = $vals->{emailConfirmationStatus};
    }
    if (defined $vals->{preferenceLocale}) {
      $self->{preferenceLocale} = $vals->{preferenceLocale};
    }
    if (defined $vals->{customModes}) {
      $self->{customModes} = $vals->{customModes};
    }
    if (defined $vals->{e2eeEnable}) {
      $self->{e2eeEnable} = $vals->{e2eeEnable};
    }
    if (defined $vals->{hitokotoBackupRequested}) {
      $self->{hitokotoBackupRequested} = $vals->{hitokotoBackupRequested};
    }
    if (defined $vals->{privacyProfileMusicPostToMyhome}) {
      $self->{privacyProfileMusicPostToMyhome} = $vals->{privacyProfileMusicPostToMyhome};
    }
    if (defined $vals->{privacyAllowNearby}) {
      $self->{privacyAllowNearby} = $vals->{privacyAllowNearby};
    }
    if (defined $vals->{agreementNearbyTime}) {
      $self->{agreementNearbyTime} = $vals->{agreementNearbyTime};
    }
    if (defined $vals->{agreementSquareTime}) {
      $self->{agreementSquareTime} = $vals->{agreementSquareTime};
    }
    if (defined $vals->{notificationMention}) {
      $self->{notificationMention} = $vals->{notificationMention};
    }
    if (defined $vals->{botUseAgreementAcceptedAt}) {
      $self->{botUseAgreementAcceptedAt} = $vals->{botUseAgreementAcceptedAt};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Settings';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^10$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{notificationEnable});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{notificationMuteExpiration});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{notificationNewMessage});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^13$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{notificationGroupInvitation});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^14$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{notificationShowMessage});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^15$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{notificationIncomingCall});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^16$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{notificationSoundMessage});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^17$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{notificationSoundGroup});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^18$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{notificationDisabledWithSub});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^20$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{privacySyncContacts});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^21$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{privacySearchByPhoneNumber});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^22$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{privacySearchByUserid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^23$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{privacySearchByEmail});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^24$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{privacyAllowSecondaryDeviceLogin});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^25$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{privacyProfileImagePostToMyhome});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^26$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{privacyReceiveMessagesFromNotFriend});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^30$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{contactMyTicket});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^40$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{identityProvider});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^41$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{identityIdentifier});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^42$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size424 = 0;
          $self->{snsAccounts} = {};
          my $_ktype425 = 0;
          my $_vtype426 = 0;
          $xfer += $input->readMapBegin(\$_ktype425, \$_vtype426, \$_size424);
          for (my $_i428 = 0; $_i428 < $_size424; ++$_i428)
          {
            my $key429 = 0;
            my $val430 = '';
            $xfer += $input->readI32(\$key429);
            $xfer += $input->readString(\$val430);
            $self->{snsAccounts}->{$key429} = $val430;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^43$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{phoneRegistration});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^44$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{emailConfirmationStatus});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^50$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{preferenceLocale});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^60$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size431 = 0;
          $self->{customModes} = {};
          my $_ktype432 = 0;
          my $_vtype433 = 0;
          $xfer += $input->readMapBegin(\$_ktype432, \$_vtype433, \$_size431);
          for (my $_i435 = 0; $_i435 < $_size431; ++$_i435)
          {
            my $key436 = 0;
            my $val437 = '';
            $xfer += $input->readI32(\$key436);
            $xfer += $input->readString(\$val437);
            $self->{customModes}->{$key436} = $val437;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^61$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{e2eeEnable});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^62$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{hitokotoBackupRequested});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^63$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{privacyProfileMusicPostToMyhome});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^65$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{privacyAllowNearby});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^66$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{agreementNearbyTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^67$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{agreementSquareTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^68$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{notificationMention});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^69$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{botUseAgreementAcceptedAt});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Settings');
  if (defined $self->{notificationEnable}) {
    $xfer += $output->writeFieldBegin('notificationEnable', Thrift::TType::BOOL, 10);
    $xfer += $output->writeBool($self->{notificationEnable});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notificationMuteExpiration}) {
    $xfer += $output->writeFieldBegin('notificationMuteExpiration', Thrift::TType::I64, 11);
    $xfer += $output->writeI64($self->{notificationMuteExpiration});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notificationNewMessage}) {
    $xfer += $output->writeFieldBegin('notificationNewMessage', Thrift::TType::BOOL, 12);
    $xfer += $output->writeBool($self->{notificationNewMessage});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notificationGroupInvitation}) {
    $xfer += $output->writeFieldBegin('notificationGroupInvitation', Thrift::TType::BOOL, 13);
    $xfer += $output->writeBool($self->{notificationGroupInvitation});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notificationShowMessage}) {
    $xfer += $output->writeFieldBegin('notificationShowMessage', Thrift::TType::BOOL, 14);
    $xfer += $output->writeBool($self->{notificationShowMessage});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notificationIncomingCall}) {
    $xfer += $output->writeFieldBegin('notificationIncomingCall', Thrift::TType::BOOL, 15);
    $xfer += $output->writeBool($self->{notificationIncomingCall});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notificationSoundMessage}) {
    $xfer += $output->writeFieldBegin('notificationSoundMessage', Thrift::TType::STRING, 16);
    $xfer += $output->writeString($self->{notificationSoundMessage});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notificationSoundGroup}) {
    $xfer += $output->writeFieldBegin('notificationSoundGroup', Thrift::TType::STRING, 17);
    $xfer += $output->writeString($self->{notificationSoundGroup});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notificationDisabledWithSub}) {
    $xfer += $output->writeFieldBegin('notificationDisabledWithSub', Thrift::TType::BOOL, 18);
    $xfer += $output->writeBool($self->{notificationDisabledWithSub});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{privacySyncContacts}) {
    $xfer += $output->writeFieldBegin('privacySyncContacts', Thrift::TType::BOOL, 20);
    $xfer += $output->writeBool($self->{privacySyncContacts});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{privacySearchByPhoneNumber}) {
    $xfer += $output->writeFieldBegin('privacySearchByPhoneNumber', Thrift::TType::BOOL, 21);
    $xfer += $output->writeBool($self->{privacySearchByPhoneNumber});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{privacySearchByUserid}) {
    $xfer += $output->writeFieldBegin('privacySearchByUserid', Thrift::TType::BOOL, 22);
    $xfer += $output->writeBool($self->{privacySearchByUserid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{privacySearchByEmail}) {
    $xfer += $output->writeFieldBegin('privacySearchByEmail', Thrift::TType::BOOL, 23);
    $xfer += $output->writeBool($self->{privacySearchByEmail});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{privacyAllowSecondaryDeviceLogin}) {
    $xfer += $output->writeFieldBegin('privacyAllowSecondaryDeviceLogin', Thrift::TType::BOOL, 24);
    $xfer += $output->writeBool($self->{privacyAllowSecondaryDeviceLogin});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{privacyProfileImagePostToMyhome}) {
    $xfer += $output->writeFieldBegin('privacyProfileImagePostToMyhome', Thrift::TType::BOOL, 25);
    $xfer += $output->writeBool($self->{privacyProfileImagePostToMyhome});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{privacyReceiveMessagesFromNotFriend}) {
    $xfer += $output->writeFieldBegin('privacyReceiveMessagesFromNotFriend', Thrift::TType::BOOL, 26);
    $xfer += $output->writeBool($self->{privacyReceiveMessagesFromNotFriend});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{contactMyTicket}) {
    $xfer += $output->writeFieldBegin('contactMyTicket', Thrift::TType::STRING, 30);
    $xfer += $output->writeString($self->{contactMyTicket});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{identityProvider}) {
    $xfer += $output->writeFieldBegin('identityProvider', Thrift::TType::I32, 40);
    $xfer += $output->writeI32($self->{identityProvider});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{identityIdentifier}) {
    $xfer += $output->writeFieldBegin('identityIdentifier', Thrift::TType::STRING, 41);
    $xfer += $output->writeString($self->{identityIdentifier});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{snsAccounts}) {
    $xfer += $output->writeFieldBegin('snsAccounts', Thrift::TType::MAP, 42);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::I32, Thrift::TType::STRING, scalar(keys %{$self->{snsAccounts}}));
      {
        while( my ($kiter438,$viter439) = each %{$self->{snsAccounts}}) 
        {
          $xfer += $output->writeI32($kiter438);
          $xfer += $output->writeString($viter439);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{phoneRegistration}) {
    $xfer += $output->writeFieldBegin('phoneRegistration', Thrift::TType::BOOL, 43);
    $xfer += $output->writeBool($self->{phoneRegistration});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{emailConfirmationStatus}) {
    $xfer += $output->writeFieldBegin('emailConfirmationStatus', Thrift::TType::I32, 44);
    $xfer += $output->writeI32($self->{emailConfirmationStatus});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{preferenceLocale}) {
    $xfer += $output->writeFieldBegin('preferenceLocale', Thrift::TType::STRING, 50);
    $xfer += $output->writeString($self->{preferenceLocale});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{customModes}) {
    $xfer += $output->writeFieldBegin('customModes', Thrift::TType::MAP, 60);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::I32, Thrift::TType::STRING, scalar(keys %{$self->{customModes}}));
      {
        while( my ($kiter440,$viter441) = each %{$self->{customModes}}) 
        {
          $xfer += $output->writeI32($kiter440);
          $xfer += $output->writeString($viter441);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{e2eeEnable}) {
    $xfer += $output->writeFieldBegin('e2eeEnable', Thrift::TType::BOOL, 61);
    $xfer += $output->writeBool($self->{e2eeEnable});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{hitokotoBackupRequested}) {
    $xfer += $output->writeFieldBegin('hitokotoBackupRequested', Thrift::TType::BOOL, 62);
    $xfer += $output->writeBool($self->{hitokotoBackupRequested});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{privacyProfileMusicPostToMyhome}) {
    $xfer += $output->writeFieldBegin('privacyProfileMusicPostToMyhome', Thrift::TType::BOOL, 63);
    $xfer += $output->writeBool($self->{privacyProfileMusicPostToMyhome});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{privacyAllowNearby}) {
    $xfer += $output->writeFieldBegin('privacyAllowNearby', Thrift::TType::BOOL, 65);
    $xfer += $output->writeBool($self->{privacyAllowNearby});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{agreementNearbyTime}) {
    $xfer += $output->writeFieldBegin('agreementNearbyTime', Thrift::TType::I64, 66);
    $xfer += $output->writeI64($self->{agreementNearbyTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{agreementSquareTime}) {
    $xfer += $output->writeFieldBegin('agreementSquareTime', Thrift::TType::I64, 67);
    $xfer += $output->writeI64($self->{agreementSquareTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notificationMention}) {
    $xfer += $output->writeFieldBegin('notificationMention', Thrift::TType::BOOL, 68);
    $xfer += $output->writeBool($self->{notificationMention});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{botUseAgreementAcceptedAt}) {
    $xfer += $output->writeFieldBegin('botUseAgreementAcceptedAt', Thrift::TType::I64, 69);
    $xfer += $output->writeI64($self->{botUseAgreementAcceptedAt});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SimpleChannelClient;
use base qw(Class::Accessor);
SimpleChannelClient->mk_accessors( qw( applicationType applicationVersion locale ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{applicationType} = undef;
  $self->{applicationVersion} = undef;
  $self->{locale} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{applicationType}) {
      $self->{applicationType} = $vals->{applicationType};
    }
    if (defined $vals->{applicationVersion}) {
      $self->{applicationVersion} = $vals->{applicationVersion};
    }
    if (defined $vals->{locale}) {
      $self->{locale} = $vals->{locale};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SimpleChannelClient';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{applicationType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{applicationVersion});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{locale});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SimpleChannelClient');
  if (defined $self->{applicationType}) {
    $xfer += $output->writeFieldBegin('applicationType', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{applicationType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{applicationVersion}) {
    $xfer += $output->writeFieldBegin('applicationVersion', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{applicationVersion});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{locale}) {
    $xfer += $output->writeFieldBegin('locale', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{locale});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SimpleChannelContact;
use base qw(Class::Accessor);
SimpleChannelContact->mk_accessors( qw( mid displayName pictureStatus picturePath statusMessage ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{mid} = undef;
  $self->{displayName} = undef;
  $self->{pictureStatus} = undef;
  $self->{picturePath} = undef;
  $self->{statusMessage} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{mid}) {
      $self->{mid} = $vals->{mid};
    }
    if (defined $vals->{displayName}) {
      $self->{displayName} = $vals->{displayName};
    }
    if (defined $vals->{pictureStatus}) {
      $self->{pictureStatus} = $vals->{pictureStatus};
    }
    if (defined $vals->{picturePath}) {
      $self->{picturePath} = $vals->{picturePath};
    }
    if (defined $vals->{statusMessage}) {
      $self->{statusMessage} = $vals->{statusMessage};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SimpleChannelContact';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{mid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{displayName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{pictureStatus});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{picturePath});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{statusMessage});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SimpleChannelContact');
  if (defined $self->{mid}) {
    $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{mid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{displayName}) {
    $xfer += $output->writeFieldBegin('displayName', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{displayName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{pictureStatus}) {
    $xfer += $output->writeFieldBegin('pictureStatus', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{pictureStatus});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{picturePath}) {
    $xfer += $output->writeFieldBegin('picturePath', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{picturePath});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{statusMessage}) {
    $xfer += $output->writeFieldBegin('statusMessage', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{statusMessage});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SnsFriend;
use base qw(Class::Accessor);
SnsFriend->mk_accessors( qw( snsUserId snsUserName snsIdType ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{snsUserId} = undef;
  $self->{snsUserName} = undef;
  $self->{snsIdType} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{snsUserId}) {
      $self->{snsUserId} = $vals->{snsUserId};
    }
    if (defined $vals->{snsUserName}) {
      $self->{snsUserName} = $vals->{snsUserName};
    }
    if (defined $vals->{snsIdType}) {
      $self->{snsIdType} = $vals->{snsIdType};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SnsFriend';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{snsUserId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{snsUserName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{snsIdType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SnsFriend');
  if (defined $self->{snsUserId}) {
    $xfer += $output->writeFieldBegin('snsUserId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{snsUserId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{snsUserName}) {
    $xfer += $output->writeFieldBegin('snsUserName', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{snsUserName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{snsIdType}) {
    $xfer += $output->writeFieldBegin('snsIdType', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{snsIdType});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SnsFriendContactRegistration;
use base qw(Class::Accessor);
SnsFriendContactRegistration->mk_accessors( qw( contact snsIdType snsUserId ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{contact} = undef;
  $self->{snsIdType} = undef;
  $self->{snsUserId} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{contact}) {
      $self->{contact} = $vals->{contact};
    }
    if (defined $vals->{snsIdType}) {
      $self->{snsIdType} = $vals->{snsIdType};
    }
    if (defined $vals->{snsUserId}) {
      $self->{snsUserId} = $vals->{snsUserId};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SnsFriendContactRegistration';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{contact} = Contact->new();
        $xfer += $self->{contact}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{snsIdType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{snsUserId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SnsFriendContactRegistration');
  if (defined $self->{contact}) {
    $xfer += $output->writeFieldBegin('contact', Thrift::TType::STRUCT, 1);
    $xfer += $self->{contact}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{snsIdType}) {
    $xfer += $output->writeFieldBegin('snsIdType', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{snsIdType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{snsUserId}) {
    $xfer += $output->writeFieldBegin('snsUserId', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{snsUserId});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SnsFriendModification;
use base qw(Class::Accessor);
SnsFriendModification->mk_accessors( qw( type snsFriend ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{type} = undef;
  $self->{snsFriend} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{type}) {
      $self->{type} = $vals->{type};
    }
    if (defined $vals->{snsFriend}) {
      $self->{snsFriend} = $vals->{snsFriend};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SnsFriendModification';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{type});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{snsFriend} = SnsFriend->new();
        $xfer += $self->{snsFriend}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SnsFriendModification');
  if (defined $self->{type}) {
    $xfer += $output->writeFieldBegin('type', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{type});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{snsFriend}) {
    $xfer += $output->writeFieldBegin('snsFriend', Thrift::TType::STRUCT, 2);
    $xfer += $self->{snsFriend}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SnsFriends;
use base qw(Class::Accessor);
SnsFriends->mk_accessors( qw( snsFriends hasMore ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{snsFriends} = undef;
  $self->{hasMore} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{snsFriends}) {
      $self->{snsFriends} = $vals->{snsFriends};
    }
    if (defined $vals->{hasMore}) {
      $self->{hasMore} = $vals->{hasMore};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SnsFriends';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size442 = 0;
          $self->{snsFriends} = [];
          my $_etype445 = 0;
          $xfer += $input->readListBegin(\$_etype445, \$_size442);
          for (my $_i446 = 0; $_i446 < $_size442; ++$_i446)
          {
            my $elem447 = undef;
            $elem447 = SnsFriend->new();
            $xfer += $elem447->read($input);
            push(@{$self->{snsFriends}},$elem447);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{hasMore});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SnsFriends');
  if (defined $self->{snsFriends}) {
    $xfer += $output->writeFieldBegin('snsFriends', Thrift::TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{snsFriends}}));
      {
        foreach my $iter448 (@{$self->{snsFriends}}) 
        {
          $xfer += ${iter448}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{hasMore}) {
    $xfer += $output->writeFieldBegin('hasMore', Thrift::TType::BOOL, 2);
    $xfer += $output->writeBool($self->{hasMore});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SnsIdUserStatus;
use base qw(Class::Accessor);
SnsIdUserStatus->mk_accessors( qw( userExisting phoneNumberRegistered sameDevice ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{userExisting} = undef;
  $self->{phoneNumberRegistered} = undef;
  $self->{sameDevice} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{userExisting}) {
      $self->{userExisting} = $vals->{userExisting};
    }
    if (defined $vals->{phoneNumberRegistered}) {
      $self->{phoneNumberRegistered} = $vals->{phoneNumberRegistered};
    }
    if (defined $vals->{sameDevice}) {
      $self->{sameDevice} = $vals->{sameDevice};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SnsIdUserStatus';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{userExisting});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{phoneNumberRegistered});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{sameDevice});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SnsIdUserStatus');
  if (defined $self->{userExisting}) {
    $xfer += $output->writeFieldBegin('userExisting', Thrift::TType::BOOL, 1);
    $xfer += $output->writeBool($self->{userExisting});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{phoneNumberRegistered}) {
    $xfer += $output->writeFieldBegin('phoneNumberRegistered', Thrift::TType::BOOL, 2);
    $xfer += $output->writeBool($self->{phoneNumberRegistered});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{sameDevice}) {
    $xfer += $output->writeFieldBegin('sameDevice', Thrift::TType::BOOL, 3);
    $xfer += $output->writeBool($self->{sameDevice});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SnsProfile;
use base qw(Class::Accessor);
SnsProfile->mk_accessors( qw( snsUserId snsUserName email thumbnailUrl ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{snsUserId} = undef;
  $self->{snsUserName} = undef;
  $self->{email} = undef;
  $self->{thumbnailUrl} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{snsUserId}) {
      $self->{snsUserId} = $vals->{snsUserId};
    }
    if (defined $vals->{snsUserName}) {
      $self->{snsUserName} = $vals->{snsUserName};
    }
    if (defined $vals->{email}) {
      $self->{email} = $vals->{email};
    }
    if (defined $vals->{thumbnailUrl}) {
      $self->{thumbnailUrl} = $vals->{thumbnailUrl};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SnsProfile';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{snsUserId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{snsUserName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{email});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{thumbnailUrl});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SnsProfile');
  if (defined $self->{snsUserId}) {
    $xfer += $output->writeFieldBegin('snsUserId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{snsUserId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{snsUserName}) {
    $xfer += $output->writeFieldBegin('snsUserName', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{snsUserName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{email}) {
    $xfer += $output->writeFieldBegin('email', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{email});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{thumbnailUrl}) {
    $xfer += $output->writeFieldBegin('thumbnailUrl', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{thumbnailUrl});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SystemConfiguration;
use base qw(Class::Accessor);
SystemConfiguration->mk_accessors( qw( endpoint endpointSsl updateUrl c2dmAccount nniServer ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{endpoint} = undef;
  $self->{endpointSsl} = undef;
  $self->{updateUrl} = undef;
  $self->{c2dmAccount} = undef;
  $self->{nniServer} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{endpoint}) {
      $self->{endpoint} = $vals->{endpoint};
    }
    if (defined $vals->{endpointSsl}) {
      $self->{endpointSsl} = $vals->{endpointSsl};
    }
    if (defined $vals->{updateUrl}) {
      $self->{updateUrl} = $vals->{updateUrl};
    }
    if (defined $vals->{c2dmAccount}) {
      $self->{c2dmAccount} = $vals->{c2dmAccount};
    }
    if (defined $vals->{nniServer}) {
      $self->{nniServer} = $vals->{nniServer};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SystemConfiguration';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{endpoint});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{endpointSsl});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{updateUrl});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{c2dmAccount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{nniServer});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SystemConfiguration');
  if (defined $self->{endpoint}) {
    $xfer += $output->writeFieldBegin('endpoint', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{endpoint});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{endpointSsl}) {
    $xfer += $output->writeFieldBegin('endpointSsl', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{endpointSsl});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{updateUrl}) {
    $xfer += $output->writeFieldBegin('updateUrl', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{updateUrl});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{c2dmAccount}) {
    $xfer += $output->writeFieldBegin('c2dmAccount', Thrift::TType::STRING, 11);
    $xfer += $output->writeString($self->{c2dmAccount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{nniServer}) {
    $xfer += $output->writeFieldBegin('nniServer', Thrift::TType::STRING, 12);
    $xfer += $output->writeString($self->{nniServer});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Ticket;
use base qw(Class::Accessor);
Ticket->mk_accessors( qw( id expirationTime maxUseCount ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{id} = undef;
  $self->{expirationTime} = undef;
  $self->{maxUseCount} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{id}) {
      $self->{id} = $vals->{id};
    }
    if (defined $vals->{expirationTime}) {
      $self->{expirationTime} = $vals->{expirationTime};
    }
    if (defined $vals->{maxUseCount}) {
      $self->{maxUseCount} = $vals->{maxUseCount};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Ticket';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{id});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{expirationTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^21$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{maxUseCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Ticket');
  if (defined $self->{id}) {
    $xfer += $output->writeFieldBegin('id', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{id});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{expirationTime}) {
    $xfer += $output->writeFieldBegin('expirationTime', Thrift::TType::I64, 10);
    $xfer += $output->writeI64($self->{expirationTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{maxUseCount}) {
    $xfer += $output->writeFieldBegin('maxUseCount', Thrift::TType::I32, 21);
    $xfer += $output->writeI32($self->{maxUseCount});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TMessageBox;
use base qw(Class::Accessor);
TMessageBox->mk_accessors( qw( id channelId lastSeq unreadCount lastModifiedTime status midType lastMessages ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{id} = undef;
  $self->{channelId} = undef;
  $self->{lastSeq} = undef;
  $self->{unreadCount} = undef;
  $self->{lastModifiedTime} = undef;
  $self->{status} = undef;
  $self->{midType} = undef;
  $self->{lastMessages} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{id}) {
      $self->{id} = $vals->{id};
    }
    if (defined $vals->{channelId}) {
      $self->{channelId} = $vals->{channelId};
    }
    if (defined $vals->{lastSeq}) {
      $self->{lastSeq} = $vals->{lastSeq};
    }
    if (defined $vals->{unreadCount}) {
      $self->{unreadCount} = $vals->{unreadCount};
    }
    if (defined $vals->{lastModifiedTime}) {
      $self->{lastModifiedTime} = $vals->{lastModifiedTime};
    }
    if (defined $vals->{status}) {
      $self->{status} = $vals->{status};
    }
    if (defined $vals->{midType}) {
      $self->{midType} = $vals->{midType};
    }
    if (defined $vals->{lastMessages}) {
      $self->{lastMessages} = $vals->{lastMessages};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TMessageBox';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{id});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{channelId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{lastSeq});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{unreadCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{lastModifiedTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{status});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^9$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{midType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size449 = 0;
          $self->{lastMessages} = [];
          my $_etype452 = 0;
          $xfer += $input->readListBegin(\$_etype452, \$_size449);
          for (my $_i453 = 0; $_i453 < $_size449; ++$_i453)
          {
            my $elem454 = undef;
            $elem454 = Message->new();
            $xfer += $elem454->read($input);
            push(@{$self->{lastMessages}},$elem454);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TMessageBox');
  if (defined $self->{id}) {
    $xfer += $output->writeFieldBegin('id', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{id});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{channelId}) {
    $xfer += $output->writeFieldBegin('channelId', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{channelId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{lastSeq}) {
    $xfer += $output->writeFieldBegin('lastSeq', Thrift::TType::I64, 5);
    $xfer += $output->writeI64($self->{lastSeq});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{unreadCount}) {
    $xfer += $output->writeFieldBegin('unreadCount', Thrift::TType::I64, 6);
    $xfer += $output->writeI64($self->{unreadCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{lastModifiedTime}) {
    $xfer += $output->writeFieldBegin('lastModifiedTime', Thrift::TType::I64, 7);
    $xfer += $output->writeI64($self->{lastModifiedTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{status}) {
    $xfer += $output->writeFieldBegin('status', Thrift::TType::I32, 8);
    $xfer += $output->writeI32($self->{status});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{midType}) {
    $xfer += $output->writeFieldBegin('midType', Thrift::TType::I32, 9);
    $xfer += $output->writeI32($self->{midType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{lastMessages}) {
    $xfer += $output->writeFieldBegin('lastMessages', Thrift::TType::LIST, 10);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{lastMessages}}));
      {
        foreach my $iter455 (@{$self->{lastMessages}}) 
        {
          $xfer += ${iter455}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TMessageBoxWrapUp;
use base qw(Class::Accessor);
TMessageBoxWrapUp->mk_accessors( qw( messageBox name contacts pictureRevision ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{messageBox} = undef;
  $self->{name} = undef;
  $self->{contacts} = undef;
  $self->{pictureRevision} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{messageBox}) {
      $self->{messageBox} = $vals->{messageBox};
    }
    if (defined $vals->{name}) {
      $self->{name} = $vals->{name};
    }
    if (defined $vals->{contacts}) {
      $self->{contacts} = $vals->{contacts};
    }
    if (defined $vals->{pictureRevision}) {
      $self->{pictureRevision} = $vals->{pictureRevision};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TMessageBoxWrapUp';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{messageBox} = TMessageBox->new();
        $xfer += $self->{messageBox}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{name});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size456 = 0;
          $self->{contacts} = [];
          my $_etype459 = 0;
          $xfer += $input->readListBegin(\$_etype459, \$_size456);
          for (my $_i460 = 0; $_i460 < $_size456; ++$_i460)
          {
            my $elem461 = undef;
            $elem461 = Contact->new();
            $xfer += $elem461->read($input);
            push(@{$self->{contacts}},$elem461);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{pictureRevision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TMessageBoxWrapUp');
  if (defined $self->{messageBox}) {
    $xfer += $output->writeFieldBegin('messageBox', Thrift::TType::STRUCT, 1);
    $xfer += $self->{messageBox}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{name}) {
    $xfer += $output->writeFieldBegin('name', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{name});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{contacts}) {
    $xfer += $output->writeFieldBegin('contacts', Thrift::TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{contacts}}));
      {
        foreach my $iter462 (@{$self->{contacts}}) 
        {
          $xfer += ${iter462}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{pictureRevision}) {
    $xfer += $output->writeFieldBegin('pictureRevision', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{pictureRevision});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TMessageBoxWrapUpResponse;
use base qw(Class::Accessor);
TMessageBoxWrapUpResponse->mk_accessors( qw( messageBoxWrapUpList totalSize ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{messageBoxWrapUpList} = undef;
  $self->{totalSize} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{messageBoxWrapUpList}) {
      $self->{messageBoxWrapUpList} = $vals->{messageBoxWrapUpList};
    }
    if (defined $vals->{totalSize}) {
      $self->{totalSize} = $vals->{totalSize};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TMessageBoxWrapUpResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size463 = 0;
          $self->{messageBoxWrapUpList} = [];
          my $_etype466 = 0;
          $xfer += $input->readListBegin(\$_etype466, \$_size463);
          for (my $_i467 = 0; $_i467 < $_size463; ++$_i467)
          {
            my $elem468 = undef;
            $elem468 = TMessageBoxWrapUp->new();
            $xfer += $elem468->read($input);
            push(@{$self->{messageBoxWrapUpList}},$elem468);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{totalSize});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TMessageBoxWrapUpResponse');
  if (defined $self->{messageBoxWrapUpList}) {
    $xfer += $output->writeFieldBegin('messageBoxWrapUpList', Thrift::TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{messageBoxWrapUpList}}));
      {
        foreach my $iter469 (@{$self->{messageBoxWrapUpList}}) 
        {
          $xfer += ${iter469}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{totalSize}) {
    $xfer += $output->writeFieldBegin('totalSize', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{totalSize});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TMessageReadRangeEntry;
use base qw(Class::Accessor);
TMessageReadRangeEntry->mk_accessors( qw( startMessageId endMessageId startTime endTime ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{startMessageId} = undef;
  $self->{endMessageId} = undef;
  $self->{startTime} = undef;
  $self->{endTime} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{startMessageId}) {
      $self->{startMessageId} = $vals->{startMessageId};
    }
    if (defined $vals->{endMessageId}) {
      $self->{endMessageId} = $vals->{endMessageId};
    }
    if (defined $vals->{startTime}) {
      $self->{startTime} = $vals->{startTime};
    }
    if (defined $vals->{endTime}) {
      $self->{endTime} = $vals->{endTime};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TMessageReadRangeEntry';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{startMessageId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{endMessageId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{startTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{endTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TMessageReadRangeEntry');
  if (defined $self->{startMessageId}) {
    $xfer += $output->writeFieldBegin('startMessageId', Thrift::TType::I64, 1);
    $xfer += $output->writeI64($self->{startMessageId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{endMessageId}) {
    $xfer += $output->writeFieldBegin('endMessageId', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{endMessageId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{startTime}) {
    $xfer += $output->writeFieldBegin('startTime', Thrift::TType::I64, 3);
    $xfer += $output->writeI64($self->{startTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{endTime}) {
    $xfer += $output->writeFieldBegin('endTime', Thrift::TType::I64, 4);
    $xfer += $output->writeI64($self->{endTime});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TMessageReadRange;
use base qw(Class::Accessor);
TMessageReadRange->mk_accessors( qw( chatId ranges ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{chatId} = undef;
  $self->{ranges} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{chatId}) {
      $self->{chatId} = $vals->{chatId};
    }
    if (defined $vals->{ranges}) {
      $self->{ranges} = $vals->{ranges};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TMessageReadRange';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{chatId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size470 = 0;
          $self->{ranges} = {};
          my $_ktype471 = 0;
          my $_vtype472 = 0;
          $xfer += $input->readMapBegin(\$_ktype471, \$_vtype472, \$_size470);
          for (my $_i474 = 0; $_i474 < $_size470; ++$_i474)
          {
            my $key475 = '';
            my $val476 = [];
            $xfer += $input->readString(\$key475);
            {
              my $_size477 = 0;
              $val476 = [];
              my $_etype480 = 0;
              $xfer += $input->readListBegin(\$_etype480, \$_size477);
              for (my $_i481 = 0; $_i481 < $_size477; ++$_i481)
              {
                my $elem482 = undef;
                $elem482 = TMessageReadRangeEntry->new();
                $xfer += $elem482->read($input);
                push(@{$val476},$elem482);
              }
              $xfer += $input->readListEnd();
            }
            $self->{ranges}->{$key475} = $val476;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TMessageReadRange');
  if (defined $self->{chatId}) {
    $xfer += $output->writeFieldBegin('chatId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{chatId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ranges}) {
    $xfer += $output->writeFieldBegin('ranges', Thrift::TType::MAP, 2);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::LIST, scalar(keys %{$self->{ranges}}));
      {
        while( my ($kiter483,$viter484) = each %{$self->{ranges}}) 
        {
          $xfer += $output->writeString($kiter483);
          {
            $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{${viter484}}));
            {
              foreach my $iter485 (@{${viter484}}) 
              {
                $xfer += ${iter485}->write($output);
              }
            }
            $xfer += $output->writeListEnd();
          }
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ChatRoomAnnouncementContents;
use base qw(Class::Accessor);
ChatRoomAnnouncementContents->mk_accessors( qw( displayFields text link thumbnail ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{displayFields} = undef;
  $self->{text} = undef;
  $self->{link} = undef;
  $self->{thumbnail} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{displayFields}) {
      $self->{displayFields} = $vals->{displayFields};
    }
    if (defined $vals->{text}) {
      $self->{text} = $vals->{text};
    }
    if (defined $vals->{link}) {
      $self->{link} = $vals->{link};
    }
    if (defined $vals->{thumbnail}) {
      $self->{thumbnail} = $vals->{thumbnail};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ChatRoomAnnouncementContents';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{displayFields});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{text});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{link});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{thumbnail});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ChatRoomAnnouncementContents');
  if (defined $self->{displayFields}) {
    $xfer += $output->writeFieldBegin('displayFields', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{displayFields});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{text}) {
    $xfer += $output->writeFieldBegin('text', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{text});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{link}) {
    $xfer += $output->writeFieldBegin('link', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{link});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{thumbnail}) {
    $xfer += $output->writeFieldBegin('thumbnail', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{thumbnail});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ChatRoomAnnouncement;
use base qw(Class::Accessor);
ChatRoomAnnouncement->mk_accessors( qw( announcementSeq type contents creatorMid createdTime ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{announcementSeq} = undef;
  $self->{type} = undef;
  $self->{contents} = undef;
  $self->{creatorMid} = undef;
  $self->{createdTime} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{announcementSeq}) {
      $self->{announcementSeq} = $vals->{announcementSeq};
    }
    if (defined $vals->{type}) {
      $self->{type} = $vals->{type};
    }
    if (defined $vals->{contents}) {
      $self->{contents} = $vals->{contents};
    }
    if (defined $vals->{creatorMid}) {
      $self->{creatorMid} = $vals->{creatorMid};
    }
    if (defined $vals->{createdTime}) {
      $self->{createdTime} = $vals->{createdTime};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ChatRoomAnnouncement';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{announcementSeq});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{type});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{contents} = ChatRoomAnnouncementContents->new();
        $xfer += $self->{contents}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{creatorMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{createdTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ChatRoomAnnouncement');
  if (defined $self->{announcementSeq}) {
    $xfer += $output->writeFieldBegin('announcementSeq', Thrift::TType::I64, 1);
    $xfer += $output->writeI64($self->{announcementSeq});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type}) {
    $xfer += $output->writeFieldBegin('type', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{type});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{contents}) {
    $xfer += $output->writeFieldBegin('contents', Thrift::TType::STRUCT, 3);
    $xfer += $self->{contents}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{creatorMid}) {
    $xfer += $output->writeFieldBegin('creatorMid', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{creatorMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{createdTime}) {
    $xfer += $output->writeFieldBegin('createdTime', Thrift::TType::I64, 5);
    $xfer += $output->writeI64($self->{createdTime});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ErrorExtraInfo;
use base qw(Class::Accessor);
ErrorExtraInfo->mk_accessors( qw( preconditionFailedExtraInfo ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{preconditionFailedExtraInfo} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{preconditionFailedExtraInfo}) {
      $self->{preconditionFailedExtraInfo} = $vals->{preconditionFailedExtraInfo};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ErrorExtraInfo';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{preconditionFailedExtraInfo});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ErrorExtraInfo');
  if (defined $self->{preconditionFailedExtraInfo}) {
    $xfer += $output->writeFieldBegin('preconditionFailedExtraInfo', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{preconditionFailedExtraInfo});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SyncRelations;
use base qw(Class::Accessor);
SyncRelations->mk_accessors( qw( syncAll syncParamContact syncParamMid ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{syncAll} = undef;
  $self->{syncParamContact} = undef;
  $self->{syncParamMid} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{syncAll}) {
      $self->{syncAll} = $vals->{syncAll};
    }
    if (defined $vals->{syncParamContact}) {
      $self->{syncParamContact} = $vals->{syncParamContact};
    }
    if (defined $vals->{syncParamMid}) {
      $self->{syncParamMid} = $vals->{syncParamMid};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SyncRelations';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{syncAll});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size486 = 0;
          $self->{syncParamContact} = [];
          my $_etype489 = 0;
          $xfer += $input->readListBegin(\$_etype489, \$_size486);
          for (my $_i490 = 0; $_i490 < $_size486; ++$_i490)
          {
            my $elem491 = undef;
            $elem491 = SyncParamContact->new();
            $xfer += $elem491->read($input);
            push(@{$self->{syncParamContact}},$elem491);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size492 = 0;
          $self->{syncParamMid} = [];
          my $_etype495 = 0;
          $xfer += $input->readListBegin(\$_etype495, \$_size492);
          for (my $_i496 = 0; $_i496 < $_size492; ++$_i496)
          {
            my $elem497 = undef;
            $elem497 = SyncParamMid->new();
            $xfer += $elem497->read($input);
            push(@{$self->{syncParamMid}},$elem497);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SyncRelations');
  if (defined $self->{syncAll}) {
    $xfer += $output->writeFieldBegin('syncAll', Thrift::TType::BOOL, 1);
    $xfer += $output->writeBool($self->{syncAll});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{syncParamContact}) {
    $xfer += $output->writeFieldBegin('syncParamContact', Thrift::TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{syncParamContact}}));
      {
        foreach my $iter498 (@{$self->{syncParamContact}}) 
        {
          $xfer += ${iter498}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{syncParamMid}) {
    $xfer += $output->writeFieldBegin('syncParamMid', Thrift::TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{syncParamMid}}));
      {
        foreach my $iter499 (@{$self->{syncParamMid}}) 
        {
          $xfer += ${iter499}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SyncScope;
use base qw(Class::Accessor);
SyncScope->mk_accessors( qw( syncProfile syncSettings syncSticker syncThemeShop contact group room chat ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{syncProfile} = undef;
  $self->{syncSettings} = undef;
  $self->{syncSticker} = undef;
  $self->{syncThemeShop} = undef;
  $self->{contact} = undef;
  $self->{group} = undef;
  $self->{room} = undef;
  $self->{chat} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{syncProfile}) {
      $self->{syncProfile} = $vals->{syncProfile};
    }
    if (defined $vals->{syncSettings}) {
      $self->{syncSettings} = $vals->{syncSettings};
    }
    if (defined $vals->{syncSticker}) {
      $self->{syncSticker} = $vals->{syncSticker};
    }
    if (defined $vals->{syncThemeShop}) {
      $self->{syncThemeShop} = $vals->{syncThemeShop};
    }
    if (defined $vals->{contact}) {
      $self->{contact} = $vals->{contact};
    }
    if (defined $vals->{group}) {
      $self->{group} = $vals->{group};
    }
    if (defined $vals->{room}) {
      $self->{room} = $vals->{room};
    }
    if (defined $vals->{chat}) {
      $self->{chat} = $vals->{chat};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SyncScope';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{syncProfile});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{syncSettings});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{syncSticker});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{syncThemeShop});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{contact} = SyncRelations->new();
        $xfer += $self->{contact}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{group} = SyncRelations->new();
        $xfer += $self->{group}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{room} = SyncRelations->new();
        $xfer += $self->{room}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^13$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{chat} = SyncRelations->new();
        $xfer += $self->{chat}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SyncScope');
  if (defined $self->{syncProfile}) {
    $xfer += $output->writeFieldBegin('syncProfile', Thrift::TType::BOOL, 1);
    $xfer += $output->writeBool($self->{syncProfile});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{syncSettings}) {
    $xfer += $output->writeFieldBegin('syncSettings', Thrift::TType::BOOL, 2);
    $xfer += $output->writeBool($self->{syncSettings});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{syncSticker}) {
    $xfer += $output->writeFieldBegin('syncSticker', Thrift::TType::BOOL, 3);
    $xfer += $output->writeBool($self->{syncSticker});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{syncThemeShop}) {
    $xfer += $output->writeFieldBegin('syncThemeShop', Thrift::TType::BOOL, 4);
    $xfer += $output->writeBool($self->{syncThemeShop});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{contact}) {
    $xfer += $output->writeFieldBegin('contact', Thrift::TType::STRUCT, 10);
    $xfer += $self->{contact}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{group}) {
    $xfer += $output->writeFieldBegin('group', Thrift::TType::STRUCT, 11);
    $xfer += $self->{group}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{room}) {
    $xfer += $output->writeFieldBegin('room', Thrift::TType::STRUCT, 12);
    $xfer += $self->{room}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{chat}) {
    $xfer += $output->writeFieldBegin('chat', Thrift::TType::STRUCT, 13);
    $xfer += $self->{chat}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package JoinSquareResponse;
use base qw(Class::Accessor);
JoinSquareResponse->mk_accessors( qw( square squareAuthority squareStatus squareMember squareFeatureSet noteStatus ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{square} = undef;
  $self->{squareAuthority} = undef;
  $self->{squareStatus} = undef;
  $self->{squareMember} = undef;
  $self->{squareFeatureSet} = undef;
  $self->{noteStatus} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{square}) {
      $self->{square} = $vals->{square};
    }
    if (defined $vals->{squareAuthority}) {
      $self->{squareAuthority} = $vals->{squareAuthority};
    }
    if (defined $vals->{squareStatus}) {
      $self->{squareStatus} = $vals->{squareStatus};
    }
    if (defined $vals->{squareMember}) {
      $self->{squareMember} = $vals->{squareMember};
    }
    if (defined $vals->{squareFeatureSet}) {
      $self->{squareFeatureSet} = $vals->{squareFeatureSet};
    }
    if (defined $vals->{noteStatus}) {
      $self->{noteStatus} = $vals->{noteStatus};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'JoinSquareResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{square} = Square->new();
        $xfer += $self->{square}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareAuthority} = SquareAuthority->new();
        $xfer += $self->{squareAuthority}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareStatus} = SquareStatus->new();
        $xfer += $self->{squareStatus}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareMember} = SquareMember->new();
        $xfer += $self->{squareMember}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareFeatureSet} = SquareFeatureSet->new();
        $xfer += $self->{squareFeatureSet}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{noteStatus} = NoteStatus->new();
        $xfer += $self->{noteStatus}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('JoinSquareResponse');
  if (defined $self->{square}) {
    $xfer += $output->writeFieldBegin('square', Thrift::TType::STRUCT, 1);
    $xfer += $self->{square}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareAuthority}) {
    $xfer += $output->writeFieldBegin('squareAuthority', Thrift::TType::STRUCT, 2);
    $xfer += $self->{squareAuthority}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareStatus}) {
    $xfer += $output->writeFieldBegin('squareStatus', Thrift::TType::STRUCT, 3);
    $xfer += $self->{squareStatus}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareMember}) {
    $xfer += $output->writeFieldBegin('squareMember', Thrift::TType::STRUCT, 4);
    $xfer += $self->{squareMember}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareFeatureSet}) {
    $xfer += $output->writeFieldBegin('squareFeatureSet', Thrift::TType::STRUCT, 5);
    $xfer += $self->{squareFeatureSet}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{noteStatus}) {
    $xfer += $output->writeFieldBegin('noteStatus', Thrift::TType::STRUCT, 6);
    $xfer += $self->{noteStatus}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package JoinSquareRequest;
use base qw(Class::Accessor);
JoinSquareRequest->mk_accessors( qw( squareMid member ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareMid} = undef;
  $self->{member} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareMid}) {
      $self->{squareMid} = $vals->{squareMid};
    }
    if (defined $vals->{member}) {
      $self->{member} = $vals->{member};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'JoinSquareRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{member} = SquareMember->new();
        $xfer += $self->{member}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('JoinSquareRequest');
  if (defined $self->{squareMid}) {
    $xfer += $output->writeFieldBegin('squareMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{member}) {
    $xfer += $output->writeFieldBegin('member', Thrift::TType::STRUCT, 3);
    $xfer += $self->{member}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package JoinSquareChatResponse;
use base qw(Class::Accessor);
JoinSquareChatResponse->mk_accessors( qw( squareChat squareChatStatus squareChatMember ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareChat} = undef;
  $self->{squareChatStatus} = undef;
  $self->{squareChatMember} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareChat}) {
      $self->{squareChat} = $vals->{squareChat};
    }
    if (defined $vals->{squareChatStatus}) {
      $self->{squareChatStatus} = $vals->{squareChatStatus};
    }
    if (defined $vals->{squareChatMember}) {
      $self->{squareChatMember} = $vals->{squareChatMember};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'JoinSquareChatResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareChat} = SquareChat->new();
        $xfer += $self->{squareChat}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareChatStatus} = SquareChatStatus->new();
        $xfer += $self->{squareChatStatus}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareChatMember} = SquareChatMember->new();
        $xfer += $self->{squareChatMember}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('JoinSquareChatResponse');
  if (defined $self->{squareChat}) {
    $xfer += $output->writeFieldBegin('squareChat', Thrift::TType::STRUCT, 1);
    $xfer += $self->{squareChat}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareChatStatus}) {
    $xfer += $output->writeFieldBegin('squareChatStatus', Thrift::TType::STRUCT, 2);
    $xfer += $self->{squareChatStatus}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareChatMember}) {
    $xfer += $output->writeFieldBegin('squareChatMember', Thrift::TType::STRUCT, 3);
    $xfer += $self->{squareChatMember}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package JoinSquareChatRequest;
use base qw(Class::Accessor);
JoinSquareChatRequest->mk_accessors( qw( squareChatMid ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareChatMid} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'JoinSquareChatRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('JoinSquareChatRequest');
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SendMessageResponse;
use base qw(Class::Accessor);
SendMessageResponse->mk_accessors( qw( createdSquareMessage ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{createdSquareMessage} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{createdSquareMessage}) {
      $self->{createdSquareMessage} = $vals->{createdSquareMessage};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SendMessageResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{createdSquareMessage} = SquareMessage->new();
        $xfer += $self->{createdSquareMessage}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SendMessageResponse');
  if (defined $self->{createdSquareMessage}) {
    $xfer += $output->writeFieldBegin('createdSquareMessage', Thrift::TType::STRUCT, 1);
    $xfer += $self->{createdSquareMessage}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SendMessageRequest;
use base qw(Class::Accessor);
SendMessageRequest->mk_accessors( qw( reqSeq squareChatMid squareMessage ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{reqSeq} = undef;
  $self->{squareChatMid} = undef;
  $self->{squareMessage} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{reqSeq}) {
      $self->{reqSeq} = $vals->{reqSeq};
    }
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
    if (defined $vals->{squareMessage}) {
      $self->{squareMessage} = $vals->{squareMessage};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SendMessageRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{reqSeq});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareMessage} = SquareMessage->new();
        $xfer += $self->{squareMessage}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SendMessageRequest');
  if (defined $self->{reqSeq}) {
    $xfer += $output->writeFieldBegin('reqSeq', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{reqSeq});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareMessage}) {
    $xfer += $output->writeFieldBegin('squareMessage', Thrift::TType::STRUCT, 3);
    $xfer += $self->{squareMessage}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package MarkAsReadRequest;
use base qw(Class::Accessor);
MarkAsReadRequest->mk_accessors( qw( squareChatMid messageId ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareChatMid} = undef;
  $self->{messageId} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
    if (defined $vals->{messageId}) {
      $self->{messageId} = $vals->{messageId};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'MarkAsReadRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{messageId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('MarkAsReadRequest');
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{messageId}) {
    $xfer += $output->writeFieldBegin('messageId', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{messageId});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package MarkAsReadResponse;
use base qw(Class::Accessor);

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  return bless ($self, $classname);
}

sub getName {
  return 'MarkAsReadResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('MarkAsReadResponse');
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SubscriptionState;
use base qw(Class::Accessor);
SubscriptionState->mk_accessors( qw( subscriptionId ttlMillis ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{subscriptionId} = undef;
  $self->{ttlMillis} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{subscriptionId}) {
      $self->{subscriptionId} = $vals->{subscriptionId};
    }
    if (defined $vals->{ttlMillis}) {
      $self->{ttlMillis} = $vals->{ttlMillis};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SubscriptionState';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{subscriptionId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{ttlMillis});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SubscriptionState');
  if (defined $self->{subscriptionId}) {
    $xfer += $output->writeFieldBegin('subscriptionId', Thrift::TType::I64, 1);
    $xfer += $output->writeI64($self->{subscriptionId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ttlMillis}) {
    $xfer += $output->writeFieldBegin('ttlMillis', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{ttlMillis});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ApproveSquareMembersResponse;
use base qw(Class::Accessor);
ApproveSquareMembersResponse->mk_accessors( qw( approvedMembers status ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{approvedMembers} = undef;
  $self->{status} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{approvedMembers}) {
      $self->{approvedMembers} = $vals->{approvedMembers};
    }
    if (defined $vals->{status}) {
      $self->{status} = $vals->{status};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ApproveSquareMembersResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size500 = 0;
          $self->{approvedMembers} = [];
          my $_etype503 = 0;
          $xfer += $input->readListBegin(\$_etype503, \$_size500);
          for (my $_i504 = 0; $_i504 < $_size500; ++$_i504)
          {
            my $elem505 = undef;
            $elem505 = SquareMember->new();
            $xfer += $elem505->read($input);
            push(@{$self->{approvedMembers}},$elem505);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{status} = SquareStatus->new();
        $xfer += $self->{status}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ApproveSquareMembersResponse');
  if (defined $self->{approvedMembers}) {
    $xfer += $output->writeFieldBegin('approvedMembers', Thrift::TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{approvedMembers}}));
      {
        foreach my $iter506 (@{$self->{approvedMembers}}) 
        {
          $xfer += ${iter506}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{status}) {
    $xfer += $output->writeFieldBegin('status', Thrift::TType::STRUCT, 2);
    $xfer += $self->{status}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ApproveSquareMembersRequest;
use base qw(Class::Accessor);
ApproveSquareMembersRequest->mk_accessors( qw( squareMid requestedMemberMids ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareMid} = undef;
  $self->{requestedMemberMids} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareMid}) {
      $self->{squareMid} = $vals->{squareMid};
    }
    if (defined $vals->{requestedMemberMids}) {
      $self->{requestedMemberMids} = $vals->{requestedMemberMids};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ApproveSquareMembersRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size507 = 0;
          $self->{requestedMemberMids} = [];
          my $_etype510 = 0;
          $xfer += $input->readListBegin(\$_etype510, \$_size507);
          for (my $_i511 = 0; $_i511 < $_size507; ++$_i511)
          {
            my $elem512 = undef;
            $xfer += $input->readString(\$elem512);
            push(@{$self->{requestedMemberMids}},$elem512);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ApproveSquareMembersRequest');
  if (defined $self->{squareMid}) {
    $xfer += $output->writeFieldBegin('squareMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{requestedMemberMids}) {
    $xfer += $output->writeFieldBegin('requestedMemberMids', Thrift::TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{requestedMemberMids}}));
      {
        foreach my $iter513 (@{$self->{requestedMemberMids}}) 
        {
          $xfer += $output->writeString($iter513);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package CreateSquareChatResponse;
use base qw(Class::Accessor);
CreateSquareChatResponse->mk_accessors( qw( squareChat squareChatStatus squareChatMember ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareChat} = undef;
  $self->{squareChatStatus} = undef;
  $self->{squareChatMember} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareChat}) {
      $self->{squareChat} = $vals->{squareChat};
    }
    if (defined $vals->{squareChatStatus}) {
      $self->{squareChatStatus} = $vals->{squareChatStatus};
    }
    if (defined $vals->{squareChatMember}) {
      $self->{squareChatMember} = $vals->{squareChatMember};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'CreateSquareChatResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareChat} = SquareChat->new();
        $xfer += $self->{squareChat}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareChatStatus} = SquareChatStatus->new();
        $xfer += $self->{squareChatStatus}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareChatMember} = SquareChatMember->new();
        $xfer += $self->{squareChatMember}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('CreateSquareChatResponse');
  if (defined $self->{squareChat}) {
    $xfer += $output->writeFieldBegin('squareChat', Thrift::TType::STRUCT, 1);
    $xfer += $self->{squareChat}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareChatStatus}) {
    $xfer += $output->writeFieldBegin('squareChatStatus', Thrift::TType::STRUCT, 2);
    $xfer += $self->{squareChatStatus}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareChatMember}) {
    $xfer += $output->writeFieldBegin('squareChatMember', Thrift::TType::STRUCT, 3);
    $xfer += $self->{squareChatMember}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package CreateSquareChatRequest;
use base qw(Class::Accessor);
CreateSquareChatRequest->mk_accessors( qw( reqSeq squareChat squareMemberMids ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{reqSeq} = undef;
  $self->{squareChat} = undef;
  $self->{squareMemberMids} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{reqSeq}) {
      $self->{reqSeq} = $vals->{reqSeq};
    }
    if (defined $vals->{squareChat}) {
      $self->{squareChat} = $vals->{squareChat};
    }
    if (defined $vals->{squareMemberMids}) {
      $self->{squareMemberMids} = $vals->{squareMemberMids};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'CreateSquareChatRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{reqSeq});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareChat} = SquareChat->new();
        $xfer += $self->{squareChat}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size514 = 0;
          $self->{squareMemberMids} = [];
          my $_etype517 = 0;
          $xfer += $input->readListBegin(\$_etype517, \$_size514);
          for (my $_i518 = 0; $_i518 < $_size514; ++$_i518)
          {
            my $elem519 = undef;
            $xfer += $input->readString(\$elem519);
            push(@{$self->{squareMemberMids}},$elem519);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('CreateSquareChatRequest');
  if (defined $self->{reqSeq}) {
    $xfer += $output->writeFieldBegin('reqSeq', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{reqSeq});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareChat}) {
    $xfer += $output->writeFieldBegin('squareChat', Thrift::TType::STRUCT, 2);
    $xfer += $self->{squareChat}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareMemberMids}) {
    $xfer += $output->writeFieldBegin('squareMemberMids', Thrift::TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{squareMemberMids}}));
      {
        foreach my $iter520 (@{$self->{squareMemberMids}}) 
        {
          $xfer += $output->writeString($iter520);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package CreateSquareResponse;
use base qw(Class::Accessor);
CreateSquareResponse->mk_accessors( qw( square creator authority status ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{square} = undef;
  $self->{creator} = undef;
  $self->{authority} = undef;
  $self->{status} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{square}) {
      $self->{square} = $vals->{square};
    }
    if (defined $vals->{creator}) {
      $self->{creator} = $vals->{creator};
    }
    if (defined $vals->{authority}) {
      $self->{authority} = $vals->{authority};
    }
    if (defined $vals->{status}) {
      $self->{status} = $vals->{status};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'CreateSquareResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{square} = Square->new();
        $xfer += $self->{square}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{creator} = SquareMember->new();
        $xfer += $self->{creator}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{authority} = SquareAuthority->new();
        $xfer += $self->{authority}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{status} = SquareStatus->new();
        $xfer += $self->{status}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('CreateSquareResponse');
  if (defined $self->{square}) {
    $xfer += $output->writeFieldBegin('square', Thrift::TType::STRUCT, 1);
    $xfer += $self->{square}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{creator}) {
    $xfer += $output->writeFieldBegin('creator', Thrift::TType::STRUCT, 2);
    $xfer += $self->{creator}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authority}) {
    $xfer += $output->writeFieldBegin('authority', Thrift::TType::STRUCT, 3);
    $xfer += $self->{authority}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{status}) {
    $xfer += $output->writeFieldBegin('status', Thrift::TType::STRUCT, 4);
    $xfer += $self->{status}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package CreateSquareRequest;
use base qw(Class::Accessor);
CreateSquareRequest->mk_accessors( qw( reqSeq square creator ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{reqSeq} = undef;
  $self->{square} = undef;
  $self->{creator} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{reqSeq}) {
      $self->{reqSeq} = $vals->{reqSeq};
    }
    if (defined $vals->{square}) {
      $self->{square} = $vals->{square};
    }
    if (defined $vals->{creator}) {
      $self->{creator} = $vals->{creator};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'CreateSquareRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{reqSeq});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{square} = Square->new();
        $xfer += $self->{square}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{creator} = SquareMember->new();
        $xfer += $self->{creator}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('CreateSquareRequest');
  if (defined $self->{reqSeq}) {
    $xfer += $output->writeFieldBegin('reqSeq', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{reqSeq});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{square}) {
    $xfer += $output->writeFieldBegin('square', Thrift::TType::STRUCT, 2);
    $xfer += $self->{square}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{creator}) {
    $xfer += $output->writeFieldBegin('creator', Thrift::TType::STRUCT, 3);
    $xfer += $self->{creator}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DeleteSquareResponse;
use base qw(Class::Accessor);

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  return bless ($self, $classname);
}

sub getName {
  return 'DeleteSquareResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('DeleteSquareResponse');
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DeleteSquareRequest;
use base qw(Class::Accessor);
DeleteSquareRequest->mk_accessors( qw( mid revision ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{mid} = undef;
  $self->{revision} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{mid}) {
      $self->{mid} = $vals->{mid};
    }
    if (defined $vals->{revision}) {
      $self->{revision} = $vals->{revision};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'DeleteSquareRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{mid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{revision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('DeleteSquareRequest');
  if (defined $self->{mid}) {
    $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{mid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{revision}) {
    $xfer += $output->writeFieldBegin('revision', Thrift::TType::I64, 3);
    $xfer += $output->writeI64($self->{revision});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DestroyMessageResponse;
use base qw(Class::Accessor);

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  return bless ($self, $classname);
}

sub getName {
  return 'DestroyMessageResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('DestroyMessageResponse');
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DestroyMessageRequest;
use base qw(Class::Accessor);
DestroyMessageRequest->mk_accessors( qw( squareChatMid messageId ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareChatMid} = undef;
  $self->{messageId} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
    if (defined $vals->{messageId}) {
      $self->{messageId} = $vals->{messageId};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'DestroyMessageRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{messageId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('DestroyMessageRequest');
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{messageId}) {
    $xfer += $output->writeFieldBegin('messageId', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{messageId});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GetSquareChatMembersRequest;
use base qw(Class::Accessor);
GetSquareChatMembersRequest->mk_accessors( qw( squareChatMid continuationToken limit ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareChatMid} = undef;
  $self->{continuationToken} = undef;
  $self->{limit} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
    if (defined $vals->{continuationToken}) {
      $self->{continuationToken} = $vals->{continuationToken};
    }
    if (defined $vals->{limit}) {
      $self->{limit} = $vals->{limit};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetSquareChatMembersRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{continuationToken});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{limit});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetSquareChatMembersRequest');
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{continuationToken}) {
    $xfer += $output->writeFieldBegin('continuationToken', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{continuationToken});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{limit}) {
    $xfer += $output->writeFieldBegin('limit', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{limit});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GetSquareChatMembersResponse;
use base qw(Class::Accessor);
GetSquareChatMembersResponse->mk_accessors( qw( squareChatMembers continuationToken ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareChatMembers} = undef;
  $self->{continuationToken} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareChatMembers}) {
      $self->{squareChatMembers} = $vals->{squareChatMembers};
    }
    if (defined $vals->{continuationToken}) {
      $self->{continuationToken} = $vals->{continuationToken};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetSquareChatMembersResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareChatMembers} = SquareMember->new();
        $xfer += $self->{squareChatMembers}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{continuationToken});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetSquareChatMembersResponse');
  if (defined $self->{squareChatMembers}) {
    $xfer += $output->writeFieldBegin('squareChatMembers', Thrift::TType::STRUCT, 1);
    $xfer += $self->{squareChatMembers}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{continuationToken}) {
    $xfer += $output->writeFieldBegin('continuationToken', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{continuationToken});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GetSquareChatStatusRequest;
use base qw(Class::Accessor);
GetSquareChatStatusRequest->mk_accessors( qw( squareChatMid ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareChatMid} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetSquareChatStatusRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetSquareChatStatusRequest');
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GetSquareChatStatusResponse;
use base qw(Class::Accessor);
GetSquareChatStatusResponse->mk_accessors( qw( chatStatus ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{chatStatus} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{chatStatus}) {
      $self->{chatStatus} = $vals->{chatStatus};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetSquareChatStatusResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{chatStatus} = SquareChatStatus->new();
        $xfer += $self->{chatStatus}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetSquareChatStatusResponse');
  if (defined $self->{chatStatus}) {
    $xfer += $output->writeFieldBegin('chatStatus', Thrift::TType::STRUCT, 1);
    $xfer += $self->{chatStatus}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GetSquareChatRequest;
use base qw(Class::Accessor);
GetSquareChatRequest->mk_accessors( qw( squareChatMid ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareChatMid} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetSquareChatRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetSquareChatRequest');
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GetSquareChatResponse;
use base qw(Class::Accessor);
GetSquareChatResponse->mk_accessors( qw( squareChat squareChatMember squareChatStatus ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareChat} = undef;
  $self->{squareChatMember} = undef;
  $self->{squareChatStatus} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareChat}) {
      $self->{squareChat} = $vals->{squareChat};
    }
    if (defined $vals->{squareChatMember}) {
      $self->{squareChatMember} = $vals->{squareChatMember};
    }
    if (defined $vals->{squareChatStatus}) {
      $self->{squareChatStatus} = $vals->{squareChatStatus};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetSquareChatResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareChat} = SquareChat->new();
        $xfer += $self->{squareChat}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareChatMember} = SquareChatMember->new();
        $xfer += $self->{squareChatMember}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareChatStatus} = SquareChatStatus->new();
        $xfer += $self->{squareChatStatus}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetSquareChatResponse');
  if (defined $self->{squareChat}) {
    $xfer += $output->writeFieldBegin('squareChat', Thrift::TType::STRUCT, 1);
    $xfer += $self->{squareChat}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareChatMember}) {
    $xfer += $output->writeFieldBegin('squareChatMember', Thrift::TType::STRUCT, 2);
    $xfer += $self->{squareChatMember}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareChatStatus}) {
    $xfer += $output->writeFieldBegin('squareChatStatus', Thrift::TType::STRUCT, 3);
    $xfer += $self->{squareChatStatus}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GetSquareAuthorityRequest;
use base qw(Class::Accessor);
GetSquareAuthorityRequest->mk_accessors( qw( squareMid ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareMid} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareMid}) {
      $self->{squareMid} = $vals->{squareMid};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetSquareAuthorityRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetSquareAuthorityRequest');
  if (defined $self->{squareMid}) {
    $xfer += $output->writeFieldBegin('squareMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareMid});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GetSquareAuthorityResponse;
use base qw(Class::Accessor);
GetSquareAuthorityResponse->mk_accessors( qw( authority ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{authority} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{authority}) {
      $self->{authority} = $vals->{authority};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetSquareAuthorityResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{authority} = SquareAuthority->new();
        $xfer += $self->{authority}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetSquareAuthorityResponse');
  if (defined $self->{authority}) {
    $xfer += $output->writeFieldBegin('authority', Thrift::TType::STRUCT, 1);
    $xfer += $self->{authority}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GetJoinedSquaresRequest;
use base qw(Class::Accessor);
GetJoinedSquaresRequest->mk_accessors( qw( continuationToken limit ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{continuationToken} = undef;
  $self->{limit} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{continuationToken}) {
      $self->{continuationToken} = $vals->{continuationToken};
    }
    if (defined $vals->{limit}) {
      $self->{limit} = $vals->{limit};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetJoinedSquaresRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{continuationToken});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{limit});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetJoinedSquaresRequest');
  if (defined $self->{continuationToken}) {
    $xfer += $output->writeFieldBegin('continuationToken', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{continuationToken});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{limit}) {
    $xfer += $output->writeFieldBegin('limit', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{limit});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GetJoinedSquaresResponse;
use base qw(Class::Accessor);
GetJoinedSquaresResponse->mk_accessors( qw( squares members authorities statuses continuationToken noteStatuses ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squares} = undef;
  $self->{members} = undef;
  $self->{authorities} = undef;
  $self->{statuses} = undef;
  $self->{continuationToken} = undef;
  $self->{noteStatuses} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squares}) {
      $self->{squares} = $vals->{squares};
    }
    if (defined $vals->{members}) {
      $self->{members} = $vals->{members};
    }
    if (defined $vals->{authorities}) {
      $self->{authorities} = $vals->{authorities};
    }
    if (defined $vals->{statuses}) {
      $self->{statuses} = $vals->{statuses};
    }
    if (defined $vals->{continuationToken}) {
      $self->{continuationToken} = $vals->{continuationToken};
    }
    if (defined $vals->{noteStatuses}) {
      $self->{noteStatuses} = $vals->{noteStatuses};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetJoinedSquaresResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size521 = 0;
          $self->{squares} = [];
          my $_etype524 = 0;
          $xfer += $input->readListBegin(\$_etype524, \$_size521);
          for (my $_i525 = 0; $_i525 < $_size521; ++$_i525)
          {
            my $elem526 = undef;
            $elem526 = Square->new();
            $xfer += $elem526->read($input);
            push(@{$self->{squares}},$elem526);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size527 = 0;
          $self->{members} = {};
          my $_ktype528 = 0;
          my $_vtype529 = 0;
          $xfer += $input->readMapBegin(\$_ktype528, \$_vtype529, \$_size527);
          for (my $_i531 = 0; $_i531 < $_size527; ++$_i531)
          {
            my $key532 = '';
            my $val533 = new SquareMember();
            $xfer += $input->readString(\$key532);
            $val533 = SquareMember->new();
            $xfer += $val533->read($input);
            $self->{members}->{$key532} = $val533;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size534 = 0;
          $self->{authorities} = {};
          my $_ktype535 = 0;
          my $_vtype536 = 0;
          $xfer += $input->readMapBegin(\$_ktype535, \$_vtype536, \$_size534);
          for (my $_i538 = 0; $_i538 < $_size534; ++$_i538)
          {
            my $key539 = '';
            my $val540 = new SquareAuthority();
            $xfer += $input->readString(\$key539);
            $val540 = SquareAuthority->new();
            $xfer += $val540->read($input);
            $self->{authorities}->{$key539} = $val540;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size541 = 0;
          $self->{statuses} = {};
          my $_ktype542 = 0;
          my $_vtype543 = 0;
          $xfer += $input->readMapBegin(\$_ktype542, \$_vtype543, \$_size541);
          for (my $_i545 = 0; $_i545 < $_size541; ++$_i545)
          {
            my $key546 = '';
            my $val547 = new SquareStatus();
            $xfer += $input->readString(\$key546);
            $val547 = SquareStatus->new();
            $xfer += $val547->read($input);
            $self->{statuses}->{$key546} = $val547;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{continuationToken});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size548 = 0;
          $self->{noteStatuses} = {};
          my $_ktype549 = 0;
          my $_vtype550 = 0;
          $xfer += $input->readMapBegin(\$_ktype549, \$_vtype550, \$_size548);
          for (my $_i552 = 0; $_i552 < $_size548; ++$_i552)
          {
            my $key553 = '';
            my $val554 = new NoteStatus();
            $xfer += $input->readString(\$key553);
            $val554 = NoteStatus->new();
            $xfer += $val554->read($input);
            $self->{noteStatuses}->{$key553} = $val554;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetJoinedSquaresResponse');
  if (defined $self->{squares}) {
    $xfer += $output->writeFieldBegin('squares', Thrift::TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{squares}}));
      {
        foreach my $iter555 (@{$self->{squares}}) 
        {
          $xfer += ${iter555}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{members}) {
    $xfer += $output->writeFieldBegin('members', Thrift::TType::MAP, 2);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRUCT, scalar(keys %{$self->{members}}));
      {
        while( my ($kiter556,$viter557) = each %{$self->{members}}) 
        {
          $xfer += $output->writeString($kiter556);
          $xfer += ${viter557}->write($output);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorities}) {
    $xfer += $output->writeFieldBegin('authorities', Thrift::TType::MAP, 3);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRUCT, scalar(keys %{$self->{authorities}}));
      {
        while( my ($kiter558,$viter559) = each %{$self->{authorities}}) 
        {
          $xfer += $output->writeString($kiter558);
          $xfer += ${viter559}->write($output);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{statuses}) {
    $xfer += $output->writeFieldBegin('statuses', Thrift::TType::MAP, 4);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRUCT, scalar(keys %{$self->{statuses}}));
      {
        while( my ($kiter560,$viter561) = each %{$self->{statuses}}) 
        {
          $xfer += $output->writeString($kiter560);
          $xfer += ${viter561}->write($output);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{continuationToken}) {
    $xfer += $output->writeFieldBegin('continuationToken', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{continuationToken});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{noteStatuses}) {
    $xfer += $output->writeFieldBegin('noteStatuses', Thrift::TType::MAP, 6);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRUCT, scalar(keys %{$self->{noteStatuses}}));
      {
        while( my ($kiter562,$viter563) = each %{$self->{noteStatuses}}) 
        {
          $xfer += $output->writeString($kiter562);
          $xfer += ${viter563}->write($output);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GetJoinableSquareChatsRequest;
use base qw(Class::Accessor);
GetJoinableSquareChatsRequest->mk_accessors( qw( squareMid continuationToken limit ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareMid} = undef;
  $self->{continuationToken} = undef;
  $self->{limit} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareMid}) {
      $self->{squareMid} = $vals->{squareMid};
    }
    if (defined $vals->{continuationToken}) {
      $self->{continuationToken} = $vals->{continuationToken};
    }
    if (defined $vals->{limit}) {
      $self->{limit} = $vals->{limit};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetJoinableSquareChatsRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{continuationToken});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{limit});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetJoinableSquareChatsRequest');
  if (defined $self->{squareMid}) {
    $xfer += $output->writeFieldBegin('squareMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{continuationToken}) {
    $xfer += $output->writeFieldBegin('continuationToken', Thrift::TType::STRING, 10);
    $xfer += $output->writeString($self->{continuationToken});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{limit}) {
    $xfer += $output->writeFieldBegin('limit', Thrift::TType::I32, 11);
    $xfer += $output->writeI32($self->{limit});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GetJoinableSquareChatsResponse;
use base qw(Class::Accessor);
GetJoinableSquareChatsResponse->mk_accessors( qw( squareChats continuationToken totalSquareChatCount squareChatStatuses ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareChats} = undef;
  $self->{continuationToken} = undef;
  $self->{totalSquareChatCount} = undef;
  $self->{squareChatStatuses} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareChats}) {
      $self->{squareChats} = $vals->{squareChats};
    }
    if (defined $vals->{continuationToken}) {
      $self->{continuationToken} = $vals->{continuationToken};
    }
    if (defined $vals->{totalSquareChatCount}) {
      $self->{totalSquareChatCount} = $vals->{totalSquareChatCount};
    }
    if (defined $vals->{squareChatStatuses}) {
      $self->{squareChatStatuses} = $vals->{squareChatStatuses};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetJoinableSquareChatsResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size564 = 0;
          $self->{squareChats} = [];
          my $_etype567 = 0;
          $xfer += $input->readListBegin(\$_etype567, \$_size564);
          for (my $_i568 = 0; $_i568 < $_size564; ++$_i568)
          {
            my $elem569 = undef;
            $elem569 = SquareChat->new();
            $xfer += $elem569->read($input);
            push(@{$self->{squareChats}},$elem569);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{continuationToken});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{totalSquareChatCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size570 = 0;
          $self->{squareChatStatuses} = {};
          my $_ktype571 = 0;
          my $_vtype572 = 0;
          $xfer += $input->readMapBegin(\$_ktype571, \$_vtype572, \$_size570);
          for (my $_i574 = 0; $_i574 < $_size570; ++$_i574)
          {
            my $key575 = '';
            my $val576 = new SquareChatStatus();
            $xfer += $input->readString(\$key575);
            $val576 = SquareChatStatus->new();
            $xfer += $val576->read($input);
            $self->{squareChatStatuses}->{$key575} = $val576;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetJoinableSquareChatsResponse');
  if (defined $self->{squareChats}) {
    $xfer += $output->writeFieldBegin('squareChats', Thrift::TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{squareChats}}));
      {
        foreach my $iter577 (@{$self->{squareChats}}) 
        {
          $xfer += ${iter577}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{continuationToken}) {
    $xfer += $output->writeFieldBegin('continuationToken', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{continuationToken});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{totalSquareChatCount}) {
    $xfer += $output->writeFieldBegin('totalSquareChatCount', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{totalSquareChatCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareChatStatuses}) {
    $xfer += $output->writeFieldBegin('squareChatStatuses', Thrift::TType::MAP, 4);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRUCT, scalar(keys %{$self->{squareChatStatuses}}));
      {
        while( my ($kiter578,$viter579) = each %{$self->{squareChatStatuses}}) 
        {
          $xfer += $output->writeString($kiter578);
          $xfer += ${viter579}->write($output);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GetInvitationTicketUrlRequest;
use base qw(Class::Accessor);
GetInvitationTicketUrlRequest->mk_accessors( qw( mid ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{mid} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{mid}) {
      $self->{mid} = $vals->{mid};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetInvitationTicketUrlRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{mid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetInvitationTicketUrlRequest');
  if (defined $self->{mid}) {
    $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{mid});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GetInvitationTicketUrlResponse;
use base qw(Class::Accessor);
GetInvitationTicketUrlResponse->mk_accessors( qw( invitationURL ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{invitationURL} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{invitationURL}) {
      $self->{invitationURL} = $vals->{invitationURL};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetInvitationTicketUrlResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{invitationURL});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetInvitationTicketUrlResponse');
  if (defined $self->{invitationURL}) {
    $xfer += $output->writeFieldBegin('invitationURL', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{invitationURL});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package LeaveSquareRequest;
use base qw(Class::Accessor);
LeaveSquareRequest->mk_accessors( qw( squareMid ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareMid} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareMid}) {
      $self->{squareMid} = $vals->{squareMid};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'LeaveSquareRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('LeaveSquareRequest');
  if (defined $self->{squareMid}) {
    $xfer += $output->writeFieldBegin('squareMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareMid});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package LeaveSquareResponse;
use base qw(Class::Accessor);

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  return bless ($self, $classname);
}

sub getName {
  return 'LeaveSquareResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('LeaveSquareResponse');
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package LeaveSquareChatRequest;
use base qw(Class::Accessor);
LeaveSquareChatRequest->mk_accessors( qw( squareChatMid sayGoodbye squareChatMemberRevision ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareChatMid} = undef;
  $self->{sayGoodbye} = undef;
  $self->{squareChatMemberRevision} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
    if (defined $vals->{sayGoodbye}) {
      $self->{sayGoodbye} = $vals->{sayGoodbye};
    }
    if (defined $vals->{squareChatMemberRevision}) {
      $self->{squareChatMemberRevision} = $vals->{squareChatMemberRevision};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'LeaveSquareChatRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{sayGoodbye});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{squareChatMemberRevision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('LeaveSquareChatRequest');
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{sayGoodbye}) {
    $xfer += $output->writeFieldBegin('sayGoodbye', Thrift::TType::BOOL, 3);
    $xfer += $output->writeBool($self->{sayGoodbye});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareChatMemberRevision}) {
    $xfer += $output->writeFieldBegin('squareChatMemberRevision', Thrift::TType::I64, 4);
    $xfer += $output->writeI64($self->{squareChatMemberRevision});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package LeaveSquareChatResponse;
use base qw(Class::Accessor);

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  return bless ($self, $classname);
}

sub getName {
  return 'LeaveSquareChatResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('LeaveSquareChatResponse');
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareMemberSearchOption;
use base qw(Class::Accessor);
SquareMemberSearchOption->mk_accessors( qw( membershipState memberRoles displayName ableToReceiveMessage ableToReceiveFriendRequest chatMidToExcludeMembers includingMe ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{membershipState} = undef;
  $self->{memberRoles} = undef;
  $self->{displayName} = undef;
  $self->{ableToReceiveMessage} = undef;
  $self->{ableToReceiveFriendRequest} = undef;
  $self->{chatMidToExcludeMembers} = undef;
  $self->{includingMe} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{membershipState}) {
      $self->{membershipState} = $vals->{membershipState};
    }
    if (defined $vals->{memberRoles}) {
      $self->{memberRoles} = $vals->{memberRoles};
    }
    if (defined $vals->{displayName}) {
      $self->{displayName} = $vals->{displayName};
    }
    if (defined $vals->{ableToReceiveMessage}) {
      $self->{ableToReceiveMessage} = $vals->{ableToReceiveMessage};
    }
    if (defined $vals->{ableToReceiveFriendRequest}) {
      $self->{ableToReceiveFriendRequest} = $vals->{ableToReceiveFriendRequest};
    }
    if (defined $vals->{chatMidToExcludeMembers}) {
      $self->{chatMidToExcludeMembers} = $vals->{chatMidToExcludeMembers};
    }
    if (defined $vals->{includingMe}) {
      $self->{includingMe} = $vals->{includingMe};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareMemberSearchOption';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{membershipState});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::SET) {
        {
          my $_size580 = 0;
          $self->{memberRoles} = {};
          my $_etype583 = 0;
          $xfer += $input->readSetBegin(\$_etype583, \$_size580);
          for (my $_i584 = 0; $_i584 < $_size580; ++$_i584)
          {
            my $elem585 = undef;
            $xfer += $input->readI32(\$elem585);
            $self->{memberRoles}->{$elem585} = 1;
          }
          $xfer += $input->readSetEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{displayName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{ableToReceiveMessage});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{ableToReceiveFriendRequest});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{chatMidToExcludeMembers});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{includingMe});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareMemberSearchOption');
  if (defined $self->{membershipState}) {
    $xfer += $output->writeFieldBegin('membershipState', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{membershipState});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{memberRoles}) {
    $xfer += $output->writeFieldBegin('memberRoles', Thrift::TType::SET, 2);
    {
      $xfer += $output->writeSetBegin(Thrift::TType::I32, scalar(@{$self->{memberRoles}}));
      {
        foreach my $iter586 (@{$self->{memberRoles}})
        {
          $xfer += $output->writeI32($iter586);
        }
      }
      $xfer += $output->writeSetEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{displayName}) {
    $xfer += $output->writeFieldBegin('displayName', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{displayName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ableToReceiveMessage}) {
    $xfer += $output->writeFieldBegin('ableToReceiveMessage', Thrift::TType::I32, 4);
    $xfer += $output->writeI32($self->{ableToReceiveMessage});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ableToReceiveFriendRequest}) {
    $xfer += $output->writeFieldBegin('ableToReceiveFriendRequest', Thrift::TType::I32, 5);
    $xfer += $output->writeI32($self->{ableToReceiveFriendRequest});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{chatMidToExcludeMembers}) {
    $xfer += $output->writeFieldBegin('chatMidToExcludeMembers', Thrift::TType::STRING, 6);
    $xfer += $output->writeString($self->{chatMidToExcludeMembers});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{includingMe}) {
    $xfer += $output->writeFieldBegin('includingMe', Thrift::TType::BOOL, 7);
    $xfer += $output->writeBool($self->{includingMe});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SearchSquareMembersRequest;
use base qw(Class::Accessor);
SearchSquareMembersRequest->mk_accessors( qw( squareMid searchOption continuationToken limit ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareMid} = undef;
  $self->{searchOption} = undef;
  $self->{continuationToken} = undef;
  $self->{limit} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareMid}) {
      $self->{squareMid} = $vals->{squareMid};
    }
    if (defined $vals->{searchOption}) {
      $self->{searchOption} = $vals->{searchOption};
    }
    if (defined $vals->{continuationToken}) {
      $self->{continuationToken} = $vals->{continuationToken};
    }
    if (defined $vals->{limit}) {
      $self->{limit} = $vals->{limit};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SearchSquareMembersRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{searchOption} = SquareMemberSearchOption->new();
        $xfer += $self->{searchOption}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{continuationToken});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{limit});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SearchSquareMembersRequest');
  if (defined $self->{squareMid}) {
    $xfer += $output->writeFieldBegin('squareMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{searchOption}) {
    $xfer += $output->writeFieldBegin('searchOption', Thrift::TType::STRUCT, 3);
    $xfer += $self->{searchOption}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{continuationToken}) {
    $xfer += $output->writeFieldBegin('continuationToken', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{continuationToken});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{limit}) {
    $xfer += $output->writeFieldBegin('limit', Thrift::TType::I32, 5);
    $xfer += $output->writeI32($self->{limit});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SearchSquareMembersResponse;
use base qw(Class::Accessor);
SearchSquareMembersResponse->mk_accessors( qw( members revision continuationToken totalCount ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{members} = undef;
  $self->{revision} = undef;
  $self->{continuationToken} = undef;
  $self->{totalCount} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{members}) {
      $self->{members} = $vals->{members};
    }
    if (defined $vals->{revision}) {
      $self->{revision} = $vals->{revision};
    }
    if (defined $vals->{continuationToken}) {
      $self->{continuationToken} = $vals->{continuationToken};
    }
    if (defined $vals->{totalCount}) {
      $self->{totalCount} = $vals->{totalCount};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SearchSquareMembersResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size587 = 0;
          $self->{members} = [];
          my $_etype590 = 0;
          $xfer += $input->readListBegin(\$_etype590, \$_size587);
          for (my $_i591 = 0; $_i591 < $_size587; ++$_i591)
          {
            my $elem592 = undef;
            $elem592 = SquareMember->new();
            $xfer += $elem592->read($input);
            push(@{$self->{members}},$elem592);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{revision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{continuationToken});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{totalCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SearchSquareMembersResponse');
  if (defined $self->{members}) {
    $xfer += $output->writeFieldBegin('members', Thrift::TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{members}}));
      {
        foreach my $iter593 (@{$self->{members}}) 
        {
          $xfer += ${iter593}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{revision}) {
    $xfer += $output->writeFieldBegin('revision', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{revision});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{continuationToken}) {
    $xfer += $output->writeFieldBegin('continuationToken', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{continuationToken});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{totalCount}) {
    $xfer += $output->writeFieldBegin('totalCount', Thrift::TType::I32, 4);
    $xfer += $output->writeI32($self->{totalCount});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package FindSquareByInvitationTicketRequest;
use base qw(Class::Accessor);
FindSquareByInvitationTicketRequest->mk_accessors( qw( invitationTicket ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{invitationTicket} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{invitationTicket}) {
      $self->{invitationTicket} = $vals->{invitationTicket};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'FindSquareByInvitationTicketRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{invitationTicket});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('FindSquareByInvitationTicketRequest');
  if (defined $self->{invitationTicket}) {
    $xfer += $output->writeFieldBegin('invitationTicket', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{invitationTicket});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package FindSquareByInvitationTicketResponse;
use base qw(Class::Accessor);
FindSquareByInvitationTicketResponse->mk_accessors( qw( square myMembership squareAuthority squareStatus ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{square} = undef;
  $self->{myMembership} = undef;
  $self->{squareAuthority} = undef;
  $self->{squareStatus} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{square}) {
      $self->{square} = $vals->{square};
    }
    if (defined $vals->{myMembership}) {
      $self->{myMembership} = $vals->{myMembership};
    }
    if (defined $vals->{squareAuthority}) {
      $self->{squareAuthority} = $vals->{squareAuthority};
    }
    if (defined $vals->{squareStatus}) {
      $self->{squareStatus} = $vals->{squareStatus};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'FindSquareByInvitationTicketResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{square} = Square->new();
        $xfer += $self->{square}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{myMembership} = SquareMember->new();
        $xfer += $self->{myMembership}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareAuthority} = SquareAuthority->new();
        $xfer += $self->{squareAuthority}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareStatus} = SquareStatus->new();
        $xfer += $self->{squareStatus}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('FindSquareByInvitationTicketResponse');
  if (defined $self->{square}) {
    $xfer += $output->writeFieldBegin('square', Thrift::TType::STRUCT, 1);
    $xfer += $self->{square}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{myMembership}) {
    $xfer += $output->writeFieldBegin('myMembership', Thrift::TType::STRUCT, 2);
    $xfer += $self->{myMembership}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareAuthority}) {
    $xfer += $output->writeFieldBegin('squareAuthority', Thrift::TType::STRUCT, 3);
    $xfer += $self->{squareAuthority}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareStatus}) {
    $xfer += $output->writeFieldBegin('squareStatus', Thrift::TType::STRUCT, 4);
    $xfer += $self->{squareStatus}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareEventReceiveMessage;
use base qw(Class::Accessor);
SquareEventReceiveMessage->mk_accessors( qw( squareChatMid squareMessage ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareChatMid} = undef;
  $self->{squareMessage} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
    if (defined $vals->{squareMessage}) {
      $self->{squareMessage} = $vals->{squareMessage};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareEventReceiveMessage';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareMessage} = SquareMessage->new();
        $xfer += $self->{squareMessage}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareEventReceiveMessage');
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareMessage}) {
    $xfer += $output->writeFieldBegin('squareMessage', Thrift::TType::STRUCT, 2);
    $xfer += $self->{squareMessage}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareEventSendMessage;
use base qw(Class::Accessor);
SquareEventSendMessage->mk_accessors( qw( squareChatMid squareMessage reqSeq ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareChatMid} = undef;
  $self->{squareMessage} = undef;
  $self->{reqSeq} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
    if (defined $vals->{squareMessage}) {
      $self->{squareMessage} = $vals->{squareMessage};
    }
    if (defined $vals->{reqSeq}) {
      $self->{reqSeq} = $vals->{reqSeq};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareEventSendMessage';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareMessage} = SquareMessage->new();
        $xfer += $self->{squareMessage}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{reqSeq});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareEventSendMessage');
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareMessage}) {
    $xfer += $output->writeFieldBegin('squareMessage', Thrift::TType::STRUCT, 2);
    $xfer += $self->{squareMessage}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reqSeq}) {
    $xfer += $output->writeFieldBegin('reqSeq', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{reqSeq});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareEventNotifiedJoinSquareChat;
use base qw(Class::Accessor);
SquareEventNotifiedJoinSquareChat->mk_accessors( qw( squareChatMid joinedMember ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareChatMid} = undef;
  $self->{joinedMember} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
    if (defined $vals->{joinedMember}) {
      $self->{joinedMember} = $vals->{joinedMember};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareEventNotifiedJoinSquareChat';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{joinedMember} = SquareMember->new();
        $xfer += $self->{joinedMember}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareEventNotifiedJoinSquareChat');
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{joinedMember}) {
    $xfer += $output->writeFieldBegin('joinedMember', Thrift::TType::STRUCT, 2);
    $xfer += $self->{joinedMember}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareEventNotifiedInviteIntoSquareChat;
use base qw(Class::Accessor);
SquareEventNotifiedInviteIntoSquareChat->mk_accessors( qw( squareChatMid invitees invitor invitorRelation ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareChatMid} = undef;
  $self->{invitees} = undef;
  $self->{invitor} = undef;
  $self->{invitorRelation} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
    if (defined $vals->{invitees}) {
      $self->{invitees} = $vals->{invitees};
    }
    if (defined $vals->{invitor}) {
      $self->{invitor} = $vals->{invitor};
    }
    if (defined $vals->{invitorRelation}) {
      $self->{invitorRelation} = $vals->{invitorRelation};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareEventNotifiedInviteIntoSquareChat';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size594 = 0;
          $self->{invitees} = [];
          my $_etype597 = 0;
          $xfer += $input->readListBegin(\$_etype597, \$_size594);
          for (my $_i598 = 0; $_i598 < $_size594; ++$_i598)
          {
            my $elem599 = undef;
            $elem599 = SquareMember->new();
            $xfer += $elem599->read($input);
            push(@{$self->{invitees}},$elem599);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{invitor} = SquareMember->new();
        $xfer += $self->{invitor}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{invitorRelation} = SquareMemberRelation->new();
        $xfer += $self->{invitorRelation}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareEventNotifiedInviteIntoSquareChat');
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{invitees}) {
    $xfer += $output->writeFieldBegin('invitees', Thrift::TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{invitees}}));
      {
        foreach my $iter600 (@{$self->{invitees}}) 
        {
          $xfer += ${iter600}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{invitor}) {
    $xfer += $output->writeFieldBegin('invitor', Thrift::TType::STRUCT, 3);
    $xfer += $self->{invitor}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{invitorRelation}) {
    $xfer += $output->writeFieldBegin('invitorRelation', Thrift::TType::STRUCT, 4);
    $xfer += $self->{invitorRelation}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareEventNotifiedLeaveSquareChat;
use base qw(Class::Accessor);
SquareEventNotifiedLeaveSquareChat->mk_accessors( qw( squareChatMid squareMemberMid sayGoodbye squareMember ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareChatMid} = undef;
  $self->{squareMemberMid} = undef;
  $self->{sayGoodbye} = undef;
  $self->{squareMember} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
    if (defined $vals->{squareMemberMid}) {
      $self->{squareMemberMid} = $vals->{squareMemberMid};
    }
    if (defined $vals->{sayGoodbye}) {
      $self->{sayGoodbye} = $vals->{sayGoodbye};
    }
    if (defined $vals->{squareMember}) {
      $self->{squareMember} = $vals->{squareMember};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareEventNotifiedLeaveSquareChat';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMemberMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{sayGoodbye});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareMember} = SquareMember->new();
        $xfer += $self->{squareMember}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareEventNotifiedLeaveSquareChat');
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareMemberMid}) {
    $xfer += $output->writeFieldBegin('squareMemberMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareMemberMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{sayGoodbye}) {
    $xfer += $output->writeFieldBegin('sayGoodbye', Thrift::TType::BOOL, 3);
    $xfer += $output->writeBool($self->{sayGoodbye});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareMember}) {
    $xfer += $output->writeFieldBegin('squareMember', Thrift::TType::STRUCT, 4);
    $xfer += $self->{squareMember}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareEventNotifiedDestroyMessage;
use base qw(Class::Accessor);
SquareEventNotifiedDestroyMessage->mk_accessors( qw( squareChatMid messageId ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareChatMid} = undef;
  $self->{messageId} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
    if (defined $vals->{messageId}) {
      $self->{messageId} = $vals->{messageId};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareEventNotifiedDestroyMessage';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{messageId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareEventNotifiedDestroyMessage');
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{messageId}) {
    $xfer += $output->writeFieldBegin('messageId', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{messageId});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareEventNotifiedMarkAsRead;
use base qw(Class::Accessor);
SquareEventNotifiedMarkAsRead->mk_accessors( qw( squareChatMid sMemberMid messageId ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareChatMid} = undef;
  $self->{sMemberMid} = undef;
  $self->{messageId} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
    if (defined $vals->{sMemberMid}) {
      $self->{sMemberMid} = $vals->{sMemberMid};
    }
    if (defined $vals->{messageId}) {
      $self->{messageId} = $vals->{messageId};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareEventNotifiedMarkAsRead';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{sMemberMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{messageId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareEventNotifiedMarkAsRead');
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{sMemberMid}) {
    $xfer += $output->writeFieldBegin('sMemberMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{sMemberMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{messageId}) {
    $xfer += $output->writeFieldBegin('messageId', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{messageId});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareEventNotifiedUpdateSquareMemberProfile;
use base qw(Class::Accessor);
SquareEventNotifiedUpdateSquareMemberProfile->mk_accessors( qw( squareChatMid squareMember ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareChatMid} = undef;
  $self->{squareMember} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
    if (defined $vals->{squareMember}) {
      $self->{squareMember} = $vals->{squareMember};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareEventNotifiedUpdateSquareMemberProfile';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareMember} = SquareMember->new();
        $xfer += $self->{squareMember}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareEventNotifiedUpdateSquareMemberProfile');
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareMember}) {
    $xfer += $output->writeFieldBegin('squareMember', Thrift::TType::STRUCT, 2);
    $xfer += $self->{squareMember}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareEventNotifiedKickoutFromSquare;
use base qw(Class::Accessor);
SquareEventNotifiedKickoutFromSquare->mk_accessors( qw( squareChatMid kickees ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareChatMid} = undef;
  $self->{kickees} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
    if (defined $vals->{kickees}) {
      $self->{kickees} = $vals->{kickees};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareEventNotifiedKickoutFromSquare';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size601 = 0;
          $self->{kickees} = [];
          my $_etype604 = 0;
          $xfer += $input->readListBegin(\$_etype604, \$_size601);
          for (my $_i605 = 0; $_i605 < $_size601; ++$_i605)
          {
            my $elem606 = undef;
            $elem606 = SquareMember->new();
            $xfer += $elem606->read($input);
            push(@{$self->{kickees}},$elem606);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareEventNotifiedKickoutFromSquare');
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{kickees}) {
    $xfer += $output->writeFieldBegin('kickees', Thrift::TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{kickees}}));
      {
        foreach my $iter607 (@{$self->{kickees}}) 
        {
          $xfer += ${iter607}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareEventNotifiedShutdownSquare;
use base qw(Class::Accessor);
SquareEventNotifiedShutdownSquare->mk_accessors( qw( squareChatMid square ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareChatMid} = undef;
  $self->{square} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
    if (defined $vals->{square}) {
      $self->{square} = $vals->{square};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareEventNotifiedShutdownSquare';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{square} = Square->new();
        $xfer += $self->{square}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareEventNotifiedShutdownSquare');
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{square}) {
    $xfer += $output->writeFieldBegin('square', Thrift::TType::STRUCT, 2);
    $xfer += $self->{square}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareEventNotifiedDeleteSquareChat;
use base qw(Class::Accessor);
SquareEventNotifiedDeleteSquareChat->mk_accessors( qw( squareChat ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareChat} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareChat}) {
      $self->{squareChat} = $vals->{squareChat};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareEventNotifiedDeleteSquareChat';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareChat} = SquareChat->new();
        $xfer += $self->{squareChat}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareEventNotifiedDeleteSquareChat');
  if (defined $self->{squareChat}) {
    $xfer += $output->writeFieldBegin('squareChat', Thrift::TType::STRUCT, 1);
    $xfer += $self->{squareChat}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareEventNotifiedUpdateSquareChatProfileName;
use base qw(Class::Accessor);
SquareEventNotifiedUpdateSquareChatProfileName->mk_accessors( qw( squareChatMid editor updatedChatName ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareChatMid} = undef;
  $self->{editor} = undef;
  $self->{updatedChatName} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
    if (defined $vals->{editor}) {
      $self->{editor} = $vals->{editor};
    }
    if (defined $vals->{updatedChatName}) {
      $self->{updatedChatName} = $vals->{updatedChatName};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareEventNotifiedUpdateSquareChatProfileName';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{editor} = SquareMember->new();
        $xfer += $self->{editor}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{updatedChatName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareEventNotifiedUpdateSquareChatProfileName');
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{editor}) {
    $xfer += $output->writeFieldBegin('editor', Thrift::TType::STRUCT, 2);
    $xfer += $self->{editor}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{updatedChatName}) {
    $xfer += $output->writeFieldBegin('updatedChatName', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{updatedChatName});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareEventNotifiedUpdateSquareChatProfileImage;
use base qw(Class::Accessor);
SquareEventNotifiedUpdateSquareChatProfileImage->mk_accessors( qw( squareChatMid editor ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareChatMid} = undef;
  $self->{editor} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
    if (defined $vals->{editor}) {
      $self->{editor} = $vals->{editor};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareEventNotifiedUpdateSquareChatProfileImage';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{editor} = SquareMember->new();
        $xfer += $self->{editor}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareEventNotifiedUpdateSquareChatProfileImage');
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{editor}) {
    $xfer += $output->writeFieldBegin('editor', Thrift::TType::STRUCT, 2);
    $xfer += $self->{editor}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareEventNotifiedUpdateSquareChatStatus;
use base qw(Class::Accessor);
SquareEventNotifiedUpdateSquareChatStatus->mk_accessors( qw( squareChatMid statusWithoutMessage ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareChatMid} = undef;
  $self->{statusWithoutMessage} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
    if (defined $vals->{statusWithoutMessage}) {
      $self->{statusWithoutMessage} = $vals->{statusWithoutMessage};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareEventNotifiedUpdateSquareChatStatus';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{statusWithoutMessage} = SquareChatStatusWithoutMessage->new();
        $xfer += $self->{statusWithoutMessage}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareEventNotifiedUpdateSquareChatStatus');
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{statusWithoutMessage}) {
    $xfer += $output->writeFieldBegin('statusWithoutMessage', Thrift::TType::STRUCT, 2);
    $xfer += $self->{statusWithoutMessage}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareEventNotifiedUpdateSquareStatus;
use base qw(Class::Accessor);
SquareEventNotifiedUpdateSquareStatus->mk_accessors( qw( squareMid squareStatus ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareMid} = undef;
  $self->{squareStatus} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareMid}) {
      $self->{squareMid} = $vals->{squareMid};
    }
    if (defined $vals->{squareStatus}) {
      $self->{squareStatus} = $vals->{squareStatus};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareEventNotifiedUpdateSquareStatus';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareStatus} = SquareStatus->new();
        $xfer += $self->{squareStatus}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareEventNotifiedUpdateSquareStatus');
  if (defined $self->{squareMid}) {
    $xfer += $output->writeFieldBegin('squareMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareStatus}) {
    $xfer += $output->writeFieldBegin('squareStatus', Thrift::TType::STRUCT, 2);
    $xfer += $self->{squareStatus}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareEventNotifiedCreateSquareMember;
use base qw(Class::Accessor);
SquareEventNotifiedCreateSquareMember->mk_accessors( qw( square squareAuthority squareStatus squareMember squareFeatureSet ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{square} = undef;
  $self->{squareAuthority} = undef;
  $self->{squareStatus} = undef;
  $self->{squareMember} = undef;
  $self->{squareFeatureSet} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{square}) {
      $self->{square} = $vals->{square};
    }
    if (defined $vals->{squareAuthority}) {
      $self->{squareAuthority} = $vals->{squareAuthority};
    }
    if (defined $vals->{squareStatus}) {
      $self->{squareStatus} = $vals->{squareStatus};
    }
    if (defined $vals->{squareMember}) {
      $self->{squareMember} = $vals->{squareMember};
    }
    if (defined $vals->{squareFeatureSet}) {
      $self->{squareFeatureSet} = $vals->{squareFeatureSet};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareEventNotifiedCreateSquareMember';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{square} = Square->new();
        $xfer += $self->{square}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareAuthority} = SquareAuthority->new();
        $xfer += $self->{squareAuthority}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareStatus} = SquareStatus->new();
        $xfer += $self->{squareStatus}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareMember} = SquareMember->new();
        $xfer += $self->{squareMember}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareFeatureSet} = SquareFeatureSet->new();
        $xfer += $self->{squareFeatureSet}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareEventNotifiedCreateSquareMember');
  if (defined $self->{square}) {
    $xfer += $output->writeFieldBegin('square', Thrift::TType::STRUCT, 1);
    $xfer += $self->{square}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareAuthority}) {
    $xfer += $output->writeFieldBegin('squareAuthority', Thrift::TType::STRUCT, 2);
    $xfer += $self->{squareAuthority}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareStatus}) {
    $xfer += $output->writeFieldBegin('squareStatus', Thrift::TType::STRUCT, 3);
    $xfer += $self->{squareStatus}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareMember}) {
    $xfer += $output->writeFieldBegin('squareMember', Thrift::TType::STRUCT, 4);
    $xfer += $self->{squareMember}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareFeatureSet}) {
    $xfer += $output->writeFieldBegin('squareFeatureSet', Thrift::TType::STRUCT, 5);
    $xfer += $self->{squareFeatureSet}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareEventNotifiedCreateSquareChatMember;
use base qw(Class::Accessor);
SquareEventNotifiedCreateSquareChatMember->mk_accessors( qw( squareChatMid squareMemberMid squareChatMember ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareChatMid} = undef;
  $self->{squareMemberMid} = undef;
  $self->{squareChatMember} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
    if (defined $vals->{squareMemberMid}) {
      $self->{squareMemberMid} = $vals->{squareMemberMid};
    }
    if (defined $vals->{squareChatMember}) {
      $self->{squareChatMember} = $vals->{squareChatMember};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareEventNotifiedCreateSquareChatMember';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMemberMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareChatMember} = SquareChatMember->new();
        $xfer += $self->{squareChatMember}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareEventNotifiedCreateSquareChatMember');
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareMemberMid}) {
    $xfer += $output->writeFieldBegin('squareMemberMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareMemberMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareChatMember}) {
    $xfer += $output->writeFieldBegin('squareChatMember', Thrift::TType::STRUCT, 3);
    $xfer += $self->{squareChatMember}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareEventNotifiedUpdateSquareMemberRelation;
use base qw(Class::Accessor);
SquareEventNotifiedUpdateSquareMemberRelation->mk_accessors( qw( squareMid myMemberMid targetSquareMemberMid squareMemberRelation ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareMid} = undef;
  $self->{myMemberMid} = undef;
  $self->{targetSquareMemberMid} = undef;
  $self->{squareMemberRelation} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareMid}) {
      $self->{squareMid} = $vals->{squareMid};
    }
    if (defined $vals->{myMemberMid}) {
      $self->{myMemberMid} = $vals->{myMemberMid};
    }
    if (defined $vals->{targetSquareMemberMid}) {
      $self->{targetSquareMemberMid} = $vals->{targetSquareMemberMid};
    }
    if (defined $vals->{squareMemberRelation}) {
      $self->{squareMemberRelation} = $vals->{squareMemberRelation};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareEventNotifiedUpdateSquareMemberRelation';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{myMemberMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{targetSquareMemberMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareMemberRelation} = SquareMemberRelation->new();
        $xfer += $self->{squareMemberRelation}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareEventNotifiedUpdateSquareMemberRelation');
  if (defined $self->{squareMid}) {
    $xfer += $output->writeFieldBegin('squareMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{myMemberMid}) {
    $xfer += $output->writeFieldBegin('myMemberMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{myMemberMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{targetSquareMemberMid}) {
    $xfer += $output->writeFieldBegin('targetSquareMemberMid', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{targetSquareMemberMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareMemberRelation}) {
    $xfer += $output->writeFieldBegin('squareMemberRelation', Thrift::TType::STRUCT, 4);
    $xfer += $self->{squareMemberRelation}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareEventNotifiedUpdateSquare;
use base qw(Class::Accessor);
SquareEventNotifiedUpdateSquare->mk_accessors( qw( squareMid square ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareMid} = undef;
  $self->{square} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareMid}) {
      $self->{squareMid} = $vals->{squareMid};
    }
    if (defined $vals->{square}) {
      $self->{square} = $vals->{square};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareEventNotifiedUpdateSquare';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{square} = Square->new();
        $xfer += $self->{square}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareEventNotifiedUpdateSquare');
  if (defined $self->{squareMid}) {
    $xfer += $output->writeFieldBegin('squareMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{square}) {
    $xfer += $output->writeFieldBegin('square', Thrift::TType::STRUCT, 2);
    $xfer += $self->{square}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareEventNotifiedUpdateSquareMember;
use base qw(Class::Accessor);
SquareEventNotifiedUpdateSquareMember->mk_accessors( qw( squareMid squareMemberMid squareMember ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareMid} = undef;
  $self->{squareMemberMid} = undef;
  $self->{squareMember} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareMid}) {
      $self->{squareMid} = $vals->{squareMid};
    }
    if (defined $vals->{squareMemberMid}) {
      $self->{squareMemberMid} = $vals->{squareMemberMid};
    }
    if (defined $vals->{squareMember}) {
      $self->{squareMember} = $vals->{squareMember};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareEventNotifiedUpdateSquareMember';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMemberMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareMember} = SquareMember->new();
        $xfer += $self->{squareMember}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareEventNotifiedUpdateSquareMember');
  if (defined $self->{squareMid}) {
    $xfer += $output->writeFieldBegin('squareMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareMemberMid}) {
    $xfer += $output->writeFieldBegin('squareMemberMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareMemberMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareMember}) {
    $xfer += $output->writeFieldBegin('squareMember', Thrift::TType::STRUCT, 3);
    $xfer += $self->{squareMember}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareEventNotifiedUpdateSquareChat;
use base qw(Class::Accessor);
SquareEventNotifiedUpdateSquareChat->mk_accessors( qw( squareMid squareChatMid squareChat ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareMid} = undef;
  $self->{squareChatMid} = undef;
  $self->{squareChat} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareMid}) {
      $self->{squareMid} = $vals->{squareMid};
    }
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
    if (defined $vals->{squareChat}) {
      $self->{squareChat} = $vals->{squareChat};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareEventNotifiedUpdateSquareChat';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareChat} = SquareChat->new();
        $xfer += $self->{squareChat}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareEventNotifiedUpdateSquareChat');
  if (defined $self->{squareMid}) {
    $xfer += $output->writeFieldBegin('squareMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareChat}) {
    $xfer += $output->writeFieldBegin('squareChat', Thrift::TType::STRUCT, 3);
    $xfer += $self->{squareChat}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareEventNotificationJoinRequest;
use base qw(Class::Accessor);
SquareEventNotificationJoinRequest->mk_accessors( qw( squareMid squareName requestMemberName profileImageObsHash ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareMid} = undef;
  $self->{squareName} = undef;
  $self->{requestMemberName} = undef;
  $self->{profileImageObsHash} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareMid}) {
      $self->{squareMid} = $vals->{squareMid};
    }
    if (defined $vals->{squareName}) {
      $self->{squareName} = $vals->{squareName};
    }
    if (defined $vals->{requestMemberName}) {
      $self->{requestMemberName} = $vals->{requestMemberName};
    }
    if (defined $vals->{profileImageObsHash}) {
      $self->{profileImageObsHash} = $vals->{profileImageObsHash};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareEventNotificationJoinRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{requestMemberName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{profileImageObsHash});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareEventNotificationJoinRequest');
  if (defined $self->{squareMid}) {
    $xfer += $output->writeFieldBegin('squareMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareName}) {
    $xfer += $output->writeFieldBegin('squareName', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{requestMemberName}) {
    $xfer += $output->writeFieldBegin('requestMemberName', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{requestMemberName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{profileImageObsHash}) {
    $xfer += $output->writeFieldBegin('profileImageObsHash', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{profileImageObsHash});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareEventNotificationMemberUpdate;
use base qw(Class::Accessor);
SquareEventNotificationMemberUpdate->mk_accessors( qw( squareMid squareName profileImageObsHash ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareMid} = undef;
  $self->{squareName} = undef;
  $self->{profileImageObsHash} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareMid}) {
      $self->{squareMid} = $vals->{squareMid};
    }
    if (defined $vals->{squareName}) {
      $self->{squareName} = $vals->{squareName};
    }
    if (defined $vals->{profileImageObsHash}) {
      $self->{profileImageObsHash} = $vals->{profileImageObsHash};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareEventNotificationMemberUpdate';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{profileImageObsHash});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareEventNotificationMemberUpdate');
  if (defined $self->{squareMid}) {
    $xfer += $output->writeFieldBegin('squareMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareName}) {
    $xfer += $output->writeFieldBegin('squareName', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{profileImageObsHash}) {
    $xfer += $output->writeFieldBegin('profileImageObsHash', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{profileImageObsHash});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareEventNotificationSquareDelete;
use base qw(Class::Accessor);
SquareEventNotificationSquareDelete->mk_accessors( qw( squareMid squareName profileImageObsHash ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareMid} = undef;
  $self->{squareName} = undef;
  $self->{profileImageObsHash} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareMid}) {
      $self->{squareMid} = $vals->{squareMid};
    }
    if (defined $vals->{squareName}) {
      $self->{squareName} = $vals->{squareName};
    }
    if (defined $vals->{profileImageObsHash}) {
      $self->{profileImageObsHash} = $vals->{profileImageObsHash};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareEventNotificationSquareDelete';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{profileImageObsHash});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareEventNotificationSquareDelete');
  if (defined $self->{squareMid}) {
    $xfer += $output->writeFieldBegin('squareMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareName}) {
    $xfer += $output->writeFieldBegin('squareName', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{profileImageObsHash}) {
    $xfer += $output->writeFieldBegin('profileImageObsHash', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{profileImageObsHash});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareEventNotificationSquareChatDelete;
use base qw(Class::Accessor);
SquareEventNotificationSquareChatDelete->mk_accessors( qw( squareChatMid squareChatName profileImageObsHash ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareChatMid} = undef;
  $self->{squareChatName} = undef;
  $self->{profileImageObsHash} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
    if (defined $vals->{squareChatName}) {
      $self->{squareChatName} = $vals->{squareChatName};
    }
    if (defined $vals->{profileImageObsHash}) {
      $self->{profileImageObsHash} = $vals->{profileImageObsHash};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareEventNotificationSquareChatDelete';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{profileImageObsHash});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareEventNotificationSquareChatDelete');
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareChatName}) {
    $xfer += $output->writeFieldBegin('squareChatName', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareChatName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{profileImageObsHash}) {
    $xfer += $output->writeFieldBegin('profileImageObsHash', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{profileImageObsHash});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareEventNotificationMessage;
use base qw(Class::Accessor);
SquareEventNotificationMessage->mk_accessors( qw( squareChatMid squareMessage senderDisplayName unreadCount requiredToFetchChatEvents ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareChatMid} = undef;
  $self->{squareMessage} = undef;
  $self->{senderDisplayName} = undef;
  $self->{unreadCount} = undef;
  $self->{requiredToFetchChatEvents} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
    if (defined $vals->{squareMessage}) {
      $self->{squareMessage} = $vals->{squareMessage};
    }
    if (defined $vals->{senderDisplayName}) {
      $self->{senderDisplayName} = $vals->{senderDisplayName};
    }
    if (defined $vals->{unreadCount}) {
      $self->{unreadCount} = $vals->{unreadCount};
    }
    if (defined $vals->{requiredToFetchChatEvents}) {
      $self->{requiredToFetchChatEvents} = $vals->{requiredToFetchChatEvents};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareEventNotificationMessage';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareMessage} = SquareMessage->new();
        $xfer += $self->{squareMessage}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{senderDisplayName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{unreadCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{requiredToFetchChatEvents});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareEventNotificationMessage');
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareMessage}) {
    $xfer += $output->writeFieldBegin('squareMessage', Thrift::TType::STRUCT, 2);
    $xfer += $self->{squareMessage}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{senderDisplayName}) {
    $xfer += $output->writeFieldBegin('senderDisplayName', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{senderDisplayName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{unreadCount}) {
    $xfer += $output->writeFieldBegin('unreadCount', Thrift::TType::I32, 4);
    $xfer += $output->writeI32($self->{unreadCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{requiredToFetchChatEvents}) {
    $xfer += $output->writeFieldBegin('requiredToFetchChatEvents', Thrift::TType::BOOL, 5);
    $xfer += $output->writeBool($self->{requiredToFetchChatEvents});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareEventNotifiedUpdateSquareChatMember;
use base qw(Class::Accessor);
SquareEventNotifiedUpdateSquareChatMember->mk_accessors( qw( squareChatMid squareMemberMid squareChatMember ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareChatMid} = undef;
  $self->{squareMemberMid} = undef;
  $self->{squareChatMember} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
    if (defined $vals->{squareMemberMid}) {
      $self->{squareMemberMid} = $vals->{squareMemberMid};
    }
    if (defined $vals->{squareChatMember}) {
      $self->{squareChatMember} = $vals->{squareChatMember};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareEventNotifiedUpdateSquareChatMember';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMemberMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareChatMember} = SquareChatMember->new();
        $xfer += $self->{squareChatMember}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareEventNotifiedUpdateSquareChatMember');
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareMemberMid}) {
    $xfer += $output->writeFieldBegin('squareMemberMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareMemberMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareChatMember}) {
    $xfer += $output->writeFieldBegin('squareChatMember', Thrift::TType::STRUCT, 3);
    $xfer += $self->{squareChatMember}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareEventNotifiedUpdateSquareAuthority;
use base qw(Class::Accessor);
SquareEventNotifiedUpdateSquareAuthority->mk_accessors( qw( squareMid squareAuthority ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareMid} = undef;
  $self->{squareAuthority} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareMid}) {
      $self->{squareMid} = $vals->{squareMid};
    }
    if (defined $vals->{squareAuthority}) {
      $self->{squareAuthority} = $vals->{squareAuthority};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareEventNotifiedUpdateSquareAuthority';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareAuthority} = SquareAuthority->new();
        $xfer += $self->{squareAuthority}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareEventNotifiedUpdateSquareAuthority');
  if (defined $self->{squareMid}) {
    $xfer += $output->writeFieldBegin('squareMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareAuthority}) {
    $xfer += $output->writeFieldBegin('squareAuthority', Thrift::TType::STRUCT, 2);
    $xfer += $self->{squareAuthority}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareEventNotifiedUpdateSquareFeatureSet;
use base qw(Class::Accessor);
SquareEventNotifiedUpdateSquareFeatureSet->mk_accessors( qw( squareFeatureSet ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareFeatureSet} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareFeatureSet}) {
      $self->{squareFeatureSet} = $vals->{squareFeatureSet};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareEventNotifiedUpdateSquareFeatureSet';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareFeatureSet} = SquareFeatureSet->new();
        $xfer += $self->{squareFeatureSet}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareEventNotifiedUpdateSquareFeatureSet');
  if (defined $self->{squareFeatureSet}) {
    $xfer += $output->writeFieldBegin('squareFeatureSet', Thrift::TType::STRUCT, 1);
    $xfer += $self->{squareFeatureSet}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareEventPayload;
use base qw(Class::Accessor);
SquareEventPayload->mk_accessors( qw( receiveMessage sendMessage notifiedJoinSquareChat notifiedInviteIntoSquareChat notifiedLeaveSquareChat notifiedDestroyMessage notifiedMarkAsRead notifiedUpdateSquareMemberProfile notifiedKickoutFromSquare notifiedShutdownSquare notifiedDeleteSquareChat notifiedUpdateSquareChatProfileName notifiedUpdateSquareChatProfileImage notifiedUpdateSquareStatus notifiedUpdateSquareChatStatus notifiedCreateSquareMember notifiedCreateSquareChatMember notifiedUpdateSquareMemberRelation notifiedUpdateSquare notifiedUpdateSquareMember notifiedUpdateSquareChat notificationJoinRequest notificationJoined notificationPromoteCoadmin notificationPromoteAdmin notificationDemoteMember notificationKickedOut notificationSquareDelete notificationSquareChatDelete notificationMessage notifiedUpdateSquareChatMember notifiedUpdateSquareAuthority notifiedUpdateSquareFeatureSet ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{receiveMessage} = undef;
  $self->{sendMessage} = undef;
  $self->{notifiedJoinSquareChat} = undef;
  $self->{notifiedInviteIntoSquareChat} = undef;
  $self->{notifiedLeaveSquareChat} = undef;
  $self->{notifiedDestroyMessage} = undef;
  $self->{notifiedMarkAsRead} = undef;
  $self->{notifiedUpdateSquareMemberProfile} = undef;
  $self->{notifiedKickoutFromSquare} = undef;
  $self->{notifiedShutdownSquare} = undef;
  $self->{notifiedDeleteSquareChat} = undef;
  $self->{notifiedUpdateSquareChatProfileName} = undef;
  $self->{notifiedUpdateSquareChatProfileImage} = undef;
  $self->{notifiedUpdateSquareStatus} = undef;
  $self->{notifiedUpdateSquareChatStatus} = undef;
  $self->{notifiedCreateSquareMember} = undef;
  $self->{notifiedCreateSquareChatMember} = undef;
  $self->{notifiedUpdateSquareMemberRelation} = undef;
  $self->{notifiedUpdateSquare} = undef;
  $self->{notifiedUpdateSquareMember} = undef;
  $self->{notifiedUpdateSquareChat} = undef;
  $self->{notificationJoinRequest} = undef;
  $self->{notificationJoined} = undef;
  $self->{notificationPromoteCoadmin} = undef;
  $self->{notificationPromoteAdmin} = undef;
  $self->{notificationDemoteMember} = undef;
  $self->{notificationKickedOut} = undef;
  $self->{notificationSquareDelete} = undef;
  $self->{notificationSquareChatDelete} = undef;
  $self->{notificationMessage} = undef;
  $self->{notifiedUpdateSquareChatMember} = undef;
  $self->{notifiedUpdateSquareAuthority} = undef;
  $self->{notifiedUpdateSquareFeatureSet} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{receiveMessage}) {
      $self->{receiveMessage} = $vals->{receiveMessage};
    }
    if (defined $vals->{sendMessage}) {
      $self->{sendMessage} = $vals->{sendMessage};
    }
    if (defined $vals->{notifiedJoinSquareChat}) {
      $self->{notifiedJoinSquareChat} = $vals->{notifiedJoinSquareChat};
    }
    if (defined $vals->{notifiedInviteIntoSquareChat}) {
      $self->{notifiedInviteIntoSquareChat} = $vals->{notifiedInviteIntoSquareChat};
    }
    if (defined $vals->{notifiedLeaveSquareChat}) {
      $self->{notifiedLeaveSquareChat} = $vals->{notifiedLeaveSquareChat};
    }
    if (defined $vals->{notifiedDestroyMessage}) {
      $self->{notifiedDestroyMessage} = $vals->{notifiedDestroyMessage};
    }
    if (defined $vals->{notifiedMarkAsRead}) {
      $self->{notifiedMarkAsRead} = $vals->{notifiedMarkAsRead};
    }
    if (defined $vals->{notifiedUpdateSquareMemberProfile}) {
      $self->{notifiedUpdateSquareMemberProfile} = $vals->{notifiedUpdateSquareMemberProfile};
    }
    if (defined $vals->{notifiedKickoutFromSquare}) {
      $self->{notifiedKickoutFromSquare} = $vals->{notifiedKickoutFromSquare};
    }
    if (defined $vals->{notifiedShutdownSquare}) {
      $self->{notifiedShutdownSquare} = $vals->{notifiedShutdownSquare};
    }
    if (defined $vals->{notifiedDeleteSquareChat}) {
      $self->{notifiedDeleteSquareChat} = $vals->{notifiedDeleteSquareChat};
    }
    if (defined $vals->{notifiedUpdateSquareChatProfileName}) {
      $self->{notifiedUpdateSquareChatProfileName} = $vals->{notifiedUpdateSquareChatProfileName};
    }
    if (defined $vals->{notifiedUpdateSquareChatProfileImage}) {
      $self->{notifiedUpdateSquareChatProfileImage} = $vals->{notifiedUpdateSquareChatProfileImage};
    }
    if (defined $vals->{notifiedUpdateSquareStatus}) {
      $self->{notifiedUpdateSquareStatus} = $vals->{notifiedUpdateSquareStatus};
    }
    if (defined $vals->{notifiedUpdateSquareChatStatus}) {
      $self->{notifiedUpdateSquareChatStatus} = $vals->{notifiedUpdateSquareChatStatus};
    }
    if (defined $vals->{notifiedCreateSquareMember}) {
      $self->{notifiedCreateSquareMember} = $vals->{notifiedCreateSquareMember};
    }
    if (defined $vals->{notifiedCreateSquareChatMember}) {
      $self->{notifiedCreateSquareChatMember} = $vals->{notifiedCreateSquareChatMember};
    }
    if (defined $vals->{notifiedUpdateSquareMemberRelation}) {
      $self->{notifiedUpdateSquareMemberRelation} = $vals->{notifiedUpdateSquareMemberRelation};
    }
    if (defined $vals->{notifiedUpdateSquare}) {
      $self->{notifiedUpdateSquare} = $vals->{notifiedUpdateSquare};
    }
    if (defined $vals->{notifiedUpdateSquareMember}) {
      $self->{notifiedUpdateSquareMember} = $vals->{notifiedUpdateSquareMember};
    }
    if (defined $vals->{notifiedUpdateSquareChat}) {
      $self->{notifiedUpdateSquareChat} = $vals->{notifiedUpdateSquareChat};
    }
    if (defined $vals->{notificationJoinRequest}) {
      $self->{notificationJoinRequest} = $vals->{notificationJoinRequest};
    }
    if (defined $vals->{notificationJoined}) {
      $self->{notificationJoined} = $vals->{notificationJoined};
    }
    if (defined $vals->{notificationPromoteCoadmin}) {
      $self->{notificationPromoteCoadmin} = $vals->{notificationPromoteCoadmin};
    }
    if (defined $vals->{notificationPromoteAdmin}) {
      $self->{notificationPromoteAdmin} = $vals->{notificationPromoteAdmin};
    }
    if (defined $vals->{notificationDemoteMember}) {
      $self->{notificationDemoteMember} = $vals->{notificationDemoteMember};
    }
    if (defined $vals->{notificationKickedOut}) {
      $self->{notificationKickedOut} = $vals->{notificationKickedOut};
    }
    if (defined $vals->{notificationSquareDelete}) {
      $self->{notificationSquareDelete} = $vals->{notificationSquareDelete};
    }
    if (defined $vals->{notificationSquareChatDelete}) {
      $self->{notificationSquareChatDelete} = $vals->{notificationSquareChatDelete};
    }
    if (defined $vals->{notificationMessage}) {
      $self->{notificationMessage} = $vals->{notificationMessage};
    }
    if (defined $vals->{notifiedUpdateSquareChatMember}) {
      $self->{notifiedUpdateSquareChatMember} = $vals->{notifiedUpdateSquareChatMember};
    }
    if (defined $vals->{notifiedUpdateSquareAuthority}) {
      $self->{notifiedUpdateSquareAuthority} = $vals->{notifiedUpdateSquareAuthority};
    }
    if (defined $vals->{notifiedUpdateSquareFeatureSet}) {
      $self->{notifiedUpdateSquareFeatureSet} = $vals->{notifiedUpdateSquareFeatureSet};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareEventPayload';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{receiveMessage} = SquareEventReceiveMessage->new();
        $xfer += $self->{receiveMessage}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{sendMessage} = SquareEventSendMessage->new();
        $xfer += $self->{sendMessage}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{notifiedJoinSquareChat} = SquareEventNotifiedJoinSquareChat->new();
        $xfer += $self->{notifiedJoinSquareChat}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{notifiedInviteIntoSquareChat} = SquareEventNotifiedInviteIntoSquareChat->new();
        $xfer += $self->{notifiedInviteIntoSquareChat}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{notifiedLeaveSquareChat} = SquareEventNotifiedLeaveSquareChat->new();
        $xfer += $self->{notifiedLeaveSquareChat}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{notifiedDestroyMessage} = SquareEventNotifiedDestroyMessage->new();
        $xfer += $self->{notifiedDestroyMessage}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{notifiedMarkAsRead} = SquareEventNotifiedMarkAsRead->new();
        $xfer += $self->{notifiedMarkAsRead}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{notifiedUpdateSquareMemberProfile} = SquareEventNotifiedUpdateSquareMemberProfile->new();
        $xfer += $self->{notifiedUpdateSquareMemberProfile}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^20$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{notifiedKickoutFromSquare} = SquareEventNotifiedKickoutFromSquare->new();
        $xfer += $self->{notifiedKickoutFromSquare}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^19$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{notifiedShutdownSquare} = SquareEventNotifiedShutdownSquare->new();
        $xfer += $self->{notifiedShutdownSquare}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^21$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{notifiedDeleteSquareChat} = SquareEventNotifiedDeleteSquareChat->new();
        $xfer += $self->{notifiedDeleteSquareChat}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^31$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{notifiedUpdateSquareChatProfileName} = SquareEventNotifiedUpdateSquareChatProfileName->new();
        $xfer += $self->{notifiedUpdateSquareChatProfileName}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^32$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{notifiedUpdateSquareChatProfileImage} = SquareEventNotifiedUpdateSquareChatProfileImage->new();
        $xfer += $self->{notifiedUpdateSquareChatProfileImage}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^14$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{notifiedUpdateSquareStatus} = SquareEventNotifiedUpdateSquareStatus->new();
        $xfer += $self->{notifiedUpdateSquareStatus}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^15$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{notifiedUpdateSquareChatStatus} = SquareEventNotifiedUpdateSquareChatStatus->new();
        $xfer += $self->{notifiedUpdateSquareChatStatus}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^16$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{notifiedCreateSquareMember} = SquareEventNotifiedCreateSquareMember->new();
        $xfer += $self->{notifiedCreateSquareMember}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^17$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{notifiedCreateSquareChatMember} = SquareEventNotifiedCreateSquareChatMember->new();
        $xfer += $self->{notifiedCreateSquareChatMember}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^18$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{notifiedUpdateSquareMemberRelation} = SquareEventNotifiedUpdateSquareMemberRelation->new();
        $xfer += $self->{notifiedUpdateSquareMemberRelation}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^9$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{notifiedUpdateSquare} = SquareEventNotifiedUpdateSquare->new();
        $xfer += $self->{notifiedUpdateSquare}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{notifiedUpdateSquareMember} = SquareEventNotifiedUpdateSquareMember->new();
        $xfer += $self->{notifiedUpdateSquareMember}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{notifiedUpdateSquareChat} = SquareEventNotifiedUpdateSquareChat->new();
        $xfer += $self->{notifiedUpdateSquareChat}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^22$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{notificationJoinRequest} = SquareEventNotificationJoinRequest->new();
        $xfer += $self->{notificationJoinRequest}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^23$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{notificationJoined} = SquareEventNotificationMemberUpdate->new();
        $xfer += $self->{notificationJoined}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^24$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{notificationPromoteCoadmin} = SquareEventNotificationMemberUpdate->new();
        $xfer += $self->{notificationPromoteCoadmin}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^25$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{notificationPromoteAdmin} = SquareEventNotificationMemberUpdate->new();
        $xfer += $self->{notificationPromoteAdmin}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^26$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{notificationDemoteMember} = SquareEventNotificationMemberUpdate->new();
        $xfer += $self->{notificationDemoteMember}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^27$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{notificationKickedOut} = SquareEventNotificationMemberUpdate->new();
        $xfer += $self->{notificationKickedOut}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^28$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{notificationSquareDelete} = SquareEventNotificationSquareDelete->new();
        $xfer += $self->{notificationSquareDelete}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^29$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{notificationSquareChatDelete} = SquareEventNotificationSquareChatDelete->new();
        $xfer += $self->{notificationSquareChatDelete}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^30$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{notificationMessage} = SquareEventNotificationMessage->new();
        $xfer += $self->{notificationMessage}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{notifiedUpdateSquareChatMember} = SquareEventNotifiedUpdateSquareChatMember->new();
        $xfer += $self->{notifiedUpdateSquareChatMember}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^13$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{notifiedUpdateSquareAuthority} = SquareEventNotifiedUpdateSquareAuthority->new();
        $xfer += $self->{notifiedUpdateSquareAuthority}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^33$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{notifiedUpdateSquareFeatureSet} = SquareEventNotifiedUpdateSquareFeatureSet->new();
        $xfer += $self->{notifiedUpdateSquareFeatureSet}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareEventPayload');
  if (defined $self->{receiveMessage}) {
    $xfer += $output->writeFieldBegin('receiveMessage', Thrift::TType::STRUCT, 1);
    $xfer += $self->{receiveMessage}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{sendMessage}) {
    $xfer += $output->writeFieldBegin('sendMessage', Thrift::TType::STRUCT, 2);
    $xfer += $self->{sendMessage}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notifiedJoinSquareChat}) {
    $xfer += $output->writeFieldBegin('notifiedJoinSquareChat', Thrift::TType::STRUCT, 3);
    $xfer += $self->{notifiedJoinSquareChat}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notifiedInviteIntoSquareChat}) {
    $xfer += $output->writeFieldBegin('notifiedInviteIntoSquareChat', Thrift::TType::STRUCT, 4);
    $xfer += $self->{notifiedInviteIntoSquareChat}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notifiedLeaveSquareChat}) {
    $xfer += $output->writeFieldBegin('notifiedLeaveSquareChat', Thrift::TType::STRUCT, 5);
    $xfer += $self->{notifiedLeaveSquareChat}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notifiedDestroyMessage}) {
    $xfer += $output->writeFieldBegin('notifiedDestroyMessage', Thrift::TType::STRUCT, 6);
    $xfer += $self->{notifiedDestroyMessage}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notifiedMarkAsRead}) {
    $xfer += $output->writeFieldBegin('notifiedMarkAsRead', Thrift::TType::STRUCT, 7);
    $xfer += $self->{notifiedMarkAsRead}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notifiedUpdateSquareMemberProfile}) {
    $xfer += $output->writeFieldBegin('notifiedUpdateSquareMemberProfile', Thrift::TType::STRUCT, 8);
    $xfer += $self->{notifiedUpdateSquareMemberProfile}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notifiedUpdateSquare}) {
    $xfer += $output->writeFieldBegin('notifiedUpdateSquare', Thrift::TType::STRUCT, 9);
    $xfer += $self->{notifiedUpdateSquare}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notifiedUpdateSquareMember}) {
    $xfer += $output->writeFieldBegin('notifiedUpdateSquareMember', Thrift::TType::STRUCT, 10);
    $xfer += $self->{notifiedUpdateSquareMember}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notifiedUpdateSquareChat}) {
    $xfer += $output->writeFieldBegin('notifiedUpdateSquareChat', Thrift::TType::STRUCT, 11);
    $xfer += $self->{notifiedUpdateSquareChat}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notifiedUpdateSquareChatMember}) {
    $xfer += $output->writeFieldBegin('notifiedUpdateSquareChatMember', Thrift::TType::STRUCT, 12);
    $xfer += $self->{notifiedUpdateSquareChatMember}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notifiedUpdateSquareAuthority}) {
    $xfer += $output->writeFieldBegin('notifiedUpdateSquareAuthority', Thrift::TType::STRUCT, 13);
    $xfer += $self->{notifiedUpdateSquareAuthority}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notifiedUpdateSquareStatus}) {
    $xfer += $output->writeFieldBegin('notifiedUpdateSquareStatus', Thrift::TType::STRUCT, 14);
    $xfer += $self->{notifiedUpdateSquareStatus}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notifiedUpdateSquareChatStatus}) {
    $xfer += $output->writeFieldBegin('notifiedUpdateSquareChatStatus', Thrift::TType::STRUCT, 15);
    $xfer += $self->{notifiedUpdateSquareChatStatus}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notifiedCreateSquareMember}) {
    $xfer += $output->writeFieldBegin('notifiedCreateSquareMember', Thrift::TType::STRUCT, 16);
    $xfer += $self->{notifiedCreateSquareMember}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notifiedCreateSquareChatMember}) {
    $xfer += $output->writeFieldBegin('notifiedCreateSquareChatMember', Thrift::TType::STRUCT, 17);
    $xfer += $self->{notifiedCreateSquareChatMember}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notifiedUpdateSquareMemberRelation}) {
    $xfer += $output->writeFieldBegin('notifiedUpdateSquareMemberRelation', Thrift::TType::STRUCT, 18);
    $xfer += $self->{notifiedUpdateSquareMemberRelation}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notifiedShutdownSquare}) {
    $xfer += $output->writeFieldBegin('notifiedShutdownSquare', Thrift::TType::STRUCT, 19);
    $xfer += $self->{notifiedShutdownSquare}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notifiedKickoutFromSquare}) {
    $xfer += $output->writeFieldBegin('notifiedKickoutFromSquare', Thrift::TType::STRUCT, 20);
    $xfer += $self->{notifiedKickoutFromSquare}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notifiedDeleteSquareChat}) {
    $xfer += $output->writeFieldBegin('notifiedDeleteSquareChat', Thrift::TType::STRUCT, 21);
    $xfer += $self->{notifiedDeleteSquareChat}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notificationJoinRequest}) {
    $xfer += $output->writeFieldBegin('notificationJoinRequest', Thrift::TType::STRUCT, 22);
    $xfer += $self->{notificationJoinRequest}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notificationJoined}) {
    $xfer += $output->writeFieldBegin('notificationJoined', Thrift::TType::STRUCT, 23);
    $xfer += $self->{notificationJoined}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notificationPromoteCoadmin}) {
    $xfer += $output->writeFieldBegin('notificationPromoteCoadmin', Thrift::TType::STRUCT, 24);
    $xfer += $self->{notificationPromoteCoadmin}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notificationPromoteAdmin}) {
    $xfer += $output->writeFieldBegin('notificationPromoteAdmin', Thrift::TType::STRUCT, 25);
    $xfer += $self->{notificationPromoteAdmin}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notificationDemoteMember}) {
    $xfer += $output->writeFieldBegin('notificationDemoteMember', Thrift::TType::STRUCT, 26);
    $xfer += $self->{notificationDemoteMember}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notificationKickedOut}) {
    $xfer += $output->writeFieldBegin('notificationKickedOut', Thrift::TType::STRUCT, 27);
    $xfer += $self->{notificationKickedOut}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notificationSquareDelete}) {
    $xfer += $output->writeFieldBegin('notificationSquareDelete', Thrift::TType::STRUCT, 28);
    $xfer += $self->{notificationSquareDelete}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notificationSquareChatDelete}) {
    $xfer += $output->writeFieldBegin('notificationSquareChatDelete', Thrift::TType::STRUCT, 29);
    $xfer += $self->{notificationSquareChatDelete}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notificationMessage}) {
    $xfer += $output->writeFieldBegin('notificationMessage', Thrift::TType::STRUCT, 30);
    $xfer += $self->{notificationMessage}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notifiedUpdateSquareChatProfileName}) {
    $xfer += $output->writeFieldBegin('notifiedUpdateSquareChatProfileName', Thrift::TType::STRUCT, 31);
    $xfer += $self->{notifiedUpdateSquareChatProfileName}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notifiedUpdateSquareChatProfileImage}) {
    $xfer += $output->writeFieldBegin('notifiedUpdateSquareChatProfileImage', Thrift::TType::STRUCT, 32);
    $xfer += $self->{notifiedUpdateSquareChatProfileImage}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notifiedUpdateSquareFeatureSet}) {
    $xfer += $output->writeFieldBegin('notifiedUpdateSquareFeatureSet', Thrift::TType::STRUCT, 33);
    $xfer += $self->{notifiedUpdateSquareFeatureSet}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareEvent;
use base qw(Class::Accessor);
SquareEvent->mk_accessors( qw( createdTime type payload syncToken eventStatus ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{createdTime} = undef;
  $self->{type} = undef;
  $self->{payload} = undef;
  $self->{syncToken} = undef;
  $self->{eventStatus} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{createdTime}) {
      $self->{createdTime} = $vals->{createdTime};
    }
    if (defined $vals->{type}) {
      $self->{type} = $vals->{type};
    }
    if (defined $vals->{payload}) {
      $self->{payload} = $vals->{payload};
    }
    if (defined $vals->{syncToken}) {
      $self->{syncToken} = $vals->{syncToken};
    }
    if (defined $vals->{eventStatus}) {
      $self->{eventStatus} = $vals->{eventStatus};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareEvent';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{createdTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{type});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{payload} = SquareEventPayload->new();
        $xfer += $self->{payload}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{syncToken});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{eventStatus});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareEvent');
  if (defined $self->{createdTime}) {
    $xfer += $output->writeFieldBegin('createdTime', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{createdTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type}) {
    $xfer += $output->writeFieldBegin('type', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{type});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{payload}) {
    $xfer += $output->writeFieldBegin('payload', Thrift::TType::STRUCT, 4);
    $xfer += $self->{payload}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{syncToken}) {
    $xfer += $output->writeFieldBegin('syncToken', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{syncToken});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{eventStatus}) {
    $xfer += $output->writeFieldBegin('eventStatus', Thrift::TType::I32, 6);
    $xfer += $output->writeI32($self->{eventStatus});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package FetchMyEventsRequest;
use base qw(Class::Accessor);
FetchMyEventsRequest->mk_accessors( qw( subscriptionId syncToken limit continuationToken ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{subscriptionId} = undef;
  $self->{syncToken} = undef;
  $self->{limit} = undef;
  $self->{continuationToken} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{subscriptionId}) {
      $self->{subscriptionId} = $vals->{subscriptionId};
    }
    if (defined $vals->{syncToken}) {
      $self->{syncToken} = $vals->{syncToken};
    }
    if (defined $vals->{limit}) {
      $self->{limit} = $vals->{limit};
    }
    if (defined $vals->{continuationToken}) {
      $self->{continuationToken} = $vals->{continuationToken};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'FetchMyEventsRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{subscriptionId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{syncToken});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{limit});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{continuationToken});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('FetchMyEventsRequest');
  if (defined $self->{subscriptionId}) {
    $xfer += $output->writeFieldBegin('subscriptionId', Thrift::TType::I64, 1);
    $xfer += $output->writeI64($self->{subscriptionId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{syncToken}) {
    $xfer += $output->writeFieldBegin('syncToken', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{syncToken});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{limit}) {
    $xfer += $output->writeFieldBegin('limit', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{limit});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{continuationToken}) {
    $xfer += $output->writeFieldBegin('continuationToken', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{continuationToken});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package FetchMyEventsResponse;
use base qw(Class::Accessor);
FetchMyEventsResponse->mk_accessors( qw( subscription events syncToken continuationToken ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{subscription} = undef;
  $self->{events} = undef;
  $self->{syncToken} = undef;
  $self->{continuationToken} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{subscription}) {
      $self->{subscription} = $vals->{subscription};
    }
    if (defined $vals->{events}) {
      $self->{events} = $vals->{events};
    }
    if (defined $vals->{syncToken}) {
      $self->{syncToken} = $vals->{syncToken};
    }
    if (defined $vals->{continuationToken}) {
      $self->{continuationToken} = $vals->{continuationToken};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'FetchMyEventsResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{subscription} = SubscriptionState->new();
        $xfer += $self->{subscription}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size608 = 0;
          $self->{events} = [];
          my $_etype611 = 0;
          $xfer += $input->readListBegin(\$_etype611, \$_size608);
          for (my $_i612 = 0; $_i612 < $_size608; ++$_i612)
          {
            my $elem613 = undef;
            $elem613 = SquareEvent->new();
            $xfer += $elem613->read($input);
            push(@{$self->{events}},$elem613);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{syncToken});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{continuationToken});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('FetchMyEventsResponse');
  if (defined $self->{subscription}) {
    $xfer += $output->writeFieldBegin('subscription', Thrift::TType::STRUCT, 1);
    $xfer += $self->{subscription}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{events}) {
    $xfer += $output->writeFieldBegin('events', Thrift::TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{events}}));
      {
        foreach my $iter614 (@{$self->{events}}) 
        {
          $xfer += ${iter614}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{syncToken}) {
    $xfer += $output->writeFieldBegin('syncToken', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{syncToken});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{continuationToken}) {
    $xfer += $output->writeFieldBegin('continuationToken', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{continuationToken});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package FetchSquareChatEventsRequest;
use base qw(Class::Accessor);
FetchSquareChatEventsRequest->mk_accessors( qw( subscriptionId squareChatMid syncToken limit direction ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{subscriptionId} = undef;
  $self->{squareChatMid} = undef;
  $self->{syncToken} = undef;
  $self->{limit} = undef;
  $self->{direction} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{subscriptionId}) {
      $self->{subscriptionId} = $vals->{subscriptionId};
    }
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
    if (defined $vals->{syncToken}) {
      $self->{syncToken} = $vals->{syncToken};
    }
    if (defined $vals->{limit}) {
      $self->{limit} = $vals->{limit};
    }
    if (defined $vals->{direction}) {
      $self->{direction} = $vals->{direction};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'FetchSquareChatEventsRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{subscriptionId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{syncToken});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{limit});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{direction});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('FetchSquareChatEventsRequest');
  if (defined $self->{subscriptionId}) {
    $xfer += $output->writeFieldBegin('subscriptionId', Thrift::TType::I64, 1);
    $xfer += $output->writeI64($self->{subscriptionId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{syncToken}) {
    $xfer += $output->writeFieldBegin('syncToken', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{syncToken});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{limit}) {
    $xfer += $output->writeFieldBegin('limit', Thrift::TType::I32, 4);
    $xfer += $output->writeI32($self->{limit});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{direction}) {
    $xfer += $output->writeFieldBegin('direction', Thrift::TType::I32, 5);
    $xfer += $output->writeI32($self->{direction});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package FetchSquareChatEventsResponse;
use base qw(Class::Accessor);
FetchSquareChatEventsResponse->mk_accessors( qw( subscription events syncToken continuationToken ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{subscription} = undef;
  $self->{events} = undef;
  $self->{syncToken} = undef;
  $self->{continuationToken} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{subscription}) {
      $self->{subscription} = $vals->{subscription};
    }
    if (defined $vals->{events}) {
      $self->{events} = $vals->{events};
    }
    if (defined $vals->{syncToken}) {
      $self->{syncToken} = $vals->{syncToken};
    }
    if (defined $vals->{continuationToken}) {
      $self->{continuationToken} = $vals->{continuationToken};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'FetchSquareChatEventsResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{subscription} = SubscriptionState->new();
        $xfer += $self->{subscription}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size615 = 0;
          $self->{events} = [];
          my $_etype618 = 0;
          $xfer += $input->readListBegin(\$_etype618, \$_size615);
          for (my $_i619 = 0; $_i619 < $_size615; ++$_i619)
          {
            my $elem620 = undef;
            $elem620 = SquareEvent->new();
            $xfer += $elem620->read($input);
            push(@{$self->{events}},$elem620);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{syncToken});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{continuationToken});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('FetchSquareChatEventsResponse');
  if (defined $self->{subscription}) {
    $xfer += $output->writeFieldBegin('subscription', Thrift::TType::STRUCT, 1);
    $xfer += $self->{subscription}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{events}) {
    $xfer += $output->writeFieldBegin('events', Thrift::TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{events}}));
      {
        foreach my $iter621 (@{$self->{events}}) 
        {
          $xfer += ${iter621}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{syncToken}) {
    $xfer += $output->writeFieldBegin('syncToken', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{syncToken});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{continuationToken}) {
    $xfer += $output->writeFieldBegin('continuationToken', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{continuationToken});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package InviteToSquareRequest;
use base qw(Class::Accessor);
InviteToSquareRequest->mk_accessors( qw( squareMid invitees squareChatMid ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareMid} = undef;
  $self->{invitees} = undef;
  $self->{squareChatMid} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareMid}) {
      $self->{squareMid} = $vals->{squareMid};
    }
    if (defined $vals->{invitees}) {
      $self->{invitees} = $vals->{invitees};
    }
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'InviteToSquareRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size622 = 0;
          $self->{invitees} = [];
          my $_etype625 = 0;
          $xfer += $input->readListBegin(\$_etype625, \$_size622);
          for (my $_i626 = 0; $_i626 < $_size622; ++$_i626)
          {
            my $elem627 = undef;
            $xfer += $input->readString(\$elem627);
            push(@{$self->{invitees}},$elem627);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('InviteToSquareRequest');
  if (defined $self->{squareMid}) {
    $xfer += $output->writeFieldBegin('squareMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{invitees}) {
    $xfer += $output->writeFieldBegin('invitees', Thrift::TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{invitees}}));
      {
        foreach my $iter628 (@{$self->{invitees}}) 
        {
          $xfer += $output->writeString($iter628);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package InviteToSquareResponse;
use base qw(Class::Accessor);

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  return bless ($self, $classname);
}

sub getName {
  return 'InviteToSquareResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('InviteToSquareResponse');
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package InviteToSquareChatRequest;
use base qw(Class::Accessor);
InviteToSquareChatRequest->mk_accessors( qw( inviteeMids squareChatMid ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{inviteeMids} = undef;
  $self->{squareChatMid} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{inviteeMids}) {
      $self->{inviteeMids} = $vals->{inviteeMids};
    }
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'InviteToSquareChatRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size629 = 0;
          $self->{inviteeMids} = [];
          my $_etype632 = 0;
          $xfer += $input->readListBegin(\$_etype632, \$_size629);
          for (my $_i633 = 0; $_i633 < $_size629; ++$_i633)
          {
            my $elem634 = undef;
            $xfer += $input->readString(\$elem634);
            push(@{$self->{inviteeMids}},$elem634);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('InviteToSquareChatRequest');
  if (defined $self->{inviteeMids}) {
    $xfer += $output->writeFieldBegin('inviteeMids', Thrift::TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{inviteeMids}}));
      {
        foreach my $iter635 (@{$self->{inviteeMids}}) 
        {
          $xfer += $output->writeString($iter635);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package InviteToSquareChatResponse;
use base qw(Class::Accessor);
InviteToSquareChatResponse->mk_accessors( qw( inviteeMids ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{inviteeMids} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{inviteeMids}) {
      $self->{inviteeMids} = $vals->{inviteeMids};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'InviteToSquareChatResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size636 = 0;
          $self->{inviteeMids} = [];
          my $_etype639 = 0;
          $xfer += $input->readListBegin(\$_etype639, \$_size636);
          for (my $_i640 = 0; $_i640 < $_size636; ++$_i640)
          {
            my $elem641 = undef;
            $xfer += $input->readString(\$elem641);
            push(@{$self->{inviteeMids}},$elem641);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('InviteToSquareChatResponse');
  if (defined $self->{inviteeMids}) {
    $xfer += $output->writeFieldBegin('inviteeMids', Thrift::TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{inviteeMids}}));
      {
        foreach my $iter642 (@{$self->{inviteeMids}}) 
        {
          $xfer += $output->writeString($iter642);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GetSquareMemberRequest;
use base qw(Class::Accessor);
GetSquareMemberRequest->mk_accessors( qw( squareMemberMid ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareMemberMid} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareMemberMid}) {
      $self->{squareMemberMid} = $vals->{squareMemberMid};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetSquareMemberRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMemberMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetSquareMemberRequest');
  if (defined $self->{squareMemberMid}) {
    $xfer += $output->writeFieldBegin('squareMemberMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareMemberMid});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GetSquareMemberResponse;
use base qw(Class::Accessor);
GetSquareMemberResponse->mk_accessors( qw( squareMember relation oneOnOneChatMid ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareMember} = undef;
  $self->{relation} = undef;
  $self->{oneOnOneChatMid} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareMember}) {
      $self->{squareMember} = $vals->{squareMember};
    }
    if (defined $vals->{relation}) {
      $self->{relation} = $vals->{relation};
    }
    if (defined $vals->{oneOnOneChatMid}) {
      $self->{oneOnOneChatMid} = $vals->{oneOnOneChatMid};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetSquareMemberResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareMember} = SquareMember->new();
        $xfer += $self->{squareMember}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{relation} = SquareMemberRelation->new();
        $xfer += $self->{relation}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{oneOnOneChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetSquareMemberResponse');
  if (defined $self->{squareMember}) {
    $xfer += $output->writeFieldBegin('squareMember', Thrift::TType::STRUCT, 1);
    $xfer += $self->{squareMember}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{relation}) {
    $xfer += $output->writeFieldBegin('relation', Thrift::TType::STRUCT, 2);
    $xfer += $self->{relation}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{oneOnOneChatMid}) {
    $xfer += $output->writeFieldBegin('oneOnOneChatMid', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{oneOnOneChatMid});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GetSquareMembersRequest;
use base qw(Class::Accessor);
GetSquareMembersRequest->mk_accessors( qw( mids ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{mids} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{mids}) {
      $self->{mids} = $vals->{mids};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetSquareMembersRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::SET) {
        {
          my $_size643 = 0;
          $self->{mids} = {};
          my $_etype646 = 0;
          $xfer += $input->readSetBegin(\$_etype646, \$_size643);
          for (my $_i647 = 0; $_i647 < $_size643; ++$_i647)
          {
            my $elem648 = undef;
            $xfer += $input->readString(\$elem648);
            $self->{mids}->{$elem648} = 1;
          }
          $xfer += $input->readSetEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetSquareMembersRequest');
  if (defined $self->{mids}) {
    $xfer += $output->writeFieldBegin('mids', Thrift::TType::SET, 2);
    {
      $xfer += $output->writeSetBegin(Thrift::TType::STRING, scalar(@{$self->{mids}}));
      {
        foreach my $iter649 (@{$self->{mids}})
        {
          $xfer += $output->writeString($iter649);
        }
      }
      $xfer += $output->writeSetEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GetSquareMembersResponse;
use base qw(Class::Accessor);
GetSquareMembersResponse->mk_accessors( qw( members ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{members} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{members}) {
      $self->{members} = $vals->{members};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetSquareMembersResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{members} = SquareMember->new();
        $xfer += $self->{members}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetSquareMembersResponse');
  if (defined $self->{members}) {
    $xfer += $output->writeFieldBegin('members', Thrift::TType::STRUCT, 1);
    $xfer += $self->{members}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GetSquareMemberRelationsRequest;
use base qw(Class::Accessor);
GetSquareMemberRelationsRequest->mk_accessors( qw( state continuationToken limit ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{state} = undef;
  $self->{continuationToken} = undef;
  $self->{limit} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{state}) {
      $self->{state} = $vals->{state};
    }
    if (defined $vals->{continuationToken}) {
      $self->{continuationToken} = $vals->{continuationToken};
    }
    if (defined $vals->{limit}) {
      $self->{limit} = $vals->{limit};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetSquareMemberRelationsRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{state});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{continuationToken});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{limit});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetSquareMemberRelationsRequest');
  if (defined $self->{state}) {
    $xfer += $output->writeFieldBegin('state', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{state});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{continuationToken}) {
    $xfer += $output->writeFieldBegin('continuationToken', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{continuationToken});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{limit}) {
    $xfer += $output->writeFieldBegin('limit', Thrift::TType::I32, 4);
    $xfer += $output->writeI32($self->{limit});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GetSquareMemberRelationsResponse;
use base qw(Class::Accessor);
GetSquareMemberRelationsResponse->mk_accessors( qw( squareMembers relations continuationToken ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareMembers} = undef;
  $self->{relations} = undef;
  $self->{continuationToken} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareMembers}) {
      $self->{squareMembers} = $vals->{squareMembers};
    }
    if (defined $vals->{relations}) {
      $self->{relations} = $vals->{relations};
    }
    if (defined $vals->{continuationToken}) {
      $self->{continuationToken} = $vals->{continuationToken};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetSquareMemberRelationsResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size650 = 0;
          $self->{squareMembers} = [];
          my $_etype653 = 0;
          $xfer += $input->readListBegin(\$_etype653, \$_size650);
          for (my $_i654 = 0; $_i654 < $_size650; ++$_i654)
          {
            my $elem655 = undef;
            $elem655 = SquareMember->new();
            $xfer += $elem655->read($input);
            push(@{$self->{squareMembers}},$elem655);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size656 = 0;
          $self->{relations} = {};
          my $_ktype657 = 0;
          my $_vtype658 = 0;
          $xfer += $input->readMapBegin(\$_ktype657, \$_vtype658, \$_size656);
          for (my $_i660 = 0; $_i660 < $_size656; ++$_i660)
          {
            my $key661 = '';
            my $val662 = new SquareMemberRelation();
            $xfer += $input->readString(\$key661);
            $val662 = SquareMemberRelation->new();
            $xfer += $val662->read($input);
            $self->{relations}->{$key661} = $val662;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{continuationToken});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetSquareMemberRelationsResponse');
  if (defined $self->{squareMembers}) {
    $xfer += $output->writeFieldBegin('squareMembers', Thrift::TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{squareMembers}}));
      {
        foreach my $iter663 (@{$self->{squareMembers}}) 
        {
          $xfer += ${iter663}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{relations}) {
    $xfer += $output->writeFieldBegin('relations', Thrift::TType::MAP, 2);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRUCT, scalar(keys %{$self->{relations}}));
      {
        while( my ($kiter664,$viter665) = each %{$self->{relations}}) 
        {
          $xfer += $output->writeString($kiter664);
          $xfer += ${viter665}->write($output);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{continuationToken}) {
    $xfer += $output->writeFieldBegin('continuationToken', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{continuationToken});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GetSquareMemberRelationRequest;
use base qw(Class::Accessor);
GetSquareMemberRelationRequest->mk_accessors( qw( squareMid targetSquareMemberMid ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareMid} = undef;
  $self->{targetSquareMemberMid} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareMid}) {
      $self->{squareMid} = $vals->{squareMid};
    }
    if (defined $vals->{targetSquareMemberMid}) {
      $self->{targetSquareMemberMid} = $vals->{targetSquareMemberMid};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetSquareMemberRelationRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{targetSquareMemberMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetSquareMemberRelationRequest');
  if (defined $self->{squareMid}) {
    $xfer += $output->writeFieldBegin('squareMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{targetSquareMemberMid}) {
    $xfer += $output->writeFieldBegin('targetSquareMemberMid', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{targetSquareMemberMid});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GetSquareMemberRelationResponse;
use base qw(Class::Accessor);
GetSquareMemberRelationResponse->mk_accessors( qw( squareMid targetSquareMemberMid relation ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareMid} = undef;
  $self->{targetSquareMemberMid} = undef;
  $self->{relation} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareMid}) {
      $self->{squareMid} = $vals->{squareMid};
    }
    if (defined $vals->{targetSquareMemberMid}) {
      $self->{targetSquareMemberMid} = $vals->{targetSquareMemberMid};
    }
    if (defined $vals->{relation}) {
      $self->{relation} = $vals->{relation};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetSquareMemberRelationResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{targetSquareMemberMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{relation} = SquareMemberRelation->new();
        $xfer += $self->{relation}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetSquareMemberRelationResponse');
  if (defined $self->{squareMid}) {
    $xfer += $output->writeFieldBegin('squareMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{targetSquareMemberMid}) {
    $xfer += $output->writeFieldBegin('targetSquareMemberMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{targetSquareMemberMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{relation}) {
    $xfer += $output->writeFieldBegin('relation', Thrift::TType::STRUCT, 3);
    $xfer += $self->{relation}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Category;
use base qw(Class::Accessor);
Category->mk_accessors( qw( id name ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{id} = undef;
  $self->{name} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{id}) {
      $self->{id} = $vals->{id};
    }
    if (defined $vals->{name}) {
      $self->{name} = $vals->{name};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Category';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{id});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{name});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Category');
  if (defined $self->{id}) {
    $xfer += $output->writeFieldBegin('id', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{id});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{name}) {
    $xfer += $output->writeFieldBegin('name', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{name});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GetSquareCategoriesRequest;
use base qw(Class::Accessor);

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  return bless ($self, $classname);
}

sub getName {
  return 'GetSquareCategoriesRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetSquareCategoriesRequest');
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GetSquareCategoriesResponse;
use base qw(Class::Accessor);
GetSquareCategoriesResponse->mk_accessors( qw( categoryList ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{categoryList} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{categoryList}) {
      $self->{categoryList} = $vals->{categoryList};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetSquareCategoriesResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size666 = 0;
          $self->{categoryList} = [];
          my $_etype669 = 0;
          $xfer += $input->readListBegin(\$_etype669, \$_size666);
          for (my $_i670 = 0; $_i670 < $_size666; ++$_i670)
          {
            my $elem671 = undef;
            $elem671 = Category->new();
            $xfer += $elem671->read($input);
            push(@{$self->{categoryList}},$elem671);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetSquareCategoriesResponse');
  if (defined $self->{categoryList}) {
    $xfer += $output->writeFieldBegin('categoryList', Thrift::TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{categoryList}}));
      {
        foreach my $iter672 (@{$self->{categoryList}}) 
        {
          $xfer += ${iter672}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package UpdateSquareRequest;
use base qw(Class::Accessor);
UpdateSquareRequest->mk_accessors( qw( updatedAttrs square ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{updatedAttrs} = undef;
  $self->{square} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{updatedAttrs}) {
      $self->{updatedAttrs} = $vals->{updatedAttrs};
    }
    if (defined $vals->{square}) {
      $self->{square} = $vals->{square};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'UpdateSquareRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::SET) {
        {
          my $_size673 = 0;
          $self->{updatedAttrs} = {};
          my $_etype676 = 0;
          $xfer += $input->readSetBegin(\$_etype676, \$_size673);
          for (my $_i677 = 0; $_i677 < $_size673; ++$_i677)
          {
            my $elem678 = undef;
            $xfer += $input->readI32(\$elem678);
            $self->{updatedAttrs}->{$elem678} = 1;
          }
          $xfer += $input->readSetEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{square} = Square->new();
        $xfer += $self->{square}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('UpdateSquareRequest');
  if (defined $self->{updatedAttrs}) {
    $xfer += $output->writeFieldBegin('updatedAttrs', Thrift::TType::SET, 2);
    {
      $xfer += $output->writeSetBegin(Thrift::TType::I32, scalar(@{$self->{updatedAttrs}}));
      {
        foreach my $iter679 (@{$self->{updatedAttrs}})
        {
          $xfer += $output->writeI32($iter679);
        }
      }
      $xfer += $output->writeSetEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{square}) {
    $xfer += $output->writeFieldBegin('square', Thrift::TType::STRUCT, 3);
    $xfer += $self->{square}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package UpdateSquareResponse;
use base qw(Class::Accessor);
UpdateSquareResponse->mk_accessors( qw( updatedAttrs square ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{updatedAttrs} = undef;
  $self->{square} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{updatedAttrs}) {
      $self->{updatedAttrs} = $vals->{updatedAttrs};
    }
    if (defined $vals->{square}) {
      $self->{square} = $vals->{square};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'UpdateSquareResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::SET) {
        {
          my $_size680 = 0;
          $self->{updatedAttrs} = {};
          my $_etype683 = 0;
          $xfer += $input->readSetBegin(\$_etype683, \$_size680);
          for (my $_i684 = 0; $_i684 < $_size680; ++$_i684)
          {
            my $elem685 = undef;
            $xfer += $input->readI32(\$elem685);
            $self->{updatedAttrs}->{$elem685} = 1;
          }
          $xfer += $input->readSetEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{square} = Square->new();
        $xfer += $self->{square}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('UpdateSquareResponse');
  if (defined $self->{updatedAttrs}) {
    $xfer += $output->writeFieldBegin('updatedAttrs', Thrift::TType::SET, 1);
    {
      $xfer += $output->writeSetBegin(Thrift::TType::I32, scalar(@{$self->{updatedAttrs}}));
      {
        foreach my $iter686 (@{$self->{updatedAttrs}})
        {
          $xfer += $output->writeI32($iter686);
        }
      }
      $xfer += $output->writeSetEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{square}) {
    $xfer += $output->writeFieldBegin('square', Thrift::TType::STRUCT, 2);
    $xfer += $self->{square}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SearchSquaresRequest;
use base qw(Class::Accessor);
SearchSquaresRequest->mk_accessors( qw( query continuationToken limit ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{query} = undef;
  $self->{continuationToken} = undef;
  $self->{limit} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{query}) {
      $self->{query} = $vals->{query};
    }
    if (defined $vals->{continuationToken}) {
      $self->{continuationToken} = $vals->{continuationToken};
    }
    if (defined $vals->{limit}) {
      $self->{limit} = $vals->{limit};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SearchSquaresRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{query});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{continuationToken});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{limit});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SearchSquaresRequest');
  if (defined $self->{query}) {
    $xfer += $output->writeFieldBegin('query', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{query});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{continuationToken}) {
    $xfer += $output->writeFieldBegin('continuationToken', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{continuationToken});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{limit}) {
    $xfer += $output->writeFieldBegin('limit', Thrift::TType::I32, 4);
    $xfer += $output->writeI32($self->{limit});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SearchSquaresResponse;
use base qw(Class::Accessor);
SearchSquaresResponse->mk_accessors( qw( squares squareStatuses myMemberships continuationToken noteStatuses ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squares} = undef;
  $self->{squareStatuses} = undef;
  $self->{myMemberships} = undef;
  $self->{continuationToken} = undef;
  $self->{noteStatuses} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squares}) {
      $self->{squares} = $vals->{squares};
    }
    if (defined $vals->{squareStatuses}) {
      $self->{squareStatuses} = $vals->{squareStatuses};
    }
    if (defined $vals->{myMemberships}) {
      $self->{myMemberships} = $vals->{myMemberships};
    }
    if (defined $vals->{continuationToken}) {
      $self->{continuationToken} = $vals->{continuationToken};
    }
    if (defined $vals->{noteStatuses}) {
      $self->{noteStatuses} = $vals->{noteStatuses};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SearchSquaresResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size687 = 0;
          $self->{squares} = [];
          my $_etype690 = 0;
          $xfer += $input->readListBegin(\$_etype690, \$_size687);
          for (my $_i691 = 0; $_i691 < $_size687; ++$_i691)
          {
            my $elem692 = undef;
            $elem692 = Square->new();
            $xfer += $elem692->read($input);
            push(@{$self->{squares}},$elem692);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size693 = 0;
          $self->{squareStatuses} = {};
          my $_ktype694 = 0;
          my $_vtype695 = 0;
          $xfer += $input->readMapBegin(\$_ktype694, \$_vtype695, \$_size693);
          for (my $_i697 = 0; $_i697 < $_size693; ++$_i697)
          {
            my $key698 = '';
            my $val699 = new SquareStatus();
            $xfer += $input->readString(\$key698);
            $val699 = SquareStatus->new();
            $xfer += $val699->read($input);
            $self->{squareStatuses}->{$key698} = $val699;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size700 = 0;
          $self->{myMemberships} = {};
          my $_ktype701 = 0;
          my $_vtype702 = 0;
          $xfer += $input->readMapBegin(\$_ktype701, \$_vtype702, \$_size700);
          for (my $_i704 = 0; $_i704 < $_size700; ++$_i704)
          {
            my $key705 = '';
            my $val706 = new SquareMember();
            $xfer += $input->readString(\$key705);
            $val706 = SquareMember->new();
            $xfer += $val706->read($input);
            $self->{myMemberships}->{$key705} = $val706;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{continuationToken});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size707 = 0;
          $self->{noteStatuses} = {};
          my $_ktype708 = 0;
          my $_vtype709 = 0;
          $xfer += $input->readMapBegin(\$_ktype708, \$_vtype709, \$_size707);
          for (my $_i711 = 0; $_i711 < $_size707; ++$_i711)
          {
            my $key712 = '';
            my $val713 = new NoteStatus();
            $xfer += $input->readString(\$key712);
            $val713 = NoteStatus->new();
            $xfer += $val713->read($input);
            $self->{noteStatuses}->{$key712} = $val713;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SearchSquaresResponse');
  if (defined $self->{squares}) {
    $xfer += $output->writeFieldBegin('squares', Thrift::TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{squares}}));
      {
        foreach my $iter714 (@{$self->{squares}}) 
        {
          $xfer += ${iter714}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareStatuses}) {
    $xfer += $output->writeFieldBegin('squareStatuses', Thrift::TType::MAP, 2);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRUCT, scalar(keys %{$self->{squareStatuses}}));
      {
        while( my ($kiter715,$viter716) = each %{$self->{squareStatuses}}) 
        {
          $xfer += $output->writeString($kiter715);
          $xfer += ${viter716}->write($output);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{myMemberships}) {
    $xfer += $output->writeFieldBegin('myMemberships', Thrift::TType::MAP, 3);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRUCT, scalar(keys %{$self->{myMemberships}}));
      {
        while( my ($kiter717,$viter718) = each %{$self->{myMemberships}}) 
        {
          $xfer += $output->writeString($kiter717);
          $xfer += ${viter718}->write($output);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{continuationToken}) {
    $xfer += $output->writeFieldBegin('continuationToken', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{continuationToken});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{noteStatuses}) {
    $xfer += $output->writeFieldBegin('noteStatuses', Thrift::TType::MAP, 5);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRUCT, scalar(keys %{$self->{noteStatuses}}));
      {
        while( my ($kiter719,$viter720) = each %{$self->{noteStatuses}}) 
        {
          $xfer += $output->writeString($kiter719);
          $xfer += ${viter720}->write($output);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GetSquareFeatureSetRequest;
use base qw(Class::Accessor);
GetSquareFeatureSetRequest->mk_accessors( qw( squareMid ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareMid} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareMid}) {
      $self->{squareMid} = $vals->{squareMid};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetSquareFeatureSetRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetSquareFeatureSetRequest');
  if (defined $self->{squareMid}) {
    $xfer += $output->writeFieldBegin('squareMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareMid});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GetSquareFeatureSetResponse;
use base qw(Class::Accessor);
GetSquareFeatureSetResponse->mk_accessors( qw( squareFeatureSet ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareFeatureSet} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareFeatureSet}) {
      $self->{squareFeatureSet} = $vals->{squareFeatureSet};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetSquareFeatureSetResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareFeatureSet} = SquareFeatureSet->new();
        $xfer += $self->{squareFeatureSet}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetSquareFeatureSetResponse');
  if (defined $self->{squareFeatureSet}) {
    $xfer += $output->writeFieldBegin('squareFeatureSet', Thrift::TType::STRUCT, 1);
    $xfer += $self->{squareFeatureSet}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package UpdateSquareFeatureSetRequest;
use base qw(Class::Accessor);
UpdateSquareFeatureSetRequest->mk_accessors( qw( updateAttributes squareFeatureSet ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{updateAttributes} = undef;
  $self->{squareFeatureSet} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{updateAttributes}) {
      $self->{updateAttributes} = $vals->{updateAttributes};
    }
    if (defined $vals->{squareFeatureSet}) {
      $self->{squareFeatureSet} = $vals->{squareFeatureSet};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'UpdateSquareFeatureSetRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::SET) {
        {
          my $_size721 = 0;
          $self->{updateAttributes} = {};
          my $_etype724 = 0;
          $xfer += $input->readSetBegin(\$_etype724, \$_size721);
          for (my $_i725 = 0; $_i725 < $_size721; ++$_i725)
          {
            my $elem726 = undef;
            $xfer += $input->readI32(\$elem726);
            $self->{updateAttributes}->{$elem726} = 1;
          }
          $xfer += $input->readSetEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareFeatureSet} = SquareFeatureSet->new();
        $xfer += $self->{squareFeatureSet}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('UpdateSquareFeatureSetRequest');
  if (defined $self->{updateAttributes}) {
    $xfer += $output->writeFieldBegin('updateAttributes', Thrift::TType::SET, 2);
    {
      $xfer += $output->writeSetBegin(Thrift::TType::I32, scalar(@{$self->{updateAttributes}}));
      {
        foreach my $iter727 (@{$self->{updateAttributes}})
        {
          $xfer += $output->writeI32($iter727);
        }
      }
      $xfer += $output->writeSetEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareFeatureSet}) {
    $xfer += $output->writeFieldBegin('squareFeatureSet', Thrift::TType::STRUCT, 3);
    $xfer += $self->{squareFeatureSet}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package UpdateSquareFeatureSetResponse;
use base qw(Class::Accessor);
UpdateSquareFeatureSetResponse->mk_accessors( qw( updateAttributes squareFeatureSet ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{updateAttributes} = undef;
  $self->{squareFeatureSet} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{updateAttributes}) {
      $self->{updateAttributes} = $vals->{updateAttributes};
    }
    if (defined $vals->{squareFeatureSet}) {
      $self->{squareFeatureSet} = $vals->{squareFeatureSet};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'UpdateSquareFeatureSetResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::SET) {
        {
          my $_size728 = 0;
          $self->{updateAttributes} = {};
          my $_etype731 = 0;
          $xfer += $input->readSetBegin(\$_etype731, \$_size728);
          for (my $_i732 = 0; $_i732 < $_size728; ++$_i732)
          {
            my $elem733 = undef;
            $xfer += $input->readI32(\$elem733);
            $self->{updateAttributes}->{$elem733} = 1;
          }
          $xfer += $input->readSetEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareFeatureSet} = SquareFeatureSet->new();
        $xfer += $self->{squareFeatureSet}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('UpdateSquareFeatureSetResponse');
  if (defined $self->{updateAttributes}) {
    $xfer += $output->writeFieldBegin('updateAttributes', Thrift::TType::SET, 1);
    {
      $xfer += $output->writeSetBegin(Thrift::TType::I32, scalar(@{$self->{updateAttributes}}));
      {
        foreach my $iter734 (@{$self->{updateAttributes}})
        {
          $xfer += $output->writeI32($iter734);
        }
      }
      $xfer += $output->writeSetEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareFeatureSet}) {
    $xfer += $output->writeFieldBegin('squareFeatureSet', Thrift::TType::STRUCT, 2);
    $xfer += $self->{squareFeatureSet}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package UpdateSquareMemberRequest;
use base qw(Class::Accessor);
UpdateSquareMemberRequest->mk_accessors( qw( updatedAttrs updatedPreferenceAttrs squareMember ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{updatedAttrs} = undef;
  $self->{updatedPreferenceAttrs} = undef;
  $self->{squareMember} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{updatedAttrs}) {
      $self->{updatedAttrs} = $vals->{updatedAttrs};
    }
    if (defined $vals->{updatedPreferenceAttrs}) {
      $self->{updatedPreferenceAttrs} = $vals->{updatedPreferenceAttrs};
    }
    if (defined $vals->{squareMember}) {
      $self->{squareMember} = $vals->{squareMember};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'UpdateSquareMemberRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::SET) {
        {
          my $_size735 = 0;
          $self->{updatedAttrs} = {};
          my $_etype738 = 0;
          $xfer += $input->readSetBegin(\$_etype738, \$_size735);
          for (my $_i739 = 0; $_i739 < $_size735; ++$_i739)
          {
            my $elem740 = undef;
            $xfer += $input->readI32(\$elem740);
            $self->{updatedAttrs}->{$elem740} = 1;
          }
          $xfer += $input->readSetEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::SET) {
        {
          my $_size741 = 0;
          $self->{updatedPreferenceAttrs} = {};
          my $_etype744 = 0;
          $xfer += $input->readSetBegin(\$_etype744, \$_size741);
          for (my $_i745 = 0; $_i745 < $_size741; ++$_i745)
          {
            my $elem746 = undef;
            $xfer += $input->readI32(\$elem746);
            $self->{updatedPreferenceAttrs}->{$elem746} = 1;
          }
          $xfer += $input->readSetEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareMember} = SquareMember->new();
        $xfer += $self->{squareMember}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('UpdateSquareMemberRequest');
  if (defined $self->{updatedAttrs}) {
    $xfer += $output->writeFieldBegin('updatedAttrs', Thrift::TType::SET, 2);
    {
      $xfer += $output->writeSetBegin(Thrift::TType::I32, scalar(@{$self->{updatedAttrs}}));
      {
        foreach my $iter747 (@{$self->{updatedAttrs}})
        {
          $xfer += $output->writeI32($iter747);
        }
      }
      $xfer += $output->writeSetEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{updatedPreferenceAttrs}) {
    $xfer += $output->writeFieldBegin('updatedPreferenceAttrs', Thrift::TType::SET, 3);
    {
      $xfer += $output->writeSetBegin(Thrift::TType::I32, scalar(@{$self->{updatedPreferenceAttrs}}));
      {
        foreach my $iter748 (@{$self->{updatedPreferenceAttrs}})
        {
          $xfer += $output->writeI32($iter748);
        }
      }
      $xfer += $output->writeSetEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareMember}) {
    $xfer += $output->writeFieldBegin('squareMember', Thrift::TType::STRUCT, 4);
    $xfer += $self->{squareMember}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package UpdateSquareMemberResponse;
use base qw(Class::Accessor);
UpdateSquareMemberResponse->mk_accessors( qw( updatedAttrs squareMember updatedPreferenceAttrs ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{updatedAttrs} = undef;
  $self->{squareMember} = undef;
  $self->{updatedPreferenceAttrs} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{updatedAttrs}) {
      $self->{updatedAttrs} = $vals->{updatedAttrs};
    }
    if (defined $vals->{squareMember}) {
      $self->{squareMember} = $vals->{squareMember};
    }
    if (defined $vals->{updatedPreferenceAttrs}) {
      $self->{updatedPreferenceAttrs} = $vals->{updatedPreferenceAttrs};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'UpdateSquareMemberResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::SET) {
        {
          my $_size749 = 0;
          $self->{updatedAttrs} = {};
          my $_etype752 = 0;
          $xfer += $input->readSetBegin(\$_etype752, \$_size749);
          for (my $_i753 = 0; $_i753 < $_size749; ++$_i753)
          {
            my $elem754 = undef;
            $xfer += $input->readI32(\$elem754);
            $self->{updatedAttrs}->{$elem754} = 1;
          }
          $xfer += $input->readSetEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareMember} = SquareMember->new();
        $xfer += $self->{squareMember}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::SET) {
        {
          my $_size755 = 0;
          $self->{updatedPreferenceAttrs} = {};
          my $_etype758 = 0;
          $xfer += $input->readSetBegin(\$_etype758, \$_size755);
          for (my $_i759 = 0; $_i759 < $_size755; ++$_i759)
          {
            my $elem760 = undef;
            $xfer += $input->readI32(\$elem760);
            $self->{updatedPreferenceAttrs}->{$elem760} = 1;
          }
          $xfer += $input->readSetEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('UpdateSquareMemberResponse');
  if (defined $self->{updatedAttrs}) {
    $xfer += $output->writeFieldBegin('updatedAttrs', Thrift::TType::SET, 1);
    {
      $xfer += $output->writeSetBegin(Thrift::TType::I32, scalar(@{$self->{updatedAttrs}}));
      {
        foreach my $iter761 (@{$self->{updatedAttrs}})
        {
          $xfer += $output->writeI32($iter761);
        }
      }
      $xfer += $output->writeSetEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareMember}) {
    $xfer += $output->writeFieldBegin('squareMember', Thrift::TType::STRUCT, 2);
    $xfer += $self->{squareMember}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{updatedPreferenceAttrs}) {
    $xfer += $output->writeFieldBegin('updatedPreferenceAttrs', Thrift::TType::SET, 3);
    {
      $xfer += $output->writeSetBegin(Thrift::TType::I32, scalar(@{$self->{updatedPreferenceAttrs}}));
      {
        foreach my $iter762 (@{$self->{updatedPreferenceAttrs}})
        {
          $xfer += $output->writeI32($iter762);
        }
      }
      $xfer += $output->writeSetEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package UpdateSquareMembersRequest;
use base qw(Class::Accessor);
UpdateSquareMembersRequest->mk_accessors( qw( updatedAttrs members ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{updatedAttrs} = undef;
  $self->{members} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{updatedAttrs}) {
      $self->{updatedAttrs} = $vals->{updatedAttrs};
    }
    if (defined $vals->{members}) {
      $self->{members} = $vals->{members};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'UpdateSquareMembersRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::SET) {
        {
          my $_size763 = 0;
          $self->{updatedAttrs} = {};
          my $_etype766 = 0;
          $xfer += $input->readSetBegin(\$_etype766, \$_size763);
          for (my $_i767 = 0; $_i767 < $_size763; ++$_i767)
          {
            my $elem768 = undef;
            $xfer += $input->readI32(\$elem768);
            $self->{updatedAttrs}->{$elem768} = 1;
          }
          $xfer += $input->readSetEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size769 = 0;
          $self->{members} = [];
          my $_etype772 = 0;
          $xfer += $input->readListBegin(\$_etype772, \$_size769);
          for (my $_i773 = 0; $_i773 < $_size769; ++$_i773)
          {
            my $elem774 = undef;
            $elem774 = SquareMember->new();
            $xfer += $elem774->read($input);
            push(@{$self->{members}},$elem774);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('UpdateSquareMembersRequest');
  if (defined $self->{updatedAttrs}) {
    $xfer += $output->writeFieldBegin('updatedAttrs', Thrift::TType::SET, 2);
    {
      $xfer += $output->writeSetBegin(Thrift::TType::I32, scalar(@{$self->{updatedAttrs}}));
      {
        foreach my $iter775 (@{$self->{updatedAttrs}})
        {
          $xfer += $output->writeI32($iter775);
        }
      }
      $xfer += $output->writeSetEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{members}) {
    $xfer += $output->writeFieldBegin('members', Thrift::TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{members}}));
      {
        foreach my $iter776 (@{$self->{members}}) 
        {
          $xfer += ${iter776}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package UpdateSquareMembersResponse;
use base qw(Class::Accessor);
UpdateSquareMembersResponse->mk_accessors( qw( updatedAttrs editor members ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{updatedAttrs} = undef;
  $self->{editor} = undef;
  $self->{members} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{updatedAttrs}) {
      $self->{updatedAttrs} = $vals->{updatedAttrs};
    }
    if (defined $vals->{editor}) {
      $self->{editor} = $vals->{editor};
    }
    if (defined $vals->{members}) {
      $self->{members} = $vals->{members};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'UpdateSquareMembersResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::SET) {
        {
          my $_size777 = 0;
          $self->{updatedAttrs} = {};
          my $_etype780 = 0;
          $xfer += $input->readSetBegin(\$_etype780, \$_size777);
          for (my $_i781 = 0; $_i781 < $_size777; ++$_i781)
          {
            my $elem782 = undef;
            $xfer += $input->readI32(\$elem782);
            $self->{updatedAttrs}->{$elem782} = 1;
          }
          $xfer += $input->readSetEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{editor} = SquareMember->new();
        $xfer += $self->{editor}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size783 = 0;
          $self->{members} = {};
          my $_ktype784 = 0;
          my $_vtype785 = 0;
          $xfer += $input->readMapBegin(\$_ktype784, \$_vtype785, \$_size783);
          for (my $_i787 = 0; $_i787 < $_size783; ++$_i787)
          {
            my $key788 = '';
            my $val789 = new SquareMember();
            $xfer += $input->readString(\$key788);
            $val789 = SquareMember->new();
            $xfer += $val789->read($input);
            $self->{members}->{$key788} = $val789;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('UpdateSquareMembersResponse');
  if (defined $self->{updatedAttrs}) {
    $xfer += $output->writeFieldBegin('updatedAttrs', Thrift::TType::SET, 1);
    {
      $xfer += $output->writeSetBegin(Thrift::TType::I32, scalar(@{$self->{updatedAttrs}}));
      {
        foreach my $iter790 (@{$self->{updatedAttrs}})
        {
          $xfer += $output->writeI32($iter790);
        }
      }
      $xfer += $output->writeSetEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{editor}) {
    $xfer += $output->writeFieldBegin('editor', Thrift::TType::STRUCT, 2);
    $xfer += $self->{editor}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{members}) {
    $xfer += $output->writeFieldBegin('members', Thrift::TType::MAP, 3);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRUCT, scalar(keys %{$self->{members}}));
      {
        while( my ($kiter791,$viter792) = each %{$self->{members}}) 
        {
          $xfer += $output->writeString($kiter791);
          $xfer += ${viter792}->write($output);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package RejectSquareMembersRequest;
use base qw(Class::Accessor);
RejectSquareMembersRequest->mk_accessors( qw( squareMid requestedMemberMids ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareMid} = undef;
  $self->{requestedMemberMids} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareMid}) {
      $self->{squareMid} = $vals->{squareMid};
    }
    if (defined $vals->{requestedMemberMids}) {
      $self->{requestedMemberMids} = $vals->{requestedMemberMids};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RejectSquareMembersRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size793 = 0;
          $self->{requestedMemberMids} = [];
          my $_etype796 = 0;
          $xfer += $input->readListBegin(\$_etype796, \$_size793);
          for (my $_i797 = 0; $_i797 < $_size793; ++$_i797)
          {
            my $elem798 = undef;
            $xfer += $input->readString(\$elem798);
            push(@{$self->{requestedMemberMids}},$elem798);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RejectSquareMembersRequest');
  if (defined $self->{squareMid}) {
    $xfer += $output->writeFieldBegin('squareMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{requestedMemberMids}) {
    $xfer += $output->writeFieldBegin('requestedMemberMids', Thrift::TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{requestedMemberMids}}));
      {
        foreach my $iter799 (@{$self->{requestedMemberMids}}) 
        {
          $xfer += $output->writeString($iter799);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package RejectSquareMembersResponse;
use base qw(Class::Accessor);
RejectSquareMembersResponse->mk_accessors( qw( rejectedMembers status ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{rejectedMembers} = undef;
  $self->{status} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{rejectedMembers}) {
      $self->{rejectedMembers} = $vals->{rejectedMembers};
    }
    if (defined $vals->{status}) {
      $self->{status} = $vals->{status};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RejectSquareMembersResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size800 = 0;
          $self->{rejectedMembers} = [];
          my $_etype803 = 0;
          $xfer += $input->readListBegin(\$_etype803, \$_size800);
          for (my $_i804 = 0; $_i804 < $_size800; ++$_i804)
          {
            my $elem805 = undef;
            $elem805 = SquareMember->new();
            $xfer += $elem805->read($input);
            push(@{$self->{rejectedMembers}},$elem805);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{status} = SquareStatus->new();
        $xfer += $self->{status}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RejectSquareMembersResponse');
  if (defined $self->{rejectedMembers}) {
    $xfer += $output->writeFieldBegin('rejectedMembers', Thrift::TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{rejectedMembers}}));
      {
        foreach my $iter806 (@{$self->{rejectedMembers}}) 
        {
          $xfer += ${iter806}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{status}) {
    $xfer += $output->writeFieldBegin('status', Thrift::TType::STRUCT, 2);
    $xfer += $self->{status}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package RemoveSubscriptionsRequest;
use base qw(Class::Accessor);
RemoveSubscriptionsRequest->mk_accessors( qw( unsubscriptions ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{unsubscriptions} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{unsubscriptions}) {
      $self->{unsubscriptions} = $vals->{unsubscriptions};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RemoveSubscriptionsRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size807 = 0;
          $self->{unsubscriptions} = [];
          my $_etype810 = 0;
          $xfer += $input->readListBegin(\$_etype810, \$_size807);
          for (my $_i811 = 0; $_i811 < $_size807; ++$_i811)
          {
            my $elem812 = undef;
            $xfer += $input->readI64(\$elem812);
            push(@{$self->{unsubscriptions}},$elem812);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RemoveSubscriptionsRequest');
  if (defined $self->{unsubscriptions}) {
    $xfer += $output->writeFieldBegin('unsubscriptions', Thrift::TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(Thrift::TType::I64, scalar(@{$self->{unsubscriptions}}));
      {
        foreach my $iter813 (@{$self->{unsubscriptions}}) 
        {
          $xfer += $output->writeI64($iter813);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package RemoveSubscriptionsResponse;
use base qw(Class::Accessor);

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  return bless ($self, $classname);
}

sub getName {
  return 'RemoveSubscriptionsResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RemoveSubscriptionsResponse');
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package RefreshSubscriptionsRequest;
use base qw(Class::Accessor);
RefreshSubscriptionsRequest->mk_accessors( qw( subscriptions ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{subscriptions} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{subscriptions}) {
      $self->{subscriptions} = $vals->{subscriptions};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RefreshSubscriptionsRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size814 = 0;
          $self->{subscriptions} = [];
          my $_etype817 = 0;
          $xfer += $input->readListBegin(\$_etype817, \$_size814);
          for (my $_i818 = 0; $_i818 < $_size814; ++$_i818)
          {
            my $elem819 = undef;
            $xfer += $input->readI64(\$elem819);
            push(@{$self->{subscriptions}},$elem819);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RefreshSubscriptionsRequest');
  if (defined $self->{subscriptions}) {
    $xfer += $output->writeFieldBegin('subscriptions', Thrift::TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(Thrift::TType::I64, scalar(@{$self->{subscriptions}}));
      {
        foreach my $iter820 (@{$self->{subscriptions}}) 
        {
          $xfer += $output->writeI64($iter820);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package RefreshSubscriptionsResponse;
use base qw(Class::Accessor);
RefreshSubscriptionsResponse->mk_accessors( qw( ttlMillis subscriptionStates ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{ttlMillis} = undef;
  $self->{subscriptionStates} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{ttlMillis}) {
      $self->{ttlMillis} = $vals->{ttlMillis};
    }
    if (defined $vals->{subscriptionStates}) {
      $self->{subscriptionStates} = $vals->{subscriptionStates};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RefreshSubscriptionsResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{ttlMillis});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size821 = 0;
          $self->{subscriptionStates} = {};
          my $_ktype822 = 0;
          my $_vtype823 = 0;
          $xfer += $input->readMapBegin(\$_ktype822, \$_vtype823, \$_size821);
          for (my $_i825 = 0; $_i825 < $_size821; ++$_i825)
          {
            my $key826 = 0;
            my $val827 = new SubscriptionState();
            $xfer += $input->readI64(\$key826);
            $val827 = SubscriptionState->new();
            $xfer += $val827->read($input);
            $self->{subscriptionStates}->{$key826} = $val827;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RefreshSubscriptionsResponse');
  if (defined $self->{ttlMillis}) {
    $xfer += $output->writeFieldBegin('ttlMillis', Thrift::TType::I64, 1);
    $xfer += $output->writeI64($self->{ttlMillis});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{subscriptionStates}) {
    $xfer += $output->writeFieldBegin('subscriptionStates', Thrift::TType::MAP, 2);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::I64, Thrift::TType::STRUCT, scalar(keys %{$self->{subscriptionStates}}));
      {
        while( my ($kiter828,$viter829) = each %{$self->{subscriptionStates}}) 
        {
          $xfer += $output->writeI64($kiter828);
          $xfer += ${viter829}->write($output);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package UpdateSquareChatRequest;
use base qw(Class::Accessor);
UpdateSquareChatRequest->mk_accessors( qw( updatedAttrs squareChat ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{updatedAttrs} = undef;
  $self->{squareChat} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{updatedAttrs}) {
      $self->{updatedAttrs} = $vals->{updatedAttrs};
    }
    if (defined $vals->{squareChat}) {
      $self->{squareChat} = $vals->{squareChat};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'UpdateSquareChatRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::SET) {
        {
          my $_size830 = 0;
          $self->{updatedAttrs} = {};
          my $_etype833 = 0;
          $xfer += $input->readSetBegin(\$_etype833, \$_size830);
          for (my $_i834 = 0; $_i834 < $_size830; ++$_i834)
          {
            my $elem835 = undef;
            $xfer += $input->readI32(\$elem835);
            $self->{updatedAttrs}->{$elem835} = 1;
          }
          $xfer += $input->readSetEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareChat} = SquareChat->new();
        $xfer += $self->{squareChat}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('UpdateSquareChatRequest');
  if (defined $self->{updatedAttrs}) {
    $xfer += $output->writeFieldBegin('updatedAttrs', Thrift::TType::SET, 2);
    {
      $xfer += $output->writeSetBegin(Thrift::TType::I32, scalar(@{$self->{updatedAttrs}}));
      {
        foreach my $iter836 (@{$self->{updatedAttrs}})
        {
          $xfer += $output->writeI32($iter836);
        }
      }
      $xfer += $output->writeSetEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareChat}) {
    $xfer += $output->writeFieldBegin('squareChat', Thrift::TType::STRUCT, 3);
    $xfer += $self->{squareChat}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package UpdateSquareChatResponse;
use base qw(Class::Accessor);
UpdateSquareChatResponse->mk_accessors( qw( updatedAttrs squareChat ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{updatedAttrs} = undef;
  $self->{squareChat} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{updatedAttrs}) {
      $self->{updatedAttrs} = $vals->{updatedAttrs};
    }
    if (defined $vals->{squareChat}) {
      $self->{squareChat} = $vals->{squareChat};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'UpdateSquareChatResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::SET) {
        {
          my $_size837 = 0;
          $self->{updatedAttrs} = {};
          my $_etype840 = 0;
          $xfer += $input->readSetBegin(\$_etype840, \$_size837);
          for (my $_i841 = 0; $_i841 < $_size837; ++$_i841)
          {
            my $elem842 = undef;
            $xfer += $input->readI32(\$elem842);
            $self->{updatedAttrs}->{$elem842} = 1;
          }
          $xfer += $input->readSetEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareChat} = SquareChat->new();
        $xfer += $self->{squareChat}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('UpdateSquareChatResponse');
  if (defined $self->{updatedAttrs}) {
    $xfer += $output->writeFieldBegin('updatedAttrs', Thrift::TType::SET, 1);
    {
      $xfer += $output->writeSetBegin(Thrift::TType::I32, scalar(@{$self->{updatedAttrs}}));
      {
        foreach my $iter843 (@{$self->{updatedAttrs}})
        {
          $xfer += $output->writeI32($iter843);
        }
      }
      $xfer += $output->writeSetEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareChat}) {
    $xfer += $output->writeFieldBegin('squareChat', Thrift::TType::STRUCT, 2);
    $xfer += $self->{squareChat}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DeleteSquareChatRequest;
use base qw(Class::Accessor);
DeleteSquareChatRequest->mk_accessors( qw( squareChatMid revision ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareChatMid} = undef;
  $self->{revision} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
    if (defined $vals->{revision}) {
      $self->{revision} = $vals->{revision};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'DeleteSquareChatRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{revision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('DeleteSquareChatRequest');
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{revision}) {
    $xfer += $output->writeFieldBegin('revision', Thrift::TType::I64, 3);
    $xfer += $output->writeI64($self->{revision});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DeleteSquareChatResponse;
use base qw(Class::Accessor);

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  return bless ($self, $classname);
}

sub getName {
  return 'DeleteSquareChatResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('DeleteSquareChatResponse');
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package UpdateSquareChatMemberRequest;
use base qw(Class::Accessor);
UpdateSquareChatMemberRequest->mk_accessors( qw( updatedAttrs chatMember ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{updatedAttrs} = undef;
  $self->{chatMember} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{updatedAttrs}) {
      $self->{updatedAttrs} = $vals->{updatedAttrs};
    }
    if (defined $vals->{chatMember}) {
      $self->{chatMember} = $vals->{chatMember};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'UpdateSquareChatMemberRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::SET) {
        {
          my $_size844 = 0;
          $self->{updatedAttrs} = {};
          my $_etype847 = 0;
          $xfer += $input->readSetBegin(\$_etype847, \$_size844);
          for (my $_i848 = 0; $_i848 < $_size844; ++$_i848)
          {
            my $elem849 = undef;
            $xfer += $input->readI32(\$elem849);
            $self->{updatedAttrs}->{$elem849} = 1;
          }
          $xfer += $input->readSetEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{chatMember} = SquareChatMember->new();
        $xfer += $self->{chatMember}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('UpdateSquareChatMemberRequest');
  if (defined $self->{updatedAttrs}) {
    $xfer += $output->writeFieldBegin('updatedAttrs', Thrift::TType::SET, 2);
    {
      $xfer += $output->writeSetBegin(Thrift::TType::I32, scalar(@{$self->{updatedAttrs}}));
      {
        foreach my $iter850 (@{$self->{updatedAttrs}})
        {
          $xfer += $output->writeI32($iter850);
        }
      }
      $xfer += $output->writeSetEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{chatMember}) {
    $xfer += $output->writeFieldBegin('chatMember', Thrift::TType::STRUCT, 3);
    $xfer += $self->{chatMember}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package UpdateSquareChatMemberResponse;
use base qw(Class::Accessor);
UpdateSquareChatMemberResponse->mk_accessors( qw( updatedChatMember ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{updatedChatMember} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{updatedChatMember}) {
      $self->{updatedChatMember} = $vals->{updatedChatMember};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'UpdateSquareChatMemberResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{updatedChatMember} = SquareChatMember->new();
        $xfer += $self->{updatedChatMember}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('UpdateSquareChatMemberResponse');
  if (defined $self->{updatedChatMember}) {
    $xfer += $output->writeFieldBegin('updatedChatMember', Thrift::TType::STRUCT, 1);
    $xfer += $self->{updatedChatMember}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package UpdateSquareAuthorityRequest;
use base qw(Class::Accessor);
UpdateSquareAuthorityRequest->mk_accessors( qw( updateAttributes authority ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{updateAttributes} = undef;
  $self->{authority} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{updateAttributes}) {
      $self->{updateAttributes} = $vals->{updateAttributes};
    }
    if (defined $vals->{authority}) {
      $self->{authority} = $vals->{authority};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'UpdateSquareAuthorityRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::SET) {
        {
          my $_size851 = 0;
          $self->{updateAttributes} = {};
          my $_etype854 = 0;
          $xfer += $input->readSetBegin(\$_etype854, \$_size851);
          for (my $_i855 = 0; $_i855 < $_size851; ++$_i855)
          {
            my $elem856 = undef;
            $xfer += $input->readI32(\$elem856);
            $self->{updateAttributes}->{$elem856} = 1;
          }
          $xfer += $input->readSetEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{authority} = SquareAuthority->new();
        $xfer += $self->{authority}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('UpdateSquareAuthorityRequest');
  if (defined $self->{updateAttributes}) {
    $xfer += $output->writeFieldBegin('updateAttributes', Thrift::TType::SET, 2);
    {
      $xfer += $output->writeSetBegin(Thrift::TType::I32, scalar(@{$self->{updateAttributes}}));
      {
        foreach my $iter857 (@{$self->{updateAttributes}})
        {
          $xfer += $output->writeI32($iter857);
        }
      }
      $xfer += $output->writeSetEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authority}) {
    $xfer += $output->writeFieldBegin('authority', Thrift::TType::STRUCT, 3);
    $xfer += $self->{authority}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package UpdateSquareAuthorityResponse;
use base qw(Class::Accessor);
UpdateSquareAuthorityResponse->mk_accessors( qw( updatdAttributes authority ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{updatdAttributes} = undef;
  $self->{authority} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{updatdAttributes}) {
      $self->{updatdAttributes} = $vals->{updatdAttributes};
    }
    if (defined $vals->{authority}) {
      $self->{authority} = $vals->{authority};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'UpdateSquareAuthorityResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::SET) {
        {
          my $_size858 = 0;
          $self->{updatdAttributes} = {};
          my $_etype861 = 0;
          $xfer += $input->readSetBegin(\$_etype861, \$_size858);
          for (my $_i862 = 0; $_i862 < $_size858; ++$_i862)
          {
            my $elem863 = undef;
            $xfer += $input->readI32(\$elem863);
            $self->{updatdAttributes}->{$elem863} = 1;
          }
          $xfer += $input->readSetEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{authority} = SquareAuthority->new();
        $xfer += $self->{authority}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('UpdateSquareAuthorityResponse');
  if (defined $self->{updatdAttributes}) {
    $xfer += $output->writeFieldBegin('updatdAttributes', Thrift::TType::SET, 1);
    {
      $xfer += $output->writeSetBegin(Thrift::TType::I32, scalar(@{$self->{updatdAttributes}}));
      {
        foreach my $iter864 (@{$self->{updatdAttributes}})
        {
          $xfer += $output->writeI32($iter864);
        }
      }
      $xfer += $output->writeSetEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authority}) {
    $xfer += $output->writeFieldBegin('authority', Thrift::TType::STRUCT, 2);
    $xfer += $self->{authority}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package UpdateSquareMemberRelationRequest;
use base qw(Class::Accessor);
UpdateSquareMemberRelationRequest->mk_accessors( qw( squareMid targetSquareMemberMid updatedAttrs relation ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareMid} = undef;
  $self->{targetSquareMemberMid} = undef;
  $self->{updatedAttrs} = undef;
  $self->{relation} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareMid}) {
      $self->{squareMid} = $vals->{squareMid};
    }
    if (defined $vals->{targetSquareMemberMid}) {
      $self->{targetSquareMemberMid} = $vals->{targetSquareMemberMid};
    }
    if (defined $vals->{updatedAttrs}) {
      $self->{updatedAttrs} = $vals->{updatedAttrs};
    }
    if (defined $vals->{relation}) {
      $self->{relation} = $vals->{relation};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'UpdateSquareMemberRelationRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{targetSquareMemberMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::SET) {
        {
          my $_size865 = 0;
          $self->{updatedAttrs} = {};
          my $_etype868 = 0;
          $xfer += $input->readSetBegin(\$_etype868, \$_size865);
          for (my $_i869 = 0; $_i869 < $_size865; ++$_i869)
          {
            my $elem870 = undef;
            $xfer += $input->readI32(\$elem870);
            $self->{updatedAttrs}->{$elem870} = 1;
          }
          $xfer += $input->readSetEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{relation} = SquareMemberRelation->new();
        $xfer += $self->{relation}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('UpdateSquareMemberRelationRequest');
  if (defined $self->{squareMid}) {
    $xfer += $output->writeFieldBegin('squareMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{targetSquareMemberMid}) {
    $xfer += $output->writeFieldBegin('targetSquareMemberMid', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{targetSquareMemberMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{updatedAttrs}) {
    $xfer += $output->writeFieldBegin('updatedAttrs', Thrift::TType::SET, 4);
    {
      $xfer += $output->writeSetBegin(Thrift::TType::I32, scalar(@{$self->{updatedAttrs}}));
      {
        foreach my $iter871 (@{$self->{updatedAttrs}})
        {
          $xfer += $output->writeI32($iter871);
        }
      }
      $xfer += $output->writeSetEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{relation}) {
    $xfer += $output->writeFieldBegin('relation', Thrift::TType::STRUCT, 5);
    $xfer += $self->{relation}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package UpdateSquareMemberRelationResponse;
use base qw(Class::Accessor);
UpdateSquareMemberRelationResponse->mk_accessors( qw( squareMid targetSquareMemberMid updatedAttrs relation ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareMid} = undef;
  $self->{targetSquareMemberMid} = undef;
  $self->{updatedAttrs} = undef;
  $self->{relation} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareMid}) {
      $self->{squareMid} = $vals->{squareMid};
    }
    if (defined $vals->{targetSquareMemberMid}) {
      $self->{targetSquareMemberMid} = $vals->{targetSquareMemberMid};
    }
    if (defined $vals->{updatedAttrs}) {
      $self->{updatedAttrs} = $vals->{updatedAttrs};
    }
    if (defined $vals->{relation}) {
      $self->{relation} = $vals->{relation};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'UpdateSquareMemberRelationResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{targetSquareMemberMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::SET) {
        {
          my $_size872 = 0;
          $self->{updatedAttrs} = {};
          my $_etype875 = 0;
          $xfer += $input->readSetBegin(\$_etype875, \$_size872);
          for (my $_i876 = 0; $_i876 < $_size872; ++$_i876)
          {
            my $elem877 = undef;
            $xfer += $input->readI32(\$elem877);
            $self->{updatedAttrs}->{$elem877} = 1;
          }
          $xfer += $input->readSetEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{relation} = SquareMemberRelation->new();
        $xfer += $self->{relation}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('UpdateSquareMemberRelationResponse');
  if (defined $self->{squareMid}) {
    $xfer += $output->writeFieldBegin('squareMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{targetSquareMemberMid}) {
    $xfer += $output->writeFieldBegin('targetSquareMemberMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{targetSquareMemberMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{updatedAttrs}) {
    $xfer += $output->writeFieldBegin('updatedAttrs', Thrift::TType::SET, 3);
    {
      $xfer += $output->writeSetBegin(Thrift::TType::I32, scalar(@{$self->{updatedAttrs}}));
      {
        foreach my $iter878 (@{$self->{updatedAttrs}})
        {
          $xfer += $output->writeI32($iter878);
        }
      }
      $xfer += $output->writeSetEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{relation}) {
    $xfer += $output->writeFieldBegin('relation', Thrift::TType::STRUCT, 4);
    $xfer += $self->{relation}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ReportSquareRequest;
use base qw(Class::Accessor);
ReportSquareRequest->mk_accessors( qw( squareMid reportType otherReason ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareMid} = undef;
  $self->{reportType} = undef;
  $self->{otherReason} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareMid}) {
      $self->{squareMid} = $vals->{squareMid};
    }
    if (defined $vals->{reportType}) {
      $self->{reportType} = $vals->{reportType};
    }
    if (defined $vals->{otherReason}) {
      $self->{otherReason} = $vals->{otherReason};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ReportSquareRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{reportType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{otherReason});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ReportSquareRequest');
  if (defined $self->{squareMid}) {
    $xfer += $output->writeFieldBegin('squareMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reportType}) {
    $xfer += $output->writeFieldBegin('reportType', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{reportType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{otherReason}) {
    $xfer += $output->writeFieldBegin('otherReason', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{otherReason});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ReportSquareResponse;
use base qw(Class::Accessor);

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  return bless ($self, $classname);
}

sub getName {
  return 'ReportSquareResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ReportSquareResponse');
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ReportSquareChatRequest;
use base qw(Class::Accessor);
ReportSquareChatRequest->mk_accessors( qw( squareMid squareChatMid reportType otherReason ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareMid} = undef;
  $self->{squareChatMid} = undef;
  $self->{reportType} = undef;
  $self->{otherReason} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareMid}) {
      $self->{squareMid} = $vals->{squareMid};
    }
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
    if (defined $vals->{reportType}) {
      $self->{reportType} = $vals->{reportType};
    }
    if (defined $vals->{otherReason}) {
      $self->{otherReason} = $vals->{otherReason};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ReportSquareChatRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{reportType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{otherReason});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ReportSquareChatRequest');
  if (defined $self->{squareMid}) {
    $xfer += $output->writeFieldBegin('squareMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reportType}) {
    $xfer += $output->writeFieldBegin('reportType', Thrift::TType::I32, 5);
    $xfer += $output->writeI32($self->{reportType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{otherReason}) {
    $xfer += $output->writeFieldBegin('otherReason', Thrift::TType::STRING, 6);
    $xfer += $output->writeString($self->{otherReason});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ReportSquareChatResponse;
use base qw(Class::Accessor);

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  return bless ($self, $classname);
}

sub getName {
  return 'ReportSquareChatResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ReportSquareChatResponse');
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ReportSquareMessageRequest;
use base qw(Class::Accessor);
ReportSquareMessageRequest->mk_accessors( qw( squareMid squareChatMid squareMessageId reportType otherReason ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareMid} = undef;
  $self->{squareChatMid} = undef;
  $self->{squareMessageId} = undef;
  $self->{reportType} = undef;
  $self->{otherReason} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareMid}) {
      $self->{squareMid} = $vals->{squareMid};
    }
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
    if (defined $vals->{squareMessageId}) {
      $self->{squareMessageId} = $vals->{squareMessageId};
    }
    if (defined $vals->{reportType}) {
      $self->{reportType} = $vals->{reportType};
    }
    if (defined $vals->{otherReason}) {
      $self->{otherReason} = $vals->{otherReason};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ReportSquareMessageRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMessageId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{reportType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{otherReason});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ReportSquareMessageRequest');
  if (defined $self->{squareMid}) {
    $xfer += $output->writeFieldBegin('squareMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareMessageId}) {
    $xfer += $output->writeFieldBegin('squareMessageId', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{squareMessageId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reportType}) {
    $xfer += $output->writeFieldBegin('reportType', Thrift::TType::I32, 5);
    $xfer += $output->writeI32($self->{reportType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{otherReason}) {
    $xfer += $output->writeFieldBegin('otherReason', Thrift::TType::STRING, 6);
    $xfer += $output->writeString($self->{otherReason});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ReportSquareMessageResponse;
use base qw(Class::Accessor);

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  return bless ($self, $classname);
}

sub getName {
  return 'ReportSquareMessageResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ReportSquareMessageResponse');
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ReportSquareMemberRequest;
use base qw(Class::Accessor);
ReportSquareMemberRequest->mk_accessors( qw( squareMemberMid reportType otherReason squareChatMid ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareMemberMid} = undef;
  $self->{reportType} = undef;
  $self->{otherReason} = undef;
  $self->{squareChatMid} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareMemberMid}) {
      $self->{squareMemberMid} = $vals->{squareMemberMid};
    }
    if (defined $vals->{reportType}) {
      $self->{reportType} = $vals->{reportType};
    }
    if (defined $vals->{otherReason}) {
      $self->{otherReason} = $vals->{otherReason};
    }
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ReportSquareMemberRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMemberMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{reportType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{otherReason});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ReportSquareMemberRequest');
  if (defined $self->{squareMemberMid}) {
    $xfer += $output->writeFieldBegin('squareMemberMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareMemberMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reportType}) {
    $xfer += $output->writeFieldBegin('reportType', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{reportType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{otherReason}) {
    $xfer += $output->writeFieldBegin('otherReason', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{otherReason});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ReportSquareMemberResponse;
use base qw(Class::Accessor);

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  return bless ($self, $classname);
}

sub getName {
  return 'ReportSquareMemberResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ReportSquareMemberResponse');
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GetSquareRequest;
use base qw(Class::Accessor);
GetSquareRequest->mk_accessors( qw( mid ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{mid} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{mid}) {
      $self->{mid} = $vals->{mid};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetSquareRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{mid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetSquareRequest');
  if (defined $self->{mid}) {
    $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{mid});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GetSquareResponse;
use base qw(Class::Accessor);
GetSquareResponse->mk_accessors( qw( square myMembership squareAuthority squareStatus squareFeatureSet noteStatus ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{square} = undef;
  $self->{myMembership} = undef;
  $self->{squareAuthority} = undef;
  $self->{squareStatus} = undef;
  $self->{squareFeatureSet} = undef;
  $self->{noteStatus} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{square}) {
      $self->{square} = $vals->{square};
    }
    if (defined $vals->{myMembership}) {
      $self->{myMembership} = $vals->{myMembership};
    }
    if (defined $vals->{squareAuthority}) {
      $self->{squareAuthority} = $vals->{squareAuthority};
    }
    if (defined $vals->{squareStatus}) {
      $self->{squareStatus} = $vals->{squareStatus};
    }
    if (defined $vals->{squareFeatureSet}) {
      $self->{squareFeatureSet} = $vals->{squareFeatureSet};
    }
    if (defined $vals->{noteStatus}) {
      $self->{noteStatus} = $vals->{noteStatus};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetSquareResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{square} = Square->new();
        $xfer += $self->{square}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{myMembership} = SquareMember->new();
        $xfer += $self->{myMembership}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareAuthority} = SquareAuthority->new();
        $xfer += $self->{squareAuthority}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareStatus} = SquareStatus->new();
        $xfer += $self->{squareStatus}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareFeatureSet} = SquareFeatureSet->new();
        $xfer += $self->{squareFeatureSet}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{noteStatus} = NoteStatus->new();
        $xfer += $self->{noteStatus}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetSquareResponse');
  if (defined $self->{square}) {
    $xfer += $output->writeFieldBegin('square', Thrift::TType::STRUCT, 1);
    $xfer += $self->{square}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{myMembership}) {
    $xfer += $output->writeFieldBegin('myMembership', Thrift::TType::STRUCT, 2);
    $xfer += $self->{myMembership}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareAuthority}) {
    $xfer += $output->writeFieldBegin('squareAuthority', Thrift::TType::STRUCT, 3);
    $xfer += $self->{squareAuthority}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareStatus}) {
    $xfer += $output->writeFieldBegin('squareStatus', Thrift::TType::STRUCT, 4);
    $xfer += $self->{squareStatus}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareFeatureSet}) {
    $xfer += $output->writeFieldBegin('squareFeatureSet', Thrift::TType::STRUCT, 5);
    $xfer += $self->{squareFeatureSet}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{noteStatus}) {
    $xfer += $output->writeFieldBegin('noteStatus', Thrift::TType::STRUCT, 6);
    $xfer += $self->{noteStatus}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GetSquareStatusRequest;
use base qw(Class::Accessor);
GetSquareStatusRequest->mk_accessors( qw( squareMid ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareMid} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareMid}) {
      $self->{squareMid} = $vals->{squareMid};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetSquareStatusRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetSquareStatusRequest');
  if (defined $self->{squareMid}) {
    $xfer += $output->writeFieldBegin('squareMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareMid});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GetSquareStatusResponse;
use base qw(Class::Accessor);
GetSquareStatusResponse->mk_accessors( qw( squareStatus ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareStatus} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareStatus}) {
      $self->{squareStatus} = $vals->{squareStatus};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetSquareStatusResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareStatus} = SquareStatus->new();
        $xfer += $self->{squareStatus}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetSquareStatusResponse');
  if (defined $self->{squareStatus}) {
    $xfer += $output->writeFieldBegin('squareStatus', Thrift::TType::STRUCT, 1);
    $xfer += $self->{squareStatus}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GetNoteStatusRequest;
use base qw(Class::Accessor);
GetNoteStatusRequest->mk_accessors( qw( squareMid ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareMid} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareMid}) {
      $self->{squareMid} = $vals->{squareMid};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetNoteStatusRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetNoteStatusRequest');
  if (defined $self->{squareMid}) {
    $xfer += $output->writeFieldBegin('squareMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareMid});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GetNoteStatusResponse;
use base qw(Class::Accessor);
GetNoteStatusResponse->mk_accessors( qw( squareMid status ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareMid} = undef;
  $self->{status} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareMid}) {
      $self->{squareMid} = $vals->{squareMid};
    }
    if (defined $vals->{status}) {
      $self->{status} = $vals->{status};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetNoteStatusResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{status} = NoteStatus->new();
        $xfer += $self->{status}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetNoteStatusResponse');
  if (defined $self->{squareMid}) {
    $xfer += $output->writeFieldBegin('squareMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{squareMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{status}) {
    $xfer += $output->writeFieldBegin('status', Thrift::TType::STRUCT, 2);
    $xfer += $self->{status}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package CreateSquareChatAnnouncementRequest;
use base qw(Class::Accessor);
CreateSquareChatAnnouncementRequest->mk_accessors( qw( reqSeq squareChatMid squareChatAnnouncement ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{reqSeq} = undef;
  $self->{squareChatMid} = undef;
  $self->{squareChatAnnouncement} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{reqSeq}) {
      $self->{reqSeq} = $vals->{reqSeq};
    }
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
    if (defined $vals->{squareChatAnnouncement}) {
      $self->{squareChatAnnouncement} = $vals->{squareChatAnnouncement};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'CreateSquareChatAnnouncementRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{reqSeq});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{squareChatAnnouncement} = SquareChatAnnouncement->new();
        $xfer += $self->{squareChatAnnouncement}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('CreateSquareChatAnnouncementRequest');
  if (defined $self->{reqSeq}) {
    $xfer += $output->writeFieldBegin('reqSeq', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{reqSeq});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{squareChatAnnouncement}) {
    $xfer += $output->writeFieldBegin('squareChatAnnouncement', Thrift::TType::STRUCT, 3);
    $xfer += $self->{squareChatAnnouncement}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package CreateSquareChatAnnouncementResponse;
use base qw(Class::Accessor);
CreateSquareChatAnnouncementResponse->mk_accessors( qw( announcement ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{announcement} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{announcement}) {
      $self->{announcement} = $vals->{announcement};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'CreateSquareChatAnnouncementResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{announcement} = SquareChatAnnouncement->new();
        $xfer += $self->{announcement}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('CreateSquareChatAnnouncementResponse');
  if (defined $self->{announcement}) {
    $xfer += $output->writeFieldBegin('announcement', Thrift::TType::STRUCT, 1);
    $xfer += $self->{announcement}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DeleteSquareChatAnnouncementRequest;
use base qw(Class::Accessor);
DeleteSquareChatAnnouncementRequest->mk_accessors( qw( squareChatMid announcementSeq ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareChatMid} = undef;
  $self->{announcementSeq} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
    if (defined $vals->{announcementSeq}) {
      $self->{announcementSeq} = $vals->{announcementSeq};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'DeleteSquareChatAnnouncementRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{announcementSeq});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('DeleteSquareChatAnnouncementRequest');
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{announcementSeq}) {
    $xfer += $output->writeFieldBegin('announcementSeq', Thrift::TType::I64, 3);
    $xfer += $output->writeI64($self->{announcementSeq});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DeleteSquareChatAnnouncementResponse;
use base qw(Class::Accessor);

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  return bless ($self, $classname);
}

sub getName {
  return 'DeleteSquareChatAnnouncementResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('DeleteSquareChatAnnouncementResponse');
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GetSquareChatAnnouncementsRequest;
use base qw(Class::Accessor);
GetSquareChatAnnouncementsRequest->mk_accessors( qw( squareChatMid ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{squareChatMid} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{squareChatMid}) {
      $self->{squareChatMid} = $vals->{squareChatMid};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetSquareChatAnnouncementsRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{squareChatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetSquareChatAnnouncementsRequest');
  if (defined $self->{squareChatMid}) {
    $xfer += $output->writeFieldBegin('squareChatMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{squareChatMid});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GetSquareChatAnnouncementsResponse;
use base qw(Class::Accessor);
GetSquareChatAnnouncementsResponse->mk_accessors( qw( announcements ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{announcements} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{announcements}) {
      $self->{announcements} = $vals->{announcements};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetSquareChatAnnouncementsResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size879 = 0;
          $self->{announcements} = [];
          my $_etype882 = 0;
          $xfer += $input->readListBegin(\$_etype882, \$_size879);
          for (my $_i883 = 0; $_i883 < $_size879; ++$_i883)
          {
            my $elem884 = undef;
            $elem884 = SquareChatAnnouncement->new();
            $xfer += $elem884->read($input);
            push(@{$self->{announcements}},$elem884);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetSquareChatAnnouncementsResponse');
  if (defined $self->{announcements}) {
    $xfer += $output->writeFieldBegin('announcements', Thrift::TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{announcements}}));
      {
        foreach my $iter885 (@{$self->{announcements}}) 
        {
          $xfer += ${iter885}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GetJoinedSquareChatsRequest;
use base qw(Class::Accessor);
GetJoinedSquareChatsRequest->mk_accessors( qw( continuationToken limit ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{continuationToken} = undef;
  $self->{limit} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{continuationToken}) {
      $self->{continuationToken} = $vals->{continuationToken};
    }
    if (defined $vals->{limit}) {
      $self->{limit} = $vals->{limit};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetJoinedSquareChatsRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{continuationToken});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{limit});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetJoinedSquareChatsRequest');
  if (defined $self->{continuationToken}) {
    $xfer += $output->writeFieldBegin('continuationToken', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{continuationToken});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{limit}) {
    $xfer += $output->writeFieldBegin('limit', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{limit});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GetJoinedSquareChatsResponse;
use base qw(Class::Accessor);
GetJoinedSquareChatsResponse->mk_accessors( qw( chats chatMembers statuses continuationToken ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{chats} = undef;
  $self->{chatMembers} = undef;
  $self->{statuses} = undef;
  $self->{continuationToken} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{chats}) {
      $self->{chats} = $vals->{chats};
    }
    if (defined $vals->{chatMembers}) {
      $self->{chatMembers} = $vals->{chatMembers};
    }
    if (defined $vals->{statuses}) {
      $self->{statuses} = $vals->{statuses};
    }
    if (defined $vals->{continuationToken}) {
      $self->{continuationToken} = $vals->{continuationToken};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GetJoinedSquareChatsResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size886 = 0;
          $self->{chats} = [];
          my $_etype889 = 0;
          $xfer += $input->readListBegin(\$_etype889, \$_size886);
          for (my $_i890 = 0; $_i890 < $_size886; ++$_i890)
          {
            my $elem891 = undef;
            $elem891 = SquareChat->new();
            $xfer += $elem891->read($input);
            push(@{$self->{chats}},$elem891);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size892 = 0;
          $self->{chatMembers} = {};
          my $_ktype893 = 0;
          my $_vtype894 = 0;
          $xfer += $input->readMapBegin(\$_ktype893, \$_vtype894, \$_size892);
          for (my $_i896 = 0; $_i896 < $_size892; ++$_i896)
          {
            my $key897 = '';
            my $val898 = new SquareChatMember();
            $xfer += $input->readString(\$key897);
            $val898 = SquareChatMember->new();
            $xfer += $val898->read($input);
            $self->{chatMembers}->{$key897} = $val898;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size899 = 0;
          $self->{statuses} = {};
          my $_ktype900 = 0;
          my $_vtype901 = 0;
          $xfer += $input->readMapBegin(\$_ktype900, \$_vtype901, \$_size899);
          for (my $_i903 = 0; $_i903 < $_size899; ++$_i903)
          {
            my $key904 = '';
            my $val905 = new SquareChatStatus();
            $xfer += $input->readString(\$key904);
            $val905 = SquareChatStatus->new();
            $xfer += $val905->read($input);
            $self->{statuses}->{$key904} = $val905;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{continuationToken});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GetJoinedSquareChatsResponse');
  if (defined $self->{chats}) {
    $xfer += $output->writeFieldBegin('chats', Thrift::TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{chats}}));
      {
        foreach my $iter906 (@{$self->{chats}}) 
        {
          $xfer += ${iter906}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{chatMembers}) {
    $xfer += $output->writeFieldBegin('chatMembers', Thrift::TType::MAP, 2);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRUCT, scalar(keys %{$self->{chatMembers}}));
      {
        while( my ($kiter907,$viter908) = each %{$self->{chatMembers}}) 
        {
          $xfer += $output->writeString($kiter907);
          $xfer += ${viter908}->write($output);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{statuses}) {
    $xfer += $output->writeFieldBegin('statuses', Thrift::TType::MAP, 3);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRUCT, scalar(keys %{$self->{statuses}}));
      {
        while( my ($kiter909,$viter910) = each %{$self->{statuses}}) 
        {
          $xfer += $output->writeString($kiter909);
          $xfer += ${viter910}->write($output);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{continuationToken}) {
    $xfer += $output->writeFieldBegin('continuationToken', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{continuationToken});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TalkException;
use base qw(Thrift::TException);
use base qw(Class::Accessor);
TalkException->mk_accessors( qw( code reason parameterMap ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{code} = undef;
  $self->{reason} = undef;
  $self->{parameterMap} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{code}) {
      $self->{code} = $vals->{code};
    }
    if (defined $vals->{reason}) {
      $self->{reason} = $vals->{reason};
    }
    if (defined $vals->{parameterMap}) {
      $self->{parameterMap} = $vals->{parameterMap};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TalkException';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{code});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{reason});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size911 = 0;
          $self->{parameterMap} = {};
          my $_ktype912 = 0;
          my $_vtype913 = 0;
          $xfer += $input->readMapBegin(\$_ktype912, \$_vtype913, \$_size911);
          for (my $_i915 = 0; $_i915 < $_size911; ++$_i915)
          {
            my $key916 = '';
            my $val917 = '';
            $xfer += $input->readString(\$key916);
            $xfer += $input->readString(\$val917);
            $self->{parameterMap}->{$key916} = $val917;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TalkException');
  if (defined $self->{code}) {
    $xfer += $output->writeFieldBegin('code', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{code});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reason}) {
    $xfer += $output->writeFieldBegin('reason', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{reason});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{parameterMap}) {
    $xfer += $output->writeFieldBegin('parameterMap', Thrift::TType::MAP, 3);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{parameterMap}}));
      {
        while( my ($kiter918,$viter919) = each %{$self->{parameterMap}}) 
        {
          $xfer += $output->writeString($kiter918);
          $xfer += $output->writeString($viter919);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ShouldSyncException;
use base qw(Thrift::TException);
use base qw(Class::Accessor);
ShouldSyncException->mk_accessors( qw( syncOpRevision syncScope syncReason message ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{syncOpRevision} = undef;
  $self->{syncScope} = undef;
  $self->{syncReason} = undef;
  $self->{message} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{syncOpRevision}) {
      $self->{syncOpRevision} = $vals->{syncOpRevision};
    }
    if (defined $vals->{syncScope}) {
      $self->{syncScope} = $vals->{syncScope};
    }
    if (defined $vals->{syncReason}) {
      $self->{syncReason} = $vals->{syncReason};
    }
    if (defined $vals->{message}) {
      $self->{message} = $vals->{message};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ShouldSyncException';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{syncOpRevision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{syncScope} = SyncScope->new();
        $xfer += $self->{syncScope}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{syncReason});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{message});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ShouldSyncException');
  if (defined $self->{syncOpRevision}) {
    $xfer += $output->writeFieldBegin('syncOpRevision', Thrift::TType::I64, 1);
    $xfer += $output->writeI64($self->{syncOpRevision});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{syncScope}) {
    $xfer += $output->writeFieldBegin('syncScope', Thrift::TType::STRUCT, 2);
    $xfer += $self->{syncScope}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{syncReason}) {
    $xfer += $output->writeFieldBegin('syncReason', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{syncReason});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{message}) {
    $xfer += $output->writeFieldBegin('message', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{message});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package PointException;
use base qw(Thrift::TException);
use base qw(Class::Accessor);
PointException->mk_accessors( qw( code reason extra ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{code} = undef;
  $self->{reason} = undef;
  $self->{extra} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{code}) {
      $self->{code} = $vals->{code};
    }
    if (defined $vals->{reason}) {
      $self->{reason} = $vals->{reason};
    }
    if (defined $vals->{extra}) {
      $self->{extra} = $vals->{extra};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'PointException';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{code});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{reason});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size920 = 0;
          $self->{extra} = {};
          my $_ktype921 = 0;
          my $_vtype922 = 0;
          $xfer += $input->readMapBegin(\$_ktype921, \$_vtype922, \$_size920);
          for (my $_i924 = 0; $_i924 < $_size920; ++$_i924)
          {
            my $key925 = '';
            my $val926 = '';
            $xfer += $input->readString(\$key925);
            $xfer += $input->readString(\$val926);
            $self->{extra}->{$key925} = $val926;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('PointException');
  if (defined $self->{code}) {
    $xfer += $output->writeFieldBegin('code', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{code});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reason}) {
    $xfer += $output->writeFieldBegin('reason', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{reason});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{extra}) {
    $xfer += $output->writeFieldBegin('extra', Thrift::TType::MAP, 3);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{extra}}));
      {
        while( my ($kiter927,$viter928) = each %{$self->{extra}}) 
        {
          $xfer += $output->writeString($kiter927);
          $xfer += $output->writeString($viter928);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ChannelException;
use base qw(Thrift::TException);
use base qw(Class::Accessor);
ChannelException->mk_accessors( qw( code reason parameterMap ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{code} = undef;
  $self->{reason} = undef;
  $self->{parameterMap} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{code}) {
      $self->{code} = $vals->{code};
    }
    if (defined $vals->{reason}) {
      $self->{reason} = $vals->{reason};
    }
    if (defined $vals->{parameterMap}) {
      $self->{parameterMap} = $vals->{parameterMap};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ChannelException';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{code});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{reason});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size929 = 0;
          $self->{parameterMap} = {};
          my $_ktype930 = 0;
          my $_vtype931 = 0;
          $xfer += $input->readMapBegin(\$_ktype930, \$_vtype931, \$_size929);
          for (my $_i933 = 0; $_i933 < $_size929; ++$_i933)
          {
            my $key934 = '';
            my $val935 = '';
            $xfer += $input->readString(\$key934);
            $xfer += $input->readString(\$val935);
            $self->{parameterMap}->{$key934} = $val935;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ChannelException');
  if (defined $self->{code}) {
    $xfer += $output->writeFieldBegin('code', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{code});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reason}) {
    $xfer += $output->writeFieldBegin('reason', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{reason});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{parameterMap}) {
    $xfer += $output->writeFieldBegin('parameterMap', Thrift::TType::MAP, 3);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{parameterMap}}));
      {
        while( my ($kiter936,$viter937) = each %{$self->{parameterMap}}) 
        {
          $xfer += $output->writeString($kiter936);
          $xfer += $output->writeString($viter937);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SquareException;
use base qw(Thrift::TException);
use base qw(Class::Accessor);
SquareException->mk_accessors( qw( errorCode errorExtraInfo reason ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{errorCode} = undef;
  $self->{errorExtraInfo} = undef;
  $self->{reason} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{errorCode}) {
      $self->{errorCode} = $vals->{errorCode};
    }
    if (defined $vals->{errorExtraInfo}) {
      $self->{errorExtraInfo} = $vals->{errorExtraInfo};
    }
    if (defined $vals->{reason}) {
      $self->{reason} = $vals->{reason};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SquareException';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{errorCode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{errorExtraInfo} = ErrorExtraInfo->new();
        $xfer += $self->{errorExtraInfo}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{reason});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SquareException');
  if (defined $self->{errorCode}) {
    $xfer += $output->writeFieldBegin('errorCode', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{errorCode});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{errorExtraInfo}) {
    $xfer += $output->writeFieldBegin('errorExtraInfo', Thrift::TType::STRUCT, 2);
    $xfer += $self->{errorExtraInfo}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reason}) {
    $xfer += $output->writeFieldBegin('reason', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{reason});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package UniversalNotificationServiceException;
use base qw(Thrift::TException);
use base qw(Class::Accessor);
UniversalNotificationServiceException->mk_accessors( qw( code reason parameterMap ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{code} = undef;
  $self->{reason} = undef;
  $self->{parameterMap} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{code}) {
      $self->{code} = $vals->{code};
    }
    if (defined $vals->{reason}) {
      $self->{reason} = $vals->{reason};
    }
    if (defined $vals->{parameterMap}) {
      $self->{parameterMap} = $vals->{parameterMap};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'UniversalNotificationServiceException';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{code});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{reason});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size938 = 0;
          $self->{parameterMap} = {};
          my $_ktype939 = 0;
          my $_vtype940 = 0;
          $xfer += $input->readMapBegin(\$_ktype939, \$_vtype940, \$_size938);
          for (my $_i942 = 0; $_i942 < $_size938; ++$_i942)
          {
            my $key943 = '';
            my $val944 = '';
            $xfer += $input->readString(\$key943);
            $xfer += $input->readString(\$val944);
            $self->{parameterMap}->{$key943} = $val944;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('UniversalNotificationServiceException');
  if (defined $self->{code}) {
    $xfer += $output->writeFieldBegin('code', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{code});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reason}) {
    $xfer += $output->writeFieldBegin('reason', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{reason});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{parameterMap}) {
    $xfer += $output->writeFieldBegin('parameterMap', Thrift::TType::MAP, 3);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{parameterMap}}));
      {
        while( my ($kiter945,$viter946) = each %{$self->{parameterMap}}) 
        {
          $xfer += $output->writeString($kiter945);
          $xfer += $output->writeString($viter946);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package UpdateBuddyProfileResult;
use base qw(Class::Accessor);
UpdateBuddyProfileResult->mk_accessors( qw( requestId state eventNo receiverCount successCount failCount cancelCount unregisterCount timestamp message ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{requestId} = undef;
  $self->{state} = undef;
  $self->{eventNo} = undef;
  $self->{receiverCount} = undef;
  $self->{successCount} = undef;
  $self->{failCount} = undef;
  $self->{cancelCount} = undef;
  $self->{unregisterCount} = undef;
  $self->{timestamp} = undef;
  $self->{message} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{requestId}) {
      $self->{requestId} = $vals->{requestId};
    }
    if (defined $vals->{state}) {
      $self->{state} = $vals->{state};
    }
    if (defined $vals->{eventNo}) {
      $self->{eventNo} = $vals->{eventNo};
    }
    if (defined $vals->{receiverCount}) {
      $self->{receiverCount} = $vals->{receiverCount};
    }
    if (defined $vals->{successCount}) {
      $self->{successCount} = $vals->{successCount};
    }
    if (defined $vals->{failCount}) {
      $self->{failCount} = $vals->{failCount};
    }
    if (defined $vals->{cancelCount}) {
      $self->{cancelCount} = $vals->{cancelCount};
    }
    if (defined $vals->{unregisterCount}) {
      $self->{unregisterCount} = $vals->{unregisterCount};
    }
    if (defined $vals->{timestamp}) {
      $self->{timestamp} = $vals->{timestamp};
    }
    if (defined $vals->{message}) {
      $self->{message} = $vals->{message};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'UpdateBuddyProfileResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{requestId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{state});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{eventNo});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{receiverCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{successCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^13$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{failCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^14$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{cancelCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^15$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{unregisterCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^21$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{timestamp});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^22$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{message});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('UpdateBuddyProfileResult');
  if (defined $self->{requestId}) {
    $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{requestId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{state}) {
    $xfer += $output->writeFieldBegin('state', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{state});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{eventNo}) {
    $xfer += $output->writeFieldBegin('eventNo', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{eventNo});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{receiverCount}) {
    $xfer += $output->writeFieldBegin('receiverCount', Thrift::TType::I64, 11);
    $xfer += $output->writeI64($self->{receiverCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{successCount}) {
    $xfer += $output->writeFieldBegin('successCount', Thrift::TType::I64, 12);
    $xfer += $output->writeI64($self->{successCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{failCount}) {
    $xfer += $output->writeFieldBegin('failCount', Thrift::TType::I64, 13);
    $xfer += $output->writeI64($self->{failCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{cancelCount}) {
    $xfer += $output->writeFieldBegin('cancelCount', Thrift::TType::I64, 14);
    $xfer += $output->writeI64($self->{cancelCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{unregisterCount}) {
    $xfer += $output->writeFieldBegin('unregisterCount', Thrift::TType::I64, 15);
    $xfer += $output->writeI64($self->{unregisterCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{timestamp}) {
    $xfer += $output->writeFieldBegin('timestamp', Thrift::TType::I64, 21);
    $xfer += $output->writeI64($self->{timestamp});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{message}) {
    $xfer += $output->writeFieldBegin('message', Thrift::TType::STRING, 22);
    $xfer += $output->writeString($self->{message});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package UserAuthStatus;
use base qw(Class::Accessor);
UserAuthStatus->mk_accessors( qw( phoneNumberRegistered registeredSnsIdTypes ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{phoneNumberRegistered} = undef;
  $self->{registeredSnsIdTypes} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{phoneNumberRegistered}) {
      $self->{phoneNumberRegistered} = $vals->{phoneNumberRegistered};
    }
    if (defined $vals->{registeredSnsIdTypes}) {
      $self->{registeredSnsIdTypes} = $vals->{registeredSnsIdTypes};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'UserAuthStatus';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{phoneNumberRegistered});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size947 = 0;
          $self->{registeredSnsIdTypes} = [];
          my $_etype950 = 0;
          $xfer += $input->readListBegin(\$_etype950, \$_size947);
          for (my $_i951 = 0; $_i951 < $_size947; ++$_i951)
          {
            my $elem952 = undef;
            $xfer += $input->readI32(\$elem952);
            push(@{$self->{registeredSnsIdTypes}},$elem952);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('UserAuthStatus');
  if (defined $self->{phoneNumberRegistered}) {
    $xfer += $output->writeFieldBegin('phoneNumberRegistered', Thrift::TType::BOOL, 1);
    $xfer += $output->writeBool($self->{phoneNumberRegistered});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{registeredSnsIdTypes}) {
    $xfer += $output->writeFieldBegin('registeredSnsIdTypes', Thrift::TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(Thrift::TType::I32, scalar(@{$self->{registeredSnsIdTypes}}));
      {
        foreach my $iter953 (@{$self->{registeredSnsIdTypes}}) 
        {
          $xfer += $output->writeI32($iter953);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package WapInvitation;
use base qw(Class::Accessor);
WapInvitation->mk_accessors( qw( type inviteeEmail inviterMid roomMid ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{type} = undef;
  $self->{inviteeEmail} = undef;
  $self->{inviterMid} = undef;
  $self->{roomMid} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{type}) {
      $self->{type} = $vals->{type};
    }
    if (defined $vals->{inviteeEmail}) {
      $self->{inviteeEmail} = $vals->{inviteeEmail};
    }
    if (defined $vals->{inviterMid}) {
      $self->{inviterMid} = $vals->{inviterMid};
    }
    if (defined $vals->{roomMid}) {
      $self->{roomMid} = $vals->{roomMid};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'WapInvitation';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{type});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{inviteeEmail});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{inviterMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{roomMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('WapInvitation');
  if (defined $self->{type}) {
    $xfer += $output->writeFieldBegin('type', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{type});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{inviteeEmail}) {
    $xfer += $output->writeFieldBegin('inviteeEmail', Thrift::TType::STRING, 10);
    $xfer += $output->writeString($self->{inviteeEmail});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{inviterMid}) {
    $xfer += $output->writeFieldBegin('inviterMid', Thrift::TType::STRING, 11);
    $xfer += $output->writeString($self->{inviterMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{roomMid}) {
    $xfer += $output->writeFieldBegin('roomMid', Thrift::TType::STRING, 12);
    $xfer += $output->writeString($self->{roomMid});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GroupCall;
use base qw(Class::Accessor);
GroupCall->mk_accessors( qw( online chatMid hostMids memberMids started mediaType ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{online} = undef;
  $self->{chatMid} = undef;
  $self->{hostMids} = undef;
  $self->{memberMids} = undef;
  $self->{started} = undef;
  $self->{mediaType} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{online}) {
      $self->{online} = $vals->{online};
    }
    if (defined $vals->{chatMid}) {
      $self->{chatMid} = $vals->{chatMid};
    }
    if (defined $vals->{hostMids}) {
      $self->{hostMids} = $vals->{hostMids};
    }
    if (defined $vals->{memberMids}) {
      $self->{memberMids} = $vals->{memberMids};
    }
    if (defined $vals->{started}) {
      $self->{started} = $vals->{started};
    }
    if (defined $vals->{mediaType}) {
      $self->{mediaType} = $vals->{mediaType};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GroupCall';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{online});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{chatMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{hostMids});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size954 = 0;
          $self->{memberMids} = [];
          my $_etype957 = 0;
          $xfer += $input->readListBegin(\$_etype957, \$_size954);
          for (my $_i958 = 0; $_i958 < $_size954; ++$_i958)
          {
            my $elem959 = undef;
            $xfer += $input->readString(\$elem959);
            push(@{$self->{memberMids}},$elem959);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{started});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{mediaType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GroupCall');
  if (defined $self->{online}) {
    $xfer += $output->writeFieldBegin('online', Thrift::TType::BOOL, 1);
    $xfer += $output->writeBool($self->{online});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{chatMid}) {
    $xfer += $output->writeFieldBegin('chatMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{chatMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{hostMids}) {
    $xfer += $output->writeFieldBegin('hostMids', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{hostMids});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{memberMids}) {
    $xfer += $output->writeFieldBegin('memberMids', Thrift::TType::LIST, 4);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{memberMids}}));
      {
        foreach my $iter960 (@{$self->{memberMids}}) 
        {
          $xfer += $output->writeString($iter960);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{started}) {
    $xfer += $output->writeFieldBegin('started', Thrift::TType::I64, 5);
    $xfer += $output->writeI64($self->{started});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{mediaType}) {
    $xfer += $output->writeFieldBegin('mediaType', Thrift::TType::I32, 6);
    $xfer += $output->writeI32($self->{mediaType});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GroupCallRoute;
use base qw(Class::Accessor);
GroupCallRoute->mk_accessors( qw( token cscf mix ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{cscf} = undef;
  $self->{mix} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{cscf}) {
      $self->{cscf} = $vals->{cscf};
    }
    if (defined $vals->{mix}) {
      $self->{mix} = $vals->{mix};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GroupCallRoute';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{cscf} = CallHost->new();
        $xfer += $self->{cscf}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{mix} = CallHost->new();
        $xfer += $self->{mix}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GroupCallRoute');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{cscf}) {
    $xfer += $output->writeFieldBegin('cscf', Thrift::TType::STRUCT, 2);
    $xfer += $self->{cscf}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{mix}) {
    $xfer += $output->writeFieldBegin('mix', Thrift::TType::STRUCT, 3);
    $xfer += $self->{mix}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

1;
