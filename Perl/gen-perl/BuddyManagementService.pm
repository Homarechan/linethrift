#
# Autogenerated by Thrift Compiler (0.14.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
use 5.10.0;
use strict;
use warnings;
use Thrift::Exception;
use Thrift::MessageType;
use Thrift::Type;

use Types;


# HELPER FUNCTIONS AND STRUCTURES

package BuddyManagementService_addBuddyMember_args;
use base qw(Class::Accessor);
BuddyManagementService_addBuddyMember_args->mk_accessors( qw( requestId userMid ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{requestId} = undef;
          $self->{userMid} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{requestId}) {
              $self->{requestId} = $vals->{requestId};
            }
            if (defined $vals->{userMid}) {
              $self->{userMid} = $vals->{userMid};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_addBuddyMember_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{requestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^2$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{userMid});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_addBuddyMember_args');
          if (defined $self->{requestId}) {
            $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{requestId});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{userMid}) {
            $xfer += $output->writeFieldBegin('userMid', Thrift::TType::STRING, 2);
            $xfer += $output->writeString($self->{userMid});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_addBuddyMember_result;
use base qw(Class::Accessor);
BuddyManagementService_addBuddyMember_result->mk_accessors( qw( ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_addBuddyMember_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_addBuddyMember_result');
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_addBuddyMembers_args;
use base qw(Class::Accessor);
BuddyManagementService_addBuddyMembers_args->mk_accessors( qw( requestId userMids ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{requestId} = undef;
          $self->{userMids} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{requestId}) {
              $self->{requestId} = $vals->{requestId};
            }
            if (defined $vals->{userMids}) {
              $self->{userMids} = $vals->{userMids};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_addBuddyMembers_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{requestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^2$/ && do{              if ($ftype == Thrift::TType::LIST) {
                {
                  my $_size970 = 0;
                  $self->{userMids} = [];
                  my $_etype973 = 0;
                  $xfer += $input->readListBegin(\$_etype973, \$_size970);
                  for (my $_i974 = 0; $_i974 < $_size970; ++$_i974)
                  {
                    my $elem975 = undef;
                    $xfer += $input->readString(\$elem975);
                    push(@{$self->{userMids}},$elem975);
                  }
                  $xfer += $input->readListEnd();
                }
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_addBuddyMembers_args');
          if (defined $self->{requestId}) {
            $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{requestId});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{userMids}) {
            $xfer += $output->writeFieldBegin('userMids', Thrift::TType::LIST, 2);
            {
              $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{userMids}}));
              {
                foreach my $iter976 (@{$self->{userMids}}) 
                {
                  $xfer += $output->writeString($iter976);
                }
              }
              $xfer += $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_addBuddyMembers_result;
use base qw(Class::Accessor);
BuddyManagementService_addBuddyMembers_result->mk_accessors( qw( ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_addBuddyMembers_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_addBuddyMembers_result');
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_blockBuddyMember_args;
use base qw(Class::Accessor);
BuddyManagementService_blockBuddyMember_args->mk_accessors( qw( requestId mid ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{requestId} = undef;
          $self->{mid} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{requestId}) {
              $self->{requestId} = $vals->{requestId};
            }
            if (defined $vals->{mid}) {
              $self->{mid} = $vals->{mid};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_blockBuddyMember_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{requestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^2$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{mid});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_blockBuddyMember_args');
          if (defined $self->{requestId}) {
            $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{requestId});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{mid}) {
            $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 2);
            $xfer += $output->writeString($self->{mid});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_blockBuddyMember_result;
use base qw(Class::Accessor);
BuddyManagementService_blockBuddyMember_result->mk_accessors( qw( ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_blockBuddyMember_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_blockBuddyMember_result');
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_commitSendMessagesToAll_args;
use base qw(Class::Accessor);
BuddyManagementService_commitSendMessagesToAll_args->mk_accessors( qw( requestIdList ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{requestIdList} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{requestIdList}) {
              $self->{requestIdList} = $vals->{requestIdList};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_commitSendMessagesToAll_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::LIST) {
                {
                  my $_size977 = 0;
                  $self->{requestIdList} = [];
                  my $_etype980 = 0;
                  $xfer += $input->readListBegin(\$_etype980, \$_size977);
                  for (my $_i981 = 0; $_i981 < $_size977; ++$_i981)
                  {
                    my $elem982 = undef;
                    $xfer += $input->readString(\$elem982);
                    push(@{$self->{requestIdList}},$elem982);
                  }
                  $xfer += $input->readListEnd();
                }
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_commitSendMessagesToAll_args');
          if (defined $self->{requestIdList}) {
            $xfer += $output->writeFieldBegin('requestIdList', Thrift::TType::LIST, 1);
            {
              $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{requestIdList}}));
              {
                foreach my $iter983 (@{$self->{requestIdList}}) 
                {
                  $xfer += $output->writeString($iter983);
                }
              }
              $xfer += $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_commitSendMessagesToAll_result;
use base qw(Class::Accessor);
BuddyManagementService_commitSendMessagesToAll_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_commitSendMessagesToAll_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::LIST) {
                {
                  my $_size984 = 0;
                  $self->{success} = [];
                  my $_etype987 = 0;
                  $xfer += $input->readListBegin(\$_etype987, \$_size984);
                  for (my $_i988 = 0; $_i988 < $_size984; ++$_i988)
                  {
                    my $elem989 = undef;
                    $elem989 = SendBuddyMessageResult->new();
                    $xfer += $elem989->read($input);
                    push(@{$self->{success}},$elem989);
                  }
                  $xfer += $input->readListEnd();
                }
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_commitSendMessagesToAll_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::LIST, 0);
            {
              $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{success}}));
              {
                foreach my $iter990 (@{$self->{success}}) 
                {
                  $xfer += ${iter990}->write($output);
                }
              }
              $xfer += $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_commitSendMessagesToMids_args;
use base qw(Class::Accessor);
BuddyManagementService_commitSendMessagesToMids_args->mk_accessors( qw( requestIdList mids ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{requestIdList} = undef;
          $self->{mids} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{requestIdList}) {
              $self->{requestIdList} = $vals->{requestIdList};
            }
            if (defined $vals->{mids}) {
              $self->{mids} = $vals->{mids};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_commitSendMessagesToMids_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::LIST) {
                {
                  my $_size991 = 0;
                  $self->{requestIdList} = [];
                  my $_etype994 = 0;
                  $xfer += $input->readListBegin(\$_etype994, \$_size991);
                  for (my $_i995 = 0; $_i995 < $_size991; ++$_i995)
                  {
                    my $elem996 = undef;
                    $xfer += $input->readString(\$elem996);
                    push(@{$self->{requestIdList}},$elem996);
                  }
                  $xfer += $input->readListEnd();
                }
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^2$/ && do{              if ($ftype == Thrift::TType::LIST) {
                {
                  my $_size997 = 0;
                  $self->{mids} = [];
                  my $_etype1000 = 0;
                  $xfer += $input->readListBegin(\$_etype1000, \$_size997);
                  for (my $_i1001 = 0; $_i1001 < $_size997; ++$_i1001)
                  {
                    my $elem1002 = undef;
                    $xfer += $input->readString(\$elem1002);
                    push(@{$self->{mids}},$elem1002);
                  }
                  $xfer += $input->readListEnd();
                }
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_commitSendMessagesToMids_args');
          if (defined $self->{requestIdList}) {
            $xfer += $output->writeFieldBegin('requestIdList', Thrift::TType::LIST, 1);
            {
              $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{requestIdList}}));
              {
                foreach my $iter1003 (@{$self->{requestIdList}}) 
                {
                  $xfer += $output->writeString($iter1003);
                }
              }
              $xfer += $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{mids}) {
            $xfer += $output->writeFieldBegin('mids', Thrift::TType::LIST, 2);
            {
              $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{mids}}));
              {
                foreach my $iter1004 (@{$self->{mids}}) 
                {
                  $xfer += $output->writeString($iter1004);
                }
              }
              $xfer += $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_commitSendMessagesToMids_result;
use base qw(Class::Accessor);
BuddyManagementService_commitSendMessagesToMids_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_commitSendMessagesToMids_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::LIST) {
                {
                  my $_size1005 = 0;
                  $self->{success} = [];
                  my $_etype1008 = 0;
                  $xfer += $input->readListBegin(\$_etype1008, \$_size1005);
                  for (my $_i1009 = 0; $_i1009 < $_size1005; ++$_i1009)
                  {
                    my $elem1010 = undef;
                    $elem1010 = SendBuddyMessageResult->new();
                    $xfer += $elem1010->read($input);
                    push(@{$self->{success}},$elem1010);
                  }
                  $xfer += $input->readListEnd();
                }
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_commitSendMessagesToMids_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::LIST, 0);
            {
              $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{success}}));
              {
                foreach my $iter1011 (@{$self->{success}}) 
                {
                  $xfer += ${iter1011}->write($output);
                }
              }
              $xfer += $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_containsBuddyMember_args;
use base qw(Class::Accessor);
BuddyManagementService_containsBuddyMember_args->mk_accessors( qw( requestId userMid ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{requestId} = undef;
          $self->{userMid} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{requestId}) {
              $self->{requestId} = $vals->{requestId};
            }
            if (defined $vals->{userMid}) {
              $self->{userMid} = $vals->{userMid};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_containsBuddyMember_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{requestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^2$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{userMid});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_containsBuddyMember_args');
          if (defined $self->{requestId}) {
            $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{requestId});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{userMid}) {
            $xfer += $output->writeFieldBegin('userMid', Thrift::TType::STRING, 2);
            $xfer += $output->writeString($self->{userMid});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_containsBuddyMember_result;
use base qw(Class::Accessor);
BuddyManagementService_containsBuddyMember_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_containsBuddyMember_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::BOOL) {
                $xfer += $input->readBool(\$self->{success});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_containsBuddyMember_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::BOOL, 0);
            $xfer += $output->writeBool($self->{success});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_downloadMessageContent_args;
use base qw(Class::Accessor);
BuddyManagementService_downloadMessageContent_args->mk_accessors( qw( requestId messageId ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{requestId} = undef;
          $self->{messageId} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{requestId}) {
              $self->{requestId} = $vals->{requestId};
            }
            if (defined $vals->{messageId}) {
              $self->{messageId} = $vals->{messageId};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_downloadMessageContent_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{requestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^2$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{messageId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_downloadMessageContent_args');
          if (defined $self->{requestId}) {
            $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{requestId});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{messageId}) {
            $xfer += $output->writeFieldBegin('messageId', Thrift::TType::STRING, 2);
            $xfer += $output->writeString($self->{messageId});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_downloadMessageContent_result;
use base qw(Class::Accessor);
BuddyManagementService_downloadMessageContent_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_downloadMessageContent_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{success});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_downloadMessageContent_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::STRING, 0);
            $xfer += $output->writeString($self->{success});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_downloadMessageContentPreview_args;
use base qw(Class::Accessor);
BuddyManagementService_downloadMessageContentPreview_args->mk_accessors( qw( requestId messageId ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{requestId} = undef;
          $self->{messageId} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{requestId}) {
              $self->{requestId} = $vals->{requestId};
            }
            if (defined $vals->{messageId}) {
              $self->{messageId} = $vals->{messageId};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_downloadMessageContentPreview_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{requestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^2$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{messageId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_downloadMessageContentPreview_args');
          if (defined $self->{requestId}) {
            $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{requestId});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{messageId}) {
            $xfer += $output->writeFieldBegin('messageId', Thrift::TType::STRING, 2);
            $xfer += $output->writeString($self->{messageId});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_downloadMessageContentPreview_result;
use base qw(Class::Accessor);
BuddyManagementService_downloadMessageContentPreview_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_downloadMessageContentPreview_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{success});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_downloadMessageContentPreview_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::STRING, 0);
            $xfer += $output->writeString($self->{success});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_downloadProfileImage_args;
use base qw(Class::Accessor);
BuddyManagementService_downloadProfileImage_args->mk_accessors( qw( requestId ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{requestId} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{requestId}) {
              $self->{requestId} = $vals->{requestId};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_downloadProfileImage_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{requestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_downloadProfileImage_args');
          if (defined $self->{requestId}) {
            $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{requestId});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_downloadProfileImage_result;
use base qw(Class::Accessor);
BuddyManagementService_downloadProfileImage_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_downloadProfileImage_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{success});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_downloadProfileImage_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::STRING, 0);
            $xfer += $output->writeString($self->{success});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_downloadProfileImagePreview_args;
use base qw(Class::Accessor);
BuddyManagementService_downloadProfileImagePreview_args->mk_accessors( qw( requestId ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{requestId} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{requestId}) {
              $self->{requestId} = $vals->{requestId};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_downloadProfileImagePreview_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{requestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_downloadProfileImagePreview_args');
          if (defined $self->{requestId}) {
            $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{requestId});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_downloadProfileImagePreview_result;
use base qw(Class::Accessor);
BuddyManagementService_downloadProfileImagePreview_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_downloadProfileImagePreview_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{success});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_downloadProfileImagePreview_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::STRING, 0);
            $xfer += $output->writeString($self->{success});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_getActiveMemberCountByBuddyMid_args;
use base qw(Class::Accessor);
BuddyManagementService_getActiveMemberCountByBuddyMid_args->mk_accessors( qw( buddyMid ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{buddyMid} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{buddyMid}) {
              $self->{buddyMid} = $vals->{buddyMid};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_getActiveMemberCountByBuddyMid_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^2$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{buddyMid});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_getActiveMemberCountByBuddyMid_args');
          if (defined $self->{buddyMid}) {
            $xfer += $output->writeFieldBegin('buddyMid', Thrift::TType::STRING, 2);
            $xfer += $output->writeString($self->{buddyMid});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_getActiveMemberCountByBuddyMid_result;
use base qw(Class::Accessor);
BuddyManagementService_getActiveMemberCountByBuddyMid_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_getActiveMemberCountByBuddyMid_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::I64) {
                $xfer += $input->readI64(\$self->{success});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_getActiveMemberCountByBuddyMid_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::I64, 0);
            $xfer += $output->writeI64($self->{success});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_getActiveMemberMidsByBuddyMid_args;
use base qw(Class::Accessor);
BuddyManagementService_getActiveMemberMidsByBuddyMid_args->mk_accessors( qw( buddyMid ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{buddyMid} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{buddyMid}) {
              $self->{buddyMid} = $vals->{buddyMid};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_getActiveMemberMidsByBuddyMid_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^2$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{buddyMid});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_getActiveMemberMidsByBuddyMid_args');
          if (defined $self->{buddyMid}) {
            $xfer += $output->writeFieldBegin('buddyMid', Thrift::TType::STRING, 2);
            $xfer += $output->writeString($self->{buddyMid});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_getActiveMemberMidsByBuddyMid_result;
use base qw(Class::Accessor);
BuddyManagementService_getActiveMemberMidsByBuddyMid_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_getActiveMemberMidsByBuddyMid_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::LIST) {
                {
                  my $_size1012 = 0;
                  $self->{success} = [];
                  my $_etype1015 = 0;
                  $xfer += $input->readListBegin(\$_etype1015, \$_size1012);
                  for (my $_i1016 = 0; $_i1016 < $_size1012; ++$_i1016)
                  {
                    my $elem1017 = undef;
                    $xfer += $input->readString(\$elem1017);
                    push(@{$self->{success}},$elem1017);
                  }
                  $xfer += $input->readListEnd();
                }
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_getActiveMemberMidsByBuddyMid_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::LIST, 0);
            {
              $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{success}}));
              {
                foreach my $iter1018 (@{$self->{success}}) 
                {
                  $xfer += $output->writeString($iter1018);
                }
              }
              $xfer += $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_getAllBuddyMembers_args;
use base qw(Class::Accessor);

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_getAllBuddyMembers_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_getAllBuddyMembers_args');
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_getAllBuddyMembers_result;
use base qw(Class::Accessor);
BuddyManagementService_getAllBuddyMembers_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_getAllBuddyMembers_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::LIST) {
                {
                  my $_size1019 = 0;
                  $self->{success} = [];
                  my $_etype1022 = 0;
                  $xfer += $input->readListBegin(\$_etype1022, \$_size1019);
                  for (my $_i1023 = 0; $_i1023 < $_size1019; ++$_i1023)
                  {
                    my $elem1024 = undef;
                    $xfer += $input->readString(\$elem1024);
                    push(@{$self->{success}},$elem1024);
                  }
                  $xfer += $input->readListEnd();
                }
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_getAllBuddyMembers_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::LIST, 0);
            {
              $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{success}}));
              {
                foreach my $iter1025 (@{$self->{success}}) 
                {
                  $xfer += $output->writeString($iter1025);
                }
              }
              $xfer += $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_getBlockedBuddyMembers_args;
use base qw(Class::Accessor);

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_getBlockedBuddyMembers_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_getBlockedBuddyMembers_args');
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_getBlockedBuddyMembers_result;
use base qw(Class::Accessor);
BuddyManagementService_getBlockedBuddyMembers_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_getBlockedBuddyMembers_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::LIST) {
                {
                  my $_size1026 = 0;
                  $self->{success} = [];
                  my $_etype1029 = 0;
                  $xfer += $input->readListBegin(\$_etype1029, \$_size1026);
                  for (my $_i1030 = 0; $_i1030 < $_size1026; ++$_i1030)
                  {
                    my $elem1031 = undef;
                    $xfer += $input->readString(\$elem1031);
                    push(@{$self->{success}},$elem1031);
                  }
                  $xfer += $input->readListEnd();
                }
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_getBlockedBuddyMembers_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::LIST, 0);
            {
              $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{success}}));
              {
                foreach my $iter1032 (@{$self->{success}}) 
                {
                  $xfer += $output->writeString($iter1032);
                }
              }
              $xfer += $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_getBlockerCountByBuddyMid_args;
use base qw(Class::Accessor);
BuddyManagementService_getBlockerCountByBuddyMid_args->mk_accessors( qw( buddyMid ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{buddyMid} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{buddyMid}) {
              $self->{buddyMid} = $vals->{buddyMid};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_getBlockerCountByBuddyMid_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^2$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{buddyMid});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_getBlockerCountByBuddyMid_args');
          if (defined $self->{buddyMid}) {
            $xfer += $output->writeFieldBegin('buddyMid', Thrift::TType::STRING, 2);
            $xfer += $output->writeString($self->{buddyMid});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_getBlockerCountByBuddyMid_result;
use base qw(Class::Accessor);
BuddyManagementService_getBlockerCountByBuddyMid_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_getBlockerCountByBuddyMid_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::I64) {
                $xfer += $input->readI64(\$self->{success});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_getBlockerCountByBuddyMid_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::I64, 0);
            $xfer += $output->writeI64($self->{success});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_getBuddyDetailByMid_args;
use base qw(Class::Accessor);
BuddyManagementService_getBuddyDetailByMid_args->mk_accessors( qw( buddyMid ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{buddyMid} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{buddyMid}) {
              $self->{buddyMid} = $vals->{buddyMid};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_getBuddyDetailByMid_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^2$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{buddyMid});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_getBuddyDetailByMid_args');
          if (defined $self->{buddyMid}) {
            $xfer += $output->writeFieldBegin('buddyMid', Thrift::TType::STRING, 2);
            $xfer += $output->writeString($self->{buddyMid});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_getBuddyDetailByMid_result;
use base qw(Class::Accessor);
BuddyManagementService_getBuddyDetailByMid_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_getBuddyDetailByMid_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{success} = BuddyDetail->new();
                $xfer += $self->{success}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_getBuddyDetailByMid_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
            $xfer += $self->{success}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_getBuddyProfile_args;
use base qw(Class::Accessor);

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_getBuddyProfile_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_getBuddyProfile_args');
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_getBuddyProfile_result;
use base qw(Class::Accessor);
BuddyManagementService_getBuddyProfile_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_getBuddyProfile_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{success} = BuddyProfile->new();
                $xfer += $self->{success}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_getBuddyProfile_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
            $xfer += $self->{success}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_getContactTicket_args;
use base qw(Class::Accessor);

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_getContactTicket_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_getContactTicket_args');
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_getContactTicket_result;
use base qw(Class::Accessor);
BuddyManagementService_getContactTicket_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_getContactTicket_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{success} = Ticket->new();
                $xfer += $self->{success}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_getContactTicket_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
            $xfer += $self->{success}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_getMemberCountByBuddyMid_args;
use base qw(Class::Accessor);
BuddyManagementService_getMemberCountByBuddyMid_args->mk_accessors( qw( buddyMid ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{buddyMid} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{buddyMid}) {
              $self->{buddyMid} = $vals->{buddyMid};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_getMemberCountByBuddyMid_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^2$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{buddyMid});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_getMemberCountByBuddyMid_args');
          if (defined $self->{buddyMid}) {
            $xfer += $output->writeFieldBegin('buddyMid', Thrift::TType::STRING, 2);
            $xfer += $output->writeString($self->{buddyMid});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_getMemberCountByBuddyMid_result;
use base qw(Class::Accessor);
BuddyManagementService_getMemberCountByBuddyMid_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_getMemberCountByBuddyMid_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::I64) {
                $xfer += $input->readI64(\$self->{success});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_getMemberCountByBuddyMid_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::I64, 0);
            $xfer += $output->writeI64($self->{success});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_getSendBuddyMessageResult_args;
use base qw(Class::Accessor);
BuddyManagementService_getSendBuddyMessageResult_args->mk_accessors( qw( sendBuddyMessageRequestId ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{sendBuddyMessageRequestId} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{sendBuddyMessageRequestId}) {
              $self->{sendBuddyMessageRequestId} = $vals->{sendBuddyMessageRequestId};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_getSendBuddyMessageResult_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{sendBuddyMessageRequestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_getSendBuddyMessageResult_args');
          if (defined $self->{sendBuddyMessageRequestId}) {
            $xfer += $output->writeFieldBegin('sendBuddyMessageRequestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{sendBuddyMessageRequestId});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_getSendBuddyMessageResult_result;
use base qw(Class::Accessor);
BuddyManagementService_getSendBuddyMessageResult_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_getSendBuddyMessageResult_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{success} = SendBuddyMessageResult->new();
                $xfer += $self->{success}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_getSendBuddyMessageResult_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
            $xfer += $self->{success}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_getSetBuddyOnAirResult_args;
use base qw(Class::Accessor);
BuddyManagementService_getSetBuddyOnAirResult_args->mk_accessors( qw( setBuddyOnAirRequestId ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{setBuddyOnAirRequestId} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{setBuddyOnAirRequestId}) {
              $self->{setBuddyOnAirRequestId} = $vals->{setBuddyOnAirRequestId};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_getSetBuddyOnAirResult_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{setBuddyOnAirRequestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_getSetBuddyOnAirResult_args');
          if (defined $self->{setBuddyOnAirRequestId}) {
            $xfer += $output->writeFieldBegin('setBuddyOnAirRequestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{setBuddyOnAirRequestId});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_getSetBuddyOnAirResult_result;
use base qw(Class::Accessor);
BuddyManagementService_getSetBuddyOnAirResult_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_getSetBuddyOnAirResult_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{success} = SetBuddyOnAirResult->new();
                $xfer += $self->{success}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_getSetBuddyOnAirResult_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
            $xfer += $self->{success}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_getUpdateBuddyProfileResult_args;
use base qw(Class::Accessor);
BuddyManagementService_getUpdateBuddyProfileResult_args->mk_accessors( qw( updateBuddyProfileRequestId ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{updateBuddyProfileRequestId} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{updateBuddyProfileRequestId}) {
              $self->{updateBuddyProfileRequestId} = $vals->{updateBuddyProfileRequestId};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_getUpdateBuddyProfileResult_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{updateBuddyProfileRequestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_getUpdateBuddyProfileResult_args');
          if (defined $self->{updateBuddyProfileRequestId}) {
            $xfer += $output->writeFieldBegin('updateBuddyProfileRequestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{updateBuddyProfileRequestId});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_getUpdateBuddyProfileResult_result;
use base qw(Class::Accessor);
BuddyManagementService_getUpdateBuddyProfileResult_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_getUpdateBuddyProfileResult_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{success} = UpdateBuddyProfileResult->new();
                $xfer += $self->{success}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_getUpdateBuddyProfileResult_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
            $xfer += $self->{success}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_isBuddyOnAirByMid_args;
use base qw(Class::Accessor);
BuddyManagementService_isBuddyOnAirByMid_args->mk_accessors( qw( buddyMid ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{buddyMid} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{buddyMid}) {
              $self->{buddyMid} = $vals->{buddyMid};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_isBuddyOnAirByMid_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^2$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{buddyMid});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_isBuddyOnAirByMid_args');
          if (defined $self->{buddyMid}) {
            $xfer += $output->writeFieldBegin('buddyMid', Thrift::TType::STRING, 2);
            $xfer += $output->writeString($self->{buddyMid});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_isBuddyOnAirByMid_result;
use base qw(Class::Accessor);
BuddyManagementService_isBuddyOnAirByMid_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_isBuddyOnAirByMid_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::BOOL) {
                $xfer += $input->readBool(\$self->{success});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_isBuddyOnAirByMid_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::BOOL, 0);
            $xfer += $output->writeBool($self->{success});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_args;
use base qw(Class::Accessor);
BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_args->mk_accessors( qw( requestId msg sourceContentId ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{requestId} = undef;
          $self->{msg} = undef;
          $self->{sourceContentId} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{requestId}) {
              $self->{requestId} = $vals->{requestId};
            }
            if (defined $vals->{msg}) {
              $self->{msg} = $vals->{msg};
            }
            if (defined $vals->{sourceContentId}) {
              $self->{sourceContentId} = $vals->{sourceContentId};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{requestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^2$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{msg} = Message->new();
                $xfer += $self->{msg}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^3$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{sourceContentId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_args');
          if (defined $self->{requestId}) {
            $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{requestId});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{msg}) {
            $xfer += $output->writeFieldBegin('msg', Thrift::TType::STRUCT, 2);
            $xfer += $self->{msg}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{sourceContentId}) {
            $xfer += $output->writeFieldBegin('sourceContentId', Thrift::TType::STRING, 3);
            $xfer += $output->writeString($self->{sourceContentId});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_result;
use base qw(Class::Accessor);
BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{success});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::STRING, 0);
            $xfer += $output->writeString($self->{success});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_linkAndSendBuddyContentMessageToMids_args;
use base qw(Class::Accessor);
BuddyManagementService_linkAndSendBuddyContentMessageToMids_args->mk_accessors( qw( requestId msg sourceContentId mids ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{requestId} = undef;
          $self->{msg} = undef;
          $self->{sourceContentId} = undef;
          $self->{mids} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{requestId}) {
              $self->{requestId} = $vals->{requestId};
            }
            if (defined $vals->{msg}) {
              $self->{msg} = $vals->{msg};
            }
            if (defined $vals->{sourceContentId}) {
              $self->{sourceContentId} = $vals->{sourceContentId};
            }
            if (defined $vals->{mids}) {
              $self->{mids} = $vals->{mids};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_linkAndSendBuddyContentMessageToMids_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{requestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^2$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{msg} = Message->new();
                $xfer += $self->{msg}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^3$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{sourceContentId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^4$/ && do{              if ($ftype == Thrift::TType::LIST) {
                {
                  my $_size1033 = 0;
                  $self->{mids} = [];
                  my $_etype1036 = 0;
                  $xfer += $input->readListBegin(\$_etype1036, \$_size1033);
                  for (my $_i1037 = 0; $_i1037 < $_size1033; ++$_i1037)
                  {
                    my $elem1038 = undef;
                    $xfer += $input->readString(\$elem1038);
                    push(@{$self->{mids}},$elem1038);
                  }
                  $xfer += $input->readListEnd();
                }
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_linkAndSendBuddyContentMessageToMids_args');
          if (defined $self->{requestId}) {
            $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{requestId});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{msg}) {
            $xfer += $output->writeFieldBegin('msg', Thrift::TType::STRUCT, 2);
            $xfer += $self->{msg}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{sourceContentId}) {
            $xfer += $output->writeFieldBegin('sourceContentId', Thrift::TType::STRING, 3);
            $xfer += $output->writeString($self->{sourceContentId});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{mids}) {
            $xfer += $output->writeFieldBegin('mids', Thrift::TType::LIST, 4);
            {
              $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{mids}}));
              {
                foreach my $iter1039 (@{$self->{mids}}) 
                {
                  $xfer += $output->writeString($iter1039);
                }
              }
              $xfer += $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_linkAndSendBuddyContentMessageToMids_result;
use base qw(Class::Accessor);
BuddyManagementService_linkAndSendBuddyContentMessageToMids_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_linkAndSendBuddyContentMessageToMids_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{success} = SendBuddyMessageResult->new();
                $xfer += $self->{success}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_linkAndSendBuddyContentMessageToMids_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
            $xfer += $self->{success}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_notifyBuddyBlocked_args;
use base qw(Class::Accessor);
BuddyManagementService_notifyBuddyBlocked_args->mk_accessors( qw( buddyMid blockerMid ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{buddyMid} = undef;
          $self->{blockerMid} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{buddyMid}) {
              $self->{buddyMid} = $vals->{buddyMid};
            }
            if (defined $vals->{blockerMid}) {
              $self->{blockerMid} = $vals->{blockerMid};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_notifyBuddyBlocked_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{buddyMid});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^2$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{blockerMid});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_notifyBuddyBlocked_args');
          if (defined $self->{buddyMid}) {
            $xfer += $output->writeFieldBegin('buddyMid', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{buddyMid});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{blockerMid}) {
            $xfer += $output->writeFieldBegin('blockerMid', Thrift::TType::STRING, 2);
            $xfer += $output->writeString($self->{blockerMid});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_notifyBuddyBlocked_result;
use base qw(Class::Accessor);
BuddyManagementService_notifyBuddyBlocked_result->mk_accessors( qw( ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_notifyBuddyBlocked_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_notifyBuddyBlocked_result');
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_notifyBuddyUnblocked_args;
use base qw(Class::Accessor);
BuddyManagementService_notifyBuddyUnblocked_args->mk_accessors( qw( buddyMid blockerMid ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{buddyMid} = undef;
          $self->{blockerMid} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{buddyMid}) {
              $self->{buddyMid} = $vals->{buddyMid};
            }
            if (defined $vals->{blockerMid}) {
              $self->{blockerMid} = $vals->{blockerMid};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_notifyBuddyUnblocked_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{buddyMid});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^2$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{blockerMid});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_notifyBuddyUnblocked_args');
          if (defined $self->{buddyMid}) {
            $xfer += $output->writeFieldBegin('buddyMid', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{buddyMid});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{blockerMid}) {
            $xfer += $output->writeFieldBegin('blockerMid', Thrift::TType::STRING, 2);
            $xfer += $output->writeString($self->{blockerMid});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_notifyBuddyUnblocked_result;
use base qw(Class::Accessor);
BuddyManagementService_notifyBuddyUnblocked_result->mk_accessors( qw( ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_notifyBuddyUnblocked_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_notifyBuddyUnblocked_result');
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_registerBuddy_args;
use base qw(Class::Accessor);
BuddyManagementService_registerBuddy_args->mk_accessors( qw( buddyId searchId displayName statusMeessage picture settings ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{buddyId} = undef;
          $self->{searchId} = undef;
          $self->{displayName} = undef;
          $self->{statusMeessage} = undef;
          $self->{picture} = undef;
          $self->{settings} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{buddyId}) {
              $self->{buddyId} = $vals->{buddyId};
            }
            if (defined $vals->{searchId}) {
              $self->{searchId} = $vals->{searchId};
            }
            if (defined $vals->{displayName}) {
              $self->{displayName} = $vals->{displayName};
            }
            if (defined $vals->{statusMeessage}) {
              $self->{statusMeessage} = $vals->{statusMeessage};
            }
            if (defined $vals->{picture}) {
              $self->{picture} = $vals->{picture};
            }
            if (defined $vals->{settings}) {
              $self->{settings} = $vals->{settings};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_registerBuddy_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^2$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{buddyId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^3$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{searchId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^4$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{displayName});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^5$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{statusMeessage});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^6$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{picture});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^7$/ && do{              if ($ftype == Thrift::TType::MAP) {
                {
                  my $_size1040 = 0;
                  $self->{settings} = {};
                  my $_ktype1041 = 0;
                  my $_vtype1042 = 0;
                  $xfer += $input->readMapBegin(\$_ktype1041, \$_vtype1042, \$_size1040);
                  for (my $_i1044 = 0; $_i1044 < $_size1040; ++$_i1044)
                  {
                    my $key1045 = '';
                    my $val1046 = '';
                    $xfer += $input->readString(\$key1045);
                    $xfer += $input->readString(\$val1046);
                    $self->{settings}->{$key1045} = $val1046;
                  }
                  $xfer += $input->readMapEnd();
                }
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_registerBuddy_args');
          if (defined $self->{buddyId}) {
            $xfer += $output->writeFieldBegin('buddyId', Thrift::TType::STRING, 2);
            $xfer += $output->writeString($self->{buddyId});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{searchId}) {
            $xfer += $output->writeFieldBegin('searchId', Thrift::TType::STRING, 3);
            $xfer += $output->writeString($self->{searchId});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{displayName}) {
            $xfer += $output->writeFieldBegin('displayName', Thrift::TType::STRING, 4);
            $xfer += $output->writeString($self->{displayName});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{statusMeessage}) {
            $xfer += $output->writeFieldBegin('statusMeessage', Thrift::TType::STRING, 5);
            $xfer += $output->writeString($self->{statusMeessage});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{picture}) {
            $xfer += $output->writeFieldBegin('picture', Thrift::TType::STRING, 6);
            $xfer += $output->writeString($self->{picture});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{settings}) {
            $xfer += $output->writeFieldBegin('settings', Thrift::TType::MAP, 7);
            {
              $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{settings}}));
              {
                while( my ($kiter1047,$viter1048) = each %{$self->{settings}}) 
                {
                  $xfer += $output->writeString($kiter1047);
                  $xfer += $output->writeString($viter1048);
                }
              }
              $xfer += $output->writeMapEnd();
            }
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_registerBuddy_result;
use base qw(Class::Accessor);
BuddyManagementService_registerBuddy_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_registerBuddy_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{success});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_registerBuddy_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::STRING, 0);
            $xfer += $output->writeString($self->{success});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_registerBuddyAdmin_args;
use base qw(Class::Accessor);
BuddyManagementService_registerBuddyAdmin_args->mk_accessors( qw( buddyId searchId displayName statusMessage picture ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{buddyId} = undef;
          $self->{searchId} = undef;
          $self->{displayName} = undef;
          $self->{statusMessage} = undef;
          $self->{picture} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{buddyId}) {
              $self->{buddyId} = $vals->{buddyId};
            }
            if (defined $vals->{searchId}) {
              $self->{searchId} = $vals->{searchId};
            }
            if (defined $vals->{displayName}) {
              $self->{displayName} = $vals->{displayName};
            }
            if (defined $vals->{statusMessage}) {
              $self->{statusMessage} = $vals->{statusMessage};
            }
            if (defined $vals->{picture}) {
              $self->{picture} = $vals->{picture};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_registerBuddyAdmin_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^2$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{buddyId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^3$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{searchId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^4$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{displayName});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^5$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{statusMessage});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^6$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{picture});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_registerBuddyAdmin_args');
          if (defined $self->{buddyId}) {
            $xfer += $output->writeFieldBegin('buddyId', Thrift::TType::STRING, 2);
            $xfer += $output->writeString($self->{buddyId});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{searchId}) {
            $xfer += $output->writeFieldBegin('searchId', Thrift::TType::STRING, 3);
            $xfer += $output->writeString($self->{searchId});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{displayName}) {
            $xfer += $output->writeFieldBegin('displayName', Thrift::TType::STRING, 4);
            $xfer += $output->writeString($self->{displayName});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{statusMessage}) {
            $xfer += $output->writeFieldBegin('statusMessage', Thrift::TType::STRING, 5);
            $xfer += $output->writeString($self->{statusMessage});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{picture}) {
            $xfer += $output->writeFieldBegin('picture', Thrift::TType::STRING, 6);
            $xfer += $output->writeString($self->{picture});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_registerBuddyAdmin_result;
use base qw(Class::Accessor);
BuddyManagementService_registerBuddyAdmin_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_registerBuddyAdmin_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{success});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_registerBuddyAdmin_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::STRING, 0);
            $xfer += $output->writeString($self->{success});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_reissueContactTicket_args;
use base qw(Class::Accessor);
BuddyManagementService_reissueContactTicket_args->mk_accessors( qw( expirationTime maxUseCount ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{expirationTime} = undef;
          $self->{maxUseCount} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{expirationTime}) {
              $self->{expirationTime} = $vals->{expirationTime};
            }
            if (defined $vals->{maxUseCount}) {
              $self->{maxUseCount} = $vals->{maxUseCount};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_reissueContactTicket_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^3$/ && do{              if ($ftype == Thrift::TType::I64) {
                $xfer += $input->readI64(\$self->{expirationTime});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^4$/ && do{              if ($ftype == Thrift::TType::I32) {
                $xfer += $input->readI32(\$self->{maxUseCount});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_reissueContactTicket_args');
          if (defined $self->{expirationTime}) {
            $xfer += $output->writeFieldBegin('expirationTime', Thrift::TType::I64, 3);
            $xfer += $output->writeI64($self->{expirationTime});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{maxUseCount}) {
            $xfer += $output->writeFieldBegin('maxUseCount', Thrift::TType::I32, 4);
            $xfer += $output->writeI32($self->{maxUseCount});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_reissueContactTicket_result;
use base qw(Class::Accessor);
BuddyManagementService_reissueContactTicket_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_reissueContactTicket_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{success});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_reissueContactTicket_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::STRING, 0);
            $xfer += $output->writeString($self->{success});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_removeBuddyMember_args;
use base qw(Class::Accessor);
BuddyManagementService_removeBuddyMember_args->mk_accessors( qw( requestId userMid ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{requestId} = undef;
          $self->{userMid} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{requestId}) {
              $self->{requestId} = $vals->{requestId};
            }
            if (defined $vals->{userMid}) {
              $self->{userMid} = $vals->{userMid};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_removeBuddyMember_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{requestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^2$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{userMid});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_removeBuddyMember_args');
          if (defined $self->{requestId}) {
            $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{requestId});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{userMid}) {
            $xfer += $output->writeFieldBegin('userMid', Thrift::TType::STRING, 2);
            $xfer += $output->writeString($self->{userMid});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_removeBuddyMember_result;
use base qw(Class::Accessor);
BuddyManagementService_removeBuddyMember_result->mk_accessors( qw( ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_removeBuddyMember_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_removeBuddyMember_result');
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_removeBuddyMembers_args;
use base qw(Class::Accessor);
BuddyManagementService_removeBuddyMembers_args->mk_accessors( qw( requestId userMids ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{requestId} = undef;
          $self->{userMids} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{requestId}) {
              $self->{requestId} = $vals->{requestId};
            }
            if (defined $vals->{userMids}) {
              $self->{userMids} = $vals->{userMids};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_removeBuddyMembers_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{requestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^2$/ && do{              if ($ftype == Thrift::TType::LIST) {
                {
                  my $_size1049 = 0;
                  $self->{userMids} = [];
                  my $_etype1052 = 0;
                  $xfer += $input->readListBegin(\$_etype1052, \$_size1049);
                  for (my $_i1053 = 0; $_i1053 < $_size1049; ++$_i1053)
                  {
                    my $elem1054 = undef;
                    $xfer += $input->readString(\$elem1054);
                    push(@{$self->{userMids}},$elem1054);
                  }
                  $xfer += $input->readListEnd();
                }
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_removeBuddyMembers_args');
          if (defined $self->{requestId}) {
            $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{requestId});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{userMids}) {
            $xfer += $output->writeFieldBegin('userMids', Thrift::TType::LIST, 2);
            {
              $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{userMids}}));
              {
                foreach my $iter1055 (@{$self->{userMids}}) 
                {
                  $xfer += $output->writeString($iter1055);
                }
              }
              $xfer += $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_removeBuddyMembers_result;
use base qw(Class::Accessor);
BuddyManagementService_removeBuddyMembers_result->mk_accessors( qw( ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_removeBuddyMembers_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_removeBuddyMembers_result');
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_sendBuddyContentMessageToAll_args;
use base qw(Class::Accessor);
BuddyManagementService_sendBuddyContentMessageToAll_args->mk_accessors( qw( requestId msg content ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{requestId} = undef;
          $self->{msg} = undef;
          $self->{content} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{requestId}) {
              $self->{requestId} = $vals->{requestId};
            }
            if (defined $vals->{msg}) {
              $self->{msg} = $vals->{msg};
            }
            if (defined $vals->{content}) {
              $self->{content} = $vals->{content};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_sendBuddyContentMessageToAll_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{requestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^2$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{msg} = Message->new();
                $xfer += $self->{msg}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^3$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{content});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_sendBuddyContentMessageToAll_args');
          if (defined $self->{requestId}) {
            $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{requestId});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{msg}) {
            $xfer += $output->writeFieldBegin('msg', Thrift::TType::STRUCT, 2);
            $xfer += $self->{msg}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{content}) {
            $xfer += $output->writeFieldBegin('content', Thrift::TType::STRING, 3);
            $xfer += $output->writeString($self->{content});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_sendBuddyContentMessageToAll_result;
use base qw(Class::Accessor);
BuddyManagementService_sendBuddyContentMessageToAll_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_sendBuddyContentMessageToAll_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{success} = SendBuddyMessageResult->new();
                $xfer += $self->{success}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_sendBuddyContentMessageToAll_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
            $xfer += $self->{success}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_sendBuddyContentMessageToAllAsync_args;
use base qw(Class::Accessor);
BuddyManagementService_sendBuddyContentMessageToAllAsync_args->mk_accessors( qw( requestId msg content ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{requestId} = undef;
          $self->{msg} = undef;
          $self->{content} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{requestId}) {
              $self->{requestId} = $vals->{requestId};
            }
            if (defined $vals->{msg}) {
              $self->{msg} = $vals->{msg};
            }
            if (defined $vals->{content}) {
              $self->{content} = $vals->{content};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_sendBuddyContentMessageToAllAsync_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{requestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^2$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{msg} = Message->new();
                $xfer += $self->{msg}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^3$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{content});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_sendBuddyContentMessageToAllAsync_args');
          if (defined $self->{requestId}) {
            $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{requestId});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{msg}) {
            $xfer += $output->writeFieldBegin('msg', Thrift::TType::STRUCT, 2);
            $xfer += $self->{msg}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{content}) {
            $xfer += $output->writeFieldBegin('content', Thrift::TType::STRING, 3);
            $xfer += $output->writeString($self->{content});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_sendBuddyContentMessageToAllAsync_result;
use base qw(Class::Accessor);
BuddyManagementService_sendBuddyContentMessageToAllAsync_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_sendBuddyContentMessageToAllAsync_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{success});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_sendBuddyContentMessageToAllAsync_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::STRING, 0);
            $xfer += $output->writeString($self->{success});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_sendBuddyContentMessageToMids_args;
use base qw(Class::Accessor);
BuddyManagementService_sendBuddyContentMessageToMids_args->mk_accessors( qw( requestId msg content mids ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{requestId} = undef;
          $self->{msg} = undef;
          $self->{content} = undef;
          $self->{mids} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{requestId}) {
              $self->{requestId} = $vals->{requestId};
            }
            if (defined $vals->{msg}) {
              $self->{msg} = $vals->{msg};
            }
            if (defined $vals->{content}) {
              $self->{content} = $vals->{content};
            }
            if (defined $vals->{mids}) {
              $self->{mids} = $vals->{mids};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_sendBuddyContentMessageToMids_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{requestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^2$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{msg} = Message->new();
                $xfer += $self->{msg}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^3$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{content});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^4$/ && do{              if ($ftype == Thrift::TType::LIST) {
                {
                  my $_size1056 = 0;
                  $self->{mids} = [];
                  my $_etype1059 = 0;
                  $xfer += $input->readListBegin(\$_etype1059, \$_size1056);
                  for (my $_i1060 = 0; $_i1060 < $_size1056; ++$_i1060)
                  {
                    my $elem1061 = undef;
                    $xfer += $input->readString(\$elem1061);
                    push(@{$self->{mids}},$elem1061);
                  }
                  $xfer += $input->readListEnd();
                }
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_sendBuddyContentMessageToMids_args');
          if (defined $self->{requestId}) {
            $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{requestId});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{msg}) {
            $xfer += $output->writeFieldBegin('msg', Thrift::TType::STRUCT, 2);
            $xfer += $self->{msg}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{content}) {
            $xfer += $output->writeFieldBegin('content', Thrift::TType::STRING, 3);
            $xfer += $output->writeString($self->{content});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{mids}) {
            $xfer += $output->writeFieldBegin('mids', Thrift::TType::LIST, 4);
            {
              $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{mids}}));
              {
                foreach my $iter1062 (@{$self->{mids}}) 
                {
                  $xfer += $output->writeString($iter1062);
                }
              }
              $xfer += $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_sendBuddyContentMessageToMids_result;
use base qw(Class::Accessor);
BuddyManagementService_sendBuddyContentMessageToMids_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_sendBuddyContentMessageToMids_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{success} = SendBuddyMessageResult->new();
                $xfer += $self->{success}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_sendBuddyContentMessageToMids_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
            $xfer += $self->{success}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_sendBuddyContentMessageToMidsAsync_args;
use base qw(Class::Accessor);
BuddyManagementService_sendBuddyContentMessageToMidsAsync_args->mk_accessors( qw( requestId msg content mids ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{requestId} = undef;
          $self->{msg} = undef;
          $self->{content} = undef;
          $self->{mids} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{requestId}) {
              $self->{requestId} = $vals->{requestId};
            }
            if (defined $vals->{msg}) {
              $self->{msg} = $vals->{msg};
            }
            if (defined $vals->{content}) {
              $self->{content} = $vals->{content};
            }
            if (defined $vals->{mids}) {
              $self->{mids} = $vals->{mids};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_sendBuddyContentMessageToMidsAsync_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{requestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^2$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{msg} = Message->new();
                $xfer += $self->{msg}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^3$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{content});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^4$/ && do{              if ($ftype == Thrift::TType::LIST) {
                {
                  my $_size1063 = 0;
                  $self->{mids} = [];
                  my $_etype1066 = 0;
                  $xfer += $input->readListBegin(\$_etype1066, \$_size1063);
                  for (my $_i1067 = 0; $_i1067 < $_size1063; ++$_i1067)
                  {
                    my $elem1068 = undef;
                    $xfer += $input->readString(\$elem1068);
                    push(@{$self->{mids}},$elem1068);
                  }
                  $xfer += $input->readListEnd();
                }
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_sendBuddyContentMessageToMidsAsync_args');
          if (defined $self->{requestId}) {
            $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{requestId});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{msg}) {
            $xfer += $output->writeFieldBegin('msg', Thrift::TType::STRUCT, 2);
            $xfer += $self->{msg}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{content}) {
            $xfer += $output->writeFieldBegin('content', Thrift::TType::STRING, 3);
            $xfer += $output->writeString($self->{content});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{mids}) {
            $xfer += $output->writeFieldBegin('mids', Thrift::TType::LIST, 4);
            {
              $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{mids}}));
              {
                foreach my $iter1069 (@{$self->{mids}}) 
                {
                  $xfer += $output->writeString($iter1069);
                }
              }
              $xfer += $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_sendBuddyContentMessageToMidsAsync_result;
use base qw(Class::Accessor);
BuddyManagementService_sendBuddyContentMessageToMidsAsync_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_sendBuddyContentMessageToMidsAsync_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{success});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_sendBuddyContentMessageToMidsAsync_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::STRING, 0);
            $xfer += $output->writeString($self->{success});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_sendBuddyMessageToAll_args;
use base qw(Class::Accessor);
BuddyManagementService_sendBuddyMessageToAll_args->mk_accessors( qw( requestId msg ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{requestId} = undef;
          $self->{msg} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{requestId}) {
              $self->{requestId} = $vals->{requestId};
            }
            if (defined $vals->{msg}) {
              $self->{msg} = $vals->{msg};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_sendBuddyMessageToAll_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{requestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^2$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{msg} = Message->new();
                $xfer += $self->{msg}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_sendBuddyMessageToAll_args');
          if (defined $self->{requestId}) {
            $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{requestId});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{msg}) {
            $xfer += $output->writeFieldBegin('msg', Thrift::TType::STRUCT, 2);
            $xfer += $self->{msg}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_sendBuddyMessageToAll_result;
use base qw(Class::Accessor);
BuddyManagementService_sendBuddyMessageToAll_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_sendBuddyMessageToAll_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{success} = SendBuddyMessageResult->new();
                $xfer += $self->{success}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_sendBuddyMessageToAll_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
            $xfer += $self->{success}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_sendBuddyMessageToAllAsync_args;
use base qw(Class::Accessor);
BuddyManagementService_sendBuddyMessageToAllAsync_args->mk_accessors( qw( requestId msg ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{requestId} = undef;
          $self->{msg} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{requestId}) {
              $self->{requestId} = $vals->{requestId};
            }
            if (defined $vals->{msg}) {
              $self->{msg} = $vals->{msg};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_sendBuddyMessageToAllAsync_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{requestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^2$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{msg} = Message->new();
                $xfer += $self->{msg}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_sendBuddyMessageToAllAsync_args');
          if (defined $self->{requestId}) {
            $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{requestId});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{msg}) {
            $xfer += $output->writeFieldBegin('msg', Thrift::TType::STRUCT, 2);
            $xfer += $self->{msg}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_sendBuddyMessageToAllAsync_result;
use base qw(Class::Accessor);
BuddyManagementService_sendBuddyMessageToAllAsync_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_sendBuddyMessageToAllAsync_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{success});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_sendBuddyMessageToAllAsync_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::STRING, 0);
            $xfer += $output->writeString($self->{success});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_sendBuddyMessageToMids_args;
use base qw(Class::Accessor);
BuddyManagementService_sendBuddyMessageToMids_args->mk_accessors( qw( requestId msg mids ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{requestId} = undef;
          $self->{msg} = undef;
          $self->{mids} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{requestId}) {
              $self->{requestId} = $vals->{requestId};
            }
            if (defined $vals->{msg}) {
              $self->{msg} = $vals->{msg};
            }
            if (defined $vals->{mids}) {
              $self->{mids} = $vals->{mids};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_sendBuddyMessageToMids_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{requestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^2$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{msg} = Message->new();
                $xfer += $self->{msg}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^3$/ && do{              if ($ftype == Thrift::TType::LIST) {
                {
                  my $_size1070 = 0;
                  $self->{mids} = [];
                  my $_etype1073 = 0;
                  $xfer += $input->readListBegin(\$_etype1073, \$_size1070);
                  for (my $_i1074 = 0; $_i1074 < $_size1070; ++$_i1074)
                  {
                    my $elem1075 = undef;
                    $xfer += $input->readString(\$elem1075);
                    push(@{$self->{mids}},$elem1075);
                  }
                  $xfer += $input->readListEnd();
                }
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_sendBuddyMessageToMids_args');
          if (defined $self->{requestId}) {
            $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{requestId});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{msg}) {
            $xfer += $output->writeFieldBegin('msg', Thrift::TType::STRUCT, 2);
            $xfer += $self->{msg}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{mids}) {
            $xfer += $output->writeFieldBegin('mids', Thrift::TType::LIST, 3);
            {
              $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{mids}}));
              {
                foreach my $iter1076 (@{$self->{mids}}) 
                {
                  $xfer += $output->writeString($iter1076);
                }
              }
              $xfer += $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_sendBuddyMessageToMids_result;
use base qw(Class::Accessor);
BuddyManagementService_sendBuddyMessageToMids_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_sendBuddyMessageToMids_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{success} = SendBuddyMessageResult->new();
                $xfer += $self->{success}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_sendBuddyMessageToMids_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
            $xfer += $self->{success}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_sendBuddyMessageToMidsAsync_args;
use base qw(Class::Accessor);
BuddyManagementService_sendBuddyMessageToMidsAsync_args->mk_accessors( qw( requestId msg mids ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{requestId} = undef;
          $self->{msg} = undef;
          $self->{mids} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{requestId}) {
              $self->{requestId} = $vals->{requestId};
            }
            if (defined $vals->{msg}) {
              $self->{msg} = $vals->{msg};
            }
            if (defined $vals->{mids}) {
              $self->{mids} = $vals->{mids};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_sendBuddyMessageToMidsAsync_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{requestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^2$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{msg} = Message->new();
                $xfer += $self->{msg}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^3$/ && do{              if ($ftype == Thrift::TType::LIST) {
                {
                  my $_size1077 = 0;
                  $self->{mids} = [];
                  my $_etype1080 = 0;
                  $xfer += $input->readListBegin(\$_etype1080, \$_size1077);
                  for (my $_i1081 = 0; $_i1081 < $_size1077; ++$_i1081)
                  {
                    my $elem1082 = undef;
                    $xfer += $input->readString(\$elem1082);
                    push(@{$self->{mids}},$elem1082);
                  }
                  $xfer += $input->readListEnd();
                }
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_sendBuddyMessageToMidsAsync_args');
          if (defined $self->{requestId}) {
            $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{requestId});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{msg}) {
            $xfer += $output->writeFieldBegin('msg', Thrift::TType::STRUCT, 2);
            $xfer += $self->{msg}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{mids}) {
            $xfer += $output->writeFieldBegin('mids', Thrift::TType::LIST, 3);
            {
              $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{mids}}));
              {
                foreach my $iter1083 (@{$self->{mids}}) 
                {
                  $xfer += $output->writeString($iter1083);
                }
              }
              $xfer += $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_sendBuddyMessageToMidsAsync_result;
use base qw(Class::Accessor);
BuddyManagementService_sendBuddyMessageToMidsAsync_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_sendBuddyMessageToMidsAsync_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{success});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_sendBuddyMessageToMidsAsync_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::STRING, 0);
            $xfer += $output->writeString($self->{success});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_sendIndividualEventToAllAsync_args;
use base qw(Class::Accessor);
BuddyManagementService_sendIndividualEventToAllAsync_args->mk_accessors( qw( requestId buddyMid notificationStatus ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{requestId} = undef;
          $self->{buddyMid} = undef;
          $self->{notificationStatus} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{requestId}) {
              $self->{requestId} = $vals->{requestId};
            }
            if (defined $vals->{buddyMid}) {
              $self->{buddyMid} = $vals->{buddyMid};
            }
            if (defined $vals->{notificationStatus}) {
              $self->{notificationStatus} = $vals->{notificationStatus};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_sendIndividualEventToAllAsync_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{requestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^2$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{buddyMid});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^3$/ && do{              if ($ftype == Thrift::TType::I32) {
                $xfer += $input->readI32(\$self->{notificationStatus});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_sendIndividualEventToAllAsync_args');
          if (defined $self->{requestId}) {
            $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{requestId});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{buddyMid}) {
            $xfer += $output->writeFieldBegin('buddyMid', Thrift::TType::STRING, 2);
            $xfer += $output->writeString($self->{buddyMid});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{notificationStatus}) {
            $xfer += $output->writeFieldBegin('notificationStatus', Thrift::TType::I32, 3);
            $xfer += $output->writeI32($self->{notificationStatus});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_sendIndividualEventToAllAsync_result;
use base qw(Class::Accessor);
BuddyManagementService_sendIndividualEventToAllAsync_result->mk_accessors( qw( ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_sendIndividualEventToAllAsync_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_sendIndividualEventToAllAsync_result');
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_setBuddyOnAir_args;
use base qw(Class::Accessor);
BuddyManagementService_setBuddyOnAir_args->mk_accessors( qw( requestId onAir ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{requestId} = undef;
          $self->{onAir} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{requestId}) {
              $self->{requestId} = $vals->{requestId};
            }
            if (defined $vals->{onAir}) {
              $self->{onAir} = $vals->{onAir};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_setBuddyOnAir_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{requestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^2$/ && do{              if ($ftype == Thrift::TType::BOOL) {
                $xfer += $input->readBool(\$self->{onAir});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_setBuddyOnAir_args');
          if (defined $self->{requestId}) {
            $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{requestId});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{onAir}) {
            $xfer += $output->writeFieldBegin('onAir', Thrift::TType::BOOL, 2);
            $xfer += $output->writeBool($self->{onAir});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_setBuddyOnAir_result;
use base qw(Class::Accessor);
BuddyManagementService_setBuddyOnAir_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_setBuddyOnAir_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{success} = SetBuddyOnAirResult->new();
                $xfer += $self->{success}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_setBuddyOnAir_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
            $xfer += $self->{success}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_setBuddyOnAirAsync_args;
use base qw(Class::Accessor);
BuddyManagementService_setBuddyOnAirAsync_args->mk_accessors( qw( requestId onAir ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{requestId} = undef;
          $self->{onAir} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{requestId}) {
              $self->{requestId} = $vals->{requestId};
            }
            if (defined $vals->{onAir}) {
              $self->{onAir} = $vals->{onAir};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_setBuddyOnAirAsync_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{requestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^2$/ && do{              if ($ftype == Thrift::TType::BOOL) {
                $xfer += $input->readBool(\$self->{onAir});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_setBuddyOnAirAsync_args');
          if (defined $self->{requestId}) {
            $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{requestId});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{onAir}) {
            $xfer += $output->writeFieldBegin('onAir', Thrift::TType::BOOL, 2);
            $xfer += $output->writeBool($self->{onAir});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_setBuddyOnAirAsync_result;
use base qw(Class::Accessor);
BuddyManagementService_setBuddyOnAirAsync_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_setBuddyOnAirAsync_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{success});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_setBuddyOnAirAsync_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::STRING, 0);
            $xfer += $output->writeString($self->{success});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_storeMessage_args;
use base qw(Class::Accessor);
BuddyManagementService_storeMessage_args->mk_accessors( qw( requestId messageRequest ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{requestId} = undef;
          $self->{messageRequest} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{requestId}) {
              $self->{requestId} = $vals->{requestId};
            }
            if (defined $vals->{messageRequest}) {
              $self->{messageRequest} = $vals->{messageRequest};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_storeMessage_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{requestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^2$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{messageRequest} = BuddyMessageRequest->new();
                $xfer += $self->{messageRequest}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_storeMessage_args');
          if (defined $self->{requestId}) {
            $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{requestId});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{messageRequest}) {
            $xfer += $output->writeFieldBegin('messageRequest', Thrift::TType::STRUCT, 2);
            $xfer += $self->{messageRequest}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_storeMessage_result;
use base qw(Class::Accessor);
BuddyManagementService_storeMessage_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_storeMessage_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{success} = SendBuddyMessageResult->new();
                $xfer += $self->{success}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_storeMessage_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
            $xfer += $self->{success}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_unblockBuddyMember_args;
use base qw(Class::Accessor);
BuddyManagementService_unblockBuddyMember_args->mk_accessors( qw( requestId mid ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{requestId} = undef;
          $self->{mid} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{requestId}) {
              $self->{requestId} = $vals->{requestId};
            }
            if (defined $vals->{mid}) {
              $self->{mid} = $vals->{mid};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_unblockBuddyMember_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{requestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^2$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{mid});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_unblockBuddyMember_args');
          if (defined $self->{requestId}) {
            $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{requestId});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{mid}) {
            $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 2);
            $xfer += $output->writeString($self->{mid});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_unblockBuddyMember_result;
use base qw(Class::Accessor);
BuddyManagementService_unblockBuddyMember_result->mk_accessors( qw( ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_unblockBuddyMember_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_unblockBuddyMember_result');
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_unregisterBuddy_args;
use base qw(Class::Accessor);
BuddyManagementService_unregisterBuddy_args->mk_accessors( qw( requestId ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{requestId} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{requestId}) {
              $self->{requestId} = $vals->{requestId};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_unregisterBuddy_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{requestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_unregisterBuddy_args');
          if (defined $self->{requestId}) {
            $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{requestId});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_unregisterBuddy_result;
use base qw(Class::Accessor);
BuddyManagementService_unregisterBuddy_result->mk_accessors( qw( ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_unregisterBuddy_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_unregisterBuddy_result');
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_unregisterBuddyAdmin_args;
use base qw(Class::Accessor);
BuddyManagementService_unregisterBuddyAdmin_args->mk_accessors( qw( requestId ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{requestId} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{requestId}) {
              $self->{requestId} = $vals->{requestId};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_unregisterBuddyAdmin_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{requestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_unregisterBuddyAdmin_args');
          if (defined $self->{requestId}) {
            $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{requestId});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_unregisterBuddyAdmin_result;
use base qw(Class::Accessor);
BuddyManagementService_unregisterBuddyAdmin_result->mk_accessors( qw( ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_unregisterBuddyAdmin_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_unregisterBuddyAdmin_result');
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_updateBuddyAdminProfileAttribute_args;
use base qw(Class::Accessor);
BuddyManagementService_updateBuddyAdminProfileAttribute_args->mk_accessors( qw( requestId attributes ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{requestId} = undef;
          $self->{attributes} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{requestId}) {
              $self->{requestId} = $vals->{requestId};
            }
            if (defined $vals->{attributes}) {
              $self->{attributes} = $vals->{attributes};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_updateBuddyAdminProfileAttribute_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{requestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^2$/ && do{              if ($ftype == Thrift::TType::MAP) {
                {
                  my $_size1084 = 0;
                  $self->{attributes} = {};
                  my $_ktype1085 = 0;
                  my $_vtype1086 = 0;
                  $xfer += $input->readMapBegin(\$_ktype1085, \$_vtype1086, \$_size1084);
                  for (my $_i1088 = 0; $_i1088 < $_size1084; ++$_i1088)
                  {
                    my $key1089 = '';
                    my $val1090 = '';
                    $xfer += $input->readString(\$key1089);
                    $xfer += $input->readString(\$val1090);
                    $self->{attributes}->{$key1089} = $val1090;
                  }
                  $xfer += $input->readMapEnd();
                }
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_updateBuddyAdminProfileAttribute_args');
          if (defined $self->{requestId}) {
            $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{requestId});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{attributes}) {
            $xfer += $output->writeFieldBegin('attributes', Thrift::TType::MAP, 2);
            {
              $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{attributes}}));
              {
                while( my ($kiter1091,$viter1092) = each %{$self->{attributes}}) 
                {
                  $xfer += $output->writeString($kiter1091);
                  $xfer += $output->writeString($viter1092);
                }
              }
              $xfer += $output->writeMapEnd();
            }
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_updateBuddyAdminProfileAttribute_result;
use base qw(Class::Accessor);
BuddyManagementService_updateBuddyAdminProfileAttribute_result->mk_accessors( qw( ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_updateBuddyAdminProfileAttribute_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_updateBuddyAdminProfileAttribute_result');
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_updateBuddyAdminProfileImage_args;
use base qw(Class::Accessor);
BuddyManagementService_updateBuddyAdminProfileImage_args->mk_accessors( qw( requestId picture ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{requestId} = undef;
          $self->{picture} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{requestId}) {
              $self->{requestId} = $vals->{requestId};
            }
            if (defined $vals->{picture}) {
              $self->{picture} = $vals->{picture};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_updateBuddyAdminProfileImage_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{requestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^2$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{picture});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_updateBuddyAdminProfileImage_args');
          if (defined $self->{requestId}) {
            $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{requestId});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{picture}) {
            $xfer += $output->writeFieldBegin('picture', Thrift::TType::STRING, 2);
            $xfer += $output->writeString($self->{picture});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_updateBuddyAdminProfileImage_result;
use base qw(Class::Accessor);
BuddyManagementService_updateBuddyAdminProfileImage_result->mk_accessors( qw( ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_updateBuddyAdminProfileImage_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_updateBuddyAdminProfileImage_result');
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_updateBuddyProfileAttributes_args;
use base qw(Class::Accessor);
BuddyManagementService_updateBuddyProfileAttributes_args->mk_accessors( qw( requestId attributes ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{requestId} = undef;
          $self->{attributes} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{requestId}) {
              $self->{requestId} = $vals->{requestId};
            }
            if (defined $vals->{attributes}) {
              $self->{attributes} = $vals->{attributes};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_updateBuddyProfileAttributes_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{requestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^2$/ && do{              if ($ftype == Thrift::TType::MAP) {
                {
                  my $_size1093 = 0;
                  $self->{attributes} = {};
                  my $_ktype1094 = 0;
                  my $_vtype1095 = 0;
                  $xfer += $input->readMapBegin(\$_ktype1094, \$_vtype1095, \$_size1093);
                  for (my $_i1097 = 0; $_i1097 < $_size1093; ++$_i1097)
                  {
                    my $key1098 = '';
                    my $val1099 = '';
                    $xfer += $input->readString(\$key1098);
                    $xfer += $input->readString(\$val1099);
                    $self->{attributes}->{$key1098} = $val1099;
                  }
                  $xfer += $input->readMapEnd();
                }
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_updateBuddyProfileAttributes_args');
          if (defined $self->{requestId}) {
            $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{requestId});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{attributes}) {
            $xfer += $output->writeFieldBegin('attributes', Thrift::TType::MAP, 2);
            {
              $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{attributes}}));
              {
                while( my ($kiter1100,$viter1101) = each %{$self->{attributes}}) 
                {
                  $xfer += $output->writeString($kiter1100);
                  $xfer += $output->writeString($viter1101);
                }
              }
              $xfer += $output->writeMapEnd();
            }
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_updateBuddyProfileAttributes_result;
use base qw(Class::Accessor);
BuddyManagementService_updateBuddyProfileAttributes_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_updateBuddyProfileAttributes_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{success} = UpdateBuddyProfileResult->new();
                $xfer += $self->{success}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_updateBuddyProfileAttributes_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
            $xfer += $self->{success}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_updateBuddyProfileAttributesAsync_args;
use base qw(Class::Accessor);
BuddyManagementService_updateBuddyProfileAttributesAsync_args->mk_accessors( qw( requestId attributes ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{requestId} = undef;
          $self->{attributes} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{requestId}) {
              $self->{requestId} = $vals->{requestId};
            }
            if (defined $vals->{attributes}) {
              $self->{attributes} = $vals->{attributes};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_updateBuddyProfileAttributesAsync_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{requestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^2$/ && do{              if ($ftype == Thrift::TType::MAP) {
                {
                  my $_size1102 = 0;
                  $self->{attributes} = {};
                  my $_ktype1103 = 0;
                  my $_vtype1104 = 0;
                  $xfer += $input->readMapBegin(\$_ktype1103, \$_vtype1104, \$_size1102);
                  for (my $_i1106 = 0; $_i1106 < $_size1102; ++$_i1106)
                  {
                    my $key1107 = '';
                    my $val1108 = '';
                    $xfer += $input->readString(\$key1107);
                    $xfer += $input->readString(\$val1108);
                    $self->{attributes}->{$key1107} = $val1108;
                  }
                  $xfer += $input->readMapEnd();
                }
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_updateBuddyProfileAttributesAsync_args');
          if (defined $self->{requestId}) {
            $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{requestId});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{attributes}) {
            $xfer += $output->writeFieldBegin('attributes', Thrift::TType::MAP, 2);
            {
              $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{attributes}}));
              {
                while( my ($kiter1109,$viter1110) = each %{$self->{attributes}}) 
                {
                  $xfer += $output->writeString($kiter1109);
                  $xfer += $output->writeString($viter1110);
                }
              }
              $xfer += $output->writeMapEnd();
            }
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_updateBuddyProfileAttributesAsync_result;
use base qw(Class::Accessor);
BuddyManagementService_updateBuddyProfileAttributesAsync_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_updateBuddyProfileAttributesAsync_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{success});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_updateBuddyProfileAttributesAsync_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::STRING, 0);
            $xfer += $output->writeString($self->{success});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_updateBuddyProfileImage_args;
use base qw(Class::Accessor);
BuddyManagementService_updateBuddyProfileImage_args->mk_accessors( qw( requestId image ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{requestId} = undef;
          $self->{image} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{requestId}) {
              $self->{requestId} = $vals->{requestId};
            }
            if (defined $vals->{image}) {
              $self->{image} = $vals->{image};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_updateBuddyProfileImage_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{requestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^2$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{image});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_updateBuddyProfileImage_args');
          if (defined $self->{requestId}) {
            $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{requestId});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{image}) {
            $xfer += $output->writeFieldBegin('image', Thrift::TType::STRING, 2);
            $xfer += $output->writeString($self->{image});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_updateBuddyProfileImage_result;
use base qw(Class::Accessor);
BuddyManagementService_updateBuddyProfileImage_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_updateBuddyProfileImage_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{success} = UpdateBuddyProfileResult->new();
                $xfer += $self->{success}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_updateBuddyProfileImage_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
            $xfer += $self->{success}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_updateBuddyProfileImageAsync_args;
use base qw(Class::Accessor);
BuddyManagementService_updateBuddyProfileImageAsync_args->mk_accessors( qw( requestId image ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{requestId} = undef;
          $self->{image} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{requestId}) {
              $self->{requestId} = $vals->{requestId};
            }
            if (defined $vals->{image}) {
              $self->{image} = $vals->{image};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_updateBuddyProfileImageAsync_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{requestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^2$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{image});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_updateBuddyProfileImageAsync_args');
          if (defined $self->{requestId}) {
            $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{requestId});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{image}) {
            $xfer += $output->writeFieldBegin('image', Thrift::TType::STRING, 2);
            $xfer += $output->writeString($self->{image});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_updateBuddyProfileImageAsync_result;
use base qw(Class::Accessor);
BuddyManagementService_updateBuddyProfileImageAsync_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_updateBuddyProfileImageAsync_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{success});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_updateBuddyProfileImageAsync_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::STRING, 0);
            $xfer += $output->writeString($self->{success});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_updateBuddySearchId_args;
use base qw(Class::Accessor);
BuddyManagementService_updateBuddySearchId_args->mk_accessors( qw( requestId searchId ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{requestId} = undef;
          $self->{searchId} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{requestId}) {
              $self->{requestId} = $vals->{requestId};
            }
            if (defined $vals->{searchId}) {
              $self->{searchId} = $vals->{searchId};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_updateBuddySearchId_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{requestId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^2$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{searchId});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_updateBuddySearchId_args');
          if (defined $self->{requestId}) {
            $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
            $xfer += $output->writeString($self->{requestId});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{searchId}) {
            $xfer += $output->writeFieldBegin('searchId', Thrift::TType::STRING, 2);
            $xfer += $output->writeString($self->{searchId});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_updateBuddySearchId_result;
use base qw(Class::Accessor);
BuddyManagementService_updateBuddySearchId_result->mk_accessors( qw( ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_updateBuddySearchId_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_updateBuddySearchId_result');
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_updateBuddySettings_args;
use base qw(Class::Accessor);
BuddyManagementService_updateBuddySettings_args->mk_accessors( qw( settings ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{settings} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{settings}) {
              $self->{settings} = $vals->{settings};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_updateBuddySettings_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^2$/ && do{              if ($ftype == Thrift::TType::MAP) {
                {
                  my $_size1111 = 0;
                  $self->{settings} = {};
                  my $_ktype1112 = 0;
                  my $_vtype1113 = 0;
                  $xfer += $input->readMapBegin(\$_ktype1112, \$_vtype1113, \$_size1111);
                  for (my $_i1115 = 0; $_i1115 < $_size1111; ++$_i1115)
                  {
                    my $key1116 = '';
                    my $val1117 = '';
                    $xfer += $input->readString(\$key1116);
                    $xfer += $input->readString(\$val1117);
                    $self->{settings}->{$key1116} = $val1117;
                  }
                  $xfer += $input->readMapEnd();
                }
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_updateBuddySettings_args');
          if (defined $self->{settings}) {
            $xfer += $output->writeFieldBegin('settings', Thrift::TType::MAP, 2);
            {
              $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{settings}}));
              {
                while( my ($kiter1118,$viter1119) = each %{$self->{settings}}) 
                {
                  $xfer += $output->writeString($kiter1118);
                  $xfer += $output->writeString($viter1119);
                }
              }
              $xfer += $output->writeMapEnd();
            }
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_updateBuddySettings_result;
use base qw(Class::Accessor);
BuddyManagementService_updateBuddySettings_result->mk_accessors( qw( ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_updateBuddySettings_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_updateBuddySettings_result');
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_uploadBuddyContent_args;
use base qw(Class::Accessor);
BuddyManagementService_uploadBuddyContent_args->mk_accessors( qw( contentType content ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{contentType} = undef;
          $self->{content} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{contentType}) {
              $self->{contentType} = $vals->{contentType};
            }
            if (defined $vals->{content}) {
              $self->{content} = $vals->{content};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_uploadBuddyContent_args';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^2$/ && do{              if ($ftype == Thrift::TType::I32) {
                $xfer += $input->readI32(\$self->{contentType});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^3$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{content});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_uploadBuddyContent_args');
          if (defined $self->{contentType}) {
            $xfer += $output->writeFieldBegin('contentType', Thrift::TType::I32, 2);
            $xfer += $output->writeI32($self->{contentType});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{content}) {
            $xfer += $output->writeFieldBegin('content', Thrift::TType::STRING, 3);
            $xfer += $output->writeString($self->{content});
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementService_uploadBuddyContent_result;
use base qw(Class::Accessor);
BuddyManagementService_uploadBuddyContent_result->mk_accessors( qw( success ) );

sub new {
          my $classname = shift;
          my $self      = {};
          my $vals      = shift || {};
          $self->{success} = undef;
          $self->{e} = undef;
          if (UNIVERSAL::isa($vals,'HASH')) {
            if (defined $vals->{success}) {
              $self->{success} = $vals->{success};
            }
            if (defined $vals->{e}) {
              $self->{e} = $vals->{e};
            }
          }
          return bless ($self, $classname);
}

sub getName {
          return 'BuddyManagementService_uploadBuddyContent_result';
        }

sub read {
          my ($self, $input) = @_;
          my $xfer  = 0;
          my $fname;
          my $ftype = 0;
          my $fid   = 0;
          $xfer += $input->readStructBegin(\$fname);
          while (1)
          {
            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
            if ($ftype == Thrift::TType::STOP) {
              last;
            }
            SWITCH: for($fid)
            {
              /^0$/ && do{              if ($ftype == Thrift::TType::STRING) {
                $xfer += $input->readString(\$self->{success});
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
              /^1$/ && do{              if ($ftype == Thrift::TType::STRUCT) {
                $self->{e} = TalkException->new();
                $xfer += $self->{e}->read($input);
              } else {
                $xfer += $input->skip($ftype);
              }
              last; };
                $xfer += $input->skip($ftype);
            }
            $xfer += $input->readFieldEnd();
          }
          $xfer += $input->readStructEnd();
          return $xfer;
        }

sub write {
          my ($self, $output) = @_;
          my $xfer   = 0;
          $xfer += $output->writeStructBegin('BuddyManagementService_uploadBuddyContent_result');
          if (defined $self->{success}) {
            $xfer += $output->writeFieldBegin('success', Thrift::TType::STRING, 0);
            $xfer += $output->writeString($self->{success});
            $xfer += $output->writeFieldEnd();
          }
          if (defined $self->{e}) {
            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
            $xfer += $self->{e}->write($output);
            $xfer += $output->writeFieldEnd();
          }
          $xfer += $output->writeFieldStop();
          $xfer += $output->writeStructEnd();
          return $xfer;
        }

package BuddyManagementServiceIf;

use strict;


sub addBuddyMember{
  my $self = shift;
  my $requestId = shift;
  my $userMid = shift;

  die 'implement interface';
}

sub addBuddyMembers{
  my $self = shift;
  my $requestId = shift;
  my $userMids = shift;

  die 'implement interface';
}

sub blockBuddyMember{
  my $self = shift;
  my $requestId = shift;
  my $mid = shift;

  die 'implement interface';
}

sub commitSendMessagesToAll{
  my $self = shift;
  my $requestIdList = shift;

  die 'implement interface';
}

sub commitSendMessagesToMids{
  my $self = shift;
  my $requestIdList = shift;
  my $mids = shift;

  die 'implement interface';
}

sub containsBuddyMember{
  my $self = shift;
  my $requestId = shift;
  my $userMid = shift;

  die 'implement interface';
}

sub downloadMessageContent{
  my $self = shift;
  my $requestId = shift;
  my $messageId = shift;

  die 'implement interface';
}

sub downloadMessageContentPreview{
  my $self = shift;
  my $requestId = shift;
  my $messageId = shift;

  die 'implement interface';
}

sub downloadProfileImage{
  my $self = shift;
  my $requestId = shift;

  die 'implement interface';
}

sub downloadProfileImagePreview{
  my $self = shift;
  my $requestId = shift;

  die 'implement interface';
}

sub getActiveMemberCountByBuddyMid{
  my $self = shift;
  my $buddyMid = shift;

  die 'implement interface';
}

sub getActiveMemberMidsByBuddyMid{
  my $self = shift;
  my $buddyMid = shift;

  die 'implement interface';
}

sub getAllBuddyMembers{
  my $self = shift;

  die 'implement interface';
}

sub getBlockedBuddyMembers{
  my $self = shift;

  die 'implement interface';
}

sub getBlockerCountByBuddyMid{
  my $self = shift;
  my $buddyMid = shift;

  die 'implement interface';
}

sub getBuddyDetailByMid{
  my $self = shift;
  my $buddyMid = shift;

  die 'implement interface';
}

sub getBuddyProfile{
  my $self = shift;

  die 'implement interface';
}

sub getContactTicket{
  my $self = shift;

  die 'implement interface';
}

sub getMemberCountByBuddyMid{
  my $self = shift;
  my $buddyMid = shift;

  die 'implement interface';
}

sub getSendBuddyMessageResult{
  my $self = shift;
  my $sendBuddyMessageRequestId = shift;

  die 'implement interface';
}

sub getSetBuddyOnAirResult{
  my $self = shift;
  my $setBuddyOnAirRequestId = shift;

  die 'implement interface';
}

sub getUpdateBuddyProfileResult{
  my $self = shift;
  my $updateBuddyProfileRequestId = shift;

  die 'implement interface';
}

sub isBuddyOnAirByMid{
  my $self = shift;
  my $buddyMid = shift;

  die 'implement interface';
}

sub linkAndSendBuddyContentMessageToAllAsync{
  my $self = shift;
  my $requestId = shift;
  my $msg = shift;
  my $sourceContentId = shift;

  die 'implement interface';
}

sub linkAndSendBuddyContentMessageToMids{
  my $self = shift;
  my $requestId = shift;
  my $msg = shift;
  my $sourceContentId = shift;
  my $mids = shift;

  die 'implement interface';
}

sub notifyBuddyBlocked{
  my $self = shift;
  my $buddyMid = shift;
  my $blockerMid = shift;

  die 'implement interface';
}

sub notifyBuddyUnblocked{
  my $self = shift;
  my $buddyMid = shift;
  my $blockerMid = shift;

  die 'implement interface';
}

sub registerBuddy{
  my $self = shift;
  my $buddyId = shift;
  my $searchId = shift;
  my $displayName = shift;
  my $statusMeessage = shift;
  my $picture = shift;
  my $settings = shift;

  die 'implement interface';
}

sub registerBuddyAdmin{
  my $self = shift;
  my $buddyId = shift;
  my $searchId = shift;
  my $displayName = shift;
  my $statusMessage = shift;
  my $picture = shift;

  die 'implement interface';
}

sub reissueContactTicket{
  my $self = shift;
  my $expirationTime = shift;
  my $maxUseCount = shift;

  die 'implement interface';
}

sub removeBuddyMember{
  my $self = shift;
  my $requestId = shift;
  my $userMid = shift;

  die 'implement interface';
}

sub removeBuddyMembers{
  my $self = shift;
  my $requestId = shift;
  my $userMids = shift;

  die 'implement interface';
}

sub sendBuddyContentMessageToAll{
  my $self = shift;
  my $requestId = shift;
  my $msg = shift;
  my $content = shift;

  die 'implement interface';
}

sub sendBuddyContentMessageToAllAsync{
  my $self = shift;
  my $requestId = shift;
  my $msg = shift;
  my $content = shift;

  die 'implement interface';
}

sub sendBuddyContentMessageToMids{
  my $self = shift;
  my $requestId = shift;
  my $msg = shift;
  my $content = shift;
  my $mids = shift;

  die 'implement interface';
}

sub sendBuddyContentMessageToMidsAsync{
  my $self = shift;
  my $requestId = shift;
  my $msg = shift;
  my $content = shift;
  my $mids = shift;

  die 'implement interface';
}

sub sendBuddyMessageToAll{
  my $self = shift;
  my $requestId = shift;
  my $msg = shift;

  die 'implement interface';
}

sub sendBuddyMessageToAllAsync{
  my $self = shift;
  my $requestId = shift;
  my $msg = shift;

  die 'implement interface';
}

sub sendBuddyMessageToMids{
  my $self = shift;
  my $requestId = shift;
  my $msg = shift;
  my $mids = shift;

  die 'implement interface';
}

sub sendBuddyMessageToMidsAsync{
  my $self = shift;
  my $requestId = shift;
  my $msg = shift;
  my $mids = shift;

  die 'implement interface';
}

sub sendIndividualEventToAllAsync{
  my $self = shift;
  my $requestId = shift;
  my $buddyMid = shift;
  my $notificationStatus = shift;

  die 'implement interface';
}

sub setBuddyOnAir{
  my $self = shift;
  my $requestId = shift;
  my $onAir = shift;

  die 'implement interface';
}

sub setBuddyOnAirAsync{
  my $self = shift;
  my $requestId = shift;
  my $onAir = shift;

  die 'implement interface';
}

sub storeMessage{
  my $self = shift;
  my $requestId = shift;
  my $messageRequest = shift;

  die 'implement interface';
}

sub unblockBuddyMember{
  my $self = shift;
  my $requestId = shift;
  my $mid = shift;

  die 'implement interface';
}

sub unregisterBuddy{
  my $self = shift;
  my $requestId = shift;

  die 'implement interface';
}

sub unregisterBuddyAdmin{
  my $self = shift;
  my $requestId = shift;

  die 'implement interface';
}

sub updateBuddyAdminProfileAttribute{
  my $self = shift;
  my $requestId = shift;
  my $attributes = shift;

  die 'implement interface';
}

sub updateBuddyAdminProfileImage{
  my $self = shift;
  my $requestId = shift;
  my $picture = shift;

  die 'implement interface';
}

sub updateBuddyProfileAttributes{
  my $self = shift;
  my $requestId = shift;
  my $attributes = shift;

  die 'implement interface';
}

sub updateBuddyProfileAttributesAsync{
  my $self = shift;
  my $requestId = shift;
  my $attributes = shift;

  die 'implement interface';
}

sub updateBuddyProfileImage{
  my $self = shift;
  my $requestId = shift;
  my $image = shift;

  die 'implement interface';
}

sub updateBuddyProfileImageAsync{
  my $self = shift;
  my $requestId = shift;
  my $image = shift;

  die 'implement interface';
}

sub updateBuddySearchId{
  my $self = shift;
  my $requestId = shift;
  my $searchId = shift;

  die 'implement interface';
}

sub updateBuddySettings{
  my $self = shift;
  my $settings = shift;

  die 'implement interface';
}

sub uploadBuddyContent{
  my $self = shift;
  my $contentType = shift;
  my $content = shift;

  die 'implement interface';
}

package BuddyManagementServiceRest;

use strict;


sub new {
          my ($classname, $impl) = @_;
          my $self     ={ impl => $impl };

          return bless($self,$classname);
}

sub addBuddyMember{
          my ($self, $request) = @_;

          my $requestId = ($request->{'requestId'}) ? $request->{'requestId'} : undef;
          my $userMid = ($request->{'userMid'}) ? $request->{'userMid'} : undef;
          return $self->{impl}->addBuddyMember($requestId, $userMid);
        }

sub addBuddyMembers{
          my ($self, $request) = @_;

          my $requestId = ($request->{'requestId'}) ? $request->{'requestId'} : undef;
          my $userMids = ($request->{'userMids'}) ? $request->{'userMids'} : undef;
          return $self->{impl}->addBuddyMembers($requestId, $userMids);
        }

sub blockBuddyMember{
          my ($self, $request) = @_;

          my $requestId = ($request->{'requestId'}) ? $request->{'requestId'} : undef;
          my $mid = ($request->{'mid'}) ? $request->{'mid'} : undef;
          return $self->{impl}->blockBuddyMember($requestId, $mid);
        }

sub commitSendMessagesToAll{
          my ($self, $request) = @_;

          my $requestIdList = ($request->{'requestIdList'}) ? $request->{'requestIdList'} : undef;
          return $self->{impl}->commitSendMessagesToAll($requestIdList);
        }

sub commitSendMessagesToMids{
          my ($self, $request) = @_;

          my $requestIdList = ($request->{'requestIdList'}) ? $request->{'requestIdList'} : undef;
          my $mids = ($request->{'mids'}) ? $request->{'mids'} : undef;
          return $self->{impl}->commitSendMessagesToMids($requestIdList, $mids);
        }

sub containsBuddyMember{
          my ($self, $request) = @_;

          my $requestId = ($request->{'requestId'}) ? $request->{'requestId'} : undef;
          my $userMid = ($request->{'userMid'}) ? $request->{'userMid'} : undef;
          return $self->{impl}->containsBuddyMember($requestId, $userMid);
        }

sub downloadMessageContent{
          my ($self, $request) = @_;

          my $requestId = ($request->{'requestId'}) ? $request->{'requestId'} : undef;
          my $messageId = ($request->{'messageId'}) ? $request->{'messageId'} : undef;
          return $self->{impl}->downloadMessageContent($requestId, $messageId);
        }

sub downloadMessageContentPreview{
          my ($self, $request) = @_;

          my $requestId = ($request->{'requestId'}) ? $request->{'requestId'} : undef;
          my $messageId = ($request->{'messageId'}) ? $request->{'messageId'} : undef;
          return $self->{impl}->downloadMessageContentPreview($requestId, $messageId);
        }

sub downloadProfileImage{
          my ($self, $request) = @_;

          my $requestId = ($request->{'requestId'}) ? $request->{'requestId'} : undef;
          return $self->{impl}->downloadProfileImage($requestId);
        }

sub downloadProfileImagePreview{
          my ($self, $request) = @_;

          my $requestId = ($request->{'requestId'}) ? $request->{'requestId'} : undef;
          return $self->{impl}->downloadProfileImagePreview($requestId);
        }

sub getActiveMemberCountByBuddyMid{
          my ($self, $request) = @_;

          my $buddyMid = ($request->{'buddyMid'}) ? $request->{'buddyMid'} : undef;
          return $self->{impl}->getActiveMemberCountByBuddyMid($buddyMid);
        }

sub getActiveMemberMidsByBuddyMid{
          my ($self, $request) = @_;

          my $buddyMid = ($request->{'buddyMid'}) ? $request->{'buddyMid'} : undef;
          return $self->{impl}->getActiveMemberMidsByBuddyMid($buddyMid);
        }

sub getAllBuddyMembers{
          my ($self, $request) = @_;

          return $self->{impl}->getAllBuddyMembers();
        }

sub getBlockedBuddyMembers{
          my ($self, $request) = @_;

          return $self->{impl}->getBlockedBuddyMembers();
        }

sub getBlockerCountByBuddyMid{
          my ($self, $request) = @_;

          my $buddyMid = ($request->{'buddyMid'}) ? $request->{'buddyMid'} : undef;
          return $self->{impl}->getBlockerCountByBuddyMid($buddyMid);
        }

sub getBuddyDetailByMid{
          my ($self, $request) = @_;

          my $buddyMid = ($request->{'buddyMid'}) ? $request->{'buddyMid'} : undef;
          return $self->{impl}->getBuddyDetailByMid($buddyMid);
        }

sub getBuddyProfile{
          my ($self, $request) = @_;

          return $self->{impl}->getBuddyProfile();
        }

sub getContactTicket{
          my ($self, $request) = @_;

          return $self->{impl}->getContactTicket();
        }

sub getMemberCountByBuddyMid{
          my ($self, $request) = @_;

          my $buddyMid = ($request->{'buddyMid'}) ? $request->{'buddyMid'} : undef;
          return $self->{impl}->getMemberCountByBuddyMid($buddyMid);
        }

sub getSendBuddyMessageResult{
          my ($self, $request) = @_;

          my $sendBuddyMessageRequestId = ($request->{'sendBuddyMessageRequestId'}) ? $request->{'sendBuddyMessageRequestId'} : undef;
          return $self->{impl}->getSendBuddyMessageResult($sendBuddyMessageRequestId);
        }

sub getSetBuddyOnAirResult{
          my ($self, $request) = @_;

          my $setBuddyOnAirRequestId = ($request->{'setBuddyOnAirRequestId'}) ? $request->{'setBuddyOnAirRequestId'} : undef;
          return $self->{impl}->getSetBuddyOnAirResult($setBuddyOnAirRequestId);
        }

sub getUpdateBuddyProfileResult{
          my ($self, $request) = @_;

          my $updateBuddyProfileRequestId = ($request->{'updateBuddyProfileRequestId'}) ? $request->{'updateBuddyProfileRequestId'} : undef;
          return $self->{impl}->getUpdateBuddyProfileResult($updateBuddyProfileRequestId);
        }

sub isBuddyOnAirByMid{
          my ($self, $request) = @_;

          my $buddyMid = ($request->{'buddyMid'}) ? $request->{'buddyMid'} : undef;
          return $self->{impl}->isBuddyOnAirByMid($buddyMid);
        }

sub linkAndSendBuddyContentMessageToAllAsync{
          my ($self, $request) = @_;

          my $requestId = ($request->{'requestId'}) ? $request->{'requestId'} : undef;
          my $msg = ($request->{'msg'}) ? $request->{'msg'} : undef;
          my $sourceContentId = ($request->{'sourceContentId'}) ? $request->{'sourceContentId'} : undef;
          return $self->{impl}->linkAndSendBuddyContentMessageToAllAsync($requestId, $msg, $sourceContentId);
        }

sub linkAndSendBuddyContentMessageToMids{
          my ($self, $request) = @_;

          my $requestId = ($request->{'requestId'}) ? $request->{'requestId'} : undef;
          my $msg = ($request->{'msg'}) ? $request->{'msg'} : undef;
          my $sourceContentId = ($request->{'sourceContentId'}) ? $request->{'sourceContentId'} : undef;
          my $mids = ($request->{'mids'}) ? $request->{'mids'} : undef;
          return $self->{impl}->linkAndSendBuddyContentMessageToMids($requestId, $msg, $sourceContentId, $mids);
        }

sub notifyBuddyBlocked{
          my ($self, $request) = @_;

          my $buddyMid = ($request->{'buddyMid'}) ? $request->{'buddyMid'} : undef;
          my $blockerMid = ($request->{'blockerMid'}) ? $request->{'blockerMid'} : undef;
          return $self->{impl}->notifyBuddyBlocked($buddyMid, $blockerMid);
        }

sub notifyBuddyUnblocked{
          my ($self, $request) = @_;

          my $buddyMid = ($request->{'buddyMid'}) ? $request->{'buddyMid'} : undef;
          my $blockerMid = ($request->{'blockerMid'}) ? $request->{'blockerMid'} : undef;
          return $self->{impl}->notifyBuddyUnblocked($buddyMid, $blockerMid);
        }

sub registerBuddy{
          my ($self, $request) = @_;

          my $buddyId = ($request->{'buddyId'}) ? $request->{'buddyId'} : undef;
          my $searchId = ($request->{'searchId'}) ? $request->{'searchId'} : undef;
          my $displayName = ($request->{'displayName'}) ? $request->{'displayName'} : undef;
          my $statusMeessage = ($request->{'statusMeessage'}) ? $request->{'statusMeessage'} : undef;
          my $picture = ($request->{'picture'}) ? $request->{'picture'} : undef;
          my $settings = ($request->{'settings'}) ? $request->{'settings'} : undef;
          return $self->{impl}->registerBuddy($buddyId, $searchId, $displayName, $statusMeessage, $picture, $settings);
        }

sub registerBuddyAdmin{
          my ($self, $request) = @_;

          my $buddyId = ($request->{'buddyId'}) ? $request->{'buddyId'} : undef;
          my $searchId = ($request->{'searchId'}) ? $request->{'searchId'} : undef;
          my $displayName = ($request->{'displayName'}) ? $request->{'displayName'} : undef;
          my $statusMessage = ($request->{'statusMessage'}) ? $request->{'statusMessage'} : undef;
          my $picture = ($request->{'picture'}) ? $request->{'picture'} : undef;
          return $self->{impl}->registerBuddyAdmin($buddyId, $searchId, $displayName, $statusMessage, $picture);
        }

sub reissueContactTicket{
          my ($self, $request) = @_;

          my $expirationTime = ($request->{'expirationTime'}) ? $request->{'expirationTime'} : undef;
          my $maxUseCount = ($request->{'maxUseCount'}) ? $request->{'maxUseCount'} : undef;
          return $self->{impl}->reissueContactTicket($expirationTime, $maxUseCount);
        }

sub removeBuddyMember{
          my ($self, $request) = @_;

          my $requestId = ($request->{'requestId'}) ? $request->{'requestId'} : undef;
          my $userMid = ($request->{'userMid'}) ? $request->{'userMid'} : undef;
          return $self->{impl}->removeBuddyMember($requestId, $userMid);
        }

sub removeBuddyMembers{
          my ($self, $request) = @_;

          my $requestId = ($request->{'requestId'}) ? $request->{'requestId'} : undef;
          my $userMids = ($request->{'userMids'}) ? $request->{'userMids'} : undef;
          return $self->{impl}->removeBuddyMembers($requestId, $userMids);
        }

sub sendBuddyContentMessageToAll{
          my ($self, $request) = @_;

          my $requestId = ($request->{'requestId'}) ? $request->{'requestId'} : undef;
          my $msg = ($request->{'msg'}) ? $request->{'msg'} : undef;
          my $content = ($request->{'content'}) ? $request->{'content'} : undef;
          return $self->{impl}->sendBuddyContentMessageToAll($requestId, $msg, $content);
        }

sub sendBuddyContentMessageToAllAsync{
          my ($self, $request) = @_;

          my $requestId = ($request->{'requestId'}) ? $request->{'requestId'} : undef;
          my $msg = ($request->{'msg'}) ? $request->{'msg'} : undef;
          my $content = ($request->{'content'}) ? $request->{'content'} : undef;
          return $self->{impl}->sendBuddyContentMessageToAllAsync($requestId, $msg, $content);
        }

sub sendBuddyContentMessageToMids{
          my ($self, $request) = @_;

          my $requestId = ($request->{'requestId'}) ? $request->{'requestId'} : undef;
          my $msg = ($request->{'msg'}) ? $request->{'msg'} : undef;
          my $content = ($request->{'content'}) ? $request->{'content'} : undef;
          my $mids = ($request->{'mids'}) ? $request->{'mids'} : undef;
          return $self->{impl}->sendBuddyContentMessageToMids($requestId, $msg, $content, $mids);
        }

sub sendBuddyContentMessageToMidsAsync{
          my ($self, $request) = @_;

          my $requestId = ($request->{'requestId'}) ? $request->{'requestId'} : undef;
          my $msg = ($request->{'msg'}) ? $request->{'msg'} : undef;
          my $content = ($request->{'content'}) ? $request->{'content'} : undef;
          my $mids = ($request->{'mids'}) ? $request->{'mids'} : undef;
          return $self->{impl}->sendBuddyContentMessageToMidsAsync($requestId, $msg, $content, $mids);
        }

sub sendBuddyMessageToAll{
          my ($self, $request) = @_;

          my $requestId = ($request->{'requestId'}) ? $request->{'requestId'} : undef;
          my $msg = ($request->{'msg'}) ? $request->{'msg'} : undef;
          return $self->{impl}->sendBuddyMessageToAll($requestId, $msg);
        }

sub sendBuddyMessageToAllAsync{
          my ($self, $request) = @_;

          my $requestId = ($request->{'requestId'}) ? $request->{'requestId'} : undef;
          my $msg = ($request->{'msg'}) ? $request->{'msg'} : undef;
          return $self->{impl}->sendBuddyMessageToAllAsync($requestId, $msg);
        }

sub sendBuddyMessageToMids{
          my ($self, $request) = @_;

          my $requestId = ($request->{'requestId'}) ? $request->{'requestId'} : undef;
          my $msg = ($request->{'msg'}) ? $request->{'msg'} : undef;
          my $mids = ($request->{'mids'}) ? $request->{'mids'} : undef;
          return $self->{impl}->sendBuddyMessageToMids($requestId, $msg, $mids);
        }

sub sendBuddyMessageToMidsAsync{
          my ($self, $request) = @_;

          my $requestId = ($request->{'requestId'}) ? $request->{'requestId'} : undef;
          my $msg = ($request->{'msg'}) ? $request->{'msg'} : undef;
          my $mids = ($request->{'mids'}) ? $request->{'mids'} : undef;
          return $self->{impl}->sendBuddyMessageToMidsAsync($requestId, $msg, $mids);
        }

sub sendIndividualEventToAllAsync{
          my ($self, $request) = @_;

          my $requestId = ($request->{'requestId'}) ? $request->{'requestId'} : undef;
          my $buddyMid = ($request->{'buddyMid'}) ? $request->{'buddyMid'} : undef;
          my $notificationStatus = ($request->{'notificationStatus'}) ? $request->{'notificationStatus'} : undef;
          return $self->{impl}->sendIndividualEventToAllAsync($requestId, $buddyMid, $notificationStatus);
        }

sub setBuddyOnAir{
          my ($self, $request) = @_;

          my $requestId = ($request->{'requestId'}) ? $request->{'requestId'} : undef;
          my $onAir = ($request->{'onAir'}) ? $request->{'onAir'} : undef;
          return $self->{impl}->setBuddyOnAir($requestId, $onAir);
        }

sub setBuddyOnAirAsync{
          my ($self, $request) = @_;

          my $requestId = ($request->{'requestId'}) ? $request->{'requestId'} : undef;
          my $onAir = ($request->{'onAir'}) ? $request->{'onAir'} : undef;
          return $self->{impl}->setBuddyOnAirAsync($requestId, $onAir);
        }

sub storeMessage{
          my ($self, $request) = @_;

          my $requestId = ($request->{'requestId'}) ? $request->{'requestId'} : undef;
          my $messageRequest = ($request->{'messageRequest'}) ? $request->{'messageRequest'} : undef;
          return $self->{impl}->storeMessage($requestId, $messageRequest);
        }

sub unblockBuddyMember{
          my ($self, $request) = @_;

          my $requestId = ($request->{'requestId'}) ? $request->{'requestId'} : undef;
          my $mid = ($request->{'mid'}) ? $request->{'mid'} : undef;
          return $self->{impl}->unblockBuddyMember($requestId, $mid);
        }

sub unregisterBuddy{
          my ($self, $request) = @_;

          my $requestId = ($request->{'requestId'}) ? $request->{'requestId'} : undef;
          return $self->{impl}->unregisterBuddy($requestId);
        }

sub unregisterBuddyAdmin{
          my ($self, $request) = @_;

          my $requestId = ($request->{'requestId'}) ? $request->{'requestId'} : undef;
          return $self->{impl}->unregisterBuddyAdmin($requestId);
        }

sub updateBuddyAdminProfileAttribute{
          my ($self, $request) = @_;

          my $requestId = ($request->{'requestId'}) ? $request->{'requestId'} : undef;
          my $attributes = ($request->{'attributes'}) ? $request->{'attributes'} : undef;
          return $self->{impl}->updateBuddyAdminProfileAttribute($requestId, $attributes);
        }

sub updateBuddyAdminProfileImage{
          my ($self, $request) = @_;

          my $requestId = ($request->{'requestId'}) ? $request->{'requestId'} : undef;
          my $picture = ($request->{'picture'}) ? $request->{'picture'} : undef;
          return $self->{impl}->updateBuddyAdminProfileImage($requestId, $picture);
        }

sub updateBuddyProfileAttributes{
          my ($self, $request) = @_;

          my $requestId = ($request->{'requestId'}) ? $request->{'requestId'} : undef;
          my $attributes = ($request->{'attributes'}) ? $request->{'attributes'} : undef;
          return $self->{impl}->updateBuddyProfileAttributes($requestId, $attributes);
        }

sub updateBuddyProfileAttributesAsync{
          my ($self, $request) = @_;

          my $requestId = ($request->{'requestId'}) ? $request->{'requestId'} : undef;
          my $attributes = ($request->{'attributes'}) ? $request->{'attributes'} : undef;
          return $self->{impl}->updateBuddyProfileAttributesAsync($requestId, $attributes);
        }

sub updateBuddyProfileImage{
          my ($self, $request) = @_;

          my $requestId = ($request->{'requestId'}) ? $request->{'requestId'} : undef;
          my $image = ($request->{'image'}) ? $request->{'image'} : undef;
          return $self->{impl}->updateBuddyProfileImage($requestId, $image);
        }

sub updateBuddyProfileImageAsync{
          my ($self, $request) = @_;

          my $requestId = ($request->{'requestId'}) ? $request->{'requestId'} : undef;
          my $image = ($request->{'image'}) ? $request->{'image'} : undef;
          return $self->{impl}->updateBuddyProfileImageAsync($requestId, $image);
        }

sub updateBuddySearchId{
          my ($self, $request) = @_;

          my $requestId = ($request->{'requestId'}) ? $request->{'requestId'} : undef;
          my $searchId = ($request->{'searchId'}) ? $request->{'searchId'} : undef;
          return $self->{impl}->updateBuddySearchId($requestId, $searchId);
        }

sub updateBuddySettings{
          my ($self, $request) = @_;

          my $settings = ($request->{'settings'}) ? $request->{'settings'} : undef;
          return $self->{impl}->updateBuddySettings($settings);
        }

sub uploadBuddyContent{
          my ($self, $request) = @_;

          my $contentType = ($request->{'contentType'}) ? $request->{'contentType'} : undef;
          my $content = ($request->{'content'}) ? $request->{'content'} : undef;
          return $self->{impl}->uploadBuddyContent($contentType, $content);
        }

package BuddyManagementServiceClient;


use base qw(BuddyManagementServiceIf);
sub new {
          my ($classname, $input, $output) = @_;
          my $self      = {};
          $self->{input}  = $input;
          $self->{output} = defined $output ? $output : $input;
          $self->{seqid}  = 0;
          return bless($self,$classname);
}

sub addBuddyMember{
  my $self = shift;
  my $requestId = shift;
  my $userMid = shift;

                    $self->send_addBuddyMember($requestId, $userMid);
          $self->recv_addBuddyMember();
}

sub send_addBuddyMember{
  my $self = shift;
  my $requestId = shift;
  my $userMid = shift;

          $self->{output}->writeMessageBegin('addBuddyMember', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_addBuddyMember_args->new();
          $args->{requestId} = $requestId;
          $args->{userMid} = $userMid;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_addBuddyMember{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_addBuddyMember_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{e}) {
            die $result->{e};
          }
          return;
}
sub addBuddyMembers{
  my $self = shift;
  my $requestId = shift;
  my $userMids = shift;

                    $self->send_addBuddyMembers($requestId, $userMids);
          $self->recv_addBuddyMembers();
}

sub send_addBuddyMembers{
  my $self = shift;
  my $requestId = shift;
  my $userMids = shift;

          $self->{output}->writeMessageBegin('addBuddyMembers', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_addBuddyMembers_args->new();
          $args->{requestId} = $requestId;
          $args->{userMids} = $userMids;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_addBuddyMembers{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_addBuddyMembers_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{e}) {
            die $result->{e};
          }
          return;
}
sub blockBuddyMember{
  my $self = shift;
  my $requestId = shift;
  my $mid = shift;

                    $self->send_blockBuddyMember($requestId, $mid);
          $self->recv_blockBuddyMember();
}

sub send_blockBuddyMember{
  my $self = shift;
  my $requestId = shift;
  my $mid = shift;

          $self->{output}->writeMessageBegin('blockBuddyMember', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_blockBuddyMember_args->new();
          $args->{requestId} = $requestId;
          $args->{mid} = $mid;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_blockBuddyMember{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_blockBuddyMember_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{e}) {
            die $result->{e};
          }
          return;
}
sub commitSendMessagesToAll{
  my $self = shift;
  my $requestIdList = shift;

                    $self->send_commitSendMessagesToAll($requestIdList);
          return $self->recv_commitSendMessagesToAll();
}

sub send_commitSendMessagesToAll{
  my $self = shift;
  my $requestIdList = shift;

          $self->{output}->writeMessageBegin('commitSendMessagesToAll', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_commitSendMessagesToAll_args->new();
          $args->{requestIdList} = $requestIdList;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_commitSendMessagesToAll{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_commitSendMessagesToAll_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "commitSendMessagesToAll failed: unknown result";
}
sub commitSendMessagesToMids{
  my $self = shift;
  my $requestIdList = shift;
  my $mids = shift;

                    $self->send_commitSendMessagesToMids($requestIdList, $mids);
          return $self->recv_commitSendMessagesToMids();
}

sub send_commitSendMessagesToMids{
  my $self = shift;
  my $requestIdList = shift;
  my $mids = shift;

          $self->{output}->writeMessageBegin('commitSendMessagesToMids', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_commitSendMessagesToMids_args->new();
          $args->{requestIdList} = $requestIdList;
          $args->{mids} = $mids;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_commitSendMessagesToMids{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_commitSendMessagesToMids_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "commitSendMessagesToMids failed: unknown result";
}
sub containsBuddyMember{
  my $self = shift;
  my $requestId = shift;
  my $userMid = shift;

                    $self->send_containsBuddyMember($requestId, $userMid);
          return $self->recv_containsBuddyMember();
}

sub send_containsBuddyMember{
  my $self = shift;
  my $requestId = shift;
  my $userMid = shift;

          $self->{output}->writeMessageBegin('containsBuddyMember', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_containsBuddyMember_args->new();
          $args->{requestId} = $requestId;
          $args->{userMid} = $userMid;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_containsBuddyMember{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_containsBuddyMember_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "containsBuddyMember failed: unknown result";
}
sub downloadMessageContent{
  my $self = shift;
  my $requestId = shift;
  my $messageId = shift;

                    $self->send_downloadMessageContent($requestId, $messageId);
          return $self->recv_downloadMessageContent();
}

sub send_downloadMessageContent{
  my $self = shift;
  my $requestId = shift;
  my $messageId = shift;

          $self->{output}->writeMessageBegin('downloadMessageContent', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_downloadMessageContent_args->new();
          $args->{requestId} = $requestId;
          $args->{messageId} = $messageId;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_downloadMessageContent{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_downloadMessageContent_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "downloadMessageContent failed: unknown result";
}
sub downloadMessageContentPreview{
  my $self = shift;
  my $requestId = shift;
  my $messageId = shift;

                    $self->send_downloadMessageContentPreview($requestId, $messageId);
          return $self->recv_downloadMessageContentPreview();
}

sub send_downloadMessageContentPreview{
  my $self = shift;
  my $requestId = shift;
  my $messageId = shift;

          $self->{output}->writeMessageBegin('downloadMessageContentPreview', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_downloadMessageContentPreview_args->new();
          $args->{requestId} = $requestId;
          $args->{messageId} = $messageId;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_downloadMessageContentPreview{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_downloadMessageContentPreview_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "downloadMessageContentPreview failed: unknown result";
}
sub downloadProfileImage{
  my $self = shift;
  my $requestId = shift;

                    $self->send_downloadProfileImage($requestId);
          return $self->recv_downloadProfileImage();
}

sub send_downloadProfileImage{
  my $self = shift;
  my $requestId = shift;

          $self->{output}->writeMessageBegin('downloadProfileImage', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_downloadProfileImage_args->new();
          $args->{requestId} = $requestId;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_downloadProfileImage{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_downloadProfileImage_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "downloadProfileImage failed: unknown result";
}
sub downloadProfileImagePreview{
  my $self = shift;
  my $requestId = shift;

                    $self->send_downloadProfileImagePreview($requestId);
          return $self->recv_downloadProfileImagePreview();
}

sub send_downloadProfileImagePreview{
  my $self = shift;
  my $requestId = shift;

          $self->{output}->writeMessageBegin('downloadProfileImagePreview', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_downloadProfileImagePreview_args->new();
          $args->{requestId} = $requestId;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_downloadProfileImagePreview{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_downloadProfileImagePreview_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "downloadProfileImagePreview failed: unknown result";
}
sub getActiveMemberCountByBuddyMid{
  my $self = shift;
  my $buddyMid = shift;

                    $self->send_getActiveMemberCountByBuddyMid($buddyMid);
          return $self->recv_getActiveMemberCountByBuddyMid();
}

sub send_getActiveMemberCountByBuddyMid{
  my $self = shift;
  my $buddyMid = shift;

          $self->{output}->writeMessageBegin('getActiveMemberCountByBuddyMid', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_getActiveMemberCountByBuddyMid_args->new();
          $args->{buddyMid} = $buddyMid;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_getActiveMemberCountByBuddyMid{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_getActiveMemberCountByBuddyMid_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "getActiveMemberCountByBuddyMid failed: unknown result";
}
sub getActiveMemberMidsByBuddyMid{
  my $self = shift;
  my $buddyMid = shift;

                    $self->send_getActiveMemberMidsByBuddyMid($buddyMid);
          return $self->recv_getActiveMemberMidsByBuddyMid();
}

sub send_getActiveMemberMidsByBuddyMid{
  my $self = shift;
  my $buddyMid = shift;

          $self->{output}->writeMessageBegin('getActiveMemberMidsByBuddyMid', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_getActiveMemberMidsByBuddyMid_args->new();
          $args->{buddyMid} = $buddyMid;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_getActiveMemberMidsByBuddyMid{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_getActiveMemberMidsByBuddyMid_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "getActiveMemberMidsByBuddyMid failed: unknown result";
}
sub getAllBuddyMembers{
  my $self = shift;

                    $self->send_getAllBuddyMembers();
          return $self->recv_getAllBuddyMembers();
}

sub send_getAllBuddyMembers{
  my $self = shift;

          $self->{output}->writeMessageBegin('getAllBuddyMembers', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_getAllBuddyMembers_args->new();
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_getAllBuddyMembers{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_getAllBuddyMembers_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "getAllBuddyMembers failed: unknown result";
}
sub getBlockedBuddyMembers{
  my $self = shift;

                    $self->send_getBlockedBuddyMembers();
          return $self->recv_getBlockedBuddyMembers();
}

sub send_getBlockedBuddyMembers{
  my $self = shift;

          $self->{output}->writeMessageBegin('getBlockedBuddyMembers', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_getBlockedBuddyMembers_args->new();
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_getBlockedBuddyMembers{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_getBlockedBuddyMembers_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "getBlockedBuddyMembers failed: unknown result";
}
sub getBlockerCountByBuddyMid{
  my $self = shift;
  my $buddyMid = shift;

                    $self->send_getBlockerCountByBuddyMid($buddyMid);
          return $self->recv_getBlockerCountByBuddyMid();
}

sub send_getBlockerCountByBuddyMid{
  my $self = shift;
  my $buddyMid = shift;

          $self->{output}->writeMessageBegin('getBlockerCountByBuddyMid', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_getBlockerCountByBuddyMid_args->new();
          $args->{buddyMid} = $buddyMid;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_getBlockerCountByBuddyMid{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_getBlockerCountByBuddyMid_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "getBlockerCountByBuddyMid failed: unknown result";
}
sub getBuddyDetailByMid{
  my $self = shift;
  my $buddyMid = shift;

                    $self->send_getBuddyDetailByMid($buddyMid);
          return $self->recv_getBuddyDetailByMid();
}

sub send_getBuddyDetailByMid{
  my $self = shift;
  my $buddyMid = shift;

          $self->{output}->writeMessageBegin('getBuddyDetailByMid', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_getBuddyDetailByMid_args->new();
          $args->{buddyMid} = $buddyMid;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_getBuddyDetailByMid{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_getBuddyDetailByMid_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "getBuddyDetailByMid failed: unknown result";
}
sub getBuddyProfile{
  my $self = shift;

                    $self->send_getBuddyProfile();
          return $self->recv_getBuddyProfile();
}

sub send_getBuddyProfile{
  my $self = shift;

          $self->{output}->writeMessageBegin('getBuddyProfile', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_getBuddyProfile_args->new();
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_getBuddyProfile{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_getBuddyProfile_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "getBuddyProfile failed: unknown result";
}
sub getContactTicket{
  my $self = shift;

                    $self->send_getContactTicket();
          return $self->recv_getContactTicket();
}

sub send_getContactTicket{
  my $self = shift;

          $self->{output}->writeMessageBegin('getContactTicket', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_getContactTicket_args->new();
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_getContactTicket{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_getContactTicket_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "getContactTicket failed: unknown result";
}
sub getMemberCountByBuddyMid{
  my $self = shift;
  my $buddyMid = shift;

                    $self->send_getMemberCountByBuddyMid($buddyMid);
          return $self->recv_getMemberCountByBuddyMid();
}

sub send_getMemberCountByBuddyMid{
  my $self = shift;
  my $buddyMid = shift;

          $self->{output}->writeMessageBegin('getMemberCountByBuddyMid', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_getMemberCountByBuddyMid_args->new();
          $args->{buddyMid} = $buddyMid;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_getMemberCountByBuddyMid{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_getMemberCountByBuddyMid_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "getMemberCountByBuddyMid failed: unknown result";
}
sub getSendBuddyMessageResult{
  my $self = shift;
  my $sendBuddyMessageRequestId = shift;

                    $self->send_getSendBuddyMessageResult($sendBuddyMessageRequestId);
          return $self->recv_getSendBuddyMessageResult();
}

sub send_getSendBuddyMessageResult{
  my $self = shift;
  my $sendBuddyMessageRequestId = shift;

          $self->{output}->writeMessageBegin('getSendBuddyMessageResult', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_getSendBuddyMessageResult_args->new();
          $args->{sendBuddyMessageRequestId} = $sendBuddyMessageRequestId;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_getSendBuddyMessageResult{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_getSendBuddyMessageResult_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "getSendBuddyMessageResult failed: unknown result";
}
sub getSetBuddyOnAirResult{
  my $self = shift;
  my $setBuddyOnAirRequestId = shift;

                    $self->send_getSetBuddyOnAirResult($setBuddyOnAirRequestId);
          return $self->recv_getSetBuddyOnAirResult();
}

sub send_getSetBuddyOnAirResult{
  my $self = shift;
  my $setBuddyOnAirRequestId = shift;

          $self->{output}->writeMessageBegin('getSetBuddyOnAirResult', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_getSetBuddyOnAirResult_args->new();
          $args->{setBuddyOnAirRequestId} = $setBuddyOnAirRequestId;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_getSetBuddyOnAirResult{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_getSetBuddyOnAirResult_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "getSetBuddyOnAirResult failed: unknown result";
}
sub getUpdateBuddyProfileResult{
  my $self = shift;
  my $updateBuddyProfileRequestId = shift;

                    $self->send_getUpdateBuddyProfileResult($updateBuddyProfileRequestId);
          return $self->recv_getUpdateBuddyProfileResult();
}

sub send_getUpdateBuddyProfileResult{
  my $self = shift;
  my $updateBuddyProfileRequestId = shift;

          $self->{output}->writeMessageBegin('getUpdateBuddyProfileResult', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_getUpdateBuddyProfileResult_args->new();
          $args->{updateBuddyProfileRequestId} = $updateBuddyProfileRequestId;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_getUpdateBuddyProfileResult{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_getUpdateBuddyProfileResult_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "getUpdateBuddyProfileResult failed: unknown result";
}
sub isBuddyOnAirByMid{
  my $self = shift;
  my $buddyMid = shift;

                    $self->send_isBuddyOnAirByMid($buddyMid);
          return $self->recv_isBuddyOnAirByMid();
}

sub send_isBuddyOnAirByMid{
  my $self = shift;
  my $buddyMid = shift;

          $self->{output}->writeMessageBegin('isBuddyOnAirByMid', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_isBuddyOnAirByMid_args->new();
          $args->{buddyMid} = $buddyMid;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_isBuddyOnAirByMid{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_isBuddyOnAirByMid_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "isBuddyOnAirByMid failed: unknown result";
}
sub linkAndSendBuddyContentMessageToAllAsync{
  my $self = shift;
  my $requestId = shift;
  my $msg = shift;
  my $sourceContentId = shift;

                    $self->send_linkAndSendBuddyContentMessageToAllAsync($requestId, $msg, $sourceContentId);
          return $self->recv_linkAndSendBuddyContentMessageToAllAsync();
}

sub send_linkAndSendBuddyContentMessageToAllAsync{
  my $self = shift;
  my $requestId = shift;
  my $msg = shift;
  my $sourceContentId = shift;

          $self->{output}->writeMessageBegin('linkAndSendBuddyContentMessageToAllAsync', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_args->new();
          $args->{requestId} = $requestId;
          $args->{msg} = $msg;
          $args->{sourceContentId} = $sourceContentId;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_linkAndSendBuddyContentMessageToAllAsync{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "linkAndSendBuddyContentMessageToAllAsync failed: unknown result";
}
sub linkAndSendBuddyContentMessageToMids{
  my $self = shift;
  my $requestId = shift;
  my $msg = shift;
  my $sourceContentId = shift;
  my $mids = shift;

                    $self->send_linkAndSendBuddyContentMessageToMids($requestId, $msg, $sourceContentId, $mids);
          return $self->recv_linkAndSendBuddyContentMessageToMids();
}

sub send_linkAndSendBuddyContentMessageToMids{
  my $self = shift;
  my $requestId = shift;
  my $msg = shift;
  my $sourceContentId = shift;
  my $mids = shift;

          $self->{output}->writeMessageBegin('linkAndSendBuddyContentMessageToMids', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_linkAndSendBuddyContentMessageToMids_args->new();
          $args->{requestId} = $requestId;
          $args->{msg} = $msg;
          $args->{sourceContentId} = $sourceContentId;
          $args->{mids} = $mids;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_linkAndSendBuddyContentMessageToMids{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_linkAndSendBuddyContentMessageToMids_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "linkAndSendBuddyContentMessageToMids failed: unknown result";
}
sub notifyBuddyBlocked{
  my $self = shift;
  my $buddyMid = shift;
  my $blockerMid = shift;

                    $self->send_notifyBuddyBlocked($buddyMid, $blockerMid);
          $self->recv_notifyBuddyBlocked();
}

sub send_notifyBuddyBlocked{
  my $self = shift;
  my $buddyMid = shift;
  my $blockerMid = shift;

          $self->{output}->writeMessageBegin('notifyBuddyBlocked', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_notifyBuddyBlocked_args->new();
          $args->{buddyMid} = $buddyMid;
          $args->{blockerMid} = $blockerMid;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_notifyBuddyBlocked{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_notifyBuddyBlocked_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{e}) {
            die $result->{e};
          }
          return;
}
sub notifyBuddyUnblocked{
  my $self = shift;
  my $buddyMid = shift;
  my $blockerMid = shift;

                    $self->send_notifyBuddyUnblocked($buddyMid, $blockerMid);
          $self->recv_notifyBuddyUnblocked();
}

sub send_notifyBuddyUnblocked{
  my $self = shift;
  my $buddyMid = shift;
  my $blockerMid = shift;

          $self->{output}->writeMessageBegin('notifyBuddyUnblocked', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_notifyBuddyUnblocked_args->new();
          $args->{buddyMid} = $buddyMid;
          $args->{blockerMid} = $blockerMid;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_notifyBuddyUnblocked{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_notifyBuddyUnblocked_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{e}) {
            die $result->{e};
          }
          return;
}
sub registerBuddy{
  my $self = shift;
  my $buddyId = shift;
  my $searchId = shift;
  my $displayName = shift;
  my $statusMeessage = shift;
  my $picture = shift;
  my $settings = shift;

                    $self->send_registerBuddy($buddyId, $searchId, $displayName, $statusMeessage, $picture, $settings);
          return $self->recv_registerBuddy();
}

sub send_registerBuddy{
  my $self = shift;
  my $buddyId = shift;
  my $searchId = shift;
  my $displayName = shift;
  my $statusMeessage = shift;
  my $picture = shift;
  my $settings = shift;

          $self->{output}->writeMessageBegin('registerBuddy', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_registerBuddy_args->new();
          $args->{buddyId} = $buddyId;
          $args->{searchId} = $searchId;
          $args->{displayName} = $displayName;
          $args->{statusMeessage} = $statusMeessage;
          $args->{picture} = $picture;
          $args->{settings} = $settings;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_registerBuddy{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_registerBuddy_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "registerBuddy failed: unknown result";
}
sub registerBuddyAdmin{
  my $self = shift;
  my $buddyId = shift;
  my $searchId = shift;
  my $displayName = shift;
  my $statusMessage = shift;
  my $picture = shift;

                    $self->send_registerBuddyAdmin($buddyId, $searchId, $displayName, $statusMessage, $picture);
          return $self->recv_registerBuddyAdmin();
}

sub send_registerBuddyAdmin{
  my $self = shift;
  my $buddyId = shift;
  my $searchId = shift;
  my $displayName = shift;
  my $statusMessage = shift;
  my $picture = shift;

          $self->{output}->writeMessageBegin('registerBuddyAdmin', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_registerBuddyAdmin_args->new();
          $args->{buddyId} = $buddyId;
          $args->{searchId} = $searchId;
          $args->{displayName} = $displayName;
          $args->{statusMessage} = $statusMessage;
          $args->{picture} = $picture;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_registerBuddyAdmin{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_registerBuddyAdmin_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "registerBuddyAdmin failed: unknown result";
}
sub reissueContactTicket{
  my $self = shift;
  my $expirationTime = shift;
  my $maxUseCount = shift;

                    $self->send_reissueContactTicket($expirationTime, $maxUseCount);
          return $self->recv_reissueContactTicket();
}

sub send_reissueContactTicket{
  my $self = shift;
  my $expirationTime = shift;
  my $maxUseCount = shift;

          $self->{output}->writeMessageBegin('reissueContactTicket', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_reissueContactTicket_args->new();
          $args->{expirationTime} = $expirationTime;
          $args->{maxUseCount} = $maxUseCount;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_reissueContactTicket{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_reissueContactTicket_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "reissueContactTicket failed: unknown result";
}
sub removeBuddyMember{
  my $self = shift;
  my $requestId = shift;
  my $userMid = shift;

                    $self->send_removeBuddyMember($requestId, $userMid);
          $self->recv_removeBuddyMember();
}

sub send_removeBuddyMember{
  my $self = shift;
  my $requestId = shift;
  my $userMid = shift;

          $self->{output}->writeMessageBegin('removeBuddyMember', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_removeBuddyMember_args->new();
          $args->{requestId} = $requestId;
          $args->{userMid} = $userMid;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_removeBuddyMember{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_removeBuddyMember_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{e}) {
            die $result->{e};
          }
          return;
}
sub removeBuddyMembers{
  my $self = shift;
  my $requestId = shift;
  my $userMids = shift;

                    $self->send_removeBuddyMembers($requestId, $userMids);
          $self->recv_removeBuddyMembers();
}

sub send_removeBuddyMembers{
  my $self = shift;
  my $requestId = shift;
  my $userMids = shift;

          $self->{output}->writeMessageBegin('removeBuddyMembers', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_removeBuddyMembers_args->new();
          $args->{requestId} = $requestId;
          $args->{userMids} = $userMids;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_removeBuddyMembers{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_removeBuddyMembers_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{e}) {
            die $result->{e};
          }
          return;
}
sub sendBuddyContentMessageToAll{
  my $self = shift;
  my $requestId = shift;
  my $msg = shift;
  my $content = shift;

                    $self->send_sendBuddyContentMessageToAll($requestId, $msg, $content);
          return $self->recv_sendBuddyContentMessageToAll();
}

sub send_sendBuddyContentMessageToAll{
  my $self = shift;
  my $requestId = shift;
  my $msg = shift;
  my $content = shift;

          $self->{output}->writeMessageBegin('sendBuddyContentMessageToAll', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_sendBuddyContentMessageToAll_args->new();
          $args->{requestId} = $requestId;
          $args->{msg} = $msg;
          $args->{content} = $content;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_sendBuddyContentMessageToAll{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_sendBuddyContentMessageToAll_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "sendBuddyContentMessageToAll failed: unknown result";
}
sub sendBuddyContentMessageToAllAsync{
  my $self = shift;
  my $requestId = shift;
  my $msg = shift;
  my $content = shift;

                    $self->send_sendBuddyContentMessageToAllAsync($requestId, $msg, $content);
          return $self->recv_sendBuddyContentMessageToAllAsync();
}

sub send_sendBuddyContentMessageToAllAsync{
  my $self = shift;
  my $requestId = shift;
  my $msg = shift;
  my $content = shift;

          $self->{output}->writeMessageBegin('sendBuddyContentMessageToAllAsync', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_sendBuddyContentMessageToAllAsync_args->new();
          $args->{requestId} = $requestId;
          $args->{msg} = $msg;
          $args->{content} = $content;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_sendBuddyContentMessageToAllAsync{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_sendBuddyContentMessageToAllAsync_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "sendBuddyContentMessageToAllAsync failed: unknown result";
}
sub sendBuddyContentMessageToMids{
  my $self = shift;
  my $requestId = shift;
  my $msg = shift;
  my $content = shift;
  my $mids = shift;

                    $self->send_sendBuddyContentMessageToMids($requestId, $msg, $content, $mids);
          return $self->recv_sendBuddyContentMessageToMids();
}

sub send_sendBuddyContentMessageToMids{
  my $self = shift;
  my $requestId = shift;
  my $msg = shift;
  my $content = shift;
  my $mids = shift;

          $self->{output}->writeMessageBegin('sendBuddyContentMessageToMids', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_sendBuddyContentMessageToMids_args->new();
          $args->{requestId} = $requestId;
          $args->{msg} = $msg;
          $args->{content} = $content;
          $args->{mids} = $mids;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_sendBuddyContentMessageToMids{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_sendBuddyContentMessageToMids_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "sendBuddyContentMessageToMids failed: unknown result";
}
sub sendBuddyContentMessageToMidsAsync{
  my $self = shift;
  my $requestId = shift;
  my $msg = shift;
  my $content = shift;
  my $mids = shift;

                    $self->send_sendBuddyContentMessageToMidsAsync($requestId, $msg, $content, $mids);
          return $self->recv_sendBuddyContentMessageToMidsAsync();
}

sub send_sendBuddyContentMessageToMidsAsync{
  my $self = shift;
  my $requestId = shift;
  my $msg = shift;
  my $content = shift;
  my $mids = shift;

          $self->{output}->writeMessageBegin('sendBuddyContentMessageToMidsAsync', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_sendBuddyContentMessageToMidsAsync_args->new();
          $args->{requestId} = $requestId;
          $args->{msg} = $msg;
          $args->{content} = $content;
          $args->{mids} = $mids;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_sendBuddyContentMessageToMidsAsync{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_sendBuddyContentMessageToMidsAsync_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "sendBuddyContentMessageToMidsAsync failed: unknown result";
}
sub sendBuddyMessageToAll{
  my $self = shift;
  my $requestId = shift;
  my $msg = shift;

                    $self->send_sendBuddyMessageToAll($requestId, $msg);
          return $self->recv_sendBuddyMessageToAll();
}

sub send_sendBuddyMessageToAll{
  my $self = shift;
  my $requestId = shift;
  my $msg = shift;

          $self->{output}->writeMessageBegin('sendBuddyMessageToAll', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_sendBuddyMessageToAll_args->new();
          $args->{requestId} = $requestId;
          $args->{msg} = $msg;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_sendBuddyMessageToAll{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_sendBuddyMessageToAll_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "sendBuddyMessageToAll failed: unknown result";
}
sub sendBuddyMessageToAllAsync{
  my $self = shift;
  my $requestId = shift;
  my $msg = shift;

                    $self->send_sendBuddyMessageToAllAsync($requestId, $msg);
          return $self->recv_sendBuddyMessageToAllAsync();
}

sub send_sendBuddyMessageToAllAsync{
  my $self = shift;
  my $requestId = shift;
  my $msg = shift;

          $self->{output}->writeMessageBegin('sendBuddyMessageToAllAsync', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_sendBuddyMessageToAllAsync_args->new();
          $args->{requestId} = $requestId;
          $args->{msg} = $msg;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_sendBuddyMessageToAllAsync{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_sendBuddyMessageToAllAsync_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "sendBuddyMessageToAllAsync failed: unknown result";
}
sub sendBuddyMessageToMids{
  my $self = shift;
  my $requestId = shift;
  my $msg = shift;
  my $mids = shift;

                    $self->send_sendBuddyMessageToMids($requestId, $msg, $mids);
          return $self->recv_sendBuddyMessageToMids();
}

sub send_sendBuddyMessageToMids{
  my $self = shift;
  my $requestId = shift;
  my $msg = shift;
  my $mids = shift;

          $self->{output}->writeMessageBegin('sendBuddyMessageToMids', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_sendBuddyMessageToMids_args->new();
          $args->{requestId} = $requestId;
          $args->{msg} = $msg;
          $args->{mids} = $mids;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_sendBuddyMessageToMids{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_sendBuddyMessageToMids_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "sendBuddyMessageToMids failed: unknown result";
}
sub sendBuddyMessageToMidsAsync{
  my $self = shift;
  my $requestId = shift;
  my $msg = shift;
  my $mids = shift;

                    $self->send_sendBuddyMessageToMidsAsync($requestId, $msg, $mids);
          return $self->recv_sendBuddyMessageToMidsAsync();
}

sub send_sendBuddyMessageToMidsAsync{
  my $self = shift;
  my $requestId = shift;
  my $msg = shift;
  my $mids = shift;

          $self->{output}->writeMessageBegin('sendBuddyMessageToMidsAsync', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_sendBuddyMessageToMidsAsync_args->new();
          $args->{requestId} = $requestId;
          $args->{msg} = $msg;
          $args->{mids} = $mids;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_sendBuddyMessageToMidsAsync{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_sendBuddyMessageToMidsAsync_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "sendBuddyMessageToMidsAsync failed: unknown result";
}
sub sendIndividualEventToAllAsync{
  my $self = shift;
  my $requestId = shift;
  my $buddyMid = shift;
  my $notificationStatus = shift;

                    $self->send_sendIndividualEventToAllAsync($requestId, $buddyMid, $notificationStatus);
          $self->recv_sendIndividualEventToAllAsync();
}

sub send_sendIndividualEventToAllAsync{
  my $self = shift;
  my $requestId = shift;
  my $buddyMid = shift;
  my $notificationStatus = shift;

          $self->{output}->writeMessageBegin('sendIndividualEventToAllAsync', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_sendIndividualEventToAllAsync_args->new();
          $args->{requestId} = $requestId;
          $args->{buddyMid} = $buddyMid;
          $args->{notificationStatus} = $notificationStatus;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_sendIndividualEventToAllAsync{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_sendIndividualEventToAllAsync_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{e}) {
            die $result->{e};
          }
          return;
}
sub setBuddyOnAir{
  my $self = shift;
  my $requestId = shift;
  my $onAir = shift;

                    $self->send_setBuddyOnAir($requestId, $onAir);
          return $self->recv_setBuddyOnAir();
}

sub send_setBuddyOnAir{
  my $self = shift;
  my $requestId = shift;
  my $onAir = shift;

          $self->{output}->writeMessageBegin('setBuddyOnAir', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_setBuddyOnAir_args->new();
          $args->{requestId} = $requestId;
          $args->{onAir} = $onAir;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_setBuddyOnAir{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_setBuddyOnAir_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "setBuddyOnAir failed: unknown result";
}
sub setBuddyOnAirAsync{
  my $self = shift;
  my $requestId = shift;
  my $onAir = shift;

                    $self->send_setBuddyOnAirAsync($requestId, $onAir);
          return $self->recv_setBuddyOnAirAsync();
}

sub send_setBuddyOnAirAsync{
  my $self = shift;
  my $requestId = shift;
  my $onAir = shift;

          $self->{output}->writeMessageBegin('setBuddyOnAirAsync', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_setBuddyOnAirAsync_args->new();
          $args->{requestId} = $requestId;
          $args->{onAir} = $onAir;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_setBuddyOnAirAsync{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_setBuddyOnAirAsync_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "setBuddyOnAirAsync failed: unknown result";
}
sub storeMessage{
  my $self = shift;
  my $requestId = shift;
  my $messageRequest = shift;

                    $self->send_storeMessage($requestId, $messageRequest);
          return $self->recv_storeMessage();
}

sub send_storeMessage{
  my $self = shift;
  my $requestId = shift;
  my $messageRequest = shift;

          $self->{output}->writeMessageBegin('storeMessage', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_storeMessage_args->new();
          $args->{requestId} = $requestId;
          $args->{messageRequest} = $messageRequest;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_storeMessage{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_storeMessage_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "storeMessage failed: unknown result";
}
sub unblockBuddyMember{
  my $self = shift;
  my $requestId = shift;
  my $mid = shift;

                    $self->send_unblockBuddyMember($requestId, $mid);
          $self->recv_unblockBuddyMember();
}

sub send_unblockBuddyMember{
  my $self = shift;
  my $requestId = shift;
  my $mid = shift;

          $self->{output}->writeMessageBegin('unblockBuddyMember', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_unblockBuddyMember_args->new();
          $args->{requestId} = $requestId;
          $args->{mid} = $mid;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_unblockBuddyMember{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_unblockBuddyMember_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{e}) {
            die $result->{e};
          }
          return;
}
sub unregisterBuddy{
  my $self = shift;
  my $requestId = shift;

                    $self->send_unregisterBuddy($requestId);
          $self->recv_unregisterBuddy();
}

sub send_unregisterBuddy{
  my $self = shift;
  my $requestId = shift;

          $self->{output}->writeMessageBegin('unregisterBuddy', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_unregisterBuddy_args->new();
          $args->{requestId} = $requestId;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_unregisterBuddy{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_unregisterBuddy_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{e}) {
            die $result->{e};
          }
          return;
}
sub unregisterBuddyAdmin{
  my $self = shift;
  my $requestId = shift;

                    $self->send_unregisterBuddyAdmin($requestId);
          $self->recv_unregisterBuddyAdmin();
}

sub send_unregisterBuddyAdmin{
  my $self = shift;
  my $requestId = shift;

          $self->{output}->writeMessageBegin('unregisterBuddyAdmin', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_unregisterBuddyAdmin_args->new();
          $args->{requestId} = $requestId;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_unregisterBuddyAdmin{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_unregisterBuddyAdmin_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{e}) {
            die $result->{e};
          }
          return;
}
sub updateBuddyAdminProfileAttribute{
  my $self = shift;
  my $requestId = shift;
  my $attributes = shift;

                    $self->send_updateBuddyAdminProfileAttribute($requestId, $attributes);
          $self->recv_updateBuddyAdminProfileAttribute();
}

sub send_updateBuddyAdminProfileAttribute{
  my $self = shift;
  my $requestId = shift;
  my $attributes = shift;

          $self->{output}->writeMessageBegin('updateBuddyAdminProfileAttribute', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_updateBuddyAdminProfileAttribute_args->new();
          $args->{requestId} = $requestId;
          $args->{attributes} = $attributes;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_updateBuddyAdminProfileAttribute{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_updateBuddyAdminProfileAttribute_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{e}) {
            die $result->{e};
          }
          return;
}
sub updateBuddyAdminProfileImage{
  my $self = shift;
  my $requestId = shift;
  my $picture = shift;

                    $self->send_updateBuddyAdminProfileImage($requestId, $picture);
          $self->recv_updateBuddyAdminProfileImage();
}

sub send_updateBuddyAdminProfileImage{
  my $self = shift;
  my $requestId = shift;
  my $picture = shift;

          $self->{output}->writeMessageBegin('updateBuddyAdminProfileImage', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_updateBuddyAdminProfileImage_args->new();
          $args->{requestId} = $requestId;
          $args->{picture} = $picture;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_updateBuddyAdminProfileImage{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_updateBuddyAdminProfileImage_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{e}) {
            die $result->{e};
          }
          return;
}
sub updateBuddyProfileAttributes{
  my $self = shift;
  my $requestId = shift;
  my $attributes = shift;

                    $self->send_updateBuddyProfileAttributes($requestId, $attributes);
          return $self->recv_updateBuddyProfileAttributes();
}

sub send_updateBuddyProfileAttributes{
  my $self = shift;
  my $requestId = shift;
  my $attributes = shift;

          $self->{output}->writeMessageBegin('updateBuddyProfileAttributes', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_updateBuddyProfileAttributes_args->new();
          $args->{requestId} = $requestId;
          $args->{attributes} = $attributes;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_updateBuddyProfileAttributes{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_updateBuddyProfileAttributes_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "updateBuddyProfileAttributes failed: unknown result";
}
sub updateBuddyProfileAttributesAsync{
  my $self = shift;
  my $requestId = shift;
  my $attributes = shift;

                    $self->send_updateBuddyProfileAttributesAsync($requestId, $attributes);
          return $self->recv_updateBuddyProfileAttributesAsync();
}

sub send_updateBuddyProfileAttributesAsync{
  my $self = shift;
  my $requestId = shift;
  my $attributes = shift;

          $self->{output}->writeMessageBegin('updateBuddyProfileAttributesAsync', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_updateBuddyProfileAttributesAsync_args->new();
          $args->{requestId} = $requestId;
          $args->{attributes} = $attributes;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_updateBuddyProfileAttributesAsync{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_updateBuddyProfileAttributesAsync_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "updateBuddyProfileAttributesAsync failed: unknown result";
}
sub updateBuddyProfileImage{
  my $self = shift;
  my $requestId = shift;
  my $image = shift;

                    $self->send_updateBuddyProfileImage($requestId, $image);
          return $self->recv_updateBuddyProfileImage();
}

sub send_updateBuddyProfileImage{
  my $self = shift;
  my $requestId = shift;
  my $image = shift;

          $self->{output}->writeMessageBegin('updateBuddyProfileImage', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_updateBuddyProfileImage_args->new();
          $args->{requestId} = $requestId;
          $args->{image} = $image;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_updateBuddyProfileImage{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_updateBuddyProfileImage_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "updateBuddyProfileImage failed: unknown result";
}
sub updateBuddyProfileImageAsync{
  my $self = shift;
  my $requestId = shift;
  my $image = shift;

                    $self->send_updateBuddyProfileImageAsync($requestId, $image);
          return $self->recv_updateBuddyProfileImageAsync();
}

sub send_updateBuddyProfileImageAsync{
  my $self = shift;
  my $requestId = shift;
  my $image = shift;

          $self->{output}->writeMessageBegin('updateBuddyProfileImageAsync', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_updateBuddyProfileImageAsync_args->new();
          $args->{requestId} = $requestId;
          $args->{image} = $image;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_updateBuddyProfileImageAsync{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_updateBuddyProfileImageAsync_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "updateBuddyProfileImageAsync failed: unknown result";
}
sub updateBuddySearchId{
  my $self = shift;
  my $requestId = shift;
  my $searchId = shift;

                    $self->send_updateBuddySearchId($requestId, $searchId);
          $self->recv_updateBuddySearchId();
}

sub send_updateBuddySearchId{
  my $self = shift;
  my $requestId = shift;
  my $searchId = shift;

          $self->{output}->writeMessageBegin('updateBuddySearchId', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_updateBuddySearchId_args->new();
          $args->{requestId} = $requestId;
          $args->{searchId} = $searchId;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_updateBuddySearchId{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_updateBuddySearchId_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{e}) {
            die $result->{e};
          }
          return;
}
sub updateBuddySettings{
  my $self = shift;
  my $settings = shift;

                    $self->send_updateBuddySettings($settings);
          $self->recv_updateBuddySettings();
}

sub send_updateBuddySettings{
  my $self = shift;
  my $settings = shift;

          $self->{output}->writeMessageBegin('updateBuddySettings', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_updateBuddySettings_args->new();
          $args->{settings} = $settings;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_updateBuddySettings{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_updateBuddySettings_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{e}) {
            die $result->{e};
          }
          return;
}
sub uploadBuddyContent{
  my $self = shift;
  my $contentType = shift;
  my $content = shift;

                    $self->send_uploadBuddyContent($contentType, $content);
          return $self->recv_uploadBuddyContent();
}

sub send_uploadBuddyContent{
  my $self = shift;
  my $contentType = shift;
  my $content = shift;

          $self->{output}->writeMessageBegin('uploadBuddyContent', Thrift::TMessageType::CALL, $self->{seqid});
          my $args = BuddyManagementService_uploadBuddyContent_args->new();
          $args->{contentType} = $contentType;
          $args->{content} = $content;
          $args->write($self->{output});
          $self->{output}->writeMessageEnd();
          $self->{output}->getTransport()->flush();
}

sub recv_uploadBuddyContent{
  my $self = shift;

          my $rseqid = 0;
          my $fname;
          my $mtype = 0;

          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
          if ($mtype == Thrift::TMessageType::EXCEPTION) {
            my $x = Thrift::TApplicationException->new();
            $x->read($self->{input});
            $self->{input}->readMessageEnd();
            die $x;
          }
          my $result = BuddyManagementService_uploadBuddyContent_result->new();
          $result->read($self->{input});
          $self->{input}->readMessageEnd();

          if (defined $result->{success} ) {
            return $result->{success};
          }
          if (defined $result->{e}) {
            die $result->{e};
          }
          die "uploadBuddyContent failed: unknown result";
}
package BuddyManagementServiceProcessor;

use strict;


sub new {
            my ($classname, $handler) = @_;
            my $self      = {};
            $self->{handler} = $handler;
            return bless ($self, $classname);
}

sub process {
            my ($self, $input, $output) = @_;
            my $rseqid = 0;
            my $fname  = undef;
            my $mtype  = 0;

            $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
            my $methodname = 'process_'.$fname;
            if (!$self->can($methodname)) {
              $input->skip(Thrift::TType::STRUCT);
              $input->readMessageEnd();
              my $x = Thrift::TApplicationException->new('Function '.$fname.' not implemented.', Thrift::TApplicationException::UNKNOWN_METHOD);
              $output->writeMessageBegin($fname, Thrift::TMessageType::EXCEPTION, $rseqid);
              $x->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              return;
            }
            $self->$methodname($rseqid, $input, $output);
            return 1;
}

sub process_addBuddyMember {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_addBuddyMember_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_addBuddyMember_result->new();
            eval {
              $self->{handler}->addBuddyMember($args->requestId, $args->userMid);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('addBuddyMember', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('addBuddyMember', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_addBuddyMembers {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_addBuddyMembers_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_addBuddyMembers_result->new();
            eval {
              $self->{handler}->addBuddyMembers($args->requestId, $args->userMids);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('addBuddyMembers', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('addBuddyMembers', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_blockBuddyMember {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_blockBuddyMember_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_blockBuddyMember_result->new();
            eval {
              $self->{handler}->blockBuddyMember($args->requestId, $args->mid);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('blockBuddyMember', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('blockBuddyMember', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_commitSendMessagesToAll {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_commitSendMessagesToAll_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_commitSendMessagesToAll_result->new();
            eval {
              $result->{success} = $self->{handler}->commitSendMessagesToAll($args->requestIdList);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('commitSendMessagesToAll', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('commitSendMessagesToAll', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_commitSendMessagesToMids {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_commitSendMessagesToMids_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_commitSendMessagesToMids_result->new();
            eval {
              $result->{success} = $self->{handler}->commitSendMessagesToMids($args->requestIdList, $args->mids);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('commitSendMessagesToMids', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('commitSendMessagesToMids', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_containsBuddyMember {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_containsBuddyMember_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_containsBuddyMember_result->new();
            eval {
              $result->{success} = $self->{handler}->containsBuddyMember($args->requestId, $args->userMid);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('containsBuddyMember', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('containsBuddyMember', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_downloadMessageContent {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_downloadMessageContent_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_downloadMessageContent_result->new();
            eval {
              $result->{success} = $self->{handler}->downloadMessageContent($args->requestId, $args->messageId);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('downloadMessageContent', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('downloadMessageContent', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_downloadMessageContentPreview {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_downloadMessageContentPreview_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_downloadMessageContentPreview_result->new();
            eval {
              $result->{success} = $self->{handler}->downloadMessageContentPreview($args->requestId, $args->messageId);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('downloadMessageContentPreview', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('downloadMessageContentPreview', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_downloadProfileImage {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_downloadProfileImage_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_downloadProfileImage_result->new();
            eval {
              $result->{success} = $self->{handler}->downloadProfileImage($args->requestId);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('downloadProfileImage', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('downloadProfileImage', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_downloadProfileImagePreview {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_downloadProfileImagePreview_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_downloadProfileImagePreview_result->new();
            eval {
              $result->{success} = $self->{handler}->downloadProfileImagePreview($args->requestId);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('downloadProfileImagePreview', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('downloadProfileImagePreview', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_getActiveMemberCountByBuddyMid {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_getActiveMemberCountByBuddyMid_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_getActiveMemberCountByBuddyMid_result->new();
            eval {
              $result->{success} = $self->{handler}->getActiveMemberCountByBuddyMid($args->buddyMid);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('getActiveMemberCountByBuddyMid', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('getActiveMemberCountByBuddyMid', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_getActiveMemberMidsByBuddyMid {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_getActiveMemberMidsByBuddyMid_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_getActiveMemberMidsByBuddyMid_result->new();
            eval {
              $result->{success} = $self->{handler}->getActiveMemberMidsByBuddyMid($args->buddyMid);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('getActiveMemberMidsByBuddyMid', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('getActiveMemberMidsByBuddyMid', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_getAllBuddyMembers {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_getAllBuddyMembers_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_getAllBuddyMembers_result->new();
            eval {
              $result->{success} = $self->{handler}->getAllBuddyMembers();
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('getAllBuddyMembers', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('getAllBuddyMembers', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_getBlockedBuddyMembers {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_getBlockedBuddyMembers_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_getBlockedBuddyMembers_result->new();
            eval {
              $result->{success} = $self->{handler}->getBlockedBuddyMembers();
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('getBlockedBuddyMembers', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('getBlockedBuddyMembers', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_getBlockerCountByBuddyMid {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_getBlockerCountByBuddyMid_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_getBlockerCountByBuddyMid_result->new();
            eval {
              $result->{success} = $self->{handler}->getBlockerCountByBuddyMid($args->buddyMid);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('getBlockerCountByBuddyMid', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('getBlockerCountByBuddyMid', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_getBuddyDetailByMid {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_getBuddyDetailByMid_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_getBuddyDetailByMid_result->new();
            eval {
              $result->{success} = $self->{handler}->getBuddyDetailByMid($args->buddyMid);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('getBuddyDetailByMid', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('getBuddyDetailByMid', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_getBuddyProfile {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_getBuddyProfile_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_getBuddyProfile_result->new();
            eval {
              $result->{success} = $self->{handler}->getBuddyProfile();
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('getBuddyProfile', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('getBuddyProfile', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_getContactTicket {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_getContactTicket_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_getContactTicket_result->new();
            eval {
              $result->{success} = $self->{handler}->getContactTicket();
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('getContactTicket', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('getContactTicket', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_getMemberCountByBuddyMid {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_getMemberCountByBuddyMid_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_getMemberCountByBuddyMid_result->new();
            eval {
              $result->{success} = $self->{handler}->getMemberCountByBuddyMid($args->buddyMid);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('getMemberCountByBuddyMid', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('getMemberCountByBuddyMid', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_getSendBuddyMessageResult {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_getSendBuddyMessageResult_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_getSendBuddyMessageResult_result->new();
            eval {
              $result->{success} = $self->{handler}->getSendBuddyMessageResult($args->sendBuddyMessageRequestId);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('getSendBuddyMessageResult', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('getSendBuddyMessageResult', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_getSetBuddyOnAirResult {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_getSetBuddyOnAirResult_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_getSetBuddyOnAirResult_result->new();
            eval {
              $result->{success} = $self->{handler}->getSetBuddyOnAirResult($args->setBuddyOnAirRequestId);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('getSetBuddyOnAirResult', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('getSetBuddyOnAirResult', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_getUpdateBuddyProfileResult {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_getUpdateBuddyProfileResult_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_getUpdateBuddyProfileResult_result->new();
            eval {
              $result->{success} = $self->{handler}->getUpdateBuddyProfileResult($args->updateBuddyProfileRequestId);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('getUpdateBuddyProfileResult', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('getUpdateBuddyProfileResult', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_isBuddyOnAirByMid {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_isBuddyOnAirByMid_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_isBuddyOnAirByMid_result->new();
            eval {
              $result->{success} = $self->{handler}->isBuddyOnAirByMid($args->buddyMid);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('isBuddyOnAirByMid', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('isBuddyOnAirByMid', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_linkAndSendBuddyContentMessageToAllAsync {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_linkAndSendBuddyContentMessageToAllAsync_result->new();
            eval {
              $result->{success} = $self->{handler}->linkAndSendBuddyContentMessageToAllAsync($args->requestId, $args->msg, $args->sourceContentId);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('linkAndSendBuddyContentMessageToAllAsync', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('linkAndSendBuddyContentMessageToAllAsync', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_linkAndSendBuddyContentMessageToMids {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_linkAndSendBuddyContentMessageToMids_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_linkAndSendBuddyContentMessageToMids_result->new();
            eval {
              $result->{success} = $self->{handler}->linkAndSendBuddyContentMessageToMids($args->requestId, $args->msg, $args->sourceContentId, $args->mids);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('linkAndSendBuddyContentMessageToMids', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('linkAndSendBuddyContentMessageToMids', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_notifyBuddyBlocked {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_notifyBuddyBlocked_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_notifyBuddyBlocked_result->new();
            eval {
              $self->{handler}->notifyBuddyBlocked($args->buddyMid, $args->blockerMid);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('notifyBuddyBlocked', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('notifyBuddyBlocked', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_notifyBuddyUnblocked {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_notifyBuddyUnblocked_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_notifyBuddyUnblocked_result->new();
            eval {
              $self->{handler}->notifyBuddyUnblocked($args->buddyMid, $args->blockerMid);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('notifyBuddyUnblocked', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('notifyBuddyUnblocked', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_registerBuddy {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_registerBuddy_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_registerBuddy_result->new();
            eval {
              $result->{success} = $self->{handler}->registerBuddy($args->buddyId, $args->searchId, $args->displayName, $args->statusMeessage, $args->picture, $args->settings);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('registerBuddy', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('registerBuddy', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_registerBuddyAdmin {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_registerBuddyAdmin_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_registerBuddyAdmin_result->new();
            eval {
              $result->{success} = $self->{handler}->registerBuddyAdmin($args->buddyId, $args->searchId, $args->displayName, $args->statusMessage, $args->picture);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('registerBuddyAdmin', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('registerBuddyAdmin', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_reissueContactTicket {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_reissueContactTicket_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_reissueContactTicket_result->new();
            eval {
              $result->{success} = $self->{handler}->reissueContactTicket($args->expirationTime, $args->maxUseCount);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('reissueContactTicket', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('reissueContactTicket', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_removeBuddyMember {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_removeBuddyMember_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_removeBuddyMember_result->new();
            eval {
              $self->{handler}->removeBuddyMember($args->requestId, $args->userMid);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('removeBuddyMember', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('removeBuddyMember', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_removeBuddyMembers {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_removeBuddyMembers_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_removeBuddyMembers_result->new();
            eval {
              $self->{handler}->removeBuddyMembers($args->requestId, $args->userMids);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('removeBuddyMembers', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('removeBuddyMembers', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_sendBuddyContentMessageToAll {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_sendBuddyContentMessageToAll_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_sendBuddyContentMessageToAll_result->new();
            eval {
              $result->{success} = $self->{handler}->sendBuddyContentMessageToAll($args->requestId, $args->msg, $args->content);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('sendBuddyContentMessageToAll', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('sendBuddyContentMessageToAll', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_sendBuddyContentMessageToAllAsync {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_sendBuddyContentMessageToAllAsync_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_sendBuddyContentMessageToAllAsync_result->new();
            eval {
              $result->{success} = $self->{handler}->sendBuddyContentMessageToAllAsync($args->requestId, $args->msg, $args->content);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('sendBuddyContentMessageToAllAsync', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('sendBuddyContentMessageToAllAsync', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_sendBuddyContentMessageToMids {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_sendBuddyContentMessageToMids_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_sendBuddyContentMessageToMids_result->new();
            eval {
              $result->{success} = $self->{handler}->sendBuddyContentMessageToMids($args->requestId, $args->msg, $args->content, $args->mids);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('sendBuddyContentMessageToMids', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('sendBuddyContentMessageToMids', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_sendBuddyContentMessageToMidsAsync {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_sendBuddyContentMessageToMidsAsync_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_sendBuddyContentMessageToMidsAsync_result->new();
            eval {
              $result->{success} = $self->{handler}->sendBuddyContentMessageToMidsAsync($args->requestId, $args->msg, $args->content, $args->mids);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('sendBuddyContentMessageToMidsAsync', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('sendBuddyContentMessageToMidsAsync', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_sendBuddyMessageToAll {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_sendBuddyMessageToAll_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_sendBuddyMessageToAll_result->new();
            eval {
              $result->{success} = $self->{handler}->sendBuddyMessageToAll($args->requestId, $args->msg);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('sendBuddyMessageToAll', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('sendBuddyMessageToAll', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_sendBuddyMessageToAllAsync {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_sendBuddyMessageToAllAsync_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_sendBuddyMessageToAllAsync_result->new();
            eval {
              $result->{success} = $self->{handler}->sendBuddyMessageToAllAsync($args->requestId, $args->msg);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('sendBuddyMessageToAllAsync', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('sendBuddyMessageToAllAsync', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_sendBuddyMessageToMids {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_sendBuddyMessageToMids_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_sendBuddyMessageToMids_result->new();
            eval {
              $result->{success} = $self->{handler}->sendBuddyMessageToMids($args->requestId, $args->msg, $args->mids);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('sendBuddyMessageToMids', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('sendBuddyMessageToMids', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_sendBuddyMessageToMidsAsync {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_sendBuddyMessageToMidsAsync_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_sendBuddyMessageToMidsAsync_result->new();
            eval {
              $result->{success} = $self->{handler}->sendBuddyMessageToMidsAsync($args->requestId, $args->msg, $args->mids);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('sendBuddyMessageToMidsAsync', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('sendBuddyMessageToMidsAsync', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_sendIndividualEventToAllAsync {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_sendIndividualEventToAllAsync_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_sendIndividualEventToAllAsync_result->new();
            eval {
              $self->{handler}->sendIndividualEventToAllAsync($args->requestId, $args->buddyMid, $args->notificationStatus);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('sendIndividualEventToAllAsync', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('sendIndividualEventToAllAsync', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_setBuddyOnAir {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_setBuddyOnAir_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_setBuddyOnAir_result->new();
            eval {
              $result->{success} = $self->{handler}->setBuddyOnAir($args->requestId, $args->onAir);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('setBuddyOnAir', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('setBuddyOnAir', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_setBuddyOnAirAsync {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_setBuddyOnAirAsync_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_setBuddyOnAirAsync_result->new();
            eval {
              $result->{success} = $self->{handler}->setBuddyOnAirAsync($args->requestId, $args->onAir);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('setBuddyOnAirAsync', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('setBuddyOnAirAsync', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_storeMessage {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_storeMessage_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_storeMessage_result->new();
            eval {
              $result->{success} = $self->{handler}->storeMessage($args->requestId, $args->messageRequest);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('storeMessage', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('storeMessage', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_unblockBuddyMember {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_unblockBuddyMember_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_unblockBuddyMember_result->new();
            eval {
              $self->{handler}->unblockBuddyMember($args->requestId, $args->mid);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('unblockBuddyMember', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('unblockBuddyMember', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_unregisterBuddy {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_unregisterBuddy_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_unregisterBuddy_result->new();
            eval {
              $self->{handler}->unregisterBuddy($args->requestId);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('unregisterBuddy', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('unregisterBuddy', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_unregisterBuddyAdmin {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_unregisterBuddyAdmin_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_unregisterBuddyAdmin_result->new();
            eval {
              $self->{handler}->unregisterBuddyAdmin($args->requestId);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('unregisterBuddyAdmin', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('unregisterBuddyAdmin', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_updateBuddyAdminProfileAttribute {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_updateBuddyAdminProfileAttribute_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_updateBuddyAdminProfileAttribute_result->new();
            eval {
              $self->{handler}->updateBuddyAdminProfileAttribute($args->requestId, $args->attributes);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('updateBuddyAdminProfileAttribute', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('updateBuddyAdminProfileAttribute', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_updateBuddyAdminProfileImage {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_updateBuddyAdminProfileImage_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_updateBuddyAdminProfileImage_result->new();
            eval {
              $self->{handler}->updateBuddyAdminProfileImage($args->requestId, $args->picture);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('updateBuddyAdminProfileImage', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('updateBuddyAdminProfileImage', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_updateBuddyProfileAttributes {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_updateBuddyProfileAttributes_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_updateBuddyProfileAttributes_result->new();
            eval {
              $result->{success} = $self->{handler}->updateBuddyProfileAttributes($args->requestId, $args->attributes);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('updateBuddyProfileAttributes', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('updateBuddyProfileAttributes', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_updateBuddyProfileAttributesAsync {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_updateBuddyProfileAttributesAsync_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_updateBuddyProfileAttributesAsync_result->new();
            eval {
              $result->{success} = $self->{handler}->updateBuddyProfileAttributesAsync($args->requestId, $args->attributes);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('updateBuddyProfileAttributesAsync', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('updateBuddyProfileAttributesAsync', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_updateBuddyProfileImage {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_updateBuddyProfileImage_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_updateBuddyProfileImage_result->new();
            eval {
              $result->{success} = $self->{handler}->updateBuddyProfileImage($args->requestId, $args->image);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('updateBuddyProfileImage', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('updateBuddyProfileImage', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_updateBuddyProfileImageAsync {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_updateBuddyProfileImageAsync_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_updateBuddyProfileImageAsync_result->new();
            eval {
              $result->{success} = $self->{handler}->updateBuddyProfileImageAsync($args->requestId, $args->image);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('updateBuddyProfileImageAsync', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('updateBuddyProfileImageAsync', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_updateBuddySearchId {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_updateBuddySearchId_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_updateBuddySearchId_result->new();
            eval {
              $self->{handler}->updateBuddySearchId($args->requestId, $args->searchId);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('updateBuddySearchId', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('updateBuddySearchId', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_updateBuddySettings {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_updateBuddySettings_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_updateBuddySettings_result->new();
            eval {
              $self->{handler}->updateBuddySettings($args->settings);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('updateBuddySettings', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('updateBuddySettings', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

sub process_uploadBuddyContent {
            my ($self, $seqid, $input, $output) = @_;
            my $args = BuddyManagementService_uploadBuddyContent_args->new();
            $args->read($input);
            $input->readMessageEnd();
            my $result = BuddyManagementService_uploadBuddyContent_result->new();
            eval {
              $result->{success} = $self->{handler}->uploadBuddyContent($args->contentType, $args->content);
            }; if( UNIVERSAL::isa($@,'TalkException') ){ 
              $result->{e} = $@;
              $@ = undef;
            }
            if ($@) {
              $@ =~ s/^\s+|\s+$//g;
              my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
              $output->writeMessageBegin('uploadBuddyContent', Thrift::TMessageType::EXCEPTION, $seqid);
              $err->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
              $@ = undef;
              return;
            }
            $output->writeMessageBegin('uploadBuddyContent', Thrift::TMessageType::REPLY, $seqid);
            $result->write($output);
            $output->writeMessageEnd();
            $output->getTransport()->flush();
}

1;
