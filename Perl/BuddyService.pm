#
# Autogenerated by Thrift Compiler (0.14.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
use 5.10.0;
use strict;
use warnings;
use Thrift::Exception;
use Thrift::MessageType;
use Thrift::Type;

use Types;


# HELPER FUNCTIONS AND STRUCTURES

package BuddyService_findBuddyContactsByQuery_args;
use base qw(Class::Accessor);
BuddyService_findBuddyContactsByQuery_args->mk_accessors( qw( language country query fromIndex count requestSource ) );

sub new {
            my $classname = shift;
            my $self      = {};
            my $vals      = shift || {};
            $self->{language} = undef;
            $self->{country} = undef;
            $self->{query} = undef;
            $self->{fromIndex} = undef;
            $self->{count} = undef;
            $self->{requestSource} = undef;
            if (UNIVERSAL::isa($vals,'HASH')) {
              if (defined $vals->{language}) {
                $self->{language} = $vals->{language};
              }
              if (defined $vals->{country}) {
                $self->{country} = $vals->{country};
              }
              if (defined $vals->{query}) {
                $self->{query} = $vals->{query};
              }
              if (defined $vals->{fromIndex}) {
                $self->{fromIndex} = $vals->{fromIndex};
              }
              if (defined $vals->{count}) {
                $self->{count} = $vals->{count};
              }
              if (defined $vals->{requestSource}) {
                $self->{requestSource} = $vals->{requestSource};
              }
            }
            return bless ($self, $classname);
}

sub getName {
            return 'BuddyService_findBuddyContactsByQuery_args';
          }

sub read {
            my ($self, $input) = @_;
            my $xfer  = 0;
            my $fname;
            my $ftype = 0;
            my $fid   = 0;
            $xfer += $input->readStructBegin(\$fname);
            while (1)
            {
              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
              if ($ftype == Thrift::TType::STOP) {
                last;
              }
              SWITCH: for($fid)
              {
                /^2$/ && do{                if ($ftype == Thrift::TType::STRING) {
                  $xfer += $input->readString(\$self->{language});
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                /^3$/ && do{                if ($ftype == Thrift::TType::STRING) {
                  $xfer += $input->readString(\$self->{country});
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                /^4$/ && do{                if ($ftype == Thrift::TType::STRING) {
                  $xfer += $input->readString(\$self->{query});
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                /^5$/ && do{                if ($ftype == Thrift::TType::I32) {
                  $xfer += $input->readI32(\$self->{fromIndex});
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                /^6$/ && do{                if ($ftype == Thrift::TType::I32) {
                  $xfer += $input->readI32(\$self->{count});
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                /^7$/ && do{                if ($ftype == Thrift::TType::I32) {
                  $xfer += $input->readI32(\$self->{requestSource});
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                  $xfer += $input->skip($ftype);
              }
              $xfer += $input->readFieldEnd();
            }
            $xfer += $input->readStructEnd();
            return $xfer;
          }

sub write {
            my ($self, $output) = @_;
            my $xfer   = 0;
            $xfer += $output->writeStructBegin('BuddyService_findBuddyContactsByQuery_args');
            if (defined $self->{language}) {
              $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 2);
              $xfer += $output->writeString($self->{language});
              $xfer += $output->writeFieldEnd();
            }
            if (defined $self->{country}) {
              $xfer += $output->writeFieldBegin('country', Thrift::TType::STRING, 3);
              $xfer += $output->writeString($self->{country});
              $xfer += $output->writeFieldEnd();
            }
            if (defined $self->{query}) {
              $xfer += $output->writeFieldBegin('query', Thrift::TType::STRING, 4);
              $xfer += $output->writeString($self->{query});
              $xfer += $output->writeFieldEnd();
            }
            if (defined $self->{fromIndex}) {
              $xfer += $output->writeFieldBegin('fromIndex', Thrift::TType::I32, 5);
              $xfer += $output->writeI32($self->{fromIndex});
              $xfer += $output->writeFieldEnd();
            }
            if (defined $self->{count}) {
              $xfer += $output->writeFieldBegin('count', Thrift::TType::I32, 6);
              $xfer += $output->writeI32($self->{count});
              $xfer += $output->writeFieldEnd();
            }
            if (defined $self->{requestSource}) {
              $xfer += $output->writeFieldBegin('requestSource', Thrift::TType::I32, 7);
              $xfer += $output->writeI32($self->{requestSource});
              $xfer += $output->writeFieldEnd();
            }
            $xfer += $output->writeFieldStop();
            $xfer += $output->writeStructEnd();
            return $xfer;
          }

package BuddyService_findBuddyContactsByQuery_result;
use base qw(Class::Accessor);
BuddyService_findBuddyContactsByQuery_result->mk_accessors( qw( success ) );

sub new {
            my $classname = shift;
            my $self      = {};
            my $vals      = shift || {};
            $self->{success} = undef;
            $self->{e} = undef;
            if (UNIVERSAL::isa($vals,'HASH')) {
              if (defined $vals->{success}) {
                $self->{success} = $vals->{success};
              }
              if (defined $vals->{e}) {
                $self->{e} = $vals->{e};
              }
            }
            return bless ($self, $classname);
}

sub getName {
            return 'BuddyService_findBuddyContactsByQuery_result';
          }

sub read {
            my ($self, $input) = @_;
            my $xfer  = 0;
            my $fname;
            my $ftype = 0;
            my $fid   = 0;
            $xfer += $input->readStructBegin(\$fname);
            while (1)
            {
              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
              if ($ftype == Thrift::TType::STOP) {
                last;
              }
              SWITCH: for($fid)
              {
                /^0$/ && do{                if ($ftype == Thrift::TType::LIST) {
                  {
                    my $_size1120 = 0;
                    $self->{success} = [];
                    my $_etype1123 = 0;
                    $xfer += $input->readListBegin(\$_etype1123, \$_size1120);
                    for (my $_i1124 = 0; $_i1124 < $_size1120; ++$_i1124)
                    {
                      my $elem1125 = undef;
                      $elem1125 = BuddySearchResult->new();
                      $xfer += $elem1125->read($input);
                      push(@{$self->{success}},$elem1125);
                    }
                    $xfer += $input->readListEnd();
                  }
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                /^1$/ && do{                if ($ftype == Thrift::TType::STRUCT) {
                  $self->{e} = TalkException->new();
                  $xfer += $self->{e}->read($input);
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                  $xfer += $input->skip($ftype);
              }
              $xfer += $input->readFieldEnd();
            }
            $xfer += $input->readStructEnd();
            return $xfer;
          }

sub write {
            my ($self, $output) = @_;
            my $xfer   = 0;
            $xfer += $output->writeStructBegin('BuddyService_findBuddyContactsByQuery_result');
            if (defined $self->{success}) {
              $xfer += $output->writeFieldBegin('success', Thrift::TType::LIST, 0);
              {
                $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{success}}));
                {
                  foreach my $iter1126 (@{$self->{success}}) 
                  {
                    $xfer += ${iter1126}->write($output);
                  }
                }
                $xfer += $output->writeListEnd();
              }
              $xfer += $output->writeFieldEnd();
            }
            if (defined $self->{e}) {
              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
              $xfer += $self->{e}->write($output);
              $xfer += $output->writeFieldEnd();
            }
            $xfer += $output->writeFieldStop();
            $xfer += $output->writeStructEnd();
            return $xfer;
          }

package BuddyService_getBuddyContacts_args;
use base qw(Class::Accessor);
BuddyService_getBuddyContacts_args->mk_accessors( qw( language country classification fromIndex count ) );

sub new {
            my $classname = shift;
            my $self      = {};
            my $vals      = shift || {};
            $self->{language} = undef;
            $self->{country} = undef;
            $self->{classification} = undef;
            $self->{fromIndex} = undef;
            $self->{count} = undef;
            if (UNIVERSAL::isa($vals,'HASH')) {
              if (defined $vals->{language}) {
                $self->{language} = $vals->{language};
              }
              if (defined $vals->{country}) {
                $self->{country} = $vals->{country};
              }
              if (defined $vals->{classification}) {
                $self->{classification} = $vals->{classification};
              }
              if (defined $vals->{fromIndex}) {
                $self->{fromIndex} = $vals->{fromIndex};
              }
              if (defined $vals->{count}) {
                $self->{count} = $vals->{count};
              }
            }
            return bless ($self, $classname);
}

sub getName {
            return 'BuddyService_getBuddyContacts_args';
          }

sub read {
            my ($self, $input) = @_;
            my $xfer  = 0;
            my $fname;
            my $ftype = 0;
            my $fid   = 0;
            $xfer += $input->readStructBegin(\$fname);
            while (1)
            {
              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
              if ($ftype == Thrift::TType::STOP) {
                last;
              }
              SWITCH: for($fid)
              {
                /^2$/ && do{                if ($ftype == Thrift::TType::STRING) {
                  $xfer += $input->readString(\$self->{language});
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                /^3$/ && do{                if ($ftype == Thrift::TType::STRING) {
                  $xfer += $input->readString(\$self->{country});
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                /^4$/ && do{                if ($ftype == Thrift::TType::STRING) {
                  $xfer += $input->readString(\$self->{classification});
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                /^5$/ && do{                if ($ftype == Thrift::TType::I32) {
                  $xfer += $input->readI32(\$self->{fromIndex});
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                /^6$/ && do{                if ($ftype == Thrift::TType::I32) {
                  $xfer += $input->readI32(\$self->{count});
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                  $xfer += $input->skip($ftype);
              }
              $xfer += $input->readFieldEnd();
            }
            $xfer += $input->readStructEnd();
            return $xfer;
          }

sub write {
            my ($self, $output) = @_;
            my $xfer   = 0;
            $xfer += $output->writeStructBegin('BuddyService_getBuddyContacts_args');
            if (defined $self->{language}) {
              $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 2);
              $xfer += $output->writeString($self->{language});
              $xfer += $output->writeFieldEnd();
            }
            if (defined $self->{country}) {
              $xfer += $output->writeFieldBegin('country', Thrift::TType::STRING, 3);
              $xfer += $output->writeString($self->{country});
              $xfer += $output->writeFieldEnd();
            }
            if (defined $self->{classification}) {
              $xfer += $output->writeFieldBegin('classification', Thrift::TType::STRING, 4);
              $xfer += $output->writeString($self->{classification});
              $xfer += $output->writeFieldEnd();
            }
            if (defined $self->{fromIndex}) {
              $xfer += $output->writeFieldBegin('fromIndex', Thrift::TType::I32, 5);
              $xfer += $output->writeI32($self->{fromIndex});
              $xfer += $output->writeFieldEnd();
            }
            if (defined $self->{count}) {
              $xfer += $output->writeFieldBegin('count', Thrift::TType::I32, 6);
              $xfer += $output->writeI32($self->{count});
              $xfer += $output->writeFieldEnd();
            }
            $xfer += $output->writeFieldStop();
            $xfer += $output->writeStructEnd();
            return $xfer;
          }

package BuddyService_getBuddyContacts_result;
use base qw(Class::Accessor);
BuddyService_getBuddyContacts_result->mk_accessors( qw( success ) );

sub new {
            my $classname = shift;
            my $self      = {};
            my $vals      = shift || {};
            $self->{success} = undef;
            $self->{e} = undef;
            if (UNIVERSAL::isa($vals,'HASH')) {
              if (defined $vals->{success}) {
                $self->{success} = $vals->{success};
              }
              if (defined $vals->{e}) {
                $self->{e} = $vals->{e};
              }
            }
            return bless ($self, $classname);
}

sub getName {
            return 'BuddyService_getBuddyContacts_result';
          }

sub read {
            my ($self, $input) = @_;
            my $xfer  = 0;
            my $fname;
            my $ftype = 0;
            my $fid   = 0;
            $xfer += $input->readStructBegin(\$fname);
            while (1)
            {
              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
              if ($ftype == Thrift::TType::STOP) {
                last;
              }
              SWITCH: for($fid)
              {
                /^0$/ && do{                if ($ftype == Thrift::TType::LIST) {
                  {
                    my $_size1127 = 0;
                    $self->{success} = [];
                    my $_etype1130 = 0;
                    $xfer += $input->readListBegin(\$_etype1130, \$_size1127);
                    for (my $_i1131 = 0; $_i1131 < $_size1127; ++$_i1131)
                    {
                      my $elem1132 = undef;
                      $elem1132 = Contact->new();
                      $xfer += $elem1132->read($input);
                      push(@{$self->{success}},$elem1132);
                    }
                    $xfer += $input->readListEnd();
                  }
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                /^1$/ && do{                if ($ftype == Thrift::TType::STRUCT) {
                  $self->{e} = TalkException->new();
                  $xfer += $self->{e}->read($input);
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                  $xfer += $input->skip($ftype);
              }
              $xfer += $input->readFieldEnd();
            }
            $xfer += $input->readStructEnd();
            return $xfer;
          }

sub write {
            my ($self, $output) = @_;
            my $xfer   = 0;
            $xfer += $output->writeStructBegin('BuddyService_getBuddyContacts_result');
            if (defined $self->{success}) {
              $xfer += $output->writeFieldBegin('success', Thrift::TType::LIST, 0);
              {
                $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{success}}));
                {
                  foreach my $iter1133 (@{$self->{success}}) 
                  {
                    $xfer += ${iter1133}->write($output);
                  }
                }
                $xfer += $output->writeListEnd();
              }
              $xfer += $output->writeFieldEnd();
            }
            if (defined $self->{e}) {
              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
              $xfer += $self->{e}->write($output);
              $xfer += $output->writeFieldEnd();
            }
            $xfer += $output->writeFieldStop();
            $xfer += $output->writeStructEnd();
            return $xfer;
          }

package BuddyService_getBuddyDetail_args;
use base qw(Class::Accessor);
BuddyService_getBuddyDetail_args->mk_accessors( qw( buddyMid ) );

sub new {
            my $classname = shift;
            my $self      = {};
            my $vals      = shift || {};
            $self->{buddyMid} = undef;
            if (UNIVERSAL::isa($vals,'HASH')) {
              if (defined $vals->{buddyMid}) {
                $self->{buddyMid} = $vals->{buddyMid};
              }
            }
            return bless ($self, $classname);
}

sub getName {
            return 'BuddyService_getBuddyDetail_args';
          }

sub read {
            my ($self, $input) = @_;
            my $xfer  = 0;
            my $fname;
            my $ftype = 0;
            my $fid   = 0;
            $xfer += $input->readStructBegin(\$fname);
            while (1)
            {
              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
              if ($ftype == Thrift::TType::STOP) {
                last;
              }
              SWITCH: for($fid)
              {
                /^4$/ && do{                if ($ftype == Thrift::TType::STRING) {
                  $xfer += $input->readString(\$self->{buddyMid});
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                  $xfer += $input->skip($ftype);
              }
              $xfer += $input->readFieldEnd();
            }
            $xfer += $input->readStructEnd();
            return $xfer;
          }

sub write {
            my ($self, $output) = @_;
            my $xfer   = 0;
            $xfer += $output->writeStructBegin('BuddyService_getBuddyDetail_args');
            if (defined $self->{buddyMid}) {
              $xfer += $output->writeFieldBegin('buddyMid', Thrift::TType::STRING, 4);
              $xfer += $output->writeString($self->{buddyMid});
              $xfer += $output->writeFieldEnd();
            }
            $xfer += $output->writeFieldStop();
            $xfer += $output->writeStructEnd();
            return $xfer;
          }

package BuddyService_getBuddyDetail_result;
use base qw(Class::Accessor);
BuddyService_getBuddyDetail_result->mk_accessors( qw( success ) );

sub new {
            my $classname = shift;
            my $self      = {};
            my $vals      = shift || {};
            $self->{success} = undef;
            $self->{e} = undef;
            if (UNIVERSAL::isa($vals,'HASH')) {
              if (defined $vals->{success}) {
                $self->{success} = $vals->{success};
              }
              if (defined $vals->{e}) {
                $self->{e} = $vals->{e};
              }
            }
            return bless ($self, $classname);
}

sub getName {
            return 'BuddyService_getBuddyDetail_result';
          }

sub read {
            my ($self, $input) = @_;
            my $xfer  = 0;
            my $fname;
            my $ftype = 0;
            my $fid   = 0;
            $xfer += $input->readStructBegin(\$fname);
            while (1)
            {
              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
              if ($ftype == Thrift::TType::STOP) {
                last;
              }
              SWITCH: for($fid)
              {
                /^0$/ && do{                if ($ftype == Thrift::TType::STRUCT) {
                  $self->{success} = BuddyDetail->new();
                  $xfer += $self->{success}->read($input);
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                /^1$/ && do{                if ($ftype == Thrift::TType::STRUCT) {
                  $self->{e} = TalkException->new();
                  $xfer += $self->{e}->read($input);
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                  $xfer += $input->skip($ftype);
              }
              $xfer += $input->readFieldEnd();
            }
            $xfer += $input->readStructEnd();
            return $xfer;
          }

sub write {
            my ($self, $output) = @_;
            my $xfer   = 0;
            $xfer += $output->writeStructBegin('BuddyService_getBuddyDetail_result');
            if (defined $self->{success}) {
              $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
              $xfer += $self->{success}->write($output);
              $xfer += $output->writeFieldEnd();
            }
            if (defined $self->{e}) {
              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
              $xfer += $self->{e}->write($output);
              $xfer += $output->writeFieldEnd();
            }
            $xfer += $output->writeFieldStop();
            $xfer += $output->writeStructEnd();
            return $xfer;
          }

package BuddyService_getBuddyOnAir_args;
use base qw(Class::Accessor);
BuddyService_getBuddyOnAir_args->mk_accessors( qw( buddyMid ) );

sub new {
            my $classname = shift;
            my $self      = {};
            my $vals      = shift || {};
            $self->{buddyMid} = undef;
            if (UNIVERSAL::isa($vals,'HASH')) {
              if (defined $vals->{buddyMid}) {
                $self->{buddyMid} = $vals->{buddyMid};
              }
            }
            return bless ($self, $classname);
}

sub getName {
            return 'BuddyService_getBuddyOnAir_args';
          }

sub read {
            my ($self, $input) = @_;
            my $xfer  = 0;
            my $fname;
            my $ftype = 0;
            my $fid   = 0;
            $xfer += $input->readStructBegin(\$fname);
            while (1)
            {
              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
              if ($ftype == Thrift::TType::STOP) {
                last;
              }
              SWITCH: for($fid)
              {
                /^4$/ && do{                if ($ftype == Thrift::TType::STRING) {
                  $xfer += $input->readString(\$self->{buddyMid});
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                  $xfer += $input->skip($ftype);
              }
              $xfer += $input->readFieldEnd();
            }
            $xfer += $input->readStructEnd();
            return $xfer;
          }

sub write {
            my ($self, $output) = @_;
            my $xfer   = 0;
            $xfer += $output->writeStructBegin('BuddyService_getBuddyOnAir_args');
            if (defined $self->{buddyMid}) {
              $xfer += $output->writeFieldBegin('buddyMid', Thrift::TType::STRING, 4);
              $xfer += $output->writeString($self->{buddyMid});
              $xfer += $output->writeFieldEnd();
            }
            $xfer += $output->writeFieldStop();
            $xfer += $output->writeStructEnd();
            return $xfer;
          }

package BuddyService_getBuddyOnAir_result;
use base qw(Class::Accessor);
BuddyService_getBuddyOnAir_result->mk_accessors( qw( success ) );

sub new {
            my $classname = shift;
            my $self      = {};
            my $vals      = shift || {};
            $self->{success} = undef;
            $self->{e} = undef;
            if (UNIVERSAL::isa($vals,'HASH')) {
              if (defined $vals->{success}) {
                $self->{success} = $vals->{success};
              }
              if (defined $vals->{e}) {
                $self->{e} = $vals->{e};
              }
            }
            return bless ($self, $classname);
}

sub getName {
            return 'BuddyService_getBuddyOnAir_result';
          }

sub read {
            my ($self, $input) = @_;
            my $xfer  = 0;
            my $fname;
            my $ftype = 0;
            my $fid   = 0;
            $xfer += $input->readStructBegin(\$fname);
            while (1)
            {
              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
              if ($ftype == Thrift::TType::STOP) {
                last;
              }
              SWITCH: for($fid)
              {
                /^0$/ && do{                if ($ftype == Thrift::TType::STRUCT) {
                  $self->{success} = BuddyOnAir->new();
                  $xfer += $self->{success}->read($input);
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                /^1$/ && do{                if ($ftype == Thrift::TType::STRUCT) {
                  $self->{e} = TalkException->new();
                  $xfer += $self->{e}->read($input);
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                  $xfer += $input->skip($ftype);
              }
              $xfer += $input->readFieldEnd();
            }
            $xfer += $input->readStructEnd();
            return $xfer;
          }

sub write {
            my ($self, $output) = @_;
            my $xfer   = 0;
            $xfer += $output->writeStructBegin('BuddyService_getBuddyOnAir_result');
            if (defined $self->{success}) {
              $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
              $xfer += $self->{success}->write($output);
              $xfer += $output->writeFieldEnd();
            }
            if (defined $self->{e}) {
              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
              $xfer += $self->{e}->write($output);
              $xfer += $output->writeFieldEnd();
            }
            $xfer += $output->writeFieldStop();
            $xfer += $output->writeStructEnd();
            return $xfer;
          }

package BuddyService_getCountriesHavingBuddy_args;
use base qw(Class::Accessor);

sub new {
            my $classname = shift;
            my $self      = {};
            my $vals      = shift || {};
            return bless ($self, $classname);
}

sub getName {
            return 'BuddyService_getCountriesHavingBuddy_args';
          }

sub read {
            my ($self, $input) = @_;
            my $xfer  = 0;
            my $fname;
            my $ftype = 0;
            my $fid   = 0;
            $xfer += $input->readStructBegin(\$fname);
            while (1)
            {
              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
              if ($ftype == Thrift::TType::STOP) {
                last;
              }
              SWITCH: for($fid)
              {
                  $xfer += $input->skip($ftype);
              }
              $xfer += $input->readFieldEnd();
            }
            $xfer += $input->readStructEnd();
            return $xfer;
          }

sub write {
            my ($self, $output) = @_;
            my $xfer   = 0;
            $xfer += $output->writeStructBegin('BuddyService_getCountriesHavingBuddy_args');
            $xfer += $output->writeFieldStop();
            $xfer += $output->writeStructEnd();
            return $xfer;
          }

package BuddyService_getCountriesHavingBuddy_result;
use base qw(Class::Accessor);
BuddyService_getCountriesHavingBuddy_result->mk_accessors( qw( success ) );

sub new {
            my $classname = shift;
            my $self      = {};
            my $vals      = shift || {};
            $self->{success} = undef;
            $self->{e} = undef;
            if (UNIVERSAL::isa($vals,'HASH')) {
              if (defined $vals->{success}) {
                $self->{success} = $vals->{success};
              }
              if (defined $vals->{e}) {
                $self->{e} = $vals->{e};
              }
            }
            return bless ($self, $classname);
}

sub getName {
            return 'BuddyService_getCountriesHavingBuddy_result';
          }

sub read {
            my ($self, $input) = @_;
            my $xfer  = 0;
            my $fname;
            my $ftype = 0;
            my $fid   = 0;
            $xfer += $input->readStructBegin(\$fname);
            while (1)
            {
              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
              if ($ftype == Thrift::TType::STOP) {
                last;
              }
              SWITCH: for($fid)
              {
                /^0$/ && do{                if ($ftype == Thrift::TType::LIST) {
                  {
                    my $_size1134 = 0;
                    $self->{success} = [];
                    my $_etype1137 = 0;
                    $xfer += $input->readListBegin(\$_etype1137, \$_size1134);
                    for (my $_i1138 = 0; $_i1138 < $_size1134; ++$_i1138)
                    {
                      my $elem1139 = undef;
                      $xfer += $input->readString(\$elem1139);
                      push(@{$self->{success}},$elem1139);
                    }
                    $xfer += $input->readListEnd();
                  }
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                /^1$/ && do{                if ($ftype == Thrift::TType::STRUCT) {
                  $self->{e} = TalkException->new();
                  $xfer += $self->{e}->read($input);
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                  $xfer += $input->skip($ftype);
              }
              $xfer += $input->readFieldEnd();
            }
            $xfer += $input->readStructEnd();
            return $xfer;
          }

sub write {
            my ($self, $output) = @_;
            my $xfer   = 0;
            $xfer += $output->writeStructBegin('BuddyService_getCountriesHavingBuddy_result');
            if (defined $self->{success}) {
              $xfer += $output->writeFieldBegin('success', Thrift::TType::LIST, 0);
              {
                $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{success}}));
                {
                  foreach my $iter1140 (@{$self->{success}}) 
                  {
                    $xfer += $output->writeString($iter1140);
                  }
                }
                $xfer += $output->writeListEnd();
              }
              $xfer += $output->writeFieldEnd();
            }
            if (defined $self->{e}) {
              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
              $xfer += $self->{e}->write($output);
              $xfer += $output->writeFieldEnd();
            }
            $xfer += $output->writeFieldStop();
            $xfer += $output->writeStructEnd();
            return $xfer;
          }

package BuddyService_getNewlyReleasedBuddyIds_args;
use base qw(Class::Accessor);
BuddyService_getNewlyReleasedBuddyIds_args->mk_accessors( qw( country ) );

sub new {
            my $classname = shift;
            my $self      = {};
            my $vals      = shift || {};
            $self->{country} = undef;
            if (UNIVERSAL::isa($vals,'HASH')) {
              if (defined $vals->{country}) {
                $self->{country} = $vals->{country};
              }
            }
            return bless ($self, $classname);
}

sub getName {
            return 'BuddyService_getNewlyReleasedBuddyIds_args';
          }

sub read {
            my ($self, $input) = @_;
            my $xfer  = 0;
            my $fname;
            my $ftype = 0;
            my $fid   = 0;
            $xfer += $input->readStructBegin(\$fname);
            while (1)
            {
              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
              if ($ftype == Thrift::TType::STOP) {
                last;
              }
              SWITCH: for($fid)
              {
                /^3$/ && do{                if ($ftype == Thrift::TType::STRING) {
                  $xfer += $input->readString(\$self->{country});
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                  $xfer += $input->skip($ftype);
              }
              $xfer += $input->readFieldEnd();
            }
            $xfer += $input->readStructEnd();
            return $xfer;
          }

sub write {
            my ($self, $output) = @_;
            my $xfer   = 0;
            $xfer += $output->writeStructBegin('BuddyService_getNewlyReleasedBuddyIds_args');
            if (defined $self->{country}) {
              $xfer += $output->writeFieldBegin('country', Thrift::TType::STRING, 3);
              $xfer += $output->writeString($self->{country});
              $xfer += $output->writeFieldEnd();
            }
            $xfer += $output->writeFieldStop();
            $xfer += $output->writeStructEnd();
            return $xfer;
          }

package BuddyService_getNewlyReleasedBuddyIds_result;
use base qw(Class::Accessor);
BuddyService_getNewlyReleasedBuddyIds_result->mk_accessors( qw( success ) );

sub new {
            my $classname = shift;
            my $self      = {};
            my $vals      = shift || {};
            $self->{success} = undef;
            $self->{e} = undef;
            if (UNIVERSAL::isa($vals,'HASH')) {
              if (defined $vals->{success}) {
                $self->{success} = $vals->{success};
              }
              if (defined $vals->{e}) {
                $self->{e} = $vals->{e};
              }
            }
            return bless ($self, $classname);
}

sub getName {
            return 'BuddyService_getNewlyReleasedBuddyIds_result';
          }

sub read {
            my ($self, $input) = @_;
            my $xfer  = 0;
            my $fname;
            my $ftype = 0;
            my $fid   = 0;
            $xfer += $input->readStructBegin(\$fname);
            while (1)
            {
              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
              if ($ftype == Thrift::TType::STOP) {
                last;
              }
              SWITCH: for($fid)
              {
                /^0$/ && do{                if ($ftype == Thrift::TType::MAP) {
                  {
                    my $_size1141 = 0;
                    $self->{success} = {};
                    my $_ktype1142 = 0;
                    my $_vtype1143 = 0;
                    $xfer += $input->readMapBegin(\$_ktype1142, \$_vtype1143, \$_size1141);
                    for (my $_i1145 = 0; $_i1145 < $_size1141; ++$_i1145)
                    {
                      my $key1146 = '';
                      my $val1147 = 0;
                      $xfer += $input->readString(\$key1146);
                      $xfer += $input->readI64(\$val1147);
                      $self->{success}->{$key1146} = $val1147;
                    }
                    $xfer += $input->readMapEnd();
                  }
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                /^1$/ && do{                if ($ftype == Thrift::TType::STRUCT) {
                  $self->{e} = TalkException->new();
                  $xfer += $self->{e}->read($input);
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                  $xfer += $input->skip($ftype);
              }
              $xfer += $input->readFieldEnd();
            }
            $xfer += $input->readStructEnd();
            return $xfer;
          }

sub write {
            my ($self, $output) = @_;
            my $xfer   = 0;
            $xfer += $output->writeStructBegin('BuddyService_getNewlyReleasedBuddyIds_result');
            if (defined $self->{success}) {
              $xfer += $output->writeFieldBegin('success', Thrift::TType::MAP, 0);
              {
                $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::I64, scalar(keys %{$self->{success}}));
                {
                  while( my ($kiter1148,$viter1149) = each %{$self->{success}}) 
                  {
                    $xfer += $output->writeString($kiter1148);
                    $xfer += $output->writeI64($viter1149);
                  }
                }
                $xfer += $output->writeMapEnd();
              }
              $xfer += $output->writeFieldEnd();
            }
            if (defined $self->{e}) {
              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
              $xfer += $self->{e}->write($output);
              $xfer += $output->writeFieldEnd();
            }
            $xfer += $output->writeFieldStop();
            $xfer += $output->writeStructEnd();
            return $xfer;
          }

package BuddyService_getPopularBuddyBanner_args;
use base qw(Class::Accessor);
BuddyService_getPopularBuddyBanner_args->mk_accessors( qw( language country applicationType resourceSpecification ) );

sub new {
            my $classname = shift;
            my $self      = {};
            my $vals      = shift || {};
            $self->{language} = undef;
            $self->{country} = undef;
            $self->{applicationType} = undef;
            $self->{resourceSpecification} = undef;
            if (UNIVERSAL::isa($vals,'HASH')) {
              if (defined $vals->{language}) {
                $self->{language} = $vals->{language};
              }
              if (defined $vals->{country}) {
                $self->{country} = $vals->{country};
              }
              if (defined $vals->{applicationType}) {
                $self->{applicationType} = $vals->{applicationType};
              }
              if (defined $vals->{resourceSpecification}) {
                $self->{resourceSpecification} = $vals->{resourceSpecification};
              }
            }
            return bless ($self, $classname);
}

sub getName {
            return 'BuddyService_getPopularBuddyBanner_args';
          }

sub read {
            my ($self, $input) = @_;
            my $xfer  = 0;
            my $fname;
            my $ftype = 0;
            my $fid   = 0;
            $xfer += $input->readStructBegin(\$fname);
            while (1)
            {
              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
              if ($ftype == Thrift::TType::STOP) {
                last;
              }
              SWITCH: for($fid)
              {
                /^2$/ && do{                if ($ftype == Thrift::TType::STRING) {
                  $xfer += $input->readString(\$self->{language});
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                /^3$/ && do{                if ($ftype == Thrift::TType::STRING) {
                  $xfer += $input->readString(\$self->{country});
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                /^4$/ && do{                if ($ftype == Thrift::TType::I32) {
                  $xfer += $input->readI32(\$self->{applicationType});
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                /^5$/ && do{                if ($ftype == Thrift::TType::STRING) {
                  $xfer += $input->readString(\$self->{resourceSpecification});
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                  $xfer += $input->skip($ftype);
              }
              $xfer += $input->readFieldEnd();
            }
            $xfer += $input->readStructEnd();
            return $xfer;
          }

sub write {
            my ($self, $output) = @_;
            my $xfer   = 0;
            $xfer += $output->writeStructBegin('BuddyService_getPopularBuddyBanner_args');
            if (defined $self->{language}) {
              $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 2);
              $xfer += $output->writeString($self->{language});
              $xfer += $output->writeFieldEnd();
            }
            if (defined $self->{country}) {
              $xfer += $output->writeFieldBegin('country', Thrift::TType::STRING, 3);
              $xfer += $output->writeString($self->{country});
              $xfer += $output->writeFieldEnd();
            }
            if (defined $self->{applicationType}) {
              $xfer += $output->writeFieldBegin('applicationType', Thrift::TType::I32, 4);
              $xfer += $output->writeI32($self->{applicationType});
              $xfer += $output->writeFieldEnd();
            }
            if (defined $self->{resourceSpecification}) {
              $xfer += $output->writeFieldBegin('resourceSpecification', Thrift::TType::STRING, 5);
              $xfer += $output->writeString($self->{resourceSpecification});
              $xfer += $output->writeFieldEnd();
            }
            $xfer += $output->writeFieldStop();
            $xfer += $output->writeStructEnd();
            return $xfer;
          }

package BuddyService_getPopularBuddyBanner_result;
use base qw(Class::Accessor);
BuddyService_getPopularBuddyBanner_result->mk_accessors( qw( success ) );

sub new {
            my $classname = shift;
            my $self      = {};
            my $vals      = shift || {};
            $self->{success} = undef;
            $self->{e} = undef;
            if (UNIVERSAL::isa($vals,'HASH')) {
              if (defined $vals->{success}) {
                $self->{success} = $vals->{success};
              }
              if (defined $vals->{e}) {
                $self->{e} = $vals->{e};
              }
            }
            return bless ($self, $classname);
}

sub getName {
            return 'BuddyService_getPopularBuddyBanner_result';
          }

sub read {
            my ($self, $input) = @_;
            my $xfer  = 0;
            my $fname;
            my $ftype = 0;
            my $fid   = 0;
            $xfer += $input->readStructBegin(\$fname);
            while (1)
            {
              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
              if ($ftype == Thrift::TType::STOP) {
                last;
              }
              SWITCH: for($fid)
              {
                /^0$/ && do{                if ($ftype == Thrift::TType::STRUCT) {
                  $self->{success} = BuddyBanner->new();
                  $xfer += $self->{success}->read($input);
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                /^1$/ && do{                if ($ftype == Thrift::TType::STRUCT) {
                  $self->{e} = TalkException->new();
                  $xfer += $self->{e}->read($input);
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                  $xfer += $input->skip($ftype);
              }
              $xfer += $input->readFieldEnd();
            }
            $xfer += $input->readStructEnd();
            return $xfer;
          }

sub write {
            my ($self, $output) = @_;
            my $xfer   = 0;
            $xfer += $output->writeStructBegin('BuddyService_getPopularBuddyBanner_result');
            if (defined $self->{success}) {
              $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
              $xfer += $self->{success}->write($output);
              $xfer += $output->writeFieldEnd();
            }
            if (defined $self->{e}) {
              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
              $xfer += $self->{e}->write($output);
              $xfer += $output->writeFieldEnd();
            }
            $xfer += $output->writeFieldStop();
            $xfer += $output->writeStructEnd();
            return $xfer;
          }

package BuddyService_getPopularBuddyLists_args;
use base qw(Class::Accessor);
BuddyService_getPopularBuddyLists_args->mk_accessors( qw( language country ) );

sub new {
            my $classname = shift;
            my $self      = {};
            my $vals      = shift || {};
            $self->{language} = undef;
            $self->{country} = undef;
            if (UNIVERSAL::isa($vals,'HASH')) {
              if (defined $vals->{language}) {
                $self->{language} = $vals->{language};
              }
              if (defined $vals->{country}) {
                $self->{country} = $vals->{country};
              }
            }
            return bless ($self, $classname);
}

sub getName {
            return 'BuddyService_getPopularBuddyLists_args';
          }

sub read {
            my ($self, $input) = @_;
            my $xfer  = 0;
            my $fname;
            my $ftype = 0;
            my $fid   = 0;
            $xfer += $input->readStructBegin(\$fname);
            while (1)
            {
              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
              if ($ftype == Thrift::TType::STOP) {
                last;
              }
              SWITCH: for($fid)
              {
                /^2$/ && do{                if ($ftype == Thrift::TType::STRING) {
                  $xfer += $input->readString(\$self->{language});
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                /^3$/ && do{                if ($ftype == Thrift::TType::STRING) {
                  $xfer += $input->readString(\$self->{country});
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                  $xfer += $input->skip($ftype);
              }
              $xfer += $input->readFieldEnd();
            }
            $xfer += $input->readStructEnd();
            return $xfer;
          }

sub write {
            my ($self, $output) = @_;
            my $xfer   = 0;
            $xfer += $output->writeStructBegin('BuddyService_getPopularBuddyLists_args');
            if (defined $self->{language}) {
              $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 2);
              $xfer += $output->writeString($self->{language});
              $xfer += $output->writeFieldEnd();
            }
            if (defined $self->{country}) {
              $xfer += $output->writeFieldBegin('country', Thrift::TType::STRING, 3);
              $xfer += $output->writeString($self->{country});
              $xfer += $output->writeFieldEnd();
            }
            $xfer += $output->writeFieldStop();
            $xfer += $output->writeStructEnd();
            return $xfer;
          }

package BuddyService_getPopularBuddyLists_result;
use base qw(Class::Accessor);
BuddyService_getPopularBuddyLists_result->mk_accessors( qw( success ) );

sub new {
            my $classname = shift;
            my $self      = {};
            my $vals      = shift || {};
            $self->{success} = undef;
            $self->{e} = undef;
            if (UNIVERSAL::isa($vals,'HASH')) {
              if (defined $vals->{success}) {
                $self->{success} = $vals->{success};
              }
              if (defined $vals->{e}) {
                $self->{e} = $vals->{e};
              }
            }
            return bless ($self, $classname);
}

sub getName {
            return 'BuddyService_getPopularBuddyLists_result';
          }

sub read {
            my ($self, $input) = @_;
            my $xfer  = 0;
            my $fname;
            my $ftype = 0;
            my $fid   = 0;
            $xfer += $input->readStructBegin(\$fname);
            while (1)
            {
              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
              if ($ftype == Thrift::TType::STOP) {
                last;
              }
              SWITCH: for($fid)
              {
                /^0$/ && do{                if ($ftype == Thrift::TType::LIST) {
                  {
                    my $_size1150 = 0;
                    $self->{success} = [];
                    my $_etype1153 = 0;
                    $xfer += $input->readListBegin(\$_etype1153, \$_size1150);
                    for (my $_i1154 = 0; $_i1154 < $_size1150; ++$_i1154)
                    {
                      my $elem1155 = undef;
                      $elem1155 = BuddyList->new();
                      $xfer += $elem1155->read($input);
                      push(@{$self->{success}},$elem1155);
                    }
                    $xfer += $input->readListEnd();
                  }
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                /^1$/ && do{                if ($ftype == Thrift::TType::STRUCT) {
                  $self->{e} = TalkException->new();
                  $xfer += $self->{e}->read($input);
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                  $xfer += $input->skip($ftype);
              }
              $xfer += $input->readFieldEnd();
            }
            $xfer += $input->readStructEnd();
            return $xfer;
          }

sub write {
            my ($self, $output) = @_;
            my $xfer   = 0;
            $xfer += $output->writeStructBegin('BuddyService_getPopularBuddyLists_result');
            if (defined $self->{success}) {
              $xfer += $output->writeFieldBegin('success', Thrift::TType::LIST, 0);
              {
                $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{success}}));
                {
                  foreach my $iter1156 (@{$self->{success}}) 
                  {
                    $xfer += ${iter1156}->write($output);
                  }
                }
                $xfer += $output->writeListEnd();
              }
              $xfer += $output->writeFieldEnd();
            }
            if (defined $self->{e}) {
              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
              $xfer += $self->{e}->write($output);
              $xfer += $output->writeFieldEnd();
            }
            $xfer += $output->writeFieldStop();
            $xfer += $output->writeStructEnd();
            return $xfer;
          }

package BuddyService_getPromotedBuddyContacts_args;
use base qw(Class::Accessor);
BuddyService_getPromotedBuddyContacts_args->mk_accessors( qw( language country ) );

sub new {
            my $classname = shift;
            my $self      = {};
            my $vals      = shift || {};
            $self->{language} = undef;
            $self->{country} = undef;
            if (UNIVERSAL::isa($vals,'HASH')) {
              if (defined $vals->{language}) {
                $self->{language} = $vals->{language};
              }
              if (defined $vals->{country}) {
                $self->{country} = $vals->{country};
              }
            }
            return bless ($self, $classname);
}

sub getName {
            return 'BuddyService_getPromotedBuddyContacts_args';
          }

sub read {
            my ($self, $input) = @_;
            my $xfer  = 0;
            my $fname;
            my $ftype = 0;
            my $fid   = 0;
            $xfer += $input->readStructBegin(\$fname);
            while (1)
            {
              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
              if ($ftype == Thrift::TType::STOP) {
                last;
              }
              SWITCH: for($fid)
              {
                /^2$/ && do{                if ($ftype == Thrift::TType::STRING) {
                  $xfer += $input->readString(\$self->{language});
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                /^3$/ && do{                if ($ftype == Thrift::TType::STRING) {
                  $xfer += $input->readString(\$self->{country});
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                  $xfer += $input->skip($ftype);
              }
              $xfer += $input->readFieldEnd();
            }
            $xfer += $input->readStructEnd();
            return $xfer;
          }

sub write {
            my ($self, $output) = @_;
            my $xfer   = 0;
            $xfer += $output->writeStructBegin('BuddyService_getPromotedBuddyContacts_args');
            if (defined $self->{language}) {
              $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 2);
              $xfer += $output->writeString($self->{language});
              $xfer += $output->writeFieldEnd();
            }
            if (defined $self->{country}) {
              $xfer += $output->writeFieldBegin('country', Thrift::TType::STRING, 3);
              $xfer += $output->writeString($self->{country});
              $xfer += $output->writeFieldEnd();
            }
            $xfer += $output->writeFieldStop();
            $xfer += $output->writeStructEnd();
            return $xfer;
          }

package BuddyService_getPromotedBuddyContacts_result;
use base qw(Class::Accessor);
BuddyService_getPromotedBuddyContacts_result->mk_accessors( qw( success ) );

sub new {
            my $classname = shift;
            my $self      = {};
            my $vals      = shift || {};
            $self->{success} = undef;
            $self->{e} = undef;
            if (UNIVERSAL::isa($vals,'HASH')) {
              if (defined $vals->{success}) {
                $self->{success} = $vals->{success};
              }
              if (defined $vals->{e}) {
                $self->{e} = $vals->{e};
              }
            }
            return bless ($self, $classname);
}

sub getName {
            return 'BuddyService_getPromotedBuddyContacts_result';
          }

sub read {
            my ($self, $input) = @_;
            my $xfer  = 0;
            my $fname;
            my $ftype = 0;
            my $fid   = 0;
            $xfer += $input->readStructBegin(\$fname);
            while (1)
            {
              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
              if ($ftype == Thrift::TType::STOP) {
                last;
              }
              SWITCH: for($fid)
              {
                /^0$/ && do{                if ($ftype == Thrift::TType::LIST) {
                  {
                    my $_size1157 = 0;
                    $self->{success} = [];
                    my $_etype1160 = 0;
                    $xfer += $input->readListBegin(\$_etype1160, \$_size1157);
                    for (my $_i1161 = 0; $_i1161 < $_size1157; ++$_i1161)
                    {
                      my $elem1162 = undef;
                      $elem1162 = Contact->new();
                      $xfer += $elem1162->read($input);
                      push(@{$self->{success}},$elem1162);
                    }
                    $xfer += $input->readListEnd();
                  }
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                /^1$/ && do{                if ($ftype == Thrift::TType::STRUCT) {
                  $self->{e} = TalkException->new();
                  $xfer += $self->{e}->read($input);
                } else {
                  $xfer += $input->skip($ftype);
                }
                last; };
                  $xfer += $input->skip($ftype);
              }
              $xfer += $input->readFieldEnd();
            }
            $xfer += $input->readStructEnd();
            return $xfer;
          }

sub write {
            my ($self, $output) = @_;
            my $xfer   = 0;
            $xfer += $output->writeStructBegin('BuddyService_getPromotedBuddyContacts_result');
            if (defined $self->{success}) {
              $xfer += $output->writeFieldBegin('success', Thrift::TType::LIST, 0);
              {
                $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{success}}));
                {
                  foreach my $iter1163 (@{$self->{success}}) 
                  {
                    $xfer += ${iter1163}->write($output);
                  }
                }
                $xfer += $output->writeListEnd();
              }
              $xfer += $output->writeFieldEnd();
            }
            if (defined $self->{e}) {
              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
              $xfer += $self->{e}->write($output);
              $xfer += $output->writeFieldEnd();
            }
            $xfer += $output->writeFieldStop();
            $xfer += $output->writeStructEnd();
            return $xfer;
          }

package BuddyServiceIf;

use strict;


sub findBuddyContactsByQuery{
  my $self = shift;
  my $language = shift;
  my $country = shift;
  my $query = shift;
  my $fromIndex = shift;
  my $count = shift;
  my $requestSource = shift;

  die 'implement interface';
}

sub getBuddyContacts{
  my $self = shift;
  my $language = shift;
  my $country = shift;
  my $classification = shift;
  my $fromIndex = shift;
  my $count = shift;

  die 'implement interface';
}

sub getBuddyDetail{
  my $self = shift;
  my $buddyMid = shift;

  die 'implement interface';
}

sub getBuddyOnAir{
  my $self = shift;
  my $buddyMid = shift;

  die 'implement interface';
}

sub getCountriesHavingBuddy{
  my $self = shift;

  die 'implement interface';
}

sub getNewlyReleasedBuddyIds{
  my $self = shift;
  my $country = shift;

  die 'implement interface';
}

sub getPopularBuddyBanner{
  my $self = shift;
  my $language = shift;
  my $country = shift;
  my $applicationType = shift;
  my $resourceSpecification = shift;

  die 'implement interface';
}

sub getPopularBuddyLists{
  my $self = shift;
  my $language = shift;
  my $country = shift;

  die 'implement interface';
}

sub getPromotedBuddyContacts{
  my $self = shift;
  my $language = shift;
  my $country = shift;

  die 'implement interface';
}

package BuddyServiceRest;

use strict;


sub new {
            my ($classname, $impl) = @_;
            my $self     ={ impl => $impl };

            return bless($self,$classname);
}

sub findBuddyContactsByQuery{
            my ($self, $request) = @_;

            my $language = ($request->{'language'}) ? $request->{'language'} : undef;
            my $country = ($request->{'country'}) ? $request->{'country'} : undef;
            my $query = ($request->{'query'}) ? $request->{'query'} : undef;
            my $fromIndex = ($request->{'fromIndex'}) ? $request->{'fromIndex'} : undef;
            my $count = ($request->{'count'}) ? $request->{'count'} : undef;
            my $requestSource = ($request->{'requestSource'}) ? $request->{'requestSource'} : undef;
            return $self->{impl}->findBuddyContactsByQuery($language, $country, $query, $fromIndex, $count, $requestSource);
          }

sub getBuddyContacts{
            my ($self, $request) = @_;

            my $language = ($request->{'language'}) ? $request->{'language'} : undef;
            my $country = ($request->{'country'}) ? $request->{'country'} : undef;
            my $classification = ($request->{'classification'}) ? $request->{'classification'} : undef;
            my $fromIndex = ($request->{'fromIndex'}) ? $request->{'fromIndex'} : undef;
            my $count = ($request->{'count'}) ? $request->{'count'} : undef;
            return $self->{impl}->getBuddyContacts($language, $country, $classification, $fromIndex, $count);
          }

sub getBuddyDetail{
            my ($self, $request) = @_;

            my $buddyMid = ($request->{'buddyMid'}) ? $request->{'buddyMid'} : undef;
            return $self->{impl}->getBuddyDetail($buddyMid);
          }

sub getBuddyOnAir{
            my ($self, $request) = @_;

            my $buddyMid = ($request->{'buddyMid'}) ? $request->{'buddyMid'} : undef;
            return $self->{impl}->getBuddyOnAir($buddyMid);
          }

sub getCountriesHavingBuddy{
            my ($self, $request) = @_;

            return $self->{impl}->getCountriesHavingBuddy();
          }

sub getNewlyReleasedBuddyIds{
            my ($self, $request) = @_;

            my $country = ($request->{'country'}) ? $request->{'country'} : undef;
            return $self->{impl}->getNewlyReleasedBuddyIds($country);
          }

sub getPopularBuddyBanner{
            my ($self, $request) = @_;

            my $language = ($request->{'language'}) ? $request->{'language'} : undef;
            my $country = ($request->{'country'}) ? $request->{'country'} : undef;
            my $applicationType = ($request->{'applicationType'}) ? $request->{'applicationType'} : undef;
            my $resourceSpecification = ($request->{'resourceSpecification'}) ? $request->{'resourceSpecification'} : undef;
            return $self->{impl}->getPopularBuddyBanner($language, $country, $applicationType, $resourceSpecification);
          }

sub getPopularBuddyLists{
            my ($self, $request) = @_;

            my $language = ($request->{'language'}) ? $request->{'language'} : undef;
            my $country = ($request->{'country'}) ? $request->{'country'} : undef;
            return $self->{impl}->getPopularBuddyLists($language, $country);
          }

sub getPromotedBuddyContacts{
            my ($self, $request) = @_;

            my $language = ($request->{'language'}) ? $request->{'language'} : undef;
            my $country = ($request->{'country'}) ? $request->{'country'} : undef;
            return $self->{impl}->getPromotedBuddyContacts($language, $country);
          }

package BuddyServiceClient;


use base qw(BuddyServiceIf);
sub new {
            my ($classname, $input, $output) = @_;
            my $self      = {};
            $self->{input}  = $input;
            $self->{output} = defined $output ? $output : $input;
            $self->{seqid}  = 0;
            return bless($self,$classname);
}

sub findBuddyContactsByQuery{
  my $self = shift;
  my $language = shift;
  my $country = shift;
  my $query = shift;
  my $fromIndex = shift;
  my $count = shift;
  my $requestSource = shift;

                        $self->send_findBuddyContactsByQuery($language, $country, $query, $fromIndex, $count, $requestSource);
            return $self->recv_findBuddyContactsByQuery();
}

sub send_findBuddyContactsByQuery{
  my $self = shift;
  my $language = shift;
  my $country = shift;
  my $query = shift;
  my $fromIndex = shift;
  my $count = shift;
  my $requestSource = shift;

            $self->{output}->writeMessageBegin('findBuddyContactsByQuery', Thrift::TMessageType::CALL, $self->{seqid});
            my $args = BuddyService_findBuddyContactsByQuery_args->new();
            $args->{language} = $language;
            $args->{country} = $country;
            $args->{query} = $query;
            $args->{fromIndex} = $fromIndex;
            $args->{count} = $count;
            $args->{requestSource} = $requestSource;
            $args->write($self->{output});
            $self->{output}->writeMessageEnd();
            $self->{output}->getTransport()->flush();
}

sub recv_findBuddyContactsByQuery{
  my $self = shift;

            my $rseqid = 0;
            my $fname;
            my $mtype = 0;

            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
            if ($mtype == Thrift::TMessageType::EXCEPTION) {
              my $x = Thrift::TApplicationException->new();
              $x->read($self->{input});
              $self->{input}->readMessageEnd();
              die $x;
            }
            my $result = BuddyService_findBuddyContactsByQuery_result->new();
            $result->read($self->{input});
            $self->{input}->readMessageEnd();

            if (defined $result->{success} ) {
              return $result->{success};
            }
            if (defined $result->{e}) {
              die $result->{e};
            }
            die "findBuddyContactsByQuery failed: unknown result";
}
sub getBuddyContacts{
  my $self = shift;
  my $language = shift;
  my $country = shift;
  my $classification = shift;
  my $fromIndex = shift;
  my $count = shift;

                        $self->send_getBuddyContacts($language, $country, $classification, $fromIndex, $count);
            return $self->recv_getBuddyContacts();
}

sub send_getBuddyContacts{
  my $self = shift;
  my $language = shift;
  my $country = shift;
  my $classification = shift;
  my $fromIndex = shift;
  my $count = shift;

            $self->{output}->writeMessageBegin('getBuddyContacts', Thrift::TMessageType::CALL, $self->{seqid});
            my $args = BuddyService_getBuddyContacts_args->new();
            $args->{language} = $language;
            $args->{country} = $country;
            $args->{classification} = $classification;
            $args->{fromIndex} = $fromIndex;
            $args->{count} = $count;
            $args->write($self->{output});
            $self->{output}->writeMessageEnd();
            $self->{output}->getTransport()->flush();
}

sub recv_getBuddyContacts{
  my $self = shift;

            my $rseqid = 0;
            my $fname;
            my $mtype = 0;

            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
            if ($mtype == Thrift::TMessageType::EXCEPTION) {
              my $x = Thrift::TApplicationException->new();
              $x->read($self->{input});
              $self->{input}->readMessageEnd();
              die $x;
            }
            my $result = BuddyService_getBuddyContacts_result->new();
            $result->read($self->{input});
            $self->{input}->readMessageEnd();

            if (defined $result->{success} ) {
              return $result->{success};
            }
            if (defined $result->{e}) {
              die $result->{e};
            }
            die "getBuddyContacts failed: unknown result";
}
sub getBuddyDetail{
  my $self = shift;
  my $buddyMid = shift;

                        $self->send_getBuddyDetail($buddyMid);
            return $self->recv_getBuddyDetail();
}

sub send_getBuddyDetail{
  my $self = shift;
  my $buddyMid = shift;

            $self->{output}->writeMessageBegin('getBuddyDetail', Thrift::TMessageType::CALL, $self->{seqid});
            my $args = BuddyService_getBuddyDetail_args->new();
            $args->{buddyMid} = $buddyMid;
            $args->write($self->{output});
            $self->{output}->writeMessageEnd();
            $self->{output}->getTransport()->flush();
}

sub recv_getBuddyDetail{
  my $self = shift;

            my $rseqid = 0;
            my $fname;
            my $mtype = 0;

            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
            if ($mtype == Thrift::TMessageType::EXCEPTION) {
              my $x = Thrift::TApplicationException->new();
              $x->read($self->{input});
              $self->{input}->readMessageEnd();
              die $x;
            }
            my $result = BuddyService_getBuddyDetail_result->new();
            $result->read($self->{input});
            $self->{input}->readMessageEnd();

            if (defined $result->{success} ) {
              return $result->{success};
            }
            if (defined $result->{e}) {
              die $result->{e};
            }
            die "getBuddyDetail failed: unknown result";
}
sub getBuddyOnAir{
  my $self = shift;
  my $buddyMid = shift;

                        $self->send_getBuddyOnAir($buddyMid);
            return $self->recv_getBuddyOnAir();
}

sub send_getBuddyOnAir{
  my $self = shift;
  my $buddyMid = shift;

            $self->{output}->writeMessageBegin('getBuddyOnAir', Thrift::TMessageType::CALL, $self->{seqid});
            my $args = BuddyService_getBuddyOnAir_args->new();
            $args->{buddyMid} = $buddyMid;
            $args->write($self->{output});
            $self->{output}->writeMessageEnd();
            $self->{output}->getTransport()->flush();
}

sub recv_getBuddyOnAir{
  my $self = shift;

            my $rseqid = 0;
            my $fname;
            my $mtype = 0;

            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
            if ($mtype == Thrift::TMessageType::EXCEPTION) {
              my $x = Thrift::TApplicationException->new();
              $x->read($self->{input});
              $self->{input}->readMessageEnd();
              die $x;
            }
            my $result = BuddyService_getBuddyOnAir_result->new();
            $result->read($self->{input});
            $self->{input}->readMessageEnd();

            if (defined $result->{success} ) {
              return $result->{success};
            }
            if (defined $result->{e}) {
              die $result->{e};
            }
            die "getBuddyOnAir failed: unknown result";
}
sub getCountriesHavingBuddy{
  my $self = shift;

                        $self->send_getCountriesHavingBuddy();
            return $self->recv_getCountriesHavingBuddy();
}

sub send_getCountriesHavingBuddy{
  my $self = shift;

            $self->{output}->writeMessageBegin('getCountriesHavingBuddy', Thrift::TMessageType::CALL, $self->{seqid});
            my $args = BuddyService_getCountriesHavingBuddy_args->new();
            $args->write($self->{output});
            $self->{output}->writeMessageEnd();
            $self->{output}->getTransport()->flush();
}

sub recv_getCountriesHavingBuddy{
  my $self = shift;

            my $rseqid = 0;
            my $fname;
            my $mtype = 0;

            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
            if ($mtype == Thrift::TMessageType::EXCEPTION) {
              my $x = Thrift::TApplicationException->new();
              $x->read($self->{input});
              $self->{input}->readMessageEnd();
              die $x;
            }
            my $result = BuddyService_getCountriesHavingBuddy_result->new();
            $result->read($self->{input});
            $self->{input}->readMessageEnd();

            if (defined $result->{success} ) {
              return $result->{success};
            }
            if (defined $result->{e}) {
              die $result->{e};
            }
            die "getCountriesHavingBuddy failed: unknown result";
}
sub getNewlyReleasedBuddyIds{
  my $self = shift;
  my $country = shift;

                        $self->send_getNewlyReleasedBuddyIds($country);
            return $self->recv_getNewlyReleasedBuddyIds();
}

sub send_getNewlyReleasedBuddyIds{
  my $self = shift;
  my $country = shift;

            $self->{output}->writeMessageBegin('getNewlyReleasedBuddyIds', Thrift::TMessageType::CALL, $self->{seqid});
            my $args = BuddyService_getNewlyReleasedBuddyIds_args->new();
            $args->{country} = $country;
            $args->write($self->{output});
            $self->{output}->writeMessageEnd();
            $self->{output}->getTransport()->flush();
}

sub recv_getNewlyReleasedBuddyIds{
  my $self = shift;

            my $rseqid = 0;
            my $fname;
            my $mtype = 0;

            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
            if ($mtype == Thrift::TMessageType::EXCEPTION) {
              my $x = Thrift::TApplicationException->new();
              $x->read($self->{input});
              $self->{input}->readMessageEnd();
              die $x;
            }
            my $result = BuddyService_getNewlyReleasedBuddyIds_result->new();
            $result->read($self->{input});
            $self->{input}->readMessageEnd();

            if (defined $result->{success} ) {
              return $result->{success};
            }
            if (defined $result->{e}) {
              die $result->{e};
            }
            die "getNewlyReleasedBuddyIds failed: unknown result";
}
sub getPopularBuddyBanner{
  my $self = shift;
  my $language = shift;
  my $country = shift;
  my $applicationType = shift;
  my $resourceSpecification = shift;

                        $self->send_getPopularBuddyBanner($language, $country, $applicationType, $resourceSpecification);
            return $self->recv_getPopularBuddyBanner();
}

sub send_getPopularBuddyBanner{
  my $self = shift;
  my $language = shift;
  my $country = shift;
  my $applicationType = shift;
  my $resourceSpecification = shift;

            $self->{output}->writeMessageBegin('getPopularBuddyBanner', Thrift::TMessageType::CALL, $self->{seqid});
            my $args = BuddyService_getPopularBuddyBanner_args->new();
            $args->{language} = $language;
            $args->{country} = $country;
            $args->{applicationType} = $applicationType;
            $args->{resourceSpecification} = $resourceSpecification;
            $args->write($self->{output});
            $self->{output}->writeMessageEnd();
            $self->{output}->getTransport()->flush();
}

sub recv_getPopularBuddyBanner{
  my $self = shift;

            my $rseqid = 0;
            my $fname;
            my $mtype = 0;

            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
            if ($mtype == Thrift::TMessageType::EXCEPTION) {
              my $x = Thrift::TApplicationException->new();
              $x->read($self->{input});
              $self->{input}->readMessageEnd();
              die $x;
            }
            my $result = BuddyService_getPopularBuddyBanner_result->new();
            $result->read($self->{input});
            $self->{input}->readMessageEnd();

            if (defined $result->{success} ) {
              return $result->{success};
            }
            if (defined $result->{e}) {
              die $result->{e};
            }
            die "getPopularBuddyBanner failed: unknown result";
}
sub getPopularBuddyLists{
  my $self = shift;
  my $language = shift;
  my $country = shift;

                        $self->send_getPopularBuddyLists($language, $country);
            return $self->recv_getPopularBuddyLists();
}

sub send_getPopularBuddyLists{
  my $self = shift;
  my $language = shift;
  my $country = shift;

            $self->{output}->writeMessageBegin('getPopularBuddyLists', Thrift::TMessageType::CALL, $self->{seqid});
            my $args = BuddyService_getPopularBuddyLists_args->new();
            $args->{language} = $language;
            $args->{country} = $country;
            $args->write($self->{output});
            $self->{output}->writeMessageEnd();
            $self->{output}->getTransport()->flush();
}

sub recv_getPopularBuddyLists{
  my $self = shift;

            my $rseqid = 0;
            my $fname;
            my $mtype = 0;

            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
            if ($mtype == Thrift::TMessageType::EXCEPTION) {
              my $x = Thrift::TApplicationException->new();
              $x->read($self->{input});
              $self->{input}->readMessageEnd();
              die $x;
            }
            my $result = BuddyService_getPopularBuddyLists_result->new();
            $result->read($self->{input});
            $self->{input}->readMessageEnd();

            if (defined $result->{success} ) {
              return $result->{success};
            }
            if (defined $result->{e}) {
              die $result->{e};
            }
            die "getPopularBuddyLists failed: unknown result";
}
sub getPromotedBuddyContacts{
  my $self = shift;
  my $language = shift;
  my $country = shift;

                        $self->send_getPromotedBuddyContacts($language, $country);
            return $self->recv_getPromotedBuddyContacts();
}

sub send_getPromotedBuddyContacts{
  my $self = shift;
  my $language = shift;
  my $country = shift;

            $self->{output}->writeMessageBegin('getPromotedBuddyContacts', Thrift::TMessageType::CALL, $self->{seqid});
            my $args = BuddyService_getPromotedBuddyContacts_args->new();
            $args->{language} = $language;
            $args->{country} = $country;
            $args->write($self->{output});
            $self->{output}->writeMessageEnd();
            $self->{output}->getTransport()->flush();
}

sub recv_getPromotedBuddyContacts{
  my $self = shift;

            my $rseqid = 0;
            my $fname;
            my $mtype = 0;

            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
            if ($mtype == Thrift::TMessageType::EXCEPTION) {
              my $x = Thrift::TApplicationException->new();
              $x->read($self->{input});
              $self->{input}->readMessageEnd();
              die $x;
            }
            my $result = BuddyService_getPromotedBuddyContacts_result->new();
            $result->read($self->{input});
            $self->{input}->readMessageEnd();

            if (defined $result->{success} ) {
              return $result->{success};
            }
            if (defined $result->{e}) {
              die $result->{e};
            }
            die "getPromotedBuddyContacts failed: unknown result";
}
package BuddyServiceProcessor;

use strict;


sub new {
              my ($classname, $handler) = @_;
              my $self      = {};
              $self->{handler} = $handler;
              return bless ($self, $classname);
}

sub process {
              my ($self, $input, $output) = @_;
              my $rseqid = 0;
              my $fname  = undef;
              my $mtype  = 0;

              $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
              my $methodname = 'process_'.$fname;
              if (!$self->can($methodname)) {
                $input->skip(Thrift::TType::STRUCT);
                $input->readMessageEnd();
                my $x = Thrift::TApplicationException->new('Function '.$fname.' not implemented.', Thrift::TApplicationException::UNKNOWN_METHOD);
                $output->writeMessageBegin($fname, Thrift::TMessageType::EXCEPTION, $rseqid);
                $x->write($output);
                $output->writeMessageEnd();
                $output->getTransport()->flush();
                return;
              }
              $self->$methodname($rseqid, $input, $output);
              return 1;
}

sub process_findBuddyContactsByQuery {
              my ($self, $seqid, $input, $output) = @_;
              my $args = BuddyService_findBuddyContactsByQuery_args->new();
              $args->read($input);
              $input->readMessageEnd();
              my $result = BuddyService_findBuddyContactsByQuery_result->new();
              eval {
                $result->{success} = $self->{handler}->findBuddyContactsByQuery($args->language, $args->country, $args->query, $args->fromIndex, $args->count, $args->requestSource);
              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                $result->{e} = $@;
                $@ = undef;
              }
              if ($@) {
                $@ =~ s/^\s+|\s+$//g;
                my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                $output->writeMessageBegin('findBuddyContactsByQuery', Thrift::TMessageType::EXCEPTION, $seqid);
                $err->write($output);
                $output->writeMessageEnd();
                $output->getTransport()->flush();
                $@ = undef;
                return;
              }
              $output->writeMessageBegin('findBuddyContactsByQuery', Thrift::TMessageType::REPLY, $seqid);
              $result->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
}

sub process_getBuddyContacts {
              my ($self, $seqid, $input, $output) = @_;
              my $args = BuddyService_getBuddyContacts_args->new();
              $args->read($input);
              $input->readMessageEnd();
              my $result = BuddyService_getBuddyContacts_result->new();
              eval {
                $result->{success} = $self->{handler}->getBuddyContacts($args->language, $args->country, $args->classification, $args->fromIndex, $args->count);
              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                $result->{e} = $@;
                $@ = undef;
              }
              if ($@) {
                $@ =~ s/^\s+|\s+$//g;
                my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                $output->writeMessageBegin('getBuddyContacts', Thrift::TMessageType::EXCEPTION, $seqid);
                $err->write($output);
                $output->writeMessageEnd();
                $output->getTransport()->flush();
                $@ = undef;
                return;
              }
              $output->writeMessageBegin('getBuddyContacts', Thrift::TMessageType::REPLY, $seqid);
              $result->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
}

sub process_getBuddyDetail {
              my ($self, $seqid, $input, $output) = @_;
              my $args = BuddyService_getBuddyDetail_args->new();
              $args->read($input);
              $input->readMessageEnd();
              my $result = BuddyService_getBuddyDetail_result->new();
              eval {
                $result->{success} = $self->{handler}->getBuddyDetail($args->buddyMid);
              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                $result->{e} = $@;
                $@ = undef;
              }
              if ($@) {
                $@ =~ s/^\s+|\s+$//g;
                my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                $output->writeMessageBegin('getBuddyDetail', Thrift::TMessageType::EXCEPTION, $seqid);
                $err->write($output);
                $output->writeMessageEnd();
                $output->getTransport()->flush();
                $@ = undef;
                return;
              }
              $output->writeMessageBegin('getBuddyDetail', Thrift::TMessageType::REPLY, $seqid);
              $result->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
}

sub process_getBuddyOnAir {
              my ($self, $seqid, $input, $output) = @_;
              my $args = BuddyService_getBuddyOnAir_args->new();
              $args->read($input);
              $input->readMessageEnd();
              my $result = BuddyService_getBuddyOnAir_result->new();
              eval {
                $result->{success} = $self->{handler}->getBuddyOnAir($args->buddyMid);
              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                $result->{e} = $@;
                $@ = undef;
              }
              if ($@) {
                $@ =~ s/^\s+|\s+$//g;
                my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                $output->writeMessageBegin('getBuddyOnAir', Thrift::TMessageType::EXCEPTION, $seqid);
                $err->write($output);
                $output->writeMessageEnd();
                $output->getTransport()->flush();
                $@ = undef;
                return;
              }
              $output->writeMessageBegin('getBuddyOnAir', Thrift::TMessageType::REPLY, $seqid);
              $result->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
}

sub process_getCountriesHavingBuddy {
              my ($self, $seqid, $input, $output) = @_;
              my $args = BuddyService_getCountriesHavingBuddy_args->new();
              $args->read($input);
              $input->readMessageEnd();
              my $result = BuddyService_getCountriesHavingBuddy_result->new();
              eval {
                $result->{success} = $self->{handler}->getCountriesHavingBuddy();
              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                $result->{e} = $@;
                $@ = undef;
              }
              if ($@) {
                $@ =~ s/^\s+|\s+$//g;
                my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                $output->writeMessageBegin('getCountriesHavingBuddy', Thrift::TMessageType::EXCEPTION, $seqid);
                $err->write($output);
                $output->writeMessageEnd();
                $output->getTransport()->flush();
                $@ = undef;
                return;
              }
              $output->writeMessageBegin('getCountriesHavingBuddy', Thrift::TMessageType::REPLY, $seqid);
              $result->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
}

sub process_getNewlyReleasedBuddyIds {
              my ($self, $seqid, $input, $output) = @_;
              my $args = BuddyService_getNewlyReleasedBuddyIds_args->new();
              $args->read($input);
              $input->readMessageEnd();
              my $result = BuddyService_getNewlyReleasedBuddyIds_result->new();
              eval {
                $result->{success} = $self->{handler}->getNewlyReleasedBuddyIds($args->country);
              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                $result->{e} = $@;
                $@ = undef;
              }
              if ($@) {
                $@ =~ s/^\s+|\s+$//g;
                my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                $output->writeMessageBegin('getNewlyReleasedBuddyIds', Thrift::TMessageType::EXCEPTION, $seqid);
                $err->write($output);
                $output->writeMessageEnd();
                $output->getTransport()->flush();
                $@ = undef;
                return;
              }
              $output->writeMessageBegin('getNewlyReleasedBuddyIds', Thrift::TMessageType::REPLY, $seqid);
              $result->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
}

sub process_getPopularBuddyBanner {
              my ($self, $seqid, $input, $output) = @_;
              my $args = BuddyService_getPopularBuddyBanner_args->new();
              $args->read($input);
              $input->readMessageEnd();
              my $result = BuddyService_getPopularBuddyBanner_result->new();
              eval {
                $result->{success} = $self->{handler}->getPopularBuddyBanner($args->language, $args->country, $args->applicationType, $args->resourceSpecification);
              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                $result->{e} = $@;
                $@ = undef;
              }
              if ($@) {
                $@ =~ s/^\s+|\s+$//g;
                my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                $output->writeMessageBegin('getPopularBuddyBanner', Thrift::TMessageType::EXCEPTION, $seqid);
                $err->write($output);
                $output->writeMessageEnd();
                $output->getTransport()->flush();
                $@ = undef;
                return;
              }
              $output->writeMessageBegin('getPopularBuddyBanner', Thrift::TMessageType::REPLY, $seqid);
              $result->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
}

sub process_getPopularBuddyLists {
              my ($self, $seqid, $input, $output) = @_;
              my $args = BuddyService_getPopularBuddyLists_args->new();
              $args->read($input);
              $input->readMessageEnd();
              my $result = BuddyService_getPopularBuddyLists_result->new();
              eval {
                $result->{success} = $self->{handler}->getPopularBuddyLists($args->language, $args->country);
              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                $result->{e} = $@;
                $@ = undef;
              }
              if ($@) {
                $@ =~ s/^\s+|\s+$//g;
                my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                $output->writeMessageBegin('getPopularBuddyLists', Thrift::TMessageType::EXCEPTION, $seqid);
                $err->write($output);
                $output->writeMessageEnd();
                $output->getTransport()->flush();
                $@ = undef;
                return;
              }
              $output->writeMessageBegin('getPopularBuddyLists', Thrift::TMessageType::REPLY, $seqid);
              $result->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
}

sub process_getPromotedBuddyContacts {
              my ($self, $seqid, $input, $output) = @_;
              my $args = BuddyService_getPromotedBuddyContacts_args->new();
              $args->read($input);
              $input->readMessageEnd();
              my $result = BuddyService_getPromotedBuddyContacts_result->new();
              eval {
                $result->{success} = $self->{handler}->getPromotedBuddyContacts($args->language, $args->country);
              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                $result->{e} = $@;
                $@ = undef;
              }
              if ($@) {
                $@ =~ s/^\s+|\s+$//g;
                my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                $output->writeMessageBegin('getPromotedBuddyContacts', Thrift::TMessageType::EXCEPTION, $seqid);
                $err->write($output);
                $output->writeMessageEnd();
                $output->getTransport()->flush();
                $@ = undef;
                return;
              }
              $output->writeMessageBegin('getPromotedBuddyContacts', Thrift::TMessageType::REPLY, $seqid);
              $result->write($output);
              $output->writeMessageEnd();
              $output->getTransport()->flush();
}

1;
