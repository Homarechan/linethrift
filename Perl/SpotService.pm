#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
use 5.10.0;
use strict;
use warnings;
use Thrift::Exception;
use Thrift::MessageType;
use Thrift::Type;

use Types;


# HELPER FUNCTIONS AND STRUCTURES

package SpotService_lookupByPhoneNumber_args;
use base qw(Class::Accessor);
SpotService_lookupByPhoneNumber_args->mk_accessors( qw( countryAreaCode phoneNumber ) );

sub new {
    my $classname = shift;
    my $self      = {};
    my $vals      = shift || {};
    $self->{countryAreaCode} = undef;
    $self->{phoneNumber} = undef;
    if (UNIVERSAL::isa($vals,'HASH')) {
      if (defined $vals->{countryAreaCode}) {
        $self->{countryAreaCode} = $vals->{countryAreaCode};
      }
      if (defined $vals->{phoneNumber}) {
        $self->{phoneNumber} = $vals->{phoneNumber};
      }
    }
    return bless ($self, $classname);
}

sub getName {
    return 'SpotService_lookupByPhoneNumber_args';
  }

sub read {
    my ($self, $input) = @_;
    my $xfer  = 0;
    my $fname;
    my $ftype = 0;
    my $fid   = 0;
    $xfer += $input->readStructBegin(\$fname);
    while (1)
    {
      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
      if ($ftype == Thrift::TType::STOP) {
        last;
      }
      SWITCH: for($fid)
      {
        /^2$/ && do{        if ($ftype == Thrift::TType::STRING) {
          $xfer += $input->readString(\$self->{countryAreaCode});
        } else {
          $xfer += $input->skip($ftype);
        }
        last; };
        /^3$/ && do{        if ($ftype == Thrift::TType::STRING) {
          $xfer += $input->readString(\$self->{phoneNumber});
        } else {
          $xfer += $input->skip($ftype);
        }
        last; };
          $xfer += $input->skip($ftype);
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

sub write {
    my ($self, $output) = @_;
    my $xfer   = 0;
    $xfer += $output->writeStructBegin('SpotService_lookupByPhoneNumber_args');
    if (defined $self->{countryAreaCode}) {
      $xfer += $output->writeFieldBegin('countryAreaCode', Thrift::TType::STRING, 2);
      $xfer += $output->writeString($self->{countryAreaCode});
      $xfer += $output->writeFieldEnd();
    }
    if (defined $self->{phoneNumber}) {
      $xfer += $output->writeFieldBegin('phoneNumber', Thrift::TType::STRING, 3);
      $xfer += $output->writeString($self->{phoneNumber});
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

package SpotService_lookupByPhoneNumber_result;
use base qw(Class::Accessor);
SpotService_lookupByPhoneNumber_result->mk_accessors( qw( success ) );

sub new {
    my $classname = shift;
    my $self      = {};
    my $vals      = shift || {};
    $self->{success} = undef;
    $self->{e} = undef;
    if (UNIVERSAL::isa($vals,'HASH')) {
      if (defined $vals->{success}) {
        $self->{success} = $vals->{success};
      }
      if (defined $vals->{e}) {
        $self->{e} = $vals->{e};
      }
    }
    return bless ($self, $classname);
}

sub getName {
    return 'SpotService_lookupByPhoneNumber_result';
  }

sub read {
    my ($self, $input) = @_;
    my $xfer  = 0;
    my $fname;
    my $ftype = 0;
    my $fid   = 0;
    $xfer += $input->readStructBegin(\$fname);
    while (1)
    {
      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
      if ($ftype == Thrift::TType::STOP) {
        last;
      }
      SWITCH: for($fid)
      {
        /^0$/ && do{        if ($ftype == Thrift::TType::STRUCT) {
          $self->{success} = SpotPhoneNumberResponse->new();
          $xfer += $self->{success}->read($input);
        } else {
          $xfer += $input->skip($ftype);
        }
        last; };
        /^1$/ && do{        if ($ftype == Thrift::TType::STRUCT) {
          $self->{e} = TalkException->new();
          $xfer += $self->{e}->read($input);
        } else {
          $xfer += $input->skip($ftype);
        }
        last; };
          $xfer += $input->skip($ftype);
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

sub write {
    my ($self, $output) = @_;
    my $xfer   = 0;
    $xfer += $output->writeStructBegin('SpotService_lookupByPhoneNumber_result');
    if (defined $self->{success}) {
      $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
      $xfer += $self->{success}->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if (defined $self->{e}) {
      $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
      $xfer += $self->{e}->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

package SpotService_lookupNearby_args;
use base qw(Class::Accessor);
SpotService_lookupNearby_args->mk_accessors( qw( location category query countryAreaCode ) );

sub new {
    my $classname = shift;
    my $self      = {};
    my $vals      = shift || {};
    $self->{location} = undef;
    $self->{category} = undef;
    $self->{query} = undef;
    $self->{countryAreaCode} = undef;
    if (UNIVERSAL::isa($vals,'HASH')) {
      if (defined $vals->{location}) {
        $self->{location} = $vals->{location};
      }
      if (defined $vals->{category}) {
        $self->{category} = $vals->{category};
      }
      if (defined $vals->{query}) {
        $self->{query} = $vals->{query};
      }
      if (defined $vals->{countryAreaCode}) {
        $self->{countryAreaCode} = $vals->{countryAreaCode};
      }
    }
    return bless ($self, $classname);
}

sub getName {
    return 'SpotService_lookupNearby_args';
  }

sub read {
    my ($self, $input) = @_;
    my $xfer  = 0;
    my $fname;
    my $ftype = 0;
    my $fid   = 0;
    $xfer += $input->readStructBegin(\$fname);
    while (1)
    {
      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
      if ($ftype == Thrift::TType::STOP) {
        last;
      }
      SWITCH: for($fid)
      {
        /^2$/ && do{        if ($ftype == Thrift::TType::STRUCT) {
          $self->{location} = Location->new();
          $xfer += $self->{location}->read($input);
        } else {
          $xfer += $input->skip($ftype);
        }
        last; };
        /^3$/ && do{        if ($ftype == Thrift::TType::I32) {
          $xfer += $input->readI32(\$self->{category});
        } else {
          $xfer += $input->skip($ftype);
        }
        last; };
        /^4$/ && do{        if ($ftype == Thrift::TType::STRING) {
          $xfer += $input->readString(\$self->{query});
        } else {
          $xfer += $input->skip($ftype);
        }
        last; };
        /^5$/ && do{        if ($ftype == Thrift::TType::STRING) {
          $xfer += $input->readString(\$self->{countryAreaCode});
        } else {
          $xfer += $input->skip($ftype);
        }
        last; };
          $xfer += $input->skip($ftype);
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

sub write {
    my ($self, $output) = @_;
    my $xfer   = 0;
    $xfer += $output->writeStructBegin('SpotService_lookupNearby_args');
    if (defined $self->{location}) {
      $xfer += $output->writeFieldBegin('location', Thrift::TType::STRUCT, 2);
      $xfer += $self->{location}->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if (defined $self->{category}) {
      $xfer += $output->writeFieldBegin('category', Thrift::TType::I32, 3);
      $xfer += $output->writeI32($self->{category});
      $xfer += $output->writeFieldEnd();
    }
    if (defined $self->{query}) {
      $xfer += $output->writeFieldBegin('query', Thrift::TType::STRING, 4);
      $xfer += $output->writeString($self->{query});
      $xfer += $output->writeFieldEnd();
    }
    if (defined $self->{countryAreaCode}) {
      $xfer += $output->writeFieldBegin('countryAreaCode', Thrift::TType::STRING, 5);
      $xfer += $output->writeString($self->{countryAreaCode});
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

package SpotService_lookupNearby_result;
use base qw(Class::Accessor);
SpotService_lookupNearby_result->mk_accessors( qw( success ) );

sub new {
    my $classname = shift;
    my $self      = {};
    my $vals      = shift || {};
    $self->{success} = undef;
    $self->{e} = undef;
    if (UNIVERSAL::isa($vals,'HASH')) {
      if (defined $vals->{success}) {
        $self->{success} = $vals->{success};
      }
      if (defined $vals->{e}) {
        $self->{e} = $vals->{e};
      }
    }
    return bless ($self, $classname);
}

sub getName {
    return 'SpotService_lookupNearby_result';
  }

sub read {
    my ($self, $input) = @_;
    my $xfer  = 0;
    my $fname;
    my $ftype = 0;
    my $fid   = 0;
    $xfer += $input->readStructBegin(\$fname);
    while (1)
    {
      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
      if ($ftype == Thrift::TType::STOP) {
        last;
      }
      SWITCH: for($fid)
      {
        /^0$/ && do{        if ($ftype == Thrift::TType::STRUCT) {
          $self->{success} = SpotNearbyResponse->new();
          $xfer += $self->{success}->read($input);
        } else {
          $xfer += $input->skip($ftype);
        }
        last; };
        /^1$/ && do{        if ($ftype == Thrift::TType::STRUCT) {
          $self->{e} = TalkException->new();
          $xfer += $self->{e}->read($input);
        } else {
          $xfer += $input->skip($ftype);
        }
        last; };
          $xfer += $input->skip($ftype);
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

sub write {
    my ($self, $output) = @_;
    my $xfer   = 0;
    $xfer += $output->writeStructBegin('SpotService_lookupNearby_result');
    if (defined $self->{success}) {
      $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
      $xfer += $self->{success}->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if (defined $self->{e}) {
      $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
      $xfer += $self->{e}->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

package SpotServiceIf;

use strict;


sub lookupByPhoneNumber{
  my $self = shift;
  my $countryAreaCode = shift;
  my $phoneNumber = shift;

  die 'implement interface';
}

sub lookupNearby{
  my $self = shift;
  my $location = shift;
  my $category = shift;
  my $query = shift;
  my $countryAreaCode = shift;

  die 'implement interface';
}

package SpotServiceRest;

use strict;


sub new {
    my ($classname, $impl) = @_;
    my $self     ={ impl => $impl };

    return bless($self,$classname);
}

sub lookupByPhoneNumber{
    my ($self, $request) = @_;

    my $countryAreaCode = ($request->{'countryAreaCode'}) ? $request->{'countryAreaCode'} : undef;
    my $phoneNumber = ($request->{'phoneNumber'}) ? $request->{'phoneNumber'} : undef;
    return $self->{impl}->lookupByPhoneNumber($countryAreaCode, $phoneNumber);
  }

sub lookupNearby{
    my ($self, $request) = @_;

    my $location = ($request->{'location'}) ? $request->{'location'} : undef;
    my $category = ($request->{'category'}) ? $request->{'category'} : undef;
    my $query = ($request->{'query'}) ? $request->{'query'} : undef;
    my $countryAreaCode = ($request->{'countryAreaCode'}) ? $request->{'countryAreaCode'} : undef;
    return $self->{impl}->lookupNearby($location, $category, $query, $countryAreaCode);
  }

package SpotServiceClient;


use base qw(SpotServiceIf);
sub new {
    my ($classname, $input, $output) = @_;
    my $self      = {};
    $self->{input}  = $input;
    $self->{output} = defined $output ? $output : $input;
    $self->{seqid}  = 0;
    return bless($self,$classname);
}

sub lookupByPhoneNumber{
  my $self = shift;
  my $countryAreaCode = shift;
  my $phoneNumber = shift;

        $self->send_lookupByPhoneNumber($countryAreaCode, $phoneNumber);
    return $self->recv_lookupByPhoneNumber();
}

sub send_lookupByPhoneNumber{
  my $self = shift;
  my $countryAreaCode = shift;
  my $phoneNumber = shift;

    $self->{output}->writeMessageBegin('lookupByPhoneNumber', Thrift::TMessageType::CALL, $self->{seqid});
    my $args = SpotService_lookupByPhoneNumber_args->new();
    $args->{countryAreaCode} = $countryAreaCode;
    $args->{phoneNumber} = $phoneNumber;
    $args->write($self->{output});
    $self->{output}->writeMessageEnd();
    $self->{output}->getTransport()->flush();
}

sub recv_lookupByPhoneNumber{
  my $self = shift;

    my $rseqid = 0;
    my $fname;
    my $mtype = 0;

    $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
    if ($mtype == Thrift::TMessageType::EXCEPTION) {
      my $x = Thrift::TApplicationException->new();
      $x->read($self->{input});
      $self->{input}->readMessageEnd();
      die $x;
    }
    my $result = SpotService_lookupByPhoneNumber_result->new();
    $result->read($self->{input});
    $self->{input}->readMessageEnd();

    if (defined $result->{success} ) {
      return $result->{success};
    }
    if (defined $result->{e}) {
      die $result->{e};
    }
    die "lookupByPhoneNumber failed: unknown result";
}
sub lookupNearby{
  my $self = shift;
  my $location = shift;
  my $category = shift;
  my $query = shift;
  my $countryAreaCode = shift;

        $self->send_lookupNearby($location, $category, $query, $countryAreaCode);
    return $self->recv_lookupNearby();
}

sub send_lookupNearby{
  my $self = shift;
  my $location = shift;
  my $category = shift;
  my $query = shift;
  my $countryAreaCode = shift;

    $self->{output}->writeMessageBegin('lookupNearby', Thrift::TMessageType::CALL, $self->{seqid});
    my $args = SpotService_lookupNearby_args->new();
    $args->{location} = $location;
    $args->{category} = $category;
    $args->{query} = $query;
    $args->{countryAreaCode} = $countryAreaCode;
    $args->write($self->{output});
    $self->{output}->writeMessageEnd();
    $self->{output}->getTransport()->flush();
}

sub recv_lookupNearby{
  my $self = shift;

    my $rseqid = 0;
    my $fname;
    my $mtype = 0;

    $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
    if ($mtype == Thrift::TMessageType::EXCEPTION) {
      my $x = Thrift::TApplicationException->new();
      $x->read($self->{input});
      $self->{input}->readMessageEnd();
      die $x;
    }
    my $result = SpotService_lookupNearby_result->new();
    $result->read($self->{input});
    $self->{input}->readMessageEnd();

    if (defined $result->{success} ) {
      return $result->{success};
    }
    if (defined $result->{e}) {
      die $result->{e};
    }
    die "lookupNearby failed: unknown result";
}
package SpotServiceProcessor;

use strict;


sub new {
      my ($classname, $handler) = @_;
      my $self      = {};
      $self->{handler} = $handler;
      return bless ($self, $classname);
}

sub process {
      my ($self, $input, $output) = @_;
      my $rseqid = 0;
      my $fname  = undef;
      my $mtype  = 0;

      $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
      my $methodname = 'process_'.$fname;
      if (!$self->can($methodname)) {
        $input->skip(Thrift::TType::STRUCT);
        $input->readMessageEnd();
        my $x = Thrift::TApplicationException->new('Function '.$fname.' not implemented.', Thrift::TApplicationException::UNKNOWN_METHOD);
        $output->writeMessageBegin($fname, Thrift::TMessageType::EXCEPTION, $rseqid);
        $x->write($output);
        $output->writeMessageEnd();
        $output->getTransport()->flush();
        return;
      }
      $self->$methodname($rseqid, $input, $output);
      return 1;
}

sub process_lookupByPhoneNumber {
      my ($self, $seqid, $input, $output) = @_;
      my $args = SpotService_lookupByPhoneNumber_args->new();
      $args->read($input);
      $input->readMessageEnd();
      my $result = SpotService_lookupByPhoneNumber_result->new();
      eval {
        $result->{success} = $self->{handler}->lookupByPhoneNumber($args->countryAreaCode, $args->phoneNumber);
      }; if( UNIVERSAL::isa($@,'TalkException') ){ 
        $result->{e} = $@;
        $@ = undef;
      }
      if ($@) {
        $@ =~ s/^\s+|\s+$//g;
        my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
        $output->writeMessageBegin('lookupByPhoneNumber', Thrift::TMessageType::EXCEPTION, $seqid);
        $err->write($output);
        $output->writeMessageEnd();
        $output->getTransport()->flush();
        $@ = undef;
        return;
      }
      $output->writeMessageBegin('lookupByPhoneNumber', Thrift::TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
}

sub process_lookupNearby {
      my ($self, $seqid, $input, $output) = @_;
      my $args = SpotService_lookupNearby_args->new();
      $args->read($input);
      $input->readMessageEnd();
      my $result = SpotService_lookupNearby_result->new();
      eval {
        $result->{success} = $self->{handler}->lookupNearby($args->location, $args->category, $args->query, $args->countryAreaCode);
      }; if( UNIVERSAL::isa($@,'TalkException') ){ 
        $result->{e} = $@;
        $@ = undef;
      }
      if ($@) {
        $@ =~ s/^\s+|\s+$//g;
        my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
        $output->writeMessageBegin('lookupNearby', Thrift::TMessageType::EXCEPTION, $seqid);
        $err->write($output);
        $output->writeMessageEnd();
        $output->getTransport()->flush();
        $@ = undef;
        return;
      }
      $output->writeMessageBegin('lookupNearby', Thrift::TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
}

1;
