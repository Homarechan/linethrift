#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
use 5.10.0;
use strict;
use warnings;
use Thrift::Exception;
use Thrift::MessageType;
use Thrift::Type;

use Types;


# HELPER FUNCTIONS AND STRUCTURES

package UniversalNotificationService_notify_args;
use base qw(Class::Accessor);
UniversalNotificationService_notify_args->mk_accessors( qw( event ) );

sub new {
                          my $classname = shift;
                          my $self      = {};
                          my $vals      = shift || {};
                          $self->{event} = undef;
                          if (UNIVERSAL::isa($vals,'HASH')) {
                            if (defined $vals->{event}) {
                              $self->{event} = $vals->{event};
                            }
                          }
                          return bless ($self, $classname);
}

sub getName {
                          return 'UniversalNotificationService_notify_args';
                        }

sub read {
                          my ($self, $input) = @_;
                          my $xfer  = 0;
                          my $fname;
                          my $ftype = 0;
                          my $fid   = 0;
                          $xfer += $input->readStructBegin(\$fname);
                          while (1) 
                          {
                            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                            if ($ftype == Thrift::TType::STOP) {
                              last;
                            }
                            SWITCH: for($fid)
                            {
                              /^2$/ && do{                              if ($ftype == Thrift::TType::STRUCT) {
                                $self->{event} = GlobalEvent->new();
                                $xfer += $self->{event}->read($input);
                              } else {
                                $xfer += $input->skip($ftype);
                              }
                              last; };
                                $xfer += $input->skip($ftype);
                            }
                            $xfer += $input->readFieldEnd();
                          }
                          $xfer += $input->readStructEnd();
                          return $xfer;
                        }

sub write {
                          my ($self, $output) = @_;
                          my $xfer   = 0;
                          $xfer += $output->writeStructBegin('UniversalNotificationService_notify_args');
                          if (defined $self->{event}) {
                            $xfer += $output->writeFieldBegin('event', Thrift::TType::STRUCT, 2);
                            $xfer += $self->{event}->write($output);
                            $xfer += $output->writeFieldEnd();
                          }
                          $xfer += $output->writeFieldStop();
                          $xfer += $output->writeStructEnd();
                          return $xfer;
                        }

package UniversalNotificationService_notify_result;
use base qw(Class::Accessor);
UniversalNotificationService_notify_result->mk_accessors( qw( ) );

sub new {
                          my $classname = shift;
                          my $self      = {};
                          my $vals      = shift || {};
                          $self->{e} = undef;
                          if (UNIVERSAL::isa($vals,'HASH')) {
                            if (defined $vals->{e}) {
                              $self->{e} = $vals->{e};
                            }
                          }
                          return bless ($self, $classname);
}

sub getName {
                          return 'UniversalNotificationService_notify_result';
                        }

sub read {
                          my ($self, $input) = @_;
                          my $xfer  = 0;
                          my $fname;
                          my $ftype = 0;
                          my $fid   = 0;
                          $xfer += $input->readStructBegin(\$fname);
                          while (1) 
                          {
                            $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                            if ($ftype == Thrift::TType::STOP) {
                              last;
                            }
                            SWITCH: for($fid)
                            {
                              /^1$/ && do{                              if ($ftype == Thrift::TType::STRUCT) {
                                $self->{e} = UniversalNotificationServiceException->new();
                                $xfer += $self->{e}->read($input);
                              } else {
                                $xfer += $input->skip($ftype);
                              }
                              last; };
                                $xfer += $input->skip($ftype);
                            }
                            $xfer += $input->readFieldEnd();
                          }
                          $xfer += $input->readStructEnd();
                          return $xfer;
                        }

sub write {
                          my ($self, $output) = @_;
                          my $xfer   = 0;
                          $xfer += $output->writeStructBegin('UniversalNotificationService_notify_result');
                          if (defined $self->{e}) {
                            $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                            $xfer += $self->{e}->write($output);
                            $xfer += $output->writeFieldEnd();
                          }
                          $xfer += $output->writeFieldStop();
                          $xfer += $output->writeStructEnd();
                          return $xfer;
                        }

package UniversalNotificationServiceIf;

use strict;


sub notify{
  my $self = shift;
  my $event = shift;

  die 'implement interface';
}

package UniversalNotificationServiceRest;

use strict;


sub new {
                          my ($classname, $impl) = @_;
                          my $self     ={ impl => $impl };

                          return bless($self,$classname);
}

sub notify{
                          my ($self, $request) = @_;

                          my $event = ($request->{'event'}) ? $request->{'event'} : undef;
                          return $self->{impl}->notify($event);
                        }

package UniversalNotificationServiceClient;


use base qw(UniversalNotificationServiceIf);
sub new {
                          my ($classname, $input, $output) = @_;
                          my $self      = {};
                          $self->{input}  = $input;
                          $self->{output} = defined $output ? $output : $input;
                          $self->{seqid}  = 0;
                          return bless($self,$classname);
}

sub notify{
  my $self = shift;
  my $event = shift;

                                                    $self->send_notify($event);
                          $self->recv_notify();
}

sub send_notify{
  my $self = shift;
  my $event = shift;

                          $self->{output}->writeMessageBegin('notify', Thrift::TMessageType::CALL, $self->{seqid});
                          my $args = new UniversalNotificationService_notify_args();
                          $args->{event} = $event;
                          $args->write($self->{output});
                          $self->{output}->writeMessageEnd();
                          $self->{output}->getTransport()->flush();
}

sub recv_notify{
  my $self = shift;

                          my $rseqid = 0;
                          my $fname;
                          my $mtype = 0;

                          $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                          if ($mtype == Thrift::TMessageType::EXCEPTION) {
                            my $x = new Thrift::TApplicationException();
                            $x->read($self->{input});
                            $self->{input}->readMessageEnd();
                            die $x;
                          }
                          my $result = new UniversalNotificationService_notify_result();
                          $result->read($self->{input});
                          $self->{input}->readMessageEnd();

                          if (defined $result->{e}) {
                            die $result->{e};
                          }
                          return;
}
package UniversalNotificationServiceProcessor;

use strict;


sub new {
                            my ($classname, $handler) = @_;
                            my $self      = {};
                            $self->{handler} = $handler;
                            return bless ($self, $classname);
}

sub process {
                            my ($self, $input, $output) = @_;
                            my $rseqid = 0;
                            my $fname  = undef;
                            my $mtype  = 0;

                            $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            my $methodname = 'process_'.$fname;
                            if (!$self->can($methodname)) {
                              $input->skip(Thrift::TType::STRUCT);
                              $input->readMessageEnd();
                              my $x = new Thrift::TApplicationException('Function '.$fname.' not implemented.', Thrift::TApplicationException::UNKNOWN_METHOD);
                              $output->writeMessageBegin($fname, Thrift::TMessageType::EXCEPTION, $rseqid);
                              $x->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
                              return;
                            }
                            $self->$methodname($rseqid, $input, $output);
                            return 1;
}

sub process_notify {
                            my ($self, $seqid, $input, $output) = @_;
                            my $args = new UniversalNotificationService_notify_args();
                            $args->read($input);
                            $input->readMessageEnd();
                            my $result = new UniversalNotificationService_notify_result();
                            eval {
                              $self->{handler}->notify($args->event);
                            }; if( UNIVERSAL::isa($@,'UniversalNotificationServiceException') ){ 
                              $result->{e} = $@;
                              $@ = undef;
                            }
                            if ($@) {
                              $@ =~ s/^\s+|\s+$//g;
                              my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                              $output->writeMessageBegin('notify', Thrift::TMessageType::EXCEPTION, $seqid);
                              $err->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
                              $@ = undef;
                              return;
                            }
                            $output->writeMessageBegin('notify', Thrift::TMessageType::REPLY, $seqid);
                            $result->write($output);
                            $output->writeMessageEnd();
                            $output->getTransport()->flush();
}

1;
