#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
use 5.10.0;
use strict;
use warnings;
use Thrift::Exception;
use Thrift::MessageType;
use Thrift::Type;

use Types;


# HELPER FUNCTIONS AND STRUCTURES

package ShopService_buyCoinProduct_args;
use base qw(Class::Accessor);
ShopService_buyCoinProduct_args->mk_accessors( qw( paymentReservation ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{paymentReservation} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{paymentReservation}) {
                        $self->{paymentReservation} = $vals->{paymentReservation};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_buyCoinProduct_args';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^2$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{paymentReservation} = PaymentReservation->new();
                          $xfer += $self->{paymentReservation}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_buyCoinProduct_args');
                    if (defined $self->{paymentReservation}) {
                      $xfer += $output->writeFieldBegin('paymentReservation', Thrift::TType::STRUCT, 2);
                      $xfer += $self->{paymentReservation}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_buyCoinProduct_result;
use base qw(Class::Accessor);
ShopService_buyCoinProduct_result->mk_accessors( qw( ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{e} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{e}) {
                        $self->{e} = $vals->{e};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_buyCoinProduct_result';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^1$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{e} = TalkException->new();
                          $xfer += $self->{e}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_buyCoinProduct_result');
                    if (defined $self->{e}) {
                      $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                      $xfer += $self->{e}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_buyFreeProduct_args;
use base qw(Class::Accessor);
ShopService_buyFreeProduct_args->mk_accessors( qw( receiverMid productId messageTemplate language country packageId ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{receiverMid} = undef;
                    $self->{productId} = undef;
                    $self->{messageTemplate} = undef;
                    $self->{language} = undef;
                    $self->{country} = undef;
                    $self->{packageId} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{receiverMid}) {
                        $self->{receiverMid} = $vals->{receiverMid};
                      }
                      if (defined $vals->{productId}) {
                        $self->{productId} = $vals->{productId};
                      }
                      if (defined $vals->{messageTemplate}) {
                        $self->{messageTemplate} = $vals->{messageTemplate};
                      }
                      if (defined $vals->{language}) {
                        $self->{language} = $vals->{language};
                      }
                      if (defined $vals->{country}) {
                        $self->{country} = $vals->{country};
                      }
                      if (defined $vals->{packageId}) {
                        $self->{packageId} = $vals->{packageId};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_buyFreeProduct_args';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^2$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{receiverMid});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^3$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{productId});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^4$/ && do{                        if ($ftype == Thrift::TType::I32) {
                          $xfer += $input->readI32(\$self->{messageTemplate});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^5$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{language});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^6$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{country});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^7$/ && do{                        if ($ftype == Thrift::TType::I64) {
                          $xfer += $input->readI64(\$self->{packageId});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_buyFreeProduct_args');
                    if (defined $self->{receiverMid}) {
                      $xfer += $output->writeFieldBegin('receiverMid', Thrift::TType::STRING, 2);
                      $xfer += $output->writeString($self->{receiverMid});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{productId}) {
                      $xfer += $output->writeFieldBegin('productId', Thrift::TType::STRING, 3);
                      $xfer += $output->writeString($self->{productId});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{messageTemplate}) {
                      $xfer += $output->writeFieldBegin('messageTemplate', Thrift::TType::I32, 4);
                      $xfer += $output->writeI32($self->{messageTemplate});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{language}) {
                      $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 5);
                      $xfer += $output->writeString($self->{language});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{country}) {
                      $xfer += $output->writeFieldBegin('country', Thrift::TType::STRING, 6);
                      $xfer += $output->writeString($self->{country});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{packageId}) {
                      $xfer += $output->writeFieldBegin('packageId', Thrift::TType::I64, 7);
                      $xfer += $output->writeI64($self->{packageId});
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_buyFreeProduct_result;
use base qw(Class::Accessor);
ShopService_buyFreeProduct_result->mk_accessors( qw( ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{e} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{e}) {
                        $self->{e} = $vals->{e};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_buyFreeProduct_result';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^1$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{e} = TalkException->new();
                          $xfer += $self->{e}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_buyFreeProduct_result');
                    if (defined $self->{e}) {
                      $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                      $xfer += $self->{e}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_buyMustbuyProduct_args;
use base qw(Class::Accessor);
ShopService_buyMustbuyProduct_args->mk_accessors( qw( receiverMid productId messageTemplate language country packageId serialNumber ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{receiverMid} = undef;
                    $self->{productId} = undef;
                    $self->{messageTemplate} = undef;
                    $self->{language} = undef;
                    $self->{country} = undef;
                    $self->{packageId} = undef;
                    $self->{serialNumber} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{receiverMid}) {
                        $self->{receiverMid} = $vals->{receiverMid};
                      }
                      if (defined $vals->{productId}) {
                        $self->{productId} = $vals->{productId};
                      }
                      if (defined $vals->{messageTemplate}) {
                        $self->{messageTemplate} = $vals->{messageTemplate};
                      }
                      if (defined $vals->{language}) {
                        $self->{language} = $vals->{language};
                      }
                      if (defined $vals->{country}) {
                        $self->{country} = $vals->{country};
                      }
                      if (defined $vals->{packageId}) {
                        $self->{packageId} = $vals->{packageId};
                      }
                      if (defined $vals->{serialNumber}) {
                        $self->{serialNumber} = $vals->{serialNumber};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_buyMustbuyProduct_args';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^2$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{receiverMid});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^3$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{productId});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^4$/ && do{                        if ($ftype == Thrift::TType::I32) {
                          $xfer += $input->readI32(\$self->{messageTemplate});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^5$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{language});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^6$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{country});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^7$/ && do{                        if ($ftype == Thrift::TType::I64) {
                          $xfer += $input->readI64(\$self->{packageId});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^8$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{serialNumber});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_buyMustbuyProduct_args');
                    if (defined $self->{receiverMid}) {
                      $xfer += $output->writeFieldBegin('receiverMid', Thrift::TType::STRING, 2);
                      $xfer += $output->writeString($self->{receiverMid});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{productId}) {
                      $xfer += $output->writeFieldBegin('productId', Thrift::TType::STRING, 3);
                      $xfer += $output->writeString($self->{productId});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{messageTemplate}) {
                      $xfer += $output->writeFieldBegin('messageTemplate', Thrift::TType::I32, 4);
                      $xfer += $output->writeI32($self->{messageTemplate});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{language}) {
                      $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 5);
                      $xfer += $output->writeString($self->{language});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{country}) {
                      $xfer += $output->writeFieldBegin('country', Thrift::TType::STRING, 6);
                      $xfer += $output->writeString($self->{country});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{packageId}) {
                      $xfer += $output->writeFieldBegin('packageId', Thrift::TType::I64, 7);
                      $xfer += $output->writeI64($self->{packageId});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{serialNumber}) {
                      $xfer += $output->writeFieldBegin('serialNumber', Thrift::TType::STRING, 8);
                      $xfer += $output->writeString($self->{serialNumber});
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_buyMustbuyProduct_result;
use base qw(Class::Accessor);
ShopService_buyMustbuyProduct_result->mk_accessors( qw( ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{e} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{e}) {
                        $self->{e} = $vals->{e};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_buyMustbuyProduct_result';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^1$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{e} = TalkException->new();
                          $xfer += $self->{e}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_buyMustbuyProduct_result');
                    if (defined $self->{e}) {
                      $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                      $xfer += $self->{e}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_checkCanReceivePresent_args;
use base qw(Class::Accessor);
ShopService_checkCanReceivePresent_args->mk_accessors( qw( recipientMid packageId language country ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{recipientMid} = undef;
                    $self->{packageId} = undef;
                    $self->{language} = undef;
                    $self->{country} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{recipientMid}) {
                        $self->{recipientMid} = $vals->{recipientMid};
                      }
                      if (defined $vals->{packageId}) {
                        $self->{packageId} = $vals->{packageId};
                      }
                      if (defined $vals->{language}) {
                        $self->{language} = $vals->{language};
                      }
                      if (defined $vals->{country}) {
                        $self->{country} = $vals->{country};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_checkCanReceivePresent_args';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^2$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{recipientMid});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^3$/ && do{                        if ($ftype == Thrift::TType::I64) {
                          $xfer += $input->readI64(\$self->{packageId});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^4$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{language});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^5$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{country});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_checkCanReceivePresent_args');
                    if (defined $self->{recipientMid}) {
                      $xfer += $output->writeFieldBegin('recipientMid', Thrift::TType::STRING, 2);
                      $xfer += $output->writeString($self->{recipientMid});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{packageId}) {
                      $xfer += $output->writeFieldBegin('packageId', Thrift::TType::I64, 3);
                      $xfer += $output->writeI64($self->{packageId});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{language}) {
                      $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 4);
                      $xfer += $output->writeString($self->{language});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{country}) {
                      $xfer += $output->writeFieldBegin('country', Thrift::TType::STRING, 5);
                      $xfer += $output->writeString($self->{country});
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_checkCanReceivePresent_result;
use base qw(Class::Accessor);
ShopService_checkCanReceivePresent_result->mk_accessors( qw( ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{e} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{e}) {
                        $self->{e} = $vals->{e};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_checkCanReceivePresent_result';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^1$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{e} = TalkException->new();
                          $xfer += $self->{e}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_checkCanReceivePresent_result');
                    if (defined $self->{e}) {
                      $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                      $xfer += $self->{e}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_getActivePurchases_args;
use base qw(Class::Accessor);
ShopService_getActivePurchases_args->mk_accessors( qw( start size language country ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{start} = undef;
                    $self->{size} = undef;
                    $self->{language} = undef;
                    $self->{country} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{start}) {
                        $self->{start} = $vals->{start};
                      }
                      if (defined $vals->{size}) {
                        $self->{size} = $vals->{size};
                      }
                      if (defined $vals->{language}) {
                        $self->{language} = $vals->{language};
                      }
                      if (defined $vals->{country}) {
                        $self->{country} = $vals->{country};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_getActivePurchases_args';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^2$/ && do{                        if ($ftype == Thrift::TType::I64) {
                          $xfer += $input->readI64(\$self->{start});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^3$/ && do{                        if ($ftype == Thrift::TType::I32) {
                          $xfer += $input->readI32(\$self->{size});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^4$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{language});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^5$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{country});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_getActivePurchases_args');
                    if (defined $self->{start}) {
                      $xfer += $output->writeFieldBegin('start', Thrift::TType::I64, 2);
                      $xfer += $output->writeI64($self->{start});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{size}) {
                      $xfer += $output->writeFieldBegin('size', Thrift::TType::I32, 3);
                      $xfer += $output->writeI32($self->{size});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{language}) {
                      $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 4);
                      $xfer += $output->writeString($self->{language});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{country}) {
                      $xfer += $output->writeFieldBegin('country', Thrift::TType::STRING, 5);
                      $xfer += $output->writeString($self->{country});
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_getActivePurchases_result;
use base qw(Class::Accessor);
ShopService_getActivePurchases_result->mk_accessors( qw( success ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{success} = undef;
                    $self->{e} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{success}) {
                        $self->{success} = $vals->{success};
                      }
                      if (defined $vals->{e}) {
                        $self->{e} = $vals->{e};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_getActivePurchases_result';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^0$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{success} = ProductList->new();
                          $xfer += $self->{success}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^1$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{e} = TalkException->new();
                          $xfer += $self->{e}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_getActivePurchases_result');
                    if (defined $self->{success}) {
                      $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                      $xfer += $self->{success}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{e}) {
                      $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                      $xfer += $self->{e}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_getActivePurchaseVersions_args;
use base qw(Class::Accessor);
ShopService_getActivePurchaseVersions_args->mk_accessors( qw( start size language country ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{start} = undef;
                    $self->{size} = undef;
                    $self->{language} = undef;
                    $self->{country} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{start}) {
                        $self->{start} = $vals->{start};
                      }
                      if (defined $vals->{size}) {
                        $self->{size} = $vals->{size};
                      }
                      if (defined $vals->{language}) {
                        $self->{language} = $vals->{language};
                      }
                      if (defined $vals->{country}) {
                        $self->{country} = $vals->{country};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_getActivePurchaseVersions_args';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^2$/ && do{                        if ($ftype == Thrift::TType::I64) {
                          $xfer += $input->readI64(\$self->{start});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^3$/ && do{                        if ($ftype == Thrift::TType::I32) {
                          $xfer += $input->readI32(\$self->{size});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^4$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{language});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^5$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{country});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_getActivePurchaseVersions_args');
                    if (defined $self->{start}) {
                      $xfer += $output->writeFieldBegin('start', Thrift::TType::I64, 2);
                      $xfer += $output->writeI64($self->{start});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{size}) {
                      $xfer += $output->writeFieldBegin('size', Thrift::TType::I32, 3);
                      $xfer += $output->writeI32($self->{size});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{language}) {
                      $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 4);
                      $xfer += $output->writeString($self->{language});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{country}) {
                      $xfer += $output->writeFieldBegin('country', Thrift::TType::STRING, 5);
                      $xfer += $output->writeString($self->{country});
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_getActivePurchaseVersions_result;
use base qw(Class::Accessor);
ShopService_getActivePurchaseVersions_result->mk_accessors( qw( success ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{success} = undef;
                    $self->{e} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{success}) {
                        $self->{success} = $vals->{success};
                      }
                      if (defined $vals->{e}) {
                        $self->{e} = $vals->{e};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_getActivePurchaseVersions_result';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^0$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{success} = ProductSimpleList->new();
                          $xfer += $self->{success}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^1$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{e} = TalkException->new();
                          $xfer += $self->{e}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_getActivePurchaseVersions_result');
                    if (defined $self->{success}) {
                      $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                      $xfer += $self->{success}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{e}) {
                      $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                      $xfer += $self->{e}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_getCoinProducts_args;
use base qw(Class::Accessor);
ShopService_getCoinProducts_args->mk_accessors( qw( appStoreCode country language ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{appStoreCode} = undef;
                    $self->{country} = undef;
                    $self->{language} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{appStoreCode}) {
                        $self->{appStoreCode} = $vals->{appStoreCode};
                      }
                      if (defined $vals->{country}) {
                        $self->{country} = $vals->{country};
                      }
                      if (defined $vals->{language}) {
                        $self->{language} = $vals->{language};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_getCoinProducts_args';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^2$/ && do{                        if ($ftype == Thrift::TType::I32) {
                          $xfer += $input->readI32(\$self->{appStoreCode});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^3$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{country});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^4$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{language});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_getCoinProducts_args');
                    if (defined $self->{appStoreCode}) {
                      $xfer += $output->writeFieldBegin('appStoreCode', Thrift::TType::I32, 2);
                      $xfer += $output->writeI32($self->{appStoreCode});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{country}) {
                      $xfer += $output->writeFieldBegin('country', Thrift::TType::STRING, 3);
                      $xfer += $output->writeString($self->{country});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{language}) {
                      $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 4);
                      $xfer += $output->writeString($self->{language});
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_getCoinProducts_result;
use base qw(Class::Accessor);
ShopService_getCoinProducts_result->mk_accessors( qw( success ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{success} = undef;
                    $self->{e} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{success}) {
                        $self->{success} = $vals->{success};
                      }
                      if (defined $vals->{e}) {
                        $self->{e} = $vals->{e};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_getCoinProducts_result';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^0$/ && do{                        if ($ftype == Thrift::TType::LIST) {
                          {
                            my $_size1320 = 0;
                            $self->{success} = [];
                            my $_etype1323 = 0;
                            $xfer += $input->readListBegin(\$_etype1323, \$_size1320);
                            for (my $_i1324 = 0; $_i1324 < $_size1320; ++$_i1324)
                            {
                              my $elem1325 = undef;
                              $elem1325 = CoinProductItem->new();
                              $xfer += $elem1325->read($input);
                              push(@{$self->{success}},$elem1325);
                            }
                            $xfer += $input->readListEnd();
                          }
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^1$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{e} = TalkException->new();
                          $xfer += $self->{e}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_getCoinProducts_result');
                    if (defined $self->{success}) {
                      $xfer += $output->writeFieldBegin('success', Thrift::TType::LIST, 0);
                      {
                        $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{success}}));
                        {
                          foreach my $iter1326 (@{$self->{success}}) 
                          {
                            $xfer += ${iter1326}->write($output);
                          }
                        }
                        $xfer += $output->writeListEnd();
                      }
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{e}) {
                      $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                      $xfer += $self->{e}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_getCoinProductsByPgCode_args;
use base qw(Class::Accessor);
ShopService_getCoinProductsByPgCode_args->mk_accessors( qw( appStoreCode pgCode country language ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{appStoreCode} = undef;
                    $self->{pgCode} = undef;
                    $self->{country} = undef;
                    $self->{language} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{appStoreCode}) {
                        $self->{appStoreCode} = $vals->{appStoreCode};
                      }
                      if (defined $vals->{pgCode}) {
                        $self->{pgCode} = $vals->{pgCode};
                      }
                      if (defined $vals->{country}) {
                        $self->{country} = $vals->{country};
                      }
                      if (defined $vals->{language}) {
                        $self->{language} = $vals->{language};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_getCoinProductsByPgCode_args';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^2$/ && do{                        if ($ftype == Thrift::TType::I32) {
                          $xfer += $input->readI32(\$self->{appStoreCode});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^3$/ && do{                        if ($ftype == Thrift::TType::I32) {
                          $xfer += $input->readI32(\$self->{pgCode});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^4$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{country});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^5$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{language});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_getCoinProductsByPgCode_args');
                    if (defined $self->{appStoreCode}) {
                      $xfer += $output->writeFieldBegin('appStoreCode', Thrift::TType::I32, 2);
                      $xfer += $output->writeI32($self->{appStoreCode});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{pgCode}) {
                      $xfer += $output->writeFieldBegin('pgCode', Thrift::TType::I32, 3);
                      $xfer += $output->writeI32($self->{pgCode});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{country}) {
                      $xfer += $output->writeFieldBegin('country', Thrift::TType::STRING, 4);
                      $xfer += $output->writeString($self->{country});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{language}) {
                      $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 5);
                      $xfer += $output->writeString($self->{language});
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_getCoinProductsByPgCode_result;
use base qw(Class::Accessor);
ShopService_getCoinProductsByPgCode_result->mk_accessors( qw( success ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{success} = undef;
                    $self->{e} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{success}) {
                        $self->{success} = $vals->{success};
                      }
                      if (defined $vals->{e}) {
                        $self->{e} = $vals->{e};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_getCoinProductsByPgCode_result';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^0$/ && do{                        if ($ftype == Thrift::TType::LIST) {
                          {
                            my $_size1327 = 0;
                            $self->{success} = [];
                            my $_etype1330 = 0;
                            $xfer += $input->readListBegin(\$_etype1330, \$_size1327);
                            for (my $_i1331 = 0; $_i1331 < $_size1327; ++$_i1331)
                            {
                              my $elem1332 = undef;
                              $elem1332 = CoinProductItem->new();
                              $xfer += $elem1332->read($input);
                              push(@{$self->{success}},$elem1332);
                            }
                            $xfer += $input->readListEnd();
                          }
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^1$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{e} = TalkException->new();
                          $xfer += $self->{e}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_getCoinProductsByPgCode_result');
                    if (defined $self->{success}) {
                      $xfer += $output->writeFieldBegin('success', Thrift::TType::LIST, 0);
                      {
                        $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{success}}));
                        {
                          foreach my $iter1333 (@{$self->{success}}) 
                          {
                            $xfer += ${iter1333}->write($output);
                          }
                        }
                        $xfer += $output->writeListEnd();
                      }
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{e}) {
                      $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                      $xfer += $self->{e}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_getCoinPurchaseHistory_args;
use base qw(Class::Accessor);
ShopService_getCoinPurchaseHistory_args->mk_accessors( qw( request ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{request} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{request}) {
                        $self->{request} = $vals->{request};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_getCoinPurchaseHistory_args';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^2$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{request} = CoinHistoryCondition->new();
                          $xfer += $self->{request}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_getCoinPurchaseHistory_args');
                    if (defined $self->{request}) {
                      $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 2);
                      $xfer += $self->{request}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_getCoinPurchaseHistory_result;
use base qw(Class::Accessor);
ShopService_getCoinPurchaseHistory_result->mk_accessors( qw( success ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{success} = undef;
                    $self->{e} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{success}) {
                        $self->{success} = $vals->{success};
                      }
                      if (defined $vals->{e}) {
                        $self->{e} = $vals->{e};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_getCoinPurchaseHistory_result';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^0$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{success} = CoinHistoryResult->new();
                          $xfer += $self->{success}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^1$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{e} = TalkException->new();
                          $xfer += $self->{e}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_getCoinPurchaseHistory_result');
                    if (defined $self->{success}) {
                      $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                      $xfer += $self->{success}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{e}) {
                      $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                      $xfer += $self->{e}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_getCoinUseAndRefundHistory_args;
use base qw(Class::Accessor);
ShopService_getCoinUseAndRefundHistory_args->mk_accessors( qw( request ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{request} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{request}) {
                        $self->{request} = $vals->{request};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_getCoinUseAndRefundHistory_args';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^2$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{request} = CoinHistoryCondition->new();
                          $xfer += $self->{request}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_getCoinUseAndRefundHistory_args');
                    if (defined $self->{request}) {
                      $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 2);
                      $xfer += $self->{request}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_getCoinUseAndRefundHistory_result;
use base qw(Class::Accessor);
ShopService_getCoinUseAndRefundHistory_result->mk_accessors( qw( success ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{success} = undef;
                    $self->{e} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{success}) {
                        $self->{success} = $vals->{success};
                      }
                      if (defined $vals->{e}) {
                        $self->{e} = $vals->{e};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_getCoinUseAndRefundHistory_result';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^0$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{success} = CoinHistoryResult->new();
                          $xfer += $self->{success}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^1$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{e} = TalkException->new();
                          $xfer += $self->{e}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_getCoinUseAndRefundHistory_result');
                    if (defined $self->{success}) {
                      $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                      $xfer += $self->{success}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{e}) {
                      $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                      $xfer += $self->{e}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_getDownloads_args;
use base qw(Class::Accessor);
ShopService_getDownloads_args->mk_accessors( qw( start size language country ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{start} = undef;
                    $self->{size} = undef;
                    $self->{language} = undef;
                    $self->{country} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{start}) {
                        $self->{start} = $vals->{start};
                      }
                      if (defined $vals->{size}) {
                        $self->{size} = $vals->{size};
                      }
                      if (defined $vals->{language}) {
                        $self->{language} = $vals->{language};
                      }
                      if (defined $vals->{country}) {
                        $self->{country} = $vals->{country};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_getDownloads_args';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^2$/ && do{                        if ($ftype == Thrift::TType::I64) {
                          $xfer += $input->readI64(\$self->{start});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^3$/ && do{                        if ($ftype == Thrift::TType::I32) {
                          $xfer += $input->readI32(\$self->{size});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^4$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{language});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^5$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{country});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_getDownloads_args');
                    if (defined $self->{start}) {
                      $xfer += $output->writeFieldBegin('start', Thrift::TType::I64, 2);
                      $xfer += $output->writeI64($self->{start});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{size}) {
                      $xfer += $output->writeFieldBegin('size', Thrift::TType::I32, 3);
                      $xfer += $output->writeI32($self->{size});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{language}) {
                      $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 4);
                      $xfer += $output->writeString($self->{language});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{country}) {
                      $xfer += $output->writeFieldBegin('country', Thrift::TType::STRING, 5);
                      $xfer += $output->writeString($self->{country});
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_getDownloads_result;
use base qw(Class::Accessor);
ShopService_getDownloads_result->mk_accessors( qw( success ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{success} = undef;
                    $self->{e} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{success}) {
                        $self->{success} = $vals->{success};
                      }
                      if (defined $vals->{e}) {
                        $self->{e} = $vals->{e};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_getDownloads_result';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^0$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{success} = ProductList->new();
                          $xfer += $self->{success}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^1$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{e} = TalkException->new();
                          $xfer += $self->{e}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_getDownloads_result');
                    if (defined $self->{success}) {
                      $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                      $xfer += $self->{success}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{e}) {
                      $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                      $xfer += $self->{e}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_getEventPackages_args;
use base qw(Class::Accessor);
ShopService_getEventPackages_args->mk_accessors( qw( start size language country ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{start} = undef;
                    $self->{size} = undef;
                    $self->{language} = undef;
                    $self->{country} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{start}) {
                        $self->{start} = $vals->{start};
                      }
                      if (defined $vals->{size}) {
                        $self->{size} = $vals->{size};
                      }
                      if (defined $vals->{language}) {
                        $self->{language} = $vals->{language};
                      }
                      if (defined $vals->{country}) {
                        $self->{country} = $vals->{country};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_getEventPackages_args';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^2$/ && do{                        if ($ftype == Thrift::TType::I64) {
                          $xfer += $input->readI64(\$self->{start});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^3$/ && do{                        if ($ftype == Thrift::TType::I32) {
                          $xfer += $input->readI32(\$self->{size});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^4$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{language});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^5$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{country});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_getEventPackages_args');
                    if (defined $self->{start}) {
                      $xfer += $output->writeFieldBegin('start', Thrift::TType::I64, 2);
                      $xfer += $output->writeI64($self->{start});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{size}) {
                      $xfer += $output->writeFieldBegin('size', Thrift::TType::I32, 3);
                      $xfer += $output->writeI32($self->{size});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{language}) {
                      $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 4);
                      $xfer += $output->writeString($self->{language});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{country}) {
                      $xfer += $output->writeFieldBegin('country', Thrift::TType::STRING, 5);
                      $xfer += $output->writeString($self->{country});
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_getEventPackages_result;
use base qw(Class::Accessor);
ShopService_getEventPackages_result->mk_accessors( qw( success ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{success} = undef;
                    $self->{e} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{success}) {
                        $self->{success} = $vals->{success};
                      }
                      if (defined $vals->{e}) {
                        $self->{e} = $vals->{e};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_getEventPackages_result';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^0$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{success} = ProductList->new();
                          $xfer += $self->{success}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^1$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{e} = TalkException->new();
                          $xfer += $self->{e}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_getEventPackages_result');
                    if (defined $self->{success}) {
                      $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                      $xfer += $self->{success}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{e}) {
                      $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                      $xfer += $self->{e}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_getNewlyReleasedPackages_args;
use base qw(Class::Accessor);
ShopService_getNewlyReleasedPackages_args->mk_accessors( qw( start size language country ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{start} = undef;
                    $self->{size} = undef;
                    $self->{language} = undef;
                    $self->{country} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{start}) {
                        $self->{start} = $vals->{start};
                      }
                      if (defined $vals->{size}) {
                        $self->{size} = $vals->{size};
                      }
                      if (defined $vals->{language}) {
                        $self->{language} = $vals->{language};
                      }
                      if (defined $vals->{country}) {
                        $self->{country} = $vals->{country};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_getNewlyReleasedPackages_args';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^2$/ && do{                        if ($ftype == Thrift::TType::I64) {
                          $xfer += $input->readI64(\$self->{start});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^3$/ && do{                        if ($ftype == Thrift::TType::I32) {
                          $xfer += $input->readI32(\$self->{size});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^4$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{language});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^5$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{country});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_getNewlyReleasedPackages_args');
                    if (defined $self->{start}) {
                      $xfer += $output->writeFieldBegin('start', Thrift::TType::I64, 2);
                      $xfer += $output->writeI64($self->{start});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{size}) {
                      $xfer += $output->writeFieldBegin('size', Thrift::TType::I32, 3);
                      $xfer += $output->writeI32($self->{size});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{language}) {
                      $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 4);
                      $xfer += $output->writeString($self->{language});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{country}) {
                      $xfer += $output->writeFieldBegin('country', Thrift::TType::STRING, 5);
                      $xfer += $output->writeString($self->{country});
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_getNewlyReleasedPackages_result;
use base qw(Class::Accessor);
ShopService_getNewlyReleasedPackages_result->mk_accessors( qw( success ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{success} = undef;
                    $self->{e} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{success}) {
                        $self->{success} = $vals->{success};
                      }
                      if (defined $vals->{e}) {
                        $self->{e} = $vals->{e};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_getNewlyReleasedPackages_result';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^0$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{success} = ProductList->new();
                          $xfer += $self->{success}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^1$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{e} = TalkException->new();
                          $xfer += $self->{e}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_getNewlyReleasedPackages_result');
                    if (defined $self->{success}) {
                      $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                      $xfer += $self->{success}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{e}) {
                      $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                      $xfer += $self->{e}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_getPopularPackages_args;
use base qw(Class::Accessor);
ShopService_getPopularPackages_args->mk_accessors( qw( start size language country ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{start} = undef;
                    $self->{size} = undef;
                    $self->{language} = undef;
                    $self->{country} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{start}) {
                        $self->{start} = $vals->{start};
                      }
                      if (defined $vals->{size}) {
                        $self->{size} = $vals->{size};
                      }
                      if (defined $vals->{language}) {
                        $self->{language} = $vals->{language};
                      }
                      if (defined $vals->{country}) {
                        $self->{country} = $vals->{country};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_getPopularPackages_args';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^2$/ && do{                        if ($ftype == Thrift::TType::I64) {
                          $xfer += $input->readI64(\$self->{start});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^3$/ && do{                        if ($ftype == Thrift::TType::I32) {
                          $xfer += $input->readI32(\$self->{size});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^4$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{language});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^5$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{country});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_getPopularPackages_args');
                    if (defined $self->{start}) {
                      $xfer += $output->writeFieldBegin('start', Thrift::TType::I64, 2);
                      $xfer += $output->writeI64($self->{start});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{size}) {
                      $xfer += $output->writeFieldBegin('size', Thrift::TType::I32, 3);
                      $xfer += $output->writeI32($self->{size});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{language}) {
                      $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 4);
                      $xfer += $output->writeString($self->{language});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{country}) {
                      $xfer += $output->writeFieldBegin('country', Thrift::TType::STRING, 5);
                      $xfer += $output->writeString($self->{country});
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_getPopularPackages_result;
use base qw(Class::Accessor);
ShopService_getPopularPackages_result->mk_accessors( qw( success ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{success} = undef;
                    $self->{e} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{success}) {
                        $self->{success} = $vals->{success};
                      }
                      if (defined $vals->{e}) {
                        $self->{e} = $vals->{e};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_getPopularPackages_result';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^0$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{success} = ProductList->new();
                          $xfer += $self->{success}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^1$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{e} = TalkException->new();
                          $xfer += $self->{e}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_getPopularPackages_result');
                    if (defined $self->{success}) {
                      $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                      $xfer += $self->{success}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{e}) {
                      $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                      $xfer += $self->{e}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_getPresentsReceived_args;
use base qw(Class::Accessor);
ShopService_getPresentsReceived_args->mk_accessors( qw( start size language country ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{start} = undef;
                    $self->{size} = undef;
                    $self->{language} = undef;
                    $self->{country} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{start}) {
                        $self->{start} = $vals->{start};
                      }
                      if (defined $vals->{size}) {
                        $self->{size} = $vals->{size};
                      }
                      if (defined $vals->{language}) {
                        $self->{language} = $vals->{language};
                      }
                      if (defined $vals->{country}) {
                        $self->{country} = $vals->{country};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_getPresentsReceived_args';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^2$/ && do{                        if ($ftype == Thrift::TType::I64) {
                          $xfer += $input->readI64(\$self->{start});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^3$/ && do{                        if ($ftype == Thrift::TType::I32) {
                          $xfer += $input->readI32(\$self->{size});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^4$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{language});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^5$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{country});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_getPresentsReceived_args');
                    if (defined $self->{start}) {
                      $xfer += $output->writeFieldBegin('start', Thrift::TType::I64, 2);
                      $xfer += $output->writeI64($self->{start});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{size}) {
                      $xfer += $output->writeFieldBegin('size', Thrift::TType::I32, 3);
                      $xfer += $output->writeI32($self->{size});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{language}) {
                      $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 4);
                      $xfer += $output->writeString($self->{language});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{country}) {
                      $xfer += $output->writeFieldBegin('country', Thrift::TType::STRING, 5);
                      $xfer += $output->writeString($self->{country});
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_getPresentsReceived_result;
use base qw(Class::Accessor);
ShopService_getPresentsReceived_result->mk_accessors( qw( success ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{success} = undef;
                    $self->{e} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{success}) {
                        $self->{success} = $vals->{success};
                      }
                      if (defined $vals->{e}) {
                        $self->{e} = $vals->{e};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_getPresentsReceived_result';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^0$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{success} = ProductList->new();
                          $xfer += $self->{success}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^1$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{e} = TalkException->new();
                          $xfer += $self->{e}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_getPresentsReceived_result');
                    if (defined $self->{success}) {
                      $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                      $xfer += $self->{success}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{e}) {
                      $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                      $xfer += $self->{e}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_getPresentsSent_args;
use base qw(Class::Accessor);
ShopService_getPresentsSent_args->mk_accessors( qw( start size language country ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{start} = undef;
                    $self->{size} = undef;
                    $self->{language} = undef;
                    $self->{country} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{start}) {
                        $self->{start} = $vals->{start};
                      }
                      if (defined $vals->{size}) {
                        $self->{size} = $vals->{size};
                      }
                      if (defined $vals->{language}) {
                        $self->{language} = $vals->{language};
                      }
                      if (defined $vals->{country}) {
                        $self->{country} = $vals->{country};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_getPresentsSent_args';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^2$/ && do{                        if ($ftype == Thrift::TType::I64) {
                          $xfer += $input->readI64(\$self->{start});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^3$/ && do{                        if ($ftype == Thrift::TType::I32) {
                          $xfer += $input->readI32(\$self->{size});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^4$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{language});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^5$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{country});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_getPresentsSent_args');
                    if (defined $self->{start}) {
                      $xfer += $output->writeFieldBegin('start', Thrift::TType::I64, 2);
                      $xfer += $output->writeI64($self->{start});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{size}) {
                      $xfer += $output->writeFieldBegin('size', Thrift::TType::I32, 3);
                      $xfer += $output->writeI32($self->{size});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{language}) {
                      $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 4);
                      $xfer += $output->writeString($self->{language});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{country}) {
                      $xfer += $output->writeFieldBegin('country', Thrift::TType::STRING, 5);
                      $xfer += $output->writeString($self->{country});
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_getPresentsSent_result;
use base qw(Class::Accessor);
ShopService_getPresentsSent_result->mk_accessors( qw( success ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{success} = undef;
                    $self->{e} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{success}) {
                        $self->{success} = $vals->{success};
                      }
                      if (defined $vals->{e}) {
                        $self->{e} = $vals->{e};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_getPresentsSent_result';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^0$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{success} = ProductList->new();
                          $xfer += $self->{success}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^1$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{e} = TalkException->new();
                          $xfer += $self->{e}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_getPresentsSent_result');
                    if (defined $self->{success}) {
                      $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                      $xfer += $self->{success}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{e}) {
                      $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                      $xfer += $self->{e}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_getProduct_args;
use base qw(Class::Accessor);
ShopService_getProduct_args->mk_accessors( qw( packageID language country ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{packageID} = undef;
                    $self->{language} = undef;
                    $self->{country} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{packageID}) {
                        $self->{packageID} = $vals->{packageID};
                      }
                      if (defined $vals->{language}) {
                        $self->{language} = $vals->{language};
                      }
                      if (defined $vals->{country}) {
                        $self->{country} = $vals->{country};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_getProduct_args';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^2$/ && do{                        if ($ftype == Thrift::TType::I64) {
                          $xfer += $input->readI64(\$self->{packageID});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^3$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{language});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^4$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{country});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_getProduct_args');
                    if (defined $self->{packageID}) {
                      $xfer += $output->writeFieldBegin('packageID', Thrift::TType::I64, 2);
                      $xfer += $output->writeI64($self->{packageID});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{language}) {
                      $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 3);
                      $xfer += $output->writeString($self->{language});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{country}) {
                      $xfer += $output->writeFieldBegin('country', Thrift::TType::STRING, 4);
                      $xfer += $output->writeString($self->{country});
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_getProduct_result;
use base qw(Class::Accessor);
ShopService_getProduct_result->mk_accessors( qw( success ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{success} = undef;
                    $self->{e} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{success}) {
                        $self->{success} = $vals->{success};
                      }
                      if (defined $vals->{e}) {
                        $self->{e} = $vals->{e};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_getProduct_result';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^0$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{success} = Product->new();
                          $xfer += $self->{success}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^1$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{e} = TalkException->new();
                          $xfer += $self->{e}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_getProduct_result');
                    if (defined $self->{success}) {
                      $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                      $xfer += $self->{success}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{e}) {
                      $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                      $xfer += $self->{e}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_getProductList_args;
use base qw(Class::Accessor);
ShopService_getProductList_args->mk_accessors( qw( productIdList language country ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{productIdList} = undef;
                    $self->{language} = undef;
                    $self->{country} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{productIdList}) {
                        $self->{productIdList} = $vals->{productIdList};
                      }
                      if (defined $vals->{language}) {
                        $self->{language} = $vals->{language};
                      }
                      if (defined $vals->{country}) {
                        $self->{country} = $vals->{country};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_getProductList_args';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^2$/ && do{                        if ($ftype == Thrift::TType::LIST) {
                          {
                            my $_size1334 = 0;
                            $self->{productIdList} = [];
                            my $_etype1337 = 0;
                            $xfer += $input->readListBegin(\$_etype1337, \$_size1334);
                            for (my $_i1338 = 0; $_i1338 < $_size1334; ++$_i1338)
                            {
                              my $elem1339 = undef;
                              $xfer += $input->readString(\$elem1339);
                              push(@{$self->{productIdList}},$elem1339);
                            }
                            $xfer += $input->readListEnd();
                          }
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^3$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{language});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^4$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{country});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_getProductList_args');
                    if (defined $self->{productIdList}) {
                      $xfer += $output->writeFieldBegin('productIdList', Thrift::TType::LIST, 2);
                      {
                        $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{productIdList}}));
                        {
                          foreach my $iter1340 (@{$self->{productIdList}}) 
                          {
                            $xfer += $output->writeString($iter1340);
                          }
                        }
                        $xfer += $output->writeListEnd();
                      }
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{language}) {
                      $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 3);
                      $xfer += $output->writeString($self->{language});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{country}) {
                      $xfer += $output->writeFieldBegin('country', Thrift::TType::STRING, 4);
                      $xfer += $output->writeString($self->{country});
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_getProductList_result;
use base qw(Class::Accessor);
ShopService_getProductList_result->mk_accessors( qw( success ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{success} = undef;
                    $self->{e} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{success}) {
                        $self->{success} = $vals->{success};
                      }
                      if (defined $vals->{e}) {
                        $self->{e} = $vals->{e};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_getProductList_result';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^0$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{success} = ProductList->new();
                          $xfer += $self->{success}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^1$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{e} = TalkException->new();
                          $xfer += $self->{e}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_getProductList_result');
                    if (defined $self->{success}) {
                      $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                      $xfer += $self->{success}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{e}) {
                      $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                      $xfer += $self->{e}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_getProductListWithCarrier_args;
use base qw(Class::Accessor);
ShopService_getProductListWithCarrier_args->mk_accessors( qw( productIdList language country carrierCode ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{productIdList} = undef;
                    $self->{language} = undef;
                    $self->{country} = undef;
                    $self->{carrierCode} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{productIdList}) {
                        $self->{productIdList} = $vals->{productIdList};
                      }
                      if (defined $vals->{language}) {
                        $self->{language} = $vals->{language};
                      }
                      if (defined $vals->{country}) {
                        $self->{country} = $vals->{country};
                      }
                      if (defined $vals->{carrierCode}) {
                        $self->{carrierCode} = $vals->{carrierCode};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_getProductListWithCarrier_args';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^2$/ && do{                        if ($ftype == Thrift::TType::LIST) {
                          {
                            my $_size1341 = 0;
                            $self->{productIdList} = [];
                            my $_etype1344 = 0;
                            $xfer += $input->readListBegin(\$_etype1344, \$_size1341);
                            for (my $_i1345 = 0; $_i1345 < $_size1341; ++$_i1345)
                            {
                              my $elem1346 = undef;
                              $xfer += $input->readString(\$elem1346);
                              push(@{$self->{productIdList}},$elem1346);
                            }
                            $xfer += $input->readListEnd();
                          }
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^3$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{language});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^4$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{country});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^5$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{carrierCode});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_getProductListWithCarrier_args');
                    if (defined $self->{productIdList}) {
                      $xfer += $output->writeFieldBegin('productIdList', Thrift::TType::LIST, 2);
                      {
                        $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{productIdList}}));
                        {
                          foreach my $iter1347 (@{$self->{productIdList}}) 
                          {
                            $xfer += $output->writeString($iter1347);
                          }
                        }
                        $xfer += $output->writeListEnd();
                      }
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{language}) {
                      $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 3);
                      $xfer += $output->writeString($self->{language});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{country}) {
                      $xfer += $output->writeFieldBegin('country', Thrift::TType::STRING, 4);
                      $xfer += $output->writeString($self->{country});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{carrierCode}) {
                      $xfer += $output->writeFieldBegin('carrierCode', Thrift::TType::STRING, 5);
                      $xfer += $output->writeString($self->{carrierCode});
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_getProductListWithCarrier_result;
use base qw(Class::Accessor);
ShopService_getProductListWithCarrier_result->mk_accessors( qw( success ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{success} = undef;
                    $self->{e} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{success}) {
                        $self->{success} = $vals->{success};
                      }
                      if (defined $vals->{e}) {
                        $self->{e} = $vals->{e};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_getProductListWithCarrier_result';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^0$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{success} = ProductList->new();
                          $xfer += $self->{success}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^1$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{e} = TalkException->new();
                          $xfer += $self->{e}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_getProductListWithCarrier_result');
                    if (defined $self->{success}) {
                      $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                      $xfer += $self->{success}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{e}) {
                      $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                      $xfer += $self->{e}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_getProductWithCarrier_args;
use base qw(Class::Accessor);
ShopService_getProductWithCarrier_args->mk_accessors( qw( packageID language country carrierCode ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{packageID} = undef;
                    $self->{language} = undef;
                    $self->{country} = undef;
                    $self->{carrierCode} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{packageID}) {
                        $self->{packageID} = $vals->{packageID};
                      }
                      if (defined $vals->{language}) {
                        $self->{language} = $vals->{language};
                      }
                      if (defined $vals->{country}) {
                        $self->{country} = $vals->{country};
                      }
                      if (defined $vals->{carrierCode}) {
                        $self->{carrierCode} = $vals->{carrierCode};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_getProductWithCarrier_args';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^2$/ && do{                        if ($ftype == Thrift::TType::I64) {
                          $xfer += $input->readI64(\$self->{packageID});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^3$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{language});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^4$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{country});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^5$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{carrierCode});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_getProductWithCarrier_args');
                    if (defined $self->{packageID}) {
                      $xfer += $output->writeFieldBegin('packageID', Thrift::TType::I64, 2);
                      $xfer += $output->writeI64($self->{packageID});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{language}) {
                      $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 3);
                      $xfer += $output->writeString($self->{language});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{country}) {
                      $xfer += $output->writeFieldBegin('country', Thrift::TType::STRING, 4);
                      $xfer += $output->writeString($self->{country});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{carrierCode}) {
                      $xfer += $output->writeFieldBegin('carrierCode', Thrift::TType::STRING, 5);
                      $xfer += $output->writeString($self->{carrierCode});
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_getProductWithCarrier_result;
use base qw(Class::Accessor);
ShopService_getProductWithCarrier_result->mk_accessors( qw( success ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{success} = undef;
                    $self->{e} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{success}) {
                        $self->{success} = $vals->{success};
                      }
                      if (defined $vals->{e}) {
                        $self->{e} = $vals->{e};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_getProductWithCarrier_result';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^0$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{success} = Product->new();
                          $xfer += $self->{success}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^1$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{e} = TalkException->new();
                          $xfer += $self->{e}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_getProductWithCarrier_result');
                    if (defined $self->{success}) {
                      $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                      $xfer += $self->{success}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{e}) {
                      $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                      $xfer += $self->{e}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_getPurchaseHistory_args;
use base qw(Class::Accessor);
ShopService_getPurchaseHistory_args->mk_accessors( qw( start size language country ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{start} = undef;
                    $self->{size} = undef;
                    $self->{language} = undef;
                    $self->{country} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{start}) {
                        $self->{start} = $vals->{start};
                      }
                      if (defined $vals->{size}) {
                        $self->{size} = $vals->{size};
                      }
                      if (defined $vals->{language}) {
                        $self->{language} = $vals->{language};
                      }
                      if (defined $vals->{country}) {
                        $self->{country} = $vals->{country};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_getPurchaseHistory_args';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^2$/ && do{                        if ($ftype == Thrift::TType::I64) {
                          $xfer += $input->readI64(\$self->{start});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^3$/ && do{                        if ($ftype == Thrift::TType::I32) {
                          $xfer += $input->readI32(\$self->{size});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^4$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{language});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^5$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{country});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_getPurchaseHistory_args');
                    if (defined $self->{start}) {
                      $xfer += $output->writeFieldBegin('start', Thrift::TType::I64, 2);
                      $xfer += $output->writeI64($self->{start});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{size}) {
                      $xfer += $output->writeFieldBegin('size', Thrift::TType::I32, 3);
                      $xfer += $output->writeI32($self->{size});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{language}) {
                      $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 4);
                      $xfer += $output->writeString($self->{language});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{country}) {
                      $xfer += $output->writeFieldBegin('country', Thrift::TType::STRING, 5);
                      $xfer += $output->writeString($self->{country});
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_getPurchaseHistory_result;
use base qw(Class::Accessor);
ShopService_getPurchaseHistory_result->mk_accessors( qw( success ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{success} = undef;
                    $self->{e} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{success}) {
                        $self->{success} = $vals->{success};
                      }
                      if (defined $vals->{e}) {
                        $self->{e} = $vals->{e};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_getPurchaseHistory_result';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^0$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{success} = ProductList->new();
                          $xfer += $self->{success}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^1$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{e} = TalkException->new();
                          $xfer += $self->{e}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_getPurchaseHistory_result');
                    if (defined $self->{success}) {
                      $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                      $xfer += $self->{success}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{e}) {
                      $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                      $xfer += $self->{e}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_getTotalBalance_args;
use base qw(Class::Accessor);
ShopService_getTotalBalance_args->mk_accessors( qw( appStoreCode ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{appStoreCode} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{appStoreCode}) {
                        $self->{appStoreCode} = $vals->{appStoreCode};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_getTotalBalance_args';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^2$/ && do{                        if ($ftype == Thrift::TType::I32) {
                          $xfer += $input->readI32(\$self->{appStoreCode});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_getTotalBalance_args');
                    if (defined $self->{appStoreCode}) {
                      $xfer += $output->writeFieldBegin('appStoreCode', Thrift::TType::I32, 2);
                      $xfer += $output->writeI32($self->{appStoreCode});
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_getTotalBalance_result;
use base qw(Class::Accessor);
ShopService_getTotalBalance_result->mk_accessors( qw( success ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{success} = undef;
                    $self->{e} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{success}) {
                        $self->{success} = $vals->{success};
                      }
                      if (defined $vals->{e}) {
                        $self->{e} = $vals->{e};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_getTotalBalance_result';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^0$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{success} = Coin->new();
                          $xfer += $self->{success}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^1$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{e} = TalkException->new();
                          $xfer += $self->{e}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_getTotalBalance_result');
                    if (defined $self->{success}) {
                      $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                      $xfer += $self->{success}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{e}) {
                      $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                      $xfer += $self->{e}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_notifyDownloaded_args;
use base qw(Class::Accessor);
ShopService_notifyDownloaded_args->mk_accessors( qw( packageId language ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{packageId} = undef;
                    $self->{language} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{packageId}) {
                        $self->{packageId} = $vals->{packageId};
                      }
                      if (defined $vals->{language}) {
                        $self->{language} = $vals->{language};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_notifyDownloaded_args';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^2$/ && do{                        if ($ftype == Thrift::TType::I64) {
                          $xfer += $input->readI64(\$self->{packageId});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^3$/ && do{                        if ($ftype == Thrift::TType::STRING) {
                          $xfer += $input->readString(\$self->{language});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_notifyDownloaded_args');
                    if (defined $self->{packageId}) {
                      $xfer += $output->writeFieldBegin('packageId', Thrift::TType::I64, 2);
                      $xfer += $output->writeI64($self->{packageId});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{language}) {
                      $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 3);
                      $xfer += $output->writeString($self->{language});
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_notifyDownloaded_result;
use base qw(Class::Accessor);
ShopService_notifyDownloaded_result->mk_accessors( qw( success ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{success} = undef;
                    $self->{e} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{success}) {
                        $self->{success} = $vals->{success};
                      }
                      if (defined $vals->{e}) {
                        $self->{e} = $vals->{e};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_notifyDownloaded_result';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^0$/ && do{                        if ($ftype == Thrift::TType::I64) {
                          $xfer += $input->readI64(\$self->{success});
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^1$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{e} = TalkException->new();
                          $xfer += $self->{e}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_notifyDownloaded_result');
                    if (defined $self->{success}) {
                      $xfer += $output->writeFieldBegin('success', Thrift::TType::I64, 0);
                      $xfer += $output->writeI64($self->{success});
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{e}) {
                      $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                      $xfer += $self->{e}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_reserveCoinPurchase_args;
use base qw(Class::Accessor);
ShopService_reserveCoinPurchase_args->mk_accessors( qw( request ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{request} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{request}) {
                        $self->{request} = $vals->{request};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_reserveCoinPurchase_args';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^2$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{request} = CoinPurchaseReservation->new();
                          $xfer += $self->{request}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_reserveCoinPurchase_args');
                    if (defined $self->{request}) {
                      $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 2);
                      $xfer += $self->{request}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_reserveCoinPurchase_result;
use base qw(Class::Accessor);
ShopService_reserveCoinPurchase_result->mk_accessors( qw( success ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{success} = undef;
                    $self->{e} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{success}) {
                        $self->{success} = $vals->{success};
                      }
                      if (defined $vals->{e}) {
                        $self->{e} = $vals->{e};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_reserveCoinPurchase_result';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^0$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{success} = PaymentReservationResult->new();
                          $xfer += $self->{success}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^1$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{e} = TalkException->new();
                          $xfer += $self->{e}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_reserveCoinPurchase_result');
                    if (defined $self->{success}) {
                      $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                      $xfer += $self->{success}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{e}) {
                      $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                      $xfer += $self->{e}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_reservePayment_args;
use base qw(Class::Accessor);
ShopService_reservePayment_args->mk_accessors( qw( paymentReservation ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{paymentReservation} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{paymentReservation}) {
                        $self->{paymentReservation} = $vals->{paymentReservation};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_reservePayment_args';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^2$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{paymentReservation} = PaymentReservation->new();
                          $xfer += $self->{paymentReservation}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_reservePayment_args');
                    if (defined $self->{paymentReservation}) {
                      $xfer += $output->writeFieldBegin('paymentReservation', Thrift::TType::STRUCT, 2);
                      $xfer += $self->{paymentReservation}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopService_reservePayment_result;
use base qw(Class::Accessor);
ShopService_reservePayment_result->mk_accessors( qw( success ) );

sub new {
                    my $classname = shift;
                    my $self      = {};
                    my $vals      = shift || {};
                    $self->{success} = undef;
                    $self->{e} = undef;
                    if (UNIVERSAL::isa($vals,'HASH')) {
                      if (defined $vals->{success}) {
                        $self->{success} = $vals->{success};
                      }
                      if (defined $vals->{e}) {
                        $self->{e} = $vals->{e};
                      }
                    }
                    return bless ($self, $classname);
}

sub getName {
                    return 'ShopService_reservePayment_result';
                  }

sub read {
                    my ($self, $input) = @_;
                    my $xfer  = 0;
                    my $fname;
                    my $ftype = 0;
                    my $fid   = 0;
                    $xfer += $input->readStructBegin(\$fname);
                    while (1)
                    {
                      $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                      if ($ftype == Thrift::TType::STOP) {
                        last;
                      }
                      SWITCH: for($fid)
                      {
                        /^0$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{success} = PaymentReservationResult->new();
                          $xfer += $self->{success}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                        /^1$/ && do{                        if ($ftype == Thrift::TType::STRUCT) {
                          $self->{e} = TalkException->new();
                          $xfer += $self->{e}->read($input);
                        } else {
                          $xfer += $input->skip($ftype);
                        }
                        last; };
                          $xfer += $input->skip($ftype);
                      }
                      $xfer += $input->readFieldEnd();
                    }
                    $xfer += $input->readStructEnd();
                    return $xfer;
                  }

sub write {
                    my ($self, $output) = @_;
                    my $xfer   = 0;
                    $xfer += $output->writeStructBegin('ShopService_reservePayment_result');
                    if (defined $self->{success}) {
                      $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                      $xfer += $self->{success}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    if (defined $self->{e}) {
                      $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                      $xfer += $self->{e}->write($output);
                      $xfer += $output->writeFieldEnd();
                    }
                    $xfer += $output->writeFieldStop();
                    $xfer += $output->writeStructEnd();
                    return $xfer;
                  }

package ShopServiceIf;

use strict;


sub buyCoinProduct{
  my $self = shift;
  my $paymentReservation = shift;

  die 'implement interface';
}

sub buyFreeProduct{
  my $self = shift;
  my $receiverMid = shift;
  my $productId = shift;
  my $messageTemplate = shift;
  my $language = shift;
  my $country = shift;
  my $packageId = shift;

  die 'implement interface';
}

sub buyMustbuyProduct{
  my $self = shift;
  my $receiverMid = shift;
  my $productId = shift;
  my $messageTemplate = shift;
  my $language = shift;
  my $country = shift;
  my $packageId = shift;
  my $serialNumber = shift;

  die 'implement interface';
}

sub checkCanReceivePresent{
  my $self = shift;
  my $recipientMid = shift;
  my $packageId = shift;
  my $language = shift;
  my $country = shift;

  die 'implement interface';
}

sub getActivePurchases{
  my $self = shift;
  my $start = shift;
  my $size = shift;
  my $language = shift;
  my $country = shift;

  die 'implement interface';
}

sub getActivePurchaseVersions{
  my $self = shift;
  my $start = shift;
  my $size = shift;
  my $language = shift;
  my $country = shift;

  die 'implement interface';
}

sub getCoinProducts{
  my $self = shift;
  my $appStoreCode = shift;
  my $country = shift;
  my $language = shift;

  die 'implement interface';
}

sub getCoinProductsByPgCode{
  my $self = shift;
  my $appStoreCode = shift;
  my $pgCode = shift;
  my $country = shift;
  my $language = shift;

  die 'implement interface';
}

sub getCoinPurchaseHistory{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub getCoinUseAndRefundHistory{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub getDownloads{
  my $self = shift;
  my $start = shift;
  my $size = shift;
  my $language = shift;
  my $country = shift;

  die 'implement interface';
}

sub getEventPackages{
  my $self = shift;
  my $start = shift;
  my $size = shift;
  my $language = shift;
  my $country = shift;

  die 'implement interface';
}

sub getNewlyReleasedPackages{
  my $self = shift;
  my $start = shift;
  my $size = shift;
  my $language = shift;
  my $country = shift;

  die 'implement interface';
}

sub getPopularPackages{
  my $self = shift;
  my $start = shift;
  my $size = shift;
  my $language = shift;
  my $country = shift;

  die 'implement interface';
}

sub getPresentsReceived{
  my $self = shift;
  my $start = shift;
  my $size = shift;
  my $language = shift;
  my $country = shift;

  die 'implement interface';
}

sub getPresentsSent{
  my $self = shift;
  my $start = shift;
  my $size = shift;
  my $language = shift;
  my $country = shift;

  die 'implement interface';
}

sub getProduct{
  my $self = shift;
  my $packageID = shift;
  my $language = shift;
  my $country = shift;

  die 'implement interface';
}

sub getProductList{
  my $self = shift;
  my $productIdList = shift;
  my $language = shift;
  my $country = shift;

  die 'implement interface';
}

sub getProductListWithCarrier{
  my $self = shift;
  my $productIdList = shift;
  my $language = shift;
  my $country = shift;
  my $carrierCode = shift;

  die 'implement interface';
}

sub getProductWithCarrier{
  my $self = shift;
  my $packageID = shift;
  my $language = shift;
  my $country = shift;
  my $carrierCode = shift;

  die 'implement interface';
}

sub getPurchaseHistory{
  my $self = shift;
  my $start = shift;
  my $size = shift;
  my $language = shift;
  my $country = shift;

  die 'implement interface';
}

sub getTotalBalance{
  my $self = shift;
  my $appStoreCode = shift;

  die 'implement interface';
}

sub notifyDownloaded{
  my $self = shift;
  my $packageId = shift;
  my $language = shift;

  die 'implement interface';
}

sub reserveCoinPurchase{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub reservePayment{
  my $self = shift;
  my $paymentReservation = shift;

  die 'implement interface';
}

package ShopServiceRest;

use strict;


sub new {
                    my ($classname, $impl) = @_;
                    my $self     ={ impl => $impl };

                    return bless($self,$classname);
}

sub buyCoinProduct{
                    my ($self, $request) = @_;

                    my $paymentReservation = ($request->{'paymentReservation'}) ? $request->{'paymentReservation'} : undef;
                    return $self->{impl}->buyCoinProduct($paymentReservation);
                  }

sub buyFreeProduct{
                    my ($self, $request) = @_;

                    my $receiverMid = ($request->{'receiverMid'}) ? $request->{'receiverMid'} : undef;
                    my $productId = ($request->{'productId'}) ? $request->{'productId'} : undef;
                    my $messageTemplate = ($request->{'messageTemplate'}) ? $request->{'messageTemplate'} : undef;
                    my $language = ($request->{'language'}) ? $request->{'language'} : undef;
                    my $country = ($request->{'country'}) ? $request->{'country'} : undef;
                    my $packageId = ($request->{'packageId'}) ? $request->{'packageId'} : undef;
                    return $self->{impl}->buyFreeProduct($receiverMid, $productId, $messageTemplate, $language, $country, $packageId);
                  }

sub buyMustbuyProduct{
                    my ($self, $request) = @_;

                    my $receiverMid = ($request->{'receiverMid'}) ? $request->{'receiverMid'} : undef;
                    my $productId = ($request->{'productId'}) ? $request->{'productId'} : undef;
                    my $messageTemplate = ($request->{'messageTemplate'}) ? $request->{'messageTemplate'} : undef;
                    my $language = ($request->{'language'}) ? $request->{'language'} : undef;
                    my $country = ($request->{'country'}) ? $request->{'country'} : undef;
                    my $packageId = ($request->{'packageId'}) ? $request->{'packageId'} : undef;
                    my $serialNumber = ($request->{'serialNumber'}) ? $request->{'serialNumber'} : undef;
                    return $self->{impl}->buyMustbuyProduct($receiverMid, $productId, $messageTemplate, $language, $country, $packageId, $serialNumber);
                  }

sub checkCanReceivePresent{
                    my ($self, $request) = @_;

                    my $recipientMid = ($request->{'recipientMid'}) ? $request->{'recipientMid'} : undef;
                    my $packageId = ($request->{'packageId'}) ? $request->{'packageId'} : undef;
                    my $language = ($request->{'language'}) ? $request->{'language'} : undef;
                    my $country = ($request->{'country'}) ? $request->{'country'} : undef;
                    return $self->{impl}->checkCanReceivePresent($recipientMid, $packageId, $language, $country);
                  }

sub getActivePurchases{
                    my ($self, $request) = @_;

                    my $start = ($request->{'start'}) ? $request->{'start'} : undef;
                    my $size = ($request->{'size'}) ? $request->{'size'} : undef;
                    my $language = ($request->{'language'}) ? $request->{'language'} : undef;
                    my $country = ($request->{'country'}) ? $request->{'country'} : undef;
                    return $self->{impl}->getActivePurchases($start, $size, $language, $country);
                  }

sub getActivePurchaseVersions{
                    my ($self, $request) = @_;

                    my $start = ($request->{'start'}) ? $request->{'start'} : undef;
                    my $size = ($request->{'size'}) ? $request->{'size'} : undef;
                    my $language = ($request->{'language'}) ? $request->{'language'} : undef;
                    my $country = ($request->{'country'}) ? $request->{'country'} : undef;
                    return $self->{impl}->getActivePurchaseVersions($start, $size, $language, $country);
                  }

sub getCoinProducts{
                    my ($self, $request) = @_;

                    my $appStoreCode = ($request->{'appStoreCode'}) ? $request->{'appStoreCode'} : undef;
                    my $country = ($request->{'country'}) ? $request->{'country'} : undef;
                    my $language = ($request->{'language'}) ? $request->{'language'} : undef;
                    return $self->{impl}->getCoinProducts($appStoreCode, $country, $language);
                  }

sub getCoinProductsByPgCode{
                    my ($self, $request) = @_;

                    my $appStoreCode = ($request->{'appStoreCode'}) ? $request->{'appStoreCode'} : undef;
                    my $pgCode = ($request->{'pgCode'}) ? $request->{'pgCode'} : undef;
                    my $country = ($request->{'country'}) ? $request->{'country'} : undef;
                    my $language = ($request->{'language'}) ? $request->{'language'} : undef;
                    return $self->{impl}->getCoinProductsByPgCode($appStoreCode, $pgCode, $country, $language);
                  }

sub getCoinPurchaseHistory{
                    my ($self, $request) = @_;

                    my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                    return $self->{impl}->getCoinPurchaseHistory($request);
                  }

sub getCoinUseAndRefundHistory{
                    my ($self, $request) = @_;

                    my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                    return $self->{impl}->getCoinUseAndRefundHistory($request);
                  }

sub getDownloads{
                    my ($self, $request) = @_;

                    my $start = ($request->{'start'}) ? $request->{'start'} : undef;
                    my $size = ($request->{'size'}) ? $request->{'size'} : undef;
                    my $language = ($request->{'language'}) ? $request->{'language'} : undef;
                    my $country = ($request->{'country'}) ? $request->{'country'} : undef;
                    return $self->{impl}->getDownloads($start, $size, $language, $country);
                  }

sub getEventPackages{
                    my ($self, $request) = @_;

                    my $start = ($request->{'start'}) ? $request->{'start'} : undef;
                    my $size = ($request->{'size'}) ? $request->{'size'} : undef;
                    my $language = ($request->{'language'}) ? $request->{'language'} : undef;
                    my $country = ($request->{'country'}) ? $request->{'country'} : undef;
                    return $self->{impl}->getEventPackages($start, $size, $language, $country);
                  }

sub getNewlyReleasedPackages{
                    my ($self, $request) = @_;

                    my $start = ($request->{'start'}) ? $request->{'start'} : undef;
                    my $size = ($request->{'size'}) ? $request->{'size'} : undef;
                    my $language = ($request->{'language'}) ? $request->{'language'} : undef;
                    my $country = ($request->{'country'}) ? $request->{'country'} : undef;
                    return $self->{impl}->getNewlyReleasedPackages($start, $size, $language, $country);
                  }

sub getPopularPackages{
                    my ($self, $request) = @_;

                    my $start = ($request->{'start'}) ? $request->{'start'} : undef;
                    my $size = ($request->{'size'}) ? $request->{'size'} : undef;
                    my $language = ($request->{'language'}) ? $request->{'language'} : undef;
                    my $country = ($request->{'country'}) ? $request->{'country'} : undef;
                    return $self->{impl}->getPopularPackages($start, $size, $language, $country);
                  }

sub getPresentsReceived{
                    my ($self, $request) = @_;

                    my $start = ($request->{'start'}) ? $request->{'start'} : undef;
                    my $size = ($request->{'size'}) ? $request->{'size'} : undef;
                    my $language = ($request->{'language'}) ? $request->{'language'} : undef;
                    my $country = ($request->{'country'}) ? $request->{'country'} : undef;
                    return $self->{impl}->getPresentsReceived($start, $size, $language, $country);
                  }

sub getPresentsSent{
                    my ($self, $request) = @_;

                    my $start = ($request->{'start'}) ? $request->{'start'} : undef;
                    my $size = ($request->{'size'}) ? $request->{'size'} : undef;
                    my $language = ($request->{'language'}) ? $request->{'language'} : undef;
                    my $country = ($request->{'country'}) ? $request->{'country'} : undef;
                    return $self->{impl}->getPresentsSent($start, $size, $language, $country);
                  }

sub getProduct{
                    my ($self, $request) = @_;

                    my $packageID = ($request->{'packageID'}) ? $request->{'packageID'} : undef;
                    my $language = ($request->{'language'}) ? $request->{'language'} : undef;
                    my $country = ($request->{'country'}) ? $request->{'country'} : undef;
                    return $self->{impl}->getProduct($packageID, $language, $country);
                  }

sub getProductList{
                    my ($self, $request) = @_;

                    my $productIdList = ($request->{'productIdList'}) ? $request->{'productIdList'} : undef;
                    my $language = ($request->{'language'}) ? $request->{'language'} : undef;
                    my $country = ($request->{'country'}) ? $request->{'country'} : undef;
                    return $self->{impl}->getProductList($productIdList, $language, $country);
                  }

sub getProductListWithCarrier{
                    my ($self, $request) = @_;

                    my $productIdList = ($request->{'productIdList'}) ? $request->{'productIdList'} : undef;
                    my $language = ($request->{'language'}) ? $request->{'language'} : undef;
                    my $country = ($request->{'country'}) ? $request->{'country'} : undef;
                    my $carrierCode = ($request->{'carrierCode'}) ? $request->{'carrierCode'} : undef;
                    return $self->{impl}->getProductListWithCarrier($productIdList, $language, $country, $carrierCode);
                  }

sub getProductWithCarrier{
                    my ($self, $request) = @_;

                    my $packageID = ($request->{'packageID'}) ? $request->{'packageID'} : undef;
                    my $language = ($request->{'language'}) ? $request->{'language'} : undef;
                    my $country = ($request->{'country'}) ? $request->{'country'} : undef;
                    my $carrierCode = ($request->{'carrierCode'}) ? $request->{'carrierCode'} : undef;
                    return $self->{impl}->getProductWithCarrier($packageID, $language, $country, $carrierCode);
                  }

sub getPurchaseHistory{
                    my ($self, $request) = @_;

                    my $start = ($request->{'start'}) ? $request->{'start'} : undef;
                    my $size = ($request->{'size'}) ? $request->{'size'} : undef;
                    my $language = ($request->{'language'}) ? $request->{'language'} : undef;
                    my $country = ($request->{'country'}) ? $request->{'country'} : undef;
                    return $self->{impl}->getPurchaseHistory($start, $size, $language, $country);
                  }

sub getTotalBalance{
                    my ($self, $request) = @_;

                    my $appStoreCode = ($request->{'appStoreCode'}) ? $request->{'appStoreCode'} : undef;
                    return $self->{impl}->getTotalBalance($appStoreCode);
                  }

sub notifyDownloaded{
                    my ($self, $request) = @_;

                    my $packageId = ($request->{'packageId'}) ? $request->{'packageId'} : undef;
                    my $language = ($request->{'language'}) ? $request->{'language'} : undef;
                    return $self->{impl}->notifyDownloaded($packageId, $language);
                  }

sub reserveCoinPurchase{
                    my ($self, $request) = @_;

                    my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                    return $self->{impl}->reserveCoinPurchase($request);
                  }

sub reservePayment{
                    my ($self, $request) = @_;

                    my $paymentReservation = ($request->{'paymentReservation'}) ? $request->{'paymentReservation'} : undef;
                    return $self->{impl}->reservePayment($paymentReservation);
                  }

package ShopServiceClient;


use base qw(ShopServiceIf);
sub new {
                    my ($classname, $input, $output) = @_;
                    my $self      = {};
                    $self->{input}  = $input;
                    $self->{output} = defined $output ? $output : $input;
                    $self->{seqid}  = 0;
                    return bless($self,$classname);
}

sub buyCoinProduct{
  my $self = shift;
  my $paymentReservation = shift;

                                        $self->send_buyCoinProduct($paymentReservation);
                    $self->recv_buyCoinProduct();
}

sub send_buyCoinProduct{
  my $self = shift;
  my $paymentReservation = shift;

                    $self->{output}->writeMessageBegin('buyCoinProduct', Thrift::TMessageType::CALL, $self->{seqid});
                    my $args = ShopService_buyCoinProduct_args->new();
                    $args->{paymentReservation} = $paymentReservation;
                    $args->write($self->{output});
                    $self->{output}->writeMessageEnd();
                    $self->{output}->getTransport()->flush();
}

sub recv_buyCoinProduct{
  my $self = shift;

                    my $rseqid = 0;
                    my $fname;
                    my $mtype = 0;

                    $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                    if ($mtype == Thrift::TMessageType::EXCEPTION) {
                      my $x = Thrift::TApplicationException->new();
                      $x->read($self->{input});
                      $self->{input}->readMessageEnd();
                      die $x;
                    }
                    my $result = ShopService_buyCoinProduct_result->new();
                    $result->read($self->{input});
                    $self->{input}->readMessageEnd();

                    if (defined $result->{e}) {
                      die $result->{e};
                    }
                    return;
}
sub buyFreeProduct{
  my $self = shift;
  my $receiverMid = shift;
  my $productId = shift;
  my $messageTemplate = shift;
  my $language = shift;
  my $country = shift;
  my $packageId = shift;

                                        $self->send_buyFreeProduct($receiverMid, $productId, $messageTemplate, $language, $country, $packageId);
                    $self->recv_buyFreeProduct();
}

sub send_buyFreeProduct{
  my $self = shift;
  my $receiverMid = shift;
  my $productId = shift;
  my $messageTemplate = shift;
  my $language = shift;
  my $country = shift;
  my $packageId = shift;

                    $self->{output}->writeMessageBegin('buyFreeProduct', Thrift::TMessageType::CALL, $self->{seqid});
                    my $args = ShopService_buyFreeProduct_args->new();
                    $args->{receiverMid} = $receiverMid;
                    $args->{productId} = $productId;
                    $args->{messageTemplate} = $messageTemplate;
                    $args->{language} = $language;
                    $args->{country} = $country;
                    $args->{packageId} = $packageId;
                    $args->write($self->{output});
                    $self->{output}->writeMessageEnd();
                    $self->{output}->getTransport()->flush();
}

sub recv_buyFreeProduct{
  my $self = shift;

                    my $rseqid = 0;
                    my $fname;
                    my $mtype = 0;

                    $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                    if ($mtype == Thrift::TMessageType::EXCEPTION) {
                      my $x = Thrift::TApplicationException->new();
                      $x->read($self->{input});
                      $self->{input}->readMessageEnd();
                      die $x;
                    }
                    my $result = ShopService_buyFreeProduct_result->new();
                    $result->read($self->{input});
                    $self->{input}->readMessageEnd();

                    if (defined $result->{e}) {
                      die $result->{e};
                    }
                    return;
}
sub buyMustbuyProduct{
  my $self = shift;
  my $receiverMid = shift;
  my $productId = shift;
  my $messageTemplate = shift;
  my $language = shift;
  my $country = shift;
  my $packageId = shift;
  my $serialNumber = shift;

                                        $self->send_buyMustbuyProduct($receiverMid, $productId, $messageTemplate, $language, $country, $packageId, $serialNumber);
                    $self->recv_buyMustbuyProduct();
}

sub send_buyMustbuyProduct{
  my $self = shift;
  my $receiverMid = shift;
  my $productId = shift;
  my $messageTemplate = shift;
  my $language = shift;
  my $country = shift;
  my $packageId = shift;
  my $serialNumber = shift;

                    $self->{output}->writeMessageBegin('buyMustbuyProduct', Thrift::TMessageType::CALL, $self->{seqid});
                    my $args = ShopService_buyMustbuyProduct_args->new();
                    $args->{receiverMid} = $receiverMid;
                    $args->{productId} = $productId;
                    $args->{messageTemplate} = $messageTemplate;
                    $args->{language} = $language;
                    $args->{country} = $country;
                    $args->{packageId} = $packageId;
                    $args->{serialNumber} = $serialNumber;
                    $args->write($self->{output});
                    $self->{output}->writeMessageEnd();
                    $self->{output}->getTransport()->flush();
}

sub recv_buyMustbuyProduct{
  my $self = shift;

                    my $rseqid = 0;
                    my $fname;
                    my $mtype = 0;

                    $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                    if ($mtype == Thrift::TMessageType::EXCEPTION) {
                      my $x = Thrift::TApplicationException->new();
                      $x->read($self->{input});
                      $self->{input}->readMessageEnd();
                      die $x;
                    }
                    my $result = ShopService_buyMustbuyProduct_result->new();
                    $result->read($self->{input});
                    $self->{input}->readMessageEnd();

                    if (defined $result->{e}) {
                      die $result->{e};
                    }
                    return;
}
sub checkCanReceivePresent{
  my $self = shift;
  my $recipientMid = shift;
  my $packageId = shift;
  my $language = shift;
  my $country = shift;

                                        $self->send_checkCanReceivePresent($recipientMid, $packageId, $language, $country);
                    $self->recv_checkCanReceivePresent();
}

sub send_checkCanReceivePresent{
  my $self = shift;
  my $recipientMid = shift;
  my $packageId = shift;
  my $language = shift;
  my $country = shift;

                    $self->{output}->writeMessageBegin('checkCanReceivePresent', Thrift::TMessageType::CALL, $self->{seqid});
                    my $args = ShopService_checkCanReceivePresent_args->new();
                    $args->{recipientMid} = $recipientMid;
                    $args->{packageId} = $packageId;
                    $args->{language} = $language;
                    $args->{country} = $country;
                    $args->write($self->{output});
                    $self->{output}->writeMessageEnd();
                    $self->{output}->getTransport()->flush();
}

sub recv_checkCanReceivePresent{
  my $self = shift;

                    my $rseqid = 0;
                    my $fname;
                    my $mtype = 0;

                    $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                    if ($mtype == Thrift::TMessageType::EXCEPTION) {
                      my $x = Thrift::TApplicationException->new();
                      $x->read($self->{input});
                      $self->{input}->readMessageEnd();
                      die $x;
                    }
                    my $result = ShopService_checkCanReceivePresent_result->new();
                    $result->read($self->{input});
                    $self->{input}->readMessageEnd();

                    if (defined $result->{e}) {
                      die $result->{e};
                    }
                    return;
}
sub getActivePurchases{
  my $self = shift;
  my $start = shift;
  my $size = shift;
  my $language = shift;
  my $country = shift;

                                        $self->send_getActivePurchases($start, $size, $language, $country);
                    return $self->recv_getActivePurchases();
}

sub send_getActivePurchases{
  my $self = shift;
  my $start = shift;
  my $size = shift;
  my $language = shift;
  my $country = shift;

                    $self->{output}->writeMessageBegin('getActivePurchases', Thrift::TMessageType::CALL, $self->{seqid});
                    my $args = ShopService_getActivePurchases_args->new();
                    $args->{start} = $start;
                    $args->{size} = $size;
                    $args->{language} = $language;
                    $args->{country} = $country;
                    $args->write($self->{output});
                    $self->{output}->writeMessageEnd();
                    $self->{output}->getTransport()->flush();
}

sub recv_getActivePurchases{
  my $self = shift;

                    my $rseqid = 0;
                    my $fname;
                    my $mtype = 0;

                    $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                    if ($mtype == Thrift::TMessageType::EXCEPTION) {
                      my $x = Thrift::TApplicationException->new();
                      $x->read($self->{input});
                      $self->{input}->readMessageEnd();
                      die $x;
                    }
                    my $result = ShopService_getActivePurchases_result->new();
                    $result->read($self->{input});
                    $self->{input}->readMessageEnd();

                    if (defined $result->{success} ) {
                      return $result->{success};
                    }
                    if (defined $result->{e}) {
                      die $result->{e};
                    }
                    die "getActivePurchases failed: unknown result";
}
sub getActivePurchaseVersions{
  my $self = shift;
  my $start = shift;
  my $size = shift;
  my $language = shift;
  my $country = shift;

                                        $self->send_getActivePurchaseVersions($start, $size, $language, $country);
                    return $self->recv_getActivePurchaseVersions();
}

sub send_getActivePurchaseVersions{
  my $self = shift;
  my $start = shift;
  my $size = shift;
  my $language = shift;
  my $country = shift;

                    $self->{output}->writeMessageBegin('getActivePurchaseVersions', Thrift::TMessageType::CALL, $self->{seqid});
                    my $args = ShopService_getActivePurchaseVersions_args->new();
                    $args->{start} = $start;
                    $args->{size} = $size;
                    $args->{language} = $language;
                    $args->{country} = $country;
                    $args->write($self->{output});
                    $self->{output}->writeMessageEnd();
                    $self->{output}->getTransport()->flush();
}

sub recv_getActivePurchaseVersions{
  my $self = shift;

                    my $rseqid = 0;
                    my $fname;
                    my $mtype = 0;

                    $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                    if ($mtype == Thrift::TMessageType::EXCEPTION) {
                      my $x = Thrift::TApplicationException->new();
                      $x->read($self->{input});
                      $self->{input}->readMessageEnd();
                      die $x;
                    }
                    my $result = ShopService_getActivePurchaseVersions_result->new();
                    $result->read($self->{input});
                    $self->{input}->readMessageEnd();

                    if (defined $result->{success} ) {
                      return $result->{success};
                    }
                    if (defined $result->{e}) {
                      die $result->{e};
                    }
                    die "getActivePurchaseVersions failed: unknown result";
}
sub getCoinProducts{
  my $self = shift;
  my $appStoreCode = shift;
  my $country = shift;
  my $language = shift;

                                        $self->send_getCoinProducts($appStoreCode, $country, $language);
                    return $self->recv_getCoinProducts();
}

sub send_getCoinProducts{
  my $self = shift;
  my $appStoreCode = shift;
  my $country = shift;
  my $language = shift;

                    $self->{output}->writeMessageBegin('getCoinProducts', Thrift::TMessageType::CALL, $self->{seqid});
                    my $args = ShopService_getCoinProducts_args->new();
                    $args->{appStoreCode} = $appStoreCode;
                    $args->{country} = $country;
                    $args->{language} = $language;
                    $args->write($self->{output});
                    $self->{output}->writeMessageEnd();
                    $self->{output}->getTransport()->flush();
}

sub recv_getCoinProducts{
  my $self = shift;

                    my $rseqid = 0;
                    my $fname;
                    my $mtype = 0;

                    $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                    if ($mtype == Thrift::TMessageType::EXCEPTION) {
                      my $x = Thrift::TApplicationException->new();
                      $x->read($self->{input});
                      $self->{input}->readMessageEnd();
                      die $x;
                    }
                    my $result = ShopService_getCoinProducts_result->new();
                    $result->read($self->{input});
                    $self->{input}->readMessageEnd();

                    if (defined $result->{success} ) {
                      return $result->{success};
                    }
                    if (defined $result->{e}) {
                      die $result->{e};
                    }
                    die "getCoinProducts failed: unknown result";
}
sub getCoinProductsByPgCode{
  my $self = shift;
  my $appStoreCode = shift;
  my $pgCode = shift;
  my $country = shift;
  my $language = shift;

                                        $self->send_getCoinProductsByPgCode($appStoreCode, $pgCode, $country, $language);
                    return $self->recv_getCoinProductsByPgCode();
}

sub send_getCoinProductsByPgCode{
  my $self = shift;
  my $appStoreCode = shift;
  my $pgCode = shift;
  my $country = shift;
  my $language = shift;

                    $self->{output}->writeMessageBegin('getCoinProductsByPgCode', Thrift::TMessageType::CALL, $self->{seqid});
                    my $args = ShopService_getCoinProductsByPgCode_args->new();
                    $args->{appStoreCode} = $appStoreCode;
                    $args->{pgCode} = $pgCode;
                    $args->{country} = $country;
                    $args->{language} = $language;
                    $args->write($self->{output});
                    $self->{output}->writeMessageEnd();
                    $self->{output}->getTransport()->flush();
}

sub recv_getCoinProductsByPgCode{
  my $self = shift;

                    my $rseqid = 0;
                    my $fname;
                    my $mtype = 0;

                    $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                    if ($mtype == Thrift::TMessageType::EXCEPTION) {
                      my $x = Thrift::TApplicationException->new();
                      $x->read($self->{input});
                      $self->{input}->readMessageEnd();
                      die $x;
                    }
                    my $result = ShopService_getCoinProductsByPgCode_result->new();
                    $result->read($self->{input});
                    $self->{input}->readMessageEnd();

                    if (defined $result->{success} ) {
                      return $result->{success};
                    }
                    if (defined $result->{e}) {
                      die $result->{e};
                    }
                    die "getCoinProductsByPgCode failed: unknown result";
}
sub getCoinPurchaseHistory{
  my $self = shift;
  my $request = shift;

                                        $self->send_getCoinPurchaseHistory($request);
                    return $self->recv_getCoinPurchaseHistory();
}

sub send_getCoinPurchaseHistory{
  my $self = shift;
  my $request = shift;

                    $self->{output}->writeMessageBegin('getCoinPurchaseHistory', Thrift::TMessageType::CALL, $self->{seqid});
                    my $args = ShopService_getCoinPurchaseHistory_args->new();
                    $args->{request} = $request;
                    $args->write($self->{output});
                    $self->{output}->writeMessageEnd();
                    $self->{output}->getTransport()->flush();
}

sub recv_getCoinPurchaseHistory{
  my $self = shift;

                    my $rseqid = 0;
                    my $fname;
                    my $mtype = 0;

                    $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                    if ($mtype == Thrift::TMessageType::EXCEPTION) {
                      my $x = Thrift::TApplicationException->new();
                      $x->read($self->{input});
                      $self->{input}->readMessageEnd();
                      die $x;
                    }
                    my $result = ShopService_getCoinPurchaseHistory_result->new();
                    $result->read($self->{input});
                    $self->{input}->readMessageEnd();

                    if (defined $result->{success} ) {
                      return $result->{success};
                    }
                    if (defined $result->{e}) {
                      die $result->{e};
                    }
                    die "getCoinPurchaseHistory failed: unknown result";
}
sub getCoinUseAndRefundHistory{
  my $self = shift;
  my $request = shift;

                                        $self->send_getCoinUseAndRefundHistory($request);
                    return $self->recv_getCoinUseAndRefundHistory();
}

sub send_getCoinUseAndRefundHistory{
  my $self = shift;
  my $request = shift;

                    $self->{output}->writeMessageBegin('getCoinUseAndRefundHistory', Thrift::TMessageType::CALL, $self->{seqid});
                    my $args = ShopService_getCoinUseAndRefundHistory_args->new();
                    $args->{request} = $request;
                    $args->write($self->{output});
                    $self->{output}->writeMessageEnd();
                    $self->{output}->getTransport()->flush();
}

sub recv_getCoinUseAndRefundHistory{
  my $self = shift;

                    my $rseqid = 0;
                    my $fname;
                    my $mtype = 0;

                    $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                    if ($mtype == Thrift::TMessageType::EXCEPTION) {
                      my $x = Thrift::TApplicationException->new();
                      $x->read($self->{input});
                      $self->{input}->readMessageEnd();
                      die $x;
                    }
                    my $result = ShopService_getCoinUseAndRefundHistory_result->new();
                    $result->read($self->{input});
                    $self->{input}->readMessageEnd();

                    if (defined $result->{success} ) {
                      return $result->{success};
                    }
                    if (defined $result->{e}) {
                      die $result->{e};
                    }
                    die "getCoinUseAndRefundHistory failed: unknown result";
}
sub getDownloads{
  my $self = shift;
  my $start = shift;
  my $size = shift;
  my $language = shift;
  my $country = shift;

                                        $self->send_getDownloads($start, $size, $language, $country);
                    return $self->recv_getDownloads();
}

sub send_getDownloads{
  my $self = shift;
  my $start = shift;
  my $size = shift;
  my $language = shift;
  my $country = shift;

                    $self->{output}->writeMessageBegin('getDownloads', Thrift::TMessageType::CALL, $self->{seqid});
                    my $args = ShopService_getDownloads_args->new();
                    $args->{start} = $start;
                    $args->{size} = $size;
                    $args->{language} = $language;
                    $args->{country} = $country;
                    $args->write($self->{output});
                    $self->{output}->writeMessageEnd();
                    $self->{output}->getTransport()->flush();
}

sub recv_getDownloads{
  my $self = shift;

                    my $rseqid = 0;
                    my $fname;
                    my $mtype = 0;

                    $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                    if ($mtype == Thrift::TMessageType::EXCEPTION) {
                      my $x = Thrift::TApplicationException->new();
                      $x->read($self->{input});
                      $self->{input}->readMessageEnd();
                      die $x;
                    }
                    my $result = ShopService_getDownloads_result->new();
                    $result->read($self->{input});
                    $self->{input}->readMessageEnd();

                    if (defined $result->{success} ) {
                      return $result->{success};
                    }
                    if (defined $result->{e}) {
                      die $result->{e};
                    }
                    die "getDownloads failed: unknown result";
}
sub getEventPackages{
  my $self = shift;
  my $start = shift;
  my $size = shift;
  my $language = shift;
  my $country = shift;

                                        $self->send_getEventPackages($start, $size, $language, $country);
                    return $self->recv_getEventPackages();
}

sub send_getEventPackages{
  my $self = shift;
  my $start = shift;
  my $size = shift;
  my $language = shift;
  my $country = shift;

                    $self->{output}->writeMessageBegin('getEventPackages', Thrift::TMessageType::CALL, $self->{seqid});
                    my $args = ShopService_getEventPackages_args->new();
                    $args->{start} = $start;
                    $args->{size} = $size;
                    $args->{language} = $language;
                    $args->{country} = $country;
                    $args->write($self->{output});
                    $self->{output}->writeMessageEnd();
                    $self->{output}->getTransport()->flush();
}

sub recv_getEventPackages{
  my $self = shift;

                    my $rseqid = 0;
                    my $fname;
                    my $mtype = 0;

                    $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                    if ($mtype == Thrift::TMessageType::EXCEPTION) {
                      my $x = Thrift::TApplicationException->new();
                      $x->read($self->{input});
                      $self->{input}->readMessageEnd();
                      die $x;
                    }
                    my $result = ShopService_getEventPackages_result->new();
                    $result->read($self->{input});
                    $self->{input}->readMessageEnd();

                    if (defined $result->{success} ) {
                      return $result->{success};
                    }
                    if (defined $result->{e}) {
                      die $result->{e};
                    }
                    die "getEventPackages failed: unknown result";
}
sub getNewlyReleasedPackages{
  my $self = shift;
  my $start = shift;
  my $size = shift;
  my $language = shift;
  my $country = shift;

                                        $self->send_getNewlyReleasedPackages($start, $size, $language, $country);
                    return $self->recv_getNewlyReleasedPackages();
}

sub send_getNewlyReleasedPackages{
  my $self = shift;
  my $start = shift;
  my $size = shift;
  my $language = shift;
  my $country = shift;

                    $self->{output}->writeMessageBegin('getNewlyReleasedPackages', Thrift::TMessageType::CALL, $self->{seqid});
                    my $args = ShopService_getNewlyReleasedPackages_args->new();
                    $args->{start} = $start;
                    $args->{size} = $size;
                    $args->{language} = $language;
                    $args->{country} = $country;
                    $args->write($self->{output});
                    $self->{output}->writeMessageEnd();
                    $self->{output}->getTransport()->flush();
}

sub recv_getNewlyReleasedPackages{
  my $self = shift;

                    my $rseqid = 0;
                    my $fname;
                    my $mtype = 0;

                    $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                    if ($mtype == Thrift::TMessageType::EXCEPTION) {
                      my $x = Thrift::TApplicationException->new();
                      $x->read($self->{input});
                      $self->{input}->readMessageEnd();
                      die $x;
                    }
                    my $result = ShopService_getNewlyReleasedPackages_result->new();
                    $result->read($self->{input});
                    $self->{input}->readMessageEnd();

                    if (defined $result->{success} ) {
                      return $result->{success};
                    }
                    if (defined $result->{e}) {
                      die $result->{e};
                    }
                    die "getNewlyReleasedPackages failed: unknown result";
}
sub getPopularPackages{
  my $self = shift;
  my $start = shift;
  my $size = shift;
  my $language = shift;
  my $country = shift;

                                        $self->send_getPopularPackages($start, $size, $language, $country);
                    return $self->recv_getPopularPackages();
}

sub send_getPopularPackages{
  my $self = shift;
  my $start = shift;
  my $size = shift;
  my $language = shift;
  my $country = shift;

                    $self->{output}->writeMessageBegin('getPopularPackages', Thrift::TMessageType::CALL, $self->{seqid});
                    my $args = ShopService_getPopularPackages_args->new();
                    $args->{start} = $start;
                    $args->{size} = $size;
                    $args->{language} = $language;
                    $args->{country} = $country;
                    $args->write($self->{output});
                    $self->{output}->writeMessageEnd();
                    $self->{output}->getTransport()->flush();
}

sub recv_getPopularPackages{
  my $self = shift;

                    my $rseqid = 0;
                    my $fname;
                    my $mtype = 0;

                    $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                    if ($mtype == Thrift::TMessageType::EXCEPTION) {
                      my $x = Thrift::TApplicationException->new();
                      $x->read($self->{input});
                      $self->{input}->readMessageEnd();
                      die $x;
                    }
                    my $result = ShopService_getPopularPackages_result->new();
                    $result->read($self->{input});
                    $self->{input}->readMessageEnd();

                    if (defined $result->{success} ) {
                      return $result->{success};
                    }
                    if (defined $result->{e}) {
                      die $result->{e};
                    }
                    die "getPopularPackages failed: unknown result";
}
sub getPresentsReceived{
  my $self = shift;
  my $start = shift;
  my $size = shift;
  my $language = shift;
  my $country = shift;

                                        $self->send_getPresentsReceived($start, $size, $language, $country);
                    return $self->recv_getPresentsReceived();
}

sub send_getPresentsReceived{
  my $self = shift;
  my $start = shift;
  my $size = shift;
  my $language = shift;
  my $country = shift;

                    $self->{output}->writeMessageBegin('getPresentsReceived', Thrift::TMessageType::CALL, $self->{seqid});
                    my $args = ShopService_getPresentsReceived_args->new();
                    $args->{start} = $start;
                    $args->{size} = $size;
                    $args->{language} = $language;
                    $args->{country} = $country;
                    $args->write($self->{output});
                    $self->{output}->writeMessageEnd();
                    $self->{output}->getTransport()->flush();
}

sub recv_getPresentsReceived{
  my $self = shift;

                    my $rseqid = 0;
                    my $fname;
                    my $mtype = 0;

                    $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                    if ($mtype == Thrift::TMessageType::EXCEPTION) {
                      my $x = Thrift::TApplicationException->new();
                      $x->read($self->{input});
                      $self->{input}->readMessageEnd();
                      die $x;
                    }
                    my $result = ShopService_getPresentsReceived_result->new();
                    $result->read($self->{input});
                    $self->{input}->readMessageEnd();

                    if (defined $result->{success} ) {
                      return $result->{success};
                    }
                    if (defined $result->{e}) {
                      die $result->{e};
                    }
                    die "getPresentsReceived failed: unknown result";
}
sub getPresentsSent{
  my $self = shift;
  my $start = shift;
  my $size = shift;
  my $language = shift;
  my $country = shift;

                                        $self->send_getPresentsSent($start, $size, $language, $country);
                    return $self->recv_getPresentsSent();
}

sub send_getPresentsSent{
  my $self = shift;
  my $start = shift;
  my $size = shift;
  my $language = shift;
  my $country = shift;

                    $self->{output}->writeMessageBegin('getPresentsSent', Thrift::TMessageType::CALL, $self->{seqid});
                    my $args = ShopService_getPresentsSent_args->new();
                    $args->{start} = $start;
                    $args->{size} = $size;
                    $args->{language} = $language;
                    $args->{country} = $country;
                    $args->write($self->{output});
                    $self->{output}->writeMessageEnd();
                    $self->{output}->getTransport()->flush();
}

sub recv_getPresentsSent{
  my $self = shift;

                    my $rseqid = 0;
                    my $fname;
                    my $mtype = 0;

                    $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                    if ($mtype == Thrift::TMessageType::EXCEPTION) {
                      my $x = Thrift::TApplicationException->new();
                      $x->read($self->{input});
                      $self->{input}->readMessageEnd();
                      die $x;
                    }
                    my $result = ShopService_getPresentsSent_result->new();
                    $result->read($self->{input});
                    $self->{input}->readMessageEnd();

                    if (defined $result->{success} ) {
                      return $result->{success};
                    }
                    if (defined $result->{e}) {
                      die $result->{e};
                    }
                    die "getPresentsSent failed: unknown result";
}
sub getProduct{
  my $self = shift;
  my $packageID = shift;
  my $language = shift;
  my $country = shift;

                                        $self->send_getProduct($packageID, $language, $country);
                    return $self->recv_getProduct();
}

sub send_getProduct{
  my $self = shift;
  my $packageID = shift;
  my $language = shift;
  my $country = shift;

                    $self->{output}->writeMessageBegin('getProduct', Thrift::TMessageType::CALL, $self->{seqid});
                    my $args = ShopService_getProduct_args->new();
                    $args->{packageID} = $packageID;
                    $args->{language} = $language;
                    $args->{country} = $country;
                    $args->write($self->{output});
                    $self->{output}->writeMessageEnd();
                    $self->{output}->getTransport()->flush();
}

sub recv_getProduct{
  my $self = shift;

                    my $rseqid = 0;
                    my $fname;
                    my $mtype = 0;

                    $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                    if ($mtype == Thrift::TMessageType::EXCEPTION) {
                      my $x = Thrift::TApplicationException->new();
                      $x->read($self->{input});
                      $self->{input}->readMessageEnd();
                      die $x;
                    }
                    my $result = ShopService_getProduct_result->new();
                    $result->read($self->{input});
                    $self->{input}->readMessageEnd();

                    if (defined $result->{success} ) {
                      return $result->{success};
                    }
                    if (defined $result->{e}) {
                      die $result->{e};
                    }
                    die "getProduct failed: unknown result";
}
sub getProductList{
  my $self = shift;
  my $productIdList = shift;
  my $language = shift;
  my $country = shift;

                                        $self->send_getProductList($productIdList, $language, $country);
                    return $self->recv_getProductList();
}

sub send_getProductList{
  my $self = shift;
  my $productIdList = shift;
  my $language = shift;
  my $country = shift;

                    $self->{output}->writeMessageBegin('getProductList', Thrift::TMessageType::CALL, $self->{seqid});
                    my $args = ShopService_getProductList_args->new();
                    $args->{productIdList} = $productIdList;
                    $args->{language} = $language;
                    $args->{country} = $country;
                    $args->write($self->{output});
                    $self->{output}->writeMessageEnd();
                    $self->{output}->getTransport()->flush();
}

sub recv_getProductList{
  my $self = shift;

                    my $rseqid = 0;
                    my $fname;
                    my $mtype = 0;

                    $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                    if ($mtype == Thrift::TMessageType::EXCEPTION) {
                      my $x = Thrift::TApplicationException->new();
                      $x->read($self->{input});
                      $self->{input}->readMessageEnd();
                      die $x;
                    }
                    my $result = ShopService_getProductList_result->new();
                    $result->read($self->{input});
                    $self->{input}->readMessageEnd();

                    if (defined $result->{success} ) {
                      return $result->{success};
                    }
                    if (defined $result->{e}) {
                      die $result->{e};
                    }
                    die "getProductList failed: unknown result";
}
sub getProductListWithCarrier{
  my $self = shift;
  my $productIdList = shift;
  my $language = shift;
  my $country = shift;
  my $carrierCode = shift;

                                        $self->send_getProductListWithCarrier($productIdList, $language, $country, $carrierCode);
                    return $self->recv_getProductListWithCarrier();
}

sub send_getProductListWithCarrier{
  my $self = shift;
  my $productIdList = shift;
  my $language = shift;
  my $country = shift;
  my $carrierCode = shift;

                    $self->{output}->writeMessageBegin('getProductListWithCarrier', Thrift::TMessageType::CALL, $self->{seqid});
                    my $args = ShopService_getProductListWithCarrier_args->new();
                    $args->{productIdList} = $productIdList;
                    $args->{language} = $language;
                    $args->{country} = $country;
                    $args->{carrierCode} = $carrierCode;
                    $args->write($self->{output});
                    $self->{output}->writeMessageEnd();
                    $self->{output}->getTransport()->flush();
}

sub recv_getProductListWithCarrier{
  my $self = shift;

                    my $rseqid = 0;
                    my $fname;
                    my $mtype = 0;

                    $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                    if ($mtype == Thrift::TMessageType::EXCEPTION) {
                      my $x = Thrift::TApplicationException->new();
                      $x->read($self->{input});
                      $self->{input}->readMessageEnd();
                      die $x;
                    }
                    my $result = ShopService_getProductListWithCarrier_result->new();
                    $result->read($self->{input});
                    $self->{input}->readMessageEnd();

                    if (defined $result->{success} ) {
                      return $result->{success};
                    }
                    if (defined $result->{e}) {
                      die $result->{e};
                    }
                    die "getProductListWithCarrier failed: unknown result";
}
sub getProductWithCarrier{
  my $self = shift;
  my $packageID = shift;
  my $language = shift;
  my $country = shift;
  my $carrierCode = shift;

                                        $self->send_getProductWithCarrier($packageID, $language, $country, $carrierCode);
                    return $self->recv_getProductWithCarrier();
}

sub send_getProductWithCarrier{
  my $self = shift;
  my $packageID = shift;
  my $language = shift;
  my $country = shift;
  my $carrierCode = shift;

                    $self->{output}->writeMessageBegin('getProductWithCarrier', Thrift::TMessageType::CALL, $self->{seqid});
                    my $args = ShopService_getProductWithCarrier_args->new();
                    $args->{packageID} = $packageID;
                    $args->{language} = $language;
                    $args->{country} = $country;
                    $args->{carrierCode} = $carrierCode;
                    $args->write($self->{output});
                    $self->{output}->writeMessageEnd();
                    $self->{output}->getTransport()->flush();
}

sub recv_getProductWithCarrier{
  my $self = shift;

                    my $rseqid = 0;
                    my $fname;
                    my $mtype = 0;

                    $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                    if ($mtype == Thrift::TMessageType::EXCEPTION) {
                      my $x = Thrift::TApplicationException->new();
                      $x->read($self->{input});
                      $self->{input}->readMessageEnd();
                      die $x;
                    }
                    my $result = ShopService_getProductWithCarrier_result->new();
                    $result->read($self->{input});
                    $self->{input}->readMessageEnd();

                    if (defined $result->{success} ) {
                      return $result->{success};
                    }
                    if (defined $result->{e}) {
                      die $result->{e};
                    }
                    die "getProductWithCarrier failed: unknown result";
}
sub getPurchaseHistory{
  my $self = shift;
  my $start = shift;
  my $size = shift;
  my $language = shift;
  my $country = shift;

                                        $self->send_getPurchaseHistory($start, $size, $language, $country);
                    return $self->recv_getPurchaseHistory();
}

sub send_getPurchaseHistory{
  my $self = shift;
  my $start = shift;
  my $size = shift;
  my $language = shift;
  my $country = shift;

                    $self->{output}->writeMessageBegin('getPurchaseHistory', Thrift::TMessageType::CALL, $self->{seqid});
                    my $args = ShopService_getPurchaseHistory_args->new();
                    $args->{start} = $start;
                    $args->{size} = $size;
                    $args->{language} = $language;
                    $args->{country} = $country;
                    $args->write($self->{output});
                    $self->{output}->writeMessageEnd();
                    $self->{output}->getTransport()->flush();
}

sub recv_getPurchaseHistory{
  my $self = shift;

                    my $rseqid = 0;
                    my $fname;
                    my $mtype = 0;

                    $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                    if ($mtype == Thrift::TMessageType::EXCEPTION) {
                      my $x = Thrift::TApplicationException->new();
                      $x->read($self->{input});
                      $self->{input}->readMessageEnd();
                      die $x;
                    }
                    my $result = ShopService_getPurchaseHistory_result->new();
                    $result->read($self->{input});
                    $self->{input}->readMessageEnd();

                    if (defined $result->{success} ) {
                      return $result->{success};
                    }
                    if (defined $result->{e}) {
                      die $result->{e};
                    }
                    die "getPurchaseHistory failed: unknown result";
}
sub getTotalBalance{
  my $self = shift;
  my $appStoreCode = shift;

                                        $self->send_getTotalBalance($appStoreCode);
                    return $self->recv_getTotalBalance();
}

sub send_getTotalBalance{
  my $self = shift;
  my $appStoreCode = shift;

                    $self->{output}->writeMessageBegin('getTotalBalance', Thrift::TMessageType::CALL, $self->{seqid});
                    my $args = ShopService_getTotalBalance_args->new();
                    $args->{appStoreCode} = $appStoreCode;
                    $args->write($self->{output});
                    $self->{output}->writeMessageEnd();
                    $self->{output}->getTransport()->flush();
}

sub recv_getTotalBalance{
  my $self = shift;

                    my $rseqid = 0;
                    my $fname;
                    my $mtype = 0;

                    $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                    if ($mtype == Thrift::TMessageType::EXCEPTION) {
                      my $x = Thrift::TApplicationException->new();
                      $x->read($self->{input});
                      $self->{input}->readMessageEnd();
                      die $x;
                    }
                    my $result = ShopService_getTotalBalance_result->new();
                    $result->read($self->{input});
                    $self->{input}->readMessageEnd();

                    if (defined $result->{success} ) {
                      return $result->{success};
                    }
                    if (defined $result->{e}) {
                      die $result->{e};
                    }
                    die "getTotalBalance failed: unknown result";
}
sub notifyDownloaded{
  my $self = shift;
  my $packageId = shift;
  my $language = shift;

                                        $self->send_notifyDownloaded($packageId, $language);
                    return $self->recv_notifyDownloaded();
}

sub send_notifyDownloaded{
  my $self = shift;
  my $packageId = shift;
  my $language = shift;

                    $self->{output}->writeMessageBegin('notifyDownloaded', Thrift::TMessageType::CALL, $self->{seqid});
                    my $args = ShopService_notifyDownloaded_args->new();
                    $args->{packageId} = $packageId;
                    $args->{language} = $language;
                    $args->write($self->{output});
                    $self->{output}->writeMessageEnd();
                    $self->{output}->getTransport()->flush();
}

sub recv_notifyDownloaded{
  my $self = shift;

                    my $rseqid = 0;
                    my $fname;
                    my $mtype = 0;

                    $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                    if ($mtype == Thrift::TMessageType::EXCEPTION) {
                      my $x = Thrift::TApplicationException->new();
                      $x->read($self->{input});
                      $self->{input}->readMessageEnd();
                      die $x;
                    }
                    my $result = ShopService_notifyDownloaded_result->new();
                    $result->read($self->{input});
                    $self->{input}->readMessageEnd();

                    if (defined $result->{success} ) {
                      return $result->{success};
                    }
                    if (defined $result->{e}) {
                      die $result->{e};
                    }
                    die "notifyDownloaded failed: unknown result";
}
sub reserveCoinPurchase{
  my $self = shift;
  my $request = shift;

                                        $self->send_reserveCoinPurchase($request);
                    return $self->recv_reserveCoinPurchase();
}

sub send_reserveCoinPurchase{
  my $self = shift;
  my $request = shift;

                    $self->{output}->writeMessageBegin('reserveCoinPurchase', Thrift::TMessageType::CALL, $self->{seqid});
                    my $args = ShopService_reserveCoinPurchase_args->new();
                    $args->{request} = $request;
                    $args->write($self->{output});
                    $self->{output}->writeMessageEnd();
                    $self->{output}->getTransport()->flush();
}

sub recv_reserveCoinPurchase{
  my $self = shift;

                    my $rseqid = 0;
                    my $fname;
                    my $mtype = 0;

                    $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                    if ($mtype == Thrift::TMessageType::EXCEPTION) {
                      my $x = Thrift::TApplicationException->new();
                      $x->read($self->{input});
                      $self->{input}->readMessageEnd();
                      die $x;
                    }
                    my $result = ShopService_reserveCoinPurchase_result->new();
                    $result->read($self->{input});
                    $self->{input}->readMessageEnd();

                    if (defined $result->{success} ) {
                      return $result->{success};
                    }
                    if (defined $result->{e}) {
                      die $result->{e};
                    }
                    die "reserveCoinPurchase failed: unknown result";
}
sub reservePayment{
  my $self = shift;
  my $paymentReservation = shift;

                                        $self->send_reservePayment($paymentReservation);
                    return $self->recv_reservePayment();
}

sub send_reservePayment{
  my $self = shift;
  my $paymentReservation = shift;

                    $self->{output}->writeMessageBegin('reservePayment', Thrift::TMessageType::CALL, $self->{seqid});
                    my $args = ShopService_reservePayment_args->new();
                    $args->{paymentReservation} = $paymentReservation;
                    $args->write($self->{output});
                    $self->{output}->writeMessageEnd();
                    $self->{output}->getTransport()->flush();
}

sub recv_reservePayment{
  my $self = shift;

                    my $rseqid = 0;
                    my $fname;
                    my $mtype = 0;

                    $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                    if ($mtype == Thrift::TMessageType::EXCEPTION) {
                      my $x = Thrift::TApplicationException->new();
                      $x->read($self->{input});
                      $self->{input}->readMessageEnd();
                      die $x;
                    }
                    my $result = ShopService_reservePayment_result->new();
                    $result->read($self->{input});
                    $self->{input}->readMessageEnd();

                    if (defined $result->{success} ) {
                      return $result->{success};
                    }
                    if (defined $result->{e}) {
                      die $result->{e};
                    }
                    die "reservePayment failed: unknown result";
}
package ShopServiceProcessor;

use strict;


sub new {
                      my ($classname, $handler) = @_;
                      my $self      = {};
                      $self->{handler} = $handler;
                      return bless ($self, $classname);
}

sub process {
                      my ($self, $input, $output) = @_;
                      my $rseqid = 0;
                      my $fname  = undef;
                      my $mtype  = 0;

                      $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
                      my $methodname = 'process_'.$fname;
                      if (!$self->can($methodname)) {
                        $input->skip(Thrift::TType::STRUCT);
                        $input->readMessageEnd();
                        my $x = Thrift::TApplicationException->new('Function '.$fname.' not implemented.', Thrift::TApplicationException::UNKNOWN_METHOD);
                        $output->writeMessageBegin($fname, Thrift::TMessageType::EXCEPTION, $rseqid);
                        $x->write($output);
                        $output->writeMessageEnd();
                        $output->getTransport()->flush();
                        return;
                      }
                      $self->$methodname($rseqid, $input, $output);
                      return 1;
}

sub process_buyCoinProduct {
                      my ($self, $seqid, $input, $output) = @_;
                      my $args = ShopService_buyCoinProduct_args->new();
                      $args->read($input);
                      $input->readMessageEnd();
                      my $result = ShopService_buyCoinProduct_result->new();
                      eval {
                        $self->{handler}->buyCoinProduct($args->paymentReservation);
                      }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                        $result->{e} = $@;
                        $@ = undef;
                      }
                      if ($@) {
                        $@ =~ s/^\s+|\s+$//g;
                        my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                        $output->writeMessageBegin('buyCoinProduct', Thrift::TMessageType::EXCEPTION, $seqid);
                        $err->write($output);
                        $output->writeMessageEnd();
                        $output->getTransport()->flush();
                        $@ = undef;
                        return;
                      }
                      $output->writeMessageBegin('buyCoinProduct', Thrift::TMessageType::REPLY, $seqid);
                      $result->write($output);
                      $output->writeMessageEnd();
                      $output->getTransport()->flush();
}

sub process_buyFreeProduct {
                      my ($self, $seqid, $input, $output) = @_;
                      my $args = ShopService_buyFreeProduct_args->new();
                      $args->read($input);
                      $input->readMessageEnd();
                      my $result = ShopService_buyFreeProduct_result->new();
                      eval {
                        $self->{handler}->buyFreeProduct($args->receiverMid, $args->productId, $args->messageTemplate, $args->language, $args->country, $args->packageId);
                      }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                        $result->{e} = $@;
                        $@ = undef;
                      }
                      if ($@) {
                        $@ =~ s/^\s+|\s+$//g;
                        my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                        $output->writeMessageBegin('buyFreeProduct', Thrift::TMessageType::EXCEPTION, $seqid);
                        $err->write($output);
                        $output->writeMessageEnd();
                        $output->getTransport()->flush();
                        $@ = undef;
                        return;
                      }
                      $output->writeMessageBegin('buyFreeProduct', Thrift::TMessageType::REPLY, $seqid);
                      $result->write($output);
                      $output->writeMessageEnd();
                      $output->getTransport()->flush();
}

sub process_buyMustbuyProduct {
                      my ($self, $seqid, $input, $output) = @_;
                      my $args = ShopService_buyMustbuyProduct_args->new();
                      $args->read($input);
                      $input->readMessageEnd();
                      my $result = ShopService_buyMustbuyProduct_result->new();
                      eval {
                        $self->{handler}->buyMustbuyProduct($args->receiverMid, $args->productId, $args->messageTemplate, $args->language, $args->country, $args->packageId, $args->serialNumber);
                      }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                        $result->{e} = $@;
                        $@ = undef;
                      }
                      if ($@) {
                        $@ =~ s/^\s+|\s+$//g;
                        my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                        $output->writeMessageBegin('buyMustbuyProduct', Thrift::TMessageType::EXCEPTION, $seqid);
                        $err->write($output);
                        $output->writeMessageEnd();
                        $output->getTransport()->flush();
                        $@ = undef;
                        return;
                      }
                      $output->writeMessageBegin('buyMustbuyProduct', Thrift::TMessageType::REPLY, $seqid);
                      $result->write($output);
                      $output->writeMessageEnd();
                      $output->getTransport()->flush();
}

sub process_checkCanReceivePresent {
                      my ($self, $seqid, $input, $output) = @_;
                      my $args = ShopService_checkCanReceivePresent_args->new();
                      $args->read($input);
                      $input->readMessageEnd();
                      my $result = ShopService_checkCanReceivePresent_result->new();
                      eval {
                        $self->{handler}->checkCanReceivePresent($args->recipientMid, $args->packageId, $args->language, $args->country);
                      }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                        $result->{e} = $@;
                        $@ = undef;
                      }
                      if ($@) {
                        $@ =~ s/^\s+|\s+$//g;
                        my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                        $output->writeMessageBegin('checkCanReceivePresent', Thrift::TMessageType::EXCEPTION, $seqid);
                        $err->write($output);
                        $output->writeMessageEnd();
                        $output->getTransport()->flush();
                        $@ = undef;
                        return;
                      }
                      $output->writeMessageBegin('checkCanReceivePresent', Thrift::TMessageType::REPLY, $seqid);
                      $result->write($output);
                      $output->writeMessageEnd();
                      $output->getTransport()->flush();
}

sub process_getActivePurchases {
                      my ($self, $seqid, $input, $output) = @_;
                      my $args = ShopService_getActivePurchases_args->new();
                      $args->read($input);
                      $input->readMessageEnd();
                      my $result = ShopService_getActivePurchases_result->new();
                      eval {
                        $result->{success} = $self->{handler}->getActivePurchases($args->start, $args->size, $args->language, $args->country);
                      }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                        $result->{e} = $@;
                        $@ = undef;
                      }
                      if ($@) {
                        $@ =~ s/^\s+|\s+$//g;
                        my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                        $output->writeMessageBegin('getActivePurchases', Thrift::TMessageType::EXCEPTION, $seqid);
                        $err->write($output);
                        $output->writeMessageEnd();
                        $output->getTransport()->flush();
                        $@ = undef;
                        return;
                      }
                      $output->writeMessageBegin('getActivePurchases', Thrift::TMessageType::REPLY, $seqid);
                      $result->write($output);
                      $output->writeMessageEnd();
                      $output->getTransport()->flush();
}

sub process_getActivePurchaseVersions {
                      my ($self, $seqid, $input, $output) = @_;
                      my $args = ShopService_getActivePurchaseVersions_args->new();
                      $args->read($input);
                      $input->readMessageEnd();
                      my $result = ShopService_getActivePurchaseVersions_result->new();
                      eval {
                        $result->{success} = $self->{handler}->getActivePurchaseVersions($args->start, $args->size, $args->language, $args->country);
                      }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                        $result->{e} = $@;
                        $@ = undef;
                      }
                      if ($@) {
                        $@ =~ s/^\s+|\s+$//g;
                        my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                        $output->writeMessageBegin('getActivePurchaseVersions', Thrift::TMessageType::EXCEPTION, $seqid);
                        $err->write($output);
                        $output->writeMessageEnd();
                        $output->getTransport()->flush();
                        $@ = undef;
                        return;
                      }
                      $output->writeMessageBegin('getActivePurchaseVersions', Thrift::TMessageType::REPLY, $seqid);
                      $result->write($output);
                      $output->writeMessageEnd();
                      $output->getTransport()->flush();
}

sub process_getCoinProducts {
                      my ($self, $seqid, $input, $output) = @_;
                      my $args = ShopService_getCoinProducts_args->new();
                      $args->read($input);
                      $input->readMessageEnd();
                      my $result = ShopService_getCoinProducts_result->new();
                      eval {
                        $result->{success} = $self->{handler}->getCoinProducts($args->appStoreCode, $args->country, $args->language);
                      }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                        $result->{e} = $@;
                        $@ = undef;
                      }
                      if ($@) {
                        $@ =~ s/^\s+|\s+$//g;
                        my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                        $output->writeMessageBegin('getCoinProducts', Thrift::TMessageType::EXCEPTION, $seqid);
                        $err->write($output);
                        $output->writeMessageEnd();
                        $output->getTransport()->flush();
                        $@ = undef;
                        return;
                      }
                      $output->writeMessageBegin('getCoinProducts', Thrift::TMessageType::REPLY, $seqid);
                      $result->write($output);
                      $output->writeMessageEnd();
                      $output->getTransport()->flush();
}

sub process_getCoinProductsByPgCode {
                      my ($self, $seqid, $input, $output) = @_;
                      my $args = ShopService_getCoinProductsByPgCode_args->new();
                      $args->read($input);
                      $input->readMessageEnd();
                      my $result = ShopService_getCoinProductsByPgCode_result->new();
                      eval {
                        $result->{success} = $self->{handler}->getCoinProductsByPgCode($args->appStoreCode, $args->pgCode, $args->country, $args->language);
                      }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                        $result->{e} = $@;
                        $@ = undef;
                      }
                      if ($@) {
                        $@ =~ s/^\s+|\s+$//g;
                        my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                        $output->writeMessageBegin('getCoinProductsByPgCode', Thrift::TMessageType::EXCEPTION, $seqid);
                        $err->write($output);
                        $output->writeMessageEnd();
                        $output->getTransport()->flush();
                        $@ = undef;
                        return;
                      }
                      $output->writeMessageBegin('getCoinProductsByPgCode', Thrift::TMessageType::REPLY, $seqid);
                      $result->write($output);
                      $output->writeMessageEnd();
                      $output->getTransport()->flush();
}

sub process_getCoinPurchaseHistory {
                      my ($self, $seqid, $input, $output) = @_;
                      my $args = ShopService_getCoinPurchaseHistory_args->new();
                      $args->read($input);
                      $input->readMessageEnd();
                      my $result = ShopService_getCoinPurchaseHistory_result->new();
                      eval {
                        $result->{success} = $self->{handler}->getCoinPurchaseHistory($args->request);
                      }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                        $result->{e} = $@;
                        $@ = undef;
                      }
                      if ($@) {
                        $@ =~ s/^\s+|\s+$//g;
                        my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                        $output->writeMessageBegin('getCoinPurchaseHistory', Thrift::TMessageType::EXCEPTION, $seqid);
                        $err->write($output);
                        $output->writeMessageEnd();
                        $output->getTransport()->flush();
                        $@ = undef;
                        return;
                      }
                      $output->writeMessageBegin('getCoinPurchaseHistory', Thrift::TMessageType::REPLY, $seqid);
                      $result->write($output);
                      $output->writeMessageEnd();
                      $output->getTransport()->flush();
}

sub process_getCoinUseAndRefundHistory {
                      my ($self, $seqid, $input, $output) = @_;
                      my $args = ShopService_getCoinUseAndRefundHistory_args->new();
                      $args->read($input);
                      $input->readMessageEnd();
                      my $result = ShopService_getCoinUseAndRefundHistory_result->new();
                      eval {
                        $result->{success} = $self->{handler}->getCoinUseAndRefundHistory($args->request);
                      }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                        $result->{e} = $@;
                        $@ = undef;
                      }
                      if ($@) {
                        $@ =~ s/^\s+|\s+$//g;
                        my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                        $output->writeMessageBegin('getCoinUseAndRefundHistory', Thrift::TMessageType::EXCEPTION, $seqid);
                        $err->write($output);
                        $output->writeMessageEnd();
                        $output->getTransport()->flush();
                        $@ = undef;
                        return;
                      }
                      $output->writeMessageBegin('getCoinUseAndRefundHistory', Thrift::TMessageType::REPLY, $seqid);
                      $result->write($output);
                      $output->writeMessageEnd();
                      $output->getTransport()->flush();
}

sub process_getDownloads {
                      my ($self, $seqid, $input, $output) = @_;
                      my $args = ShopService_getDownloads_args->new();
                      $args->read($input);
                      $input->readMessageEnd();
                      my $result = ShopService_getDownloads_result->new();
                      eval {
                        $result->{success} = $self->{handler}->getDownloads($args->start, $args->size, $args->language, $args->country);
                      }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                        $result->{e} = $@;
                        $@ = undef;
                      }
                      if ($@) {
                        $@ =~ s/^\s+|\s+$//g;
                        my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                        $output->writeMessageBegin('getDownloads', Thrift::TMessageType::EXCEPTION, $seqid);
                        $err->write($output);
                        $output->writeMessageEnd();
                        $output->getTransport()->flush();
                        $@ = undef;
                        return;
                      }
                      $output->writeMessageBegin('getDownloads', Thrift::TMessageType::REPLY, $seqid);
                      $result->write($output);
                      $output->writeMessageEnd();
                      $output->getTransport()->flush();
}

sub process_getEventPackages {
                      my ($self, $seqid, $input, $output) = @_;
                      my $args = ShopService_getEventPackages_args->new();
                      $args->read($input);
                      $input->readMessageEnd();
                      my $result = ShopService_getEventPackages_result->new();
                      eval {
                        $result->{success} = $self->{handler}->getEventPackages($args->start, $args->size, $args->language, $args->country);
                      }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                        $result->{e} = $@;
                        $@ = undef;
                      }
                      if ($@) {
                        $@ =~ s/^\s+|\s+$//g;
                        my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                        $output->writeMessageBegin('getEventPackages', Thrift::TMessageType::EXCEPTION, $seqid);
                        $err->write($output);
                        $output->writeMessageEnd();
                        $output->getTransport()->flush();
                        $@ = undef;
                        return;
                      }
                      $output->writeMessageBegin('getEventPackages', Thrift::TMessageType::REPLY, $seqid);
                      $result->write($output);
                      $output->writeMessageEnd();
                      $output->getTransport()->flush();
}

sub process_getNewlyReleasedPackages {
                      my ($self, $seqid, $input, $output) = @_;
                      my $args = ShopService_getNewlyReleasedPackages_args->new();
                      $args->read($input);
                      $input->readMessageEnd();
                      my $result = ShopService_getNewlyReleasedPackages_result->new();
                      eval {
                        $result->{success} = $self->{handler}->getNewlyReleasedPackages($args->start, $args->size, $args->language, $args->country);
                      }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                        $result->{e} = $@;
                        $@ = undef;
                      }
                      if ($@) {
                        $@ =~ s/^\s+|\s+$//g;
                        my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                        $output->writeMessageBegin('getNewlyReleasedPackages', Thrift::TMessageType::EXCEPTION, $seqid);
                        $err->write($output);
                        $output->writeMessageEnd();
                        $output->getTransport()->flush();
                        $@ = undef;
                        return;
                      }
                      $output->writeMessageBegin('getNewlyReleasedPackages', Thrift::TMessageType::REPLY, $seqid);
                      $result->write($output);
                      $output->writeMessageEnd();
                      $output->getTransport()->flush();
}

sub process_getPopularPackages {
                      my ($self, $seqid, $input, $output) = @_;
                      my $args = ShopService_getPopularPackages_args->new();
                      $args->read($input);
                      $input->readMessageEnd();
                      my $result = ShopService_getPopularPackages_result->new();
                      eval {
                        $result->{success} = $self->{handler}->getPopularPackages($args->start, $args->size, $args->language, $args->country);
                      }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                        $result->{e} = $@;
                        $@ = undef;
                      }
                      if ($@) {
                        $@ =~ s/^\s+|\s+$//g;
                        my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                        $output->writeMessageBegin('getPopularPackages', Thrift::TMessageType::EXCEPTION, $seqid);
                        $err->write($output);
                        $output->writeMessageEnd();
                        $output->getTransport()->flush();
                        $@ = undef;
                        return;
                      }
                      $output->writeMessageBegin('getPopularPackages', Thrift::TMessageType::REPLY, $seqid);
                      $result->write($output);
                      $output->writeMessageEnd();
                      $output->getTransport()->flush();
}

sub process_getPresentsReceived {
                      my ($self, $seqid, $input, $output) = @_;
                      my $args = ShopService_getPresentsReceived_args->new();
                      $args->read($input);
                      $input->readMessageEnd();
                      my $result = ShopService_getPresentsReceived_result->new();
                      eval {
                        $result->{success} = $self->{handler}->getPresentsReceived($args->start, $args->size, $args->language, $args->country);
                      }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                        $result->{e} = $@;
                        $@ = undef;
                      }
                      if ($@) {
                        $@ =~ s/^\s+|\s+$//g;
                        my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                        $output->writeMessageBegin('getPresentsReceived', Thrift::TMessageType::EXCEPTION, $seqid);
                        $err->write($output);
                        $output->writeMessageEnd();
                        $output->getTransport()->flush();
                        $@ = undef;
                        return;
                      }
                      $output->writeMessageBegin('getPresentsReceived', Thrift::TMessageType::REPLY, $seqid);
                      $result->write($output);
                      $output->writeMessageEnd();
                      $output->getTransport()->flush();
}

sub process_getPresentsSent {
                      my ($self, $seqid, $input, $output) = @_;
                      my $args = ShopService_getPresentsSent_args->new();
                      $args->read($input);
                      $input->readMessageEnd();
                      my $result = ShopService_getPresentsSent_result->new();
                      eval {
                        $result->{success} = $self->{handler}->getPresentsSent($args->start, $args->size, $args->language, $args->country);
                      }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                        $result->{e} = $@;
                        $@ = undef;
                      }
                      if ($@) {
                        $@ =~ s/^\s+|\s+$//g;
                        my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                        $output->writeMessageBegin('getPresentsSent', Thrift::TMessageType::EXCEPTION, $seqid);
                        $err->write($output);
                        $output->writeMessageEnd();
                        $output->getTransport()->flush();
                        $@ = undef;
                        return;
                      }
                      $output->writeMessageBegin('getPresentsSent', Thrift::TMessageType::REPLY, $seqid);
                      $result->write($output);
                      $output->writeMessageEnd();
                      $output->getTransport()->flush();
}

sub process_getProduct {
                      my ($self, $seqid, $input, $output) = @_;
                      my $args = ShopService_getProduct_args->new();
                      $args->read($input);
                      $input->readMessageEnd();
                      my $result = ShopService_getProduct_result->new();
                      eval {
                        $result->{success} = $self->{handler}->getProduct($args->packageID, $args->language, $args->country);
                      }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                        $result->{e} = $@;
                        $@ = undef;
                      }
                      if ($@) {
                        $@ =~ s/^\s+|\s+$//g;
                        my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                        $output->writeMessageBegin('getProduct', Thrift::TMessageType::EXCEPTION, $seqid);
                        $err->write($output);
                        $output->writeMessageEnd();
                        $output->getTransport()->flush();
                        $@ = undef;
                        return;
                      }
                      $output->writeMessageBegin('getProduct', Thrift::TMessageType::REPLY, $seqid);
                      $result->write($output);
                      $output->writeMessageEnd();
                      $output->getTransport()->flush();
}

sub process_getProductList {
                      my ($self, $seqid, $input, $output) = @_;
                      my $args = ShopService_getProductList_args->new();
                      $args->read($input);
                      $input->readMessageEnd();
                      my $result = ShopService_getProductList_result->new();
                      eval {
                        $result->{success} = $self->{handler}->getProductList($args->productIdList, $args->language, $args->country);
                      }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                        $result->{e} = $@;
                        $@ = undef;
                      }
                      if ($@) {
                        $@ =~ s/^\s+|\s+$//g;
                        my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                        $output->writeMessageBegin('getProductList', Thrift::TMessageType::EXCEPTION, $seqid);
                        $err->write($output);
                        $output->writeMessageEnd();
                        $output->getTransport()->flush();
                        $@ = undef;
                        return;
                      }
                      $output->writeMessageBegin('getProductList', Thrift::TMessageType::REPLY, $seqid);
                      $result->write($output);
                      $output->writeMessageEnd();
                      $output->getTransport()->flush();
}

sub process_getProductListWithCarrier {
                      my ($self, $seqid, $input, $output) = @_;
                      my $args = ShopService_getProductListWithCarrier_args->new();
                      $args->read($input);
                      $input->readMessageEnd();
                      my $result = ShopService_getProductListWithCarrier_result->new();
                      eval {
                        $result->{success} = $self->{handler}->getProductListWithCarrier($args->productIdList, $args->language, $args->country, $args->carrierCode);
                      }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                        $result->{e} = $@;
                        $@ = undef;
                      }
                      if ($@) {
                        $@ =~ s/^\s+|\s+$//g;
                        my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                        $output->writeMessageBegin('getProductListWithCarrier', Thrift::TMessageType::EXCEPTION, $seqid);
                        $err->write($output);
                        $output->writeMessageEnd();
                        $output->getTransport()->flush();
                        $@ = undef;
                        return;
                      }
                      $output->writeMessageBegin('getProductListWithCarrier', Thrift::TMessageType::REPLY, $seqid);
                      $result->write($output);
                      $output->writeMessageEnd();
                      $output->getTransport()->flush();
}

sub process_getProductWithCarrier {
                      my ($self, $seqid, $input, $output) = @_;
                      my $args = ShopService_getProductWithCarrier_args->new();
                      $args->read($input);
                      $input->readMessageEnd();
                      my $result = ShopService_getProductWithCarrier_result->new();
                      eval {
                        $result->{success} = $self->{handler}->getProductWithCarrier($args->packageID, $args->language, $args->country, $args->carrierCode);
                      }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                        $result->{e} = $@;
                        $@ = undef;
                      }
                      if ($@) {
                        $@ =~ s/^\s+|\s+$//g;
                        my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                        $output->writeMessageBegin('getProductWithCarrier', Thrift::TMessageType::EXCEPTION, $seqid);
                        $err->write($output);
                        $output->writeMessageEnd();
                        $output->getTransport()->flush();
                        $@ = undef;
                        return;
                      }
                      $output->writeMessageBegin('getProductWithCarrier', Thrift::TMessageType::REPLY, $seqid);
                      $result->write($output);
                      $output->writeMessageEnd();
                      $output->getTransport()->flush();
}

sub process_getPurchaseHistory {
                      my ($self, $seqid, $input, $output) = @_;
                      my $args = ShopService_getPurchaseHistory_args->new();
                      $args->read($input);
                      $input->readMessageEnd();
                      my $result = ShopService_getPurchaseHistory_result->new();
                      eval {
                        $result->{success} = $self->{handler}->getPurchaseHistory($args->start, $args->size, $args->language, $args->country);
                      }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                        $result->{e} = $@;
                        $@ = undef;
                      }
                      if ($@) {
                        $@ =~ s/^\s+|\s+$//g;
                        my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                        $output->writeMessageBegin('getPurchaseHistory', Thrift::TMessageType::EXCEPTION, $seqid);
                        $err->write($output);
                        $output->writeMessageEnd();
                        $output->getTransport()->flush();
                        $@ = undef;
                        return;
                      }
                      $output->writeMessageBegin('getPurchaseHistory', Thrift::TMessageType::REPLY, $seqid);
                      $result->write($output);
                      $output->writeMessageEnd();
                      $output->getTransport()->flush();
}

sub process_getTotalBalance {
                      my ($self, $seqid, $input, $output) = @_;
                      my $args = ShopService_getTotalBalance_args->new();
                      $args->read($input);
                      $input->readMessageEnd();
                      my $result = ShopService_getTotalBalance_result->new();
                      eval {
                        $result->{success} = $self->{handler}->getTotalBalance($args->appStoreCode);
                      }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                        $result->{e} = $@;
                        $@ = undef;
                      }
                      if ($@) {
                        $@ =~ s/^\s+|\s+$//g;
                        my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                        $output->writeMessageBegin('getTotalBalance', Thrift::TMessageType::EXCEPTION, $seqid);
                        $err->write($output);
                        $output->writeMessageEnd();
                        $output->getTransport()->flush();
                        $@ = undef;
                        return;
                      }
                      $output->writeMessageBegin('getTotalBalance', Thrift::TMessageType::REPLY, $seqid);
                      $result->write($output);
                      $output->writeMessageEnd();
                      $output->getTransport()->flush();
}

sub process_notifyDownloaded {
                      my ($self, $seqid, $input, $output) = @_;
                      my $args = ShopService_notifyDownloaded_args->new();
                      $args->read($input);
                      $input->readMessageEnd();
                      my $result = ShopService_notifyDownloaded_result->new();
                      eval {
                        $result->{success} = $self->{handler}->notifyDownloaded($args->packageId, $args->language);
                      }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                        $result->{e} = $@;
                        $@ = undef;
                      }
                      if ($@) {
                        $@ =~ s/^\s+|\s+$//g;
                        my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                        $output->writeMessageBegin('notifyDownloaded', Thrift::TMessageType::EXCEPTION, $seqid);
                        $err->write($output);
                        $output->writeMessageEnd();
                        $output->getTransport()->flush();
                        $@ = undef;
                        return;
                      }
                      $output->writeMessageBegin('notifyDownloaded', Thrift::TMessageType::REPLY, $seqid);
                      $result->write($output);
                      $output->writeMessageEnd();
                      $output->getTransport()->flush();
}

sub process_reserveCoinPurchase {
                      my ($self, $seqid, $input, $output) = @_;
                      my $args = ShopService_reserveCoinPurchase_args->new();
                      $args->read($input);
                      $input->readMessageEnd();
                      my $result = ShopService_reserveCoinPurchase_result->new();
                      eval {
                        $result->{success} = $self->{handler}->reserveCoinPurchase($args->request);
                      }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                        $result->{e} = $@;
                        $@ = undef;
                      }
                      if ($@) {
                        $@ =~ s/^\s+|\s+$//g;
                        my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                        $output->writeMessageBegin('reserveCoinPurchase', Thrift::TMessageType::EXCEPTION, $seqid);
                        $err->write($output);
                        $output->writeMessageEnd();
                        $output->getTransport()->flush();
                        $@ = undef;
                        return;
                      }
                      $output->writeMessageBegin('reserveCoinPurchase', Thrift::TMessageType::REPLY, $seqid);
                      $result->write($output);
                      $output->writeMessageEnd();
                      $output->getTransport()->flush();
}

sub process_reservePayment {
                      my ($self, $seqid, $input, $output) = @_;
                      my $args = ShopService_reservePayment_args->new();
                      $args->read($input);
                      $input->readMessageEnd();
                      my $result = ShopService_reservePayment_result->new();
                      eval {
                        $result->{success} = $self->{handler}->reservePayment($args->paymentReservation);
                      }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                        $result->{e} = $@;
                        $@ = undef;
                      }
                      if ($@) {
                        $@ =~ s/^\s+|\s+$//g;
                        my $err = Thrift::TApplicationException->new("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                        $output->writeMessageBegin('reservePayment', Thrift::TMessageType::EXCEPTION, $seqid);
                        $err->write($output);
                        $output->writeMessageEnd();
                        $output->getTransport()->flush();
                        $@ = undef;
                        return;
                      }
                      $output->writeMessageBegin('reservePayment', Thrift::TMessageType::REPLY, $seqid);
                      $result->write($output);
                      $output->writeMessageEnd();
                      $output->getTransport()->flush();
}

1;
