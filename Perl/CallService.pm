#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
use 5.10.0;
use strict;
use warnings;
use Thrift::Exception;
use Thrift::MessageType;
use Thrift::Type;

use Types;


# HELPER FUNCTIONS AND STRUCTURES

package CallService_getUserStatus_args;
use base qw(Class::Accessor);
CallService_getUserStatus_args->mk_accessors( qw( mid ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{mid} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{mid}) {
                                $self->{mid} = $vals->{mid};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getUserStatus_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{mid});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getUserStatus_args');
                            if (defined $self->{mid}) {
                              $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 1);
                              $xfer += $output->writeString($self->{mid});
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getUserStatus_result;
use base qw(Class::Accessor);
CallService_getUserStatus_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getUserStatus_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::I32) {
                                  $xfer += $input->readI32(\$self->{success});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getUserStatus_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::I32, 0);
                              $xfer += $output->writeI32($self->{success});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_updateProfileAttributeForChannel_args;
use base qw(Class::Accessor);
CallService_updateProfileAttributeForChannel_args->mk_accessors( qw( profileAttribute value ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{profileAttribute} = undef;
                            $self->{value} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{profileAttribute}) {
                                $self->{profileAttribute} = $vals->{profileAttribute};
                              }
                              if (defined $vals->{value}) {
                                $self->{value} = $vals->{value};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_updateProfileAttributeForChannel_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^2$/ && do{                                if ($ftype == Thrift::TType::I32) {
                                  $xfer += $input->readI32(\$self->{profileAttribute});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^3$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{value});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_updateProfileAttributeForChannel_args');
                            if (defined $self->{profileAttribute}) {
                              $xfer += $output->writeFieldBegin('profileAttribute', Thrift::TType::I32, 2);
                              $xfer += $output->writeI32($self->{profileAttribute});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{value}) {
                              $xfer += $output->writeFieldBegin('value', Thrift::TType::STRING, 3);
                              $xfer += $output->writeString($self->{value});
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_updateProfileAttributeForChannel_result;
use base qw(Class::Accessor);
CallService_updateProfileAttributeForChannel_result->mk_accessors( qw( ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_updateProfileAttributeForChannel_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_updateProfileAttributeForChannel_result');
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_updateExtendedProfileAttribute_args;
use base qw(Class::Accessor);
CallService_updateExtendedProfileAttribute_args->mk_accessors( qw( attr extendedProfile ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{attr} = undef;
                            $self->{extendedProfile} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{attr}) {
                                $self->{attr} = $vals->{attr};
                              }
                              if (defined $vals->{extendedProfile}) {
                                $self->{extendedProfile} = $vals->{extendedProfile};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_updateExtendedProfileAttribute_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^1$/ && do{                                if ($ftype == Thrift::TType::I32) {
                                  $xfer += $input->readI32(\$self->{attr});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^2$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{extendedProfile} = ExtendedProfile->new();
                                  $xfer += $self->{extendedProfile}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_updateExtendedProfileAttribute_args');
                            if (defined $self->{attr}) {
                              $xfer += $output->writeFieldBegin('attr', Thrift::TType::I32, 1);
                              $xfer += $output->writeI32($self->{attr});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{extendedProfile}) {
                              $xfer += $output->writeFieldBegin('extendedProfile', Thrift::TType::STRUCT, 2);
                              $xfer += $self->{extendedProfile}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_updateExtendedProfileAttribute_result;
use base qw(Class::Accessor);
CallService_updateExtendedProfileAttribute_result->mk_accessors( qw( ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_updateExtendedProfileAttribute_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_updateExtendedProfileAttribute_result');
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getAllSimpleChannelContacts_args;
use base qw(Class::Accessor);
CallService_getAllSimpleChannelContacts_args->mk_accessors( qw( statusSticonFallbackDisabled ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{statusSticonFallbackDisabled} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{statusSticonFallbackDisabled}) {
                                $self->{statusSticonFallbackDisabled} = $vals->{statusSticonFallbackDisabled};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getAllSimpleChannelContacts_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^1$/ && do{                                if ($ftype == Thrift::TType::BOOL) {
                                  $xfer += $input->readBool(\$self->{statusSticonFallbackDisabled});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getAllSimpleChannelContacts_args');
                            if (defined $self->{statusSticonFallbackDisabled}) {
                              $xfer += $output->writeFieldBegin('statusSticonFallbackDisabled', Thrift::TType::BOOL, 1);
                              $xfer += $output->writeBool($self->{statusSticonFallbackDisabled});
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getAllSimpleChannelContacts_result;
use base qw(Class::Accessor);
CallService_getAllSimpleChannelContacts_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getAllSimpleChannelContacts_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::LIST) {
                                  {
                                    my $_size2098 = 0;
                                    $self->{success} = [];
                                    my $_etype2101 = 0;
                                    $xfer += $input->readListBegin(\$_etype2101, \$_size2098);
                                    for (my $_i2102 = 0; $_i2102 < $_size2098; ++$_i2102)
                                    {
                                      my $elem2103 = undef;
                                      $elem2103 = SimpleChannelContact->new();
                                      $xfer += $elem2103->read($input);
                                      push(@{$self->{success}},$elem2103);
                                    }
                                    $xfer += $input->readListEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getAllSimpleChannelContacts_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::LIST, 0);
                              {
                                $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{success}}));
                                {
                                  foreach my $iter2104 (@{$self->{success}}) 
                                  {
                                    $xfer += ${iter2104}->write($output);
                                  }
                                }
                                $xfer += $output->writeListEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getUserIdentities_args;
use base qw(Class::Accessor);

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getUserIdentities_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getUserIdentities_args');
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getUserIdentities_result;
use base qw(Class::Accessor);
CallService_getUserIdentities_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getUserIdentities_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::MAP) {
                                  {
                                    my $_size2105 = 0;
                                    $self->{success} = {};
                                    my $_ktype2106 = 0;
                                    my $_vtype2107 = 0;
                                    $xfer += $input->readMapBegin(\$_ktype2106, \$_vtype2107, \$_size2105);
                                    for (my $_i2109 = 0; $_i2109 < $_size2105; ++$_i2109)
                                    {
                                      my $key2110 = 0;
                                      my $val2111 = '';
                                      $xfer += $input->readI32(\$key2110);
                                      $xfer += $input->readString(\$val2111);
                                      $self->{success}->{$key2110} = $val2111;
                                    }
                                    $xfer += $input->readMapEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getUserIdentities_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::MAP, 0);
                              {
                                $xfer += $output->writeMapBegin(Thrift::TType::I32, Thrift::TType::STRING, scalar(keys %{$self->{success}}));
                                {
                                  while( my ($kiter2112,$viter2113) = each %{$self->{success}}) 
                                  {
                                    $xfer += $output->writeI32($kiter2112);
                                    $xfer += $output->writeString($viter2113);
                                  }
                                }
                                $xfer += $output->writeMapEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_markPaidCallAd_args;
use base qw(Class::Accessor);
CallService_markPaidCallAd_args->mk_accessors( qw( dialedNumber language disableCallerId ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{dialedNumber} = undef;
                            $self->{language} = undef;
                            $self->{disableCallerId} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{dialedNumber}) {
                                $self->{dialedNumber} = $vals->{dialedNumber};
                              }
                              if (defined $vals->{language}) {
                                $self->{language} = $vals->{language};
                              }
                              if (defined $vals->{disableCallerId}) {
                                $self->{disableCallerId} = $vals->{disableCallerId};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_markPaidCallAd_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^2$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{dialedNumber});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^3$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{language});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^4$/ && do{                                if ($ftype == Thrift::TType::BOOL) {
                                  $xfer += $input->readBool(\$self->{disableCallerId});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_markPaidCallAd_args');
                            if (defined $self->{dialedNumber}) {
                              $xfer += $output->writeFieldBegin('dialedNumber', Thrift::TType::STRING, 2);
                              $xfer += $output->writeString($self->{dialedNumber});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{language}) {
                              $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 3);
                              $xfer += $output->writeString($self->{language});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{disableCallerId}) {
                              $xfer += $output->writeFieldBegin('disableCallerId', Thrift::TType::BOOL, 4);
                              $xfer += $output->writeBool($self->{disableCallerId});
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_markPaidCallAd_result;
use base qw(Class::Accessor);
CallService_markPaidCallAd_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_markPaidCallAd_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{success} = PaidCallDialing->new();
                                  $xfer += $self->{success}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_markPaidCallAd_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                              $xfer += $self->{success}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_isGroupMember_args;
use base qw(Class::Accessor);
CallService_isGroupMember_args->mk_accessors( qw( groupId ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{groupId} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{groupId}) {
                                $self->{groupId} = $vals->{groupId};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_isGroupMember_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{groupId});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_isGroupMember_args');
                            if (defined $self->{groupId}) {
                              $xfer += $output->writeFieldBegin('groupId', Thrift::TType::STRING, 1);
                              $xfer += $output->writeString($self->{groupId});
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_isGroupMember_result;
use base qw(Class::Accessor);
CallService_isGroupMember_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_isGroupMember_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::BOOL) {
                                  $xfer += $input->readBool(\$self->{success});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_isGroupMember_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::BOOL, 0);
                              $xfer += $output->writeBool($self->{success});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getPhoneInfoFromPhoneNumber_args;
use base qw(Class::Accessor);
CallService_getPhoneInfoFromPhoneNumber_args->mk_accessors( qw( region phoneNumber ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{region} = undef;
                            $self->{phoneNumber} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{region}) {
                                $self->{region} = $vals->{region};
                              }
                              if (defined $vals->{phoneNumber}) {
                                $self->{phoneNumber} = $vals->{phoneNumber};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getPhoneInfoFromPhoneNumber_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{region});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^2$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{phoneNumber});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getPhoneInfoFromPhoneNumber_args');
                            if (defined $self->{region}) {
                              $xfer += $output->writeFieldBegin('region', Thrift::TType::STRING, 1);
                              $xfer += $output->writeString($self->{region});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{phoneNumber}) {
                              $xfer += $output->writeFieldBegin('phoneNumber', Thrift::TType::STRING, 2);
                              $xfer += $output->writeString($self->{phoneNumber});
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getPhoneInfoFromPhoneNumber_result;
use base qw(Class::Accessor);
CallService_getPhoneInfoFromPhoneNumber_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getPhoneInfoFromPhoneNumber_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{success} = PhoneInfoForChannel->new();
                                  $xfer += $self->{success}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getPhoneInfoFromPhoneNumber_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                              $xfer += $self->{success}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_redeemPaidCallVoucher_args;
use base qw(Class::Accessor);
CallService_redeemPaidCallVoucher_args->mk_accessors( qw( serial language ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{serial} = undef;
                            $self->{language} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{serial}) {
                                $self->{serial} = $vals->{serial};
                              }
                              if (defined $vals->{language}) {
                                $self->{language} = $vals->{language};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_redeemPaidCallVoucher_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^2$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{serial});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^3$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{language});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_redeemPaidCallVoucher_args');
                            if (defined $self->{serial}) {
                              $xfer += $output->writeFieldBegin('serial', Thrift::TType::STRING, 2);
                              $xfer += $output->writeString($self->{serial});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{language}) {
                              $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 3);
                              $xfer += $output->writeString($self->{language});
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_redeemPaidCallVoucher_result;
use base qw(Class::Accessor);
CallService_redeemPaidCallVoucher_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_redeemPaidCallVoucher_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{success} = PaidCallRedeemResult->new();
                                  $xfer += $self->{success}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_redeemPaidCallVoucher_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                              $xfer += $self->{success}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getPreferredDisplayName_args;
use base qw(Class::Accessor);
CallService_getPreferredDisplayName_args->mk_accessors( qw( mids ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{mids} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{mids}) {
                                $self->{mids} = $vals->{mids};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getPreferredDisplayName_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^1$/ && do{                                if ($ftype == Thrift::TType::LIST) {
                                  {
                                    my $_size2114 = 0;
                                    $self->{mids} = [];
                                    my $_etype2117 = 0;
                                    $xfer += $input->readListBegin(\$_etype2117, \$_size2114);
                                    for (my $_i2118 = 0; $_i2118 < $_size2114; ++$_i2118)
                                    {
                                      my $elem2119 = undef;
                                      $xfer += $input->readString(\$elem2119);
                                      push(@{$self->{mids}},$elem2119);
                                    }
                                    $xfer += $input->readListEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getPreferredDisplayName_args');
                            if (defined $self->{mids}) {
                              $xfer += $output->writeFieldBegin('mids', Thrift::TType::LIST, 1);
                              {
                                $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{mids}}));
                                {
                                  foreach my $iter2120 (@{$self->{mids}}) 
                                  {
                                    $xfer += $output->writeString($iter2120);
                                  }
                                }
                                $xfer += $output->writeListEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getPreferredDisplayName_result;
use base qw(Class::Accessor);
CallService_getPreferredDisplayName_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getPreferredDisplayName_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::MAP) {
                                  {
                                    my $_size2121 = 0;
                                    $self->{success} = {};
                                    my $_ktype2122 = 0;
                                    my $_vtype2123 = 0;
                                    $xfer += $input->readMapBegin(\$_ktype2122, \$_vtype2123, \$_size2121);
                                    for (my $_i2125 = 0; $_i2125 < $_size2121; ++$_i2125)
                                    {
                                      my $key2126 = '';
                                      my $val2127 = '';
                                      $xfer += $input->readString(\$key2126);
                                      $xfer += $input->readString(\$val2127);
                                      $self->{success}->{$key2126} = $val2127;
                                    }
                                    $xfer += $input->readMapEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getPreferredDisplayName_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::MAP, 0);
                              {
                                $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{success}}));
                                {
                                  while( my ($kiter2128,$viter2129) = each %{$self->{success}}) 
                                  {
                                    $xfer += $output->writeString($kiter2128);
                                    $xfer += $output->writeString($viter2129);
                                  }
                                }
                                $xfer += $output->writeMapEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getContactsForChannel_args;
use base qw(Class::Accessor);
CallService_getContactsForChannel_args->mk_accessors( qw( ids ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{ids} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{ids}) {
                                $self->{ids} = $vals->{ids};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getContactsForChannel_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^2$/ && do{                                if ($ftype == Thrift::TType::LIST) {
                                  {
                                    my $_size2130 = 0;
                                    $self->{ids} = [];
                                    my $_etype2133 = 0;
                                    $xfer += $input->readListBegin(\$_etype2133, \$_size2130);
                                    for (my $_i2134 = 0; $_i2134 < $_size2130; ++$_i2134)
                                    {
                                      my $elem2135 = undef;
                                      $xfer += $input->readString(\$elem2135);
                                      push(@{$self->{ids}},$elem2135);
                                    }
                                    $xfer += $input->readListEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getContactsForChannel_args');
                            if (defined $self->{ids}) {
                              $xfer += $output->writeFieldBegin('ids', Thrift::TType::LIST, 2);
                              {
                                $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{ids}}));
                                {
                                  foreach my $iter2136 (@{$self->{ids}}) 
                                  {
                                    $xfer += $output->writeString($iter2136);
                                  }
                                }
                                $xfer += $output->writeListEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getContactsForChannel_result;
use base qw(Class::Accessor);
CallService_getContactsForChannel_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getContactsForChannel_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::LIST) {
                                  {
                                    my $_size2137 = 0;
                                    $self->{success} = [];
                                    my $_etype2140 = 0;
                                    $xfer += $input->readListBegin(\$_etype2140, \$_size2137);
                                    for (my $_i2141 = 0; $_i2141 < $_size2137; ++$_i2141)
                                    {
                                      my $elem2142 = undef;
                                      $elem2142 = Contact->new();
                                      $xfer += $elem2142->read($input);
                                      push(@{$self->{success}},$elem2142);
                                    }
                                    $xfer += $input->readListEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getContactsForChannel_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::LIST, 0);
                              {
                                $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{success}}));
                                {
                                  foreach my $iter2143 (@{$self->{success}}) 
                                  {
                                    $xfer += ${iter2143}->write($output);
                                  }
                                }
                                $xfer += $output->writeListEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getCallCreditProducts_args;
use base qw(Class::Accessor);
CallService_getCallCreditProducts_args->mk_accessors( qw( appStoreCode pgCode country language ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{appStoreCode} = undef;
                            $self->{pgCode} = undef;
                            $self->{country} = undef;
                            $self->{language} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{appStoreCode}) {
                                $self->{appStoreCode} = $vals->{appStoreCode};
                              }
                              if (defined $vals->{pgCode}) {
                                $self->{pgCode} = $vals->{pgCode};
                              }
                              if (defined $vals->{country}) {
                                $self->{country} = $vals->{country};
                              }
                              if (defined $vals->{language}) {
                                $self->{language} = $vals->{language};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getCallCreditProducts_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^2$/ && do{                                if ($ftype == Thrift::TType::I32) {
                                  $xfer += $input->readI32(\$self->{appStoreCode});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^3$/ && do{                                if ($ftype == Thrift::TType::I32) {
                                  $xfer += $input->readI32(\$self->{pgCode});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^4$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{country});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^5$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{language});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getCallCreditProducts_args');
                            if (defined $self->{appStoreCode}) {
                              $xfer += $output->writeFieldBegin('appStoreCode', Thrift::TType::I32, 2);
                              $xfer += $output->writeI32($self->{appStoreCode});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{pgCode}) {
                              $xfer += $output->writeFieldBegin('pgCode', Thrift::TType::I32, 3);
                              $xfer += $output->writeI32($self->{pgCode});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{country}) {
                              $xfer += $output->writeFieldBegin('country', Thrift::TType::STRING, 4);
                              $xfer += $output->writeString($self->{country});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{language}) {
                              $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 5);
                              $xfer += $output->writeString($self->{language});
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getCallCreditProducts_result;
use base qw(Class::Accessor);
CallService_getCallCreditProducts_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getCallCreditProducts_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::LIST) {
                                  {
                                    my $_size2144 = 0;
                                    $self->{success} = [];
                                    my $_etype2147 = 0;
                                    $xfer += $input->readListBegin(\$_etype2147, \$_size2144);
                                    for (my $_i2148 = 0; $_i2148 < $_size2144; ++$_i2148)
                                    {
                                      my $elem2149 = undef;
                                      $elem2149 = CoinProductItem->new();
                                      $xfer += $elem2149->read($input);
                                      push(@{$self->{success}},$elem2149);
                                    }
                                    $xfer += $input->readListEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getCallCreditProducts_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::LIST, 0);
                              {
                                $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{success}}));
                                {
                                  foreach my $iter2150 (@{$self->{success}}) 
                                  {
                                    $xfer += ${iter2150}->write($output);
                                  }
                                }
                                $xfer += $output->writeListEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getCompactContacts_args;
use base qw(Class::Accessor);
CallService_getCompactContacts_args->mk_accessors( qw( lastModifiedTimestamp ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{lastModifiedTimestamp} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{lastModifiedTimestamp}) {
                                $self->{lastModifiedTimestamp} = $vals->{lastModifiedTimestamp};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getCompactContacts_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^2$/ && do{                                if ($ftype == Thrift::TType::I64) {
                                  $xfer += $input->readI64(\$self->{lastModifiedTimestamp});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getCompactContacts_args');
                            if (defined $self->{lastModifiedTimestamp}) {
                              $xfer += $output->writeFieldBegin('lastModifiedTimestamp', Thrift::TType::I64, 2);
                              $xfer += $output->writeI64($self->{lastModifiedTimestamp});
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getCompactContacts_result;
use base qw(Class::Accessor);
CallService_getCompactContacts_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getCompactContacts_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::LIST) {
                                  {
                                    my $_size2151 = 0;
                                    $self->{success} = [];
                                    my $_etype2154 = 0;
                                    $xfer += $input->readListBegin(\$_etype2154, \$_size2151);
                                    for (my $_i2155 = 0; $_i2155 < $_size2151; ++$_i2155)
                                    {
                                      my $elem2156 = undef;
                                      $elem2156 = CompactContact->new();
                                      $xfer += $elem2156->read($input);
                                      push(@{$self->{success}},$elem2156);
                                    }
                                    $xfer += $input->readListEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getCompactContacts_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::LIST, 0);
                              {
                                $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{success}}));
                                {
                                  foreach my $iter2157 (@{$self->{success}}) 
                                  {
                                    $xfer += ${iter2157}->write($output);
                                  }
                                }
                                $xfer += $output->writeListEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_notifyNotiCenterEvent_args;
use base qw(Class::Accessor);
CallService_notifyNotiCenterEvent_args->mk_accessors( qw( event ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{event} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{event}) {
                                $self->{event} = $vals->{event};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_notifyNotiCenterEvent_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{event} = NotiCenterEventData->new();
                                  $xfer += $self->{event}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_notifyNotiCenterEvent_args');
                            if (defined $self->{event}) {
                              $xfer += $output->writeFieldBegin('event', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{event}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_notifyNotiCenterEvent_result;
use base qw(Class::Accessor);
CallService_notifyNotiCenterEvent_result->mk_accessors( qw( ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_notifyNotiCenterEvent_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_notifyNotiCenterEvent_result');
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_isInContact_args;
use base qw(Class::Accessor);
CallService_isInContact_args->mk_accessors( qw( mid ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{mid} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{mid}) {
                                $self->{mid} = $vals->{mid};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_isInContact_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^2$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{mid});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_isInContact_args');
                            if (defined $self->{mid}) {
                              $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 2);
                              $xfer += $output->writeString($self->{mid});
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_isInContact_result;
use base qw(Class::Accessor);
CallService_isInContact_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_isInContact_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::BOOL) {
                                  $xfer += $input->readBool(\$self->{success});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_isInContact_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::BOOL, 0);
                              $xfer += $output->writeBool($self->{success});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_lookupGroupMembers_args;
use base qw(Class::Accessor);
CallService_lookupGroupMembers_args->mk_accessors( qw( groupId mids ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{groupId} = undef;
                            $self->{mids} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{groupId}) {
                                $self->{groupId} = $vals->{groupId};
                              }
                              if (defined $vals->{mids}) {
                                $self->{mids} = $vals->{mids};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_lookupGroupMembers_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{groupId});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^2$/ && do{                                if ($ftype == Thrift::TType::LIST) {
                                  {
                                    my $_size2158 = 0;
                                    $self->{mids} = [];
                                    my $_etype2161 = 0;
                                    $xfer += $input->readListBegin(\$_etype2161, \$_size2158);
                                    for (my $_i2162 = 0; $_i2162 < $_size2158; ++$_i2162)
                                    {
                                      my $elem2163 = undef;
                                      $xfer += $input->readString(\$elem2163);
                                      push(@{$self->{mids}},$elem2163);
                                    }
                                    $xfer += $input->readListEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_lookupGroupMembers_args');
                            if (defined $self->{groupId}) {
                              $xfer += $output->writeFieldBegin('groupId', Thrift::TType::STRING, 1);
                              $xfer += $output->writeString($self->{groupId});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{mids}) {
                              $xfer += $output->writeFieldBegin('mids', Thrift::TType::LIST, 2);
                              {
                                $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{mids}}));
                                {
                                  foreach my $iter2164 (@{$self->{mids}}) 
                                  {
                                    $xfer += $output->writeString($iter2164);
                                  }
                                }
                                $xfer += $output->writeListEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_lookupGroupMembers_result;
use base qw(Class::Accessor);
CallService_lookupGroupMembers_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_lookupGroupMembers_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::LIST) {
                                  {
                                    my $_size2165 = 0;
                                    $self->{success} = [];
                                    my $_etype2168 = 0;
                                    $xfer += $input->readListBegin(\$_etype2168, \$_size2165);
                                    for (my $_i2169 = 0; $_i2169 < $_size2165; ++$_i2169)
                                    {
                                      my $elem2170 = undef;
                                      $elem2170 = SimpleChannelContact->new();
                                      $xfer += $elem2170->read($input);
                                      push(@{$self->{success}},$elem2170);
                                    }
                                    $xfer += $input->readListEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_lookupGroupMembers_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::LIST, 0);
                              {
                                $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{success}}));
                                {
                                  foreach my $iter2171 (@{$self->{success}}) 
                                  {
                                    $xfer += ${iter2171}->write($output);
                                  }
                                }
                                $xfer += $output->writeListEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getRoomInformation_args;
use base qw(Class::Accessor);
CallService_getRoomInformation_args->mk_accessors( qw( roomMid ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{roomMid} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{roomMid}) {
                                $self->{roomMid} = $vals->{roomMid};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getRoomInformation_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{roomMid});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getRoomInformation_args');
                            if (defined $self->{roomMid}) {
                              $xfer += $output->writeFieldBegin('roomMid', Thrift::TType::STRING, 1);
                              $xfer += $output->writeString($self->{roomMid});
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getRoomInformation_result;
use base qw(Class::Accessor);
CallService_getRoomInformation_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getRoomInformation_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{success} = Room->new();
                                  $xfer += $self->{success}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getRoomInformation_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                              $xfer += $self->{success}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getGroupCall_args;
use base qw(Class::Accessor);
CallService_getGroupCall_args->mk_accessors( qw( chatMid ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{chatMid} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{chatMid}) {
                                $self->{chatMid} = $vals->{chatMid};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getGroupCall_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^2$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{chatMid});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getGroupCall_args');
                            if (defined $self->{chatMid}) {
                              $xfer += $output->writeFieldBegin('chatMid', Thrift::TType::STRING, 2);
                              $xfer += $output->writeString($self->{chatMid});
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getGroupCall_result;
use base qw(Class::Accessor);
CallService_getGroupCall_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getGroupCall_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{success} = GroupCall->new();
                                  $xfer += $self->{success}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getGroupCall_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                              $xfer += $self->{success}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_isAllowSecondaryDeviceLogin_args;
use base qw(Class::Accessor);

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_isAllowSecondaryDeviceLogin_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_isAllowSecondaryDeviceLogin_args');
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_isAllowSecondaryDeviceLogin_result;
use base qw(Class::Accessor);
CallService_isAllowSecondaryDeviceLogin_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_isAllowSecondaryDeviceLogin_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::BOOL) {
                                  $xfer += $input->readBool(\$self->{success});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_isAllowSecondaryDeviceLogin_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::BOOL, 0);
                              $xfer += $output->writeBool($self->{success});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getPrimaryClientForChannel_args;
use base qw(Class::Accessor);

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getPrimaryClientForChannel_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getPrimaryClientForChannel_args');
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getPrimaryClientForChannel_result;
use base qw(Class::Accessor);
CallService_getPrimaryClientForChannel_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getPrimaryClientForChannel_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{success} = SimpleChannelClient->new();
                                  $xfer += $self->{success}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getPrimaryClientForChannel_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                              $xfer += $self->{success}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_createRoomWithBuddy_args;
use base qw(Class::Accessor);
CallService_createRoomWithBuddy_args->mk_accessors( qw( reqSeq buddyMid contactIds ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{reqSeq} = undef;
                            $self->{buddyMid} = undef;
                            $self->{contactIds} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{reqSeq}) {
                                $self->{reqSeq} = $vals->{reqSeq};
                              }
                              if (defined $vals->{buddyMid}) {
                                $self->{buddyMid} = $vals->{buddyMid};
                              }
                              if (defined $vals->{contactIds}) {
                                $self->{contactIds} = $vals->{contactIds};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_createRoomWithBuddy_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^1$/ && do{                                if ($ftype == Thrift::TType::I32) {
                                  $xfer += $input->readI32(\$self->{reqSeq});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^2$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{buddyMid});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^3$/ && do{                                if ($ftype == Thrift::TType::LIST) {
                                  {
                                    my $_size2172 = 0;
                                    $self->{contactIds} = [];
                                    my $_etype2175 = 0;
                                    $xfer += $input->readListBegin(\$_etype2175, \$_size2172);
                                    for (my $_i2176 = 0; $_i2176 < $_size2172; ++$_i2176)
                                    {
                                      my $elem2177 = undef;
                                      $xfer += $input->readString(\$elem2177);
                                      push(@{$self->{contactIds}},$elem2177);
                                    }
                                    $xfer += $input->readListEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_createRoomWithBuddy_args');
                            if (defined $self->{reqSeq}) {
                              $xfer += $output->writeFieldBegin('reqSeq', Thrift::TType::I32, 1);
                              $xfer += $output->writeI32($self->{reqSeq});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{buddyMid}) {
                              $xfer += $output->writeFieldBegin('buddyMid', Thrift::TType::STRING, 2);
                              $xfer += $output->writeString($self->{buddyMid});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{contactIds}) {
                              $xfer += $output->writeFieldBegin('contactIds', Thrift::TType::LIST, 3);
                              {
                                $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{contactIds}}));
                                {
                                  foreach my $iter2178 (@{$self->{contactIds}}) 
                                  {
                                    $xfer += $output->writeString($iter2178);
                                  }
                                }
                                $xfer += $output->writeListEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_createRoomWithBuddy_result;
use base qw(Class::Accessor);
CallService_createRoomWithBuddy_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_createRoomWithBuddy_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{success} = Room->new();
                                  $xfer += $self->{success}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_createRoomWithBuddy_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                              $xfer += $self->{success}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getDisplayName_args;
use base qw(Class::Accessor);
CallService_getDisplayName_args->mk_accessors( qw( mid ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{mid} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{mid}) {
                                $self->{mid} = $vals->{mid};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getDisplayName_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^2$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{mid});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getDisplayName_args');
                            if (defined $self->{mid}) {
                              $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 2);
                              $xfer += $output->writeString($self->{mid});
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getDisplayName_result;
use base qw(Class::Accessor);
CallService_getDisplayName_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getDisplayName_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{success});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getDisplayName_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::STRING, 0);
                              $xfer += $output->writeString($self->{success});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getPaidCallMetadata_args;
use base qw(Class::Accessor);
CallService_getPaidCallMetadata_args->mk_accessors( qw( language ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{language} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{language}) {
                                $self->{language} = $vals->{language};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getPaidCallMetadata_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^2$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{language});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getPaidCallMetadata_args');
                            if (defined $self->{language}) {
                              $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 2);
                              $xfer += $output->writeString($self->{language});
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getPaidCallMetadata_result;
use base qw(Class::Accessor);
CallService_getPaidCallMetadata_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getPaidCallMetadata_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{success} = PaidCallMetadataResult->new();
                                  $xfer += $self->{success}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getPaidCallMetadata_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                              $xfer += $self->{success}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getMid_args;
use base qw(Class::Accessor);

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getMid_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getMid_args');
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getMid_result;
use base qw(Class::Accessor);
CallService_getMid_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getMid_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{success});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getMid_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::STRING, 0);
                              $xfer += $output->writeString($self->{success});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getUserCountryForBilling_args;
use base qw(Class::Accessor);
CallService_getUserCountryForBilling_args->mk_accessors( qw( country remoteIp ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{country} = undef;
                            $self->{remoteIp} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{country}) {
                                $self->{country} = $vals->{country};
                              }
                              if (defined $vals->{remoteIp}) {
                                $self->{remoteIp} = $vals->{remoteIp};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getUserCountryForBilling_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^2$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{country});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^3$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{remoteIp});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getUserCountryForBilling_args');
                            if (defined $self->{country}) {
                              $xfer += $output->writeFieldBegin('country', Thrift::TType::STRING, 2);
                              $xfer += $output->writeString($self->{country});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{remoteIp}) {
                              $xfer += $output->writeFieldBegin('remoteIp', Thrift::TType::STRING, 3);
                              $xfer += $output->writeString($self->{remoteIp});
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getUserCountryForBilling_result;
use base qw(Class::Accessor);
CallService_getUserCountryForBilling_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getUserCountryForBilling_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{success});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getUserCountryForBilling_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::STRING, 0);
                              $xfer += $output->writeString($self->{success});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getFavoriteGroupIdsForChannel_args;
use base qw(Class::Accessor);

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getFavoriteGroupIdsForChannel_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getFavoriteGroupIdsForChannel_args');
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getFavoriteGroupIdsForChannel_result;
use base qw(Class::Accessor);
CallService_getFavoriteGroupIdsForChannel_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getFavoriteGroupIdsForChannel_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::LIST) {
                                  {
                                    my $_size2179 = 0;
                                    $self->{success} = [];
                                    my $_etype2182 = 0;
                                    $xfer += $input->readListBegin(\$_etype2182, \$_size2179);
                                    for (my $_i2183 = 0; $_i2183 < $_size2179; ++$_i2183)
                                    {
                                      my $elem2184 = undef;
                                      $xfer += $input->readString(\$elem2184);
                                      push(@{$self->{success}},$elem2184);
                                    }
                                    $xfer += $input->readListEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getFavoriteGroupIdsForChannel_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::LIST, 0);
                              {
                                $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{success}}));
                                {
                                  foreach my $iter2185 (@{$self->{success}}) 
                                  {
                                    $xfer += $output->writeString($iter2185);
                                  }
                                }
                                $xfer += $output->writeListEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getPaidCallHistory_args;
use base qw(Class::Accessor);
CallService_getPaidCallHistory_args->mk_accessors( qw( start size language ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{start} = undef;
                            $self->{size} = undef;
                            $self->{language} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{start}) {
                                $self->{start} = $vals->{start};
                              }
                              if (defined $vals->{size}) {
                                $self->{size} = $vals->{size};
                              }
                              if (defined $vals->{language}) {
                                $self->{language} = $vals->{language};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getPaidCallHistory_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^2$/ && do{                                if ($ftype == Thrift::TType::I64) {
                                  $xfer += $input->readI64(\$self->{start});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^3$/ && do{                                if ($ftype == Thrift::TType::I32) {
                                  $xfer += $input->readI32(\$self->{size});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^4$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{language});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getPaidCallHistory_args');
                            if (defined $self->{start}) {
                              $xfer += $output->writeFieldBegin('start', Thrift::TType::I64, 2);
                              $xfer += $output->writeI64($self->{start});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{size}) {
                              $xfer += $output->writeFieldBegin('size', Thrift::TType::I32, 3);
                              $xfer += $output->writeI32($self->{size});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{language}) {
                              $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 4);
                              $xfer += $output->writeString($self->{language});
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getPaidCallHistory_result;
use base qw(Class::Accessor);
CallService_getPaidCallHistory_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getPaidCallHistory_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{success} = PaidCallHistoryResult->new();
                                  $xfer += $self->{success}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getPaidCallHistory_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                              $xfer += $self->{success}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_sendPinCodeOperation_args;
use base qw(Class::Accessor);
CallService_sendPinCodeOperation_args->mk_accessors( qw( verifier ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{verifier} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{verifier}) {
                                $self->{verifier} = $vals->{verifier};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_sendPinCodeOperation_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{verifier});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_sendPinCodeOperation_args');
                            if (defined $self->{verifier}) {
                              $xfer += $output->writeFieldBegin('verifier', Thrift::TType::STRING, 1);
                              $xfer += $output->writeString($self->{verifier});
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_sendPinCodeOperation_result;
use base qw(Class::Accessor);
CallService_sendPinCodeOperation_result->mk_accessors( qw( ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_sendPinCodeOperation_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_sendPinCodeOperation_result');
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_inviteIntoGroupCall_args;
use base qw(Class::Accessor);
CallService_inviteIntoGroupCall_args->mk_accessors( qw( chatMid memberMids mediaType ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{chatMid} = undef;
                            $self->{memberMids} = undef;
                            $self->{mediaType} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{chatMid}) {
                                $self->{chatMid} = $vals->{chatMid};
                              }
                              if (defined $vals->{memberMids}) {
                                $self->{memberMids} = $vals->{memberMids};
                              }
                              if (defined $vals->{mediaType}) {
                                $self->{mediaType} = $vals->{mediaType};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_inviteIntoGroupCall_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^2$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{chatMid});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^3$/ && do{                                if ($ftype == Thrift::TType::LIST) {
                                  {
                                    my $_size2186 = 0;
                                    $self->{memberMids} = [];
                                    my $_etype2189 = 0;
                                    $xfer += $input->readListBegin(\$_etype2189, \$_size2186);
                                    for (my $_i2190 = 0; $_i2190 < $_size2186; ++$_i2190)
                                    {
                                      my $elem2191 = undef;
                                      $xfer += $input->readString(\$elem2191);
                                      push(@{$self->{memberMids}},$elem2191);
                                    }
                                    $xfer += $input->readListEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^4$/ && do{                                if ($ftype == Thrift::TType::I32) {
                                  $xfer += $input->readI32(\$self->{mediaType});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_inviteIntoGroupCall_args');
                            if (defined $self->{chatMid}) {
                              $xfer += $output->writeFieldBegin('chatMid', Thrift::TType::STRING, 2);
                              $xfer += $output->writeString($self->{chatMid});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{memberMids}) {
                              $xfer += $output->writeFieldBegin('memberMids', Thrift::TType::LIST, 3);
                              {
                                $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{memberMids}}));
                                {
                                  foreach my $iter2192 (@{$self->{memberMids}}) 
                                  {
                                    $xfer += $output->writeString($iter2192);
                                  }
                                }
                                $xfer += $output->writeListEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{mediaType}) {
                              $xfer += $output->writeFieldBegin('mediaType', Thrift::TType::I32, 4);
                              $xfer += $output->writeI32($self->{mediaType});
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_inviteIntoGroupCall_result;
use base qw(Class::Accessor);
CallService_inviteIntoGroupCall_result->mk_accessors( qw( ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_inviteIntoGroupCall_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_inviteIntoGroupCall_result');
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getFriendMids_args;
use base qw(Class::Accessor);

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getFriendMids_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getFriendMids_args');
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getFriendMids_result;
use base qw(Class::Accessor);
CallService_getFriendMids_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getFriendMids_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::LIST) {
                                  {
                                    my $_size2193 = 0;
                                    $self->{success} = [];
                                    my $_etype2196 = 0;
                                    $xfer += $input->readListBegin(\$_etype2196, \$_size2193);
                                    for (my $_i2197 = 0; $_i2197 < $_size2193; ++$_i2197)
                                    {
                                      my $elem2198 = undef;
                                      $xfer += $input->readString(\$elem2198);
                                      push(@{$self->{success}},$elem2198);
                                    }
                                    $xfer += $input->readListEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getFriendMids_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::LIST, 0);
                              {
                                $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{success}}));
                                {
                                  foreach my $iter2199 (@{$self->{success}}) 
                                  {
                                    $xfer += $output->writeString($iter2199);
                                  }
                                }
                                $xfer += $output->writeListEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getMetaProfile_args;
use base qw(Class::Accessor);

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getMetaProfile_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getMetaProfile_args');
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getMetaProfile_result;
use base qw(Class::Accessor);
CallService_getMetaProfile_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getMetaProfile_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{success} = MetaProfile->new();
                                  $xfer += $self->{success}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getMetaProfile_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                              $xfer += $self->{success}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_sendMessageForChannel_args;
use base qw(Class::Accessor);
CallService_sendMessageForChannel_args->mk_accessors( qw( message ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{message} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{message}) {
                                $self->{message} = $vals->{message};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_sendMessageForChannel_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^2$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{message} = Message->new();
                                  $xfer += $self->{message}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_sendMessageForChannel_args');
                            if (defined $self->{message}) {
                              $xfer += $output->writeFieldBegin('message', Thrift::TType::STRUCT, 2);
                              $xfer += $self->{message}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_sendMessageForChannel_result;
use base qw(Class::Accessor);
CallService_sendMessageForChannel_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_sendMessageForChannel_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{success} = Message->new();
                                  $xfer += $self->{success}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_sendMessageForChannel_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                              $xfer += $self->{success}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_activeBuddySubscriberCount_args;
use base qw(Class::Accessor);

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_activeBuddySubscriberCount_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_activeBuddySubscriberCount_args');
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_activeBuddySubscriberCount_result;
use base qw(Class::Accessor);
CallService_activeBuddySubscriberCount_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_activeBuddySubscriberCount_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::I64) {
                                  $xfer += $input->readI64(\$self->{success});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_activeBuddySubscriberCount_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::I64, 0);
                              $xfer += $output->writeI64($self->{success});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getCallCreditPurchaseHistory_args;
use base qw(Class::Accessor);
CallService_getCallCreditPurchaseHistory_args->mk_accessors( qw( request ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{request} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{request}) {
                                $self->{request} = $vals->{request};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getCallCreditPurchaseHistory_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^2$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{request} = CoinHistoryCondition->new();
                                  $xfer += $self->{request}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getCallCreditPurchaseHistory_args');
                            if (defined $self->{request}) {
                              $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 2);
                              $xfer += $self->{request}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getCallCreditPurchaseHistory_result;
use base qw(Class::Accessor);
CallService_getCallCreditPurchaseHistory_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getCallCreditPurchaseHistory_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{success} = CoinHistoryResult->new();
                                  $xfer += $self->{success}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getCallCreditPurchaseHistory_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                              $xfer += $self->{success}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_isRoomMember_args;
use base qw(Class::Accessor);
CallService_isRoomMember_args->mk_accessors( qw( roomId ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{roomId} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{roomId}) {
                                $self->{roomId} = $vals->{roomId};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_isRoomMember_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{roomId});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_isRoomMember_args');
                            if (defined $self->{roomId}) {
                              $xfer += $output->writeFieldBegin('roomId', Thrift::TType::STRING, 1);
                              $xfer += $output->writeString($self->{roomId});
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_isRoomMember_result;
use base qw(Class::Accessor);
CallService_isRoomMember_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_isRoomMember_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::BOOL) {
                                  $xfer += $input->readBool(\$self->{success});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_isRoomMember_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::BOOL, 0);
                              $xfer += $output->writeBool($self->{success});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_sendSystemOAMessage_args;
use base qw(Class::Accessor);
CallService_sendSystemOAMessage_args->mk_accessors( qw( message ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{message} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{message}) {
                                $self->{message} = $vals->{message};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_sendSystemOAMessage_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{message} = Message->new();
                                  $xfer += $self->{message}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_sendSystemOAMessage_args');
                            if (defined $self->{message}) {
                              $xfer += $output->writeFieldBegin('message', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{message}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_sendSystemOAMessage_result;
use base qw(Class::Accessor);
CallService_sendSystemOAMessage_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_sendSystemOAMessage_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{success} = Message->new();
                                  $xfer += $self->{success}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_sendSystemOAMessage_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                              $xfer += $self->{success}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_acquirePaidCallRoute_args;
use base qw(Class::Accessor);
CallService_acquirePaidCallRoute_args->mk_accessors( qw( paidCallType dialedNumber language networkCode disableCallerId referer adSessionId ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{paidCallType} = undef;
                            $self->{dialedNumber} = undef;
                            $self->{language} = undef;
                            $self->{networkCode} = undef;
                            $self->{disableCallerId} = undef;
                            $self->{referer} = undef;
                            $self->{adSessionId} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{paidCallType}) {
                                $self->{paidCallType} = $vals->{paidCallType};
                              }
                              if (defined $vals->{dialedNumber}) {
                                $self->{dialedNumber} = $vals->{dialedNumber};
                              }
                              if (defined $vals->{language}) {
                                $self->{language} = $vals->{language};
                              }
                              if (defined $vals->{networkCode}) {
                                $self->{networkCode} = $vals->{networkCode};
                              }
                              if (defined $vals->{disableCallerId}) {
                                $self->{disableCallerId} = $vals->{disableCallerId};
                              }
                              if (defined $vals->{referer}) {
                                $self->{referer} = $vals->{referer};
                              }
                              if (defined $vals->{adSessionId}) {
                                $self->{adSessionId} = $vals->{adSessionId};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_acquirePaidCallRoute_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^2$/ && do{                                if ($ftype == Thrift::TType::I32) {
                                  $xfer += $input->readI32(\$self->{paidCallType});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^3$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{dialedNumber});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^4$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{language});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^5$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{networkCode});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^6$/ && do{                                if ($ftype == Thrift::TType::BOOL) {
                                  $xfer += $input->readBool(\$self->{disableCallerId});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^7$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{referer});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^8$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{adSessionId});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_acquirePaidCallRoute_args');
                            if (defined $self->{paidCallType}) {
                              $xfer += $output->writeFieldBegin('paidCallType', Thrift::TType::I32, 2);
                              $xfer += $output->writeI32($self->{paidCallType});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{dialedNumber}) {
                              $xfer += $output->writeFieldBegin('dialedNumber', Thrift::TType::STRING, 3);
                              $xfer += $output->writeString($self->{dialedNumber});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{language}) {
                              $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 4);
                              $xfer += $output->writeString($self->{language});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{networkCode}) {
                              $xfer += $output->writeFieldBegin('networkCode', Thrift::TType::STRING, 5);
                              $xfer += $output->writeString($self->{networkCode});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{disableCallerId}) {
                              $xfer += $output->writeFieldBegin('disableCallerId', Thrift::TType::BOOL, 6);
                              $xfer += $output->writeBool($self->{disableCallerId});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{referer}) {
                              $xfer += $output->writeFieldBegin('referer', Thrift::TType::STRING, 7);
                              $xfer += $output->writeString($self->{referer});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{adSessionId}) {
                              $xfer += $output->writeFieldBegin('adSessionId', Thrift::TType::STRING, 8);
                              $xfer += $output->writeString($self->{adSessionId});
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_acquirePaidCallRoute_result;
use base qw(Class::Accessor);
CallService_acquirePaidCallRoute_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_acquirePaidCallRoute_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{success} = PaidCallResponse->new();
                                  $xfer += $self->{success}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_acquirePaidCallRoute_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                              $xfer += $self->{success}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getGroupsForChannel_args;
use base qw(Class::Accessor);
CallService_getGroupsForChannel_args->mk_accessors( qw( groupIds ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{groupIds} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{groupIds}) {
                                $self->{groupIds} = $vals->{groupIds};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getGroupsForChannel_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^1$/ && do{                                if ($ftype == Thrift::TType::LIST) {
                                  {
                                    my $_size2200 = 0;
                                    $self->{groupIds} = [];
                                    my $_etype2203 = 0;
                                    $xfer += $input->readListBegin(\$_etype2203, \$_size2200);
                                    for (my $_i2204 = 0; $_i2204 < $_size2200; ++$_i2204)
                                    {
                                      my $elem2205 = undef;
                                      $xfer += $input->readString(\$elem2205);
                                      push(@{$self->{groupIds}},$elem2205);
                                    }
                                    $xfer += $input->readListEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getGroupsForChannel_args');
                            if (defined $self->{groupIds}) {
                              $xfer += $output->writeFieldBegin('groupIds', Thrift::TType::LIST, 1);
                              {
                                $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{groupIds}}));
                                {
                                  foreach my $iter2206 (@{$self->{groupIds}}) 
                                  {
                                    $xfer += $output->writeString($iter2206);
                                  }
                                }
                                $xfer += $output->writeListEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getGroupsForChannel_result;
use base qw(Class::Accessor);
CallService_getGroupsForChannel_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getGroupsForChannel_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::LIST) {
                                  {
                                    my $_size2207 = 0;
                                    $self->{success} = [];
                                    my $_etype2210 = 0;
                                    $xfer += $input->readListBegin(\$_etype2210, \$_size2207);
                                    for (my $_i2211 = 0; $_i2211 < $_size2207; ++$_i2211)
                                    {
                                      my $elem2212 = undef;
                                      $elem2212 = Group->new();
                                      $xfer += $elem2212->read($input);
                                      push(@{$self->{success}},$elem2212);
                                    }
                                    $xfer += $input->readListEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getGroupsForChannel_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::LIST, 0);
                              {
                                $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{success}}));
                                {
                                  foreach my $iter2213 (@{$self->{success}}) 
                                  {
                                    $xfer += ${iter2213}->write($output);
                                  }
                                }
                                $xfer += $output->writeListEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getUserCreateTime_args;
use base qw(Class::Accessor);

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getUserCreateTime_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getUserCreateTime_args');
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getUserCreateTime_result;
use base qw(Class::Accessor);
CallService_getUserCreateTime_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getUserCreateTime_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::I64) {
                                  $xfer += $input->readI64(\$self->{success});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getUserCreateTime_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::I64, 0);
                              $xfer += $output->writeI64($self->{success});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_registerChannelCP_args;
use base qw(Class::Accessor);
CallService_registerChannelCP_args->mk_accessors( qw( cpId registerPassword ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{cpId} = undef;
                            $self->{registerPassword} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{cpId}) {
                                $self->{cpId} = $vals->{cpId};
                              }
                              if (defined $vals->{registerPassword}) {
                                $self->{registerPassword} = $vals->{registerPassword};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_registerChannelCP_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^2$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{cpId});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^3$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{registerPassword});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_registerChannelCP_args');
                            if (defined $self->{cpId}) {
                              $xfer += $output->writeFieldBegin('cpId', Thrift::TType::STRING, 2);
                              $xfer += $output->writeString($self->{cpId});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{registerPassword}) {
                              $xfer += $output->writeFieldBegin('registerPassword', Thrift::TType::STRING, 3);
                              $xfer += $output->writeString($self->{registerPassword});
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_registerChannelCP_result;
use base qw(Class::Accessor);
CallService_registerChannelCP_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_registerChannelCP_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{success});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_registerChannelCP_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::STRING, 0);
                              $xfer += $output->writeString($self->{success});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_reserveCallCreditPurchase_args;
use base qw(Class::Accessor);
CallService_reserveCallCreditPurchase_args->mk_accessors( qw( request ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{request} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{request}) {
                                $self->{request} = $vals->{request};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_reserveCallCreditPurchase_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^2$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{request} = CoinPurchaseReservation->new();
                                  $xfer += $self->{request}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_reserveCallCreditPurchase_args');
                            if (defined $self->{request}) {
                              $xfer += $output->writeFieldBegin('request', Thrift::TType::STRUCT, 2);
                              $xfer += $self->{request}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_reserveCallCreditPurchase_result;
use base qw(Class::Accessor);
CallService_reserveCallCreditPurchase_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_reserveCallCreditPurchase_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{success} = PaymentReservationResult->new();
                                  $xfer += $self->{success}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_reserveCallCreditPurchase_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                              $xfer += $self->{success}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_acquirePaidCallCurrencyExchangeRate_args;
use base qw(Class::Accessor);
CallService_acquirePaidCallCurrencyExchangeRate_args->mk_accessors( qw( language ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{language} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{language}) {
                                $self->{language} = $vals->{language};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_acquirePaidCallCurrencyExchangeRate_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^2$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{language});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_acquirePaidCallCurrencyExchangeRate_args');
                            if (defined $self->{language}) {
                              $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 2);
                              $xfer += $output->writeString($self->{language});
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_acquirePaidCallCurrencyExchangeRate_result;
use base qw(Class::Accessor);
CallService_acquirePaidCallCurrencyExchangeRate_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_acquirePaidCallCurrencyExchangeRate_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::LIST) {
                                  {
                                    my $_size2214 = 0;
                                    $self->{success} = [];
                                    my $_etype2217 = 0;
                                    $xfer += $input->readListBegin(\$_etype2217, \$_size2214);
                                    for (my $_i2218 = 0; $_i2218 < $_size2214; ++$_i2218)
                                    {
                                      my $elem2219 = undef;
                                      $elem2219 = PaidCallCurrencyExchangeRate->new();
                                      $xfer += $elem2219->read($input);
                                      push(@{$self->{success}},$elem2219);
                                    }
                                    $xfer += $input->readListEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_acquirePaidCallCurrencyExchangeRate_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::LIST, 0);
                              {
                                $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{success}}));
                                {
                                  foreach my $iter2220 (@{$self->{success}}) 
                                  {
                                    $xfer += ${iter2220}->write($output);
                                  }
                                }
                                $xfer += $output->writeListEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getRoomMemberMidsForAppPlatform_args;
use base qw(Class::Accessor);
CallService_getRoomMemberMidsForAppPlatform_args->mk_accessors( qw( roomId ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{roomId} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{roomId}) {
                                $self->{roomId} = $vals->{roomId};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getRoomMemberMidsForAppPlatform_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{roomId});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getRoomMemberMidsForAppPlatform_args');
                            if (defined $self->{roomId}) {
                              $xfer += $output->writeFieldBegin('roomId', Thrift::TType::STRING, 1);
                              $xfer += $output->writeString($self->{roomId});
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getRoomMemberMidsForAppPlatform_result;
use base qw(Class::Accessor);
CallService_getRoomMemberMidsForAppPlatform_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getRoomMemberMidsForAppPlatform_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::LIST) {
                                  {
                                    my $_size2221 = 0;
                                    $self->{success} = [];
                                    my $_etype2224 = 0;
                                    $xfer += $input->readListBegin(\$_etype2224, \$_size2221);
                                    for (my $_i2225 = 0; $_i2225 < $_size2221; ++$_i2225)
                                    {
                                      my $elem2226 = undef;
                                      $xfer += $input->readString(\$elem2226);
                                      push(@{$self->{success}},$elem2226);
                                    }
                                    $xfer += $input->readListEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getRoomMemberMidsForAppPlatform_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::LIST, 0);
                              {
                                $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{success}}));
                                {
                                  foreach my $iter2227 (@{$self->{success}}) 
                                  {
                                    $xfer += $output->writeString($iter2227);
                                  }
                                }
                                $xfer += $output->writeListEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getPaidCallBalanceList_args;
use base qw(Class::Accessor);
CallService_getPaidCallBalanceList_args->mk_accessors( qw( language ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{language} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{language}) {
                                $self->{language} = $vals->{language};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getPaidCallBalanceList_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^2$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{language});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getPaidCallBalanceList_args');
                            if (defined $self->{language}) {
                              $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 2);
                              $xfer += $output->writeString($self->{language});
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getPaidCallBalanceList_result;
use base qw(Class::Accessor);
CallService_getPaidCallBalanceList_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getPaidCallBalanceList_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::LIST) {
                                  {
                                    my $_size2228 = 0;
                                    $self->{success} = [];
                                    my $_etype2231 = 0;
                                    $xfer += $input->readListBegin(\$_etype2231, \$_size2228);
                                    for (my $_i2232 = 0; $_i2232 < $_size2228; ++$_i2232)
                                    {
                                      my $elem2233 = undef;
                                      $elem2233 = PaidCallBalance->new();
                                      $xfer += $elem2233->read($input);
                                      push(@{$self->{success}},$elem2233);
                                    }
                                    $xfer += $input->readListEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getPaidCallBalanceList_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::LIST, 0);
                              {
                                $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{success}}));
                                {
                                  foreach my $iter2234 (@{$self->{success}}) 
                                  {
                                    $xfer += ${iter2234}->write($output);
                                  }
                                }
                                $xfer += $output->writeListEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getPersonalInfos_args;
use base qw(Class::Accessor);
CallService_getPersonalInfos_args->mk_accessors( qw( requiredPersonalInfos ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{requiredPersonalInfos} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{requiredPersonalInfos}) {
                                $self->{requiredPersonalInfos} = $vals->{requiredPersonalInfos};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getPersonalInfos_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^1$/ && do{                                if ($ftype == Thrift::TType::SET) {
                                  {
                                    my $_size2235 = 0;
                                    $self->{requiredPersonalInfos} = {};
                                    my $_etype2238 = 0;
                                    $xfer += $input->readSetBegin(\$_etype2238, \$_size2235);
                                    for (my $_i2239 = 0; $_i2239 < $_size2235; ++$_i2239)
                                    {
                                      my $elem2240 = undef;
                                      $xfer += $input->readI32(\$elem2240);
                                      $self->{requiredPersonalInfos}->{$elem2240} = 1;
                                    }
                                    $xfer += $input->readSetEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getPersonalInfos_args');
                            if (defined $self->{requiredPersonalInfos}) {
                              $xfer += $output->writeFieldBegin('requiredPersonalInfos', Thrift::TType::SET, 1);
                              {
                                $xfer += $output->writeSetBegin(Thrift::TType::I32, scalar(@{$self->{requiredPersonalInfos}}));
                                {
                                  foreach my $iter2241 (@{$self->{requiredPersonalInfos}})
                                  {
                                    $xfer += $output->writeI32($iter2241);
                                  }
                                }
                                $xfer += $output->writeSetEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getPersonalInfos_result;
use base qw(Class::Accessor);
CallService_getPersonalInfos_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getPersonalInfos_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::MAP) {
                                  {
                                    my $_size2242 = 0;
                                    $self->{success} = {};
                                    my $_ktype2243 = 0;
                                    my $_vtype2244 = 0;
                                    $xfer += $input->readMapBegin(\$_ktype2243, \$_vtype2244, \$_size2242);
                                    for (my $_i2246 = 0; $_i2246 < $_size2242; ++$_i2246)
                                    {
                                      my $key2247 = 0;
                                      my $val2248 = '';
                                      $xfer += $input->readI32(\$key2247);
                                      $xfer += $input->readString(\$val2248);
                                      $self->{success}->{$key2247} = $val2248;
                                    }
                                    $xfer += $input->readMapEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getPersonalInfos_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::MAP, 0);
                              {
                                $xfer += $output->writeMapBegin(Thrift::TType::I32, Thrift::TType::STRING, scalar(keys %{$self->{success}}));
                                {
                                  while( my ($kiter2249,$viter2250) = each %{$self->{success}}) 
                                  {
                                    $xfer += $output->writeI32($kiter2249);
                                    $xfer += $output->writeString($viter2250);
                                  }
                                }
                                $xfer += $output->writeMapEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getPrimaryClientsForChannel_args;
use base qw(Class::Accessor);
CallService_getPrimaryClientsForChannel_args->mk_accessors( qw( userMids ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{userMids} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{userMids}) {
                                $self->{userMids} = $vals->{userMids};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getPrimaryClientsForChannel_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^1$/ && do{                                if ($ftype == Thrift::TType::LIST) {
                                  {
                                    my $_size2251 = 0;
                                    $self->{userMids} = [];
                                    my $_etype2254 = 0;
                                    $xfer += $input->readListBegin(\$_etype2254, \$_size2251);
                                    for (my $_i2255 = 0; $_i2255 < $_size2251; ++$_i2255)
                                    {
                                      my $elem2256 = undef;
                                      $xfer += $input->readString(\$elem2256);
                                      push(@{$self->{userMids}},$elem2256);
                                    }
                                    $xfer += $input->readListEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getPrimaryClientsForChannel_args');
                            if (defined $self->{userMids}) {
                              $xfer += $output->writeFieldBegin('userMids', Thrift::TType::LIST, 1);
                              {
                                $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{userMids}}));
                                {
                                  foreach my $iter2257 (@{$self->{userMids}}) 
                                  {
                                    $xfer += $output->writeString($iter2257);
                                  }
                                }
                                $xfer += $output->writeListEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getPrimaryClientsForChannel_result;
use base qw(Class::Accessor);
CallService_getPrimaryClientsForChannel_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getPrimaryClientsForChannel_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::LIST) {
                                  {
                                    my $_size2258 = 0;
                                    $self->{success} = [];
                                    my $_etype2261 = 0;
                                    $xfer += $input->readListBegin(\$_etype2261, \$_size2258);
                                    for (my $_i2262 = 0; $_i2262 < $_size2258; ++$_i2262)
                                    {
                                      my $elem2263 = undef;
                                      $elem2263 = SimpleChannelClient->new();
                                      $xfer += $elem2263->read($input);
                                      push(@{$self->{success}},$elem2263);
                                    }
                                    $xfer += $input->readListEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getPrimaryClientsForChannel_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::LIST, 0);
                              {
                                $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{success}}));
                                {
                                  foreach my $iter2264 (@{$self->{success}}) 
                                  {
                                    $xfer += ${iter2264}->write($output);
                                  }
                                }
                                $xfer += $output->writeListEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_addBuddyToContact_args;
use base qw(Class::Accessor);
CallService_addBuddyToContact_args->mk_accessors( qw( buddyMid ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{buddyMid} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{buddyMid}) {
                                $self->{buddyMid} = $vals->{buddyMid};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_addBuddyToContact_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{buddyMid});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_addBuddyToContact_args');
                            if (defined $self->{buddyMid}) {
                              $xfer += $output->writeFieldBegin('buddyMid', Thrift::TType::STRING, 1);
                              $xfer += $output->writeString($self->{buddyMid});
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_addBuddyToContact_result;
use base qw(Class::Accessor);
CallService_addBuddyToContact_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_addBuddyToContact_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{success} = ContactTransition->new();
                                  $xfer += $self->{success}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_addBuddyToContact_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                              $xfer += $self->{success}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getGroupMemberMidsForAppPlatform_args;
use base qw(Class::Accessor);
CallService_getGroupMemberMidsForAppPlatform_args->mk_accessors( qw( groupId ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{groupId} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{groupId}) {
                                $self->{groupId} = $vals->{groupId};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getGroupMemberMidsForAppPlatform_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{groupId});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getGroupMemberMidsForAppPlatform_args');
                            if (defined $self->{groupId}) {
                              $xfer += $output->writeFieldBegin('groupId', Thrift::TType::STRING, 1);
                              $xfer += $output->writeString($self->{groupId});
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getGroupMemberMidsForAppPlatform_result;
use base qw(Class::Accessor);
CallService_getGroupMemberMidsForAppPlatform_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getGroupMemberMidsForAppPlatform_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::LIST) {
                                  {
                                    my $_size2265 = 0;
                                    $self->{success} = [];
                                    my $_etype2268 = 0;
                                    $xfer += $input->readListBegin(\$_etype2268, \$_size2265);
                                    for (my $_i2269 = 0; $_i2269 < $_size2265; ++$_i2269)
                                    {
                                      my $elem2270 = undef;
                                      $xfer += $input->readString(\$elem2270);
                                      push(@{$self->{success}},$elem2270);
                                    }
                                    $xfer += $input->readListEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getGroupMemberMidsForAppPlatform_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::LIST, 0);
                              {
                                $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{success}}));
                                {
                                  foreach my $iter2271 (@{$self->{success}}) 
                                  {
                                    $xfer += $output->writeString($iter2271);
                                  }
                                }
                                $xfer += $output->writeListEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getUserLanguage_args;
use base qw(Class::Accessor);

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getUserLanguage_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getUserLanguage_args');
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getUserLanguage_result;
use base qw(Class::Accessor);
CallService_getUserLanguage_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getUserLanguage_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{success});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getUserLanguage_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::STRING, 0);
                              $xfer += $output->writeString($self->{success});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_lookupPaidCall_args;
use base qw(Class::Accessor);
CallService_lookupPaidCall_args->mk_accessors( qw( dialedNumber language referer ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{dialedNumber} = undef;
                            $self->{language} = undef;
                            $self->{referer} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{dialedNumber}) {
                                $self->{dialedNumber} = $vals->{dialedNumber};
                              }
                              if (defined $vals->{language}) {
                                $self->{language} = $vals->{language};
                              }
                              if (defined $vals->{referer}) {
                                $self->{referer} = $vals->{referer};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_lookupPaidCall_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^2$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{dialedNumber});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^3$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{language});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^4$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{referer});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_lookupPaidCall_args');
                            if (defined $self->{dialedNumber}) {
                              $xfer += $output->writeFieldBegin('dialedNumber', Thrift::TType::STRING, 2);
                              $xfer += $output->writeString($self->{dialedNumber});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{language}) {
                              $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 3);
                              $xfer += $output->writeString($self->{language});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{referer}) {
                              $xfer += $output->writeFieldBegin('referer', Thrift::TType::STRING, 4);
                              $xfer += $output->writeString($self->{referer});
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_lookupPaidCall_result;
use base qw(Class::Accessor);
CallService_lookupPaidCall_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_lookupPaidCall_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{success} = PaidCallResponse->new();
                                  $xfer += $self->{success}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_lookupPaidCall_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                              $xfer += $self->{success}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getExtendedProfile_args;
use base qw(Class::Accessor);

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getExtendedProfile_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getExtendedProfile_args');
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getExtendedProfile_result;
use base qw(Class::Accessor);
CallService_getExtendedProfile_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getExtendedProfile_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{success} = ExtendedProfile->new();
                                  $xfer += $self->{success}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getExtendedProfile_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                              $xfer += $self->{success}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getReverseCompactContacts_args;
use base qw(Class::Accessor);
CallService_getReverseCompactContacts_args->mk_accessors( qw( ids ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{ids} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{ids}) {
                                $self->{ids} = $vals->{ids};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getReverseCompactContacts_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^1$/ && do{                                if ($ftype == Thrift::TType::LIST) {
                                  {
                                    my $_size2272 = 0;
                                    $self->{ids} = [];
                                    my $_etype2275 = 0;
                                    $xfer += $input->readListBegin(\$_etype2275, \$_size2272);
                                    for (my $_i2276 = 0; $_i2276 < $_size2272; ++$_i2276)
                                    {
                                      my $elem2277 = undef;
                                      $xfer += $input->readString(\$elem2277);
                                      push(@{$self->{ids}},$elem2277);
                                    }
                                    $xfer += $input->readListEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getReverseCompactContacts_args');
                            if (defined $self->{ids}) {
                              $xfer += $output->writeFieldBegin('ids', Thrift::TType::LIST, 1);
                              {
                                $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{ids}}));
                                {
                                  foreach my $iter2278 (@{$self->{ids}}) 
                                  {
                                    $xfer += $output->writeString($iter2278);
                                  }
                                }
                                $xfer += $output->writeListEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getReverseCompactContacts_result;
use base qw(Class::Accessor);
CallService_getReverseCompactContacts_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getReverseCompactContacts_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::MAP) {
                                  {
                                    my $_size2279 = 0;
                                    $self->{success} = {};
                                    my $_ktype2280 = 0;
                                    my $_vtype2281 = 0;
                                    $xfer += $input->readMapBegin(\$_ktype2280, \$_vtype2281, \$_size2279);
                                    for (my $_i2283 = 0; $_i2283 < $_size2279; ++$_i2283)
                                    {
                                      my $key2284 = '';
                                      my $val2285 = new CompactContact();
                                      $xfer += $input->readString(\$key2284);
                                      $val2285 = CompactContact->new();
                                      $xfer += $val2285->read($input);
                                      $self->{success}->{$key2284} = $val2285;
                                    }
                                    $xfer += $input->readMapEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getReverseCompactContacts_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::MAP, 0);
                              {
                                $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRUCT, scalar(keys %{$self->{success}}));
                                {
                                  while( my ($kiter2286,$viter2287) = each %{$self->{success}}) 
                                  {
                                    $xfer += $output->writeString($kiter2286);
                                    $xfer += ${viter2287}->write($output);
                                  }
                                }
                                $xfer += $output->writeMapEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getPaidCallAdStatus_args;
use base qw(Class::Accessor);

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getPaidCallAdStatus_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getPaidCallAdStatus_args');
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getPaidCallAdStatus_result;
use base qw(Class::Accessor);
CallService_getPaidCallAdStatus_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getPaidCallAdStatus_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{success} = PaidCallAdResult->new();
                                  $xfer += $self->{success}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getPaidCallAdStatus_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                              $xfer += $self->{success}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_findContactByUseridWithoutAbuseBlockForChannel_args;
use base qw(Class::Accessor);
CallService_findContactByUseridWithoutAbuseBlockForChannel_args->mk_accessors( qw( userid ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{userid} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{userid}) {
                                $self->{userid} = $vals->{userid};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_findContactByUseridWithoutAbuseBlockForChannel_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^2$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{userid});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_findContactByUseridWithoutAbuseBlockForChannel_args');
                            if (defined $self->{userid}) {
                              $xfer += $output->writeFieldBegin('userid', Thrift::TType::STRING, 2);
                              $xfer += $output->writeString($self->{userid});
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_findContactByUseridWithoutAbuseBlockForChannel_result;
use base qw(Class::Accessor);
CallService_findContactByUseridWithoutAbuseBlockForChannel_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_findContactByUseridWithoutAbuseBlockForChannel_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{success} = Contact->new();
                                  $xfer += $self->{success}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_findContactByUseridWithoutAbuseBlockForChannel_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                              $xfer += $self->{success}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getGroupMemberMids_args;
use base qw(Class::Accessor);
CallService_getGroupMemberMids_args->mk_accessors( qw( groupId ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{groupId} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{groupId}) {
                                $self->{groupId} = $vals->{groupId};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getGroupMemberMids_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{groupId});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getGroupMemberMids_args');
                            if (defined $self->{groupId}) {
                              $xfer += $output->writeFieldBegin('groupId', Thrift::TType::STRING, 1);
                              $xfer += $output->writeString($self->{groupId});
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getGroupMemberMids_result;
use base qw(Class::Accessor);
CallService_getGroupMemberMids_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getGroupMemberMids_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::LIST) {
                                  {
                                    my $_size2288 = 0;
                                    $self->{success} = [];
                                    my $_etype2291 = 0;
                                    $xfer += $input->readListBegin(\$_etype2291, \$_size2288);
                                    for (my $_i2292 = 0; $_i2292 < $_size2288; ++$_i2292)
                                    {
                                      my $elem2293 = undef;
                                      $xfer += $input->readString(\$elem2293);
                                      push(@{$self->{success}},$elem2293);
                                    }
                                    $xfer += $input->readListEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getGroupMemberMids_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::LIST, 0);
                              {
                                $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{success}}));
                                {
                                  foreach my $iter2294 (@{$self->{success}}) 
                                  {
                                    $xfer += $output->writeString($iter2294);
                                  }
                                }
                                $xfer += $output->writeListEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_sendMessageWithoutRelationship_args;
use base qw(Class::Accessor);
CallService_sendMessageWithoutRelationship_args->mk_accessors( qw( message ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{message} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{message}) {
                                $self->{message} = $vals->{message};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_sendMessageWithoutRelationship_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^2$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{message} = Message->new();
                                  $xfer += $self->{message}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_sendMessageWithoutRelationship_args');
                            if (defined $self->{message}) {
                              $xfer += $output->writeFieldBegin('message', Thrift::TType::STRUCT, 2);
                              $xfer += $self->{message}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_sendMessageWithoutRelationship_result;
use base qw(Class::Accessor);
CallService_sendMessageWithoutRelationship_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_sendMessageWithoutRelationship_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{success} = Message->new();
                                  $xfer += $self->{success}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_sendMessageWithoutRelationship_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                              $xfer += $self->{success}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_displayBuddySubscriberCountInBulk_args;
use base qw(Class::Accessor);
CallService_displayBuddySubscriberCountInBulk_args->mk_accessors( qw( mids ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{mids} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{mids}) {
                                $self->{mids} = $vals->{mids};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_displayBuddySubscriberCountInBulk_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^1$/ && do{                                if ($ftype == Thrift::TType::LIST) {
                                  {
                                    my $_size2295 = 0;
                                    $self->{mids} = [];
                                    my $_etype2298 = 0;
                                    $xfer += $input->readListBegin(\$_etype2298, \$_size2295);
                                    for (my $_i2299 = 0; $_i2299 < $_size2295; ++$_i2299)
                                    {
                                      my $elem2300 = undef;
                                      $xfer += $input->readString(\$elem2300);
                                      push(@{$self->{mids}},$elem2300);
                                    }
                                    $xfer += $input->readListEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_displayBuddySubscriberCountInBulk_args');
                            if (defined $self->{mids}) {
                              $xfer += $output->writeFieldBegin('mids', Thrift::TType::LIST, 1);
                              {
                                $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{mids}}));
                                {
                                  foreach my $iter2301 (@{$self->{mids}}) 
                                  {
                                    $xfer += $output->writeString($iter2301);
                                  }
                                }
                                $xfer += $output->writeListEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_displayBuddySubscriberCountInBulk_result;
use base qw(Class::Accessor);
CallService_displayBuddySubscriberCountInBulk_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_displayBuddySubscriberCountInBulk_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::MAP) {
                                  {
                                    my $_size2302 = 0;
                                    $self->{success} = {};
                                    my $_ktype2303 = 0;
                                    my $_vtype2304 = 0;
                                    $xfer += $input->readMapBegin(\$_ktype2303, \$_vtype2304, \$_size2302);
                                    for (my $_i2306 = 0; $_i2306 < $_size2302; ++$_i2306)
                                    {
                                      my $key2307 = '';
                                      my $val2308 = 0;
                                      $xfer += $input->readString(\$key2307);
                                      $xfer += $input->readI64(\$val2308);
                                      $self->{success}->{$key2307} = $val2308;
                                    }
                                    $xfer += $input->readMapEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_displayBuddySubscriberCountInBulk_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::MAP, 0);
                              {
                                $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::I64, scalar(keys %{$self->{success}}));
                                {
                                  while( my ($kiter2309,$viter2310) = each %{$self->{success}}) 
                                  {
                                    $xfer += $output->writeString($kiter2309);
                                    $xfer += $output->writeI64($viter2310);
                                  }
                                }
                                $xfer += $output->writeMapEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_lookupRoomMembers_args;
use base qw(Class::Accessor);
CallService_lookupRoomMembers_args->mk_accessors( qw( roomId mids ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{roomId} = undef;
                            $self->{mids} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{roomId}) {
                                $self->{roomId} = $vals->{roomId};
                              }
                              if (defined $vals->{mids}) {
                                $self->{mids} = $vals->{mids};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_lookupRoomMembers_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{roomId});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^2$/ && do{                                if ($ftype == Thrift::TType::LIST) {
                                  {
                                    my $_size2311 = 0;
                                    $self->{mids} = [];
                                    my $_etype2314 = 0;
                                    $xfer += $input->readListBegin(\$_etype2314, \$_size2311);
                                    for (my $_i2315 = 0; $_i2315 < $_size2311; ++$_i2315)
                                    {
                                      my $elem2316 = undef;
                                      $xfer += $input->readString(\$elem2316);
                                      push(@{$self->{mids}},$elem2316);
                                    }
                                    $xfer += $input->readListEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_lookupRoomMembers_args');
                            if (defined $self->{roomId}) {
                              $xfer += $output->writeFieldBegin('roomId', Thrift::TType::STRING, 1);
                              $xfer += $output->writeString($self->{roomId});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{mids}) {
                              $xfer += $output->writeFieldBegin('mids', Thrift::TType::LIST, 2);
                              {
                                $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{mids}}));
                                {
                                  foreach my $iter2317 (@{$self->{mids}}) 
                                  {
                                    $xfer += $output->writeString($iter2317);
                                  }
                                }
                                $xfer += $output->writeListEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_lookupRoomMembers_result;
use base qw(Class::Accessor);
CallService_lookupRoomMembers_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_lookupRoomMembers_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::LIST) {
                                  {
                                    my $_size2318 = 0;
                                    $self->{success} = [];
                                    my $_etype2321 = 0;
                                    $xfer += $input->readListBegin(\$_etype2321, \$_size2318);
                                    for (my $_i2322 = 0; $_i2322 < $_size2318; ++$_i2322)
                                    {
                                      my $elem2323 = undef;
                                      $elem2323 = SimpleChannelContact->new();
                                      $xfer += $elem2323->read($input);
                                      push(@{$self->{success}},$elem2323);
                                    }
                                    $xfer += $input->readListEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_lookupRoomMembers_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::LIST, 0);
                              {
                                $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{success}}));
                                {
                                  foreach my $iter2324 (@{$self->{success}}) 
                                  {
                                    $xfer += ${iter2324}->write($output);
                                  }
                                }
                                $xfer += $output->writeListEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getFavoriteMidsForChannel_args;
use base qw(Class::Accessor);

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getFavoriteMidsForChannel_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getFavoriteMidsForChannel_args');
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getFavoriteMidsForChannel_result;
use base qw(Class::Accessor);
CallService_getFavoriteMidsForChannel_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getFavoriteMidsForChannel_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::LIST) {
                                  {
                                    my $_size2325 = 0;
                                    $self->{success} = [];
                                    my $_etype2328 = 0;
                                    $xfer += $input->readListBegin(\$_etype2328, \$_size2325);
                                    for (my $_i2329 = 0; $_i2329 < $_size2325; ++$_i2329)
                                    {
                                      my $elem2330 = undef;
                                      $xfer += $input->readString(\$elem2330);
                                      push(@{$self->{success}},$elem2330);
                                    }
                                    $xfer += $input->readListEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getFavoriteMidsForChannel_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::LIST, 0);
                              {
                                $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{success}}));
                                {
                                  foreach my $iter2331 (@{$self->{success}}) 
                                  {
                                    $xfer += $output->writeString($iter2331);
                                  }
                                }
                                $xfer += $output->writeListEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getAllContactIdsForChannel_args;
use base qw(Class::Accessor);

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getAllContactIdsForChannel_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getAllContactIdsForChannel_args');
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getAllContactIdsForChannel_result;
use base qw(Class::Accessor);
CallService_getAllContactIdsForChannel_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getAllContactIdsForChannel_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::LIST) {
                                  {
                                    my $_size2332 = 0;
                                    $self->{success} = [];
                                    my $_etype2335 = 0;
                                    $xfer += $input->readListBegin(\$_etype2335, \$_size2332);
                                    for (my $_i2336 = 0; $_i2336 < $_size2332; ++$_i2336)
                                    {
                                      my $elem2337 = undef;
                                      $xfer += $input->readString(\$elem2337);
                                      push(@{$self->{success}},$elem2337);
                                    }
                                    $xfer += $input->readListEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getAllContactIdsForChannel_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::LIST, 0);
                              {
                                $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{success}}));
                                {
                                  foreach my $iter2338 (@{$self->{success}}) 
                                  {
                                    $xfer += $output->writeString($iter2338);
                                  }
                                }
                                $xfer += $output->writeListEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_displayBuddySubscriberCount_args;
use base qw(Class::Accessor);

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_displayBuddySubscriberCount_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_displayBuddySubscriberCount_args');
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_displayBuddySubscriberCount_result;
use base qw(Class::Accessor);
CallService_displayBuddySubscriberCount_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_displayBuddySubscriberCount_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::I64) {
                                  $xfer += $input->readI64(\$self->{success});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_displayBuddySubscriberCount_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::I64, 0);
                              $xfer += $output->writeI64($self->{success});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getProfileForChannel_args;
use base qw(Class::Accessor);

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getProfileForChannel_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getProfileForChannel_args');
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getProfileForChannel_result;
use base qw(Class::Accessor);
CallService_getProfileForChannel_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getProfileForChannel_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{success} = Profile->new();
                                  $xfer += $self->{success}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getProfileForChannel_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                              $xfer += $self->{success}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getUserTickets_args;
use base qw(Class::Accessor);
CallService_getUserTickets_args->mk_accessors( qw( userMids ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{userMids} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{userMids}) {
                                $self->{userMids} = $vals->{userMids};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getUserTickets_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^1$/ && do{                                if ($ftype == Thrift::TType::LIST) {
                                  {
                                    my $_size2339 = 0;
                                    $self->{userMids} = [];
                                    my $_etype2342 = 0;
                                    $xfer += $input->readListBegin(\$_etype2342, \$_size2339);
                                    for (my $_i2343 = 0; $_i2343 < $_size2339; ++$_i2343)
                                    {
                                      my $elem2344 = undef;
                                      $xfer += $input->readString(\$elem2344);
                                      push(@{$self->{userMids}},$elem2344);
                                    }
                                    $xfer += $input->readListEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getUserTickets_args');
                            if (defined $self->{userMids}) {
                              $xfer += $output->writeFieldBegin('userMids', Thrift::TType::LIST, 1);
                              {
                                $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{userMids}}));
                                {
                                  foreach my $iter2345 (@{$self->{userMids}}) 
                                  {
                                    $xfer += $output->writeString($iter2345);
                                  }
                                }
                                $xfer += $output->writeListEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getUserTickets_result;
use base qw(Class::Accessor);
CallService_getUserTickets_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getUserTickets_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::LIST) {
                                  {
                                    my $_size2346 = 0;
                                    $self->{success} = [];
                                    my $_etype2349 = 0;
                                    $xfer += $input->readListBegin(\$_etype2349, \$_size2346);
                                    for (my $_i2350 = 0; $_i2350 < $_size2346; ++$_i2350)
                                    {
                                      my $elem2351 = undef;
                                      $elem2351 = UserTicketResponse->new();
                                      $xfer += $elem2351->read($input);
                                      push(@{$self->{success}},$elem2351);
                                    }
                                    $xfer += $input->readListEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getUserTickets_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::LIST, 0);
                              {
                                $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{success}}));
                                {
                                  foreach my $iter2352 (@{$self->{success}}) 
                                  {
                                    $xfer += ${iter2352}->write($output);
                                  }
                                }
                                $xfer += $output->writeListEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getOAFriendMids_args;
use base qw(Class::Accessor);

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getOAFriendMids_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getOAFriendMids_args');
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getOAFriendMids_result;
use base qw(Class::Accessor);
CallService_getOAFriendMids_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getOAFriendMids_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::LIST) {
                                  {
                                    my $_size2353 = 0;
                                    $self->{success} = [];
                                    my $_etype2356 = 0;
                                    $xfer += $input->readListBegin(\$_etype2356, \$_size2353);
                                    for (my $_i2357 = 0; $_i2357 < $_size2353; ++$_i2357)
                                    {
                                      my $elem2358 = undef;
                                      $xfer += $input->readString(\$elem2358);
                                      push(@{$self->{success}},$elem2358);
                                    }
                                    $xfer += $input->readListEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getOAFriendMids_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::LIST, 0);
                              {
                                $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{success}}));
                                {
                                  foreach my $iter2359 (@{$self->{success}}) 
                                  {
                                    $xfer += $output->writeString($iter2359);
                                  }
                                }
                                $xfer += $output->writeListEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_searchPaidCallUserRate_args;
use base qw(Class::Accessor);
CallService_searchPaidCallUserRate_args->mk_accessors( qw( countryCode language ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{countryCode} = undef;
                            $self->{language} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{countryCode}) {
                                $self->{countryCode} = $vals->{countryCode};
                              }
                              if (defined $vals->{language}) {
                                $self->{language} = $vals->{language};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_searchPaidCallUserRate_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^2$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{countryCode});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^3$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{language});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_searchPaidCallUserRate_args');
                            if (defined $self->{countryCode}) {
                              $xfer += $output->writeFieldBegin('countryCode', Thrift::TType::STRING, 2);
                              $xfer += $output->writeString($self->{countryCode});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{language}) {
                              $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 3);
                              $xfer += $output->writeString($self->{language});
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_searchPaidCallUserRate_result;
use base qw(Class::Accessor);
CallService_searchPaidCallUserRate_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_searchPaidCallUserRate_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::LIST) {
                                  {
                                    my $_size2360 = 0;
                                    $self->{success} = [];
                                    my $_etype2363 = 0;
                                    $xfer += $input->readListBegin(\$_etype2363, \$_size2360);
                                    for (my $_i2364 = 0; $_i2364 < $_size2360; ++$_i2364)
                                    {
                                      my $elem2365 = undef;
                                      $elem2365 = PaidCallUserRate->new();
                                      $xfer += $elem2365->read($input);
                                      push(@{$self->{success}},$elem2365);
                                    }
                                    $xfer += $input->readListEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_searchPaidCallUserRate_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::LIST, 0);
                              {
                                $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{success}}));
                                {
                                  foreach my $iter2366 (@{$self->{success}}) 
                                  {
                                    $xfer += ${iter2366}->write($output);
                                  }
                                }
                                $xfer += $output->writeListEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getJoinedGroupIdsForChannel_args;
use base qw(Class::Accessor);

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getJoinedGroupIdsForChannel_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getJoinedGroupIdsForChannel_args');
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getJoinedGroupIdsForChannel_result;
use base qw(Class::Accessor);
CallService_getJoinedGroupIdsForChannel_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getJoinedGroupIdsForChannel_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::LIST) {
                                  {
                                    my $_size2367 = 0;
                                    $self->{success} = [];
                                    my $_etype2370 = 0;
                                    $xfer += $input->readListBegin(\$_etype2370, \$_size2367);
                                    for (my $_i2371 = 0; $_i2371 < $_size2367; ++$_i2371)
                                    {
                                      my $elem2372 = undef;
                                      $xfer += $input->readString(\$elem2372);
                                      push(@{$self->{success}},$elem2372);
                                    }
                                    $xfer += $input->readListEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getJoinedGroupIdsForChannel_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::LIST, 0);
                              {
                                $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{success}}));
                                {
                                  foreach my $iter2373 (@{$self->{success}}) 
                                  {
                                    $xfer += $output->writeString($iter2373);
                                  }
                                }
                                $xfer += $output->writeListEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_acquireGroupCallRoute_args;
use base qw(Class::Accessor);
CallService_acquireGroupCallRoute_args->mk_accessors( qw( chatMid mediaType ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{chatMid} = undef;
                            $self->{mediaType} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{chatMid}) {
                                $self->{chatMid} = $vals->{chatMid};
                              }
                              if (defined $vals->{mediaType}) {
                                $self->{mediaType} = $vals->{mediaType};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_acquireGroupCallRoute_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^2$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{chatMid});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^3$/ && do{                                if ($ftype == Thrift::TType::I32) {
                                  $xfer += $input->readI32(\$self->{mediaType});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_acquireGroupCallRoute_args');
                            if (defined $self->{chatMid}) {
                              $xfer += $output->writeFieldBegin('chatMid', Thrift::TType::STRING, 2);
                              $xfer += $output->writeString($self->{chatMid});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{mediaType}) {
                              $xfer += $output->writeFieldBegin('mediaType', Thrift::TType::I32, 3);
                              $xfer += $output->writeI32($self->{mediaType});
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_acquireGroupCallRoute_result;
use base qw(Class::Accessor);
CallService_acquireGroupCallRoute_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_acquireGroupCallRoute_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{success} = GroupCallRoute->new();
                                  $xfer += $self->{success}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_acquireGroupCallRoute_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                              $xfer += $self->{success}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getUserMidsWhoAddedMe_args;
use base qw(Class::Accessor);

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getUserMidsWhoAddedMe_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getUserMidsWhoAddedMe_args');
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getUserMidsWhoAddedMe_result;
use base qw(Class::Accessor);
CallService_getUserMidsWhoAddedMe_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getUserMidsWhoAddedMe_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::LIST) {
                                  {
                                    my $_size2374 = 0;
                                    $self->{success} = [];
                                    my $_etype2377 = 0;
                                    $xfer += $input->readListBegin(\$_etype2377, \$_size2374);
                                    for (my $_i2378 = 0; $_i2378 < $_size2374; ++$_i2378)
                                    {
                                      my $elem2379 = undef;
                                      $xfer += $input->readString(\$elem2379);
                                      push(@{$self->{success}},$elem2379);
                                    }
                                    $xfer += $input->readListEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getUserMidsWhoAddedMe_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::LIST, 0);
                              {
                                $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{success}}));
                                {
                                  foreach my $iter2380 (@{$self->{success}}) 
                                  {
                                    $xfer += $output->writeString($iter2380);
                                  }
                                }
                                $xfer += $output->writeListEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getIdentityCredential_args;
use base qw(Class::Accessor);

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getIdentityCredential_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getIdentityCredential_args');
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getIdentityCredential_result;
use base qw(Class::Accessor);
CallService_getIdentityCredential_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getIdentityCredential_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{success} = IdentityCredential->new();
                                  $xfer += $self->{success}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getIdentityCredential_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::STRUCT, 0);
                              $xfer += $self->{success}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_addOperationForChannel_args;
use base qw(Class::Accessor);
CallService_addOperationForChannel_args->mk_accessors( qw( opType param1 param2 param3 ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{opType} = undef;
                            $self->{param1} = undef;
                            $self->{param2} = undef;
                            $self->{param3} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{opType}) {
                                $self->{opType} = $vals->{opType};
                              }
                              if (defined $vals->{param1}) {
                                $self->{param1} = $vals->{param1};
                              }
                              if (defined $vals->{param2}) {
                                $self->{param2} = $vals->{param2};
                              }
                              if (defined $vals->{param3}) {
                                $self->{param3} = $vals->{param3};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_addOperationForChannel_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^1$/ && do{                                if ($ftype == Thrift::TType::I32) {
                                  $xfer += $input->readI32(\$self->{opType});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^2$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{param1});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^3$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{param2});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^4$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{param3});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_addOperationForChannel_args');
                            if (defined $self->{opType}) {
                              $xfer += $output->writeFieldBegin('opType', Thrift::TType::I32, 1);
                              $xfer += $output->writeI32($self->{opType});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{param1}) {
                              $xfer += $output->writeFieldBegin('param1', Thrift::TType::STRING, 2);
                              $xfer += $output->writeString($self->{param1});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{param2}) {
                              $xfer += $output->writeFieldBegin('param2', Thrift::TType::STRING, 3);
                              $xfer += $output->writeString($self->{param2});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{param3}) {
                              $xfer += $output->writeFieldBegin('param3', Thrift::TType::STRING, 4);
                              $xfer += $output->writeString($self->{param3});
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_addOperationForChannel_result;
use base qw(Class::Accessor);
CallService_addOperationForChannel_result->mk_accessors( qw( ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_addOperationForChannel_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_addOperationForChannel_result');
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getSimpleChannelContacts_args;
use base qw(Class::Accessor);
CallService_getSimpleChannelContacts_args->mk_accessors( qw( ids statusSticonFallbackDisabled ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{ids} = undef;
                            $self->{statusSticonFallbackDisabled} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{ids}) {
                                $self->{ids} = $vals->{ids};
                              }
                              if (defined $vals->{statusSticonFallbackDisabled}) {
                                $self->{statusSticonFallbackDisabled} = $vals->{statusSticonFallbackDisabled};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getSimpleChannelContacts_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^1$/ && do{                                if ($ftype == Thrift::TType::LIST) {
                                  {
                                    my $_size2381 = 0;
                                    $self->{ids} = [];
                                    my $_etype2384 = 0;
                                    $xfer += $input->readListBegin(\$_etype2384, \$_size2381);
                                    for (my $_i2385 = 0; $_i2385 < $_size2381; ++$_i2385)
                                    {
                                      my $elem2386 = undef;
                                      $xfer += $input->readString(\$elem2386);
                                      push(@{$self->{ids}},$elem2386);
                                    }
                                    $xfer += $input->readListEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^2$/ && do{                                if ($ftype == Thrift::TType::BOOL) {
                                  $xfer += $input->readBool(\$self->{statusSticonFallbackDisabled});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getSimpleChannelContacts_args');
                            if (defined $self->{ids}) {
                              $xfer += $output->writeFieldBegin('ids', Thrift::TType::LIST, 1);
                              {
                                $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{ids}}));
                                {
                                  foreach my $iter2387 (@{$self->{ids}}) 
                                  {
                                    $xfer += $output->writeString($iter2387);
                                  }
                                }
                                $xfer += $output->writeListEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{statusSticonFallbackDisabled}) {
                              $xfer += $output->writeFieldBegin('statusSticonFallbackDisabled', Thrift::TType::BOOL, 2);
                              $xfer += $output->writeBool($self->{statusSticonFallbackDisabled});
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getSimpleChannelContacts_result;
use base qw(Class::Accessor);
CallService_getSimpleChannelContacts_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getSimpleChannelContacts_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::LIST) {
                                  {
                                    my $_size2388 = 0;
                                    $self->{success} = [];
                                    my $_etype2391 = 0;
                                    $xfer += $input->readListBegin(\$_etype2391, \$_size2388);
                                    for (my $_i2392 = 0; $_i2392 < $_size2388; ++$_i2392)
                                    {
                                      my $elem2393 = undef;
                                      $elem2393 = SimpleChannelContact->new();
                                      $xfer += $elem2393->read($input);
                                      push(@{$self->{success}},$elem2393);
                                    }
                                    $xfer += $input->readListEnd();
                                  }
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getSimpleChannelContacts_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::LIST, 0);
                              {
                                $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{success}}));
                                {
                                  foreach my $iter2394 (@{$self->{success}}) 
                                  {
                                    $xfer += ${iter2394}->write($output);
                                  }
                                }
                                $xfer += $output->writeListEnd();
                              }
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getUserLastSentMessageTimeStamp_args;
use base qw(Class::Accessor);
CallService_getUserLastSentMessageTimeStamp_args->mk_accessors( qw( mid ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{mid} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{mid}) {
                                $self->{mid} = $vals->{mid};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getUserLastSentMessageTimeStamp_args';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRING) {
                                  $xfer += $input->readString(\$self->{mid});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getUserLastSentMessageTimeStamp_args');
                            if (defined $self->{mid}) {
                              $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 1);
                              $xfer += $output->writeString($self->{mid});
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallService_getUserLastSentMessageTimeStamp_result;
use base qw(Class::Accessor);
CallService_getUserLastSentMessageTimeStamp_result->mk_accessors( qw( success ) );

sub new {
                            my $classname = shift;
                            my $self      = {};
                            my $vals      = shift || {};
                            $self->{success} = undef;
                            $self->{e} = undef;
                            if (UNIVERSAL::isa($vals,'HASH')) {
                              if (defined $vals->{success}) {
                                $self->{success} = $vals->{success};
                              }
                              if (defined $vals->{e}) {
                                $self->{e} = $vals->{e};
                              }
                            }
                            return bless ($self, $classname);
}

sub getName {
                            return 'CallService_getUserLastSentMessageTimeStamp_result';
                          }

sub read {
                            my ($self, $input) = @_;
                            my $xfer  = 0;
                            my $fname;
                            my $ftype = 0;
                            my $fid   = 0;
                            $xfer += $input->readStructBegin(\$fname);
                            while (1) 
                            {
                              $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
                              if ($ftype == Thrift::TType::STOP) {
                                last;
                              }
                              SWITCH: for($fid)
                              {
                                /^0$/ && do{                                if ($ftype == Thrift::TType::I64) {
                                  $xfer += $input->readI64(\$self->{success});
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                /^1$/ && do{                                if ($ftype == Thrift::TType::STRUCT) {
                                  $self->{e} = TalkException->new();
                                  $xfer += $self->{e}->read($input);
                                } else {
                                  $xfer += $input->skip($ftype);
                                }
                                last; };
                                  $xfer += $input->skip($ftype);
                              }
                              $xfer += $input->readFieldEnd();
                            }
                            $xfer += $input->readStructEnd();
                            return $xfer;
                          }

sub write {
                            my ($self, $output) = @_;
                            my $xfer   = 0;
                            $xfer += $output->writeStructBegin('CallService_getUserLastSentMessageTimeStamp_result');
                            if (defined $self->{success}) {
                              $xfer += $output->writeFieldBegin('success', Thrift::TType::I64, 0);
                              $xfer += $output->writeI64($self->{success});
                              $xfer += $output->writeFieldEnd();
                            }
                            if (defined $self->{e}) {
                              $xfer += $output->writeFieldBegin('e', Thrift::TType::STRUCT, 1);
                              $xfer += $self->{e}->write($output);
                              $xfer += $output->writeFieldEnd();
                            }
                            $xfer += $output->writeFieldStop();
                            $xfer += $output->writeStructEnd();
                            return $xfer;
                          }

package CallServiceIf;

use strict;


sub getUserStatus{
  my $self = shift;
  my $mid = shift;

  die 'implement interface';
}

sub updateProfileAttributeForChannel{
  my $self = shift;
  my $profileAttribute = shift;
  my $value = shift;

  die 'implement interface';
}

sub updateExtendedProfileAttribute{
  my $self = shift;
  my $attr = shift;
  my $extendedProfile = shift;

  die 'implement interface';
}

sub getAllSimpleChannelContacts{
  my $self = shift;
  my $statusSticonFallbackDisabled = shift;

  die 'implement interface';
}

sub getUserIdentities{
  my $self = shift;

  die 'implement interface';
}

sub markPaidCallAd{
  my $self = shift;
  my $dialedNumber = shift;
  my $language = shift;
  my $disableCallerId = shift;

  die 'implement interface';
}

sub isGroupMember{
  my $self = shift;
  my $groupId = shift;

  die 'implement interface';
}

sub getPhoneInfoFromPhoneNumber{
  my $self = shift;
  my $region = shift;
  my $phoneNumber = shift;

  die 'implement interface';
}

sub redeemPaidCallVoucher{
  my $self = shift;
  my $serial = shift;
  my $language = shift;

  die 'implement interface';
}

sub getPreferredDisplayName{
  my $self = shift;
  my $mids = shift;

  die 'implement interface';
}

sub getContactsForChannel{
  my $self = shift;
  my $ids = shift;

  die 'implement interface';
}

sub getCallCreditProducts{
  my $self = shift;
  my $appStoreCode = shift;
  my $pgCode = shift;
  my $country = shift;
  my $language = shift;

  die 'implement interface';
}

sub getCompactContacts{
  my $self = shift;
  my $lastModifiedTimestamp = shift;

  die 'implement interface';
}

sub notifyNotiCenterEvent{
  my $self = shift;
  my $event = shift;

  die 'implement interface';
}

sub isInContact{
  my $self = shift;
  my $mid = shift;

  die 'implement interface';
}

sub lookupGroupMembers{
  my $self = shift;
  my $groupId = shift;
  my $mids = shift;

  die 'implement interface';
}

sub getRoomInformation{
  my $self = shift;
  my $roomMid = shift;

  die 'implement interface';
}

sub getGroupCall{
  my $self = shift;
  my $chatMid = shift;

  die 'implement interface';
}

sub isAllowSecondaryDeviceLogin{
  my $self = shift;

  die 'implement interface';
}

sub getPrimaryClientForChannel{
  my $self = shift;

  die 'implement interface';
}

sub createRoomWithBuddy{
  my $self = shift;
  my $reqSeq = shift;
  my $buddyMid = shift;
  my $contactIds = shift;

  die 'implement interface';
}

sub getDisplayName{
  my $self = shift;
  my $mid = shift;

  die 'implement interface';
}

sub getPaidCallMetadata{
  my $self = shift;
  my $language = shift;

  die 'implement interface';
}

sub getMid{
  my $self = shift;

  die 'implement interface';
}

sub getUserCountryForBilling{
  my $self = shift;
  my $country = shift;
  my $remoteIp = shift;

  die 'implement interface';
}

sub getFavoriteGroupIdsForChannel{
  my $self = shift;

  die 'implement interface';
}

sub getPaidCallHistory{
  my $self = shift;
  my $start = shift;
  my $size = shift;
  my $language = shift;

  die 'implement interface';
}

sub sendPinCodeOperation{
  my $self = shift;
  my $verifier = shift;

  die 'implement interface';
}

sub inviteIntoGroupCall{
  my $self = shift;
  my $chatMid = shift;
  my $memberMids = shift;
  my $mediaType = shift;

  die 'implement interface';
}

sub getFriendMids{
  my $self = shift;

  die 'implement interface';
}

sub getMetaProfile{
  my $self = shift;

  die 'implement interface';
}

sub sendMessageForChannel{
  my $self = shift;
  my $message = shift;

  die 'implement interface';
}

sub activeBuddySubscriberCount{
  my $self = shift;

  die 'implement interface';
}

sub getCallCreditPurchaseHistory{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub isRoomMember{
  my $self = shift;
  my $roomId = shift;

  die 'implement interface';
}

sub sendSystemOAMessage{
  my $self = shift;
  my $message = shift;

  die 'implement interface';
}

sub acquirePaidCallRoute{
  my $self = shift;
  my $paidCallType = shift;
  my $dialedNumber = shift;
  my $language = shift;
  my $networkCode = shift;
  my $disableCallerId = shift;
  my $referer = shift;
  my $adSessionId = shift;

  die 'implement interface';
}

sub getGroupsForChannel{
  my $self = shift;
  my $groupIds = shift;

  die 'implement interface';
}

sub getUserCreateTime{
  my $self = shift;

  die 'implement interface';
}

sub registerChannelCP{
  my $self = shift;
  my $cpId = shift;
  my $registerPassword = shift;

  die 'implement interface';
}

sub reserveCallCreditPurchase{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub acquirePaidCallCurrencyExchangeRate{
  my $self = shift;
  my $language = shift;

  die 'implement interface';
}

sub getRoomMemberMidsForAppPlatform{
  my $self = shift;
  my $roomId = shift;

  die 'implement interface';
}

sub getPaidCallBalanceList{
  my $self = shift;
  my $language = shift;

  die 'implement interface';
}

sub getPersonalInfos{
  my $self = shift;
  my $requiredPersonalInfos = shift;

  die 'implement interface';
}

sub getPrimaryClientsForChannel{
  my $self = shift;
  my $userMids = shift;

  die 'implement interface';
}

sub addBuddyToContact{
  my $self = shift;
  my $buddyMid = shift;

  die 'implement interface';
}

sub getGroupMemberMidsForAppPlatform{
  my $self = shift;
  my $groupId = shift;

  die 'implement interface';
}

sub getUserLanguage{
  my $self = shift;

  die 'implement interface';
}

sub lookupPaidCall{
  my $self = shift;
  my $dialedNumber = shift;
  my $language = shift;
  my $referer = shift;

  die 'implement interface';
}

sub getExtendedProfile{
  my $self = shift;

  die 'implement interface';
}

sub getReverseCompactContacts{
  my $self = shift;
  my $ids = shift;

  die 'implement interface';
}

sub getPaidCallAdStatus{
  my $self = shift;

  die 'implement interface';
}

sub findContactByUseridWithoutAbuseBlockForChannel{
  my $self = shift;
  my $userid = shift;

  die 'implement interface';
}

sub getGroupMemberMids{
  my $self = shift;
  my $groupId = shift;

  die 'implement interface';
}

sub sendMessageWithoutRelationship{
  my $self = shift;
  my $message = shift;

  die 'implement interface';
}

sub displayBuddySubscriberCountInBulk{
  my $self = shift;
  my $mids = shift;

  die 'implement interface';
}

sub lookupRoomMembers{
  my $self = shift;
  my $roomId = shift;
  my $mids = shift;

  die 'implement interface';
}

sub getFavoriteMidsForChannel{
  my $self = shift;

  die 'implement interface';
}

sub getAllContactIdsForChannel{
  my $self = shift;

  die 'implement interface';
}

sub displayBuddySubscriberCount{
  my $self = shift;

  die 'implement interface';
}

sub getProfileForChannel{
  my $self = shift;

  die 'implement interface';
}

sub getUserTickets{
  my $self = shift;
  my $userMids = shift;

  die 'implement interface';
}

sub getOAFriendMids{
  my $self = shift;

  die 'implement interface';
}

sub searchPaidCallUserRate{
  my $self = shift;
  my $countryCode = shift;
  my $language = shift;

  die 'implement interface';
}

sub getJoinedGroupIdsForChannel{
  my $self = shift;

  die 'implement interface';
}

sub acquireGroupCallRoute{
  my $self = shift;
  my $chatMid = shift;
  my $mediaType = shift;

  die 'implement interface';
}

sub getUserMidsWhoAddedMe{
  my $self = shift;

  die 'implement interface';
}

sub getIdentityCredential{
  my $self = shift;

  die 'implement interface';
}

sub addOperationForChannel{
  my $self = shift;
  my $opType = shift;
  my $param1 = shift;
  my $param2 = shift;
  my $param3 = shift;

  die 'implement interface';
}

sub getSimpleChannelContacts{
  my $self = shift;
  my $ids = shift;
  my $statusSticonFallbackDisabled = shift;

  die 'implement interface';
}

sub getUserLastSentMessageTimeStamp{
  my $self = shift;
  my $mid = shift;

  die 'implement interface';
}

package CallServiceRest;

use strict;


sub new {
                            my ($classname, $impl) = @_;
                            my $self     ={ impl => $impl };

                            return bless($self,$classname);
}

sub getUserStatus{
                            my ($self, $request) = @_;

                            my $mid = ($request->{'mid'}) ? $request->{'mid'} : undef;
                            return $self->{impl}->getUserStatus($mid);
                          }

sub updateProfileAttributeForChannel{
                            my ($self, $request) = @_;

                            my $profileAttribute = ($request->{'profileAttribute'}) ? $request->{'profileAttribute'} : undef;
                            my $value = ($request->{'value'}) ? $request->{'value'} : undef;
                            return $self->{impl}->updateProfileAttributeForChannel($profileAttribute, $value);
                          }

sub updateExtendedProfileAttribute{
                            my ($self, $request) = @_;

                            my $attr = ($request->{'attr'}) ? $request->{'attr'} : undef;
                            my $extendedProfile = ($request->{'extendedProfile'}) ? $request->{'extendedProfile'} : undef;
                            return $self->{impl}->updateExtendedProfileAttribute($attr, $extendedProfile);
                          }

sub getAllSimpleChannelContacts{
                            my ($self, $request) = @_;

                            my $statusSticonFallbackDisabled = ($request->{'statusSticonFallbackDisabled'}) ? $request->{'statusSticonFallbackDisabled'} : undef;
                            return $self->{impl}->getAllSimpleChannelContacts($statusSticonFallbackDisabled);
                          }

sub getUserIdentities{
                            my ($self, $request) = @_;

                            return $self->{impl}->getUserIdentities();
                          }

sub markPaidCallAd{
                            my ($self, $request) = @_;

                            my $dialedNumber = ($request->{'dialedNumber'}) ? $request->{'dialedNumber'} : undef;
                            my $language = ($request->{'language'}) ? $request->{'language'} : undef;
                            my $disableCallerId = ($request->{'disableCallerId'}) ? $request->{'disableCallerId'} : undef;
                            return $self->{impl}->markPaidCallAd($dialedNumber, $language, $disableCallerId);
                          }

sub isGroupMember{
                            my ($self, $request) = @_;

                            my $groupId = ($request->{'groupId'}) ? $request->{'groupId'} : undef;
                            return $self->{impl}->isGroupMember($groupId);
                          }

sub getPhoneInfoFromPhoneNumber{
                            my ($self, $request) = @_;

                            my $region = ($request->{'region'}) ? $request->{'region'} : undef;
                            my $phoneNumber = ($request->{'phoneNumber'}) ? $request->{'phoneNumber'} : undef;
                            return $self->{impl}->getPhoneInfoFromPhoneNumber($region, $phoneNumber);
                          }

sub redeemPaidCallVoucher{
                            my ($self, $request) = @_;

                            my $serial = ($request->{'serial'}) ? $request->{'serial'} : undef;
                            my $language = ($request->{'language'}) ? $request->{'language'} : undef;
                            return $self->{impl}->redeemPaidCallVoucher($serial, $language);
                          }

sub getPreferredDisplayName{
                            my ($self, $request) = @_;

                            my $mids = ($request->{'mids'}) ? $request->{'mids'} : undef;
                            return $self->{impl}->getPreferredDisplayName($mids);
                          }

sub getContactsForChannel{
                            my ($self, $request) = @_;

                            my $ids = ($request->{'ids'}) ? $request->{'ids'} : undef;
                            return $self->{impl}->getContactsForChannel($ids);
                          }

sub getCallCreditProducts{
                            my ($self, $request) = @_;

                            my $appStoreCode = ($request->{'appStoreCode'}) ? $request->{'appStoreCode'} : undef;
                            my $pgCode = ($request->{'pgCode'}) ? $request->{'pgCode'} : undef;
                            my $country = ($request->{'country'}) ? $request->{'country'} : undef;
                            my $language = ($request->{'language'}) ? $request->{'language'} : undef;
                            return $self->{impl}->getCallCreditProducts($appStoreCode, $pgCode, $country, $language);
                          }

sub getCompactContacts{
                            my ($self, $request) = @_;

                            my $lastModifiedTimestamp = ($request->{'lastModifiedTimestamp'}) ? $request->{'lastModifiedTimestamp'} : undef;
                            return $self->{impl}->getCompactContacts($lastModifiedTimestamp);
                          }

sub notifyNotiCenterEvent{
                            my ($self, $request) = @_;

                            my $event = ($request->{'event'}) ? $request->{'event'} : undef;
                            return $self->{impl}->notifyNotiCenterEvent($event);
                          }

sub isInContact{
                            my ($self, $request) = @_;

                            my $mid = ($request->{'mid'}) ? $request->{'mid'} : undef;
                            return $self->{impl}->isInContact($mid);
                          }

sub lookupGroupMembers{
                            my ($self, $request) = @_;

                            my $groupId = ($request->{'groupId'}) ? $request->{'groupId'} : undef;
                            my $mids = ($request->{'mids'}) ? $request->{'mids'} : undef;
                            return $self->{impl}->lookupGroupMembers($groupId, $mids);
                          }

sub getRoomInformation{
                            my ($self, $request) = @_;

                            my $roomMid = ($request->{'roomMid'}) ? $request->{'roomMid'} : undef;
                            return $self->{impl}->getRoomInformation($roomMid);
                          }

sub getGroupCall{
                            my ($self, $request) = @_;

                            my $chatMid = ($request->{'chatMid'}) ? $request->{'chatMid'} : undef;
                            return $self->{impl}->getGroupCall($chatMid);
                          }

sub isAllowSecondaryDeviceLogin{
                            my ($self, $request) = @_;

                            return $self->{impl}->isAllowSecondaryDeviceLogin();
                          }

sub getPrimaryClientForChannel{
                            my ($self, $request) = @_;

                            return $self->{impl}->getPrimaryClientForChannel();
                          }

sub createRoomWithBuddy{
                            my ($self, $request) = @_;

                            my $reqSeq = ($request->{'reqSeq'}) ? $request->{'reqSeq'} : undef;
                            my $buddyMid = ($request->{'buddyMid'}) ? $request->{'buddyMid'} : undef;
                            my $contactIds = ($request->{'contactIds'}) ? $request->{'contactIds'} : undef;
                            return $self->{impl}->createRoomWithBuddy($reqSeq, $buddyMid, $contactIds);
                          }

sub getDisplayName{
                            my ($self, $request) = @_;

                            my $mid = ($request->{'mid'}) ? $request->{'mid'} : undef;
                            return $self->{impl}->getDisplayName($mid);
                          }

sub getPaidCallMetadata{
                            my ($self, $request) = @_;

                            my $language = ($request->{'language'}) ? $request->{'language'} : undef;
                            return $self->{impl}->getPaidCallMetadata($language);
                          }

sub getMid{
                            my ($self, $request) = @_;

                            return $self->{impl}->getMid();
                          }

sub getUserCountryForBilling{
                            my ($self, $request) = @_;

                            my $country = ($request->{'country'}) ? $request->{'country'} : undef;
                            my $remoteIp = ($request->{'remoteIp'}) ? $request->{'remoteIp'} : undef;
                            return $self->{impl}->getUserCountryForBilling($country, $remoteIp);
                          }

sub getFavoriteGroupIdsForChannel{
                            my ($self, $request) = @_;

                            return $self->{impl}->getFavoriteGroupIdsForChannel();
                          }

sub getPaidCallHistory{
                            my ($self, $request) = @_;

                            my $start = ($request->{'start'}) ? $request->{'start'} : undef;
                            my $size = ($request->{'size'}) ? $request->{'size'} : undef;
                            my $language = ($request->{'language'}) ? $request->{'language'} : undef;
                            return $self->{impl}->getPaidCallHistory($start, $size, $language);
                          }

sub sendPinCodeOperation{
                            my ($self, $request) = @_;

                            my $verifier = ($request->{'verifier'}) ? $request->{'verifier'} : undef;
                            return $self->{impl}->sendPinCodeOperation($verifier);
                          }

sub inviteIntoGroupCall{
                            my ($self, $request) = @_;

                            my $chatMid = ($request->{'chatMid'}) ? $request->{'chatMid'} : undef;
                            my $memberMids = ($request->{'memberMids'}) ? $request->{'memberMids'} : undef;
                            my $mediaType = ($request->{'mediaType'}) ? $request->{'mediaType'} : undef;
                            return $self->{impl}->inviteIntoGroupCall($chatMid, $memberMids, $mediaType);
                          }

sub getFriendMids{
                            my ($self, $request) = @_;

                            return $self->{impl}->getFriendMids();
                          }

sub getMetaProfile{
                            my ($self, $request) = @_;

                            return $self->{impl}->getMetaProfile();
                          }

sub sendMessageForChannel{
                            my ($self, $request) = @_;

                            my $message = ($request->{'message'}) ? $request->{'message'} : undef;
                            return $self->{impl}->sendMessageForChannel($message);
                          }

sub activeBuddySubscriberCount{
                            my ($self, $request) = @_;

                            return $self->{impl}->activeBuddySubscriberCount();
                          }

sub getCallCreditPurchaseHistory{
                            my ($self, $request) = @_;

                            my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                            return $self->{impl}->getCallCreditPurchaseHistory($request);
                          }

sub isRoomMember{
                            my ($self, $request) = @_;

                            my $roomId = ($request->{'roomId'}) ? $request->{'roomId'} : undef;
                            return $self->{impl}->isRoomMember($roomId);
                          }

sub sendSystemOAMessage{
                            my ($self, $request) = @_;

                            my $message = ($request->{'message'}) ? $request->{'message'} : undef;
                            return $self->{impl}->sendSystemOAMessage($message);
                          }

sub acquirePaidCallRoute{
                            my ($self, $request) = @_;

                            my $paidCallType = ($request->{'paidCallType'}) ? $request->{'paidCallType'} : undef;
                            my $dialedNumber = ($request->{'dialedNumber'}) ? $request->{'dialedNumber'} : undef;
                            my $language = ($request->{'language'}) ? $request->{'language'} : undef;
                            my $networkCode = ($request->{'networkCode'}) ? $request->{'networkCode'} : undef;
                            my $disableCallerId = ($request->{'disableCallerId'}) ? $request->{'disableCallerId'} : undef;
                            my $referer = ($request->{'referer'}) ? $request->{'referer'} : undef;
                            my $adSessionId = ($request->{'adSessionId'}) ? $request->{'adSessionId'} : undef;
                            return $self->{impl}->acquirePaidCallRoute($paidCallType, $dialedNumber, $language, $networkCode, $disableCallerId, $referer, $adSessionId);
                          }

sub getGroupsForChannel{
                            my ($self, $request) = @_;

                            my $groupIds = ($request->{'groupIds'}) ? $request->{'groupIds'} : undef;
                            return $self->{impl}->getGroupsForChannel($groupIds);
                          }

sub getUserCreateTime{
                            my ($self, $request) = @_;

                            return $self->{impl}->getUserCreateTime();
                          }

sub registerChannelCP{
                            my ($self, $request) = @_;

                            my $cpId = ($request->{'cpId'}) ? $request->{'cpId'} : undef;
                            my $registerPassword = ($request->{'registerPassword'}) ? $request->{'registerPassword'} : undef;
                            return $self->{impl}->registerChannelCP($cpId, $registerPassword);
                          }

sub reserveCallCreditPurchase{
                            my ($self, $request) = @_;

                            my $request = ($request->{'request'}) ? $request->{'request'} : undef;
                            return $self->{impl}->reserveCallCreditPurchase($request);
                          }

sub acquirePaidCallCurrencyExchangeRate{
                            my ($self, $request) = @_;

                            my $language = ($request->{'language'}) ? $request->{'language'} : undef;
                            return $self->{impl}->acquirePaidCallCurrencyExchangeRate($language);
                          }

sub getRoomMemberMidsForAppPlatform{
                            my ($self, $request) = @_;

                            my $roomId = ($request->{'roomId'}) ? $request->{'roomId'} : undef;
                            return $self->{impl}->getRoomMemberMidsForAppPlatform($roomId);
                          }

sub getPaidCallBalanceList{
                            my ($self, $request) = @_;

                            my $language = ($request->{'language'}) ? $request->{'language'} : undef;
                            return $self->{impl}->getPaidCallBalanceList($language);
                          }

sub getPersonalInfos{
                            my ($self, $request) = @_;

                            my $requiredPersonalInfos = ($request->{'requiredPersonalInfos'}) ? $request->{'requiredPersonalInfos'} : undef;
                            return $self->{impl}->getPersonalInfos($requiredPersonalInfos);
                          }

sub getPrimaryClientsForChannel{
                            my ($self, $request) = @_;

                            my $userMids = ($request->{'userMids'}) ? $request->{'userMids'} : undef;
                            return $self->{impl}->getPrimaryClientsForChannel($userMids);
                          }

sub addBuddyToContact{
                            my ($self, $request) = @_;

                            my $buddyMid = ($request->{'buddyMid'}) ? $request->{'buddyMid'} : undef;
                            return $self->{impl}->addBuddyToContact($buddyMid);
                          }

sub getGroupMemberMidsForAppPlatform{
                            my ($self, $request) = @_;

                            my $groupId = ($request->{'groupId'}) ? $request->{'groupId'} : undef;
                            return $self->{impl}->getGroupMemberMidsForAppPlatform($groupId);
                          }

sub getUserLanguage{
                            my ($self, $request) = @_;

                            return $self->{impl}->getUserLanguage();
                          }

sub lookupPaidCall{
                            my ($self, $request) = @_;

                            my $dialedNumber = ($request->{'dialedNumber'}) ? $request->{'dialedNumber'} : undef;
                            my $language = ($request->{'language'}) ? $request->{'language'} : undef;
                            my $referer = ($request->{'referer'}) ? $request->{'referer'} : undef;
                            return $self->{impl}->lookupPaidCall($dialedNumber, $language, $referer);
                          }

sub getExtendedProfile{
                            my ($self, $request) = @_;

                            return $self->{impl}->getExtendedProfile();
                          }

sub getReverseCompactContacts{
                            my ($self, $request) = @_;

                            my $ids = ($request->{'ids'}) ? $request->{'ids'} : undef;
                            return $self->{impl}->getReverseCompactContacts($ids);
                          }

sub getPaidCallAdStatus{
                            my ($self, $request) = @_;

                            return $self->{impl}->getPaidCallAdStatus();
                          }

sub findContactByUseridWithoutAbuseBlockForChannel{
                            my ($self, $request) = @_;

                            my $userid = ($request->{'userid'}) ? $request->{'userid'} : undef;
                            return $self->{impl}->findContactByUseridWithoutAbuseBlockForChannel($userid);
                          }

sub getGroupMemberMids{
                            my ($self, $request) = @_;

                            my $groupId = ($request->{'groupId'}) ? $request->{'groupId'} : undef;
                            return $self->{impl}->getGroupMemberMids($groupId);
                          }

sub sendMessageWithoutRelationship{
                            my ($self, $request) = @_;

                            my $message = ($request->{'message'}) ? $request->{'message'} : undef;
                            return $self->{impl}->sendMessageWithoutRelationship($message);
                          }

sub displayBuddySubscriberCountInBulk{
                            my ($self, $request) = @_;

                            my $mids = ($request->{'mids'}) ? $request->{'mids'} : undef;
                            return $self->{impl}->displayBuddySubscriberCountInBulk($mids);
                          }

sub lookupRoomMembers{
                            my ($self, $request) = @_;

                            my $roomId = ($request->{'roomId'}) ? $request->{'roomId'} : undef;
                            my $mids = ($request->{'mids'}) ? $request->{'mids'} : undef;
                            return $self->{impl}->lookupRoomMembers($roomId, $mids);
                          }

sub getFavoriteMidsForChannel{
                            my ($self, $request) = @_;

                            return $self->{impl}->getFavoriteMidsForChannel();
                          }

sub getAllContactIdsForChannel{
                            my ($self, $request) = @_;

                            return $self->{impl}->getAllContactIdsForChannel();
                          }

sub displayBuddySubscriberCount{
                            my ($self, $request) = @_;

                            return $self->{impl}->displayBuddySubscriberCount();
                          }

sub getProfileForChannel{
                            my ($self, $request) = @_;

                            return $self->{impl}->getProfileForChannel();
                          }

sub getUserTickets{
                            my ($self, $request) = @_;

                            my $userMids = ($request->{'userMids'}) ? $request->{'userMids'} : undef;
                            return $self->{impl}->getUserTickets($userMids);
                          }

sub getOAFriendMids{
                            my ($self, $request) = @_;

                            return $self->{impl}->getOAFriendMids();
                          }

sub searchPaidCallUserRate{
                            my ($self, $request) = @_;

                            my $countryCode = ($request->{'countryCode'}) ? $request->{'countryCode'} : undef;
                            my $language = ($request->{'language'}) ? $request->{'language'} : undef;
                            return $self->{impl}->searchPaidCallUserRate($countryCode, $language);
                          }

sub getJoinedGroupIdsForChannel{
                            my ($self, $request) = @_;

                            return $self->{impl}->getJoinedGroupIdsForChannel();
                          }

sub acquireGroupCallRoute{
                            my ($self, $request) = @_;

                            my $chatMid = ($request->{'chatMid'}) ? $request->{'chatMid'} : undef;
                            my $mediaType = ($request->{'mediaType'}) ? $request->{'mediaType'} : undef;
                            return $self->{impl}->acquireGroupCallRoute($chatMid, $mediaType);
                          }

sub getUserMidsWhoAddedMe{
                            my ($self, $request) = @_;

                            return $self->{impl}->getUserMidsWhoAddedMe();
                          }

sub getIdentityCredential{
                            my ($self, $request) = @_;

                            return $self->{impl}->getIdentityCredential();
                          }

sub addOperationForChannel{
                            my ($self, $request) = @_;

                            my $opType = ($request->{'opType'}) ? $request->{'opType'} : undef;
                            my $param1 = ($request->{'param1'}) ? $request->{'param1'} : undef;
                            my $param2 = ($request->{'param2'}) ? $request->{'param2'} : undef;
                            my $param3 = ($request->{'param3'}) ? $request->{'param3'} : undef;
                            return $self->{impl}->addOperationForChannel($opType, $param1, $param2, $param3);
                          }

sub getSimpleChannelContacts{
                            my ($self, $request) = @_;

                            my $ids = ($request->{'ids'}) ? $request->{'ids'} : undef;
                            my $statusSticonFallbackDisabled = ($request->{'statusSticonFallbackDisabled'}) ? $request->{'statusSticonFallbackDisabled'} : undef;
                            return $self->{impl}->getSimpleChannelContacts($ids, $statusSticonFallbackDisabled);
                          }

sub getUserLastSentMessageTimeStamp{
                            my ($self, $request) = @_;

                            my $mid = ($request->{'mid'}) ? $request->{'mid'} : undef;
                            return $self->{impl}->getUserLastSentMessageTimeStamp($mid);
                          }

package CallServiceClient;


use base qw(CallServiceIf);
sub new {
                            my ($classname, $input, $output) = @_;
                            my $self      = {};
                            $self->{input}  = $input;
                            $self->{output} = defined $output ? $output : $input;
                            $self->{seqid}  = 0;
                            return bless($self,$classname);
}

sub getUserStatus{
  my $self = shift;
  my $mid = shift;

                                                        $self->send_getUserStatus($mid);
                            return $self->recv_getUserStatus();
}

sub send_getUserStatus{
  my $self = shift;
  my $mid = shift;

                            $self->{output}->writeMessageBegin('getUserStatus', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getUserStatus_args();
                            $args->{mid} = $mid;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getUserStatus{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getUserStatus_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getUserStatus failed: unknown result";
}
sub updateProfileAttributeForChannel{
  my $self = shift;
  my $profileAttribute = shift;
  my $value = shift;

                                                        $self->send_updateProfileAttributeForChannel($profileAttribute, $value);
                            $self->recv_updateProfileAttributeForChannel();
}

sub send_updateProfileAttributeForChannel{
  my $self = shift;
  my $profileAttribute = shift;
  my $value = shift;

                            $self->{output}->writeMessageBegin('updateProfileAttributeForChannel', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_updateProfileAttributeForChannel_args();
                            $args->{profileAttribute} = $profileAttribute;
                            $args->{value} = $value;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_updateProfileAttributeForChannel{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_updateProfileAttributeForChannel_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            return;
}
sub updateExtendedProfileAttribute{
  my $self = shift;
  my $attr = shift;
  my $extendedProfile = shift;

                                                        $self->send_updateExtendedProfileAttribute($attr, $extendedProfile);
                            $self->recv_updateExtendedProfileAttribute();
}

sub send_updateExtendedProfileAttribute{
  my $self = shift;
  my $attr = shift;
  my $extendedProfile = shift;

                            $self->{output}->writeMessageBegin('updateExtendedProfileAttribute', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_updateExtendedProfileAttribute_args();
                            $args->{attr} = $attr;
                            $args->{extendedProfile} = $extendedProfile;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_updateExtendedProfileAttribute{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_updateExtendedProfileAttribute_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            return;
}
sub getAllSimpleChannelContacts{
  my $self = shift;
  my $statusSticonFallbackDisabled = shift;

                                                        $self->send_getAllSimpleChannelContacts($statusSticonFallbackDisabled);
                            return $self->recv_getAllSimpleChannelContacts();
}

sub send_getAllSimpleChannelContacts{
  my $self = shift;
  my $statusSticonFallbackDisabled = shift;

                            $self->{output}->writeMessageBegin('getAllSimpleChannelContacts', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getAllSimpleChannelContacts_args();
                            $args->{statusSticonFallbackDisabled} = $statusSticonFallbackDisabled;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getAllSimpleChannelContacts{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getAllSimpleChannelContacts_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getAllSimpleChannelContacts failed: unknown result";
}
sub getUserIdentities{
  my $self = shift;

                                                        $self->send_getUserIdentities();
                            return $self->recv_getUserIdentities();
}

sub send_getUserIdentities{
  my $self = shift;

                            $self->{output}->writeMessageBegin('getUserIdentities', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getUserIdentities_args();
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getUserIdentities{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getUserIdentities_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getUserIdentities failed: unknown result";
}
sub markPaidCallAd{
  my $self = shift;
  my $dialedNumber = shift;
  my $language = shift;
  my $disableCallerId = shift;

                                                        $self->send_markPaidCallAd($dialedNumber, $language, $disableCallerId);
                            return $self->recv_markPaidCallAd();
}

sub send_markPaidCallAd{
  my $self = shift;
  my $dialedNumber = shift;
  my $language = shift;
  my $disableCallerId = shift;

                            $self->{output}->writeMessageBegin('markPaidCallAd', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_markPaidCallAd_args();
                            $args->{dialedNumber} = $dialedNumber;
                            $args->{language} = $language;
                            $args->{disableCallerId} = $disableCallerId;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_markPaidCallAd{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_markPaidCallAd_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "markPaidCallAd failed: unknown result";
}
sub isGroupMember{
  my $self = shift;
  my $groupId = shift;

                                                        $self->send_isGroupMember($groupId);
                            return $self->recv_isGroupMember();
}

sub send_isGroupMember{
  my $self = shift;
  my $groupId = shift;

                            $self->{output}->writeMessageBegin('isGroupMember', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_isGroupMember_args();
                            $args->{groupId} = $groupId;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_isGroupMember{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_isGroupMember_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "isGroupMember failed: unknown result";
}
sub getPhoneInfoFromPhoneNumber{
  my $self = shift;
  my $region = shift;
  my $phoneNumber = shift;

                                                        $self->send_getPhoneInfoFromPhoneNumber($region, $phoneNumber);
                            return $self->recv_getPhoneInfoFromPhoneNumber();
}

sub send_getPhoneInfoFromPhoneNumber{
  my $self = shift;
  my $region = shift;
  my $phoneNumber = shift;

                            $self->{output}->writeMessageBegin('getPhoneInfoFromPhoneNumber', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getPhoneInfoFromPhoneNumber_args();
                            $args->{region} = $region;
                            $args->{phoneNumber} = $phoneNumber;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getPhoneInfoFromPhoneNumber{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getPhoneInfoFromPhoneNumber_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getPhoneInfoFromPhoneNumber failed: unknown result";
}
sub redeemPaidCallVoucher{
  my $self = shift;
  my $serial = shift;
  my $language = shift;

                                                        $self->send_redeemPaidCallVoucher($serial, $language);
                            return $self->recv_redeemPaidCallVoucher();
}

sub send_redeemPaidCallVoucher{
  my $self = shift;
  my $serial = shift;
  my $language = shift;

                            $self->{output}->writeMessageBegin('redeemPaidCallVoucher', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_redeemPaidCallVoucher_args();
                            $args->{serial} = $serial;
                            $args->{language} = $language;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_redeemPaidCallVoucher{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_redeemPaidCallVoucher_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "redeemPaidCallVoucher failed: unknown result";
}
sub getPreferredDisplayName{
  my $self = shift;
  my $mids = shift;

                                                        $self->send_getPreferredDisplayName($mids);
                            return $self->recv_getPreferredDisplayName();
}

sub send_getPreferredDisplayName{
  my $self = shift;
  my $mids = shift;

                            $self->{output}->writeMessageBegin('getPreferredDisplayName', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getPreferredDisplayName_args();
                            $args->{mids} = $mids;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getPreferredDisplayName{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getPreferredDisplayName_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getPreferredDisplayName failed: unknown result";
}
sub getContactsForChannel{
  my $self = shift;
  my $ids = shift;

                                                        $self->send_getContactsForChannel($ids);
                            return $self->recv_getContactsForChannel();
}

sub send_getContactsForChannel{
  my $self = shift;
  my $ids = shift;

                            $self->{output}->writeMessageBegin('getContactsForChannel', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getContactsForChannel_args();
                            $args->{ids} = $ids;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getContactsForChannel{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getContactsForChannel_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getContactsForChannel failed: unknown result";
}
sub getCallCreditProducts{
  my $self = shift;
  my $appStoreCode = shift;
  my $pgCode = shift;
  my $country = shift;
  my $language = shift;

                                                        $self->send_getCallCreditProducts($appStoreCode, $pgCode, $country, $language);
                            return $self->recv_getCallCreditProducts();
}

sub send_getCallCreditProducts{
  my $self = shift;
  my $appStoreCode = shift;
  my $pgCode = shift;
  my $country = shift;
  my $language = shift;

                            $self->{output}->writeMessageBegin('getCallCreditProducts', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getCallCreditProducts_args();
                            $args->{appStoreCode} = $appStoreCode;
                            $args->{pgCode} = $pgCode;
                            $args->{country} = $country;
                            $args->{language} = $language;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getCallCreditProducts{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getCallCreditProducts_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getCallCreditProducts failed: unknown result";
}
sub getCompactContacts{
  my $self = shift;
  my $lastModifiedTimestamp = shift;

                                                        $self->send_getCompactContacts($lastModifiedTimestamp);
                            return $self->recv_getCompactContacts();
}

sub send_getCompactContacts{
  my $self = shift;
  my $lastModifiedTimestamp = shift;

                            $self->{output}->writeMessageBegin('getCompactContacts', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getCompactContacts_args();
                            $args->{lastModifiedTimestamp} = $lastModifiedTimestamp;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getCompactContacts{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getCompactContacts_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getCompactContacts failed: unknown result";
}
sub notifyNotiCenterEvent{
  my $self = shift;
  my $event = shift;

                                                        $self->send_notifyNotiCenterEvent($event);
                            $self->recv_notifyNotiCenterEvent();
}

sub send_notifyNotiCenterEvent{
  my $self = shift;
  my $event = shift;

                            $self->{output}->writeMessageBegin('notifyNotiCenterEvent', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_notifyNotiCenterEvent_args();
                            $args->{event} = $event;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_notifyNotiCenterEvent{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_notifyNotiCenterEvent_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            return;
}
sub isInContact{
  my $self = shift;
  my $mid = shift;

                                                        $self->send_isInContact($mid);
                            return $self->recv_isInContact();
}

sub send_isInContact{
  my $self = shift;
  my $mid = shift;

                            $self->{output}->writeMessageBegin('isInContact', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_isInContact_args();
                            $args->{mid} = $mid;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_isInContact{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_isInContact_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "isInContact failed: unknown result";
}
sub lookupGroupMembers{
  my $self = shift;
  my $groupId = shift;
  my $mids = shift;

                                                        $self->send_lookupGroupMembers($groupId, $mids);
                            return $self->recv_lookupGroupMembers();
}

sub send_lookupGroupMembers{
  my $self = shift;
  my $groupId = shift;
  my $mids = shift;

                            $self->{output}->writeMessageBegin('lookupGroupMembers', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_lookupGroupMembers_args();
                            $args->{groupId} = $groupId;
                            $args->{mids} = $mids;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_lookupGroupMembers{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_lookupGroupMembers_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "lookupGroupMembers failed: unknown result";
}
sub getRoomInformation{
  my $self = shift;
  my $roomMid = shift;

                                                        $self->send_getRoomInformation($roomMid);
                            return $self->recv_getRoomInformation();
}

sub send_getRoomInformation{
  my $self = shift;
  my $roomMid = shift;

                            $self->{output}->writeMessageBegin('getRoomInformation', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getRoomInformation_args();
                            $args->{roomMid} = $roomMid;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getRoomInformation{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getRoomInformation_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getRoomInformation failed: unknown result";
}
sub getGroupCall{
  my $self = shift;
  my $chatMid = shift;

                                                        $self->send_getGroupCall($chatMid);
                            return $self->recv_getGroupCall();
}

sub send_getGroupCall{
  my $self = shift;
  my $chatMid = shift;

                            $self->{output}->writeMessageBegin('getGroupCall', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getGroupCall_args();
                            $args->{chatMid} = $chatMid;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getGroupCall{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getGroupCall_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getGroupCall failed: unknown result";
}
sub isAllowSecondaryDeviceLogin{
  my $self = shift;

                                                        $self->send_isAllowSecondaryDeviceLogin();
                            return $self->recv_isAllowSecondaryDeviceLogin();
}

sub send_isAllowSecondaryDeviceLogin{
  my $self = shift;

                            $self->{output}->writeMessageBegin('isAllowSecondaryDeviceLogin', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_isAllowSecondaryDeviceLogin_args();
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_isAllowSecondaryDeviceLogin{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_isAllowSecondaryDeviceLogin_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "isAllowSecondaryDeviceLogin failed: unknown result";
}
sub getPrimaryClientForChannel{
  my $self = shift;

                                                        $self->send_getPrimaryClientForChannel();
                            return $self->recv_getPrimaryClientForChannel();
}

sub send_getPrimaryClientForChannel{
  my $self = shift;

                            $self->{output}->writeMessageBegin('getPrimaryClientForChannel', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getPrimaryClientForChannel_args();
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getPrimaryClientForChannel{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getPrimaryClientForChannel_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getPrimaryClientForChannel failed: unknown result";
}
sub createRoomWithBuddy{
  my $self = shift;
  my $reqSeq = shift;
  my $buddyMid = shift;
  my $contactIds = shift;

                                                        $self->send_createRoomWithBuddy($reqSeq, $buddyMid, $contactIds);
                            return $self->recv_createRoomWithBuddy();
}

sub send_createRoomWithBuddy{
  my $self = shift;
  my $reqSeq = shift;
  my $buddyMid = shift;
  my $contactIds = shift;

                            $self->{output}->writeMessageBegin('createRoomWithBuddy', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_createRoomWithBuddy_args();
                            $args->{reqSeq} = $reqSeq;
                            $args->{buddyMid} = $buddyMid;
                            $args->{contactIds} = $contactIds;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_createRoomWithBuddy{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_createRoomWithBuddy_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "createRoomWithBuddy failed: unknown result";
}
sub getDisplayName{
  my $self = shift;
  my $mid = shift;

                                                        $self->send_getDisplayName($mid);
                            return $self->recv_getDisplayName();
}

sub send_getDisplayName{
  my $self = shift;
  my $mid = shift;

                            $self->{output}->writeMessageBegin('getDisplayName', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getDisplayName_args();
                            $args->{mid} = $mid;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getDisplayName{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getDisplayName_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getDisplayName failed: unknown result";
}
sub getPaidCallMetadata{
  my $self = shift;
  my $language = shift;

                                                        $self->send_getPaidCallMetadata($language);
                            return $self->recv_getPaidCallMetadata();
}

sub send_getPaidCallMetadata{
  my $self = shift;
  my $language = shift;

                            $self->{output}->writeMessageBegin('getPaidCallMetadata', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getPaidCallMetadata_args();
                            $args->{language} = $language;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getPaidCallMetadata{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getPaidCallMetadata_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getPaidCallMetadata failed: unknown result";
}
sub getMid{
  my $self = shift;

                                                        $self->send_getMid();
                            return $self->recv_getMid();
}

sub send_getMid{
  my $self = shift;

                            $self->{output}->writeMessageBegin('getMid', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getMid_args();
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getMid{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getMid_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getMid failed: unknown result";
}
sub getUserCountryForBilling{
  my $self = shift;
  my $country = shift;
  my $remoteIp = shift;

                                                        $self->send_getUserCountryForBilling($country, $remoteIp);
                            return $self->recv_getUserCountryForBilling();
}

sub send_getUserCountryForBilling{
  my $self = shift;
  my $country = shift;
  my $remoteIp = shift;

                            $self->{output}->writeMessageBegin('getUserCountryForBilling', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getUserCountryForBilling_args();
                            $args->{country} = $country;
                            $args->{remoteIp} = $remoteIp;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getUserCountryForBilling{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getUserCountryForBilling_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getUserCountryForBilling failed: unknown result";
}
sub getFavoriteGroupIdsForChannel{
  my $self = shift;

                                                        $self->send_getFavoriteGroupIdsForChannel();
                            return $self->recv_getFavoriteGroupIdsForChannel();
}

sub send_getFavoriteGroupIdsForChannel{
  my $self = shift;

                            $self->{output}->writeMessageBegin('getFavoriteGroupIdsForChannel', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getFavoriteGroupIdsForChannel_args();
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getFavoriteGroupIdsForChannel{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getFavoriteGroupIdsForChannel_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getFavoriteGroupIdsForChannel failed: unknown result";
}
sub getPaidCallHistory{
  my $self = shift;
  my $start = shift;
  my $size = shift;
  my $language = shift;

                                                        $self->send_getPaidCallHistory($start, $size, $language);
                            return $self->recv_getPaidCallHistory();
}

sub send_getPaidCallHistory{
  my $self = shift;
  my $start = shift;
  my $size = shift;
  my $language = shift;

                            $self->{output}->writeMessageBegin('getPaidCallHistory', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getPaidCallHistory_args();
                            $args->{start} = $start;
                            $args->{size} = $size;
                            $args->{language} = $language;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getPaidCallHistory{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getPaidCallHistory_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getPaidCallHistory failed: unknown result";
}
sub sendPinCodeOperation{
  my $self = shift;
  my $verifier = shift;

                                                        $self->send_sendPinCodeOperation($verifier);
                            $self->recv_sendPinCodeOperation();
}

sub send_sendPinCodeOperation{
  my $self = shift;
  my $verifier = shift;

                            $self->{output}->writeMessageBegin('sendPinCodeOperation', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_sendPinCodeOperation_args();
                            $args->{verifier} = $verifier;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_sendPinCodeOperation{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_sendPinCodeOperation_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            return;
}
sub inviteIntoGroupCall{
  my $self = shift;
  my $chatMid = shift;
  my $memberMids = shift;
  my $mediaType = shift;

                                                        $self->send_inviteIntoGroupCall($chatMid, $memberMids, $mediaType);
                            $self->recv_inviteIntoGroupCall();
}

sub send_inviteIntoGroupCall{
  my $self = shift;
  my $chatMid = shift;
  my $memberMids = shift;
  my $mediaType = shift;

                            $self->{output}->writeMessageBegin('inviteIntoGroupCall', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_inviteIntoGroupCall_args();
                            $args->{chatMid} = $chatMid;
                            $args->{memberMids} = $memberMids;
                            $args->{mediaType} = $mediaType;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_inviteIntoGroupCall{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_inviteIntoGroupCall_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            return;
}
sub getFriendMids{
  my $self = shift;

                                                        $self->send_getFriendMids();
                            return $self->recv_getFriendMids();
}

sub send_getFriendMids{
  my $self = shift;

                            $self->{output}->writeMessageBegin('getFriendMids', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getFriendMids_args();
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getFriendMids{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getFriendMids_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getFriendMids failed: unknown result";
}
sub getMetaProfile{
  my $self = shift;

                                                        $self->send_getMetaProfile();
                            return $self->recv_getMetaProfile();
}

sub send_getMetaProfile{
  my $self = shift;

                            $self->{output}->writeMessageBegin('getMetaProfile', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getMetaProfile_args();
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getMetaProfile{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getMetaProfile_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getMetaProfile failed: unknown result";
}
sub sendMessageForChannel{
  my $self = shift;
  my $message = shift;

                                                        $self->send_sendMessageForChannel($message);
                            return $self->recv_sendMessageForChannel();
}

sub send_sendMessageForChannel{
  my $self = shift;
  my $message = shift;

                            $self->{output}->writeMessageBegin('sendMessageForChannel', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_sendMessageForChannel_args();
                            $args->{message} = $message;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_sendMessageForChannel{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_sendMessageForChannel_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "sendMessageForChannel failed: unknown result";
}
sub activeBuddySubscriberCount{
  my $self = shift;

                                                        $self->send_activeBuddySubscriberCount();
                            return $self->recv_activeBuddySubscriberCount();
}

sub send_activeBuddySubscriberCount{
  my $self = shift;

                            $self->{output}->writeMessageBegin('activeBuddySubscriberCount', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_activeBuddySubscriberCount_args();
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_activeBuddySubscriberCount{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_activeBuddySubscriberCount_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "activeBuddySubscriberCount failed: unknown result";
}
sub getCallCreditPurchaseHistory{
  my $self = shift;
  my $request = shift;

                                                        $self->send_getCallCreditPurchaseHistory($request);
                            return $self->recv_getCallCreditPurchaseHistory();
}

sub send_getCallCreditPurchaseHistory{
  my $self = shift;
  my $request = shift;

                            $self->{output}->writeMessageBegin('getCallCreditPurchaseHistory', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getCallCreditPurchaseHistory_args();
                            $args->{request} = $request;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getCallCreditPurchaseHistory{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getCallCreditPurchaseHistory_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getCallCreditPurchaseHistory failed: unknown result";
}
sub isRoomMember{
  my $self = shift;
  my $roomId = shift;

                                                        $self->send_isRoomMember($roomId);
                            return $self->recv_isRoomMember();
}

sub send_isRoomMember{
  my $self = shift;
  my $roomId = shift;

                            $self->{output}->writeMessageBegin('isRoomMember', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_isRoomMember_args();
                            $args->{roomId} = $roomId;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_isRoomMember{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_isRoomMember_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "isRoomMember failed: unknown result";
}
sub sendSystemOAMessage{
  my $self = shift;
  my $message = shift;

                                                        $self->send_sendSystemOAMessage($message);
                            return $self->recv_sendSystemOAMessage();
}

sub send_sendSystemOAMessage{
  my $self = shift;
  my $message = shift;

                            $self->{output}->writeMessageBegin('sendSystemOAMessage', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_sendSystemOAMessage_args();
                            $args->{message} = $message;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_sendSystemOAMessage{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_sendSystemOAMessage_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "sendSystemOAMessage failed: unknown result";
}
sub acquirePaidCallRoute{
  my $self = shift;
  my $paidCallType = shift;
  my $dialedNumber = shift;
  my $language = shift;
  my $networkCode = shift;
  my $disableCallerId = shift;
  my $referer = shift;
  my $adSessionId = shift;

                                                        $self->send_acquirePaidCallRoute($paidCallType, $dialedNumber, $language, $networkCode, $disableCallerId, $referer, $adSessionId);
                            return $self->recv_acquirePaidCallRoute();
}

sub send_acquirePaidCallRoute{
  my $self = shift;
  my $paidCallType = shift;
  my $dialedNumber = shift;
  my $language = shift;
  my $networkCode = shift;
  my $disableCallerId = shift;
  my $referer = shift;
  my $adSessionId = shift;

                            $self->{output}->writeMessageBegin('acquirePaidCallRoute', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_acquirePaidCallRoute_args();
                            $args->{paidCallType} = $paidCallType;
                            $args->{dialedNumber} = $dialedNumber;
                            $args->{language} = $language;
                            $args->{networkCode} = $networkCode;
                            $args->{disableCallerId} = $disableCallerId;
                            $args->{referer} = $referer;
                            $args->{adSessionId} = $adSessionId;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_acquirePaidCallRoute{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_acquirePaidCallRoute_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "acquirePaidCallRoute failed: unknown result";
}
sub getGroupsForChannel{
  my $self = shift;
  my $groupIds = shift;

                                                        $self->send_getGroupsForChannel($groupIds);
                            return $self->recv_getGroupsForChannel();
}

sub send_getGroupsForChannel{
  my $self = shift;
  my $groupIds = shift;

                            $self->{output}->writeMessageBegin('getGroupsForChannel', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getGroupsForChannel_args();
                            $args->{groupIds} = $groupIds;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getGroupsForChannel{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getGroupsForChannel_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getGroupsForChannel failed: unknown result";
}
sub getUserCreateTime{
  my $self = shift;

                                                        $self->send_getUserCreateTime();
                            return $self->recv_getUserCreateTime();
}

sub send_getUserCreateTime{
  my $self = shift;

                            $self->{output}->writeMessageBegin('getUserCreateTime', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getUserCreateTime_args();
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getUserCreateTime{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getUserCreateTime_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getUserCreateTime failed: unknown result";
}
sub registerChannelCP{
  my $self = shift;
  my $cpId = shift;
  my $registerPassword = shift;

                                                        $self->send_registerChannelCP($cpId, $registerPassword);
                            return $self->recv_registerChannelCP();
}

sub send_registerChannelCP{
  my $self = shift;
  my $cpId = shift;
  my $registerPassword = shift;

                            $self->{output}->writeMessageBegin('registerChannelCP', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_registerChannelCP_args();
                            $args->{cpId} = $cpId;
                            $args->{registerPassword} = $registerPassword;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_registerChannelCP{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_registerChannelCP_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "registerChannelCP failed: unknown result";
}
sub reserveCallCreditPurchase{
  my $self = shift;
  my $request = shift;

                                                        $self->send_reserveCallCreditPurchase($request);
                            return $self->recv_reserveCallCreditPurchase();
}

sub send_reserveCallCreditPurchase{
  my $self = shift;
  my $request = shift;

                            $self->{output}->writeMessageBegin('reserveCallCreditPurchase', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_reserveCallCreditPurchase_args();
                            $args->{request} = $request;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_reserveCallCreditPurchase{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_reserveCallCreditPurchase_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "reserveCallCreditPurchase failed: unknown result";
}
sub acquirePaidCallCurrencyExchangeRate{
  my $self = shift;
  my $language = shift;

                                                        $self->send_acquirePaidCallCurrencyExchangeRate($language);
                            return $self->recv_acquirePaidCallCurrencyExchangeRate();
}

sub send_acquirePaidCallCurrencyExchangeRate{
  my $self = shift;
  my $language = shift;

                            $self->{output}->writeMessageBegin('acquirePaidCallCurrencyExchangeRate', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_acquirePaidCallCurrencyExchangeRate_args();
                            $args->{language} = $language;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_acquirePaidCallCurrencyExchangeRate{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_acquirePaidCallCurrencyExchangeRate_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "acquirePaidCallCurrencyExchangeRate failed: unknown result";
}
sub getRoomMemberMidsForAppPlatform{
  my $self = shift;
  my $roomId = shift;

                                                        $self->send_getRoomMemberMidsForAppPlatform($roomId);
                            return $self->recv_getRoomMemberMidsForAppPlatform();
}

sub send_getRoomMemberMidsForAppPlatform{
  my $self = shift;
  my $roomId = shift;

                            $self->{output}->writeMessageBegin('getRoomMemberMidsForAppPlatform', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getRoomMemberMidsForAppPlatform_args();
                            $args->{roomId} = $roomId;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getRoomMemberMidsForAppPlatform{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getRoomMemberMidsForAppPlatform_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getRoomMemberMidsForAppPlatform failed: unknown result";
}
sub getPaidCallBalanceList{
  my $self = shift;
  my $language = shift;

                                                        $self->send_getPaidCallBalanceList($language);
                            return $self->recv_getPaidCallBalanceList();
}

sub send_getPaidCallBalanceList{
  my $self = shift;
  my $language = shift;

                            $self->{output}->writeMessageBegin('getPaidCallBalanceList', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getPaidCallBalanceList_args();
                            $args->{language} = $language;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getPaidCallBalanceList{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getPaidCallBalanceList_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getPaidCallBalanceList failed: unknown result";
}
sub getPersonalInfos{
  my $self = shift;
  my $requiredPersonalInfos = shift;

                                                        $self->send_getPersonalInfos($requiredPersonalInfos);
                            return $self->recv_getPersonalInfos();
}

sub send_getPersonalInfos{
  my $self = shift;
  my $requiredPersonalInfos = shift;

                            $self->{output}->writeMessageBegin('getPersonalInfos', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getPersonalInfos_args();
                            $args->{requiredPersonalInfos} = $requiredPersonalInfos;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getPersonalInfos{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getPersonalInfos_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getPersonalInfos failed: unknown result";
}
sub getPrimaryClientsForChannel{
  my $self = shift;
  my $userMids = shift;

                                                        $self->send_getPrimaryClientsForChannel($userMids);
                            return $self->recv_getPrimaryClientsForChannel();
}

sub send_getPrimaryClientsForChannel{
  my $self = shift;
  my $userMids = shift;

                            $self->{output}->writeMessageBegin('getPrimaryClientsForChannel', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getPrimaryClientsForChannel_args();
                            $args->{userMids} = $userMids;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getPrimaryClientsForChannel{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getPrimaryClientsForChannel_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getPrimaryClientsForChannel failed: unknown result";
}
sub addBuddyToContact{
  my $self = shift;
  my $buddyMid = shift;

                                                        $self->send_addBuddyToContact($buddyMid);
                            return $self->recv_addBuddyToContact();
}

sub send_addBuddyToContact{
  my $self = shift;
  my $buddyMid = shift;

                            $self->{output}->writeMessageBegin('addBuddyToContact', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_addBuddyToContact_args();
                            $args->{buddyMid} = $buddyMid;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_addBuddyToContact{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_addBuddyToContact_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "addBuddyToContact failed: unknown result";
}
sub getGroupMemberMidsForAppPlatform{
  my $self = shift;
  my $groupId = shift;

                                                        $self->send_getGroupMemberMidsForAppPlatform($groupId);
                            return $self->recv_getGroupMemberMidsForAppPlatform();
}

sub send_getGroupMemberMidsForAppPlatform{
  my $self = shift;
  my $groupId = shift;

                            $self->{output}->writeMessageBegin('getGroupMemberMidsForAppPlatform', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getGroupMemberMidsForAppPlatform_args();
                            $args->{groupId} = $groupId;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getGroupMemberMidsForAppPlatform{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getGroupMemberMidsForAppPlatform_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getGroupMemberMidsForAppPlatform failed: unknown result";
}
sub getUserLanguage{
  my $self = shift;

                                                        $self->send_getUserLanguage();
                            return $self->recv_getUserLanguage();
}

sub send_getUserLanguage{
  my $self = shift;

                            $self->{output}->writeMessageBegin('getUserLanguage', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getUserLanguage_args();
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getUserLanguage{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getUserLanguage_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getUserLanguage failed: unknown result";
}
sub lookupPaidCall{
  my $self = shift;
  my $dialedNumber = shift;
  my $language = shift;
  my $referer = shift;

                                                        $self->send_lookupPaidCall($dialedNumber, $language, $referer);
                            return $self->recv_lookupPaidCall();
}

sub send_lookupPaidCall{
  my $self = shift;
  my $dialedNumber = shift;
  my $language = shift;
  my $referer = shift;

                            $self->{output}->writeMessageBegin('lookupPaidCall', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_lookupPaidCall_args();
                            $args->{dialedNumber} = $dialedNumber;
                            $args->{language} = $language;
                            $args->{referer} = $referer;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_lookupPaidCall{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_lookupPaidCall_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "lookupPaidCall failed: unknown result";
}
sub getExtendedProfile{
  my $self = shift;

                                                        $self->send_getExtendedProfile();
                            return $self->recv_getExtendedProfile();
}

sub send_getExtendedProfile{
  my $self = shift;

                            $self->{output}->writeMessageBegin('getExtendedProfile', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getExtendedProfile_args();
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getExtendedProfile{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getExtendedProfile_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getExtendedProfile failed: unknown result";
}
sub getReverseCompactContacts{
  my $self = shift;
  my $ids = shift;

                                                        $self->send_getReverseCompactContacts($ids);
                            return $self->recv_getReverseCompactContacts();
}

sub send_getReverseCompactContacts{
  my $self = shift;
  my $ids = shift;

                            $self->{output}->writeMessageBegin('getReverseCompactContacts', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getReverseCompactContacts_args();
                            $args->{ids} = $ids;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getReverseCompactContacts{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getReverseCompactContacts_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getReverseCompactContacts failed: unknown result";
}
sub getPaidCallAdStatus{
  my $self = shift;

                                                        $self->send_getPaidCallAdStatus();
                            return $self->recv_getPaidCallAdStatus();
}

sub send_getPaidCallAdStatus{
  my $self = shift;

                            $self->{output}->writeMessageBegin('getPaidCallAdStatus', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getPaidCallAdStatus_args();
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getPaidCallAdStatus{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getPaidCallAdStatus_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getPaidCallAdStatus failed: unknown result";
}
sub findContactByUseridWithoutAbuseBlockForChannel{
  my $self = shift;
  my $userid = shift;

                                                        $self->send_findContactByUseridWithoutAbuseBlockForChannel($userid);
                            return $self->recv_findContactByUseridWithoutAbuseBlockForChannel();
}

sub send_findContactByUseridWithoutAbuseBlockForChannel{
  my $self = shift;
  my $userid = shift;

                            $self->{output}->writeMessageBegin('findContactByUseridWithoutAbuseBlockForChannel', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_findContactByUseridWithoutAbuseBlockForChannel_args();
                            $args->{userid} = $userid;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_findContactByUseridWithoutAbuseBlockForChannel{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_findContactByUseridWithoutAbuseBlockForChannel_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "findContactByUseridWithoutAbuseBlockForChannel failed: unknown result";
}
sub getGroupMemberMids{
  my $self = shift;
  my $groupId = shift;

                                                        $self->send_getGroupMemberMids($groupId);
                            return $self->recv_getGroupMemberMids();
}

sub send_getGroupMemberMids{
  my $self = shift;
  my $groupId = shift;

                            $self->{output}->writeMessageBegin('getGroupMemberMids', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getGroupMemberMids_args();
                            $args->{groupId} = $groupId;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getGroupMemberMids{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getGroupMemberMids_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getGroupMemberMids failed: unknown result";
}
sub sendMessageWithoutRelationship{
  my $self = shift;
  my $message = shift;

                                                        $self->send_sendMessageWithoutRelationship($message);
                            return $self->recv_sendMessageWithoutRelationship();
}

sub send_sendMessageWithoutRelationship{
  my $self = shift;
  my $message = shift;

                            $self->{output}->writeMessageBegin('sendMessageWithoutRelationship', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_sendMessageWithoutRelationship_args();
                            $args->{message} = $message;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_sendMessageWithoutRelationship{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_sendMessageWithoutRelationship_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "sendMessageWithoutRelationship failed: unknown result";
}
sub displayBuddySubscriberCountInBulk{
  my $self = shift;
  my $mids = shift;

                                                        $self->send_displayBuddySubscriberCountInBulk($mids);
                            return $self->recv_displayBuddySubscriberCountInBulk();
}

sub send_displayBuddySubscriberCountInBulk{
  my $self = shift;
  my $mids = shift;

                            $self->{output}->writeMessageBegin('displayBuddySubscriberCountInBulk', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_displayBuddySubscriberCountInBulk_args();
                            $args->{mids} = $mids;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_displayBuddySubscriberCountInBulk{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_displayBuddySubscriberCountInBulk_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "displayBuddySubscriberCountInBulk failed: unknown result";
}
sub lookupRoomMembers{
  my $self = shift;
  my $roomId = shift;
  my $mids = shift;

                                                        $self->send_lookupRoomMembers($roomId, $mids);
                            return $self->recv_lookupRoomMembers();
}

sub send_lookupRoomMembers{
  my $self = shift;
  my $roomId = shift;
  my $mids = shift;

                            $self->{output}->writeMessageBegin('lookupRoomMembers', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_lookupRoomMembers_args();
                            $args->{roomId} = $roomId;
                            $args->{mids} = $mids;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_lookupRoomMembers{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_lookupRoomMembers_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "lookupRoomMembers failed: unknown result";
}
sub getFavoriteMidsForChannel{
  my $self = shift;

                                                        $self->send_getFavoriteMidsForChannel();
                            return $self->recv_getFavoriteMidsForChannel();
}

sub send_getFavoriteMidsForChannel{
  my $self = shift;

                            $self->{output}->writeMessageBegin('getFavoriteMidsForChannel', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getFavoriteMidsForChannel_args();
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getFavoriteMidsForChannel{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getFavoriteMidsForChannel_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getFavoriteMidsForChannel failed: unknown result";
}
sub getAllContactIdsForChannel{
  my $self = shift;

                                                        $self->send_getAllContactIdsForChannel();
                            return $self->recv_getAllContactIdsForChannel();
}

sub send_getAllContactIdsForChannel{
  my $self = shift;

                            $self->{output}->writeMessageBegin('getAllContactIdsForChannel', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getAllContactIdsForChannel_args();
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getAllContactIdsForChannel{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getAllContactIdsForChannel_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getAllContactIdsForChannel failed: unknown result";
}
sub displayBuddySubscriberCount{
  my $self = shift;

                                                        $self->send_displayBuddySubscriberCount();
                            return $self->recv_displayBuddySubscriberCount();
}

sub send_displayBuddySubscriberCount{
  my $self = shift;

                            $self->{output}->writeMessageBegin('displayBuddySubscriberCount', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_displayBuddySubscriberCount_args();
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_displayBuddySubscriberCount{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_displayBuddySubscriberCount_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "displayBuddySubscriberCount failed: unknown result";
}
sub getProfileForChannel{
  my $self = shift;

                                                        $self->send_getProfileForChannel();
                            return $self->recv_getProfileForChannel();
}

sub send_getProfileForChannel{
  my $self = shift;

                            $self->{output}->writeMessageBegin('getProfileForChannel', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getProfileForChannel_args();
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getProfileForChannel{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getProfileForChannel_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getProfileForChannel failed: unknown result";
}
sub getUserTickets{
  my $self = shift;
  my $userMids = shift;

                                                        $self->send_getUserTickets($userMids);
                            return $self->recv_getUserTickets();
}

sub send_getUserTickets{
  my $self = shift;
  my $userMids = shift;

                            $self->{output}->writeMessageBegin('getUserTickets', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getUserTickets_args();
                            $args->{userMids} = $userMids;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getUserTickets{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getUserTickets_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getUserTickets failed: unknown result";
}
sub getOAFriendMids{
  my $self = shift;

                                                        $self->send_getOAFriendMids();
                            return $self->recv_getOAFriendMids();
}

sub send_getOAFriendMids{
  my $self = shift;

                            $self->{output}->writeMessageBegin('getOAFriendMids', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getOAFriendMids_args();
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getOAFriendMids{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getOAFriendMids_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getOAFriendMids failed: unknown result";
}
sub searchPaidCallUserRate{
  my $self = shift;
  my $countryCode = shift;
  my $language = shift;

                                                        $self->send_searchPaidCallUserRate($countryCode, $language);
                            return $self->recv_searchPaidCallUserRate();
}

sub send_searchPaidCallUserRate{
  my $self = shift;
  my $countryCode = shift;
  my $language = shift;

                            $self->{output}->writeMessageBegin('searchPaidCallUserRate', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_searchPaidCallUserRate_args();
                            $args->{countryCode} = $countryCode;
                            $args->{language} = $language;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_searchPaidCallUserRate{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_searchPaidCallUserRate_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "searchPaidCallUserRate failed: unknown result";
}
sub getJoinedGroupIdsForChannel{
  my $self = shift;

                                                        $self->send_getJoinedGroupIdsForChannel();
                            return $self->recv_getJoinedGroupIdsForChannel();
}

sub send_getJoinedGroupIdsForChannel{
  my $self = shift;

                            $self->{output}->writeMessageBegin('getJoinedGroupIdsForChannel', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getJoinedGroupIdsForChannel_args();
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getJoinedGroupIdsForChannel{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getJoinedGroupIdsForChannel_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getJoinedGroupIdsForChannel failed: unknown result";
}
sub acquireGroupCallRoute{
  my $self = shift;
  my $chatMid = shift;
  my $mediaType = shift;

                                                        $self->send_acquireGroupCallRoute($chatMid, $mediaType);
                            return $self->recv_acquireGroupCallRoute();
}

sub send_acquireGroupCallRoute{
  my $self = shift;
  my $chatMid = shift;
  my $mediaType = shift;

                            $self->{output}->writeMessageBegin('acquireGroupCallRoute', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_acquireGroupCallRoute_args();
                            $args->{chatMid} = $chatMid;
                            $args->{mediaType} = $mediaType;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_acquireGroupCallRoute{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_acquireGroupCallRoute_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "acquireGroupCallRoute failed: unknown result";
}
sub getUserMidsWhoAddedMe{
  my $self = shift;

                                                        $self->send_getUserMidsWhoAddedMe();
                            return $self->recv_getUserMidsWhoAddedMe();
}

sub send_getUserMidsWhoAddedMe{
  my $self = shift;

                            $self->{output}->writeMessageBegin('getUserMidsWhoAddedMe', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getUserMidsWhoAddedMe_args();
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getUserMidsWhoAddedMe{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getUserMidsWhoAddedMe_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getUserMidsWhoAddedMe failed: unknown result";
}
sub getIdentityCredential{
  my $self = shift;

                                                        $self->send_getIdentityCredential();
                            return $self->recv_getIdentityCredential();
}

sub send_getIdentityCredential{
  my $self = shift;

                            $self->{output}->writeMessageBegin('getIdentityCredential', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getIdentityCredential_args();
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getIdentityCredential{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getIdentityCredential_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getIdentityCredential failed: unknown result";
}
sub addOperationForChannel{
  my $self = shift;
  my $opType = shift;
  my $param1 = shift;
  my $param2 = shift;
  my $param3 = shift;

                                                        $self->send_addOperationForChannel($opType, $param1, $param2, $param3);
                            $self->recv_addOperationForChannel();
}

sub send_addOperationForChannel{
  my $self = shift;
  my $opType = shift;
  my $param1 = shift;
  my $param2 = shift;
  my $param3 = shift;

                            $self->{output}->writeMessageBegin('addOperationForChannel', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_addOperationForChannel_args();
                            $args->{opType} = $opType;
                            $args->{param1} = $param1;
                            $args->{param2} = $param2;
                            $args->{param3} = $param3;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_addOperationForChannel{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_addOperationForChannel_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            return;
}
sub getSimpleChannelContacts{
  my $self = shift;
  my $ids = shift;
  my $statusSticonFallbackDisabled = shift;

                                                        $self->send_getSimpleChannelContacts($ids, $statusSticonFallbackDisabled);
                            return $self->recv_getSimpleChannelContacts();
}

sub send_getSimpleChannelContacts{
  my $self = shift;
  my $ids = shift;
  my $statusSticonFallbackDisabled = shift;

                            $self->{output}->writeMessageBegin('getSimpleChannelContacts', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getSimpleChannelContacts_args();
                            $args->{ids} = $ids;
                            $args->{statusSticonFallbackDisabled} = $statusSticonFallbackDisabled;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getSimpleChannelContacts{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getSimpleChannelContacts_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getSimpleChannelContacts failed: unknown result";
}
sub getUserLastSentMessageTimeStamp{
  my $self = shift;
  my $mid = shift;

                                                        $self->send_getUserLastSentMessageTimeStamp($mid);
                            return $self->recv_getUserLastSentMessageTimeStamp();
}

sub send_getUserLastSentMessageTimeStamp{
  my $self = shift;
  my $mid = shift;

                            $self->{output}->writeMessageBegin('getUserLastSentMessageTimeStamp', Thrift::TMessageType::CALL, $self->{seqid});
                            my $args = new CallService_getUserLastSentMessageTimeStamp_args();
                            $args->{mid} = $mid;
                            $args->write($self->{output});
                            $self->{output}->writeMessageEnd();
                            $self->{output}->getTransport()->flush();
}

sub recv_getUserLastSentMessageTimeStamp{
  my $self = shift;

                            my $rseqid = 0;
                            my $fname;
                            my $mtype = 0;

                            $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
                            if ($mtype == Thrift::TMessageType::EXCEPTION) {
                              my $x = new Thrift::TApplicationException();
                              $x->read($self->{input});
                              $self->{input}->readMessageEnd();
                              die $x;
                            }
                            my $result = new CallService_getUserLastSentMessageTimeStamp_result();
                            $result->read($self->{input});
                            $self->{input}->readMessageEnd();

                            if (defined $result->{success} ) {
                              return $result->{success};
                            }
                            if (defined $result->{e}) {
                              die $result->{e};
                            }
                            die "getUserLastSentMessageTimeStamp failed: unknown result";
}
package CallServiceProcessor;

use strict;


sub new {
                              my ($classname, $handler) = @_;
                              my $self      = {};
                              $self->{handler} = $handler;
                              return bless ($self, $classname);
}

sub process {
                              my ($self, $input, $output) = @_;
                              my $rseqid = 0;
                              my $fname  = undef;
                              my $mtype  = 0;

                              $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
                              my $methodname = 'process_'.$fname;
                              if (!$self->can($methodname)) {
                                $input->skip(Thrift::TType::STRUCT);
                                $input->readMessageEnd();
                                my $x = new Thrift::TApplicationException('Function '.$fname.' not implemented.', Thrift::TApplicationException::UNKNOWN_METHOD);
                                $output->writeMessageBegin($fname, Thrift::TMessageType::EXCEPTION, $rseqid);
                                $x->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                return;
                              }
                              $self->$methodname($rseqid, $input, $output);
                              return 1;
}

sub process_getUserStatus {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getUserStatus_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getUserStatus_result();
                              eval {
                                $result->{success} = $self->{handler}->getUserStatus($args->mid);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getUserStatus', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getUserStatus', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_updateProfileAttributeForChannel {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_updateProfileAttributeForChannel_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_updateProfileAttributeForChannel_result();
                              eval {
                                $self->{handler}->updateProfileAttributeForChannel($args->profileAttribute, $args->value);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('updateProfileAttributeForChannel', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('updateProfileAttributeForChannel', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_updateExtendedProfileAttribute {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_updateExtendedProfileAttribute_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_updateExtendedProfileAttribute_result();
                              eval {
                                $self->{handler}->updateExtendedProfileAttribute($args->attr, $args->extendedProfile);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('updateExtendedProfileAttribute', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('updateExtendedProfileAttribute', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getAllSimpleChannelContacts {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getAllSimpleChannelContacts_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getAllSimpleChannelContacts_result();
                              eval {
                                $result->{success} = $self->{handler}->getAllSimpleChannelContacts($args->statusSticonFallbackDisabled);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getAllSimpleChannelContacts', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getAllSimpleChannelContacts', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getUserIdentities {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getUserIdentities_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getUserIdentities_result();
                              eval {
                                $result->{success} = $self->{handler}->getUserIdentities();
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getUserIdentities', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getUserIdentities', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_markPaidCallAd {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_markPaidCallAd_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_markPaidCallAd_result();
                              eval {
                                $result->{success} = $self->{handler}->markPaidCallAd($args->dialedNumber, $args->language, $args->disableCallerId);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('markPaidCallAd', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('markPaidCallAd', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_isGroupMember {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_isGroupMember_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_isGroupMember_result();
                              eval {
                                $result->{success} = $self->{handler}->isGroupMember($args->groupId);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('isGroupMember', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('isGroupMember', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getPhoneInfoFromPhoneNumber {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getPhoneInfoFromPhoneNumber_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getPhoneInfoFromPhoneNumber_result();
                              eval {
                                $result->{success} = $self->{handler}->getPhoneInfoFromPhoneNumber($args->region, $args->phoneNumber);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getPhoneInfoFromPhoneNumber', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getPhoneInfoFromPhoneNumber', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_redeemPaidCallVoucher {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_redeemPaidCallVoucher_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_redeemPaidCallVoucher_result();
                              eval {
                                $result->{success} = $self->{handler}->redeemPaidCallVoucher($args->serial, $args->language);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('redeemPaidCallVoucher', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('redeemPaidCallVoucher', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getPreferredDisplayName {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getPreferredDisplayName_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getPreferredDisplayName_result();
                              eval {
                                $result->{success} = $self->{handler}->getPreferredDisplayName($args->mids);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getPreferredDisplayName', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getPreferredDisplayName', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getContactsForChannel {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getContactsForChannel_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getContactsForChannel_result();
                              eval {
                                $result->{success} = $self->{handler}->getContactsForChannel($args->ids);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getContactsForChannel', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getContactsForChannel', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getCallCreditProducts {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getCallCreditProducts_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getCallCreditProducts_result();
                              eval {
                                $result->{success} = $self->{handler}->getCallCreditProducts($args->appStoreCode, $args->pgCode, $args->country, $args->language);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getCallCreditProducts', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getCallCreditProducts', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getCompactContacts {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getCompactContacts_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getCompactContacts_result();
                              eval {
                                $result->{success} = $self->{handler}->getCompactContacts($args->lastModifiedTimestamp);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getCompactContacts', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getCompactContacts', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_notifyNotiCenterEvent {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_notifyNotiCenterEvent_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_notifyNotiCenterEvent_result();
                              eval {
                                $self->{handler}->notifyNotiCenterEvent($args->event);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('notifyNotiCenterEvent', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('notifyNotiCenterEvent', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_isInContact {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_isInContact_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_isInContact_result();
                              eval {
                                $result->{success} = $self->{handler}->isInContact($args->mid);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('isInContact', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('isInContact', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_lookupGroupMembers {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_lookupGroupMembers_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_lookupGroupMembers_result();
                              eval {
                                $result->{success} = $self->{handler}->lookupGroupMembers($args->groupId, $args->mids);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('lookupGroupMembers', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('lookupGroupMembers', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getRoomInformation {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getRoomInformation_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getRoomInformation_result();
                              eval {
                                $result->{success} = $self->{handler}->getRoomInformation($args->roomMid);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getRoomInformation', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getRoomInformation', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getGroupCall {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getGroupCall_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getGroupCall_result();
                              eval {
                                $result->{success} = $self->{handler}->getGroupCall($args->chatMid);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getGroupCall', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getGroupCall', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_isAllowSecondaryDeviceLogin {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_isAllowSecondaryDeviceLogin_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_isAllowSecondaryDeviceLogin_result();
                              eval {
                                $result->{success} = $self->{handler}->isAllowSecondaryDeviceLogin();
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('isAllowSecondaryDeviceLogin', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('isAllowSecondaryDeviceLogin', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getPrimaryClientForChannel {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getPrimaryClientForChannel_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getPrimaryClientForChannel_result();
                              eval {
                                $result->{success} = $self->{handler}->getPrimaryClientForChannel();
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getPrimaryClientForChannel', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getPrimaryClientForChannel', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_createRoomWithBuddy {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_createRoomWithBuddy_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_createRoomWithBuddy_result();
                              eval {
                                $result->{success} = $self->{handler}->createRoomWithBuddy($args->reqSeq, $args->buddyMid, $args->contactIds);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('createRoomWithBuddy', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('createRoomWithBuddy', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getDisplayName {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getDisplayName_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getDisplayName_result();
                              eval {
                                $result->{success} = $self->{handler}->getDisplayName($args->mid);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getDisplayName', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getDisplayName', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getPaidCallMetadata {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getPaidCallMetadata_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getPaidCallMetadata_result();
                              eval {
                                $result->{success} = $self->{handler}->getPaidCallMetadata($args->language);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getPaidCallMetadata', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getPaidCallMetadata', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getMid {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getMid_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getMid_result();
                              eval {
                                $result->{success} = $self->{handler}->getMid();
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getMid', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getMid', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getUserCountryForBilling {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getUserCountryForBilling_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getUserCountryForBilling_result();
                              eval {
                                $result->{success} = $self->{handler}->getUserCountryForBilling($args->country, $args->remoteIp);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getUserCountryForBilling', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getUserCountryForBilling', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getFavoriteGroupIdsForChannel {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getFavoriteGroupIdsForChannel_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getFavoriteGroupIdsForChannel_result();
                              eval {
                                $result->{success} = $self->{handler}->getFavoriteGroupIdsForChannel();
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getFavoriteGroupIdsForChannel', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getFavoriteGroupIdsForChannel', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getPaidCallHistory {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getPaidCallHistory_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getPaidCallHistory_result();
                              eval {
                                $result->{success} = $self->{handler}->getPaidCallHistory($args->start, $args->size, $args->language);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getPaidCallHistory', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getPaidCallHistory', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_sendPinCodeOperation {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_sendPinCodeOperation_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_sendPinCodeOperation_result();
                              eval {
                                $self->{handler}->sendPinCodeOperation($args->verifier);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('sendPinCodeOperation', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('sendPinCodeOperation', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_inviteIntoGroupCall {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_inviteIntoGroupCall_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_inviteIntoGroupCall_result();
                              eval {
                                $self->{handler}->inviteIntoGroupCall($args->chatMid, $args->memberMids, $args->mediaType);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('inviteIntoGroupCall', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('inviteIntoGroupCall', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getFriendMids {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getFriendMids_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getFriendMids_result();
                              eval {
                                $result->{success} = $self->{handler}->getFriendMids();
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getFriendMids', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getFriendMids', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getMetaProfile {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getMetaProfile_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getMetaProfile_result();
                              eval {
                                $result->{success} = $self->{handler}->getMetaProfile();
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getMetaProfile', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getMetaProfile', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_sendMessageForChannel {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_sendMessageForChannel_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_sendMessageForChannel_result();
                              eval {
                                $result->{success} = $self->{handler}->sendMessageForChannel($args->message);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('sendMessageForChannel', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('sendMessageForChannel', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_activeBuddySubscriberCount {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_activeBuddySubscriberCount_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_activeBuddySubscriberCount_result();
                              eval {
                                $result->{success} = $self->{handler}->activeBuddySubscriberCount();
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('activeBuddySubscriberCount', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('activeBuddySubscriberCount', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getCallCreditPurchaseHistory {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getCallCreditPurchaseHistory_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getCallCreditPurchaseHistory_result();
                              eval {
                                $result->{success} = $self->{handler}->getCallCreditPurchaseHistory($args->request);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getCallCreditPurchaseHistory', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getCallCreditPurchaseHistory', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_isRoomMember {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_isRoomMember_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_isRoomMember_result();
                              eval {
                                $result->{success} = $self->{handler}->isRoomMember($args->roomId);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('isRoomMember', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('isRoomMember', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_sendSystemOAMessage {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_sendSystemOAMessage_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_sendSystemOAMessage_result();
                              eval {
                                $result->{success} = $self->{handler}->sendSystemOAMessage($args->message);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('sendSystemOAMessage', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('sendSystemOAMessage', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_acquirePaidCallRoute {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_acquirePaidCallRoute_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_acquirePaidCallRoute_result();
                              eval {
                                $result->{success} = $self->{handler}->acquirePaidCallRoute($args->paidCallType, $args->dialedNumber, $args->language, $args->networkCode, $args->disableCallerId, $args->referer, $args->adSessionId);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('acquirePaidCallRoute', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('acquirePaidCallRoute', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getGroupsForChannel {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getGroupsForChannel_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getGroupsForChannel_result();
                              eval {
                                $result->{success} = $self->{handler}->getGroupsForChannel($args->groupIds);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getGroupsForChannel', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getGroupsForChannel', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getUserCreateTime {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getUserCreateTime_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getUserCreateTime_result();
                              eval {
                                $result->{success} = $self->{handler}->getUserCreateTime();
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getUserCreateTime', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getUserCreateTime', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_registerChannelCP {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_registerChannelCP_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_registerChannelCP_result();
                              eval {
                                $result->{success} = $self->{handler}->registerChannelCP($args->cpId, $args->registerPassword);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('registerChannelCP', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('registerChannelCP', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_reserveCallCreditPurchase {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_reserveCallCreditPurchase_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_reserveCallCreditPurchase_result();
                              eval {
                                $result->{success} = $self->{handler}->reserveCallCreditPurchase($args->request);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('reserveCallCreditPurchase', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('reserveCallCreditPurchase', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_acquirePaidCallCurrencyExchangeRate {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_acquirePaidCallCurrencyExchangeRate_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_acquirePaidCallCurrencyExchangeRate_result();
                              eval {
                                $result->{success} = $self->{handler}->acquirePaidCallCurrencyExchangeRate($args->language);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('acquirePaidCallCurrencyExchangeRate', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('acquirePaidCallCurrencyExchangeRate', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getRoomMemberMidsForAppPlatform {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getRoomMemberMidsForAppPlatform_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getRoomMemberMidsForAppPlatform_result();
                              eval {
                                $result->{success} = $self->{handler}->getRoomMemberMidsForAppPlatform($args->roomId);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getRoomMemberMidsForAppPlatform', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getRoomMemberMidsForAppPlatform', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getPaidCallBalanceList {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getPaidCallBalanceList_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getPaidCallBalanceList_result();
                              eval {
                                $result->{success} = $self->{handler}->getPaidCallBalanceList($args->language);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getPaidCallBalanceList', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getPaidCallBalanceList', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getPersonalInfos {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getPersonalInfos_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getPersonalInfos_result();
                              eval {
                                $result->{success} = $self->{handler}->getPersonalInfos($args->requiredPersonalInfos);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getPersonalInfos', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getPersonalInfos', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getPrimaryClientsForChannel {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getPrimaryClientsForChannel_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getPrimaryClientsForChannel_result();
                              eval {
                                $result->{success} = $self->{handler}->getPrimaryClientsForChannel($args->userMids);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getPrimaryClientsForChannel', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getPrimaryClientsForChannel', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_addBuddyToContact {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_addBuddyToContact_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_addBuddyToContact_result();
                              eval {
                                $result->{success} = $self->{handler}->addBuddyToContact($args->buddyMid);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('addBuddyToContact', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('addBuddyToContact', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getGroupMemberMidsForAppPlatform {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getGroupMemberMidsForAppPlatform_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getGroupMemberMidsForAppPlatform_result();
                              eval {
                                $result->{success} = $self->{handler}->getGroupMemberMidsForAppPlatform($args->groupId);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getGroupMemberMidsForAppPlatform', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getGroupMemberMidsForAppPlatform', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getUserLanguage {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getUserLanguage_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getUserLanguage_result();
                              eval {
                                $result->{success} = $self->{handler}->getUserLanguage();
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getUserLanguage', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getUserLanguage', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_lookupPaidCall {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_lookupPaidCall_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_lookupPaidCall_result();
                              eval {
                                $result->{success} = $self->{handler}->lookupPaidCall($args->dialedNumber, $args->language, $args->referer);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('lookupPaidCall', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('lookupPaidCall', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getExtendedProfile {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getExtendedProfile_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getExtendedProfile_result();
                              eval {
                                $result->{success} = $self->{handler}->getExtendedProfile();
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getExtendedProfile', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getExtendedProfile', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getReverseCompactContacts {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getReverseCompactContacts_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getReverseCompactContacts_result();
                              eval {
                                $result->{success} = $self->{handler}->getReverseCompactContacts($args->ids);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getReverseCompactContacts', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getReverseCompactContacts', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getPaidCallAdStatus {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getPaidCallAdStatus_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getPaidCallAdStatus_result();
                              eval {
                                $result->{success} = $self->{handler}->getPaidCallAdStatus();
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getPaidCallAdStatus', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getPaidCallAdStatus', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_findContactByUseridWithoutAbuseBlockForChannel {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_findContactByUseridWithoutAbuseBlockForChannel_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_findContactByUseridWithoutAbuseBlockForChannel_result();
                              eval {
                                $result->{success} = $self->{handler}->findContactByUseridWithoutAbuseBlockForChannel($args->userid);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('findContactByUseridWithoutAbuseBlockForChannel', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('findContactByUseridWithoutAbuseBlockForChannel', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getGroupMemberMids {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getGroupMemberMids_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getGroupMemberMids_result();
                              eval {
                                $result->{success} = $self->{handler}->getGroupMemberMids($args->groupId);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getGroupMemberMids', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getGroupMemberMids', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_sendMessageWithoutRelationship {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_sendMessageWithoutRelationship_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_sendMessageWithoutRelationship_result();
                              eval {
                                $result->{success} = $self->{handler}->sendMessageWithoutRelationship($args->message);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('sendMessageWithoutRelationship', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('sendMessageWithoutRelationship', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_displayBuddySubscriberCountInBulk {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_displayBuddySubscriberCountInBulk_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_displayBuddySubscriberCountInBulk_result();
                              eval {
                                $result->{success} = $self->{handler}->displayBuddySubscriberCountInBulk($args->mids);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('displayBuddySubscriberCountInBulk', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('displayBuddySubscriberCountInBulk', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_lookupRoomMembers {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_lookupRoomMembers_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_lookupRoomMembers_result();
                              eval {
                                $result->{success} = $self->{handler}->lookupRoomMembers($args->roomId, $args->mids);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('lookupRoomMembers', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('lookupRoomMembers', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getFavoriteMidsForChannel {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getFavoriteMidsForChannel_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getFavoriteMidsForChannel_result();
                              eval {
                                $result->{success} = $self->{handler}->getFavoriteMidsForChannel();
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getFavoriteMidsForChannel', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getFavoriteMidsForChannel', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getAllContactIdsForChannel {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getAllContactIdsForChannel_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getAllContactIdsForChannel_result();
                              eval {
                                $result->{success} = $self->{handler}->getAllContactIdsForChannel();
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getAllContactIdsForChannel', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getAllContactIdsForChannel', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_displayBuddySubscriberCount {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_displayBuddySubscriberCount_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_displayBuddySubscriberCount_result();
                              eval {
                                $result->{success} = $self->{handler}->displayBuddySubscriberCount();
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('displayBuddySubscriberCount', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('displayBuddySubscriberCount', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getProfileForChannel {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getProfileForChannel_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getProfileForChannel_result();
                              eval {
                                $result->{success} = $self->{handler}->getProfileForChannel();
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getProfileForChannel', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getProfileForChannel', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getUserTickets {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getUserTickets_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getUserTickets_result();
                              eval {
                                $result->{success} = $self->{handler}->getUserTickets($args->userMids);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getUserTickets', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getUserTickets', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getOAFriendMids {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getOAFriendMids_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getOAFriendMids_result();
                              eval {
                                $result->{success} = $self->{handler}->getOAFriendMids();
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getOAFriendMids', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getOAFriendMids', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_searchPaidCallUserRate {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_searchPaidCallUserRate_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_searchPaidCallUserRate_result();
                              eval {
                                $result->{success} = $self->{handler}->searchPaidCallUserRate($args->countryCode, $args->language);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('searchPaidCallUserRate', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('searchPaidCallUserRate', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getJoinedGroupIdsForChannel {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getJoinedGroupIdsForChannel_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getJoinedGroupIdsForChannel_result();
                              eval {
                                $result->{success} = $self->{handler}->getJoinedGroupIdsForChannel();
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getJoinedGroupIdsForChannel', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getJoinedGroupIdsForChannel', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_acquireGroupCallRoute {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_acquireGroupCallRoute_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_acquireGroupCallRoute_result();
                              eval {
                                $result->{success} = $self->{handler}->acquireGroupCallRoute($args->chatMid, $args->mediaType);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('acquireGroupCallRoute', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('acquireGroupCallRoute', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getUserMidsWhoAddedMe {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getUserMidsWhoAddedMe_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getUserMidsWhoAddedMe_result();
                              eval {
                                $result->{success} = $self->{handler}->getUserMidsWhoAddedMe();
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getUserMidsWhoAddedMe', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getUserMidsWhoAddedMe', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getIdentityCredential {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getIdentityCredential_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getIdentityCredential_result();
                              eval {
                                $result->{success} = $self->{handler}->getIdentityCredential();
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getIdentityCredential', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getIdentityCredential', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_addOperationForChannel {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_addOperationForChannel_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_addOperationForChannel_result();
                              eval {
                                $self->{handler}->addOperationForChannel($args->opType, $args->param1, $args->param2, $args->param3);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('addOperationForChannel', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('addOperationForChannel', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getSimpleChannelContacts {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getSimpleChannelContacts_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getSimpleChannelContacts_result();
                              eval {
                                $result->{success} = $self->{handler}->getSimpleChannelContacts($args->ids, $args->statusSticonFallbackDisabled);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getSimpleChannelContacts', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getSimpleChannelContacts', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

sub process_getUserLastSentMessageTimeStamp {
                              my ($self, $seqid, $input, $output) = @_;
                              my $args = new CallService_getUserLastSentMessageTimeStamp_args();
                              $args->read($input);
                              $input->readMessageEnd();
                              my $result = new CallService_getUserLastSentMessageTimeStamp_result();
                              eval {
                                $result->{success} = $self->{handler}->getUserLastSentMessageTimeStamp($args->mid);
                              }; if( UNIVERSAL::isa($@,'TalkException') ){ 
                                $result->{e} = $@;
                                $@ = undef;
                              }
                              if ($@) {
                                $@ =~ s/^\s+|\s+$//g;
                                my $err = new Thrift::TApplicationException("Unexpected Exception: " . $@, Thrift::TApplicationException::INTERNAL_ERROR);
                                $output->writeMessageBegin('getUserLastSentMessageTimeStamp', Thrift::TMessageType::EXCEPTION, $seqid);
                                $err->write($output);
                                $output->writeMessageEnd();
                                $output->getTransport()->flush();
                                $@ = undef;
                                return;
                              }
                              $output->writeMessageBegin('getUserLastSentMessageTimeStamp', Thrift::TMessageType::REPLY, $seqid);
                              $result->write($output);
                              $output->writeMessageEnd();
                              $output->getTransport()->flush();
}

1;
