%%
%% Autogenerated by Thrift Compiler (0.11.0)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(channel_application_provided_service_thrift).
-behaviour(thrift_service).


-include("channel_application_provided_service_thrift.hrl").

-export([struct_info/1, function_info/2, function_names/0]).

struct_info(_) -> erlang:error(function_clause).
%%% interface
% activeBuddySubscriberCount(This)
function_info('activeBuddySubscriberCount', params_type) ->
  {struct, []}
;
function_info('activeBuddySubscriberCount', reply_type) ->
  i64;
function_info('activeBuddySubscriberCount', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% addOperationForChannel(This, OpType, Param1, Param2, Param3)
function_info('addOperationForChannel', params_type) ->
  {struct, [{1, i32},
          {2, string},
          {3, string},
          {4, string}]}
;
function_info('addOperationForChannel', reply_type) ->
  {struct, []};
function_info('addOperationForChannel', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% displayBuddySubscriberCount(This)
function_info('displayBuddySubscriberCount', params_type) ->
  {struct, []}
;
function_info('displayBuddySubscriberCount', reply_type) ->
  i64;
function_info('displayBuddySubscriberCount', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% findContactByUseridWithoutAbuseBlockForChannel(This, Userid)
function_info('findContactByUseridWithoutAbuseBlockForChannel', params_type) ->
  {struct, [{2, string}]}
;
function_info('findContactByUseridWithoutAbuseBlockForChannel', reply_type) ->
  {struct, {'line_types', 'Contact'}};
function_info('findContactByUseridWithoutAbuseBlockForChannel', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getAllContactIdsForChannel(This)
function_info('getAllContactIdsForChannel', params_type) ->
  {struct, []}
;
function_info('getAllContactIdsForChannel', reply_type) ->
  {list, string};
function_info('getAllContactIdsForChannel', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getCompactContacts(This, LastModifiedTimestamp)
function_info('getCompactContacts', params_type) ->
  {struct, [{2, i64}]}
;
function_info('getCompactContacts', reply_type) ->
  {list, {struct, {'line_types', 'CompactContact'}}};
function_info('getCompactContacts', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getContactsForChannel(This, Ids)
function_info('getContactsForChannel', params_type) ->
  {struct, [{2, {list, string}}]}
;
function_info('getContactsForChannel', reply_type) ->
  {list, {struct, {'line_types', 'Contact'}}};
function_info('getContactsForChannel', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getDisplayName(This, Mid)
function_info('getDisplayName', params_type) ->
  {struct, [{2, string}]}
;
function_info('getDisplayName', reply_type) ->
  string;
function_info('getDisplayName', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getFavoriteMidsForChannel(This)
function_info('getFavoriteMidsForChannel', params_type) ->
  {struct, []}
;
function_info('getFavoriteMidsForChannel', reply_type) ->
  {list, string};
function_info('getFavoriteMidsForChannel', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getFriendMids(This)
function_info('getFriendMids', params_type) ->
  {struct, []}
;
function_info('getFriendMids', reply_type) ->
  {list, string};
function_info('getFriendMids', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getGroupMemberMids(This, GroupId)
function_info('getGroupMemberMids', params_type) ->
  {struct, [{1, string}]}
;
function_info('getGroupMemberMids', reply_type) ->
  {list, string};
function_info('getGroupMemberMids', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getGroupsForChannel(This, GroupIds)
function_info('getGroupsForChannel', params_type) ->
  {struct, [{1, {list, string}}]}
;
function_info('getGroupsForChannel', reply_type) ->
  {list, {struct, {'line_types', 'Group'}}};
function_info('getGroupsForChannel', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getIdentityCredential(This)
function_info('getIdentityCredential', params_type) ->
  {struct, []}
;
function_info('getIdentityCredential', reply_type) ->
  {struct, {'line_types', 'IdentityCredential'}};
function_info('getIdentityCredential', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getJoinedGroupIdsForChannel(This)
function_info('getJoinedGroupIdsForChannel', params_type) ->
  {struct, []}
;
function_info('getJoinedGroupIdsForChannel', reply_type) ->
  {list, string};
function_info('getJoinedGroupIdsForChannel', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getMetaProfile(This)
function_info('getMetaProfile', params_type) ->
  {struct, []}
;
function_info('getMetaProfile', reply_type) ->
  {struct, {'line_types', 'MetaProfile'}};
function_info('getMetaProfile', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getMid(This)
function_info('getMid', params_type) ->
  {struct, []}
;
function_info('getMid', reply_type) ->
  string;
function_info('getMid', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getPrimaryClientForChannel(This)
function_info('getPrimaryClientForChannel', params_type) ->
  {struct, []}
;
function_info('getPrimaryClientForChannel', reply_type) ->
  {struct, {'line_types', 'SimpleChannelClient'}};
function_info('getPrimaryClientForChannel', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getProfileForChannel(This)
function_info('getProfileForChannel', params_type) ->
  {struct, []}
;
function_info('getProfileForChannel', reply_type) ->
  {struct, {'line_types', 'Profile'}};
function_info('getProfileForChannel', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getSimpleChannelContacts(This, Ids)
function_info('getSimpleChannelContacts', params_type) ->
  {struct, [{1, {list, string}}]}
;
function_info('getSimpleChannelContacts', reply_type) ->
  {list, {struct, {'line_types', 'SimpleChannelContact'}}};
function_info('getSimpleChannelContacts', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getUserCountryForBilling(This, Country, RemoteIp)
function_info('getUserCountryForBilling', params_type) ->
  {struct, [{2, string},
          {3, string}]}
;
function_info('getUserCountryForBilling', reply_type) ->
  string;
function_info('getUserCountryForBilling', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getUserCreateTime(This)
function_info('getUserCreateTime', params_type) ->
  {struct, []}
;
function_info('getUserCreateTime', reply_type) ->
  i64;
function_info('getUserCreateTime', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getUserIdentities(This)
function_info('getUserIdentities', params_type) ->
  {struct, []}
;
function_info('getUserIdentities', reply_type) ->
  {map, i32, string};
function_info('getUserIdentities', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getUserLanguage(This)
function_info('getUserLanguage', params_type) ->
  {struct, []}
;
function_info('getUserLanguage', reply_type) ->
  string;
function_info('getUserLanguage', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getUserMidsWhoAddedMe(This)
function_info('getUserMidsWhoAddedMe', params_type) ->
  {struct, []}
;
function_info('getUserMidsWhoAddedMe', reply_type) ->
  {list, string};
function_info('getUserMidsWhoAddedMe', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% isGroupMember(This, GroupId)
function_info('isGroupMember', params_type) ->
  {struct, [{1, string}]}
;
function_info('isGroupMember', reply_type) ->
  bool;
function_info('isGroupMember', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% isInContact(This, Mid)
function_info('isInContact', params_type) ->
  {struct, [{2, string}]}
;
function_info('isInContact', reply_type) ->
  bool;
function_info('isInContact', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% registerChannelCP(This, CpId, RegisterPassword)
function_info('registerChannelCP', params_type) ->
  {struct, [{2, string},
          {3, string}]}
;
function_info('registerChannelCP', reply_type) ->
  string;
function_info('registerChannelCP', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% removeNotificationStatus(This, NotificationStatus)
function_info('removeNotificationStatus', params_type) ->
  {struct, [{2, i32}]}
;
function_info('removeNotificationStatus', reply_type) ->
  {struct, []};
function_info('removeNotificationStatus', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% sendMessageForChannel(This, Message)
function_info('sendMessageForChannel', params_type) ->
  {struct, [{2, {struct, {'line_types', 'Message'}}}]}
;
function_info('sendMessageForChannel', reply_type) ->
  {struct, {'line_types', 'Message'}};
function_info('sendMessageForChannel', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% sendPinCodeOperation(This, Verifier)
function_info('sendPinCodeOperation', params_type) ->
  {struct, [{1, string}]}
;
function_info('sendPinCodeOperation', reply_type) ->
  {struct, []};
function_info('sendPinCodeOperation', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% updateProfileAttributeForChannel(This, ProfileAttribute, Value)
function_info('updateProfileAttributeForChannel', params_type) ->
  {struct, [{2, i32},
          {3, string}]}
;
function_info('updateProfileAttributeForChannel', reply_type) ->
  {struct, []};
function_info('updateProfileAttributeForChannel', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
function_info(_Func, _Info) -> erlang:error(function_clause).

function_names() -> 
  ['activeBuddySubscriberCount', 'addOperationForChannel', 'displayBuddySubscriberCount', 'findContactByUseridWithoutAbuseBlockForChannel', 'getAllContactIdsForChannel', 'getCompactContacts', 'getContactsForChannel', 'getDisplayName', 'getFavoriteMidsForChannel', 'getFriendMids', 'getGroupMemberMids', 'getGroupsForChannel', 'getIdentityCredential', 'getJoinedGroupIdsForChannel', 'getMetaProfile', 'getMid', 'getPrimaryClientForChannel', 'getProfileForChannel', 'getSimpleChannelContacts', 'getUserCountryForBilling', 'getUserCreateTime', 'getUserIdentities', 'getUserLanguage', 'getUserMidsWhoAddedMe', 'isGroupMember', 'isInContact', 'registerChannelCP', 'removeNotificationStatus', 'sendMessageForChannel', 'sendPinCodeOperation', 'updateProfileAttributeForChannel'].

