%%
%% Autogenerated by Thrift Compiler (0.13.0)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(talk_service_thrift).
-behaviour(thrift_service).


-include("talk_service_thrift.hrl").

-export([struct_info/1, function_info/2, function_names/0]).

struct_info(_) -> erlang:error(function_clause).
%%% interface
% getChatRoomAnnouncementsBulk(This, ChatRoomMids)
function_info('getChatRoomAnnouncementsBulk', params_type) ->
  {struct, [{2, {list, string}}]}
;
function_info('getChatRoomAnnouncementsBulk', reply_type) ->
  {map, string, {list, {struct, {'line_types', 'ChatRoomAnnouncement'}}}};
function_info('getChatRoomAnnouncementsBulk', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getChatRoomAnnouncements(This, ChatRoomMid)
function_info('getChatRoomAnnouncements', params_type) ->
  {struct, [{2, string}]}
;
function_info('getChatRoomAnnouncements', reply_type) ->
  {list, {struct, {'line_types', 'ChatRoomAnnouncement'}}};
function_info('getChatRoomAnnouncements', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% createChatRoomAnnouncement(This, ReqSeq, ChatRoomMid, Type, Contents)
function_info('createChatRoomAnnouncement', params_type) ->
  {struct, [{1, i32},
          {2, string},
          {3, i32},
          {4, {struct, {'line_types', 'ChatRoomAnnouncementContents'}}}]}
;
function_info('createChatRoomAnnouncement', reply_type) ->
  {struct, {'line_types', 'ChatRoomAnnouncement'}};
function_info('createChatRoomAnnouncement', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% removeChatRoomAnnouncement(This, ReqSeq, ChatRoomMid, AnnouncementSeq)
function_info('removeChatRoomAnnouncement', params_type) ->
  {struct, [{1, i32},
          {2, string},
          {3, i64}]}
;
function_info('removeChatRoomAnnouncement', reply_type) ->
  {struct, []};
function_info('removeChatRoomAnnouncement', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% unsendMessage(This, Seq, MessageId)
function_info('unsendMessage', params_type) ->
  {struct, [{1, i32},
          {2, string}]}
;
function_info('unsendMessage', reply_type) ->
  {struct, []};
function_info('unsendMessage', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getGroupWithoutMembers(This, GroupId)
function_info('getGroupWithoutMembers', params_type) ->
  {struct, [{2, string}]}
;
function_info('getGroupWithoutMembers', reply_type) ->
  {struct, {'line_types', 'Group'}};
function_info('getGroupWithoutMembers', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% requestResendMessage(This, ReqSeq, SenderMid, MessageId)
function_info('requestResendMessage', params_type) ->
  {struct, [{1, i32},
          {2, string},
          {3, string}]}
;
function_info('requestResendMessage', reply_type) ->
  {struct, []};
function_info('requestResendMessage', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% respondResendMessage(This, ReqSeq, ReceiverMid, OriginalMessageId, ResendMessage, ErrorCode)
function_info('respondResendMessage', params_type) ->
  {struct, [{1, i32},
          {2, string},
          {3, string},
          {4, {struct, {'line_types', 'Message'}}},
          {5, i32}]}
;
function_info('respondResendMessage', reply_type) ->
  {struct, []};
function_info('respondResendMessage', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% acceptGroupInvitation(This, ReqSeq, GroupId)
function_info('acceptGroupInvitation', params_type) ->
  {struct, [{1, i32},
          {2, string}]}
;
function_info('acceptGroupInvitation', reply_type) ->
  {struct, []};
function_info('acceptGroupInvitation', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% acceptGroupInvitationByTicket(This, ReqSeq, GroupMid, TicketId)
function_info('acceptGroupInvitationByTicket', params_type) ->
  {struct, [{1, i32},
          {2, string},
          {3, string}]}
;
function_info('acceptGroupInvitationByTicket', reply_type) ->
  {struct, []};
function_info('acceptGroupInvitationByTicket', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% acceptProximityMatches(This, SessionId, Ids)
function_info('acceptProximityMatches', params_type) ->
  {struct, [{2, string},
          {3, {set, string}}]}
;
function_info('acceptProximityMatches', reply_type) ->
  {struct, []};
function_info('acceptProximityMatches', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% acquireCallRoute(This, To)
function_info('acquireCallRoute', params_type) ->
  {struct, [{2, string}]}
;
function_info('acquireCallRoute', reply_type) ->
  {list, string};
function_info('acquireCallRoute', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% acquireCallTicket(This, To)
function_info('acquireCallTicket', params_type) ->
  {struct, [{2, string}]}
;
function_info('acquireCallTicket', reply_type) ->
  string;
function_info('acquireCallTicket', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% acquireEncryptedAccessToken(This, FeatureType)
function_info('acquireEncryptedAccessToken', params_type) ->
  {struct, [{2, i32}]}
;
function_info('acquireEncryptedAccessToken', reply_type) ->
  string;
function_info('acquireEncryptedAccessToken', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% addSnsId(This, SnsIdType, SnsAccessToken)
function_info('addSnsId', params_type) ->
  {struct, [{2, i32},
          {3, string}]}
;
function_info('addSnsId', reply_type) ->
  string;
function_info('addSnsId', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% blockContact(This, ReqSeq, Id)
function_info('blockContact', params_type) ->
  {struct, [{1, i32},
          {2, string}]}
;
function_info('blockContact', reply_type) ->
  {struct, []};
function_info('blockContact', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% blockRecommendation(This, ReqSeq, Id)
function_info('blockRecommendation', params_type) ->
  {struct, [{1, i32},
          {2, string}]}
;
function_info('blockRecommendation', reply_type) ->
  {struct, []};
function_info('blockRecommendation', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% cancelGroupInvitation(This, ReqSeq, GroupId, ContactIds)
function_info('cancelGroupInvitation', params_type) ->
  {struct, [{1, i32},
          {2, string},
          {3, {list, string}}]}
;
function_info('cancelGroupInvitation', reply_type) ->
  {struct, []};
function_info('cancelGroupInvitation', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% changeVerificationMethod(This, SessionId, Method)
function_info('changeVerificationMethod', params_type) ->
  {struct, [{2, string},
          {3, i32}]}
;
function_info('changeVerificationMethod', reply_type) ->
  {struct, {'line_types', 'VerificationSessionData'}};
function_info('changeVerificationMethod', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% clearIdentityCredential(This)
function_info('clearIdentityCredential', params_type) ->
  {struct, []}
;
function_info('clearIdentityCredential', reply_type) ->
  {struct, []};
function_info('clearIdentityCredential', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% clearMessageBox(This, ChannelId, MessageBoxId)
function_info('clearMessageBox', params_type) ->
  {struct, [{2, string},
          {3, string}]}
;
function_info('clearMessageBox', reply_type) ->
  {struct, []};
function_info('clearMessageBox', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% closeProximityMatch(This, SessionId)
function_info('closeProximityMatch', params_type) ->
  {struct, [{2, string}]}
;
function_info('closeProximityMatch', reply_type) ->
  {struct, []};
function_info('closeProximityMatch', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% commitSendMessage(This, Seq, MessageId, ReceiverMids)
function_info('commitSendMessage', params_type) ->
  {struct, [{1, i32},
          {2, string},
          {3, {list, string}}]}
;
function_info('commitSendMessage', reply_type) ->
  {map, string, string};
function_info('commitSendMessage', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% commitSendMessages(This, Seq, MessageIds, ReceiverMids)
function_info('commitSendMessages', params_type) ->
  {struct, [{1, i32},
          {2, {list, string}},
          {3, {list, string}}]}
;
function_info('commitSendMessages', reply_type) ->
  {map, string, string};
function_info('commitSendMessages', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% commitUpdateProfile(This, Seq, Attrs, ReceiverMids)
function_info('commitUpdateProfile', params_type) ->
  {struct, [{1, i32},
          {2, {list, i32}},
          {3, {list, string}}]}
;
function_info('commitUpdateProfile', reply_type) ->
  {map, string, string};
function_info('commitUpdateProfile', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% confirmEmail(This, Verifier, PinCode)
function_info('confirmEmail', params_type) ->
  {struct, [{2, string},
          {3, string}]}
;
function_info('confirmEmail', reply_type) ->
  {struct, []};
function_info('confirmEmail', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% createGroup(This, Seq, Name, ContactIds)
function_info('createGroup', params_type) ->
  {struct, [{1, i32},
          {2, string},
          {3, {list, string}}]}
;
function_info('createGroup', reply_type) ->
  {struct, {'line_types', 'Group'}};
function_info('createGroup', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% createQrcodeBase64Image(This, Url, CharacterSet, ImageSize, X, Y, Width, Height)
function_info('createQrcodeBase64Image', params_type) ->
  {struct, [{2, string},
          {3, string},
          {4, i32},
          {5, i32},
          {6, i32},
          {7, i32},
          {8, i32}]}
;
function_info('createQrcodeBase64Image', reply_type) ->
  string;
function_info('createQrcodeBase64Image', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% createRoom(This, ReqSeq, ContactIds)
function_info('createRoom', params_type) ->
  {struct, [{1, i32},
          {2, {list, string}}]}
;
function_info('createRoom', reply_type) ->
  {struct, {'line_types', 'Room'}};
function_info('createRoom', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% createSession(This)
function_info('createSession', params_type) ->
  {struct, []}
;
function_info('createSession', reply_type) ->
  string;
function_info('createSession', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% fetchAnnouncements(This, LastFetchedIndex)
function_info('fetchAnnouncements', params_type) ->
  {struct, [{2, i32}]}
;
function_info('fetchAnnouncements', reply_type) ->
  {list, {struct, {'line_types', 'Announcement'}}};
function_info('fetchAnnouncements', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% fetchMessages(This, LocalTs, Count)
function_info('fetchMessages', params_type) ->
  {struct, [{2, i64},
          {3, i32}]}
;
function_info('fetchMessages', reply_type) ->
  {list, {struct, {'line_types', 'Message'}}};
function_info('fetchMessages', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% fetchOperations(This, LocalRev, Count)
function_info('fetchOperations', params_type) ->
  {struct, [{2, i64},
          {3, i32}]}
;
function_info('fetchOperations', reply_type) ->
  {list, {struct, {'line_types', 'Operation'}}};
function_info('fetchOperations', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'ShouldSyncException'}}}]}
;
% fetchOps(This, LocalRev, Count, GlobalRev, IndividualRev)
function_info('fetchOps', params_type) ->
  {struct, [{2, i64},
          {3, i32},
          {4, i64},
          {5, i64}]}
;
function_info('fetchOps', reply_type) ->
  {list, {struct, {'line_types', 'Operation'}}};
function_info('fetchOps', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'ShouldSyncException'}}}]}
;
% findAndAddContactsByEmail(This, ReqSeq, Emails)
function_info('findAndAddContactsByEmail', params_type) ->
  {struct, [{1, i32},
          {2, {set, string}}]}
;
function_info('findAndAddContactsByEmail', reply_type) ->
  {map, string, {struct, {'line_types', 'Contact'}}};
function_info('findAndAddContactsByEmail', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% findAndAddContactsByMid(This, ReqSeq, Mid, Type, Reference)
function_info('findAndAddContactsByMid', params_type) ->
  {struct, [{1, i32},
          {2, string},
          {3, i32},
          {4, string}]}
;
function_info('findAndAddContactsByMid', reply_type) ->
  {map, string, {struct, {'line_types', 'Contact'}}};
function_info('findAndAddContactsByMid', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% findGroupByTicketV2(This, TicketId)
function_info('findGroupByTicketV2', params_type) ->
  {struct, [{1, string}]}
;
function_info('findGroupByTicketV2', reply_type) ->
  {struct, {'line_types', 'Group'}};
function_info('findGroupByTicketV2', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% findAndAddContactsByPhone(This, ReqSeq, Phones)
function_info('findAndAddContactsByPhone', params_type) ->
  {struct, [{1, i32},
          {2, {set, string}}]}
;
function_info('findAndAddContactsByPhone', reply_type) ->
  {map, string, {struct, {'line_types', 'Contact'}}};
function_info('findAndAddContactsByPhone', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getFriendRequests(This, Direction, LastSeenSeqId)
function_info('getFriendRequests', params_type) ->
  {struct, [{1, i32},
          {2, i64}]}
;
function_info('getFriendRequests', reply_type) ->
  {list, {struct, {'line_types', 'FriendRequest'}}};
function_info('getFriendRequests', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% removeFriendRequest(This, Direction, MidOrEMid)
function_info('removeFriendRequest', params_type) ->
  {struct, [{1, i32},
          {2, string}]}
;
function_info('removeFriendRequest', reply_type) ->
  {struct, []};
function_info('removeFriendRequest', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% findAndAddContactsByUserid(This, ReqSeq, Userid)
function_info('findAndAddContactsByUserid', params_type) ->
  {struct, [{1, i32},
          {2, string}]}
;
function_info('findAndAddContactsByUserid', reply_type) ->
  {map, string, {struct, {'line_types', 'Contact'}}};
function_info('findAndAddContactsByUserid', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% findContactByUserid(This, Userid)
function_info('findContactByUserid', params_type) ->
  {struct, [{2, string}]}
;
function_info('findContactByUserid', reply_type) ->
  {struct, {'line_types', 'Contact'}};
function_info('findContactByUserid', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% findContactByUserTicket(This, TicketIdWithTag)
function_info('findContactByUserTicket', params_type) ->
  {struct, [{2, string}]}
;
function_info('findContactByUserTicket', reply_type) ->
  {struct, {'line_types', 'Contact'}};
function_info('findContactByUserTicket', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% findContactsByEmail(This, Emails)
function_info('findContactsByEmail', params_type) ->
  {struct, [{2, {set, string}}]}
;
function_info('findContactsByEmail', reply_type) ->
  {map, string, {struct, {'line_types', 'Contact'}}};
function_info('findContactsByEmail', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% findContactsByPhone(This, Phones)
function_info('findContactsByPhone', params_type) ->
  {struct, [{2, {set, string}}]}
;
function_info('findContactsByPhone', reply_type) ->
  {map, string, {struct, {'line_types', 'Contact'}}};
function_info('findContactsByPhone', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% findSnsIdUserStatus(This, SnsIdType, SnsAccessToken, UdidHash)
function_info('findSnsIdUserStatus', params_type) ->
  {struct, [{2, i32},
          {3, string},
          {4, string}]}
;
function_info('findSnsIdUserStatus', reply_type) ->
  {struct, {'line_types', 'SnsIdUserStatus'}};
function_info('findSnsIdUserStatus', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% finishUpdateVerification(This, SessionId)
function_info('finishUpdateVerification', params_type) ->
  {struct, [{2, string}]}
;
function_info('finishUpdateVerification', reply_type) ->
  {struct, []};
function_info('finishUpdateVerification', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% generateUserTicket(This, ExpirationTime, MaxUseCount)
function_info('generateUserTicket', params_type) ->
  {struct, [{3, i64},
          {4, i32}]}
;
function_info('generateUserTicket', reply_type) ->
  {struct, {'line_types', 'Ticket'}};
function_info('generateUserTicket', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% destroyMessage(This, Seq, ChatId, MessageId, SessionId)
function_info('destroyMessage', params_type) ->
  {struct, [{1, i32},
          {2, string},
          {3, string},
          {4, byte}]}
;
function_info('destroyMessage', reply_type) ->
  {struct, []};
function_info('destroyMessage', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getAcceptedProximityMatches(This, SessionId)
function_info('getAcceptedProximityMatches', params_type) ->
  {struct, [{2, string}]}
;
function_info('getAcceptedProximityMatches', reply_type) ->
  {set, string};
function_info('getAcceptedProximityMatches', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getActiveBuddySubscriberIds(This)
function_info('getActiveBuddySubscriberIds', params_type) ->
  {struct, []}
;
function_info('getActiveBuddySubscriberIds', reply_type) ->
  {list, string};
function_info('getActiveBuddySubscriberIds', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getAllContactIds(This)
function_info('getAllContactIds', params_type) ->
  {struct, []}
;
function_info('getAllContactIds', reply_type) ->
  {list, string};
function_info('getAllContactIds', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getAuthQrcode(This, KeepLoggedIn, SystemName)
function_info('getAuthQrcode', params_type) ->
  {struct, [{2, bool},
          {3, string}]}
;
function_info('getAuthQrcode', reply_type) ->
  {struct, {'line_types', 'AuthQrcode'}};
function_info('getAuthQrcode', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getBlockedContactIds(This)
function_info('getBlockedContactIds', params_type) ->
  {struct, []}
;
function_info('getBlockedContactIds', reply_type) ->
  {list, string};
function_info('getBlockedContactIds', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% registerWithPhoneNumber(This, SessionId, MigrationPincodeSessionId)
function_info('registerWithPhoneNumber', params_type) ->
  {struct, [{2, string},
          {3, string}]}
;
function_info('registerWithPhoneNumber', reply_type) ->
  {struct, {'line_types', 'RegisterWithPhoneNumberResult'}};
function_info('registerWithPhoneNumber', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% registerWithPhoneNumberAndPassword(This, SessionId, Keynm, Encrypted)
function_info('registerWithPhoneNumberAndPassword', params_type) ->
  {struct, [{2, string},
          {3, string},
          {4, string}]}
;
function_info('registerWithPhoneNumberAndPassword', reply_type) ->
  {struct, {'line_types', 'RegisterWithPhoneNumberResult'}};
function_info('registerWithPhoneNumberAndPassword', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getAnalyticsInfo(This)
function_info('getAnalyticsInfo', params_type) ->
  {struct, []}
;
function_info('getAnalyticsInfo', reply_type) ->
  {struct, {'line_types', 'AnalyticsInfo'}};
function_info('getAnalyticsInfo', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% reportClientStatistics(This, ReqSeq, Category, Count)
function_info('reportClientStatistics', params_type) ->
  {struct, [{1, i32},
          {2, i32},
          {3, i32}]}
;
function_info('reportClientStatistics', reply_type) ->
  {struct, []};
function_info('reportClientStatistics', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% verifyPhoneNumberForLogin(This, VerifierFromPhone, PinCodeForPhone, VerifierFromLogin)
function_info('verifyPhoneNumberForLogin', params_type) ->
  {struct, [{2, string},
          {3, string},
          {4, string}]}
;
function_info('verifyPhoneNumberForLogin', reply_type) ->
  string;
function_info('verifyPhoneNumberForLogin', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% verifyPhoneNumber(This, SessionId, PinCode, UdidHash, MigrationPincodeSessionId, OldUdidHash)
function_info('verifyPhoneNumber', params_type) ->
  {struct, [{2, string},
          {3, string},
          {4, string},
          {5, string},
          {6, string}]}
;
function_info('verifyPhoneNumber', reply_type) ->
  {struct, {'line_types', 'PhoneVerificationResult'}};
function_info('verifyPhoneNumber', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getBlockedContactIdsByRange(This, Start, Count)
function_info('getBlockedContactIdsByRange', params_type) ->
  {struct, [{2, i32},
          {3, i32}]}
;
function_info('getBlockedContactIdsByRange', reply_type) ->
  {list, string};
function_info('getBlockedContactIdsByRange', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getBlockedRecommendationIds(This)
function_info('getBlockedRecommendationIds', params_type) ->
  {struct, []}
;
function_info('getBlockedRecommendationIds', reply_type) ->
  {list, string};
function_info('getBlockedRecommendationIds', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getBuddyBlockerIds(This)
function_info('getBuddyBlockerIds', params_type) ->
  {struct, []}
;
function_info('getBuddyBlockerIds', reply_type) ->
  {list, string};
function_info('getBuddyBlockerIds', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getBuddyLocation(This, Mid, Index)
function_info('getBuddyLocation', params_type) ->
  {struct, [{2, string},
          {3, i32}]}
;
function_info('getBuddyLocation', reply_type) ->
  {struct, {'line_types', 'Geolocation'}};
function_info('getBuddyLocation', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getCompactContactsModifiedSince(This, Timestamp)
function_info('getCompactContactsModifiedSince', params_type) ->
  {struct, [{2, i64}]}
;
function_info('getCompactContactsModifiedSince', reply_type) ->
  {list, {struct, {'line_types', 'CompactContact'}}};
function_info('getCompactContactsModifiedSince', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getCompactGroup(This, GroupId)
function_info('getCompactGroup', params_type) ->
  {struct, [{2, string}]}
;
function_info('getCompactGroup', reply_type) ->
  {struct, {'line_types', 'Group'}};
function_info('getCompactGroup', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getCompactRoom(This, RoomId)
function_info('getCompactRoom', params_type) ->
  {struct, [{2, string}]}
;
function_info('getCompactRoom', reply_type) ->
  {struct, {'line_types', 'Room'}};
function_info('getCompactRoom', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getContact(This, Id)
function_info('getContact', params_type) ->
  {struct, [{2, string}]}
;
function_info('getContact', reply_type) ->
  {struct, {'line_types', 'Contact'}};
function_info('getContact', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getContacts(This, Ids)
function_info('getContacts', params_type) ->
  {struct, [{2, {list, string}}]}
;
function_info('getContacts', reply_type) ->
  {list, {struct, {'line_types', 'Contact'}}};
function_info('getContacts', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getContactWithFriendRequestStatus(This, Id)
function_info('getContactWithFriendRequestStatus', params_type) ->
  {struct, [{2, string}]}
;
function_info('getContactWithFriendRequestStatus', reply_type) ->
  {struct, {'line_types', 'Contact'}};
function_info('getContactWithFriendRequestStatus', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getCountryWithRequestIp(This)
function_info('getCountryWithRequestIp', params_type) ->
  {struct, []}
;
function_info('getCountryWithRequestIp', reply_type) ->
  string;
function_info('getCountryWithRequestIp', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getFavoriteMids(This)
function_info('getFavoriteMids', params_type) ->
  {struct, []}
;
function_info('getFavoriteMids', reply_type) ->
  {list, string};
function_info('getFavoriteMids', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getGroup(This, GroupId)
function_info('getGroup', params_type) ->
  {struct, [{2, string}]}
;
function_info('getGroup', reply_type) ->
  {struct, {'line_types', 'Group'}};
function_info('getGroup', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getGroupIdsInvited(This)
function_info('getGroupIdsInvited', params_type) ->
  {struct, []}
;
function_info('getGroupIdsInvited', reply_type) ->
  {list, string};
function_info('getGroupIdsInvited', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getGroupIdsJoined(This)
function_info('getGroupIdsJoined', params_type) ->
  {struct, []}
;
function_info('getGroupIdsJoined', reply_type) ->
  {list, string};
function_info('getGroupIdsJoined', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getGroups(This, GroupIds)
function_info('getGroups', params_type) ->
  {struct, [{2, {list, string}}]}
;
function_info('getGroups', reply_type) ->
  {list, {struct, {'line_types', 'Group'}}};
function_info('getGroups', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getHiddenContactMids(This)
function_info('getHiddenContactMids', params_type) ->
  {struct, []}
;
function_info('getHiddenContactMids', reply_type) ->
  {list, string};
function_info('getHiddenContactMids', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getIdentityIdentifier(This)
function_info('getIdentityIdentifier', params_type) ->
  {struct, []}
;
function_info('getIdentityIdentifier', reply_type) ->
  string;
function_info('getIdentityIdentifier', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getLastAnnouncementIndex(This)
function_info('getLastAnnouncementIndex', params_type) ->
  {struct, []}
;
function_info('getLastAnnouncementIndex', reply_type) ->
  i32;
function_info('getLastAnnouncementIndex', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getLastOpRevision(This)
function_info('getLastOpRevision', params_type) ->
  {struct, []}
;
function_info('getLastOpRevision', reply_type) ->
  i64;
function_info('getLastOpRevision', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getSuggestRevisions(This)
function_info('getSuggestRevisions', params_type) ->
  {struct, []}
;
function_info('getSuggestRevisions', reply_type) ->
  {struct, {'line_types', 'SuggestDictionaryRevisions'}};
function_info('getSuggestRevisions', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getPreviousMessagesV2WithReadCount(This, MessageBoxId, EndMessageId, MessagesCount)
function_info('getPreviousMessagesV2WithReadCount', params_type) ->
  {struct, [{2, string},
          {3, {struct, {'line_types', 'MessageBoxV2MessageId'}}},
          {4, i32}]}
;
function_info('getPreviousMessagesV2WithReadCount', reply_type) ->
  {list, {struct, {'line_types', 'Message'}}};
function_info('getPreviousMessagesV2WithReadCount', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getMessageBox(This, ChannelId, MessageBoxId, LastMessagesCount)
function_info('getMessageBox', params_type) ->
  {struct, [{2, string},
          {3, string},
          {4, i32}]}
;
function_info('getMessageBox', reply_type) ->
  {struct, {'line_types', 'TMessageBox'}};
function_info('getMessageBox', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getMessageBoxCompactWrapUp(This, Mid)
function_info('getMessageBoxCompactWrapUp', params_type) ->
  {struct, [{2, string}]}
;
function_info('getMessageBoxCompactWrapUp', reply_type) ->
  {struct, {'line_types', 'TMessageBoxWrapUp'}};
function_info('getMessageBoxCompactWrapUp', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getMessageBoxCompactWrapUpList(This, Start, MessageBoxCount)
function_info('getMessageBoxCompactWrapUpList', params_type) ->
  {struct, [{2, i32},
          {3, i32}]}
;
function_info('getMessageBoxCompactWrapUpList', reply_type) ->
  {struct, {'line_types', 'TMessageBoxWrapUpResponse'}};
function_info('getMessageBoxCompactWrapUpList', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getMessageBoxList(This, ChannelId, LastMessagesCount)
function_info('getMessageBoxList', params_type) ->
  {struct, [{2, string},
          {3, i32}]}
;
function_info('getMessageBoxList', reply_type) ->
  {list, {struct, {'line_types', 'TMessageBox'}}};
function_info('getMessageBoxList', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getMessageBoxListByStatus(This, ChannelId, LastMessagesCount, Status)
function_info('getMessageBoxListByStatus', params_type) ->
  {struct, [{2, string},
          {3, i32},
          {4, i32}]}
;
function_info('getMessageBoxListByStatus', reply_type) ->
  {list, {struct, {'line_types', 'TMessageBox'}}};
function_info('getMessageBoxListByStatus', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getMessageBoxWrapUp(This, Mid)
function_info('getMessageBoxWrapUp', params_type) ->
  {struct, [{2, string}]}
;
function_info('getMessageBoxWrapUp', reply_type) ->
  {struct, {'line_types', 'TMessageBoxWrapUp'}};
function_info('getMessageBoxWrapUp', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getMessageBoxWrapUpList(This, Start, MessageBoxCount)
function_info('getMessageBoxWrapUpList', params_type) ->
  {struct, [{2, i32},
          {3, i32}]}
;
function_info('getMessageBoxWrapUpList', reply_type) ->
  {struct, {'line_types', 'TMessageBoxWrapUpResponse'}};
function_info('getMessageBoxWrapUpList', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getMessagesBySequenceNumber(This, ChannelId, MessageBoxId, StartSeq, EndSeq)
function_info('getMessagesBySequenceNumber', params_type) ->
  {struct, [{2, string},
          {3, string},
          {4, i64},
          {5, i64}]}
;
function_info('getMessagesBySequenceNumber', reply_type) ->
  {list, {struct, {'line_types', 'Message'}}};
function_info('getMessagesBySequenceNumber', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getNextMessages(This, MessageBoxId, StartSeq, MessagesCount)
function_info('getNextMessages', params_type) ->
  {struct, [{2, string},
          {3, i64},
          {4, i32}]}
;
function_info('getNextMessages', reply_type) ->
  {list, {struct, {'line_types', 'Message'}}};
function_info('getNextMessages', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getNotificationPolicy(This, Carrier)
function_info('getNotificationPolicy', params_type) ->
  {struct, [{2, i32}]}
;
function_info('getNotificationPolicy', reply_type) ->
  {list, i32};
function_info('getNotificationPolicy', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getPreviousMessages(This, MessageBoxId, EndSeq, MessagesCount)
function_info('getPreviousMessages', params_type) ->
  {struct, [{2, string},
          {3, i64},
          {4, i32}]}
;
function_info('getPreviousMessages', reply_type) ->
  {list, {struct, {'line_types', 'Message'}}};
function_info('getPreviousMessages', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getProfile(This)
function_info('getProfile', params_type) ->
  {struct, []}
;
function_info('getProfile', reply_type) ->
  {struct, {'line_types', 'Profile'}};
function_info('getProfile', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getProximityMatchCandidateList(This, SessionId)
function_info('getProximityMatchCandidateList', params_type) ->
  {struct, [{2, string}]}
;
function_info('getProximityMatchCandidateList', reply_type) ->
  {struct, {'line_types', 'ProximityMatchCandidateResult'}};
function_info('getProximityMatchCandidateList', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getProximityMatchCandidates(This, SessionId)
function_info('getProximityMatchCandidates', params_type) ->
  {struct, [{2, string}]}
;
function_info('getProximityMatchCandidates', reply_type) ->
  {set, {struct, {'line_types', 'Contact'}}};
function_info('getProximityMatchCandidates', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getRecentMessages(This, MessageBoxId, MessagesCount)
function_info('getRecentMessages', params_type) ->
  {struct, [{2, string},
          {3, i32}]}
;
function_info('getRecentMessages', reply_type) ->
  {list, {struct, {'line_types', 'Message'}}};
function_info('getRecentMessages', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getRecommendationIds(This)
function_info('getRecommendationIds', params_type) ->
  {struct, []}
;
function_info('getRecommendationIds', reply_type) ->
  {list, string};
function_info('getRecommendationIds', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getRoom(This, RoomId)
function_info('getRoom', params_type) ->
  {struct, [{2, string}]}
;
function_info('getRoom', reply_type) ->
  {struct, {'line_types', 'Room'}};
function_info('getRoom', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getRSAKeyInfo(This, Provider)
function_info('getRSAKeyInfo', params_type) ->
  {struct, [{2, i32}]}
;
function_info('getRSAKeyInfo', reply_type) ->
  {struct, {'line_types', 'RSAKey'}};
function_info('getRSAKeyInfo', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getServerTime(This)
function_info('getServerTime', params_type) ->
  {struct, []}
;
function_info('getServerTime', reply_type) ->
  i64;
function_info('getServerTime', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getSessions(This)
function_info('getSessions', params_type) ->
  {struct, []}
;
function_info('getSessions', reply_type) ->
  {list, {struct, {'line_types', 'LoginSession'}}};
function_info('getSessions', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getSettings(This)
function_info('getSettings', params_type) ->
  {struct, []}
;
function_info('getSettings', reply_type) ->
  {struct, {'line_types', 'Settings'}};
function_info('getSettings', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getGroupsV2(This, GroupIds)
function_info('getGroupsV2', params_type) ->
  {struct, [{2, {list, string}}]}
;
function_info('getGroupsV2', reply_type) ->
  {list, {struct, {'line_types', 'Group'}}};
function_info('getGroupsV2', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getSettingsAttributes(This, AttrBitset)
function_info('getSettingsAttributes', params_type) ->
  {struct, [{2, i32}]}
;
function_info('getSettingsAttributes', reply_type) ->
  {struct, {'line_types', 'Settings'}};
function_info('getSettingsAttributes', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getSystemConfiguration(This)
function_info('getSystemConfiguration', params_type) ->
  {struct, []}
;
function_info('getSystemConfiguration', reply_type) ->
  {struct, {'line_types', 'SystemConfiguration'}};
function_info('getSystemConfiguration', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getUserTicket(This)
function_info('getUserTicket', params_type) ->
  {struct, []}
;
function_info('getUserTicket', reply_type) ->
  {struct, {'line_types', 'Ticket'}};
function_info('getUserTicket', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getWapInvitation(This, InvitationHash)
function_info('getWapInvitation', params_type) ->
  {struct, [{2, string}]}
;
function_info('getWapInvitation', reply_type) ->
  {struct, {'line_types', 'WapInvitation'}};
function_info('getWapInvitation', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% invalidateUserTicket(This)
function_info('invalidateUserTicket', params_type) ->
  {struct, []}
;
function_info('invalidateUserTicket', reply_type) ->
  {struct, []};
function_info('invalidateUserTicket', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% inviteFriendsBySms(This, PhoneNumberList)
function_info('inviteFriendsBySms', params_type) ->
  {struct, [{2, {list, string}}]}
;
function_info('inviteFriendsBySms', reply_type) ->
  {struct, []};
function_info('inviteFriendsBySms', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% inviteIntoGroup(This, ReqSeq, GroupId, ContactIds)
function_info('inviteIntoGroup', params_type) ->
  {struct, [{1, i32},
          {2, string},
          {3, {list, string}}]}
;
function_info('inviteIntoGroup', reply_type) ->
  {struct, []};
function_info('inviteIntoGroup', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% inviteIntoRoom(This, ReqSeq, RoomId, ContactIds)
function_info('inviteIntoRoom', params_type) ->
  {struct, [{1, i32},
          {2, string},
          {3, {list, string}}]}
;
function_info('inviteIntoRoom', reply_type) ->
  {struct, []};
function_info('inviteIntoRoom', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% inviteViaEmail(This, ReqSeq, Email, Name)
function_info('inviteViaEmail', params_type) ->
  {struct, [{1, i32},
          {2, string},
          {3, string}]}
;
function_info('inviteViaEmail', reply_type) ->
  {struct, []};
function_info('inviteViaEmail', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% isIdentityIdentifierAvailable(This, Provider, Identifier)
function_info('isIdentityIdentifierAvailable', params_type) ->
  {struct, [{3, i32},
          {2, string}]}
;
function_info('isIdentityIdentifierAvailable', reply_type) ->
  bool;
function_info('isIdentityIdentifierAvailable', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% isUseridAvailable(This, Userid)
function_info('isUseridAvailable', params_type) ->
  {struct, [{2, string}]}
;
function_info('isUseridAvailable', reply_type) ->
  bool;
function_info('isUseridAvailable', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% kickoutFromGroup(This, ReqSeq, GroupId, ContactIds)
function_info('kickoutFromGroup', params_type) ->
  {struct, [{1, i32},
          {2, string},
          {3, {list, string}}]}
;
function_info('kickoutFromGroup', reply_type) ->
  {struct, []};
function_info('kickoutFromGroup', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% reissueGroupTicket(This, GroupMid)
function_info('reissueGroupTicket', params_type) ->
  {struct, [{1, string}]}
;
function_info('reissueGroupTicket', reply_type) ->
  string;
function_info('reissueGroupTicket', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% findGroupByTicket(This, TicketId)
function_info('findGroupByTicket', params_type) ->
  {struct, [{1, string}]}
;
function_info('findGroupByTicket', reply_type) ->
  {struct, {'line_types', 'Group'}};
function_info('findGroupByTicket', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% leaveGroup(This, ReqSeq, GroupId)
function_info('leaveGroup', params_type) ->
  {struct, [{1, i32},
          {2, string}]}
;
function_info('leaveGroup', reply_type) ->
  {struct, []};
function_info('leaveGroup', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% leaveRoom(This, ReqSeq, RoomId)
function_info('leaveRoom', params_type) ->
  {struct, [{1, i32},
          {2, string}]}
;
function_info('leaveRoom', reply_type) ->
  {struct, []};
function_info('leaveRoom', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% loginWithIdentityCredential(This, IdentityProvider, Identifier, Password, KeepLoggedIn, AccessLocation, SystemName, Certificate)
function_info('loginWithIdentityCredential', params_type) ->
  {struct, [{8, i32},
          {3, string},
          {4, string},
          {5, bool},
          {6, string},
          {7, string},
          {9, string}]}
;
function_info('loginWithIdentityCredential', reply_type) ->
  string;
function_info('loginWithIdentityCredential', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% loginWithIdentityCredentialForCertificate(This, IdentityProvider, Identifier, Password, KeepLoggedIn, AccessLocation, SystemName, Certificate)
function_info('loginWithIdentityCredentialForCertificate', params_type) ->
  {struct, [{8, i32},
          {3, string},
          {4, string},
          {5, bool},
          {6, string},
          {7, string},
          {9, string}]}
;
function_info('loginWithIdentityCredentialForCertificate', reply_type) ->
  {struct, {'line_types', 'LoginResult'}};
function_info('loginWithIdentityCredentialForCertificate', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% loginWithVerifier(This, Verifier)
function_info('loginWithVerifier', params_type) ->
  {struct, [{3, string}]}
;
function_info('loginWithVerifier', reply_type) ->
  string;
function_info('loginWithVerifier', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% loginWithVerifierForCerificate(This, Verifier)
function_info('loginWithVerifierForCerificate', params_type) ->
  {struct, [{3, string}]}
;
function_info('loginWithVerifierForCerificate', reply_type) ->
  {struct, {'line_types', 'LoginResult'}};
function_info('loginWithVerifierForCerificate', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% loginWithVerifierForCertificate(This, Verifier)
function_info('loginWithVerifierForCertificate', params_type) ->
  {struct, [{3, string}]}
;
function_info('loginWithVerifierForCertificate', reply_type) ->
  {struct, {'line_types', 'LoginResult'}};
function_info('loginWithVerifierForCertificate', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% logout(This)
function_info('logout', params_type) ->
  {struct, []}
;
function_info('logout', reply_type) ->
  {struct, []};
function_info('logout', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% logoutSession(This, TokenKey)
function_info('logoutSession', params_type) ->
  {struct, [{2, string}]}
;
function_info('logoutSession', reply_type) ->
  {struct, []};
function_info('logoutSession', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% noop(This)
function_info('noop', params_type) ->
  {struct, []}
;
function_info('noop', reply_type) ->
  {struct, []};
function_info('noop', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% notifiedRedirect(This, ParamMap)
function_info('notifiedRedirect', params_type) ->
  {struct, [{2, {map, string, string}}]}
;
function_info('notifiedRedirect', reply_type) ->
  {struct, []};
function_info('notifiedRedirect', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% notifyBuddyOnAir(This, Seq, ReceiverMids)
function_info('notifyBuddyOnAir', params_type) ->
  {struct, [{1, i32},
          {2, {list, string}}]}
;
function_info('notifyBuddyOnAir', reply_type) ->
  {map, string, string};
function_info('notifyBuddyOnAir', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% notifyIndividualEvent(This, NotificationStatus, ReceiverMids)
function_info('notifyIndividualEvent', params_type) ->
  {struct, [{2, i32},
          {3, {list, string}}]}
;
function_info('notifyIndividualEvent', reply_type) ->
  {struct, []};
function_info('notifyIndividualEvent', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% notifyInstalled(This, UdidHash, ApplicationTypeWithExtensions)
function_info('notifyInstalled', params_type) ->
  {struct, [{2, string},
          {3, string}]}
;
function_info('notifyInstalled', reply_type) ->
  {struct, []};
function_info('notifyInstalled', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% notifyRegistrationComplete(This, UdidHash, ApplicationTypeWithExtensions)
function_info('notifyRegistrationComplete', params_type) ->
  {struct, [{2, string},
          {3, string}]}
;
function_info('notifyRegistrationComplete', reply_type) ->
  {struct, []};
function_info('notifyRegistrationComplete', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% notifySleep(This, LastRev, Badge)
function_info('notifySleep', params_type) ->
  {struct, [{2, i64},
          {3, i32}]}
;
function_info('notifySleep', reply_type) ->
  {struct, []};
function_info('notifySleep', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% notifyUpdated(This, LastRev, DeviceInfo)
function_info('notifyUpdated', params_type) ->
  {struct, [{2, i64},
          {3, {struct, {'line_types', 'DeviceInfo'}}}]}
;
function_info('notifyUpdated', reply_type) ->
  {struct, []};
function_info('notifyUpdated', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% openProximityMatch(This, Location)
function_info('openProximityMatch', params_type) ->
  {struct, [{2, {struct, {'line_types', 'Location'}}}]}
;
function_info('openProximityMatch', reply_type) ->
  string;
function_info('openProximityMatch', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% registerBuddyUser(This, BuddyId, RegistrarPassword)
function_info('registerBuddyUser', params_type) ->
  {struct, [{2, string},
          {3, string}]}
;
function_info('registerBuddyUser', reply_type) ->
  string;
function_info('registerBuddyUser', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% registerBuddyUserid(This, Seq, Userid)
function_info('registerBuddyUserid', params_type) ->
  {struct, [{2, i32},
          {3, string}]}
;
function_info('registerBuddyUserid', reply_type) ->
  {struct, []};
function_info('registerBuddyUserid', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% registerDevice(This, SessionId)
function_info('registerDevice', params_type) ->
  {struct, [{2, string}]}
;
function_info('registerDevice', reply_type) ->
  string;
function_info('registerDevice', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% registerDeviceWithIdentityCredential(This, SessionId, Provider, Identifier, Verifier)
function_info('registerDeviceWithIdentityCredential', params_type) ->
  {struct, [{2, string},
          {5, i32},
          {3, string},
          {4, string}]}
;
function_info('registerDeviceWithIdentityCredential', reply_type) ->
  string;
function_info('registerDeviceWithIdentityCredential', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% registerDeviceWithoutPhoneNumber(This, Region, UdidHash, DeviceInfo)
function_info('registerDeviceWithoutPhoneNumber', params_type) ->
  {struct, [{2, string},
          {3, string},
          {4, {struct, {'line_types', 'DeviceInfo'}}}]}
;
function_info('registerDeviceWithoutPhoneNumber', reply_type) ->
  string;
function_info('registerDeviceWithoutPhoneNumber', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% registerDeviceWithoutPhoneNumberWithIdentityCredential(This, Region, UdidHash, DeviceInfo, Provider, Identifier, Verifier, Mid, MigrationPincodeSessionId)
function_info('registerDeviceWithoutPhoneNumberWithIdentityCredential', params_type) ->
  {struct, [{2, string},
          {3, string},
          {4, {struct, {'line_types', 'DeviceInfo'}}},
          {5, i32},
          {6, string},
          {7, string},
          {8, string},
          {9, string}]}
;
function_info('registerDeviceWithoutPhoneNumberWithIdentityCredential', reply_type) ->
  string;
function_info('registerDeviceWithoutPhoneNumberWithIdentityCredential', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% registerUserid(This, ReqSeq, Userid)
function_info('registerUserid', params_type) ->
  {struct, [{1, i32},
          {2, string}]}
;
function_info('registerUserid', reply_type) ->
  bool;
function_info('registerUserid', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% registerWapDevice(This, InvitationHash, GuidHash, Email, DeviceInfo)
function_info('registerWapDevice', params_type) ->
  {struct, [{2, string},
          {3, string},
          {4, string},
          {5, {struct, {'line_types', 'DeviceInfo'}}}]}
;
function_info('registerWapDevice', reply_type) ->
  string;
function_info('registerWapDevice', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% registerWithExistingSnsIdAndIdentityCredential(This, IdentityCredential, Region, UdidHash, DeviceInfo)
function_info('registerWithExistingSnsIdAndIdentityCredential', params_type) ->
  {struct, [{2, {struct, {'line_types', 'IdentityCredential'}}},
          {3, string},
          {4, string},
          {5, {struct, {'line_types', 'DeviceInfo'}}}]}
;
function_info('registerWithExistingSnsIdAndIdentityCredential', reply_type) ->
  string;
function_info('registerWithExistingSnsIdAndIdentityCredential', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% registerWithSnsId(This, SnsIdType, SnsAccessToken, Region, UdidHash, DeviceInfo, Mid)
function_info('registerWithSnsId', params_type) ->
  {struct, [{2, i32},
          {3, string},
          {4, string},
          {5, string},
          {6, {struct, {'line_types', 'DeviceInfo'}}},
          {7, string}]}
;
function_info('registerWithSnsId', reply_type) ->
  {struct, {'line_types', 'RegisterWithSnsIdResult'}};
function_info('registerWithSnsId', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% registerWithSnsIdAndIdentityCredential(This, SnsIdType, SnsAccessToken, IdentityCredential, Region, UdidHash, DeviceInfo)
function_info('registerWithSnsIdAndIdentityCredential', params_type) ->
  {struct, [{2, i32},
          {3, string},
          {4, {struct, {'line_types', 'IdentityCredential'}}},
          {5, string},
          {6, string},
          {7, {struct, {'line_types', 'DeviceInfo'}}}]}
;
function_info('registerWithSnsIdAndIdentityCredential', reply_type) ->
  string;
function_info('registerWithSnsIdAndIdentityCredential', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% reissueDeviceCredential(This)
function_info('reissueDeviceCredential', params_type) ->
  {struct, []}
;
function_info('reissueDeviceCredential', reply_type) ->
  string;
function_info('reissueDeviceCredential', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% reissueUserTicket(This, ExpirationTime, MaxUseCount)
function_info('reissueUserTicket', params_type) ->
  {struct, [{3, i64},
          {4, i32}]}
;
function_info('reissueUserTicket', reply_type) ->
  string;
function_info('reissueUserTicket', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getMessageReadRange(This, ChatIds)
function_info('getMessageReadRange', params_type) ->
  {struct, [{2, {list, string}}]}
;
function_info('getMessageReadRange', reply_type) ->
  {list, {struct, {'line_types', 'TMessageReadRange'}}};
function_info('getMessageReadRange', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% rejectGroupInvitation(This, ReqSeq, GroupId)
function_info('rejectGroupInvitation', params_type) ->
  {struct, [{1, i32},
          {2, string}]}
;
function_info('rejectGroupInvitation', reply_type) ->
  {struct, []};
function_info('rejectGroupInvitation', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% releaseSession(This)
function_info('releaseSession', params_type) ->
  {struct, []}
;
function_info('releaseSession', reply_type) ->
  {struct, []};
function_info('releaseSession', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% removeAllMessages(This, Seq, LastMessageId)
function_info('removeAllMessages', params_type) ->
  {struct, [{1, i32},
          {2, string}]}
;
function_info('removeAllMessages', reply_type) ->
  {struct, []};
function_info('removeAllMessages', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% removeBuddyLocation(This, Mid, Index)
function_info('removeBuddyLocation', params_type) ->
  {struct, [{2, string},
          {3, i32}]}
;
function_info('removeBuddyLocation', reply_type) ->
  {struct, []};
function_info('removeBuddyLocation', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% removeMessage(This, MessageId)
function_info('removeMessage', params_type) ->
  {struct, [{2, string}]}
;
function_info('removeMessage', reply_type) ->
  bool;
function_info('removeMessage', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% makeUserAddMyselfAsContact(This, ContactOwnerMid)
function_info('makeUserAddMyselfAsContact', params_type) ->
  {struct, [{1, string}]}
;
function_info('makeUserAddMyselfAsContact', reply_type) ->
  {struct, {'line_types', 'ContactTransition'}};
function_info('makeUserAddMyselfAsContact', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% removeMessageFromMyHome(This, MessageId)
function_info('removeMessageFromMyHome', params_type) ->
  {struct, [{2, string}]}
;
function_info('removeMessageFromMyHome', reply_type) ->
  bool;
function_info('removeMessageFromMyHome', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% removeSnsId(This, SnsIdType)
function_info('removeSnsId', params_type) ->
  {struct, [{2, i32}]}
;
function_info('removeSnsId', reply_type) ->
  string;
function_info('removeSnsId', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% report(This, SyncOpRevision, Category, Report)
function_info('report', params_type) ->
  {struct, [{2, i64},
          {3, i32},
          {4, string}]}
;
function_info('report', reply_type) ->
  {struct, []};
function_info('report', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% reportContacts(This, SyncOpRevision, Category, ContactReports, ActionType)
function_info('reportContacts', params_type) ->
  {struct, [{2, i64},
          {3, i32},
          {4, {list, {struct, {'line_types', 'ContactReport'}}}},
          {5, i32}]}
;
function_info('reportContacts', reply_type) ->
  {list, {struct, {'line_types', 'ContactReportResult'}}};
function_info('reportContacts', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% reportGroups(This, SyncOpRevision, Groups)
function_info('reportGroups', params_type) ->
  {struct, [{2, i64},
          {3, {list, {struct, {'line_types', 'Group'}}}}]}
;
function_info('reportGroups', reply_type) ->
  {struct, []};
function_info('reportGroups', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% reportProfile(This, SyncOpRevision, Profile)
function_info('reportProfile', params_type) ->
  {struct, [{2, i64},
          {3, {struct, {'line_types', 'Profile'}}}]}
;
function_info('reportProfile', reply_type) ->
  {struct, []};
function_info('reportProfile', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% reportRooms(This, SyncOpRevision, Rooms)
function_info('reportRooms', params_type) ->
  {struct, [{2, i64},
          {3, {list, {struct, {'line_types', 'Room'}}}}]}
;
function_info('reportRooms', reply_type) ->
  {struct, []};
function_info('reportRooms', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% findAndAddContactByMetaTag(This, ReqSeq, Userid, Reference)
function_info('findAndAddContactByMetaTag', params_type) ->
  {struct, [{1, i32},
          {2, string},
          {3, string}]}
;
function_info('findAndAddContactByMetaTag', reply_type) ->
  {struct, {'line_types', 'Contact'}};
function_info('findAndAddContactByMetaTag', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% reportSettings(This, SyncOpRevision, Settings)
function_info('reportSettings', params_type) ->
  {struct, [{2, i64},
          {3, {struct, {'line_types', 'Settings'}}}]}
;
function_info('reportSettings', reply_type) ->
  {struct, []};
function_info('reportSettings', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% reportSpam(This, ChatMid, MemberMids, SpammerReasons, SenderMids, SpamMessageIds, SpamMessages)
function_info('reportSpam', params_type) ->
  {struct, [{2, string},
          {3, {list, string}},
          {4, {list, i32}},
          {5, {list, string}},
          {6, {list, string}},
          {7, {list, string}}]}
;
function_info('reportSpam', reply_type) ->
  {struct, []};
function_info('reportSpam', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% reportSpammer(This, SpammerMid, SpammerReasons, SpamMessageIds)
function_info('reportSpammer', params_type) ->
  {struct, [{2, string},
          {3, {list, i32}},
          {4, {list, string}}]}
;
function_info('reportSpammer', reply_type) ->
  {struct, []};
function_info('reportSpammer', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% requestAccountPasswordReset(This, Provider, Identifier, Locale)
function_info('requestAccountPasswordReset', params_type) ->
  {struct, [{4, i32},
          {2, string},
          {5, string}]}
;
function_info('requestAccountPasswordReset', reply_type) ->
  {struct, []};
function_info('requestAccountPasswordReset', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% requestEmailConfirmation(This, EmailConfirmation)
function_info('requestEmailConfirmation', params_type) ->
  {struct, [{2, {struct, {'line_types', 'EmailConfirmation'}}}]}
;
function_info('requestEmailConfirmation', reply_type) ->
  {struct, {'line_types', 'EmailConfirmationSession'}};
function_info('requestEmailConfirmation', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% requestIdentityUnbind(This, Provider, Identifier)
function_info('requestIdentityUnbind', params_type) ->
  {struct, [{4, i32},
          {2, string}]}
;
function_info('requestIdentityUnbind', reply_type) ->
  {struct, []};
function_info('requestIdentityUnbind', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% resendEmailConfirmation(This, Verifier)
function_info('resendEmailConfirmation', params_type) ->
  {struct, [{2, string}]}
;
function_info('resendEmailConfirmation', reply_type) ->
  {struct, {'line_types', 'EmailConfirmationSession'}};
function_info('resendEmailConfirmation', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% resendPinCode(This, SessionId)
function_info('resendPinCode', params_type) ->
  {struct, [{2, string}]}
;
function_info('resendPinCode', reply_type) ->
  {struct, []};
function_info('resendPinCode', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% resendPinCodeBySMS(This, SessionId)
function_info('resendPinCodeBySMS', params_type) ->
  {struct, [{2, string}]}
;
function_info('resendPinCodeBySMS', reply_type) ->
  {struct, []};
function_info('resendPinCodeBySMS', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% sendChatChecked(This, Seq, Consumer, LastMessageId)
function_info('sendChatChecked', params_type) ->
  {struct, [{1, i32},
          {2, string},
          {3, string}]}
;
function_info('sendChatChecked', reply_type) ->
  {struct, []};
function_info('sendChatChecked', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% sendMessageAwaitCommit(This, Seq, Message)
function_info('sendMessageAwaitCommit', params_type) ->
  {struct, [{1, i32},
          {2, {struct, {'line_types', 'Message'}}}]}
;
function_info('sendMessageAwaitCommit', reply_type) ->
  {struct, {'line_types', 'CommitMessageResult'}};
function_info('sendMessageAwaitCommit', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% sendChatRemoved(This, Seq, Consumer, LastMessageId)
function_info('sendChatRemoved', params_type) ->
  {struct, [{1, i32},
          {2, string},
          {3, string}]}
;
function_info('sendChatRemoved', reply_type) ->
  {struct, []};
function_info('sendChatRemoved', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% sendContentPreviewUpdated(This, Esq, MessageId, ReceiverMids)
function_info('sendContentPreviewUpdated', params_type) ->
  {struct, [{1, i32},
          {2, string},
          {3, {list, string}}]}
;
function_info('sendContentPreviewUpdated', reply_type) ->
  {map, string, string};
function_info('sendContentPreviewUpdated', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% sendContentReceipt(This, Seq, Consumer, MessageId)
function_info('sendContentReceipt', params_type) ->
  {struct, [{1, i32},
          {2, string},
          {3, string}]}
;
function_info('sendContentReceipt', reply_type) ->
  {struct, []};
function_info('sendContentReceipt', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% sendDummyPush(This)
function_info('sendDummyPush', params_type) ->
  {struct, []}
;
function_info('sendDummyPush', reply_type) ->
  {struct, []};
function_info('sendDummyPush', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% removeE2EEPublicKey(This, PublicKey)
function_info('removeE2EEPublicKey', params_type) ->
  {struct, [{2, {struct, {'line_types', 'E2EEPublicKey'}}}]}
;
function_info('removeE2EEPublicKey', reply_type) ->
  {struct, []};
function_info('removeE2EEPublicKey', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% negotiateE2EEPublicKey(This, Mid)
function_info('negotiateE2EEPublicKey', params_type) ->
  {struct, [{2, string}]}
;
function_info('negotiateE2EEPublicKey', reply_type) ->
  {struct, {'line_types', 'E2EENegotiationResult'}};
function_info('negotiateE2EEPublicKey', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getE2EEPublicKey(This, Mid, Version, KeyId)
function_info('getE2EEPublicKey', params_type) ->
  {struct, [{2, string},
          {3, i32},
          {4, i32}]}
;
function_info('getE2EEPublicKey', reply_type) ->
  {struct, {'line_types', 'E2EEPublicKey'}};
function_info('getE2EEPublicKey', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% requestE2EEKeyExchange(This, ReqSeq, TemporalPublicKey, PublicKey, Verifier)
function_info('requestE2EEKeyExchange', params_type) ->
  {struct, [{1, i32},
          {2, string},
          {3, {struct, {'line_types', 'E2EEPublicKey'}}},
          {4, string}]}
;
function_info('requestE2EEKeyExchange', reply_type) ->
  {struct, []};
function_info('requestE2EEKeyExchange', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getLastE2EEPublicKeys(This, ChatMid)
function_info('getLastE2EEPublicKeys', params_type) ->
  {struct, [{2, string}]}
;
function_info('getLastE2EEPublicKeys', reply_type) ->
  {map, string, {struct, {'line_types', 'E2EEPublicKey'}}};
function_info('getLastE2EEPublicKeys', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% registerE2EEPublicKey(This, ReqSeq, PublicKey)
function_info('registerE2EEPublicKey', params_type) ->
  {struct, [{1, i32},
          {2, {struct, {'line_types', 'E2EEPublicKey'}}}]}
;
function_info('registerE2EEPublicKey', reply_type) ->
  {struct, {'line_types', 'E2EEPublicKey'}};
function_info('registerE2EEPublicKey', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getE2EEPublicKeys(This)
function_info('getE2EEPublicKeys', params_type) ->
  {struct, []}
;
function_info('getE2EEPublicKeys', reply_type) ->
  {list, {struct, {'line_types', 'E2EEPublicKey'}}};
function_info('getE2EEPublicKeys', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getE2EEPublicKeysEx(This, IgnoreE2EEStatus)
function_info('getE2EEPublicKeysEx', params_type) ->
  {struct, [{2, bool}]}
;
function_info('getE2EEPublicKeysEx', reply_type) ->
  {list, {struct, {'line_types', 'E2EEPublicKey'}}};
function_info('getE2EEPublicKeysEx', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getReadMessageOpsInBulk(This, ChatIds)
function_info('getReadMessageOpsInBulk', params_type) ->
  {struct, [{2, {list, string}}]}
;
function_info('getReadMessageOpsInBulk', reply_type) ->
  {list, {struct, {'line_types', 'Operation'}}};
function_info('getReadMessageOpsInBulk', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% sendEvent(This, Seq, Message)
function_info('sendEvent', params_type) ->
  {struct, [{1, i32},
          {2, {struct, {'line_types', 'Message'}}}]}
;
function_info('sendEvent', reply_type) ->
  {struct, {'line_types', 'Message'}};
function_info('sendEvent', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% sendMessage(This, Seq, Message)
function_info('sendMessage', params_type) ->
  {struct, [{1, i32},
          {2, {struct, {'line_types', 'Message'}}}]}
;
function_info('sendMessage', reply_type) ->
  {struct, {'line_types', 'Message'}};
function_info('sendMessage', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% sendMessageIgnored(This, Seq, Consumer, MessageIds)
function_info('sendMessageIgnored', params_type) ->
  {struct, [{1, i32},
          {2, string},
          {3, {list, string}}]}
;
function_info('sendMessageIgnored', reply_type) ->
  {struct, []};
function_info('sendMessageIgnored', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% sendMessageReceipt(This, Seq, Consumer, MessageIds)
function_info('sendMessageReceipt', params_type) ->
  {struct, [{1, i32},
          {2, string},
          {3, {list, string}}]}
;
function_info('sendMessageReceipt', reply_type) ->
  {struct, []};
function_info('sendMessageReceipt', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% findContactByMetaTag(This, Userid, Reference)
function_info('findContactByMetaTag', params_type) ->
  {struct, [{2, string},
          {3, string}]}
;
function_info('findContactByMetaTag', reply_type) ->
  {struct, {'line_types', 'Contact'}};
function_info('findContactByMetaTag', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% sendMessageToMyHome(This, Seq, Message)
function_info('sendMessageToMyHome', params_type) ->
  {struct, [{1, i32},
          {2, {struct, {'line_types', 'Message'}}}]}
;
function_info('sendMessageToMyHome', reply_type) ->
  {struct, {'line_types', 'Message'}};
function_info('sendMessageToMyHome', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% setBuddyLocation(This, Mid, Index, Location)
function_info('setBuddyLocation', params_type) ->
  {struct, [{2, string},
          {3, i32},
          {4, {struct, {'line_types', 'Geolocation'}}}]}
;
function_info('setBuddyLocation', reply_type) ->
  {struct, []};
function_info('setBuddyLocation', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% setIdentityCredential(This, Identifier, Verifier, Provider)
function_info('setIdentityCredential', params_type) ->
  {struct, [{2, string},
          {3, string},
          {4, i32}]}
;
function_info('setIdentityCredential', reply_type) ->
  {struct, []};
function_info('setIdentityCredential', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% setNotificationsEnabled(This, ReqSeq, Type, Target, Enablement)
function_info('setNotificationsEnabled', params_type) ->
  {struct, [{1, i32},
          {2, i32},
          {3, string},
          {4, bool}]}
;
function_info('setNotificationsEnabled', reply_type) ->
  {struct, []};
function_info('setNotificationsEnabled', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% startUpdateVerification(This, Region, Carrier, Phone, UdidHash, DeviceInfo, NetworkCode, Locale)
function_info('startUpdateVerification', params_type) ->
  {struct, [{2, string},
          {3, i32},
          {4, string},
          {5, string},
          {6, {struct, {'line_types', 'DeviceInfo'}}},
          {7, string},
          {8, string}]}
;
function_info('startUpdateVerification', reply_type) ->
  {struct, {'line_types', 'VerificationSessionData'}};
function_info('startUpdateVerification', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% startVerification(This, Region, Carrier, Phone, UdidHash, DeviceInfo, NetworkCode, Mid, Locale, SimInfo, OldUdidHash)
function_info('startVerification', params_type) ->
  {struct, [{2, string},
          {3, i32},
          {4, string},
          {5, string},
          {6, {struct, {'line_types', 'DeviceInfo'}}},
          {7, string},
          {8, string},
          {9, string},
          {10, {struct, {'line_types', 'SIMInfo'}}},
          {11, string}]}
;
function_info('startVerification', reply_type) ->
  {struct, {'line_types', 'VerificationSessionData'}};
function_info('startVerification', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% updateGroupPreferenceAttribute(This, ReqSeq, GroupMid, UpdatedAttrs)
function_info('updateGroupPreferenceAttribute', params_type) ->
  {struct, [{1, i32},
          {2, string},
          {3, {map, i32, string}}]}
;
function_info('updateGroupPreferenceAttribute', reply_type) ->
  {struct, []};
function_info('updateGroupPreferenceAttribute', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% createRoomV2(This, ReqSeq, ContactIds)
function_info('createRoomV2', params_type) ->
  {struct, [{1, i32},
          {2, {list, string}}]}
;
function_info('createRoomV2', reply_type) ->
  {struct, {'line_types', 'Room'}};
function_info('createRoomV2', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% storeUpdateProfileAttribute(This, Seq, ProfileAttribute, Value)
function_info('storeUpdateProfileAttribute', params_type) ->
  {struct, [{1, i32},
          {2, i32},
          {3, string}]}
;
function_info('storeUpdateProfileAttribute', reply_type) ->
  {struct, []};
function_info('storeUpdateProfileAttribute', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% syncContactBySnsIds(This, ReqSeq, Modifications)
function_info('syncContactBySnsIds', params_type) ->
  {struct, [{1, i32},
          {2, {list, {struct, {'line_types', 'SnsFriendModification'}}}}]}
;
function_info('syncContactBySnsIds', reply_type) ->
  {list, {struct, {'line_types', 'SnsFriendContactRegistration'}}};
function_info('syncContactBySnsIds', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% syncContacts(This, ReqSeq, LocalContacts)
function_info('syncContacts', params_type) ->
  {struct, [{1, i32},
          {2, {list, {struct, {'line_types', 'ContactModification'}}}}]}
;
function_info('syncContacts', reply_type) ->
  {map, string, {struct, {'line_types', 'ContactRegistration'}}};
function_info('syncContacts', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% trySendMessage(This, Seq, Message)
function_info('trySendMessage', params_type) ->
  {struct, [{1, i32},
          {2, {struct, {'line_types', 'Message'}}}]}
;
function_info('trySendMessage', reply_type) ->
  {struct, {'line_types', 'Message'}};
function_info('trySendMessage', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getNextMessagesV2(This, MessageBoxId, StartMessageId, MessagesCount)
function_info('getNextMessagesV2', params_type) ->
  {struct, [{2, string},
          {3, {struct, {'line_types', 'MessageBoxV2MessageId'}}},
          {4, i32}]}
;
function_info('getNextMessagesV2', reply_type) ->
  {list, {struct, {'line_types', 'Message'}}};
function_info('getNextMessagesV2', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getMessageBoxCompactWrapUpV2(This, MessageBoxId)
function_info('getMessageBoxCompactWrapUpV2', params_type) ->
  {struct, [{2, string}]}
;
function_info('getMessageBoxCompactWrapUpV2', reply_type) ->
  {struct, {'line_types', 'TMessageBoxWrapUp'}};
function_info('getMessageBoxCompactWrapUpV2', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% getRecentMessagesV2(This, MessageBoxId, MessagesCount)
function_info('getRecentMessagesV2', params_type) ->
  {struct, [{2, string},
          {3, i32}]}
;
function_info('getRecentMessagesV2', reply_type) ->
  {list, {struct, {'line_types', 'Message'}}};
function_info('getRecentMessagesV2', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% validateContactsOnBot(This, Contacts)
function_info('validateContactsOnBot', params_type) ->
  {struct, [{2, {list, string}}]}
;
function_info('validateContactsOnBot', reply_type) ->
  {map, string, string};
function_info('validateContactsOnBot', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% tryFriendRequest(This, MidOrEMid, Method, FriendRequestParams)
function_info('tryFriendRequest', params_type) ->
  {struct, [{1, string},
          {2, i32},
          {3, string}]}
;
function_info('tryFriendRequest', reply_type) ->
  {struct, []};
function_info('tryFriendRequest', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% unblockContact(This, ReqSeq, Id)
function_info('unblockContact', params_type) ->
  {struct, [{1, i32},
          {2, string}]}
;
function_info('unblockContact', reply_type) ->
  {struct, []};
function_info('unblockContact', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% unblockRecommendation(This, ReqSeq, Id)
function_info('unblockRecommendation', params_type) ->
  {struct, [{1, i32},
          {2, string}]}
;
function_info('unblockRecommendation', reply_type) ->
  {struct, []};
function_info('unblockRecommendation', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% unregisterUserAndDevice(This)
function_info('unregisterUserAndDevice', params_type) ->
  {struct, []}
;
function_info('unregisterUserAndDevice', reply_type) ->
  string;
function_info('unregisterUserAndDevice', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% updateApnsDeviceToken(This, ApnsDeviceToken)
function_info('updateApnsDeviceToken', params_type) ->
  {struct, [{2, string}]}
;
function_info('updateApnsDeviceToken', reply_type) ->
  {struct, []};
function_info('updateApnsDeviceToken', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% updateBuddySetting(This, Key, Value)
function_info('updateBuddySetting', params_type) ->
  {struct, [{2, string},
          {3, string}]}
;
function_info('updateBuddySetting', reply_type) ->
  {struct, []};
function_info('updateBuddySetting', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% updateC2DMRegistrationId(This, RegistrationId)
function_info('updateC2DMRegistrationId', params_type) ->
  {struct, [{2, string}]}
;
function_info('updateC2DMRegistrationId', reply_type) ->
  {struct, []};
function_info('updateC2DMRegistrationId', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% updateContactSetting(This, ReqSeq, Mid, Flag, Value)
function_info('updateContactSetting', params_type) ->
  {struct, [{1, i32},
          {2, string},
          {3, i32},
          {4, string}]}
;
function_info('updateContactSetting', reply_type) ->
  {struct, []};
function_info('updateContactSetting', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% updateCustomModeSettings(This, CustomMode, ParamMap)
function_info('updateCustomModeSettings', params_type) ->
  {struct, [{2, i32},
          {3, {map, string, string}}]}
;
function_info('updateCustomModeSettings', reply_type) ->
  {struct, []};
function_info('updateCustomModeSettings', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% updateDeviceInfo(This, DeviceUid, DeviceInfo)
function_info('updateDeviceInfo', params_type) ->
  {struct, [{2, string},
          {3, {struct, {'line_types', 'DeviceInfo'}}}]}
;
function_info('updateDeviceInfo', reply_type) ->
  {struct, []};
function_info('updateDeviceInfo', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% updateGroup(This, ReqSeq, Group)
function_info('updateGroup', params_type) ->
  {struct, [{1, i32},
          {2, {struct, {'line_types', 'Group'}}}]}
;
function_info('updateGroup', reply_type) ->
  {struct, []};
function_info('updateGroup', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% updateNotificationToken(This, Type, Token)
function_info('updateNotificationToken', params_type) ->
  {struct, [{3, i32},
          {2, string}]}
;
function_info('updateNotificationToken', reply_type) ->
  {struct, []};
function_info('updateNotificationToken', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% updateNotificationTokenWithBytes(This, Type, Token)
function_info('updateNotificationTokenWithBytes', params_type) ->
  {struct, [{3, i32},
          {2, string}]}
;
function_info('updateNotificationTokenWithBytes', reply_type) ->
  {struct, []};
function_info('updateNotificationTokenWithBytes', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% updateProfile(This, ReqSeq, Profile)
function_info('updateProfile', params_type) ->
  {struct, [{1, i32},
          {2, {struct, {'line_types', 'Profile'}}}]}
;
function_info('updateProfile', reply_type) ->
  {struct, []};
function_info('updateProfile', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% updateProfileAttribute(This, ReqSeq, Attr, Value)
function_info('updateProfileAttribute', params_type) ->
  {struct, [{1, i32},
          {2, i32},
          {3, string}]}
;
function_info('updateProfileAttribute', reply_type) ->
  {struct, []};
function_info('updateProfileAttribute', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% updateRegion(This, Region)
function_info('updateRegion', params_type) ->
  {struct, [{2, string}]}
;
function_info('updateRegion', reply_type) ->
  {struct, []};
function_info('updateRegion', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% updateSettings(This, ReqSeq, Settings)
function_info('updateSettings', params_type) ->
  {struct, [{1, i32},
          {2, {struct, {'line_types', 'Settings'}}}]}
;
function_info('updateSettings', reply_type) ->
  {struct, []};
function_info('updateSettings', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% updateSettings2(This, ReqSeq, Settings)
function_info('updateSettings2', params_type) ->
  {struct, [{1, i32},
          {2, {struct, {'line_types', 'Settings'}}}]}
;
function_info('updateSettings2', reply_type) ->
  i32;
function_info('updateSettings2', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% updateSettingsAttribute(This, ReqSeq, Attr, Value)
function_info('updateSettingsAttribute', params_type) ->
  {struct, [{1, i32},
          {2, i32},
          {3, string}]}
;
function_info('updateSettingsAttribute', reply_type) ->
  {struct, []};
function_info('updateSettingsAttribute', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% updateSettingsAttributes(This, ReqSeq, AttrBitset, Settings)
function_info('updateSettingsAttributes', params_type) ->
  {struct, [{1, i32},
          {2, i32},
          {3, {struct, {'line_types', 'Settings'}}}]}
;
function_info('updateSettingsAttributes', reply_type) ->
  i32;
function_info('updateSettingsAttributes', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% verifyIdentityCredential(This, IdentityProvider, Identifier, Password)
function_info('verifyIdentityCredential', params_type) ->
  {struct, [{8, i32},
          {3, string},
          {4, string}]}
;
function_info('verifyIdentityCredential', reply_type) ->
  {struct, []};
function_info('verifyIdentityCredential', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% verifyIdentityCredentialWithResult(This, IdentityCredential)
function_info('verifyIdentityCredentialWithResult', params_type) ->
  {struct, [{2, {struct, {'line_types', 'IdentityCredential'}}}]}
;
function_info('verifyIdentityCredentialWithResult', reply_type) ->
  {struct, {'line_types', 'UserAuthStatus'}};
function_info('verifyIdentityCredentialWithResult', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% verifyPhone(This, SessionId, PinCode, UdidHash)
function_info('verifyPhone', params_type) ->
  {struct, [{2, string},
          {3, string},
          {4, string}]}
;
function_info('verifyPhone', reply_type) ->
  i32;
function_info('verifyPhone', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
% verifyQrcode(This, Verifier, PinCode)
function_info('verifyQrcode', params_type) ->
  {struct, [{2, string},
          {3, string}]}
;
function_info('verifyQrcode', reply_type) ->
  string;
function_info('verifyQrcode', exceptions) ->
  {struct, [{1, {struct, {'line_types', 'TalkException'}}}]}
;
function_info(_Func, _Info) -> erlang:error(function_clause).

function_names() -> 
  ['getChatRoomAnnouncementsBulk', 'getChatRoomAnnouncements', 'createChatRoomAnnouncement', 'removeChatRoomAnnouncement', 'unsendMessage', 'getGroupWithoutMembers', 'requestResendMessage', 'respondResendMessage', 'acceptGroupInvitation', 'acceptGroupInvitationByTicket', 'acceptProximityMatches', 'acquireCallRoute', 'acquireCallTicket', 'acquireEncryptedAccessToken', 'addSnsId', 'blockContact', 'blockRecommendation', 'cancelGroupInvitation', 'changeVerificationMethod', 'clearIdentityCredential', 'clearMessageBox', 'closeProximityMatch', 'commitSendMessage', 'commitSendMessages', 'commitUpdateProfile', 'confirmEmail', 'createGroup', 'createQrcodeBase64Image', 'createRoom', 'createSession', 'fetchAnnouncements', 'fetchMessages', 'fetchOperations', 'fetchOps', 'findAndAddContactsByEmail', 'findAndAddContactsByMid', 'findGroupByTicketV2', 'findAndAddContactsByPhone', 'getFriendRequests', 'removeFriendRequest', 'findAndAddContactsByUserid', 'findContactByUserid', 'findContactByUserTicket', 'findContactsByEmail', 'findContactsByPhone', 'findSnsIdUserStatus', 'finishUpdateVerification', 'generateUserTicket', 'destroyMessage', 'getAcceptedProximityMatches', 'getActiveBuddySubscriberIds', 'getAllContactIds', 'getAuthQrcode', 'getBlockedContactIds', 'registerWithPhoneNumber', 'registerWithPhoneNumberAndPassword', 'getAnalyticsInfo', 'reportClientStatistics', 'verifyPhoneNumberForLogin', 'verifyPhoneNumber', 'getBlockedContactIdsByRange', 'getBlockedRecommendationIds', 'getBuddyBlockerIds', 'getBuddyLocation', 'getCompactContactsModifiedSince', 'getCompactGroup', 'getCompactRoom', 'getContact', 'getContacts', 'getContactWithFriendRequestStatus', 'getCountryWithRequestIp', 'getFavoriteMids', 'getGroup', 'getGroupIdsInvited', 'getGroupIdsJoined', 'getGroups', 'getHiddenContactMids', 'getIdentityIdentifier', 'getLastAnnouncementIndex', 'getLastOpRevision', 'getSuggestRevisions', 'getPreviousMessagesV2WithReadCount', 'getMessageBox', 'getMessageBoxCompactWrapUp', 'getMessageBoxCompactWrapUpList', 'getMessageBoxList', 'getMessageBoxListByStatus', 'getMessageBoxWrapUp', 'getMessageBoxWrapUpList', 'getMessagesBySequenceNumber', 'getNextMessages', 'getNotificationPolicy', 'getPreviousMessages', 'getProfile', 'getProximityMatchCandidateList', 'getProximityMatchCandidates', 'getRecentMessages', 'getRecommendationIds', 'getRoom', 'getRSAKeyInfo', 'getServerTime', 'getSessions', 'getSettings', 'getGroupsV2', 'getSettingsAttributes', 'getSystemConfiguration', 'getUserTicket', 'getWapInvitation', 'invalidateUserTicket', 'inviteFriendsBySms', 'inviteIntoGroup', 'inviteIntoRoom', 'inviteViaEmail', 'isIdentityIdentifierAvailable', 'isUseridAvailable', 'kickoutFromGroup', 'reissueGroupTicket', 'findGroupByTicket', 'leaveGroup', 'leaveRoom', 'loginWithIdentityCredential', 'loginWithIdentityCredentialForCertificate', 'loginWithVerifier', 'loginWithVerifierForCerificate', 'loginWithVerifierForCertificate', 'logout', 'logoutSession', 'noop', 'notifiedRedirect', 'notifyBuddyOnAir', 'notifyIndividualEvent', 'notifyInstalled', 'notifyRegistrationComplete', 'notifySleep', 'notifyUpdated', 'openProximityMatch', 'registerBuddyUser', 'registerBuddyUserid', 'registerDevice', 'registerDeviceWithIdentityCredential', 'registerDeviceWithoutPhoneNumber', 'registerDeviceWithoutPhoneNumberWithIdentityCredential', 'registerUserid', 'registerWapDevice', 'registerWithExistingSnsIdAndIdentityCredential', 'registerWithSnsId', 'registerWithSnsIdAndIdentityCredential', 'reissueDeviceCredential', 'reissueUserTicket', 'getMessageReadRange', 'rejectGroupInvitation', 'releaseSession', 'removeAllMessages', 'removeBuddyLocation', 'removeMessage', 'makeUserAddMyselfAsContact', 'removeMessageFromMyHome', 'removeSnsId', 'report', 'reportContacts', 'reportGroups', 'reportProfile', 'reportRooms', 'findAndAddContactByMetaTag', 'reportSettings', 'reportSpam', 'reportSpammer', 'requestAccountPasswordReset', 'requestEmailConfirmation', 'requestIdentityUnbind', 'resendEmailConfirmation', 'resendPinCode', 'resendPinCodeBySMS', 'sendChatChecked', 'sendMessageAwaitCommit', 'sendChatRemoved', 'sendContentPreviewUpdated', 'sendContentReceipt', 'sendDummyPush', 'removeE2EEPublicKey', 'negotiateE2EEPublicKey', 'getE2EEPublicKey', 'requestE2EEKeyExchange', 'getLastE2EEPublicKeys', 'registerE2EEPublicKey', 'getE2EEPublicKeys', 'getE2EEPublicKeysEx', 'getReadMessageOpsInBulk', 'sendEvent', 'sendMessage', 'sendMessageIgnored', 'sendMessageReceipt', 'findContactByMetaTag', 'sendMessageToMyHome', 'setBuddyLocation', 'setIdentityCredential', 'setNotificationsEnabled', 'startUpdateVerification', 'startVerification', 'updateGroupPreferenceAttribute', 'createRoomV2', 'storeUpdateProfileAttribute', 'syncContactBySnsIds', 'syncContacts', 'trySendMessage', 'getNextMessagesV2', 'getMessageBoxCompactWrapUpV2', 'getRecentMessagesV2', 'validateContactsOnBot', 'tryFriendRequest', 'unblockContact', 'unblockRecommendation', 'unregisterUserAndDevice', 'updateApnsDeviceToken', 'updateBuddySetting', 'updateC2DMRegistrationId', 'updateContactSetting', 'updateCustomModeSettings', 'updateDeviceInfo', 'updateGroup', 'updateNotificationToken', 'updateNotificationTokenWithBytes', 'updateProfile', 'updateProfileAttribute', 'updateRegion', 'updateSettings', 'updateSettings2', 'updateSettingsAttribute', 'updateSettingsAttributes', 'verifyIdentityCredential', 'verifyIdentityCredentialWithResult', 'verifyPhone', 'verifyQrcode'].

