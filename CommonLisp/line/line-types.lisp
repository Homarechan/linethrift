;;; Autogenerated by Thrift
;;; DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
;;; options string: cl

(thrift:def-package :thrift-generated)

(cl:in-package :thrift-generated)

(thrift:def-enum "ApplicationType"
  (("IOS" . 16)
   ("IOS_RC" . 17)
   ("IOS_BETA" . 18)
   ("IOS_ALPHA" . 19)
   ("ANDROID" . 32)
   ("ANDROID_RC" . 33)
   ("ANDROID_BETA" . 34)
   ("ANDROID_ALPHA" . 35)
   ("WAP" . 48)
   ("WAP_RC" . 49)
   ("WAP_BETA" . 50)
   ("WAP_ALPHA" . 51)
   ("BOT" . 64)
   ("BOT_RC" . 65)
   ("BOT_BETA" . 66)
   ("BOT_ALPHA" . 67)
   ("WEB" . 80)
   ("WEB_RC" . 81)
   ("WEB_BETA" . 82)
   ("WEB_ALPHA" . 83)
   ("DESKTOPWIN" . 96)
   ("DESKTOPWIN_RC" . 97)
   ("DESKTOPWIN_BETA" . 98)
   ("DESKTOPWIN_ALPHA" . 99)
   ("DESKTOPMAC" . 112)
   ("DESKTOPMAC_RC" . 113)
   ("DESKTOPMAC_BETA" . 114)
   ("DESKTOPMAC_ALPHA" . 115)
   ("CHANNELGW" . 128)
   ("CHANNELGW_RC" . 129)
   ("CHANNELGW_BETA" . 130)
   ("CHANNELGW_ALPHA" . 131)
   ("CHANNELCP" . 144)
   ("CHANNELCP_RC" . 145)
   ("CHANNELCP_BETA" . 146)
   ("CHANNELCP_ALPHA" . 147)
   ("WINPHONE" . 160)
   ("WINPHONE_RC" . 161)
   ("WINPHONE_BETA" . 162)
   ("WINPHONE_ALPHA" . 163)
   ("BLACKBERRY" . 176)
   ("BLACKBERRY_RC" . 177)
   ("BLACKBERRY_BETA" . 178)
   ("BLACKBERRY_ALPHA" . 179)
   ("WINMETRO" . 192)
   ("WINMETRO_RC" . 193)
   ("WINMETRO_BETA" . 194)
   ("WINMETRO_ALPHA" . 195)
   ("S40" . 208)
   ("S40_RC" . 209)
   ("S40_BETA" . 210)
   ("S40_ALPHA" . 211)
   ("CHRONO" . 224)
   ("CHRONO_RC" . 225)
   ("CHRONO_BETA" . 226)
   ("CHRONO_ALPHA" . 227)
   ("TIZEN" . 256)
   ("TIZEN_RC" . 257)
   ("TIZEN_BETA" . 258)
   ("TIZEN_ALPHA" . 259)
   ("VIRTUAL" . 272)
   ("FIREFOXOS" . 288)
   ("FIREFOXOS_RC" . 289)
   ("FIREFOXOS_BETA" . 290)
   ("FIREFOXOS_ALPHA" . 291)
   ("IOSIPAD" . 304)
   ("IOSIPAD_RC" . 305)
   ("IOSIPAD_BETA" . 306)
   ("IOSIPAD_ALPHA" . 307)
   ("BIZIOS" . 320)
   ("BIZIOS_RC" . 321)
   ("BIZIOS_BETA" . 322)
   ("BIZIOS_ALPHA" . 323)
   ("BIZANDROID" . 336)
   ("BIZANDROID_RC" . 337)
   ("BIZANDROID_BETA" . 338)
   ("BIZANDROID_ALPHA" . 339)
   ("BIZBOT" . 352)
   ("BIZBOT_RC" . 353)
   ("BIZBOT_BETA" . 354)
   ("BIZBOT_ALPHA" . 355)
   ("CHROMEOS" . 368)
   ("CHROMEOS_RC" . 369)
   ("CHROMEOS_BETA" . 370)
   ("CHROMEOS_ALPHA" . 371)
   ("ANDROIDLITE" . 384)
   ("ANDROIDLITE_RC" . 385)
   ("ANDROIDLITE_BETA" . 386)
   ("ANDROIDLITE_ALPHA" . 387)
   ("WIN10" . 400)
   ("WIN10_RC" . 401)
   ("WIN10_BETA" . 402)
   ("WIN10_ALPHA" . 403)
   ("BIZWEB" . 416)
   ("BIZWEB_RC" . 417)
   ("BIZWEB_BETA" . 418)
   ("BIZWEB_ALPHA" . 419)
   ("DUMMYPRIMARY" . 432)
   ("DUMMYPRIMARY_RC" . 433)
   ("DUMMYPRIMARY_BETA" . 434)
   ("DUMMYPRIMARY_ALPHA" . 435)
   ("SQUARE" . 448)
   ("SQUARE_RC" . 449)
   ("SQUARE_BETA" . 450)
   ("SQUARE_ALPHA" . 451)
   ("INTERNAL" . 464)
   ("INTERNAL_RC" . 465)
   ("INTERNAL_BETA" . 466)
   ("INTERNAL_ALPHA" . 467)
   ("CLOVAFRIENDS" . 480)
   ("CLOVAFRIENDS_RC" . 481)
   ("CLOVAFRIENDS_BETA" . 482)
   ("CLOVAFRIENDS_ALPHA" . 483)))

(thrift:def-enum "ExtendedProfileAttribute"
  ())

(thrift:def-enum "PrivacyLevelType"
  (("PUBLIC" . 0)
   ("PRIVATE" . 1)))

(thrift:def-enum "PaidCallerIdStatus"
  (("NOT_SPECIFIED" . 0)
   ("VALID" . 1)
   ("VERIFICATION_REQUIRED" . 2)
   ("NOT_PERMITTED" . 3)
   ("LIMIT_EXCEEDED" . 4)
   ("LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED" . 5)))

(thrift:def-enum "PaidCallProductType"
  (("COIN" . 0)
   ("CREDIT" . 1)
   ("MONTHLY" . 2)))

(thrift:def-enum "PaidCallType"
  (("OUT" . 0)
   ("IN" . 1)
   ("TOLLFREE" . 2)
   ("RECORD" . 3)
   ("AD" . 4)
   ("CS" . 5)))

(thrift:def-enum "BotType"
  (("RESERVED" . 0)
   ("OFFICIAL" . 1)
   ("LINE_AT_0" . 2)
   ("LINE_AT" . 3)))

(thrift:def-enum "BuddyOnAirLabel"
  (("ON_AIR" . 0)
   ("LIVE" . 1)))

(thrift:def-enum "BuddyBannerLinkType"
  (("BUDDY_BANNER_LINK_HIDDEN" . 0)
   ("BUDDY_BANNER_LINK_MID" . 1)
   ("BUDDY_BANNER_LINK_URL" . 2)))

(thrift:def-enum "BuddyOnAirType"
  (("NORMAL" . 0)
   ("LIVE" . 1)
   ("VOIP" . 2)))

(thrift:def-enum "Diff"
  (("ADDED" . 0)
   ("UPDATED" . 1)
   ("REMOVED" . 2)))

(thrift:def-enum "ReportType"
  (("ADVERTISING" . 1)
   ("GENDER_HARASSMENT" . 2)
   ("HARASSMENT" . 3)
   ("OTHER" . 4)))

(thrift:def-enum "SyncTriggerReason"
  (("OTHER" . 0)
   ("REVISION_GAP_TOO_LARGE" . 1)
   ("OPERATION_EXPIRED" . 2)))

(thrift:def-enum "ReportCategory"
  (("PUSH_NORMAL_PLAIN" . 0)
   ("PUSH_NORMAL_E2EE" . 1)
   ("PUSH_VOIP_PLAIN" . 2)
   ("PUSH_VOIP_E2EE" . 3)))

(thrift:def-enum "BuddyResultState"
  (("ACCEPTED" . 1)
   ("SUCCEEDED" . 2)
   ("FAILED" . 3)
   ("CANCELLED" . 4)
   ("NOTIFY_FAILED" . 5)
   ("STORING" . 11)
   ("UPLOADING" . 21)
   ("NOTIFYING" . 31)
   ("REMOVING_SUBSCRIPTION" . 41)
   ("UNREGISTERING_ACCOUNT" . 42)
   ("NOTIFYING_LEAVE_CHAT" . 43)))

(thrift:def-enum "BuddySearchRequestSource"
  (("NA" . 0)
   ("FRIEND_VIEW" . 1)
   ("OFFICIAL_ACCOUNT_VIEW" . 2)))

(thrift:def-enum "CarrierCode"
  (("NOT_SPECIFIED" . 0)
   ("JP_DOCOMO" . 1)
   ("JP_AU" . 2)
   ("JP_SOFTBANK" . 3)
   ("JP_DOCOMO_LINE" . 4)
   ("KR_SKT" . 17)
   ("KR_KT" . 18)
   ("KR_LGT" . 19)))

(thrift:def-enum "ChannelConfiguration"
  (("MESSAGE" . 0)
   ("MESSAGE_NOTIFICATION" . 1)
   ("NOTIFICATION_CENTER" . 2)))

(thrift:def-enum "ChannelPermission"
  (("PROFILE" . 0)
   ("FRIENDS" . 1)
   ("GROUP" . 2)))

(thrift:def-enum "ChannelFeatureLicense"
  (("BLE_LCS_API_USABLE" . 26)
   ("PROHIBIT_MINIMIZE_CHANNEL_BROWSER" . 27)
   ("ALLOW_IOS_WEBKIT" . 28)))

(thrift:def-enum "ChannelErrorCode"
  (("ILLEGAL_ARGUMENT" . 0)
   ("INTERNAL_ERROR" . 1)
   ("CONNECTION_ERROR" . 2)
   ("AUTHENTICATIONI_FAILED" . 3)
   ("NEED_PERMISSION_APPROVAL" . 4)
   ("COIN_NOT_USABLE" . 5)
   ("WEBVIEW_NOT_ALLOWED" . 6)))

(thrift:def-enum "ChannelSyncType"
  (("SYNC" . 0)
   ("REMOVE" . 1)
   ("REMOVE_ALL" . 2)))

(thrift:def-enum "LoginType"
  (("ID_CREDENTIAL" . 0)
   ("QRCODE" . 1)
   ("ID_CREDENTIAL_WITH_E2EE" . 2)))

(thrift:def-enum "ContactAttribute"
  (("CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL" . 1)
   ("CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL" . 2)
   ("CONTACT_ATTRIBUTE_CAPABLE_MY_HOME" . 16)
   ("CONTACT_ATTRIBUTE_CAPABLE_BUDDY" . 32)))

(thrift:def-enum "ContactCategory"
  (("NORMAL" . 0)
   ("RECOMMEND" . 1)))

(thrift:def-enum "ContactRelation"
  (("ONEWAY" . 0)
   ("BOTH" . 1)
   ("NOT_REGISTERED" . 2)))

(thrift:def-enum "AsymmetricKeyAlgorithm"
  (("ASYMMETRIC_KEY_ALGORITHM_RSA" . 1)
   ("ASYMMETRIC_KEY_ALGORITHM_ECDH" . 2)))

(thrift:def-enum "ContactSetting"
  (("CONTACT_SETTING_NOTIFICATION_DISABLE" . 1)
   ("CONTACT_SETTING_DISPLAY_NAME_OVERRIDE" . 2)
   ("CONTACT_SETTING_CONTACT_HIDE" . 4)
   ("CONTACT_SETTING_FAVORITE" . 8)
   ("CONTACT_SETTING_DELETE" . 16)))

(thrift:def-enum "ContactStatus"
  (("UNSPECIFIED" . 0)
   ("FRIEND" . 1)
   ("FRIEND_BLOCKED" . 2)
   ("RECOMMEND" . 3)
   ("RECOMMEND_BLOCKED" . 4)
   ("DELETED" . 5)
   ("DELETED_BLOCKED" . 6)))

(thrift:def-enum "ContactType"
  (("MID" . 0)
   ("PHONE" . 1)
   ("EMAIL" . 2)
   ("USERID" . 3)
   ("PROXIMITY" . 4)
   ("GROUP" . 5)
   ("USER" . 6)
   ("QRCODE" . 7)
   ("PROMOTION_BOT" . 8)
   ("CONTACT_MESSAGE" . 9)
   ("FRIEND_REQUEST" . 10)
   ("REPAIR" . 128)
   ("FACEBOOK" . 2305)
   ("SINA" . 2306)
   ("RENREN" . 2307)
   ("FEIXIN" . 2308)
   ("BBM" . 2309)
   ("BEACON" . 11)))

(thrift:def-enum "GroupPreferenceAttribute"
  (("INVITATION_TICKET" . 1)
   ("FAVORITE_TIMESTAMP" . 2)))

(thrift:def-enum "ContentType"
  (("NONE" . 0)
   ("IMAGE" . 1)
   ("VIDEO" . 2)
   ("AUDIO" . 3)
   ("HTML" . 4)
   ("PDF" . 5)
   ("CALL" . 6)
   ("STICKER" . 7)
   ("PRESENCE" . 8)
   ("GIFT" . 9)
   ("GROUPBOARD" . 10)
   ("APPLINK" . 11)
   ("LINK" . 12)
   ("CONTACT" . 13)
   ("FILE" . 14)
   ("LOCATION" . 15)
   ("POSTNOTIFICATION" . 16)
   ("RICH" . 17)
   ("CHATEVENT" . 18)
   ("MUSIC" . 19)
   ("PAYMENT" . 20)
   ("EXTIMAGE" . 21)))

(thrift:def-enum "MessageRelationType"
  (("FORWARD" . 0)
   ("AUTO_REPLY" . 1)
   ("SUBORDINATE" . 2)))

(thrift:def-enum "CustomMode"
  (("PROMOTION_FRIENDS_INVITE" . 1)
   ("CAPABILITY_SERVER_SIDE_SMS" . 2)
   ("LINE_CLIENT_ANALYTICS_CONFIGURATION" . 3)))

(thrift:def-enum "RoomAttribute"
  (("ALL" . 255)
   ("NOTIFICATION_SETTING" . 1)))

(thrift:def-enum "UserStatus"
  (("NORMAL" . 0)
   ("UNBOUND" . 1)
   ("UNREGISTERED" . 2)))

(thrift:def-enum "EmailConfirmationStatus"
  (("NOT_SPECIFIED" . 0)
   ("NOT_YET" . 1)
   ("DONE" . 3)
   ("NEED_ENFORCED_INPUT" . 4)))

(thrift:def-enum "AccountMigrationPincodeType"
  (("NOT_APPLICABLE" . 0)
   ("NOT_SET" . 1)
   ("SET" . 2)
   ("NEED_ENFORCED_INPUT" . 3)))

(thrift:def-enum "AccountMigrationCheckType"
  (("SKIP" . 0)
   ("PINCODE" . 1)
   ("SECURITY_CENTER" . 2)))

(thrift:def-enum "SecurityCenterSettingsType"
  (("NOT_APPLICABLE" . 0)
   ("NOT_SET" . 1)
   ("SET" . 2)
   ("NEED_ENFORCED_INPUT" . 3)))

(thrift:def-enum "EmailConfirmationType"
  (("SERVER_SIDE_EMAIL" . 0)
   ("CLIENT_SIDE_EMAIL" . 1)))

(thrift:def-enum "SquareChatAnnouncementType"
  (("TEXT_MESSAGE" . 0)))

(thrift:def-enum "SquareChatAttribute"
  (("NAME" . 2)
   ("SQUARE_CHAT_IMAGE" . 3)
   ("STATE" . 4)))

(thrift:def-enum "SquareMemberAttribute"
  (("DISPLAY_NAME" . 1)
   ("PROFILE_IMAGE" . 2)
   ("ABLE_TO_RECEIVE_MESSAGE" . 3)
   ("MEMBERSHIP_STATE" . 5)
   ("ROLE" . 6)
   ("PREFERENCE" . 7)))

(thrift:def-enum "SquareMemberRelationAttribute"
  (("BLOCKED" . 1)))

(thrift:def-enum "SquarePreferenceAttribute"
  (("FAVORITE" . 1)
   ("NOTI_FOR_NEW_JOIN_REQUEST" . 2)))

(thrift:def-enum "SquareState"
  (("ALIVE" . 0)
   ("DELETED" . 1)
   ("SUSPENDED" . 2)))

(thrift:def-enum "CommitMessageResultCode"
  (("DELIVERED" . 0)
   ("DELIVERY_SKIPPED" . 1)
   ("DELIVERY_RESTRICTED" . 2)))

(thrift:def-enum "ErrorCode"
  (("ILLEGAL_ARGUMENT" . 0)
   ("AUTHENTICATION_FAILED" . 1)
   ("DB_FAILED" . 2)
   ("INVALID_STATE" . 3)
   ("EXCESSIVE_ACCESS" . 4)
   ("NOT_FOUND" . 5)
   ("INVALID_MID" . 9)
   ("NOT_A_MEMBER" . 10)
   ("INVALID_LENGTH" . 6)
   ("NOT_AVAILABLE_USER" . 7)
   ("NOT_AUTHORIZED_DEVICE" . 8)
   ("NOT_AUTHORIZED_SESSION" . 14)
   ("INCOMPATIBLE_APP_VERSION" . 11)
   ("NOT_READY" . 12)
   ("NOT_AVAILABLE_SESSION" . 13)
   ("SYSTEM_ERROR" . 15)
   ("NO_AVAILABLE_VERIFICATION_METHOD" . 16)
   ("NOT_AUTHENTICATED" . 17)
   ("INVALID_IDENTITY_CREDENTIAL" . 18)
   ("NOT_AVAILABLE_IDENTITY_IDENTIFIER" . 19)
   ("INTERNAL_ERROR" . 20)
   ("NO_SUCH_IDENTITY_IDENFIER" . 21)
   ("DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY" . 22)
   ("ILLEGAL_IDENTITY_CREDENTIAL" . 23)
   ("UNKNOWN_CHANNEL" . 24)
   ("NO_SUCH_MESSAGE_BOX" . 25)
   ("NOT_AVAILABLE_MESSAGE_BOX" . 26)
   ("CHANNEL_DOES_NOT_MATCH" . 27)
   ("NOT_YOUR_MESSAGE" . 28)
   ("MESSAGE_DEFINED_ERROR" . 29)
   ("USER_CANNOT_ACCEPT_PRESENTS" . 30)
   ("USER_NOT_STICKER_OWNER" . 32)
   ("MAINTENANCE_ERROR" . 33)
   ("ACCOUNT_NOT_MATCHED" . 34)
   ("ABUSE_BLOCK" . 35)
   ("NOT_FRIEND" . 36)
   ("NOT_ALLOWED_CALL" . 37)
   ("BLOCK_FRIEND" . 38)
   ("INCOMPATIBLE_VOIP_VERSION" . 39)
   ("INVALID_SNS_ACCESS_TOKEN" . 40)
   ("EXTERNAL_SERVICE_NOT_AVAILABLE" . 41)
   ("NOT_ALLOWED_ADD_CONTACT" . 42)
   ("NOT_CERTIFICATED" . 43)
   ("NOT_ALLOWED_SECONDARY_DEVICE" . 44)
   ("INVALID_PIN_CODE" . 45)
   ("NOT_FOUND_IDENTITY_CREDENTIAL" . 46)
   ("EXCEED_FILE_MAX_SIZE" . 47)
   ("EXCEED_DAILY_QUOTA" . 48)
   ("NOT_SUPPORT_SEND_FILE" . 49)
   ("MUST_UPGRADE" . 50)
   ("NOT_AVAILABLE_PIN_CODE_SESSION" . 51)
   ("EXPIRED_REVISION" . 52)
   ("NOT_YET_PHONE_NUMBER" . 54)
   ("BAD_CALL_NUMBER" . 55)
   ("UNAVAILABLE_CALL_NUMBER" . 56)
   ("NOT_SUPPORT_CALL_SERVICE" . 57)
   ("CONGESTION_CONTROL" . 58)
   ("NO_BALANCE" . 59)
   ("NOT_PERMITTED_CALLER_ID" . 60)
   ("NO_CALLER_ID_LIMIT_EXCEEDED" . 61)
   ("CALLER_ID_VERIFICATION_REQUIRED" . 62)
   ("NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED" . 63)
   ("MESSAGE_NOT_FOUND" . 64)
   ("INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT" . 65)
   ("ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED" . 66)
   ("ACCOUNT_MIGRATION_PINCODE_BLOCKED" . 67)
   ("INVALID_PASSWORD_FORMAT" . 69)
   ("FEATURE_RESTRICTED" . 70)
   ("MESSAGE_NOT_DESTRUCTIBLE" . 71)
   ("PAID_CALL_REDEEM_FAILED" . 72)
   ("PREVENTED_JOIN_BY_TICKET" . 73)
   ("SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT" . 75)
   ("SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY" . 76)
   ("SECURITY_CENTER_NOT_VERIFIED" . 77)
   ("SECURITY_CENTER_BLOCKED_BY_SETTING" . 78)
   ("SECURITY_CENTER_BLOCKED" . 79)
   ("TALK_PROXY_EXCEPTION" . 80)
   ("E2EE_INVALID_PROTOCOL" . 81)
   ("E2EE_RETRY_ENCRYPT" . 82)
   ("E2EE_UPDATE_SENDER_KEY" . 83)
   ("E2EE_UPDATE_RECEIVER_KEY" . 84)
   ("E2EE_INVALID_ARGUMENT" . 85)
   ("E2EE_INVALID_VERSION" . 86)
   ("E2EE_SENDER_DISABLED" . 87)
   ("E2EE_RECEIVER_DISABLED" . 88)
   ("E2EE_SENDER_NOT_ALLOWED" . 89)
   ("E2EE_RECEIVER_NOT_ALLOWED" . 90)
   ("E2EE_RESEND_FAIL" . 91)
   ("E2EE_RESEND_OK" . 92)
   ("HITOKOTO_BACKUP_NO_AVAILABLE_DATA" . 93)
   ("E2EE_UPDATE_PRIMARY_DEVICE" . 94)
   ("SUCCESS" . 95)
   ("CANCEL" . 96)
   ("E2EE_PRIMARY_NOT_SUPPORT" . 97)
   ("E2EE_RETRY_PLAIN" . 98)
   ("E2EE_RECREATE_GROUP_KEY" . 99)
   ("E2EE_GROUP_TOO_MANY_MEMBERS" . 100)
   ("SERVER_BUSY" . 101)
   ("NOT_ALLOWED_ADD_FOLLOW" . 102)
   ("INCOMING_FRIEND_REQUEST_LIMIT" . 103)
   ("OUTGOING_FRIEND_REQUEST_LIMIT" . 104)
   ("OUTGOING_FRIEND_REQUEST_QUOTA" . 105)
   ("DUPLICATED" . 106)
   ("BANNED" . 107)))

(thrift:def-enum "FeatureType"
  (("OBS_VIDEO" . 1)
   ("OBS_GENERAL" . 2)))

(thrift:def-enum "GroupAttribute"
  (("NAME" . 1)
   ("PICTURE_STATUS" . 2)
   ("ALL" . 255)
   ("PREVENTED_JOIN_BY_TICKET" . 4)
   ("NOTIFICATION_SETTING" . 8)))

(thrift:def-enum "IdentityProvider"
  (("UNKNOWN" . 0)
   ("LINE" . 1)
   ("NAVER_KR" . 2)
   ("LINE_PHONE" . 3)))

(thrift:def-enum "LoginResultType"
  (("SUCCESS" . 1)
   ("REQUIRE_QRCODE" . 2)
   ("REQUIRE_DEVICE_CONFIRM" . 3)
   ("REQUIRE_SMS_CONFIRM" . 4)))

(thrift:def-enum "MessageOperationType"
  (("SEND_MESSAGE" . 1)
   ("RECEIVE_MESSAGE" . 2)
   ("READ_MESSAGE" . 3)
   ("NOTIFIED_READ_MESSAGE" . 4)
   ("NOTIFIED_JOIN_CHAT" . 5)
   ("FAILED_SEND_MESSAGE" . 6)
   ("SEND_CONTENT" . 7)
   ("SEND_CONTENT_RECEIPT" . 8)
   ("SEND_CHAT_REMOVED" . 9)
   ("REMOVE_ALL_MESSAGES" . 10)))

(thrift:def-enum "MIDType"
  (("USER" . 0)
   ("ROOM" . 1)
   ("GROUP" . 2)
   ("SQUARE" . 3)
   ("SQUARE_CHAT" . 4)
   ("SQUARE_MEMBER" . 5)
   ("BOT" . 6)))

(thrift:def-enum "ServiceCode"
  (("UNKNOWN" . 0)
   ("TALK" . 1)
   ("SQUARE" . 2)))

(thrift:def-enum "FriendRequestDirection"
  (("INCOMING" . 1)
   ("OUTGOING" . 2)))

(thrift:def-enum "FriendRequestMethod"
  (("TIMELINE" . 1)
   ("NEARBY" . 2)
   ("SQUARE" . 3)))

(thrift:def-enum "FriendRequestStatus"
  (("NONE" . 0)
   ("AVAILABLE" . 1)
   ("ALREADY_REQUESTED" . 2)
   ("UNAVAILABLE" . 3)))

(thrift:def-enum "ModificationType"
  (("ADD" . 0)
   ("REMOVE" . 1)
   ("MODIFY" . 2)))

(thrift:def-enum "NotificationItemFetchMode"
  (("ALL" . 0)
   ("APPEND" . 1)))

(thrift:def-enum "NotificationQueueType"
  (("GLOBAL" . 1)
   ("MESSAGE" . 2)
   ("PRIMARY" . 3)))

(thrift:def-enum "GroupCallMediaType"
  (("AUDIO" . 1)
   ("VIDEO" . 2)))

(thrift:def-enum "PersonalInfo"
  (("EMAIL" . 0)
   ("PHONE" . 1)
   ("BIRTHDAY" . 2)
   ("RAW_BIRTHDAY" . 3)))

(thrift:def-enum "NotificationStatus"
  (("NOTIFICATION_ITEM_EXIST" . 1)
   ("TIMELINE_ITEM_EXIST" . 2)
   ("NOTE_GROUP_NEW_ITEM_EXIST" . 4)
   ("TIMELINE_BUDDYGROUP_CHANGED" . 8)
   ("NOTE_ONE_TO_ONE_NEW_ITEM_EXIST" . 16)
   ("ALBUM_ITEM_EXIST" . 32)
   ("TIMELINE_ITEM_DELETED" . 64)
   ("OTOGROUP_ITEM_EXIST" . 128)
   ("GROUPHOME_NEW_ITEM_EXIST" . 256)
   ("GROUPHOME_HIDDEN_ITEM_CHANGED" . 512)
   ("NOTIFICATION_ITEM_CHANGED" . 1024)
   ("BEAD_ITEM_HIDE" . 2048)
   ("BEAD_ITEM_SHOW" . 4096)))

(thrift:def-enum "NotificationType"
  (("APPLE_APNS" . 1)
   ("GOOGLE_C2DM" . 2)
   ("NHN_NNI" . 3)
   ("SKT_AOM" . 4)
   ("MS_MPNS" . 5)
   ("RIM_BIS" . 6)
   ("GOOGLE_GCM" . 7)
   ("NOKIA_NNAPI" . 8)
   ("TIZEN" . 9)
   ("LINE_BOT" . 17)
   ("LINE_WAP" . 18)
   ("APPLE_APNS_VOIP" . 19)
   ("MS_WNS" . 20)
   ("GOOGLE_FCM" . 21)))

(thrift:def-enum "OpStatus"
  (("NORMAL" . 0)
   ("ALERT_DISABLED" . 1)
   ("ALWAYS" . 2)))

(thrift:def-enum "OpType"
  (("END_OF_OPERATION" . 0)
   ("UPDATE_PROFILE" . 1)
   ("UPDATE_SETTINGS" . 36)
   ("NOTIFIED_UPDATE_PROFILE" . 2)
   ("REGISTER_USERID" . 3)
   ("ADD_CONTACT" . 4)
   ("NOTIFIED_ADD_CONTACT" . 5)
   ("BLOCK_CONTACT" . 6)
   ("UNBLOCK_CONTACT" . 7)
   ("NOTIFIED_RECOMMEND_CONTACT" . 8)
   ("CREATE_GROUP" . 9)
   ("UPDATE_GROUP" . 10)
   ("NOTIFIED_UPDATE_GROUP" . 11)
   ("INVITE_INTO_GROUP" . 12)
   ("NOTIFIED_INVITE_INTO_GROUP" . 13)
   ("CANCEL_INVITATION_GROUP" . 31)
   ("NOTIFIED_CANCEL_INVITATION_GROUP" . 32)
   ("LEAVE_GROUP" . 14)
   ("NOTIFIED_LEAVE_GROUP" . 15)
   ("ACCEPT_GROUP_INVITATION" . 16)
   ("NOTIFIED_ACCEPT_GROUP_INVITATION" . 17)
   ("REJECT_GROUP_INVITATION" . 34)
   ("NOTIFIED_REJECT_GROUP_INVITATION" . 35)
   ("KICKOUT_FROM_GROUP" . 18)
   ("NOTIFIED_KICKOUT_FROM_GROUP" . 19)
   ("CREATE_ROOM" . 20)
   ("INVITE_INTO_ROOM" . 21)
   ("NOTIFIED_INVITE_INTO_ROOM" . 22)
   ("LEAVE_ROOM" . 23)
   ("NOTIFIED_LEAVE_ROOM" . 24)
   ("SEND_MESSAGE" . 25)
   ("RECEIVE_MESSAGE" . 26)
   ("SEND_MESSAGE_RECEIPT" . 27)
   ("RECEIVE_MESSAGE_RECEIPT" . 28)
   ("SEND_CONTENT_RECEIPT" . 29)
   ("RECEIVE_ANNOUNCEMENT" . 30)
   ("NOTIFIED_UNREGISTER_USER" . 33)
   ("INVITE_VIA_EMAIL" . 38)
   ("NOTIFIED_REGISTER_USER" . 37)
   ("NOTIFIED_REQUEST_RECOVERY" . 39)
   ("SEND_CHAT_CHECKED" . 40)
   ("SEND_CHAT_REMOVED" . 41)
   ("NOTIFIED_FORCE_SYNC" . 42)
   ("SEND_CONTENT" . 43)
   ("SEND_MESSAGE_MYHOME" . 44)
   ("NOTIFIED_UPDATE_CONTENT_PREVIEW" . 45)
   ("REMOVE_ALL_MESSAGES" . 46)
   ("NOTIFIED_UPDATE_PURCHASES" . 47)
   ("DUMMY" . 48)
   ("UPDATE_CONTACT" . 49)
   ("NOTIFIED_RECEIVED_CALL" . 50)
   ("CANCEL_CALL" . 51)
   ("NOTIFIED_REDIRECT" . 52)
   ("NOTIFIED_CHANNEL_SYNC" . 53)
   ("FAILED_SEND_MESSAGE" . 54)
   ("NOTIFIED_READ_MESSAGE" . 55)
   ("FAILED_EMAIL_CONFIRMATION" . 56)
   ("NOTIFIED_CHAT_CONTENT" . 58)
   ("NOTIFIED_PUSH_NOTICENTER_ITEM" . 59)
   ("NOTIFIED_JOIN_CHAT" . 60)
   ("NOTIFIED_LEAVE_CHAT" . 61)
   ("NOTIFIED_TYPING" . 62)
   ("FRIEND_REQUEST_ACCEPTED" . 63)
   ("DESTROY_MESSAGE" . 64)
   ("NOTIFIED_DESTROY_MESSAGE" . 65)
   ("UPDATE_PUBLICKEYCHAIN" . 66)
   ("NOTIFIED_UPDATE_PUBLICKEYCHAIN" . 67)
   ("NOTIFIED_BLOCK_CONTACT" . 68)
   ("NOTIFIED_UNBLOCK_CONTACT" . 69)
   ("UPDATE_GROUPPREFERENCE" . 70)
   ("NOTIFIED_PAYMENT_EVENT" . 71)
   ("REGISTER_E2EE_PUBLICKEY" . 72)
   ("NOTIFIED_E2EE_KEY_EXCHANGE_REQ" . 73)
   ("NOTIFIED_E2EE_KEY_EXCHANGE_RESP" . 74)
   ("NOTIFIED_E2EE_MESSAGE_RESEND_REQ" . 75)
   ("NOTIFIED_E2EE_MESSAGE_RESEND_RESP" . 76)
   ("NOTIFIED_E2EE_KEY_UPDATE" . 77)
   ("NOTIFIED_BUDDY_UPDATE_PROFILE" . 78)
   ("NOTIFIED_UPDATE_LINEAT_TABS" . 79)
   ("UPDATE_ROOM" . 80)
   ("NOTIFIED_BEACON_DETECTED" . 81)
   ("UPDATE_EXTENDED_PROFILE" . 82)
   ("ADD_FOLLOW" . 83)
   ("NOTIFIED_ADD_FOLLOW" . 84)
   ("DELETE_FOLLOW" . 85)
   ("NOTIFIED_DELETE_FOLLOW" . 86)
   ("UPDATE_TIMELINE_SETTINGS" . 87)
   ("NOTIFIED_FRIEND_REQUEST" . 88)
   ("UPDATE_RINGBACK_TONE" . 89)
   ("NOTIFIED_POSTBACK" . 90)
   ("RECEIVE_READ_WATERMARK" . 91)
   ("NOTIFIED_MESSAGE_DELIVERED" . 92)
   ("NOTIFIED_UPDATE_CHAT_BAR" . 93)
   ("NOTIFIED_CHATAPP_INSTALLED" . 94)
   ("NOTIFIED_CHATAPP_UPDATED" . 95)
   ("NOTIFIED_CHATAPP_NEW_MARK" . 96)
   ("NOTIFIED_CHATAPP_DELETED" . 97)
   ("NOTIFIED_CHATAPP_SYNC" . 98)
   ("NOTIFIED_UPDATE_MESSAGE" . 99)))

(thrift:def-enum "PayloadType"
  (("PAYLOAD_BUY" . 101)
   ("PAYLOAD_CS" . 111)
   ("PAYLOAD_BONUS" . 121)
   ("PAYLOAD_EVENT" . 131)))

(thrift:def-enum "PaymentPgType"
  (("PAYMENT_PG_NONE" . 0)
   ("PAYMENT_PG_AU" . 1)
   ("PAYMENT_PG_AL" . 2)))

(thrift:def-enum "PaymentType"
  (("PAYMENT_APPLE" . 1)
   ("PAYMENT_GOOGLE" . 2)))

(thrift:def-enum "ProductBannerLinkType"
  (("BANNER_LINK_NONE" . 0)
   ("BANNER_LINK_ITEM" . 1)
   ("BANNER_LINK_URL" . 2)
   ("BANNER_LINK_CATEGORY" . 3)))

(thrift:def-enum "ProductEventType"
  (("NO_EVENT" . 0)
   ("CARRIER_ANY" . 65537)
   ("BUDDY_ANY" . 131073)
   ("INSTALL_IOS" . 196609)
   ("INSTALL_ANDROID" . 196610)
   ("MISSION_ANY" . 262145)
   ("MUSTBUY_ANY" . 327681)))

(thrift:def-enum "StickerResourceType"
  (("STATIC" . 1)
   ("ANIMATION" . 2)
   ("SOUND" . 3)
   ("ANIMATION_SOUND" . 4)
   ("POPUP" . 5)
   ("POPUP_SOUND" . 6)))

(thrift:def-enum "PlaceSearchProvider"
  (("GOOGLE" . 0)
   ("BAIDU" . 1)))

(thrift:def-enum "PointErrorCode"
  (("REQUEST_DUPLICATION" . 3001)
   ("INVALID_PARAMETER" . 3002)
   ("NOT_ENOUGH_BALANCE" . 3003)
   ("AUTHENTICATION_FAIL" . 3004)
   ("API_ACCESS_FORBIDDEN" . 3005)
   ("MEMBER_ACCOUNT_NOT_FOUND" . 3006)
   ("SERVICE_ACCOUNT_NOT_FOUND" . 3007)
   ("TRANSACTION_NOT_FOUND" . 3008)
   ("ALREADY_REVERSED_TRANSACTION" . 3009)
   ("MESSAGE_NOT_READABLE" . 3010)
   ("HTTP_REQUEST_METHOD_NOT_SUPPORTED" . 3011)
   ("HTTP_MEDIA_TYPE_NOT_SUPPORTED" . 3012)
   ("NOT_ALLOWED_TO_DEPOSIT" . 3013)
   ("NOT_ALLOWED_TO_PAY" . 3014)
   ("TRANSACTION_ACCESS_FORBIDDEN" . 3015)
   ("INVALID_SERVICE_CONFIGURATION" . 4001)
   ("DCS_COMMUNICATION_FAIL" . 5004)
   ("UPDATE_BALANCE_FAIL" . 5007)
   ("SYSTEM_ERROR" . 5999)
   ("SYSTEM_MAINTENANCE" . 5888)))

(thrift:def-enum "ProfileAttribute"
  (("ALL" . 511)
   ("EMAIL" . 1)
   ("DISPLAY_NAME" . 2)
   ("PHONETIC_NAME" . 4)
   ("PICTURE" . 8)
   ("STATUS_MESSAGE" . 16)
   ("ALLOW_SEARCH_BY_USERID" . 32)
   ("ALLOW_SEARCH_BY_EMAIL" . 64)
   ("BUDDY_STATUS" . 128)
   ("MUSIC_PROFILE" . 256)))

(thrift:def-enum "PublicType"
  (("HIDDEN" . 0)
   ("PUBLIC" . 1000)))

(thrift:def-enum "RedirectType"
  (("NONE" . 0)
   ("EXPIRE_SECOND" . 1)))

(thrift:def-enum "RegistrationType"
  (("PHONE" . 0)
   ("EMAIL_WAP" . 1)
   ("FACEBOOK" . 2305)
   ("SINA" . 2306)
   ("RENREN" . 2307)
   ("FEIXIN" . 2308)))

(thrift:def-enum "ChatRoomAnnouncementType"
  (("MESSAGE" . 0)
   ("NOTE" . 1)))

(thrift:def-enum "SettingsAttribute"
  (("ALL" . 2147483647)
   ("NOTIFICATION_ENABLE" . 1)
   ("NOTIFICATION_MUTE_EXPIRATION" . 2)
   ("NOTIFICATION_NEW_MESSAGE" . 4)
   ("NOTIFICATION_GROUP_INVITATION" . 8)
   ("NOTIFICATION_SHOW_MESSAGE" . 16)
   ("NOTIFICATION_INCOMING_CALL" . 32)
   ("NOTIFICATION_SOUND_MESSAGE" . 256)
   ("NOTIFICATION_SOUND_GROUP" . 512)
   ("NOTIFICATION_DISABLED_WITH_SUB" . 65536)
   ("NOTIFICATION_PAYMENT" . 131072)
   ("PRIVACY_SYNC_CONTACTS" . 64)
   ("PRIVACY_SEARCH_BY_PHONE_NUMBER" . 128)
   ("PRIVACY_SEARCH_BY_USERID" . 8192)
   ("PRIVACY_SEARCH_BY_EMAIL" . 16384)
   ("PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN" . 2097152)
   ("PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME" . 8388608)
   ("PRIVACY_ALLOW_FRIEND_REQUEST" . 1073741824)
   ("PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND" . 33554432)
   ("PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL" . 67108864)
   ("PRIVACY_AGREE_USE_PAIDCALL" . 134217728)
   ("CONTACT_MY_TICKET" . 1024)
   ("IDENTITY_PROVIDER" . 2048)
   ("IDENTITY_IDENTIFIER" . 4096)
   ("SNS_ACCOUNT" . 524288)
   ("PHONE_REGISTRATION" . 1048576)
   ("PREFERENCE_LOCALE" . 32768)
   ("CUSTOM_MODE" . 4194304)
   ("EMAIL_CONFIRMATION_STATUS" . 16777216)
   ("ACCOUNT_MIGRATION_PINCODE" . 268435456)
   ("ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE" . 536870912)
   ("SECURITY_CENTER_SETTINGS" . 262144)))

(thrift:def-enum "SettingsAttributeEx"
  (("NOTIFICATION_ENABLE" . 0)
   ("NOTIFICATION_MUTE_EXPIRATION" . 1)
   ("NOTIFICATION_NEW_MESSAGE" . 2)
   ("NOTIFICATION_GROUP_INVITATION" . 3)
   ("NOTIFICATION_SHOW_MESSAGE" . 4)
   ("NOTIFICATION_INCOMING_CALL" . 5)
   ("NOTIFICATION_SOUND_MESSAGE" . 8)
   ("NOTIFICATION_SOUND_GROUP" . 9)
   ("NOTIFICATION_DISABLED_WITH_SUB" . 16)
   ("NOTIFICATION_PAYMENT" . 17)
   ("NOTIFICATION_MENTION" . 40)
   ("NOTIFICATION_THUMBNAIL" . 45)
   ("PRIVACY_SYNC_CONTACTS" . 6)
   ("PRIVACY_SEARCH_BY_PHONE_NUMBER" . 7)
   ("PRIVACY_SEARCH_BY_USERID" . 13)
   ("PRIVACY_SEARCH_BY_EMAIL" . 14)
   ("PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN" . 21)
   ("PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME" . 23)
   ("PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME" . 35)
   ("PRIVACY_ALLOW_FRIEND_REQUEST" . 30)
   ("PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND" . 25)
   ("PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL" . 26)
   ("PRIVACY_AGREE_USE_PAIDCALL" . 27)
   ("CONTACT_MY_TICKET" . 10)
   ("IDENTITY_PROVIDER" . 11)
   ("IDENTITY_IDENTIFIER" . 12)
   ("SNS_ACCOUNT" . 19)
   ("PHONE_REGISTRATION" . 20)
   ("PREFERENCE_LOCALE" . 15)
   ("CUSTOM_MODE" . 22)
   ("EMAIL_CONFIRMATION_STATUS" . 24)
   ("ACCOUNT_MIGRATION_PINCODE" . 28)
   ("ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE" . 29)
   ("SECURITY_CENTER_SETTINGS" . 18)
   ("E2EE_ENABLE" . 33)
   ("ENABLE_SOUND_TO_TEXT" . 47)
   ("HITOKOTO_BACKUP_REQUESTED" . 34)
   ("CONTACT_ALLOW_FOLLOWING" . 36)
   ("PRIVACY_ALLOW_NEARBY" . 37)
   ("AGREEMENT_NEARBY" . 38)
   ("AGREEMENT_SQUARE" . 39)
   ("ALLOW_UNREGISTRATION_SECONDARY_DEVICE" . 41)
   ("AGREEMENT_BOT_USE" . 42)
   ("AGREEMENT_SHAKE_FUNCTION" . 43)
   ("AGREEMENT_MOBILE_CONTACT_NAME" . 44)
   ("AGREEMENT_SOUND_TO_TEXT" . 46)))

(thrift:def-enum "SnsIdType"
  (("FACEBOOK" . 1)
   ("SINA" . 2)
   ("RENREN" . 3)
   ("FEIXIN" . 4)
   ("BBM" . 5)))

(thrift:def-enum "SpammerReason"
  (("OTHER" . 0)
   ("ADVERTISING" . 1)
   ("GENDER_HARASSMENT" . 2)
   ("HARASSMENT" . 3)))

(thrift:def-enum "SyncActionType"
  (("SYNC" . 0)
   ("REPORT" . 1)))

(thrift:def-enum "SpotCategory"
  (("UNKNOWN" . 0)
   ("GOURMET" . 1)
   ("BEAUTY" . 2)
   ("TRAVEL" . 3)
   ("SHOPPING" . 4)
   ("ENTERTAINMENT" . 5)
   ("SPORTS" . 6)
   ("TRANSPORT" . 7)
   ("LIFE" . 8)
   ("HOSPITAL" . 9)
   ("FINANCE" . 10)
   ("EDUCATION" . 11)
   ("OTHER" . 12)
   ("ALL" . 10000)))

(thrift:def-enum "SyncCategory"
  (("PROFILE" . 0)
   ("SETTINGS" . 1)
   ("OPS" . 2)
   ("CONTACT" . 3)
   ("RECOMMEND" . 4)
   ("BLOCK" . 5)
   ("GROUP" . 6)
   ("ROOM" . 7)
   ("NOTIFICATION" . 8)
   ("ADDRESS_BOOK" . 9)))

(thrift:def-enum "TMessageBoxStatus"
  (("ACTIVATED" . 1)
   ("UNREAD" . 2)))

(thrift:def-enum "UniversalNotificationServiceErrorCode"
  (("INTERNAL_ERROR" . 0)
   ("INVALID_KEY" . 1)
   ("ILLEGAL_ARGUMENT" . 2)
   ("TOO_MANY_REQUEST" . 3)
   ("AUTHENTICATION_FAILED" . 4)
   ("NO_WRITE_PERMISSION" . 5)))

(thrift:def-enum "UnregistrationReason"
  (("UNREGISTRATION_REASON_UNREGISTER_USER" . 1)
   ("UNREGISTRATION_REASON_UNBIND_DEVICE" . 2)))

(thrift:def-enum "UserAgeType"
  (("OVER" . 1)
   ("UNDER" . 2)
   ("UNDEFINED" . 3)))

(thrift:def-enum "VerificationMethod"
  (("NO_AVAILABLE" . 0)
   ("PIN_VIA_SMS" . 1)
   ("CALLERID_INDIGO" . 2)
   ("PIN_VIA_TTS" . 4)
   ("SKIP" . 10)))

(thrift:def-enum "VerificationResult"
  (("FAILED" . 0)
   ("OK_NOT_REGISTERED_YET" . 1)
   ("OK_REGISTERED_WITH_SAME_DEVICE" . 2)
   ("OK_REGISTERED_WITH_ANOTHER_DEVICE" . 3)))

(thrift:def-enum "WapInvitationType"
  (("REGISTRATION" . 1)
   ("CHAT" . 2)))

(thrift:def-enum "MediaType"
  (("AUDIO" . 1)
   ("VIDEO" . 2)))

(thrift:def-enum "SQErrorCode"
  (("UNKNOWN" . 0)
   ("ILLEGAL_ARGUMENT" . 400)
   ("AUTHENTICATION_FAILURE" . 401)
   ("FORBIDDEN" . 403)
   ("NOT_FOUND" . 404)
   ("REVISION_MISMATCH" . 409)
   ("PRECONDITION_FAILED" . 410)
   ("INTERNAL_ERROR" . 500)
   ("NOT_IMPLEMENTED" . 501)
   ("TRY_AGAIN_LATER" . 505)))

(thrift:def-enum "SquareEventType"
  (("RECEIVE_MESSAGE" . 0)
   ("SEND_MESSAGE" . 1)
   ("NOTIFIED_JOIN_SQUARE_CHAT" . 2)
   ("NOTIFIED_INVITE_INTO_SQUARE_CHAT" . 3)
   ("NOTIFIED_LEAVE_SQUARE_CHAT" . 4)
   ("NOTIFIED_DESTROY_MESSAGE" . 5)
   ("NOTIFIED_MARK_AS_READ" . 6)
   ("NOTIFIED_UPDATE_SQUARE_MEMBER_PROFILE" . 7)
   ("NOTIFIED_KICKOUT_FROM_SQUARE" . 19)
   ("NOTIFIED_SHUTDOWN_SQUARE" . 18)
   ("NOTIFIED_DELETE_SQUARE_CHAT" . 20)
   ("NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_NAME" . 30)
   ("NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_IMAGE" . 31)
   ("NOTIFIED_UPDATE_SQUARE_CHAT_ANNOUNCEMENT" . 37)
   ("NOTIFIED_ADD_BOT" . 33)
   ("NOTIFIED_REMOVE_BOT" . 34)
   ("NOTIFIED_UPDATE_SQUARE" . 8)
   ("NOTIFIED_UPDATE_SQUARE_STATUS" . 9)
   ("NOTIFIED_UPDATE_SQUARE_AUTHORITY" . 10)
   ("NOTIFIED_UPDATE_SQUARE_MEMBER" . 11)
   ("NOTIFIED_UPDATE_SQUARE_CHAT" . 12)
   ("NOTIFIED_UPDATE_SQUARE_CHAT_STATUS" . 13)
   ("NOTIFIED_UPDATE_SQUARE_CHAT_MEMBER" . 14)
   ("NOTIFIED_CREATE_SQUARE_MEMBER" . 15)
   ("NOTIFIED_CREATE_SQUARE_CHAT_MEMBER" . 16)
   ("NOTIFIED_UPDATE_SQUARE_MEMBER_RELATION" . 17)
   ("NOTIFIED_UPDATE_SQUARE_FEATURE_SET" . 32)
   ("NOTIFIED_UPDATE_SQUARE_NOTE_STATUS" . 36)
   ("NOTIFICATION_JOIN_REQUEST" . 21)
   ("NOTIFICATION_JOINED" . 22)
   ("NOTIFICATION_PROMOTED_COADMIN" . 23)
   ("NOTIFICATION_PROMOTED_ADMIN" . 24)
   ("NOTIFICATION_DEMOTED_MEMBER" . 25)
   ("NOTIFICATION_KICKED_OUT" . 26)
   ("NOTIFICATION_SQUARE_DELETE" . 27)
   ("NOTIFICATION_SQUARE_CHAT_DELETE" . 28)
   ("NOTIFICATION_MESSAGE" . 29)))

(thrift:def-enum "SquareMemberRelationState"
  (("NONE" . 1)
   ("BLOCKED" . 2)))

(thrift:def-enum "SquareFeatureControlState"
  (("DISABLED" . 1)
   ("ENABLED" . 2)))

(thrift:def-enum "BooleanState"
  (("NONE" . 0)
   ("OFF" . 1)
   ("ON" . 2)))

(thrift:def-enum "SquareType"
  (("CLOSED" . 0)
   ("OPEN" . 1)))

(thrift:def-enum "SquareChatType"
  (("OPEN" . 1)
   ("SECRET" . 2)
   ("ONE_ON_ONE" . 3)
   ("SQUARE_DEFAULT" . 4)))

(thrift:def-enum "SquareErrorCode"
  (("UNKNOWN" . 0)
   ("INTERNAL_ERROR" . 500)
   ("NOT_IMPLEMENTED" . 501)
   ("TRY_AGAIN_LATER" . 503)
   ("MAINTENANCE" . 505)
   ("ILLEGAL_ARGUMENT" . 400)
   ("AUTHENTICATION_FAILURE" . 401)
   ("FORBIDDEN" . 403)
   ("NOT_FOUND" . 404)
   ("REVISION_MISMATCH" . 409)
   ("PRECONDITION_FAILED" . 410)))

(thrift:def-enum "SquareChatState"
  (("ALIVE" . 0)
   ("DELETED" . 1)
   ("SUSPENDED" . 2)))

(thrift:def-enum "SquareFeatureSetAttribute"
  (("CREATING_SECRET_SQUARE_CHAT" . 1)
   ("INVITING_INTO_OPEN_SQUARE_CHAT" . 2)))

(thrift:def-enum "SquareMembershipState"
  (("JOIN_REQUESTED" . 1)
   ("JOINED" . 2)
   ("REJECTED" . 3)
   ("LEFT" . 4)
   ("KICK_OUT" . 5)
   ("BANNED" . 6)
   ("DELETED" . 7)))

(thrift:def-enum "SquareChatMemberAttribute"
  (("MEMBERSHIP_STATE" . 4)
   ("NOTIFICATION_MESSAGE" . 6)))

(thrift:def-enum "SquareMemberRole"
  (("ADMIN" . 1)
   ("CO_ADMIN" . 2)
   ("MEMBER" . 10)))

(thrift:def-enum "PreconditionFailedExtraInfo"
  (("DUPLICATED_DISPLAY_NAME" . 0)))

(thrift:def-enum "SquareChatMembershipState"
  (("JOINED" . 1)
   ("LEFT" . 2)))

(thrift:def-enum "FetchDirection"
  (("FORWARD" . 1)
   ("BACKWARD" . 2)))

(thrift:def-enum "SquareAttribute"
  (("NAME" . 1)
   ("WELCOME_MESSAGE" . 2)
   ("PROFILE_IMAGE" . 3)
   ("DESCRIPTION" . 4)
   ("SEARCHABLE" . 6)
   ("CATEGORY" . 7)
   ("INVITATION_URL" . 8)
   ("ABLE_TO_USE_INVITATION_URL" . 9)
   ("STATE" . 10)))

(thrift:def-enum "SquareAuthorityAttribute"
  (("UPDATE_SQUARE_PROFILE" . 1)
   ("INVITE_NEW_MEMBER" . 2)
   ("APPROVE_JOIN_REQUEST" . 3)
   ("CREATE_POST" . 4)
   ("CREATE_OPEN_SQUARE_CHAT" . 5)
   ("DELETE_SQUARE_CHAT_OR_POST" . 6)
   ("REMOVE_SQUARE_MEMBER" . 7)
   ("GRANT_ROLE" . 8)
   ("ENABLE_INVITATION_TICKET" . 9)
   ("CREATE_CHAT_ANNOUNCEMENT" . 10)))

(thrift:def-enum "SquareEventStatus"
  (("NORMAL" . 1)
   ("ALERT_DISABLED" . 2)))

(thrift:def-enum "SuggestDictionaryIncrementStatus"
  (("SUCCESS" . 0)
   ("INVALID_REVISION" . 1)
   ("TOO_LARGE_DATA" . 2)
   ("SCHEME_CHANGED" . 3)
   ("RETRY" . 4)
   ("FAIL" . 5)
   ("TOO_OLD_DATA" . 6)))

(thrift:def-struct "location"
  (("title" nil :id 1 :type string)
   ("address" nil :id 2 :type string)
   ("latitude" nil :id 3 :type double)
   ("longitude" nil :id 4 :type double)
   ("phone" nil :id 5 :type string)))

(thrift:def-struct "messageboxv2messageid"
  (("deliveredTime" nil :id 1 :type i64)
   ("messageId" nil :id 2 :type i64)))

(thrift:def-struct "messagecommitresult"
  (("requestId" nil :id 1 :type string)
   ("state" nil :id 2 :type (enum "BuddyResultState"))
   ("messageStoreRequestId" nil :id 3 :type string)
   ("messageIds" nil :id 4 :type (thrift:list string))
   ("receiverCount" nil :id 11 :type i64)
   ("successCount" nil :id 12 :type i64)
   ("failCount" nil :id 13 :type i64)
   ("blockCount" nil :id 14 :type i64)
   ("unregisteredCount" nil :id 15 :type i64)
   ("unrelatedCount" nil :id 16 :type i64)
   ("errorDescription" nil :id 21 :type string)))

(thrift:def-struct "callhost"
  (("host" nil :id 1 :type string)
   ("port" nil :id 2 :type i32)
   ("zone" nil :id 3 :type string)))

(thrift:def-struct "agecheckdocomoresult"
  (("authUrl" nil :id 1 :type string)
   ("userAgeType" nil :id 2 :type (enum "UserAgeType"))))

(thrift:def-struct "agecheckrequestresult"
  (("authUrl" nil :id 1 :type string)
   ("sessionId" nil :id 2 :type string)))

(thrift:def-struct "textmessageannouncementcontents"
  (("messageId" nil :id 1 :type string)
   ("text" nil :id 2 :type string)
   ("senderSquareMemberMid" nil :id 3 :type string)
   ("createdAt" nil :id 4 :type i64)))

(thrift:def-struct "squarechatannouncementcontents"
  (("textMessageAnnouncementContents" nil :id 1 :type (struct "textmessageannouncementcontents"))))

(thrift:def-struct "squarechatannouncement"
  (("announcementSeq" nil :id 1 :type i64)
   ("type" nil :id 2 :type (enum "SquareChatAnnouncementType"))
   ("contents" nil :id 3 :type (struct "squarechatannouncementcontents"))))

(thrift:def-struct "announcement"
  (("index" nil :id 1 :type i32)
   ("forceUpdate" nil :id 10 :type bool)
   ("title" nil :id 11 :type string)
   ("text" nil :id 12 :type string)
   ("createdTime" nil :id 13 :type i64)
   ("pictureUrl" nil :id 14 :type string)
   ("thumbnailUrl" nil :id 15 :type string)))

(thrift:def-struct "channelprovider"
  (("name" nil :id 1 :type string)))

(thrift:def-struct "e2eepublickey"
  (("version" nil :id 1 :type i32)
   ("keyId" nil :id 2 :type i32)
   ("keyData" nil :id 4 :type binary)
   ("createdTime" nil :id 5 :type i64)))

(thrift:def-struct "channeldomain"
  (("host" nil :id 1 :type string)
   ("removed" nil :id 2 :type bool)))

(thrift:def-struct "e2eenegotiationresult"
  (("allowedTypes" nil :id 1 :type (thrift:set (enum "ContentType")))
   ("publicKey" nil :id 2 :type (struct "e2eepublickey"))))

(thrift:def-struct "otpresult"
  (("otpId" nil :id 1 :type string)
   ("otp" nil :id 2 :type string)))

(thrift:def-struct "square"
  (("mid" nil :id 1 :type string)
   ("name" nil :id 2 :type string)
   ("welcomeMessage" nil :id 3 :type string)
   ("profileImageObsHash" nil :id 4 :type string)
   ("desc" nil :id 5 :type string)
   ("searchable" nil :id 6 :type bool)
   ("type" nil :id 7 :type (enum "SquareType"))
   ("categoryID" nil :id 8 :type i32)
   ("invitationURL" nil :id 9 :type string)
   ("revision" nil :id 10 :type i64)
   ("ableToUseInvitationTicket" nil :id 11 :type bool)
   ("state" nil :id 12 :type (enum "SquareState"))))

(thrift:def-struct "squareauthority"
  (("squareMid" nil :id 1 :type string)
   ("updateSquareProfile" nil :id 2 :type (enum "SquareMemberRole"))
   ("inviteNewMember" nil :id 3 :type (enum "SquareMemberRole"))
   ("approveJoinRequest" nil :id 4 :type (enum "SquareMemberRole"))
   ("createPost" nil :id 5 :type (enum "SquareMemberRole"))
   ("createOpenSquareChat" nil :id 6 :type (enum "SquareMemberRole"))
   ("deleteSquareChatOrPost" nil :id 7 :type (enum "SquareMemberRole"))
   ("removeSquareMember" nil :id 8 :type (enum "SquareMemberRole"))
   ("grantRole" nil :id 9 :type (enum "SquareMemberRole"))
   ("enableInvitationTicket" nil :id 10 :type (enum "SquareMemberRole"))
   ("revision" nil :id 11 :type i64)))

(thrift:def-struct "squarepreference"
  (("favoriteTimestamp" nil :id 1 :type i64)
   ("notiForNewJoinRequest" nil :id 2 :type bool)))

(thrift:def-struct "squaremember"
  (("squareMemberMid" nil :id 1 :type string)
   ("squareMid" nil :id 2 :type string)
   ("displayName" nil :id 3 :type string)
   ("profileImageObsHash" nil :id 4 :type string)
   ("ableToReceiveMessage" nil :id 5 :type bool)
   ("membershipState" nil :id 7 :type (enum "SquareMembershipState"))
   ("role" nil :id 8 :type (enum "SquareMemberRole"))
   ("revision" nil :id 9 :type i64)
   ("preference" nil :id 10 :type (struct "squarepreference"))
   ("joinMessage" nil :id 11 :type string)))

(thrift:def-struct "squarememberrelation"
  (("state" nil :id 1 :type (enum "SquareMemberRelationState"))
   ("revision" nil :id 2 :type i64)))

(thrift:def-struct "squarefeature"
  (("controlState" nil :id 1 :type (enum "SquareFeatureControlState"))
   ("booleanValue" nil :id 2 :type (enum "BooleanState"))))

(thrift:def-struct "squarefeatureset"
  (("squareMid" nil :id 1 :type string)
   ("revision" nil :id 2 :type i64)
   ("creatingSecretSquareChat" nil :id 11 :type (struct "squarefeature"))
   ("invitingIntoOpenSquareChat" nil :id 12 :type (struct "squarefeature"))))

(thrift:def-struct "squarestatus"
  (("memberCount" nil :id 1 :type i32)
   ("joinRequestCount" nil :id 2 :type i32)
   ("lastJoinRequestAt" nil :id 3 :type i64)
   ("openChatCount" nil :id 4 :type i32)))

(thrift:def-struct "squarechat"
  (("squareChatMid" nil :id 1 :type string)
   ("squareMid" nil :id 2 :type string)
   ("type" nil :id 3 :type (enum "SquareChatType"))
   ("name" nil :id 4 :type string)
   ("chatImageObsHash" nil :id 5 :type string)
   ("squareChatRevision" nil :id 6 :type i64)
   ("maxMemberCount" nil :id 7 :type i32)
   ("state" nil :id 8 :type (enum "SquareChatState"))))

(thrift:def-struct "notestatus"
  (("noteCount" nil :id 1 :type i32)
   ("latestCreatedAt" nil :id 2 :type i64)))

(thrift:def-struct "squareinfo"
  (("square" nil :id 1 :type (struct "square"))
   ("squareStatus" nil :id 2 :type (struct "squarestatus"))
   ("squareNoteStatus" nil :id 3 :type (struct "notestatus"))))

(thrift:def-struct "botuseinfo"
  (("botUseAgreementAccepted" nil :id 1 :type bool)
   ("botInFriends" nil :id 2 :type bool)
   ("primaryApplication" nil :id 3 :type string)
   ("locale" nil :id 4 :type string)))

(thrift:def-struct "paidcalladcountry"
  (("countryCode" nil :id 1 :type string)
   ("rateDivision" nil :id 2 :type string)))

(thrift:def-struct "paidcalladresult"
  (("adRemains" nil :id 1 :type i32)))

(thrift:def-struct "paidcallbalance"
  (("productType" nil :id 1 :type (enum "PaidCallProductType"))
   ("productName" nil :id 2 :type string)
   ("unit" nil :id 3 :type string)
   ("limitedPaidBalance" nil :id 4 :type i32)
   ("limitedFreeBalance" nil :id 5 :type i32)
   ("unlimitedPaidBalance" nil :id 6 :type i32)
   ("unlimitedFreeBalance" nil :id 7 :type i32)
   ("startTime" nil :id 8 :type i64)
   ("endTime" nil :id 9 :type i64)
   ("autopayEnabled" nil :id 10 :type bool)))

(thrift:def-struct "paidcallcurrencyexchangerate"
  (("currencyCode" nil :id 1 :type string)
   ("currencyName" nil :id 2 :type string)
   ("currencySign" nil :id 3 :type string)
   ("preferred" nil :id 4 :type bool)
   ("coinRate" nil :id 5 :type string)
   ("creditRate" nil :id 6 :type string)))

(thrift:def-struct "extendedprofilebirthday"
  (("year" nil :id 1 :type string)
   ("yearPrivacyLevelType" nil :id 2 :type (enum "PrivacyLevelType"))
   ("yearEnabled" nil :id 3 :type bool)
   ("day" nil :id 5 :type string)
   ("dayPrivacyLevelType" nil :id 6 :type (enum "PrivacyLevelType"))
   ("dayEnabled" nil :id 7 :type bool)))

(thrift:def-struct "extendedprofile"
  (("birthday" nil :id 1 :type (struct "extendedprofilebirthday"))))

(thrift:def-struct "paidcalldialing"
  (("type" nil :id 1 :type (enum "PaidCallType"))
   ("dialedNumber" nil :id 2 :type string)
   ("serviceDomain" nil :id 3 :type string)
   ("productType" nil :id 4 :type (enum "PaidCallProductType"))
   ("productName" nil :id 5 :type string)
   ("multipleProduct" nil :id 6 :type bool)
   ("callerIdStatus" nil :id 7 :type (enum "PaidCallerIdStatus"))
   ("balance" nil :id 10 :type i32)
   ("unit" nil :id 11 :type string)
   ("rate" nil :id 12 :type i32)
   ("displayCode" nil :id 13 :type string)
   ("calledNumber" nil :id 14 :type string)
   ("calleeNationalNumber" nil :id 15 :type string)
   ("calleeCallingCode" nil :id 16 :type string)
   ("rateDivision" nil :id 17 :type string)
   ("adMaxMin" nil :id 20 :type i32)
   ("adRemains" nil :id 21 :type i32)
   ("adSessionId" nil :id 22 :type string)))

(thrift:def-struct "spotitem"
  (("name" nil :id 2 :type string)
   ("phone" nil :id 3 :type string)
   ("category" nil :id 4 :type (enum "SpotCategory"))
   ("mid" nil :id 5 :type string)
   ("countryAreaCode" nil :id 6 :type string)
   ("freePhoneCallable" nil :id 10 :type bool)))

(thrift:def-struct "spotnearbyitem"
  (("spotItem" nil :id 2 :type (struct "spotitem"))
   ("location" nil :id 11 :type (struct "location"))))

(thrift:def-struct "spotnearbyresponse"
  (("spotNearbyItems" nil :id 1 :type (thrift:list (struct "spotnearbyitem")))))

(thrift:def-struct "spotphonenumberresponse"
  (("spotItems" nil :id 1 :type (thrift:list (struct "spotitem")))))

(thrift:def-struct "paidcallhistory"
  (("seq" nil :id 1 :type i64)
   ("type" nil :id 2 :type (enum "PaidCallType"))
   ("dialedNumber" nil :id 3 :type string)
   ("calledNumber" nil :id 4 :type string)
   ("toMid" nil :id 5 :type string)
   ("toName" nil :id 6 :type string)
   ("setupTime" nil :id 7 :type i64)
   ("startTime" nil :id 8 :type i64)
   ("endTime" nil :id 9 :type i64)
   ("duration" nil :id 10 :type i64)
   ("terminate" nil :id 11 :type i32)
   ("productType" nil :id 12 :type (enum "PaidCallProductType"))
   ("charge" nil :id 13 :type i32)
   ("unit" nil :id 14 :type string)
   ("result" nil :id 15 :type string)))

(thrift:def-struct "paidcallhistoryresult"
  (("historys" nil :id 1 :type (thrift:list (struct "paidcallhistory")))
   ("hasNext" nil :id 2 :type bool)))

(thrift:def-struct "paidcallmetadataresult"
  (("currencyExchangeRates" nil :id 1 :type (thrift:list (struct "paidcallcurrencyexchangerate")))
   ("recommendedCountryCodes" nil :id 2 :type (thrift:list string))
   ("adCountries" nil :id 3 :type (thrift:list (struct "paidcalladcountry")))))

(thrift:def-struct "paidcallredeemresult"
  (("eventName" nil :id 1 :type string)
   ("eventAmount" nil :id 2 :type i32)))

(thrift:def-struct "paidcallresponse"
  (("host" nil :id 1 :type (struct "callhost"))
   ("dialing" nil :id 2 :type (struct "paidcalldialing"))
   ("token" nil :id 3 :type string)
   ("spotItems" nil :id 4 :type (thrift:list (struct "spotitem")))))

(thrift:def-struct "paidcalluserrate"
  (("countryCode" nil :id 1 :type string)
   ("rate" nil :id 2 :type i32)
   ("rateDivision" nil :id 3 :type string)
   ("rateName" nil :id 4 :type string)))

(thrift:def-struct "channelinfo"
  (("channelId" nil :id 1 :type string)
   ("name" nil :id 3 :type string)
   ("entryPageUrl" nil :id 4 :type string)
   ("descriptionText" nil :id 5 :type string)
   ("provider" nil :id 6 :type (struct "channelprovider"))
   ("publicType" nil :id 7 :type (enum "PublicType"))
   ("iconImage" nil :id 8 :type string)
   ("permissions" nil :id 9 :type (thrift:list string))
   ("iconThumbnailImage" nil :id 11 :type string)
   ("channelConfigurations" nil :id 12 :type (thrift:list (enum "ChannelConfiguration")))
   ("lcsAllApiUsable" nil :id 13 :type bool)
   ("allowedPermissions" nil :id 14 :type (thrift:set (enum "ChannelPermission")))
   ("channelDomains" nil :id 15 :type (thrift:list (struct "channeldomain")))
   ("updatedTimestamp" nil :id 16 :type i64)))

(thrift:def-struct "approvedchannelinfo"
  (("channelInfo" nil :id 1 :type (struct "channelinfo"))
   ("approvedAt" nil :id 2 :type i64)))

(thrift:def-struct "approvedchannelinfos"
  (("approvedChannelInfos" nil :id 1 :type (thrift:list (struct "approvedchannelinfo")))
   ("revision" nil :id 2 :type i64)))

(thrift:def-struct "authqrcode"
  (("qrcode" nil :id 1 :type string)
   ("verifier" nil :id 2 :type string)
   ("callbackUrl" nil :id 3 :type string)))

(thrift:def-struct "analyticsinfo"
  (("gaSamplingRate" nil :id 1 :type double)
   ("tmid" nil :id 2 :type string)))

(thrift:def-struct "contacttransition"
  (("ownerMid" nil :id 1 :type string)
   ("targetMid" nil :id 2 :type string)
   ("previousStatus" nil :id 3 :type (enum "ContactStatus"))
   ("resultStatus" nil :id 4 :type (enum "ContactStatus"))))

(thrift:def-struct "userticketresponse"
  (("mid" nil :id 1 :type string)
   ("userTicket" nil :id 2 :type string)))

(thrift:def-struct "buddybanner"
  (("buddyBannerLinkType" nil :id 1 :type (enum "BuddyBannerLinkType"))
   ("buddyBannerLink" nil :id 2 :type string)
   ("buddyBannerImageUrl" nil :id 3 :type string)))

(thrift:def-struct "buddydetail"
  (("mid" nil :id 1 :type string)
   ("memberCount" nil :id 2 :type i64)
   ("onAir" nil :id 3 :type bool)
   ("businessAccount" nil :id 4 :type bool)
   ("addable" nil :id 5 :type bool)
   ("acceptableContentTypes" nil :id 6 :type (thrift:set (enum "ContentType")))
   ("capableMyhome" nil :id 7 :type bool)))

(thrift:def-struct "contact"
  (("mid" nil :id 1 :type string)
   ("createdTime" nil :id 2 :type i64)
   ("type" nil :id 10 :type (enum "ContactType"))
   ("status" nil :id 11 :type (enum "ContactStatus"))
   ("relation" nil :id 21 :type (enum "ContactRelation"))
   ("displayName" nil :id 22 :type string)
   ("phoneticName" nil :id 23 :type string)
   ("pictureStatus" nil :id 24 :type string)
   ("thumbnailUrl" nil :id 25 :type string)
   ("statusMessage" nil :id 26 :type string)
   ("displayNameOverridden" nil :id 27 :type string)
   ("favoriteTime" nil :id 28 :type i64)
   ("capableVoiceCall" nil :id 31 :type bool)
   ("capableVideoCall" nil :id 32 :type bool)
   ("capableMyhome" nil :id 33 :type bool)
   ("capableBuddy" nil :id 34 :type bool)
   ("attributes" nil :id 35 :type i32)
   ("settings" nil :id 36 :type i64)
   ("picturePath" nil :id 37 :type string)
   ("recommendParams" nil :id 38 :type string)
   ("friendRequestStatus" nil :id 39 :type (enum "FriendRequestStatus"))
   ("musicProfile" nil :id 40 :type string)
   ("videoProfile" nil :id 42 :type string)))

(thrift:def-struct "buddylist"
  (("classification" nil :id 1 :type string)
   ("displayName" nil :id 2 :type string)
   ("totalBuddyCount" nil :id 3 :type i32)
   ("popularContacts" nil :id 4 :type (thrift:list (struct "contact")))))

(thrift:def-struct "registerwithphonenumberresult"
  (("authToken" nil :id 1 :type string)
   ("recommendEmailRegistration" nil :id 2 :type bool)
   ("certificate" nil :id 3 :type string)))

(thrift:def-struct "buddymessagerequest"
  (("contentType" nil :id 1 :type (enum "ContentType"))
   ("text" nil :id 2 :type string)
   ("location" nil :id 3 :type (struct "location"))
   ("content" nil :id 4 :type binary)
   ("contentMetadata" nil :id 5 :type (thrift:map string string))))

(thrift:def-struct "buddyonairurls"
  (("hls" nil :id 1 :type (thrift:map string string))
   ("smoothStreaming" nil :id 2 :type (thrift:map string string))))

(thrift:def-struct "buddyonair"
  (("mid" nil :id 1 :type string)
   ("freshnessLifetime" nil :id 3 :type i64)
   ("onAirId" nil :id 4 :type string)
   ("onAir" nil :id 5 :type bool)
   ("text" nil :id 11 :type string)
   ("viewerCount" nil :id 12 :type i64)
   ("targetCount" nil :id 13 :type i64)
   ("onAirType" nil :id 31 :type (enum "BuddyOnAirType"))
   ("onAirUrls" nil :id 32 :type (struct "buddyonairurls"))))

(thrift:def-struct "buddyprofile"
  (("buddyId" nil :id 1 :type string)
   ("mid" nil :id 2 :type string)
   ("searchId" nil :id 3 :type string)
   ("displayName" nil :id 4 :type string)
   ("statusMessage" nil :id 5 :type string)
   ("contactCount" nil :id 11 :type i64)))

(thrift:def-struct "commitmessageresult"
  (("message" nil :id 1 :type (struct "message"))
   ("code" nil :id 2 :type (enum "CommitMessageResultCode"))
   ("reason" nil :id 3 :type string)
   ("successCount" nil :id 4 :type i64)
   ("failCount" nil :id 5 :type i64)
   ("unregisterCount" nil :id 6 :type i64)
   ("blockCount" nil :id 7 :type i64)))

(thrift:def-struct "buddysearchresult"
  (("mid" nil :id 1 :type string)
   ("displayName" nil :id 2 :type string)
   ("pictureStatus" nil :id 3 :type string)
   ("picturePath" nil :id 4 :type string)
   ("statusMessage" nil :id 5 :type string)
   ("businessAccount" nil :id 6 :type bool)))

(thrift:def-struct "syncparammid"
  (("mid" nil :id 1 :type string)
   ("diff" nil :id 2 :type (enum "Diff"))
   ("revision" nil :id 3 :type i64)))

(thrift:def-struct "siminfo"
  (("phoneNumber" nil :id 1 :type string)
   ("countryCode" nil :id 2 :type string)))

(thrift:def-struct "syncparamcontact"
  (("syncParamMid" nil :id 1 :type (struct "syncparammid"))
   ("contactStatus" nil :id 2 :type (enum "ContactStatus"))))

(thrift:def-struct "channeldomains"
  (("channelDomains" nil :id 1 :type (thrift:list (struct "channeldomain")))
   ("revision" nil :id 2 :type i64)))

(thrift:def-struct "productcategory"
  (("productCategoryId" nil :id 1 :type i64)
   ("title" nil :id 2 :type string)
   ("productCount" nil :id 3 :type i32)
   ("newFlag" nil :id 4 :type bool)))

(thrift:def-struct "channelinfos"
  (("channelInfos" nil :id 1 :type (thrift:list (struct "channelinfo")))
   ("revision" nil :id 2 :type i64)))

(thrift:def-struct "channelnotificationsetting"
  (("channelId" nil :id 1 :type string)
   ("name" nil :id 2 :type string)
   ("notificationReceivable" nil :id 3 :type bool)
   ("messageReceivable" nil :id 4 :type bool)
   ("showDefault" nil :id 5 :type bool)))

(thrift:def-struct "channelsyncdatas"
  (("channelInfos" nil :id 1 :type (thrift:list (struct "channelinfo")))
   ("channelDomains" nil :id 2 :type (thrift:list (struct "channeldomain")))
   ("revision" nil :id 3 :type i64)
   ("expires" nil :id 4 :type i64)))

(thrift:def-struct "noticentereventdata"
  (("id" nil :id 1 :type string)
   ("to" nil :id 2 :type string)
   ("from_" nil :id 3 :type string)
   ("toChannel" nil :id 4 :type string)
   ("fromChannel" nil :id 5 :type string)
   ("eventType" nil :id 6 :type string)
   ("createdTime" nil :id 7 :type i64)
   ("operationRevision" nil :id 8 :type i64)
   ("content" nil :id 9 :type (thrift:map string string))
   ("push" nil :id 10 :type (thrift:map string string))))

(thrift:def-struct "channeltoken"
  (("token" nil :id 1 :type string)
   ("obsToken" nil :id 2 :type string)
   ("expiration" nil :id 3 :type i64)
   ("refreshToken" nil :id 4 :type string)
   ("channelAccessToken" nil :id 5 :type string)))

(thrift:def-struct "channelsettings"
  (("unapprovedMessageReceivable" nil :id 1 :type bool)))

(thrift:def-struct "channelidwithlastupdated"
  (("channelId" nil :id 1 :type string)
   ("lastUpdated" nil :id 2 :type i64)))

(thrift:def-struct "coin"
  (("freeCoinBalance" nil :id 1 :type i32)
   ("payedCoinBalance" nil :id 2 :type i32)
   ("totalCoinBalance" nil :id 3 :type i32)
   ("rewardCoinBalance" nil :id 4 :type i32)))

(thrift:def-struct "coinpayload"
  (("payCoin" nil :id 1 :type i32)
   ("freeCoin" nil :id 2 :type i32)
   ("type" nil :id 3 :type (enum "PayloadType"))
   ("rewardCoin" nil :id 4 :type i32)))

(thrift:def-struct "coinhistory"
  (("payDate" nil :id 1 :type i64)
   ("coinBalance" nil :id 2 :type i32)
   ("coin" nil :id 3 :type i32)
   ("price" nil :id 4 :type string)
   ("title" nil :id 5 :type string)
   ("refund" nil :id 6 :type bool)
   ("paySeq" nil :id 7 :type string)
   ("currency" nil :id 8 :type string)
   ("currencySign" nil :id 9 :type string)
   ("displayPrice" nil :id 10 :type string)
   ("payload" nil :id 11 :type (struct "coinpayload"))
   ("channelId" nil :id 12 :type string)))

(thrift:def-struct "coinhistorycondition"
  (("start" nil :id 1 :type i64)
   ("size" nil :id 2 :type i32)
   ("language" nil :id 3 :type string)
   ("eddt" nil :id 4 :type string)
   ("appStoreCode" nil :id 5 :type (enum "PaymentType"))))

(thrift:def-struct "coinhistoryresult"
  (("historys" nil :id 1 :type (thrift:list (struct "coinhistory")))
   ("balance" nil :id 2 :type (struct "coin"))
   ("hasNext" nil :id 3 :type bool)))

(thrift:def-struct "coinproductitem"
  (("itemId" nil :id 1 :type string)
   ("coin" nil :id 2 :type i32)
   ("freeCoin" nil :id 3 :type i32)
   ("currency" nil :id 5 :type string)
   ("price" nil :id 6 :type string)
   ("displayPrice" nil :id 7 :type string)
   ("name" nil :id 8 :type string)
   ("desc" nil :id 9 :type string)))

(thrift:def-struct "coinpurchaseconfirm"
  (("orderId" nil :id 1 :type string)
   ("appStoreCode" nil :id 2 :type (enum "PaymentType"))
   ("receipt" nil :id 3 :type string)
   ("signature" nil :id 4 :type string)
   ("seller" nil :id 5 :type string)
   ("requestType" nil :id 6 :type string)
   ("ignoreReceipt" nil :id 7 :type bool)))

(thrift:def-struct "coinpurchasereservation"
  (("productId" nil :id 1 :type string)
   ("country" nil :id 2 :type string)
   ("currency" nil :id 3 :type string)
   ("price" nil :id 4 :type string)
   ("appStoreCode" nil :id 5 :type (enum "PaymentType"))
   ("language" nil :id 6 :type string)
   ("pgCode" nil :id 7 :type (enum "PaymentPgType"))
   ("redirectUrl" nil :id 8 :type string)))

(thrift:def-struct "coinusereservationitem"
  (("itemId" nil :id 1 :type string)
   ("itemName" nil :id 2 :type string)
   ("amount" nil :id 3 :type i32)))

(thrift:def-struct "coinusereservation"
  (("channelId" nil :id 1 :type string)
   ("shopOrderId" nil :id 2 :type string)
   ("appStoreCode" nil :id 3 :type (enum "PaymentType"))
   ("items" nil :id 4 :type (thrift:list (struct "coinusereservationitem")))
   ("country" nil :id 5 :type string)))

(thrift:def-struct "compactcontact"
  (("mid" nil :id 1 :type string)
   ("createdTime" nil :id 2 :type i64)
   ("modifiedTime" nil :id 3 :type i64)
   ("status" nil :id 4 :type (enum "ContactStatus"))
   ("settings" nil :id 5 :type i64)
   ("displayNameOverridden" nil :id 6 :type string)))

(thrift:def-struct "contactmodification"
  (("type" nil :id 1 :type (enum "ModificationType"))
   ("luid" nil :id 2 :type string)
   ("phones" nil :id 11 :type (thrift:list string))
   ("emails" nil :id 12 :type (thrift:list string))
   ("userids" nil :id 13 :type (thrift:list string))))

(thrift:def-struct "contactregistration"
  (("contact" nil :id 1 :type (struct "contact"))
   ("luid" nil :id 10 :type string)
   ("contactType" nil :id 11 :type (enum "ContactType"))
   ("contactKey" nil :id 12 :type string)))

(thrift:def-struct "contactreport"
  (("mid" nil :id 1 :type string)
   ("exists" nil :id 2 :type bool)
   ("contact" nil :id 3 :type (struct "contact"))))

(thrift:def-struct "contactreportresult"
  (("mid" nil :id 1 :type string)
   ("exists" nil :id 2 :type bool)))

(thrift:def-struct "deviceinfo"
  (("deviceName" nil :id 1 :type string)
   ("systemName" nil :id 2 :type string)
   ("systemVersion" nil :id 3 :type string)
   ("model" nil :id 4 :type string)
   ("carrierCode" nil :id 10 :type (enum "CarrierCode"))
   ("carrierName" nil :id 11 :type string)
   ("applicationType" nil :id 20 :type (enum "ApplicationType"))))

(thrift:def-struct "emailconfirmation"
  (("usePasswordSet" nil :id 1 :type bool)
   ("email" nil :id 2 :type string)
   ("password" nil :id 3 :type string)
   ("ignoreDuplication" nil :id 4 :type bool)))

(thrift:def-struct "emailconfirmationsession"
  (("emailConfirmationType" nil :id 1 :type (enum "EmailConfirmationType"))
   ("verifier" nil :id 2 :type string)
   ("targetEmail" nil :id 3 :type string)))

(thrift:def-struct "friendchannelmatrix"
  (("channelId" nil :id 1 :type string)
   ("representMid" nil :id 2 :type string)
   ("count" nil :id 3 :type i32)
   ("point" nil :id 4 :type i32)))

(thrift:def-struct "friendchannelmatricesresponse"
  (("expires" nil :id 1 :type i64)
   ("matrices" nil :id 2 :type (thrift:list (struct "friendchannelmatrix")))))

(thrift:def-struct "friendrequest"
  (("eMid" nil :id 1 :type string)
   ("mid" nil :id 2 :type string)
   ("direction" nil :id 3 :type (enum "FriendRequestDirection"))
   ("method" nil :id 4 :type (enum "FriendRequestMethod"))
   ("param" nil :id 5 :type string)
   ("timestamp" nil :id 6 :type i64)
   ("seqId" nil :id 7 :type i64)
   ("displayName" nil :id 10 :type string)
   ("picturePath" nil :id 11 :type string)
   ("pictureStatus" nil :id 12 :type string)))

(thrift:def-struct "friendrequestsinfo"
  (("totalIncomingCount" nil :id 1 :type i32)
   ("totalOutgoingCount" nil :id 2 :type i32)
   ("recentIncomings" nil :id 3 :type (thrift:list (struct "friendrequest")))
   ("recentOutgoings" nil :id 4 :type (thrift:list (struct "friendrequest")))
   ("totalIncomingLimit" nil :id 5 :type i32)
   ("totalOutgoingLimit" nil :id 6 :type i32)))

(thrift:def-struct "geolocation"
  (("longitude" nil :id 1 :type double)
   ("latitude" nil :id 2 :type double)))

(thrift:def-struct "notificationtarget"
  (("applicationType" nil :id 1 :type string)
   ("applicationVersion" nil :id 2 :type string)
   ("region" nil :id 3 :type string)))

(thrift:def-struct "globalevent"
  (("key" nil :id 1 :type string)
   ("targets" nil :id 2 :type (thrift:list (struct "notificationtarget")))
   ("createdTime" nil :id 3 :type i64)
   ("data" nil :id 4 :type i64)
   ("maxDelay" nil :id 5 :type i32)))

(thrift:def-struct "grouppreference"
  (("invitationTicket" nil :id 1 :type string)
   ("favoriteTimestamp" nil :id 2 :type i64)))

(thrift:def-struct "group"
  (("id" nil :id 1 :type string)
   ("createdTime" nil :id 2 :type i64)
   ("name" nil :id 10 :type string)
   ("pictureStatus" nil :id 11 :type string)
   ("preventedJoinByTicket" nil :id 12 :type bool)
   ("groupPreference" nil :id 13 :type (struct "grouppreference"))
   ("members" nil :id 20 :type (thrift:list (struct "contact")))
   ("creator" nil :id 21 :type (struct "contact"))
   ("invitee" nil :id 22 :type (thrift:list (struct "contact")))
   ("notificationDisabled" nil :id 31 :type bool)))

(thrift:def-struct "identitycredential"
  (("provider" nil :id 1 :type (enum "IdentityProvider"))
   ("identifier" nil :id 2 :type string)
   ("password" nil :id 3 :type string)))

(thrift:def-struct "lastreadmessageid"
  (("mid" nil :id 1 :type string)
   ("lastReadMessageId" nil :id 2 :type string)))

(thrift:def-struct "lastreadmessageids"
  (("chatId" nil :id 1 :type string)
   ("lastReadMessageIds" nil :id 2 :type (thrift:list (struct "lastreadmessageid")))))

(thrift:def-struct "verificationsessiondata"
  (("sessionId" nil :id 1 :type string)
   ("method" nil :id 2 :type (enum "VerificationMethod"))
   ("callback" nil :id 3 :type string)
   ("normalizedPhone" nil :id 4 :type string)
   ("countryCode" nil :id 5 :type string)
   ("nationalSignificantNumber" nil :id 6 :type string)
   ("availableVerificationMethods" nil :id 7 :type (thrift:list (enum "VerificationMethod")))))

(thrift:def-struct "loginresult"
  (("authToken" nil :id 1 :type string)
   ("certificate" nil :id 2 :type string)
   ("verifier" nil :id 3 :type string)
   ("pinCode" nil :id 4 :type string)
   ("type" nil :id 5 :type (enum "LoginResultType"))
   ("lastPrimaryBindTime" nil :id 6 :type i64)
   ("displayMessage" nil :id 7 :type string)
   ("sessionForSMSConfirm" nil :id 8 :type (struct "verificationsessiondata"))))

(thrift:def-struct "loginrequest"
  (("type" nil :id 1 :type i32)
   ("identityProvider" nil :id 2 :type i32)
   ("identifier" nil :id 3 :type string)
   ("password" nil :id 4 :type string)
   ("keepLoggedIn" nil :id 5 :type bool)
   ("accessLocation" nil :id 6 :type string)
   ("systemName" nil :id 7 :type string)
   ("certificate" nil :id 8 :type string)
   ("verifier" nil :id 9 :type string)
   ("secret" nil :id 10 :type string)
   ("e2eeVersion" nil :id 11 :type i32)))

(thrift:def-struct "loginsession"
  (("tokenKey" nil :id 1 :type string)
   ("expirationTime" nil :id 3 :type i64)
   ("applicationType" nil :id 11 :type (enum "ApplicationType"))
   ("systemName" nil :id 12 :type string)
   ("accessLocation" nil :id 22 :type string)))

(thrift:def-struct "message"
  (("_from" nil :id 1 :type string)
   ("to" nil :id 2 :type string)
   ("toType" nil :id 3 :type (enum "MIDType"))
   ("id" nil :id 4 :type string)
   ("createdTime" nil :id 5 :type i64)
   ("deliveredTime" nil :id 6 :type i64)
   ("text" nil :id 10 :type string)
   ("location" nil :id 11 :type (struct "location"))
   ("hasContent" nil :id 14 :type bool)
   ("contentType" nil :id 15 :type (enum "ContentType"))
   ("contentPreview" nil :id 17 :type binary)
   ("contentMetadata" nil :id 18 :type (thrift:map string string))
   ("sessionId" nil :id 19 :type i8)
   ("chunks" nil :id 20 :type (thrift:list binary))
   ("relatedMessageId" nil :id 21 :type string)
   ("messageRelationType" nil :id 22 :type (enum "MessageRelationType"))
   ("readCount" nil :id 23 :type i64)
   ("relatedMessageServiceCode" nil :id 24 :type (enum "ServiceCode"))))

(thrift:def-struct "squaremessage"
  (("message" nil :id 1 :type (struct "message"))
   ("fromType" nil :id 3 :type (enum "MIDType"))
   ("squareMessageRevision" nil :id 4 :type i64)))

(thrift:def-struct "squarechatstatuswithoutmessage"
  (("memberCount" nil :id 1 :type i32)
   ("unreadMessageCount" nil :id 2 :type i32)))

(thrift:def-struct "squarechatstatus"
  (("lastMessage" nil :id 3 :type (struct "squaremessage"))
   ("senderDisplayName" nil :id 4 :type string)
   ("otherStatus" nil :id 5 :type (struct "squarechatstatuswithoutmessage"))))

(thrift:def-struct "squarechatmember"
  (("squareMemberMid" nil :id 1 :type string)
   ("squareChatMid" nil :id 2 :type string)
   ("revision" nil :id 3 :type i64)
   ("membershipState" nil :id 4 :type (enum "SquareChatMembershipState"))
   ("notificationForMessage" nil :id 5 :type bool)))

(thrift:def-struct "messageoperation"
  (("revision" nil :id 1 :type i64)
   ("createdTime" nil :id 2 :type i64)
   ("type" nil :id 3 :type (enum "MessageOperationType"))
   ("reqSeq" nil :id 4 :type i32)
   ("status" nil :id 5 :type (enum "OpStatus"))
   ("param1" nil :id 10 :type string)
   ("param2" nil :id 11 :type string)
   ("param3" nil :id 12 :type string)
   ("message" nil :id 20 :type (struct "message"))))

(thrift:def-struct "messageoperations"
  (("operations" nil :id 1 :type (thrift:list (struct "messageoperation")))
   ("endFlag" nil :id 2 :type bool)))

(thrift:def-struct "messagestoreresult"
  (("requestId" nil :id 1 :type string)
   ("messageIds" nil :id 2 :type (thrift:list string))))

(thrift:def-struct "metaprofile"
  (("createTime" nil :id 1 :type i64)
   ("regionCode" nil :id 2 :type string)
   ("identities" nil :id 3 :type (thrift:map (enum "RegistrationType") string))))

(thrift:def-struct "notificationitem"
  (("id" nil :id 1 :type string)
   ("_from" nil :id 2 :type string)
   ("to" nil :id 3 :type string)
   ("fromChannel" nil :id 4 :type string)
   ("toChannel" nil :id 5 :type string)
   ("revision" nil :id 7 :type i64)
   ("createdTime" nil :id 8 :type i64)
   ("content" nil :id 9 :type (thrift:map string string))))

(thrift:def-struct "notificationfetchresult"
  (("fetchMode" nil :id 1 :type (enum "NotificationItemFetchMode"))
   ("itemList" nil :id 2 :type (thrift:list (struct "notificationitem")))))

(thrift:def-struct "operation"
  (("revision" nil :id 1 :type i64)
   ("createdTime" nil :id 2 :type i64)
   ("type" nil :id 3 :type (enum "OpType"))
   ("reqSeq" nil :id 4 :type i32)
   ("checksum" nil :id 5 :type string)
   ("status" nil :id 7 :type (enum "OpStatus"))
   ("param1" nil :id 10 :type string)
   ("param2" nil :id 11 :type string)
   ("param3" nil :id 12 :type string)
   ("message" nil :id 20 :type (struct "message"))))

(thrift:def-struct "paymentreservation"
  (("receiverMid" nil :id 1 :type string)
   ("productId" nil :id 2 :type string)
   ("language" nil :id 3 :type string)
   ("location" nil :id 4 :type string)
   ("currency" nil :id 5 :type string)
   ("price" nil :id 6 :type string)
   ("appStoreCode" nil :id 7 :type (enum "PaymentType"))
   ("messageText" nil :id 8 :type string)
   ("messageTemplate" nil :id 9 :type i32)
   ("packageId" nil :id 10 :type i64)))

(thrift:def-struct "paymentreservationresult"
  (("orderId" nil :id 1 :type string)
   ("confirmUrl" nil :id 2 :type string)
   ("extras" nil :id 3 :type (thrift:map string string))))

(thrift:def-struct "product"
  (("productId" nil :id 1 :type string)
   ("packageId" nil :id 2 :type i64)
   ("version" nil :id 3 :type i32)
   ("authorName" nil :id 4 :type string)
   ("onSale" nil :id 5 :type bool)
   ("validDays" nil :id 6 :type i32)
   ("saleType" nil :id 7 :type i32)
   ("copyright" nil :id 8 :type string)
   ("title" nil :id 9 :type string)
   ("descriptionText" nil :id 10 :type string)
   ("shopOrderId" nil :id 11 :type i64)
   ("fromMid" nil :id 12 :type string)
   ("toMid" nil :id 13 :type string)
   ("validUntil" nil :id 14 :type i64)
   ("priceTier" nil :id 15 :type i32)
   ("price" nil :id 16 :type string)
   ("currency" nil :id 17 :type string)
   ("currencySymbol" nil :id 18 :type string)
   ("paymentType" nil :id 19 :type (enum "PaymentType"))
   ("createDate" nil :id 20 :type i64)
   ("ownFlag" nil :id 21 :type bool)
   ("eventType" nil :id 22 :type (enum "ProductEventType"))
   ("urlSchema" nil :id 23 :type string)
   ("downloadUrl" nil :id 24 :type string)
   ("buddyMid" nil :id 25 :type string)
   ("publishSince" nil :id 26 :type i64)
   ("newFlag" nil :id 27 :type bool)
   ("missionFlag" nil :id 28 :type bool)
   ("categories" nil :id 29 :type (thrift:list (struct "productcategory")))
   ("missionButtonText" nil :id 30 :type string)
   ("missionShortDescription" nil :id 31 :type string)
   ("authorId" nil :id 32 :type string)
   ("grantedByDefault" nil :id 41 :type bool)
   ("displayOrder" nil :id 42 :type i32)
   ("availableForPresent" nil :id 43 :type bool)
   ("availableForMyself" nil :id 44 :type bool)
   ("hasAnimation" nil :id 51 :type bool)
   ("hasSound" nil :id 52 :type bool)
   ("recommendationsEnabled" nil :id 53 :type bool)
   ("stickerResourceType" nil :id 54 :type (enum "StickerResourceType"))))

(thrift:def-struct "productlist"
  (("hasNext" nil :id 1 :type bool)
   ("bannerSequence" nil :id 4 :type i64)
   ("bannerTargetType" nil :id 5 :type (enum "ProductBannerLinkType"))
   ("bannerTargetPath" nil :id 6 :type string)
   ("productList" nil :id 7 :type (thrift:list (struct "product")))
   ("bannerLang" nil :id 8 :type string)))

(thrift:def-struct "stickeridrange"
  (("start" nil :id 1 :type i64)
   ("size" nil :id 2 :type i32)))

(thrift:def-struct "productsimple"
  (("productId" nil :id 1 :type string)
   ("packageId" nil :id 2 :type i64)
   ("version" nil :id 3 :type i32)
   ("onSale" nil :id 4 :type bool)
   ("validUntil" nil :id 5 :type i64)
   ("stickerIdRanges" nil :id 10 :type (thrift:list (struct "stickeridrange")))
   ("grantedByDefault" nil :id 41 :type bool)
   ("displayOrder" nil :id 42 :type i32)))

(thrift:def-struct "productsimplelist"
  (("hasNext" nil :id 1 :type bool)
   ("reinvokeHour" nil :id 2 :type i32)
   ("lastVersionSeq" nil :id 3 :type i64)
   ("productList" nil :id 4 :type (thrift:list (struct "productsimple")))
   ("recentNewReleaseDate" nil :id 5 :type i64)
   ("recentEventReleaseDate" nil :id 6 :type i64)))

(thrift:def-struct "profile"
  (("mid" nil :id 1 :type string)
   ("userid" nil :id 3 :type string)
   ("phone" nil :id 10 :type string)
   ("email" nil :id 11 :type string)
   ("regionCode" nil :id 12 :type string)
   ("displayName" nil :id 20 :type string)
   ("phoneticName" nil :id 21 :type string)
   ("pictureStatus" nil :id 22 :type string)
   ("thumbnailUrl" nil :id 23 :type string)
   ("statusMessage" nil :id 24 :type string)
   ("allowSearchByUserid" nil :id 31 :type bool)
   ("allowSearchByEmail" nil :id 32 :type bool)
   ("picturePath" nil :id 33 :type string)
   ("musicProfile" nil :id 34 :type string)
   ("videoProfile" nil :id 35 :type string)))

(thrift:def-struct "proximitymatchcandidateresult"
  (("users" nil :id 1 :type (thrift:list (struct "contact")))
   ("buddies" nil :id 2 :type (thrift:list (struct "contact")))))

(thrift:def-struct "registerwithsnsidresult"
  (("authToken" nil :id 1 :type string)
   ("userCreated" nil :id 2 :type bool)))

(thrift:def-struct "requesttokenresponse"
  (("requestToken" nil :id 1 :type string)
   ("returnUrl" nil :id 2 :type string)))

(thrift:def-struct "room"
  (("mid" nil :id 1 :type string)
   ("createdTime" nil :id 2 :type i64)
   ("contacts" nil :id 10 :type (thrift:list (struct "contact")))
   ("notificationDisabled" nil :id 31 :type bool)
   ("memberMids" nil :id 40 :type (thrift:list string))))

(thrift:def-struct "suggestdictionary"
  (("language" nil :id 1 :type string)
   ("name" nil :id 2 :type string)))

(thrift:def-struct "suggestitemdictionaryincrement"
  (("status" nil :id 1 :type (enum "SuggestDictionaryIncrementStatus"))
   ("revision" nil :id 2 :type i64)
   ("scheme" nil :id 3 :type string)
   ("data" nil :id 4 :type binary)))

(thrift:def-struct "suggesttagdictionaryincrement"
  (("status" nil :id 1 :type (enum "SuggestDictionaryIncrementStatus"))
   ("language" nil :id 2 :type string)
   ("revision" nil :id 3 :type i64)
   ("scheme" nil :id 4 :type string)
   ("data" nil :id 5 :type binary)))

(thrift:def-struct "suggestdictionaryincrements"
  (("itemIncrement" nil :id 1 :type (struct "suggestitemdictionaryincrement"))
   ("tagIncrements" nil :id 2 :type (thrift:list (struct "suggesttagdictionaryincrement")))))

(thrift:def-struct "suggestitemdictionaryrevision"
  (("revision" nil :id 1 :type i64)
   ("scheme" nil :id 2 :type string)))

(thrift:def-struct "suggesttagdictionaryrevision"
  (("language" nil :id 1 :type string)
   ("revision" nil :id 2 :type i64)
   ("scheme" nil :id 3 :type string)))

(thrift:def-struct "suggestdictionaryrevisions"
  (("itemRevision" nil :id 1 :type (struct "suggestitemdictionaryrevision"))
   ("tagRevisions" nil :id 2 :type (thrift:list (struct "suggesttagdictionaryrevision")))))

(thrift:def-struct "suggestdictionarysettings"
  (("revision" nil :id 1 :type i64)
   ("newRevision" nil :id 2 :type i64)
   ("dictionaries" nil :id 3 :type (thrift:list (struct "suggestdictionary")))
   ("preloadedDictionaries" nil :id 4 :type (thrift:list string))))

(thrift:def-struct "phoneinfoforchannel"
  (("mid" nil :id 1 :type string)
   ("normalizedPhoneNumber" nil :id 2 :type string)
   ("allowedToSearchByPhoneNumber" nil :id 3 :type bool)
   ("allowedToReceiveMessageFromNonFriend" nil :id 4 :type bool)
   ("region" nil :id 5 :type string)))

(thrift:def-struct "phoneverificationresult"
  (("verificationResult" nil :id 1 :type (enum "VerificationResult"))
   ("accountMigrationCheckType" nil :id 2 :type (enum "AccountMigrationCheckType"))
   ("recommendAddFriends" nil :id 3 :type bool)))

(thrift:def-struct "placesearchinfo"
  (("name" nil :id 1 :type string)
   ("address" nil :id 2 :type string)
   ("latitude" nil :id 3 :type double)
   ("longitude" nil :id 4 :type double)))

(thrift:def-struct "rsakey"
  (("keynm" nil :id 1 :type string)
   ("nvalue" nil :id 2 :type string)
   ("evalue" nil :id 3 :type string)
   ("sessionKey" nil :id 4 :type string)))

(thrift:def-struct "securitycenterresult"
  (("uri" nil :id 1 :type string)
   ("token" nil :id 2 :type string)
   ("cookiePath" nil :id 3 :type string)
   ("skip" nil :id 4 :type bool)))

(thrift:def-struct "sendbuddymessageresult"
  (("requestId" nil :id 1 :type string)
   ("state" nil :id 2 :type (enum "BuddyResultState"))
   ("messageId" nil :id 3 :type string)
   ("eventNo" nil :id 4 :type i32)
   ("receiverCount" nil :id 11 :type i64)
   ("successCount" nil :id 12 :type i64)
   ("failCount" nil :id 13 :type i64)
   ("cancelCount" nil :id 14 :type i64)
   ("blockCount" nil :id 15 :type i64)
   ("unregisterCount" nil :id 16 :type i64)
   ("timestamp" nil :id 21 :type i64)
   ("message" nil :id 22 :type string)))

(thrift:def-struct "setbuddyonairresult"
  (("requestId" nil :id 1 :type string)
   ("state" nil :id 2 :type (enum "BuddyResultState"))
   ("eventNo" nil :id 3 :type i32)
   ("receiverCount" nil :id 11 :type i64)
   ("successCount" nil :id 12 :type i64)
   ("failCount" nil :id 13 :type i64)
   ("cancelCount" nil :id 14 :type i64)
   ("unregisterCount" nil :id 15 :type i64)
   ("timestamp" nil :id 21 :type i64)
   ("message" nil :id 22 :type string)))

(thrift:def-struct "settings"
  (("notificationEnable" nil :id 10 :type bool)
   ("notificationMuteExpiration" nil :id 11 :type i64)
   ("notificationNewMessage" nil :id 12 :type bool)
   ("notificationGroupInvitation" nil :id 13 :type bool)
   ("notificationShowMessage" nil :id 14 :type bool)
   ("notificationIncomingCall" nil :id 15 :type bool)
   ("notificationSoundMessage" nil :id 16 :type string)
   ("notificationSoundGroup" nil :id 17 :type string)
   ("notificationDisabledWithSub" nil :id 18 :type bool)
   ("privacySyncContacts" nil :id 20 :type bool)
   ("privacySearchByPhoneNumber" nil :id 21 :type bool)
   ("privacySearchByUserid" nil :id 22 :type bool)
   ("privacySearchByEmail" nil :id 23 :type bool)
   ("privacyAllowSecondaryDeviceLogin" nil :id 24 :type bool)
   ("privacyProfileImagePostToMyhome" nil :id 25 :type bool)
   ("privacyReceiveMessagesFromNotFriend" nil :id 26 :type bool)
   ("contactMyTicket" nil :id 30 :type string)
   ("identityProvider" nil :id 40 :type (enum "IdentityProvider"))
   ("identityIdentifier" nil :id 41 :type string)
   ("snsAccounts" nil :id 42 :type (thrift:map (enum "SnsIdType") string))
   ("phoneRegistration" nil :id 43 :type bool)
   ("emailConfirmationStatus" nil :id 44 :type (enum "EmailConfirmationStatus"))
   ("preferenceLocale" nil :id 50 :type string)
   ("customModes" nil :id 60 :type (thrift:map (enum "CustomMode") string))
   ("e2eeEnable" nil :id 61 :type bool)
   ("hitokotoBackupRequested" nil :id 62 :type bool)
   ("privacyProfileMusicPostToMyhome" nil :id 63 :type bool)
   ("privacyAllowNearby" nil :id 65 :type bool)
   ("agreementNearbyTime" nil :id 66 :type i64)
   ("agreementSquareTime" nil :id 67 :type i64)
   ("notificationMention" nil :id 68 :type bool)
   ("botUseAgreementAcceptedAt" nil :id 69 :type i64)))

(thrift:def-struct "simplechannelclient"
  (("applicationType" nil :id 1 :type string)
   ("applicationVersion" nil :id 2 :type string)
   ("locale" nil :id 3 :type string)))

(thrift:def-struct "simplechannelcontact"
  (("mid" nil :id 1 :type string)
   ("displayName" nil :id 2 :type string)
   ("pictureStatus" nil :id 3 :type string)
   ("picturePath" nil :id 4 :type string)
   ("statusMessage" nil :id 5 :type string)))

(thrift:def-struct "snsfriend"
  (("snsUserId" nil :id 1 :type string)
   ("snsUserName" nil :id 2 :type string)
   ("snsIdType" nil :id 3 :type (enum "SnsIdType"))))

(thrift:def-struct "snsfriendcontactregistration"
  (("contact" nil :id 1 :type (struct "contact"))
   ("snsIdType" nil :id 2 :type (enum "SnsIdType"))
   ("snsUserId" nil :id 3 :type string)))

(thrift:def-struct "snsfriendmodification"
  (("type" nil :id 1 :type (enum "ModificationType"))
   ("snsFriend" nil :id 2 :type (struct "snsfriend"))))

(thrift:def-struct "snsfriends"
  (("snsFriends" nil :id 1 :type (thrift:list (struct "snsfriend")))
   ("hasMore" nil :id 2 :type bool)))

(thrift:def-struct "snsiduserstatus"
  (("userExisting" nil :id 1 :type bool)
   ("phoneNumberRegistered" nil :id 2 :type bool)
   ("sameDevice" nil :id 3 :type bool)))

(thrift:def-struct "snsprofile"
  (("snsUserId" nil :id 1 :type string)
   ("snsUserName" nil :id 2 :type string)
   ("email" nil :id 3 :type string)
   ("thumbnailUrl" nil :id 4 :type string)))

(thrift:def-struct "systemconfiguration"
  (("endpoint" nil :id 1 :type string)
   ("endpointSsl" nil :id 2 :type string)
   ("updateUrl" nil :id 3 :type string)
   ("c2dmAccount" nil :id 11 :type string)
   ("nniServer" nil :id 12 :type string)))

(thrift:def-struct "ticket"
  (("id" nil :id 1 :type string)
   ("expirationTime" nil :id 10 :type i64)
   ("maxUseCount" nil :id 21 :type i32)))

(thrift:def-struct "tmessagebox"
  (("id" nil :id 1 :type string)
   ("channelId" nil :id 2 :type string)
   ("lastSeq" nil :id 5 :type i64)
   ("unreadCount" nil :id 6 :type i64)
   ("lastModifiedTime" nil :id 7 :type i64)
   ("status" nil :id 8 :type i32)
   ("midType" nil :id 9 :type (enum "MIDType"))
   ("lastMessages" nil :id 10 :type (thrift:list (struct "message")))))

(thrift:def-struct "tmessageboxwrapup"
  (("messageBox" nil :id 1 :type (struct "tmessagebox"))
   ("name" nil :id 2 :type string)
   ("contacts" nil :id 3 :type (thrift:list (struct "contact")))
   ("pictureRevision" nil :id 4 :type string)))

(thrift:def-struct "tmessageboxwrapupresponse"
  (("messageBoxWrapUpList" nil :id 1 :type (thrift:list (struct "tmessageboxwrapup")))
   ("totalSize" nil :id 2 :type i32)))

(thrift:def-struct "tmessagereadrangeentry"
  (("startMessageId" nil :id 1 :type i64)
   ("endMessageId" nil :id 2 :type i64)
   ("startTime" nil :id 3 :type i64)
   ("endTime" nil :id 4 :type i64)))

(thrift:def-struct "tmessagereadrange"
  (("chatId" nil :id 1 :type string)
   ("ranges" nil :id 2 :type (thrift:map string (thrift:list (struct "tmessagereadrangeentry"))))))

(thrift:def-struct "chatroomannouncementcontents"
  (("displayFields" nil :id 1 :type i32)
   ("text" nil :id 2 :type string)
   ("link" nil :id 3 :type string)
   ("thumbnail" nil :id 4 :type string)))

(thrift:def-struct "chatroomannouncement"
  (("announcementSeq" nil :id 1 :type i64)
   ("type" nil :id 2 :type (enum "ChatRoomAnnouncementType"))
   ("contents" nil :id 3 :type (struct "chatroomannouncementcontents"))
   ("creatorMid" nil :id 4 :type string)
   ("createdTime" nil :id 5 :type i64)))

(thrift:def-struct "errorextrainfo"
  (("preconditionFailedExtraInfo" nil :id 1 :type (enum "PreconditionFailedExtraInfo"))))

(thrift:def-struct "syncrelations"
  (("syncAll" nil :id 1 :type bool)
   ("syncParamContact" nil :id 2 :type (thrift:list (struct "syncparamcontact")))
   ("syncParamMid" nil :id 3 :type (thrift:list (struct "syncparammid")))))

(thrift:def-struct "syncscope"
  (("syncProfile" nil :id 1 :type bool)
   ("syncSettings" nil :id 2 :type bool)
   ("syncSticker" nil :id 3 :type bool)
   ("syncThemeShop" nil :id 4 :type bool)
   ("contact" nil :id 10 :type (struct "syncrelations"))
   ("group" nil :id 11 :type (struct "syncrelations"))
   ("room" nil :id 12 :type (struct "syncrelations"))
   ("chat" nil :id 13 :type (struct "syncrelations"))))

(thrift:def-struct "joinsquareresponse"
  (("square" nil :id 1 :type (struct "square"))
   ("squareAuthority" nil :id 2 :type (struct "squareauthority"))
   ("squareStatus" nil :id 3 :type (struct "squarestatus"))
   ("squareMember" nil :id 4 :type (struct "squaremember"))
   ("squareFeatureSet" nil :id 5 :type (struct "squarefeatureset"))
   ("noteStatus" nil :id 6 :type (struct "notestatus"))))

(thrift:def-struct "joinsquarerequest"
  (("squareMid" nil :id 2 :type string)
   ("member" nil :id 3 :type (struct "squaremember"))))

(thrift:def-struct "joinsquarechatresponse"
  (("squareChat" nil :id 1 :type (struct "squarechat"))
   ("squareChatStatus" nil :id 2 :type (struct "squarechatstatus"))
   ("squareChatMember" nil :id 3 :type (struct "squarechatmember"))))

(thrift:def-struct "joinsquarechatrequest"
  (("squareChatMid" nil :id 1 :type string)))

(thrift:def-struct "sendmessageresponse"
  (("createdSquareMessage" nil :id 1 :type (struct "squaremessage"))))

(thrift:def-struct "sendmessagerequest"
  (("reqSeq" nil :id 1 :type i32)
   ("squareChatMid" nil :id 2 :type string)
   ("squareMessage" nil :id 3 :type (struct "squaremessage"))))

(thrift:def-struct "markasreadrequest"
  (("squareChatMid" nil :id 2 :type string)
   ("messageId" nil :id 4 :type string)))

(thrift:def-struct "markasreadresponse"
  ())

(thrift:def-struct "subscriptionstate"
  (("subscriptionId" nil :id 1 :type i64)
   ("ttlMillis" nil :id 2 :type i64)))

(thrift:def-struct "approvesquaremembersresponse"
  (("approvedMembers" nil :id 1 :type (thrift:list (struct "squaremember")))
   ("status" nil :id 2 :type (struct "squarestatus"))))

(thrift:def-struct "approvesquaremembersrequest"
  (("squareMid" nil :id 2 :type string)
   ("requestedMemberMids" nil :id 3 :type (thrift:list string))))

(thrift:def-struct "createsquarechatresponse"
  (("squareChat" nil :id 1 :type (struct "squarechat"))
   ("squareChatStatus" nil :id 2 :type (struct "squarechatstatus"))
   ("squareChatMember" nil :id 3 :type (struct "squarechatmember"))))

(thrift:def-struct "createsquarechatrequest"
  (("reqSeq" nil :id 1 :type i32)
   ("squareChat" nil :id 2 :type (struct "squarechat"))
   ("squareMemberMids" nil :id 3 :type (thrift:list string))))

(thrift:def-struct "createsquareresponse"
  (("square" nil :id 1 :type (struct "square"))
   ("creator" nil :id 2 :type (struct "squaremember"))
   ("authority" nil :id 3 :type (struct "squareauthority"))
   ("status" nil :id 4 :type (struct "squarestatus"))))

(thrift:def-struct "createsquarerequest"
  (("reqSeq" nil :id 1 :type i32)
   ("square" nil :id 2 :type (struct "square"))
   ("creator" nil :id 3 :type (struct "squaremember"))))

(thrift:def-struct "deletesquareresponse"
  ())

(thrift:def-struct "deletesquarerequest"
  (("mid" nil :id 2 :type string)
   ("revision" nil :id 3 :type i64)))

(thrift:def-struct "destroymessageresponse"
  ())

(thrift:def-struct "destroymessagerequest"
  (("squareChatMid" nil :id 2 :type string)
   ("messageId" nil :id 4 :type string)))

(thrift:def-struct "getsquarechatmembersrequest"
  (("squareChatMid" nil :id 1 :type string)
   ("continuationToken" nil :id 2 :type string)
   ("limit" nil :id 3 :type i32)))

(thrift:def-struct "getsquarechatmembersresponse"
  (("squareChatMembers" nil :id 1 :type (struct "squaremember"))
   ("continuationToken" nil :id 2 :type string)))

(thrift:def-struct "getsquarechatstatusrequest"
  (("squareChatMid" nil :id 2 :type string)))

(thrift:def-struct "getsquarechatstatusresponse"
  (("chatStatus" nil :id 1 :type (struct "squarechatstatus"))))

(thrift:def-struct "getsquarechatrequest"
  (("squareChatMid" nil :id 1 :type string)))

(thrift:def-struct "getsquarechatresponse"
  (("squareChat" nil :id 1 :type (struct "squarechat"))
   ("squareChatMember" nil :id 2 :type (struct "squarechatmember"))
   ("squareChatStatus" nil :id 3 :type (struct "squarechatstatus"))))

(thrift:def-struct "getsquareauthorityrequest"
  (("squareMid" nil :id 1 :type string)))

(thrift:def-struct "getsquareauthorityresponse"
  (("authority" nil :id 1 :type (struct "squareauthority"))))

(thrift:def-struct "getjoinedsquaresrequest"
  (("continuationToken" nil :id 2 :type string)
   ("limit" nil :id 3 :type i32)))

(thrift:def-struct "getjoinedsquaresresponse"
  (("squares" nil :id 1 :type (thrift:list (struct "square")))
   ("members" nil :id 2 :type (thrift:map string (struct "squaremember")))
   ("authorities" nil :id 3 :type (thrift:map string (struct "squareauthority")))
   ("statuses" nil :id 4 :type (thrift:map string (struct "squarestatus")))
   ("continuationToken" nil :id 5 :type string)
   ("noteStatuses" nil :id 6 :type (thrift:map string (struct "notestatus")))))

(thrift:def-struct "getjoinablesquarechatsrequest"
  (("squareMid" nil :id 1 :type string)
   ("continuationToken" nil :id 10 :type string)
   ("limit" nil :id 11 :type i32)))

(thrift:def-struct "getjoinablesquarechatsresponse"
  (("squareChats" nil :id 1 :type (thrift:list (struct "squarechat")))
   ("continuationToken" nil :id 2 :type string)
   ("totalSquareChatCount" nil :id 3 :type i32)
   ("squareChatStatuses" nil :id 4 :type (thrift:map string (struct "squarechatstatus")))))

(thrift:def-struct "getinvitationticketurlrequest"
  (("mid" nil :id 2 :type string)))

(thrift:def-struct "getinvitationticketurlresponse"
  (("invitationURL" nil :id 1 :type string)))

(thrift:def-struct "leavesquarerequest"
  (("squareMid" nil :id 2 :type string)))

(thrift:def-struct "leavesquareresponse"
  ())

(thrift:def-struct "leavesquarechatrequest"
  (("squareChatMid" nil :id 2 :type string)
   ("sayGoodbye" nil :id 3 :type bool)
   ("squareChatMemberRevision" nil :id 4 :type i64)))

(thrift:def-struct "leavesquarechatresponse"
  ())

(thrift:def-struct "squaremembersearchoption"
  (("membershipState" nil :id 1 :type (enum "SquareMembershipState"))
   ("memberRoles" nil :id 2 :type (thrift:set (enum "SquareMemberRole")))
   ("displayName" nil :id 3 :type string)
   ("ableToReceiveMessage" nil :id 4 :type (enum "BooleanState"))
   ("ableToReceiveFriendRequest" nil :id 5 :type (enum "BooleanState"))
   ("chatMidToExcludeMembers" nil :id 6 :type string)
   ("includingMe" nil :id 7 :type bool)))

(thrift:def-struct "searchsquaremembersrequest"
  (("squareMid" nil :id 2 :type string)
   ("searchOption" nil :id 3 :type (struct "squaremembersearchoption"))
   ("continuationToken" nil :id 4 :type string)
   ("limit" nil :id 5 :type i32)))

(thrift:def-struct "searchsquaremembersresponse"
  (("members" nil :id 1 :type (thrift:list (struct "squaremember")))
   ("revision" nil :id 2 :type i64)
   ("continuationToken" nil :id 3 :type string)
   ("totalCount" nil :id 4 :type i32)))

(thrift:def-struct "findsquarebyinvitationticketrequest"
  (("invitationTicket" nil :id 2 :type string)))

(thrift:def-struct "findsquarebyinvitationticketresponse"
  (("square" nil :id 1 :type (struct "square"))
   ("myMembership" nil :id 2 :type (struct "squaremember"))
   ("squareAuthority" nil :id 3 :type (struct "squareauthority"))
   ("squareStatus" nil :id 4 :type (struct "squarestatus"))))

(thrift:def-struct "squareeventreceivemessage"
  (("squareChatMid" nil :id 1 :type string)
   ("squareMessage" nil :id 2 :type (struct "squaremessage"))))

(thrift:def-struct "squareeventsendmessage"
  (("squareChatMid" nil :id 1 :type string)
   ("squareMessage" nil :id 2 :type (struct "squaremessage"))
   ("reqSeq" nil :id 3 :type i32)))

(thrift:def-struct "squareeventnotifiedjoinsquarechat"
  (("squareChatMid" nil :id 1 :type string)
   ("joinedMember" nil :id 2 :type (struct "squaremember"))))

(thrift:def-struct "squareeventnotifiedinviteintosquarechat"
  (("squareChatMid" nil :id 1 :type string)
   ("invitees" nil :id 2 :type (thrift:list (struct "squaremember")))
   ("invitor" nil :id 3 :type (struct "squaremember"))
   ("invitorRelation" nil :id 4 :type (struct "squarememberrelation"))))

(thrift:def-struct "squareeventnotifiedleavesquarechat"
  (("squareChatMid" nil :id 1 :type string)
   ("squareMemberMid" nil :id 2 :type string)
   ("sayGoodbye" nil :id 3 :type bool)
   ("squareMember" nil :id 4 :type (struct "squaremember"))))

(thrift:def-struct "squareeventnotifieddestroymessage"
  (("squareChatMid" nil :id 1 :type string)
   ("messageId" nil :id 3 :type string)))

(thrift:def-struct "squareeventnotifiedmarkasread"
  (("squareChatMid" nil :id 1 :type string)
   ("sMemberMid" nil :id 2 :type string)
   ("messageId" nil :id 4 :type string)))

(thrift:def-struct "squareeventnotifiedupdatesquarememberprofile"
  (("squareChatMid" nil :id 1 :type string)
   ("squareMember" nil :id 2 :type (struct "squaremember"))))

(thrift:def-struct "squareeventnotifiedkickoutfromsquare"
  (("squareChatMid" nil :id 1 :type string)
   ("kickees" nil :id 2 :type (thrift:list (struct "squaremember")))))

(thrift:def-struct "squareeventnotifiedshutdownsquare"
  (("squareChatMid" nil :id 1 :type string)
   ("square" nil :id 2 :type (struct "square"))))

(thrift:def-struct "squareeventnotifieddeletesquarechat"
  (("squareChat" nil :id 1 :type (struct "squarechat"))))

(thrift:def-struct "squareeventnotifiedupdatesquarechatprofilename"
  (("squareChatMid" nil :id 1 :type string)
   ("editor" nil :id 2 :type (struct "squaremember"))
   ("updatedChatName" nil :id 3 :type string)))

(thrift:def-struct "squareeventnotifiedupdatesquarechatprofileimage"
  (("squareChatMid" nil :id 1 :type string)
   ("editor" nil :id 2 :type (struct "squaremember"))))

(thrift:def-struct "squareeventnotifiedupdatesquarechatstatus"
  (("squareChatMid" nil :id 1 :type string)
   ("statusWithoutMessage" nil :id 2 :type (struct "squarechatstatuswithoutmessage"))))

(thrift:def-struct "squareeventnotifiedupdatesquarestatus"
  (("squareMid" nil :id 1 :type string)
   ("squareStatus" nil :id 2 :type (struct "squarestatus"))))

(thrift:def-struct "squareeventnotifiedcreatesquaremember"
  (("square" nil :id 1 :type (struct "square"))
   ("squareAuthority" nil :id 2 :type (struct "squareauthority"))
   ("squareStatus" nil :id 3 :type (struct "squarestatus"))
   ("squareMember" nil :id 4 :type (struct "squaremember"))
   ("squareFeatureSet" nil :id 5 :type (struct "squarefeatureset"))))

(thrift:def-struct "squareeventnotifiedcreatesquarechatmember"
  (("squareChatMid" nil :id 1 :type string)
   ("squareMemberMid" nil :id 2 :type string)
   ("squareChatMember" nil :id 3 :type (struct "squarechatmember"))))

(thrift:def-struct "squareeventnotifiedupdatesquarememberrelation"
  (("squareMid" nil :id 1 :type string)
   ("myMemberMid" nil :id 2 :type string)
   ("targetSquareMemberMid" nil :id 3 :type string)
   ("squareMemberRelation" nil :id 4 :type (struct "squarememberrelation"))))

(thrift:def-struct "squareeventnotifiedupdatesquare"
  (("squareMid" nil :id 1 :type string)
   ("square" nil :id 2 :type (struct "square"))))

(thrift:def-struct "squareeventnotifiedupdatesquaremember"
  (("squareMid" nil :id 1 :type string)
   ("squareMemberMid" nil :id 2 :type string)
   ("squareMember" nil :id 3 :type (struct "squaremember"))))

(thrift:def-struct "squareeventnotifiedupdatesquarechat"
  (("squareMid" nil :id 1 :type string)
   ("squareChatMid" nil :id 2 :type string)
   ("squareChat" nil :id 3 :type (struct "squarechat"))))

(thrift:def-struct "squareeventnotificationjoinrequest"
  (("squareMid" nil :id 1 :type string)
   ("squareName" nil :id 2 :type string)
   ("requestMemberName" nil :id 3 :type string)
   ("profileImageObsHash" nil :id 4 :type string)))

(thrift:def-struct "squareeventnotificationmemberupdate"
  (("squareMid" nil :id 1 :type string)
   ("squareName" nil :id 2 :type string)
   ("profileImageObsHash" nil :id 3 :type string)))

(thrift:def-struct "squareeventnotificationsquaredelete"
  (("squareMid" nil :id 1 :type string)
   ("squareName" nil :id 2 :type string)
   ("profileImageObsHash" nil :id 3 :type string)))

(thrift:def-struct "squareeventnotificationsquarechatdelete"
  (("squareChatMid" nil :id 1 :type string)
   ("squareChatName" nil :id 2 :type string)
   ("profileImageObsHash" nil :id 3 :type string)))

(thrift:def-struct "squareeventnotificationmessage"
  (("squareChatMid" nil :id 1 :type string)
   ("squareMessage" nil :id 2 :type (struct "squaremessage"))
   ("senderDisplayName" nil :id 3 :type string)
   ("unreadCount" nil :id 4 :type i32)
   ("requiredToFetchChatEvents" nil :id 5 :type bool)))

(thrift:def-struct "squareeventnotifiedupdatesquarechatmember"
  (("squareChatMid" nil :id 1 :type string)
   ("squareMemberMid" nil :id 2 :type string)
   ("squareChatMember" nil :id 3 :type (struct "squarechatmember"))))

(thrift:def-struct "squareeventnotifiedupdatesquareauthority"
  (("squareMid" nil :id 1 :type string)
   ("squareAuthority" nil :id 2 :type (struct "squareauthority"))))

(thrift:def-struct "squareeventnotifiedupdatesquarefeatureset"
  (("squareFeatureSet" nil :id 1 :type (struct "squarefeatureset"))))

(thrift:def-struct "squareeventpayload"
  (("receiveMessage" nil :id 1 :type (struct "squareeventreceivemessage"))
   ("sendMessage" nil :id 2 :type (struct "squareeventsendmessage"))
   ("notifiedJoinSquareChat" nil :id 3 :type (struct "squareeventnotifiedjoinsquarechat"))
   ("notifiedInviteIntoSquareChat" nil :id 4 :type (struct "squareeventnotifiedinviteintosquarechat"))
   ("notifiedLeaveSquareChat" nil :id 5 :type (struct "squareeventnotifiedleavesquarechat"))
   ("notifiedDestroyMessage" nil :id 6 :type (struct "squareeventnotifieddestroymessage"))
   ("notifiedMarkAsRead" nil :id 7 :type (struct "squareeventnotifiedmarkasread"))
   ("notifiedUpdateSquareMemberProfile" nil :id 8 :type (struct "squareeventnotifiedupdatesquarememberprofile"))
   ("notifiedKickoutFromSquare" nil :id 20 :type (struct "squareeventnotifiedkickoutfromsquare"))
   ("notifiedShutdownSquare" nil :id 19 :type (struct "squareeventnotifiedshutdownsquare"))
   ("notifiedDeleteSquareChat" nil :id 21 :type (struct "squareeventnotifieddeletesquarechat"))
   ("notifiedUpdateSquareChatProfileName" nil :id 31 :type (struct "squareeventnotifiedupdatesquarechatprofilename"))
   ("notifiedUpdateSquareChatProfileImage" nil :id 32 :type (struct "squareeventnotifiedupdatesquarechatprofileimage"))
   ("notifiedUpdateSquareStatus" nil :id 14 :type (struct "squareeventnotifiedupdatesquarestatus"))
   ("notifiedUpdateSquareChatStatus" nil :id 15 :type (struct "squareeventnotifiedupdatesquarechatstatus"))
   ("notifiedCreateSquareMember" nil :id 16 :type (struct "squareeventnotifiedcreatesquaremember"))
   ("notifiedCreateSquareChatMember" nil :id 17 :type (struct "squareeventnotifiedcreatesquarechatmember"))
   ("notifiedUpdateSquareMemberRelation" nil :id 18 :type (struct "squareeventnotifiedupdatesquarememberrelation"))
   ("notifiedUpdateSquare" nil :id 9 :type (struct "squareeventnotifiedupdatesquare"))
   ("notifiedUpdateSquareMember" nil :id 10 :type (struct "squareeventnotifiedupdatesquaremember"))
   ("notifiedUpdateSquareChat" nil :id 11 :type (struct "squareeventnotifiedupdatesquarechat"))
   ("notificationJoinRequest" nil :id 22 :type (struct "squareeventnotificationjoinrequest"))
   ("notificationJoined" nil :id 23 :type (struct "squareeventnotificationmemberupdate"))
   ("notificationPromoteCoadmin" nil :id 24 :type (struct "squareeventnotificationmemberupdate"))
   ("notificationPromoteAdmin" nil :id 25 :type (struct "squareeventnotificationmemberupdate"))
   ("notificationDemoteMember" nil :id 26 :type (struct "squareeventnotificationmemberupdate"))
   ("notificationKickedOut" nil :id 27 :type (struct "squareeventnotificationmemberupdate"))
   ("notificationSquareDelete" nil :id 28 :type (struct "squareeventnotificationsquaredelete"))
   ("notificationSquareChatDelete" nil :id 29 :type (struct "squareeventnotificationsquarechatdelete"))
   ("notificationMessage" nil :id 30 :type (struct "squareeventnotificationmessage"))
   ("notifiedUpdateSquareChatMember" nil :id 12 :type (struct "squareeventnotifiedupdatesquarechatmember"))
   ("notifiedUpdateSquareAuthority" nil :id 13 :type (struct "squareeventnotifiedupdatesquareauthority"))
   ("notifiedUpdateSquareFeatureSet" nil :id 33 :type (struct "squareeventnotifiedupdatesquarefeatureset"))))

(thrift:def-struct "squareevent"
  (("createdTime" nil :id 2 :type i64)
   ("type" nil :id 3 :type (enum "SquareEventType"))
   ("payload" nil :id 4 :type (struct "squareeventpayload"))
   ("syncToken" nil :id 5 :type string)
   ("eventStatus" nil :id 6 :type (enum "SquareEventStatus"))))

(thrift:def-struct "fetchmyeventsrequest"
  (("subscriptionId" nil :id 1 :type i64)
   ("syncToken" nil :id 2 :type string)
   ("limit" nil :id 3 :type i32)
   ("continuationToken" nil :id 4 :type string)))

(thrift:def-struct "fetchmyeventsresponse"
  (("subscription" nil :id 1 :type (struct "subscriptionstate"))
   ("events" nil :id 2 :type (thrift:list (struct "squareevent")))
   ("syncToken" nil :id 3 :type string)
   ("continuationToken" nil :id 4 :type string)))

(thrift:def-struct "fetchsquarechateventsrequest"
  (("subscriptionId" nil :id 1 :type i64)
   ("squareChatMid" nil :id 2 :type string)
   ("syncToken" nil :id 3 :type string)
   ("limit" nil :id 4 :type i32)
   ("direction" nil :id 5 :type (enum "FetchDirection"))))

(thrift:def-struct "fetchsquarechateventsresponse"
  (("subscription" nil :id 1 :type (struct "subscriptionstate"))
   ("events" nil :id 2 :type (thrift:list (struct "squareevent")))
   ("syncToken" nil :id 3 :type string)
   ("continuationToken" nil :id 4 :type string)))

(thrift:def-struct "invitetosquarerequest"
  (("squareMid" nil :id 2 :type string)
   ("invitees" nil :id 3 :type (thrift:list string))
   ("squareChatMid" nil :id 4 :type string)))

(thrift:def-struct "invitetosquareresponse"
  ())

(thrift:def-struct "invitetosquarechatrequest"
  (("inviteeMids" nil :id 1 :type (thrift:list string))
   ("squareChatMid" nil :id 2 :type string)))

(thrift:def-struct "invitetosquarechatresponse"
  (("inviteeMids" nil :id 1 :type (thrift:list string))))

(thrift:def-struct "getsquarememberrequest"
  (("squareMemberMid" nil :id 1 :type string)))

(thrift:def-struct "getsquarememberresponse"
  (("squareMember" nil :id 1 :type (struct "squaremember"))
   ("relation" nil :id 2 :type (struct "squarememberrelation"))
   ("oneOnOneChatMid" nil :id 3 :type string)))

(thrift:def-struct "getsquaremembersrequest"
  (("mids" nil :id 2 :type (thrift:set string))))

(thrift:def-struct "getsquaremembersresponse"
  (("members" nil :id 1 :type (struct "squaremember"))))

(thrift:def-struct "getsquarememberrelationsrequest"
  (("state" nil :id 2 :type (enum "SquareMemberRelationState"))
   ("continuationToken" nil :id 3 :type string)
   ("limit" nil :id 4 :type i32)))

(thrift:def-struct "getsquarememberrelationsresponse"
  (("squareMembers" nil :id 1 :type (thrift:list (struct "squaremember")))
   ("relations" nil :id 2 :type (thrift:map string (struct "squarememberrelation")))
   ("continuationToken" nil :id 3 :type string)))

(thrift:def-struct "getsquarememberrelationrequest"
  (("squareMid" nil :id 2 :type string)
   ("targetSquareMemberMid" nil :id 3 :type string)))

(thrift:def-struct "getsquarememberrelationresponse"
  (("squareMid" nil :id 1 :type string)
   ("targetSquareMemberMid" nil :id 2 :type string)
   ("relation" nil :id 3 :type (struct "squarememberrelation"))))

(thrift:def-struct "category"
  (("id" nil :id 1 :type i32)
   ("name" nil :id 2 :type string)))

(thrift:def-struct "getsquarecategoriesrequest"
  ())

(thrift:def-struct "getsquarecategoriesresponse"
  (("categoryList" nil :id 1 :type (thrift:list (struct "category")))))

(thrift:def-struct "updatesquarerequest"
  (("updatedAttrs" nil :id 2 :type (thrift:set (enum "SquareAttribute")))
   ("square" nil :id 3 :type (struct "square"))))

(thrift:def-struct "updatesquareresponse"
  (("updatedAttrs" nil :id 1 :type (thrift:set (enum "SquareAttribute")))
   ("square" nil :id 2 :type (struct "square"))))

(thrift:def-struct "searchsquaresrequest"
  (("query" nil :id 2 :type string)
   ("continuationToken" nil :id 3 :type string)
   ("limit" nil :id 4 :type i32)))

(thrift:def-struct "searchsquaresresponse"
  (("squares" nil :id 1 :type (thrift:list (struct "square")))
   ("squareStatuses" nil :id 2 :type (thrift:map string (struct "squarestatus")))
   ("myMemberships" nil :id 3 :type (thrift:map string (struct "squaremember")))
   ("continuationToken" nil :id 4 :type string)
   ("noteStatuses" nil :id 5 :type (thrift:map string (struct "notestatus")))))

(thrift:def-struct "getsquarefeaturesetrequest"
  (("squareMid" nil :id 2 :type string)))

(thrift:def-struct "getsquarefeaturesetresponse"
  (("squareFeatureSet" nil :id 1 :type (struct "squarefeatureset"))))

(thrift:def-struct "updatesquarefeaturesetrequest"
  (("updateAttributes" nil :id 2 :type (thrift:set (enum "SquareFeatureSetAttribute")))
   ("squareFeatureSet" nil :id 3 :type (struct "squarefeatureset"))))

(thrift:def-struct "updatesquarefeaturesetresponse"
  (("updateAttributes" nil :id 1 :type (thrift:set (enum "SquareFeatureSetAttribute")))
   ("squareFeatureSet" nil :id 2 :type (struct "squarefeatureset"))))

(thrift:def-struct "updatesquarememberrequest"
  (("updatedAttrs" nil :id 2 :type (thrift:set (enum "SquareMemberAttribute")))
   ("updatedPreferenceAttrs" nil :id 3 :type (thrift:set (enum "SquarePreferenceAttribute")))
   ("squareMember" nil :id 4 :type (struct "squaremember"))))

(thrift:def-struct "updatesquarememberresponse"
  (("updatedAttrs" nil :id 1 :type (thrift:set (enum "SquareMemberAttribute")))
   ("squareMember" nil :id 2 :type (struct "squaremember"))
   ("updatedPreferenceAttrs" nil :id 3 :type (thrift:set (enum "SquarePreferenceAttribute")))))

(thrift:def-struct "updatesquaremembersrequest"
  (("updatedAttrs" nil :id 2 :type (thrift:set (enum "SquareMemberAttribute")))
   ("members" nil :id 3 :type (thrift:list (struct "squaremember")))))

(thrift:def-struct "updatesquaremembersresponse"
  (("updatedAttrs" nil :id 1 :type (thrift:set (enum "SquareMemberAttribute")))
   ("editor" nil :id 2 :type (struct "squaremember"))
   ("members" nil :id 3 :type (thrift:map string (struct "squaremember")))))

(thrift:def-struct "rejectsquaremembersrequest"
  (("squareMid" nil :id 2 :type string)
   ("requestedMemberMids" nil :id 3 :type (thrift:list string))))

(thrift:def-struct "rejectsquaremembersresponse"
  (("rejectedMembers" nil :id 1 :type (thrift:list (struct "squaremember")))
   ("status" nil :id 2 :type (struct "squarestatus"))))

(thrift:def-struct "removesubscriptionsrequest"
  (("unsubscriptions" nil :id 2 :type (thrift:list i64))))

(thrift:def-struct "removesubscriptionsresponse"
  ())

(thrift:def-struct "refreshsubscriptionsrequest"
  (("subscriptions" nil :id 2 :type (thrift:list i64))))

(thrift:def-struct "refreshsubscriptionsresponse"
  (("ttlMillis" nil :id 1 :type i64)
   ("subscriptionStates" nil :id 2 :type (thrift:map i64 (struct "subscriptionstate")))))

(thrift:def-struct "updatesquarechatrequest"
  (("updatedAttrs" nil :id 2 :type (thrift:set (enum "SquareChatAttribute")))
   ("squareChat" nil :id 3 :type (struct "squarechat"))))

(thrift:def-struct "updatesquarechatresponse"
  (("updatedAttrs" nil :id 1 :type (thrift:set (enum "SquareChatAttribute")))
   ("squareChat" nil :id 2 :type (struct "squarechat"))))

(thrift:def-struct "deletesquarechatrequest"
  (("squareChatMid" nil :id 2 :type string)
   ("revision" nil :id 3 :type i64)))

(thrift:def-struct "deletesquarechatresponse"
  ())

(thrift:def-struct "updatesquarechatmemberrequest"
  (("updatedAttrs" nil :id 2 :type (thrift:set (enum "SquareChatMemberAttribute")))
   ("chatMember" nil :id 3 :type (struct "squarechatmember"))))

(thrift:def-struct "updatesquarechatmemberresponse"
  (("updatedChatMember" nil :id 1 :type (struct "squarechatmember"))))

(thrift:def-struct "updatesquareauthorityrequest"
  (("updateAttributes" nil :id 2 :type (thrift:set (enum "SquareAuthorityAttribute")))
   ("authority" nil :id 3 :type (struct "squareauthority"))))

(thrift:def-struct "updatesquareauthorityresponse"
  (("updatdAttributes" nil :id 1 :type (thrift:set (enum "SquareAuthorityAttribute")))
   ("authority" nil :id 2 :type (struct "squareauthority"))))

(thrift:def-struct "updatesquarememberrelationrequest"
  (("squareMid" nil :id 2 :type string)
   ("targetSquareMemberMid" nil :id 3 :type string)
   ("updatedAttrs" nil :id 4 :type (thrift:set (enum "SquareMemberRelationAttribute")))
   ("relation" nil :id 5 :type (struct "squarememberrelation"))))

(thrift:def-struct "updatesquarememberrelationresponse"
  (("squareMid" nil :id 1 :type string)
   ("targetSquareMemberMid" nil :id 2 :type string)
   ("updatedAttrs" nil :id 3 :type (thrift:set (enum "SquareMemberRelationAttribute")))
   ("relation" nil :id 4 :type (struct "squarememberrelation"))))

(thrift:def-struct "reportsquarerequest"
  (("squareMid" nil :id 2 :type string)
   ("reportType" nil :id 3 :type (enum "ReportType"))
   ("otherReason" nil :id 4 :type string)))

(thrift:def-struct "reportsquareresponse"
  ())

(thrift:def-struct "reportsquarechatrequest"
  (("squareMid" nil :id 2 :type string)
   ("squareChatMid" nil :id 3 :type string)
   ("reportType" nil :id 5 :type (enum "ReportType"))
   ("otherReason" nil :id 6 :type string)))

(thrift:def-struct "reportsquarechatresponse"
  ())

(thrift:def-struct "reportsquaremessagerequest"
  (("squareMid" nil :id 2 :type string)
   ("squareChatMid" nil :id 3 :type string)
   ("squareMessageId" nil :id 4 :type string)
   ("reportType" nil :id 5 :type (enum "ReportType"))
   ("otherReason" nil :id 6 :type string)))

(thrift:def-struct "reportsquaremessageresponse"
  ())

(thrift:def-struct "reportsquarememberrequest"
  (("squareMemberMid" nil :id 2 :type string)
   ("reportType" nil :id 3 :type (enum "ReportType"))
   ("otherReason" nil :id 4 :type string)
   ("squareChatMid" nil :id 5 :type string)))

(thrift:def-struct "reportsquarememberresponse"
  ())

(thrift:def-struct "getsquarerequest"
  (("mid" nil :id 2 :type string)))

(thrift:def-struct "getsquareresponse"
  (("square" nil :id 1 :type (struct "square"))
   ("myMembership" nil :id 2 :type (struct "squaremember"))
   ("squareAuthority" nil :id 3 :type (struct "squareauthority"))
   ("squareStatus" nil :id 4 :type (struct "squarestatus"))
   ("squareFeatureSet" nil :id 5 :type (struct "squarefeatureset"))
   ("noteStatus" nil :id 6 :type (struct "notestatus"))))

(thrift:def-struct "getsquarestatusrequest"
  (("squareMid" nil :id 2 :type string)))

(thrift:def-struct "getsquarestatusresponse"
  (("squareStatus" nil :id 1 :type (struct "squarestatus"))))

(thrift:def-struct "getnotestatusrequest"
  (("squareMid" nil :id 2 :type string)))

(thrift:def-struct "getnotestatusresponse"
  (("squareMid" nil :id 1 :type string)
   ("status" nil :id 2 :type (struct "notestatus"))))

(thrift:def-struct "createsquarechatannouncementrequest"
  (("reqSeq" nil :id 1 :type i32)
   ("squareChatMid" nil :id 2 :type string)
   ("squareChatAnnouncement" nil :id 3 :type (struct "squarechatannouncement"))))

(thrift:def-struct "createsquarechatannouncementresponse"
  (("announcement" nil :id 1 :type (struct "squarechatannouncement"))))

(thrift:def-struct "deletesquarechatannouncementrequest"
  (("squareChatMid" nil :id 2 :type string)
   ("announcementSeq" nil :id 3 :type i64)))

(thrift:def-struct "deletesquarechatannouncementresponse"
  ())

(thrift:def-struct "getsquarechatannouncementsrequest"
  (("squareChatMid" nil :id 2 :type string)))

(thrift:def-struct "getsquarechatannouncementsresponse"
  (("announcements" nil :id 1 :type (thrift:list (struct "squarechatannouncement")))))

(thrift:def-struct "getjoinedsquarechatsrequest"
  (("continuationToken" nil :id 2 :type string)
   ("limit" nil :id 3 :type i32)))

(thrift:def-struct "getjoinedsquarechatsresponse"
  (("chats" nil :id 1 :type (thrift:list (struct "squarechat")))
   ("chatMembers" nil :id 2 :type (thrift:map string (struct "squarechatmember")))
   ("statuses" nil :id 3 :type (thrift:map string (struct "squarechatstatus")))
   ("continuationToken" nil :id 4 :type string)))

(thrift:def-exception "talkexception"
  (("code" nil :id 1 :type (enum "ErrorCode"))
   ("reason" nil :id 2 :type string)
   ("parameterMap" nil :id 3 :type (thrift:map string string))))

(thrift:def-exception "shouldsyncexception"
  (("syncOpRevision" nil :id 1 :type i64)
   ("syncScope" nil :id 2 :type (struct "syncscope"))
   ("syncReason" nil :id 3 :type (enum "SyncTriggerReason"))
   ("message" nil :id 4 :type string)))

(thrift:def-exception "pointexception"
  (("code" nil :id 1 :type (enum "PointErrorCode"))
   ("reason" nil :id 2 :type string)
   ("extra" nil :id 3 :type (thrift:map string string))))

(thrift:def-exception "channelexception"
  (("code" nil :id 1 :type (enum "ChannelErrorCode"))
   ("reason" nil :id 2 :type string)
   ("parameterMap" nil :id 3 :type (thrift:map string string))))

(thrift:def-exception "squareexception"
  (("errorCode" nil :id 1 :type (enum "SQErrorCode"))
   ("errorExtraInfo" nil :id 2 :type (struct "errorextrainfo"))
   ("reason" nil :id 3 :type string)))

(thrift:def-exception "universalnotificationserviceexception"
  (("code" nil :id 1 :type (enum "UniversalNotificationServiceErrorCode"))
   ("reason" nil :id 2 :type string)
   ("parameterMap" nil :id 3 :type (thrift:map string string))))

(thrift:def-struct "updatebuddyprofileresult"
  (("requestId" nil :id 1 :type string)
   ("state" nil :id 2 :type (enum "BuddyResultState"))
   ("eventNo" nil :id 3 :type i32)
   ("receiverCount" nil :id 11 :type i64)
   ("successCount" nil :id 12 :type i64)
   ("failCount" nil :id 13 :type i64)
   ("cancelCount" nil :id 14 :type i64)
   ("unregisterCount" nil :id 15 :type i64)
   ("timestamp" nil :id 21 :type i64)
   ("message" nil :id 22 :type string)))

(thrift:def-struct "userauthstatus"
  (("phoneNumberRegistered" nil :id 1 :type bool)
   ("registeredSnsIdTypes" nil :id 2 :type (thrift:list (enum "SnsIdType")))))

(thrift:def-struct "wapinvitation"
  (("type" nil :id 1 :type (enum "WapInvitationType"))
   ("inviteeEmail" nil :id 10 :type string)
   ("inviterMid" nil :id 11 :type string)
   ("roomMid" nil :id 12 :type string)))

(thrift:def-struct "groupcall"
  (("online" nil :id 1 :type bool)
   ("chatMid" nil :id 2 :type string)
   ("hostMids" nil :id 3 :type string)
   ("memberMids" nil :id 4 :type (thrift:list string))
   ("started" nil :id 5 :type i64)
   ("mediaType" nil :id 6 :type (enum "GroupCallMediaType"))))

(thrift:def-struct "groupcallroute"
  (("token" nil :id 1 :type string)
   ("cscf" nil :id 2 :type (struct "callhost"))
   ("mix" nil :id 3 :type (struct "callhost"))))

(thrift:def-service "AccountSupervisorService" nil
  (:method "getRSAKey" (() (struct "rsakey"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "notifyEmailConfirmationResult" ((("parameterMap" (thrift:map string string) 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "registerVirtualAccount" ((("locale" string 2) ("encryptedVirtualUserId" string 3) ("encryptedPassword" string 4)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "requestVirtualAccountPasswordChange" ((("virtualMid" string 2) ("encryptedVirtualUserId" string 3) ("encryptedOldPassword" string 4) ("encryptedNewPassword" string 5)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "requestVirtualAccountPasswordSet" ((("virtualMid" string 2) ("encryptedVirtualUserId" string 3) ("encryptedNewPassword" string 4)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "unregisterVirtualAccount" ((("virtualMid" string 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception")))))

(thrift:def-service "SpotService" nil
  (:method "lookupByPhoneNumber" ((("countryAreaCode" string 2) ("phoneNumber" string 3)) (struct "spotphonenumberresponse"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "lookupNearby" ((("location" (struct "location") 2) ("category" (enum "SpotCategory") 3) ("query" string 4) ("countryAreaCode" string 5)) (struct "spotnearbyresponse"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception")))))

(thrift:def-service "BotService" nil
  (:method "notifyLeaveGroup" ((("groupMid" string 1)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "notifyLeaveRoom" ((("roomMid" string 1)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getBotUseInfo" ((("botMid" string 2)) (struct "botuseinfo"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "sendChatCheckedByWatermark" ((("seq" i32 1) ("mid" string 2) ("watermark" i64 3) ("sessionId" i8 4)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception")))))

(thrift:def-service "AgeCheckService" nil
  (:method "checkUserAge" ((("carrier" (enum "CarrierCode") 2) ("sessionId" string 3) ("verifier" string 4) ("standardAge" i32 5)) (enum "UserAgeType"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "checkUserAgeWithDocomo" ((("openIdRedirectUrl" string 2) ("standardAge" i32 3) ("verifier" string 4)) (struct "agecheckdocomoresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "retrieveOpenIdAuthUrlWithDocomo" (() string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "retrieveRequestToken" ((("carrier" (enum "CarrierCode") 2)) (struct "agecheckrequestresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception")))))

(thrift:def-service "BuddyManagementService" nil
  (:method "addBuddyMember" ((("requestId" string 1) ("userMid" string 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "addBuddyMembers" ((("requestId" string 1) ("userMids" (thrift:list string) 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "blockBuddyMember" ((("requestId" string 1) ("mid" string 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "commitSendMessagesToAll" ((("requestIdList" (thrift:list string) 1)) (thrift:list (struct "sendbuddymessageresult")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "commitSendMessagesToMids" ((("requestIdList" (thrift:list string) 1) ("mids" (thrift:list string) 2)) (thrift:list (struct "sendbuddymessageresult")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "containsBuddyMember" ((("requestId" string 1) ("userMid" string 2)) bool)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "downloadMessageContent" ((("requestId" string 1) ("messageId" string 2)) binary)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "downloadMessageContentPreview" ((("requestId" string 1) ("messageId" string 2)) binary)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "downloadProfileImage" ((("requestId" string 1)) binary)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "downloadProfileImagePreview" ((("requestId" string 1)) binary)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getActiveMemberCountByBuddyMid" ((("buddyMid" string 2)) i64)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getActiveMemberMidsByBuddyMid" ((("buddyMid" string 2)) (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getAllBuddyMembers" (() (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getBlockedBuddyMembers" (() (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getBlockerCountByBuddyMid" ((("buddyMid" string 2)) i64)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getBuddyDetailByMid" ((("buddyMid" string 2)) (struct "buddydetail"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getBuddyProfile" (() (struct "buddyprofile"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getContactTicket" (() (struct "ticket"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getMemberCountByBuddyMid" ((("buddyMid" string 2)) i64)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getSendBuddyMessageResult" ((("sendBuddyMessageRequestId" string 1)) (struct "sendbuddymessageresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getSetBuddyOnAirResult" ((("setBuddyOnAirRequestId" string 1)) (struct "setbuddyonairresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getUpdateBuddyProfileResult" ((("updateBuddyProfileRequestId" string 1)) (struct "updatebuddyprofileresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "isBuddyOnAirByMid" ((("buddyMid" string 2)) bool)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "linkAndSendBuddyContentMessageToAllAsync" ((("requestId" string 1) ("msg" (struct "message") 2) ("sourceContentId" string 3)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "linkAndSendBuddyContentMessageToMids" ((("requestId" string 1) ("msg" (struct "message") 2) ("sourceContentId" string 3) ("mids" (thrift:list string) 4)) (struct "sendbuddymessageresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "notifyBuddyBlocked" ((("buddyMid" string 1) ("blockerMid" string 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "notifyBuddyUnblocked" ((("buddyMid" string 1) ("blockerMid" string 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "registerBuddy" ((("buddyId" string 2) ("searchId" string 3) ("displayName" string 4) ("statusMeessage" string 5) ("picture" binary 6) ("settings" (thrift:map string string) 7)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "registerBuddyAdmin" ((("buddyId" string 2) ("searchId" string 3) ("displayName" string 4) ("statusMessage" string 5) ("picture" binary 6)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "reissueContactTicket" ((("expirationTime" i64 3) ("maxUseCount" i32 4)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "removeBuddyMember" ((("requestId" string 1) ("userMid" string 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "removeBuddyMembers" ((("requestId" string 1) ("userMids" (thrift:list string) 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "sendBuddyContentMessageToAll" ((("requestId" string 1) ("msg" (struct "message") 2) ("content" binary 3)) (struct "sendbuddymessageresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "sendBuddyContentMessageToAllAsync" ((("requestId" string 1) ("msg" (struct "message") 2) ("content" binary 3)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "sendBuddyContentMessageToMids" ((("requestId" string 1) ("msg" (struct "message") 2) ("content" binary 3) ("mids" (thrift:list string) 4)) (struct "sendbuddymessageresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "sendBuddyContentMessageToMidsAsync" ((("requestId" string 1) ("msg" (struct "message") 2) ("content" binary 3) ("mids" (thrift:list string) 4)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "sendBuddyMessageToAll" ((("requestId" string 1) ("msg" (struct "message") 2)) (struct "sendbuddymessageresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "sendBuddyMessageToAllAsync" ((("requestId" string 1) ("msg" (struct "message") 2)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "sendBuddyMessageToMids" ((("requestId" string 1) ("msg" (struct "message") 2) ("mids" (thrift:list string) 3)) (struct "sendbuddymessageresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "sendBuddyMessageToMidsAsync" ((("requestId" string 1) ("msg" (struct "message") 2) ("mids" (thrift:list string) 3)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "sendIndividualEventToAllAsync" ((("requestId" string 1) ("buddyMid" string 2) ("notificationStatus" (enum "NotificationStatus") 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "setBuddyOnAir" ((("requestId" string 1) ("onAir" bool 2)) (struct "setbuddyonairresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "setBuddyOnAirAsync" ((("requestId" string 1) ("onAir" bool 2)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "storeMessage" ((("requestId" string 1) ("messageRequest" (struct "buddymessagerequest") 2)) (struct "sendbuddymessageresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "unblockBuddyMember" ((("requestId" string 1) ("mid" string 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "unregisterBuddy" ((("requestId" string 1)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "unregisterBuddyAdmin" ((("requestId" string 1)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "updateBuddyAdminProfileAttribute" ((("requestId" string 1) ("attributes" (thrift:map string string) 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "updateBuddyAdminProfileImage" ((("requestId" string 1) ("picture" binary 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "updateBuddyProfileAttributes" ((("requestId" string 1) ("attributes" (thrift:map string string) 2)) (struct "updatebuddyprofileresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "updateBuddyProfileAttributesAsync" ((("requestId" string 1) ("attributes" (thrift:map string string) 2)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "updateBuddyProfileImage" ((("requestId" string 1) ("image" binary 2)) (struct "updatebuddyprofileresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "updateBuddyProfileImageAsync" ((("requestId" string 1) ("image" binary 2)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "updateBuddySearchId" ((("requestId" string 1) ("searchId" string 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "updateBuddySettings" ((("settings" (thrift:map string string) 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "uploadBuddyContent" ((("contentType" (enum "ContentType") 2) ("content" binary 3)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception")))))

(thrift:def-service "BuddyService" nil
  (:method "findBuddyContactsByQuery" ((("language" string 2) ("country" string 3) ("query" string 4) ("fromIndex" i32 5) ("count" i32 6) ("requestSource" (enum "BuddySearchRequestSource") 7)) (thrift:list (struct "buddysearchresult")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getBuddyContacts" ((("language" string 2) ("country" string 3) ("classification" string 4) ("fromIndex" i32 5) ("count" i32 6)) (thrift:list (struct "contact")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getBuddyDetail" ((("buddyMid" string 4)) (struct "buddydetail"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getBuddyOnAir" ((("buddyMid" string 4)) (struct "buddyonair"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getCountriesHavingBuddy" (() (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getNewlyReleasedBuddyIds" ((("country" string 3)) (thrift:map string i64))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getPopularBuddyBanner" ((("language" string 2) ("country" string 3) ("applicationType" (enum "ApplicationType") 4) ("resourceSpecification" string 5)) (struct "buddybanner"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getPopularBuddyLists" ((("language" string 2) ("country" string 3)) (thrift:list (struct "buddylist")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getPromotedBuddyContacts" ((("language" string 2) ("country" string 3)) (thrift:list (struct "contact")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception")))))

(thrift:def-service "ChannelApplicationProvidedService" nil
  (:method "activeBuddySubscriberCount" (() i64)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "addOperationForChannel" ((("opType" (enum "OpType") 1) ("param1" string 2) ("param2" string 3) ("param3" string 4)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "displayBuddySubscriberCount" (() i64)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "findContactByUseridWithoutAbuseBlockForChannel" ((("userid" string 2)) (struct "contact"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getAllContactIdsForChannel" (() (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getCompactContacts" ((("lastModifiedTimestamp" i64 2)) (thrift:list (struct "compactcontact")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getContactsForChannel" ((("ids" (thrift:list string) 2)) (thrift:list (struct "contact")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getDisplayName" ((("mid" string 2)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getFavoriteMidsForChannel" (() (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getFriendMids" (() (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getGroupMemberMids" ((("groupId" string 1)) (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getGroupsForChannel" ((("groupIds" (thrift:list string) 1)) (thrift:list (struct "group")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getIdentityCredential" (() (struct "identitycredential"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getJoinedGroupIdsForChannel" (() (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getMetaProfile" (() (struct "metaprofile"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getMid" (() string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getPrimaryClientForChannel" (() (struct "simplechannelclient"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getProfileForChannel" (() (struct "profile"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getSimpleChannelContacts" ((("ids" (thrift:list string) 1)) (thrift:list (struct "simplechannelcontact")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getUserCountryForBilling" ((("country" string 2) ("remoteIp" string 3)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getUserCreateTime" (() i64)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getUserIdentities" (() (thrift:map (enum "RegistrationType") string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getUserLanguage" (() string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getUserMidsWhoAddedMe" (() (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "isGroupMember" ((("groupId" string 1)) bool)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "isInContact" ((("mid" string 2)) bool)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "registerChannelCP" ((("cpId" string 2) ("registerPassword" string 3)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "removeNotificationStatus" ((("notificationStatus" (enum "NotificationStatus") 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "sendMessageForChannel" ((("message" (struct "message") 2)) (struct "message"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "sendPinCodeOperation" ((("verifier" string 1)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "updateProfileAttributeForChannel" ((("profileAttribute" (enum "ProfileAttribute") 2) ("value" string 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception")))))

(thrift:def-service "ChannelService" nil
  (:method "issueOTP" ((("channelId" string 2)) (struct "otpresult"))
   :exceptions (("e" nil :id 1 :type (struct "channelexception"))))
  (:method "approveChannelAndIssueChannelToken" ((("channelId" string 1)) (struct "channeltoken"))
   :exceptions (("e" nil :id 1 :type (struct "channelexception"))))
  (:method "approveChannelAndIssueRequestToken" ((("channelId" string 1) ("otpId" string 2)) string)
   :exceptions (("e" nil :id 1 :type (struct "channelexception"))))
  (:method "fetchNotificationItems" ((("localRev" i64 2)) (struct "notificationfetchresult"))
   :exceptions (("e" nil :id 1 :type (struct "channelexception"))))
  (:method "getApprovedChannels" ((("lastSynced" i64 2) ("locale" string 3)) (struct "approvedchannelinfos"))
   :exceptions (("e" nil :id 1 :type (struct "channelexception"))))
  (:method "getChannelInfo" ((("channelId" string 2) ("locale" string 3)) (struct "channelinfo"))
   :exceptions (("e" nil :id 1 :type (struct "channelexception"))))
  (:method "getChannelNotificationSetting" ((("channelId" string 1) ("locale" string 2)) (struct "channelnotificationsetting"))
   :exceptions (("e" nil :id 1 :type (struct "channelexception"))))
  (:method "getChannelNotificationSettings" ((("locale" string 1)) (thrift:list (struct "channelnotificationsetting")))
   :exceptions (("e" nil :id 1 :type (struct "channelexception"))))
  (:method "getChannels" ((("lastSynced" i64 2) ("locale" string 3)) (struct "channelinfos"))
   :exceptions (("e" nil :id 1 :type (struct "channelexception"))))
  (:method "getDomains" ((("lastSynced" i64 2)) (struct "channeldomains"))
   :exceptions (("e" nil :id 1 :type (struct "channelexception"))))
  (:method "getFriendChannelMatrices" ((("channelIds" (thrift:list string) 1)) (struct "friendchannelmatricesresponse"))
   :exceptions (("e" nil :id 1 :type (struct "channelexception"))))
  (:method "updateChannelSettings" ((("channelSettings" (struct "channelsettings") 1)) bool)
   :exceptions (("e" nil :id 1 :type (struct "channelexception"))))
  (:method "getCommonDomains" ((("lastSynced" i64 1)) (struct "channeldomains"))
   :exceptions (("e" nil :id 1 :type (struct "channelexception"))))
  (:method "getNotificationBadgeCount" ((("localRev" i64 2)) i32)
   :exceptions (("e" nil :id 1 :type (struct "channelexception"))))
  (:method "issueChannelToken" ((("channelId" string 1)) (struct "channeltoken"))
   :exceptions (("e" nil :id 1 :type (struct "channelexception"))))
  (:method "issueRequestToken" ((("channelId" string 1) ("otpId" string 2)) string)
   :exceptions (("e" nil :id 1 :type (struct "channelexception"))))
  (:method "issueRequestTokenWithAuthScheme" ((("channelId" string 1) ("otpId" string 2) ("authScheme" (thrift:list string) 3) ("returnUrl" string 4)) (struct "requesttokenresponse"))
   :exceptions (("e" nil :id 1 :type (struct "channelexception"))))
  (:method "issueRequestTokenForAutoLogin" ((("channelId" string 2) ("otpId" string 3) ("redirectUrl" string 4)) string)
   :exceptions (("e" nil :id 1 :type (struct "channelexception"))))
  (:method "getUpdatedChannelIds" ((("channelIds" (thrift:list (struct "channelidwithlastupdated")) 1)) (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "channelexception"))))
  (:method "reserveCoinUse" ((("request" (struct "coinusereservation") 2) ("locale" string 3)) string)
   :exceptions (("e" nil :id 1 :type (struct "channelexception"))))
  (:method "revokeChannel" ((("channelId" string 1)) void)
   :exceptions (("e" nil :id 1 :type (struct "channelexception"))))
  (:method "syncChannelData" ((("lastSynced" i64 2) ("locale" string 3)) (struct "channelsyncdatas"))
   :exceptions (("e" nil :id 1 :type (struct "channelexception"))))
  (:method "updateChannelNotificationSetting" ((("setting" (thrift:list (struct "channelnotificationsetting")) 1)) void)
   :exceptions (("e" nil :id 1 :type (struct "channelexception")))))

(thrift:def-service "MessageService" nil
  (:method "fetchMessageOperations" ((("localRevision" i64 2) ("lastOpTimestamp" i64 3) ("count" i32 4)) (struct "messageoperations"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getLastReadMessageIds" ((("chatId" string 2)) (struct "lastreadmessageids"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "multiGetLastReadMessageIds" ((("chatIds" (thrift:list string) 2)) (thrift:list (struct "lastreadmessageids")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception")))))

(thrift:def-service "ShopService" nil
  (:method "buyCoinProduct" ((("paymentReservation" (struct "paymentreservation") 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "buyFreeProduct" ((("receiverMid" string 2) ("productId" string 3) ("messageTemplate" i32 4) ("language" string 5) ("country" string 6) ("packageId" i64 7)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "buyMustbuyProduct" ((("receiverMid" string 2) ("productId" string 3) ("messageTemplate" i32 4) ("language" string 5) ("country" string 6) ("packageId" i64 7) ("serialNumber" string 8)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "checkCanReceivePresent" ((("recipientMid" string 2) ("packageId" i64 3) ("language" string 4) ("country" string 5)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getActivePurchases" ((("start" i64 2) ("size" i32 3) ("language" string 4) ("country" string 5)) (struct "productlist"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getActivePurchaseVersions" ((("start" i64 2) ("size" i32 3) ("language" string 4) ("country" string 5)) (struct "productsimplelist"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getCoinProducts" ((("appStoreCode" (enum "PaymentType") 2) ("country" string 3) ("language" string 4)) (thrift:list (struct "coinproductitem")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getCoinProductsByPgCode" ((("appStoreCode" (enum "PaymentType") 2) ("pgCode" (enum "PaymentPgType") 3) ("country" string 4) ("language" string 5)) (thrift:list (struct "coinproductitem")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getCoinPurchaseHistory" ((("request" (struct "coinhistorycondition") 2)) (struct "coinhistoryresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getCoinUseAndRefundHistory" ((("request" (struct "coinhistorycondition") 2)) (struct "coinhistoryresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getDownloads" ((("start" i64 2) ("size" i32 3) ("language" string 4) ("country" string 5)) (struct "productlist"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getEventPackages" ((("start" i64 2) ("size" i32 3) ("language" string 4) ("country" string 5)) (struct "productlist"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getNewlyReleasedPackages" ((("start" i64 2) ("size" i32 3) ("language" string 4) ("country" string 5)) (struct "productlist"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getPopularPackages" ((("start" i64 2) ("size" i32 3) ("language" string 4) ("country" string 5)) (struct "productlist"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getPresentsReceived" ((("start" i64 2) ("size" i32 3) ("language" string 4) ("country" string 5)) (struct "productlist"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getPresentsSent" ((("start" i64 2) ("size" i32 3) ("language" string 4) ("country" string 5)) (struct "productlist"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getProduct" ((("packageID" i64 2) ("language" string 3) ("country" string 4)) (struct "product"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getProductList" ((("productIdList" (thrift:list string) 2) ("language" string 3) ("country" string 4)) (struct "productlist"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getProductListWithCarrier" ((("productIdList" (thrift:list string) 2) ("language" string 3) ("country" string 4) ("carrierCode" string 5)) (struct "productlist"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getProductWithCarrier" ((("packageID" i64 2) ("language" string 3) ("country" string 4) ("carrierCode" string 5)) (struct "product"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getPurchaseHistory" ((("start" i64 2) ("size" i32 3) ("language" string 4) ("country" string 5)) (struct "productlist"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getTotalBalance" ((("appStoreCode" (enum "PaymentType") 2)) (struct "coin"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "notifyDownloaded" ((("packageId" i64 2) ("language" string 3)) i64)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "reserveCoinPurchase" ((("request" (struct "coinpurchasereservation") 2)) (struct "paymentreservationresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "reservePayment" ((("paymentReservation" (struct "paymentreservation") 2)) (struct "paymentreservationresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception")))))

(thrift:def-service "SnsAdaptorService" nil
  (:method "getSnsFriends" ((("snsIdType" (enum "SnsIdType") 2) ("snsAccessToken" string 3) ("startIdx" i32 4) ("limit" i32 5)) (struct "snsfriends"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getSnsMyProfile" ((("snsIdType" (enum "SnsIdType") 2) ("snsAccessToken" string 3)) (struct "snsprofile"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "postSnsInvitationMessage" ((("snsIdType" (enum "SnsIdType") 2) ("snsAccessToken" string 3) ("toSnsUserId" string 4)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception")))))

(thrift:def-service "TalkService" nil
  (:method "getChatRoomAnnouncementsBulk" ((("chatRoomMids" (thrift:list string) 2)) (thrift:map string (thrift:list (struct "chatroomannouncement"))))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getChatRoomAnnouncements" ((("chatRoomMid" string 2)) (thrift:list (struct "chatroomannouncement")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "createChatRoomAnnouncement" ((("reqSeq" i32 1) ("chatRoomMid" string 2) ("type" (enum "ChatRoomAnnouncementType") 3) ("contents" (struct "chatroomannouncementcontents") 4)) (struct "chatroomannouncement"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "removeChatRoomAnnouncement" ((("reqSeq" i32 1) ("chatRoomMid" string 2) ("announcementSeq" i64 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "unsendMessage" ((("seq" i32 1) ("messageId" string 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getGroupWithoutMembers" ((("groupId" string 2)) (struct "group"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "requestResendMessage" ((("reqSeq" i32 1) ("senderMid" string 2) ("messageId" string 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "respondResendMessage" ((("reqSeq" i32 1) ("receiverMid" string 2) ("originalMessageId" string 3) ("resendMessage" (struct "message") 4) ("errorCode" (enum "ErrorCode") 5)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "acceptGroupInvitation" ((("reqSeq" i32 1) ("groupId" string 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "acceptGroupInvitationByTicket" ((("reqSeq" i32 1) ("GroupMid" string 2) ("ticketId" string 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "acceptProximityMatches" ((("sessionId" string 2) ("ids" (thrift:set string) 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "acquireCallRoute" ((("to" string 2)) (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "acquireCallTicket" ((("to" string 2)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "acquireEncryptedAccessToken" ((("featureType" (enum "FeatureType") 2)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "addSnsId" ((("snsIdType" (enum "SnsIdType") 2) ("snsAccessToken" string 3)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "blockContact" ((("reqSeq" i32 1) ("id" string 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "blockRecommendation" ((("reqSeq" i32 1) ("id" string 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "cancelGroupInvitation" ((("reqSeq" i32 1) ("groupId" string 2) ("contactIds" (thrift:list string) 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "changeVerificationMethod" ((("sessionId" string 2) ("method" (enum "VerificationMethod") 3)) (struct "verificationsessiondata"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "clearIdentityCredential" (() void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "clearMessageBox" ((("channelId" string 2) ("messageBoxId" string 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "closeProximityMatch" ((("sessionId" string 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "commitSendMessage" ((("seq" i32 1) ("messageId" string 2) ("receiverMids" (thrift:list string) 3)) (thrift:map string string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "commitSendMessages" ((("seq" i32 1) ("messageIds" (thrift:list string) 2) ("receiverMids" (thrift:list string) 3)) (thrift:map string string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "commitUpdateProfile" ((("seq" i32 1) ("attrs" (thrift:list (enum "ProfileAttribute")) 2) ("receiverMids" (thrift:list string) 3)) (thrift:map string string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "confirmEmail" ((("verifier" string 2) ("pinCode" string 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "createGroup" ((("seq" i32 1) ("name" string 2) ("contactIds" (thrift:list string) 3)) (struct "group"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "createQrcodeBase64Image" ((("url" string 2) ("characterSet" string 3) ("imageSize" i32 4) ("x" i32 5) ("y" i32 6) ("width" i32 7) ("height" i32 8)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "createRoom" ((("reqSeq" i32 1) ("contactIds" (thrift:list string) 2)) (struct "room"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "createSession" (() string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "fetchAnnouncements" ((("lastFetchedIndex" i32 2)) (thrift:list (struct "announcement")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "fetchMessages" ((("localTs" i64 2) ("count" i32 3)) (thrift:list (struct "message")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "fetchOperations" ((("localRev" i64 2) ("count" i32 3)) (thrift:list (struct "operation")))
   :exceptions (("e" nil :id 1 :type (struct "shouldsyncexception"))))
  (:method "fetchOps" ((("localRev" i64 2) ("count" i32 3) ("globalRev" i64 4) ("individualRev" i64 5)) (thrift:list (struct "operation")))
   :exceptions (("e" nil :id 1 :type (struct "shouldsyncexception"))))
  (:method "findAndAddContactsByEmail" ((("reqSeq" i32 1) ("emails" (thrift:set string) 2)) (thrift:map string (struct "contact")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "findAndAddContactsByMid" ((("reqSeq" i32 1) ("mid" string 2) ("type" (enum "ContactType") 3) ("reference" string 4)) (thrift:map string (struct "contact")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "findGroupByTicketV2" ((("ticketId" string 1)) (struct "group"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "findAndAddContactsByPhone" ((("reqSeq" i32 1) ("phones" (thrift:set string) 2)) (thrift:map string (struct "contact")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getFriendRequests" ((("direction" (enum "FriendRequestDirection") 1) ("lastSeenSeqId" i64 2)) (thrift:list (struct "friendrequest")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "removeFriendRequest" ((("direction" (enum "FriendRequestDirection") 1) ("midOrEMid" string 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "findAndAddContactsByUserid" ((("reqSeq" i32 1) ("userid" string 2)) (thrift:map string (struct "contact")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "findContactByUserid" ((("userid" string 2)) (struct "contact"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "findContactByUserTicket" ((("ticketIdWithTag" string 2)) (struct "contact"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "findContactsByEmail" ((("emails" (thrift:set string) 2)) (thrift:map string (struct "contact")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "findContactsByPhone" ((("phones" (thrift:set string) 2)) (thrift:map string (struct "contact")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "findSnsIdUserStatus" ((("snsIdType" (enum "SnsIdType") 2) ("snsAccessToken" string 3) ("udidHash" string 4)) (struct "snsiduserstatus"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "finishUpdateVerification" ((("sessionId" string 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "generateUserTicket" ((("expirationTime" i64 3) ("maxUseCount" i32 4)) (struct "ticket"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "destroyMessage" ((("seq" i32 1) ("chatId" string 2) ("messageId" string 3) ("sessionId" i8 4)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getAcceptedProximityMatches" ((("sessionId" string 2)) (thrift:set string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getActiveBuddySubscriberIds" (() (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getAllContactIds" (() (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getAuthQrcode" ((("keepLoggedIn" bool 2) ("systemName" string 3)) (struct "authqrcode"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getBlockedContactIds" (() (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "registerWithPhoneNumber" ((("sessionId" string 2) ("migrationPincodeSessionId" string 3)) (struct "registerwithphonenumberresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "registerWithPhoneNumberAndPassword" ((("sessionId" string 2) ("keynm" string 3) ("encrypted" string 4)) (struct "registerwithphonenumberresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getAnalyticsInfo" (() (struct "analyticsinfo"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "reportClientStatistics" ((("reqSeq" i32 1) ("category" (enum "ReportCategory") 2) ("count" i32 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "verifyPhoneNumberForLogin" ((("verifierFromPhone" string 2) ("pinCodeForPhone" string 3) ("verifierFromLogin" string 4)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "verifyPhoneNumber" ((("sessionId" string 2) ("pinCode" string 3) ("udidHash" string 4) ("migrationPincodeSessionId" string 5) ("oldUdidHash" string 6)) (struct "phoneverificationresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getBlockedContactIdsByRange" ((("start" i32 2) ("count" i32 3)) (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getBlockedRecommendationIds" (() (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getBuddyBlockerIds" (() (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getBuddyLocation" ((("mid" string 2) ("index" i32 3)) (struct "geolocation"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getCompactContactsModifiedSince" ((("timestamp" i64 2)) (thrift:list (struct "compactcontact")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getCompactGroup" ((("groupId" string 2)) (struct "group"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getCompactRoom" ((("roomId" string 2)) (struct "room"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getContact" ((("id" string 2)) (struct "contact"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getContacts" ((("ids" (thrift:list string) 2)) (thrift:list (struct "contact")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getContactWithFriendRequestStatus" ((("id" string 2)) (struct "contact"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getCountryWithRequestIp" (() string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getFavoriteMids" (() (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getGroup" ((("groupId" string 2)) (struct "group"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getGroupIdsInvited" (() (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getGroupIdsJoined" (() (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getGroups" ((("groupIds" (thrift:list string) 2)) (thrift:list (struct "group")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getHiddenContactMids" (() (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getIdentityIdentifier" (() string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getLastAnnouncementIndex" (() i32)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getLastOpRevision" (() i64)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getSuggestRevisions" (() (struct "suggestdictionaryrevisions"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getPreviousMessagesV2WithReadCount" ((("messageBoxId" string 2) ("endMessageId" (struct "messageboxv2messageid") 3) ("messagesCount" i32 4)) (thrift:list (struct "message")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getMessageBox" ((("channelId" string 2) ("messageBoxId" string 3) ("lastMessagesCount" i32 4)) (struct "tmessagebox"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getMessageBoxCompactWrapUp" ((("mid" string 2)) (struct "tmessageboxwrapup"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getMessageBoxCompactWrapUpList" ((("start" i32 2) ("messageBoxCount" i32 3)) (struct "tmessageboxwrapupresponse"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getMessageBoxList" ((("channelId" string 2) ("lastMessagesCount" i32 3)) (thrift:list (struct "tmessagebox")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getMessageBoxListByStatus" ((("channelId" string 2) ("lastMessagesCount" i32 3) ("status" i32 4)) (thrift:list (struct "tmessagebox")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getMessageBoxWrapUp" ((("mid" string 2)) (struct "tmessageboxwrapup"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getMessageBoxWrapUpList" ((("start" i32 2) ("messageBoxCount" i32 3)) (struct "tmessageboxwrapupresponse"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getMessagesBySequenceNumber" ((("channelId" string 2) ("messageBoxId" string 3) ("startSeq" i64 4) ("endSeq" i64 5)) (thrift:list (struct "message")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getNextMessages" ((("messageBoxId" string 2) ("startSeq" i64 3) ("messagesCount" i32 4)) (thrift:list (struct "message")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getNotificationPolicy" ((("carrier" (enum "CarrierCode") 2)) (thrift:list (enum "NotificationType")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getPreviousMessages" ((("messageBoxId" string 2) ("endSeq" i64 3) ("messagesCount" i32 4)) (thrift:list (struct "message")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getProfile" (() (struct "profile"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getProximityMatchCandidateList" ((("sessionId" string 2)) (struct "proximitymatchcandidateresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getProximityMatchCandidates" ((("sessionId" string 2)) (thrift:set (struct "contact")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getRecentMessages" ((("messageBoxId" string 2) ("messagesCount" i32 3)) (thrift:list (struct "message")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getRecommendationIds" (() (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getRoom" ((("roomId" string 2)) (struct "room"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getRSAKeyInfo" ((("provider" (enum "IdentityProvider") 2)) (struct "rsakey"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getServerTime" (() i64)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getSessions" (() (thrift:list (struct "loginsession")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getSettings" (() (struct "settings"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getGroupsV2" ((("groupIds" (thrift:list string) 2)) (thrift:list (struct "group")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getSettingsAttributes" ((("attrBitset" i32 2)) (struct "settings"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getSystemConfiguration" (() (struct "systemconfiguration"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getUserTicket" (() (struct "ticket"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getWapInvitation" ((("invitationHash" string 2)) (struct "wapinvitation"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "invalidateUserTicket" (() void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "inviteFriendsBySms" ((("phoneNumberList" (thrift:list string) 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "inviteIntoGroup" ((("reqSeq" i32 1) ("groupId" string 2) ("contactIds" (thrift:list string) 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "inviteIntoRoom" ((("reqSeq" i32 1) ("roomId" string 2) ("contactIds" (thrift:list string) 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "inviteViaEmail" ((("reqSeq" i32 1) ("email" string 2) ("name" string 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "isIdentityIdentifierAvailable" ((("provider" (enum "IdentityProvider") 3) ("identifier" string 2)) bool)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "isUseridAvailable" ((("userid" string 2)) bool)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "kickoutFromGroup" ((("reqSeq" i32 1) ("groupId" string 2) ("contactIds" (thrift:list string) 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "reissueGroupTicket" ((("groupMid" string 1)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "findGroupByTicket" ((("ticketId" string 1)) (struct "group"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "leaveGroup" ((("reqSeq" i32 1) ("groupId" string 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "leaveRoom" ((("reqSeq" i32 1) ("roomId" string 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "loginWithIdentityCredential" ((("identityProvider" (enum "IdentityProvider") 8) ("identifier" string 3) ("password" string 4) ("keepLoggedIn" bool 5) ("accessLocation" string 6) ("systemName" string 7) ("certificate" string 9)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "loginWithIdentityCredentialForCertificate" ((("identityProvider" (enum "IdentityProvider") 8) ("identifier" string 3) ("password" string 4) ("keepLoggedIn" bool 5) ("accessLocation" string 6) ("systemName" string 7) ("certificate" string 9)) (struct "loginresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "loginWithVerifier" ((("verifier" string 3)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "loginWithVerifierForCerificate" ((("verifier" string 3)) (struct "loginresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "loginWithVerifierForCertificate" ((("verifier" string 3)) (struct "loginresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "logout" (() void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "logoutSession" ((("tokenKey" string 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "noop" (() void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "notifiedRedirect" ((("paramMap" (thrift:map string string) 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "notifyBuddyOnAir" ((("seq" i32 1) ("receiverMids" (thrift:list string) 2)) (thrift:map string string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "notifyIndividualEvent" ((("notificationStatus" (enum "NotificationStatus") 2) ("receiverMids" (thrift:list string) 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "notifyInstalled" ((("udidHash" string 2) ("applicationTypeWithExtensions" string 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "notifyRegistrationComplete" ((("udidHash" string 2) ("applicationTypeWithExtensions" string 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "notifySleep" ((("lastRev" i64 2) ("badge" i32 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "notifyUpdated" ((("lastRev" i64 2) ("deviceInfo" (struct "deviceinfo") 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "openProximityMatch" ((("location" (struct "location") 2)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "registerBuddyUser" ((("buddyId" string 2) ("registrarPassword" string 3)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "registerBuddyUserid" ((("seq" i32 2) ("userid" string 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "registerDevice" ((("sessionId" string 2)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "registerDeviceWithIdentityCredential" ((("sessionId" string 2) ("provider" (enum "IdentityProvider") 5) ("identifier" string 3) ("verifier" string 4)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "registerDeviceWithoutPhoneNumber" ((("region" string 2) ("udidHash" string 3) ("deviceInfo" (struct "deviceinfo") 4)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "registerDeviceWithoutPhoneNumberWithIdentityCredential" ((("region" string 2) ("udidHash" string 3) ("deviceInfo" (struct "deviceinfo") 4) ("provider" (enum "IdentityProvider") 5) ("identifier" string 6) ("verifier" string 7) ("mid" string 8) ("migrationPincodeSessionId" string 9)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "registerUserid" ((("reqSeq" i32 1) ("userid" string 2)) bool)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "registerWapDevice" ((("invitationHash" string 2) ("guidHash" string 3) ("email" string 4) ("deviceInfo" (struct "deviceinfo") 5)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "registerWithExistingSnsIdAndIdentityCredential" ((("identityCredential" (struct "identitycredential") 2) ("region" string 3) ("udidHash" string 4) ("deviceInfo" (struct "deviceinfo") 5)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "registerWithSnsId" ((("snsIdType" (enum "SnsIdType") 2) ("snsAccessToken" string 3) ("region" string 4) ("udidHash" string 5) ("deviceInfo" (struct "deviceinfo") 6) ("mid" string 7)) (struct "registerwithsnsidresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "registerWithSnsIdAndIdentityCredential" ((("snsIdType" (enum "SnsIdType") 2) ("snsAccessToken" string 3) ("identityCredential" (struct "identitycredential") 4) ("region" string 5) ("udidHash" string 6) ("deviceInfo" (struct "deviceinfo") 7)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "reissueDeviceCredential" (() string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "reissueUserTicket" ((("expirationTime" i64 3) ("maxUseCount" i32 4)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getMessageReadRange" ((("chatIds" (thrift:list string) 2)) (thrift:list (struct "tmessagereadrange")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "rejectGroupInvitation" ((("reqSeq" i32 1) ("groupId" string 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "releaseSession" (() void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "removeAllMessages" ((("seq" i32 1) ("lastMessageId" string 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "removeBuddyLocation" ((("mid" string 2) ("index" i32 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "removeMessage" ((("messageId" string 2)) bool)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "makeUserAddMyselfAsContact" ((("contactOwnerMid" string 1)) (struct "contacttransition"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "removeMessageFromMyHome" ((("messageId" string 2)) bool)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "removeSnsId" ((("snsIdType" (enum "SnsIdType") 2)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "report" ((("syncOpRevision" i64 2) ("category" (enum "SyncCategory") 3) ("report" string 4)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "reportContacts" ((("syncOpRevision" i64 2) ("category" (enum "SyncCategory") 3) ("contactReports" (thrift:list (struct "contactreport")) 4) ("actionType" (enum "SyncActionType") 5)) (thrift:list (struct "contactreportresult")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "reportGroups" ((("syncOpRevision" i64 2) ("groups" (thrift:list (struct "group")) 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "reportProfile" ((("syncOpRevision" i64 2) ("profile" (struct "profile") 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "reportRooms" ((("syncOpRevision" i64 2) ("rooms" (thrift:list (struct "room")) 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "findAndAddContactByMetaTag" ((("reqSeq" i32 1) ("userid" string 2) ("reference" string 3)) (struct "contact"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "reportSettings" ((("syncOpRevision" i64 2) ("settings" (struct "settings") 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "reportSpam" ((("chatMid" string 2) ("memberMids" (thrift:list string) 3) ("spammerReasons" (thrift:list (enum "SpammerReason")) 4) ("senderMids" (thrift:list string) 5) ("spamMessageIds" (thrift:list string) 6) ("spamMessages" (thrift:list string) 7)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "reportSpammer" ((("spammerMid" string 2) ("spammerReasons" (thrift:list (enum "SpammerReason")) 3) ("spamMessageIds" (thrift:list string) 4)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "requestAccountPasswordReset" ((("provider" (enum "IdentityProvider") 4) ("identifier" string 2) ("locale" string 5)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "requestEmailConfirmation" ((("emailConfirmation" (struct "emailconfirmation") 2)) (struct "emailconfirmationsession"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "requestIdentityUnbind" ((("provider" (enum "IdentityProvider") 4) ("identifier" string 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "resendEmailConfirmation" ((("verifier" string 2)) (struct "emailconfirmationsession"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "resendPinCode" ((("sessionId" string 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "resendPinCodeBySMS" ((("sessionId" string 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "sendChatChecked" ((("seq" i32 1) ("consumer" string 2) ("lastMessageId" string 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "sendMessageAwaitCommit" ((("seq" i32 1) ("message" (struct "message") 2)) (struct "commitmessageresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "sendChatRemoved" ((("seq" i32 1) ("consumer" string 2) ("lastMessageId" string 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "sendContentPreviewUpdated" ((("esq" i32 1) ("messageId" string 2) ("receiverMids" (thrift:list string) 3)) (thrift:map string string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "sendContentReceipt" ((("seq" i32 1) ("consumer" string 2) ("messageId" string 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "sendDummyPush" (() void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "removeE2EEPublicKey" ((("publicKey" (struct "e2eepublickey") 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "negotiateE2EEPublicKey" ((("mid" string 2)) (struct "e2eenegotiationresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getE2EEPublicKey" ((("mid" string 2) ("version" i32 3) ("keyId" i32 4)) (struct "e2eepublickey"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "requestE2EEKeyExchange" ((("reqSeq" i32 1) ("temporalPublicKey" binary 2) ("publicKey" (struct "e2eepublickey") 3) ("verifier" binary 4)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getLastE2EEPublicKeys" ((("chatMid" string 2)) (thrift:map string (struct "e2eepublickey")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "registerE2EEPublicKey" ((("reqSeq" i32 1) ("publicKey" (struct "e2eepublickey") 2)) (struct "e2eepublickey"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getE2EEPublicKeys" (() (thrift:list (struct "e2eepublickey")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getE2EEPublicKeysEx" ((("ignoreE2EEStatus" bool 2)) (thrift:list (struct "e2eepublickey")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getReadMessageOpsInBulk" ((("chatIds" (thrift:list string) 2)) (thrift:list (struct "operation")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "sendEvent" ((("seq" i32 1) ("message" (struct "message") 2)) (struct "message"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "sendMessage" ((("seq" i32 1) ("message" (struct "message") 2)) (struct "message"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "sendMessageIgnored" ((("seq" i32 1) ("consumer" string 2) ("messageIds" (thrift:list string) 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "sendMessageReceipt" ((("seq" i32 1) ("consumer" string 2) ("messageIds" (thrift:list string) 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "findContactByMetaTag" ((("userid" string 2) ("reference" string 3)) (struct "contact"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "sendMessageToMyHome" ((("seq" i32 1) ("message" (struct "message") 2)) (struct "message"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "setBuddyLocation" ((("mid" string 2) ("index" i32 3) ("location" (struct "geolocation") 4)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "setIdentityCredential" ((("identifier" string 2) ("verifier" string 3) ("provider" (enum "IdentityProvider") 4)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "setNotificationsEnabled" ((("reqSeq" i32 1) ("type" (enum "MIDType") 2) ("target" string 3) ("enablement" bool 4)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "startUpdateVerification" ((("region" string 2) ("carrier" (enum "CarrierCode") 3) ("phone" string 4) ("udidHash" string 5) ("deviceInfo" (struct "deviceinfo") 6) ("networkCode" string 7) ("locale" string 8)) (struct "verificationsessiondata"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "startVerification" ((("region" string 2) ("carrier" (enum "CarrierCode") 3) ("phone" string 4) ("udidHash" string 5) ("deviceInfo" (struct "deviceinfo") 6) ("networkCode" string 7) ("mid" string 8) ("locale" string 9) ("simInfo" (struct "siminfo") 10) ("oldUdidHash" string 11)) (struct "verificationsessiondata"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "updateGroupPreferenceAttribute" ((("reqSeq" i32 1) ("groupMid" string 2) ("updatedAttrs" (thrift:map (enum "GroupPreferenceAttribute") string) 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "createRoomV2" ((("reqSeq" i32 1) ("contactIds" (thrift:list string) 2)) (struct "room"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "storeUpdateProfileAttribute" ((("seq" i32 1) ("profileAttribute" (enum "ProfileAttribute") 2) ("value" string 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "syncContactBySnsIds" ((("reqSeq" i32 1) ("modifications" (thrift:list (struct "snsfriendmodification")) 2)) (thrift:list (struct "snsfriendcontactregistration")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "syncContacts" ((("reqSeq" i32 1) ("localContacts" (thrift:list (struct "contactmodification")) 2)) (thrift:map string (struct "contactregistration")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "trySendMessage" ((("seq" i32 1) ("message" (struct "message") 2)) (struct "message"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getNextMessagesV2" ((("messageBoxId" string 2) ("startMessageId" (struct "messageboxv2messageid") 3) ("messagesCount" i32 4)) (thrift:list (struct "message")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getMessageBoxCompactWrapUpV2" ((("messageBoxId" string 2)) (struct "tmessageboxwrapup"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getRecentMessagesV2" ((("messageBoxId" string 2) ("messagesCount" i32 3)) (thrift:list (struct "message")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "validateContactsOnBot" ((("contacts" (thrift:list string) 2)) (thrift:map string string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "tryFriendRequest" ((("midOrEMid" string 1) ("method" (enum "FriendRequestMethod") 2) ("friendRequestParams" string 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "unblockContact" ((("reqSeq" i32 1) ("id" string 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "unblockRecommendation" ((("reqSeq" i32 1) ("id" string 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "unregisterUserAndDevice" (() string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "updateApnsDeviceToken" ((("apnsDeviceToken" binary 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "updateBuddySetting" ((("key" string 2) ("value" string 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "updateC2DMRegistrationId" ((("registrationId" string 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "updateContactSetting" ((("reqSeq" i32 1) ("mid" string 2) ("flag" (enum "ContactSetting") 3) ("value" string 4)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "updateCustomModeSettings" ((("customMode" (enum "CustomMode") 2) ("paramMap" (thrift:map string string) 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "updateDeviceInfo" ((("deviceUid" string 2) ("deviceInfo" (struct "deviceinfo") 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "updateGroup" ((("reqSeq" i32 1) ("group" (struct "group") 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "updateNotificationToken" ((("type" (enum "NotificationType") 3) ("token" string 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "updateNotificationTokenWithBytes" ((("type" (enum "NotificationType") 3) ("token" binary 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "updateProfile" ((("reqSeq" i32 1) ("profile" (struct "profile") 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "updateProfileAttribute" ((("reqSeq" i32 1) ("attr" (enum "ProfileAttribute") 2) ("value" string 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "updateRegion" ((("region" string 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "updateSettings" ((("reqSeq" i32 1) ("settings" (struct "settings") 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "updateSettings2" ((("reqSeq" i32 1) ("settings" (struct "settings") 2)) i32)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "updateSettingsAttribute" ((("reqSeq" i32 1) ("attr" (enum "SettingsAttribute") 2) ("value" string 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "updateSettingsAttributes" ((("reqSeq" i32 1) ("attrBitset" i32 2) ("settings" (struct "settings") 3)) i32)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "verifyIdentityCredential" ((("identityProvider" (enum "IdentityProvider") 8) ("identifier" string 3) ("password" string 4)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "verifyIdentityCredentialWithResult" ((("identityCredential" (struct "identitycredential") 2)) (struct "userauthstatus"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "verifyPhone" ((("sessionId" string 2) ("pinCode" string 3) ("udidHash" string 4)) (enum "VerificationResult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "verifyQrcode" ((("verifier" string 2) ("pinCode" string 3)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception")))))

(thrift:def-service "UniversalNotificationService" nil
  (:method "notify" ((("event" (struct "globalevent") 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "universalnotificationserviceexception")))))

(thrift:def-service "CallService" nil
  (:method "getUserStatus" ((("mid" string 1)) (enum "UserStatus"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "updateProfileAttributeForChannel" ((("profileAttribute" (enum "ProfileAttribute") 2) ("value" string 3)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "updateExtendedProfileAttribute" ((("attr" (enum "ExtendedProfileAttribute") 1) ("extendedProfile" (struct "extendedprofile") 2)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getAllSimpleChannelContacts" ((("statusSticonFallbackDisabled" bool 1)) (thrift:list (struct "simplechannelcontact")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getUserIdentities" (() (thrift:map (enum "RegistrationType") string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "markPaidCallAd" ((("dialedNumber" string 2) ("language" string 3) ("disableCallerId" bool 4)) (struct "paidcalldialing"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "isGroupMember" ((("groupId" string 1)) bool)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getPhoneInfoFromPhoneNumber" ((("region" string 1) ("phoneNumber" string 2)) (struct "phoneinfoforchannel"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "redeemPaidCallVoucher" ((("serial" string 2) ("language" string 3)) (struct "paidcallredeemresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getPreferredDisplayName" ((("mids" (thrift:list string) 1)) (thrift:map string string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getContactsForChannel" ((("ids" (thrift:list string) 2)) (thrift:list (struct "contact")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getCallCreditProducts" ((("appStoreCode" (enum "PaymentType") 2) ("pgCode" (enum "PaymentPgType") 3) ("country" string 4) ("language" string 5)) (thrift:list (struct "coinproductitem")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getCompactContacts" ((("lastModifiedTimestamp" i64 2)) (thrift:list (struct "compactcontact")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "notifyNotiCenterEvent" ((("event" (struct "noticentereventdata") 1)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "isInContact" ((("mid" string 2)) bool)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "lookupGroupMembers" ((("groupId" string 1) ("mids" (thrift:list string) 2)) (thrift:list (struct "simplechannelcontact")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getRoomInformation" ((("roomMid" string 1)) (struct "room"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getGroupCall" ((("chatMid" string 2)) (struct "groupcall"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "isAllowSecondaryDeviceLogin" (() bool)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getPrimaryClientForChannel" (() (struct "simplechannelclient"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "createRoomWithBuddy" ((("reqSeq" i32 1) ("buddyMid" string 2) ("contactIds" (thrift:list string) 3)) (struct "room"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getDisplayName" ((("mid" string 2)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getPaidCallMetadata" ((("language" string 2)) (struct "paidcallmetadataresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getMid" (() string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getUserCountryForBilling" ((("country" string 2) ("remoteIp" string 3)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getFavoriteGroupIdsForChannel" (() (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getPaidCallHistory" ((("start" i64 2) ("size" i32 3) ("language" string 4)) (struct "paidcallhistoryresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "sendPinCodeOperation" ((("verifier" string 1)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "inviteIntoGroupCall" ((("chatMid" string 2) ("memberMids" (thrift:list string) 3) ("mediaType" (enum "GroupCallMediaType") 4)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getFriendMids" (() (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getMetaProfile" (() (struct "metaprofile"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "sendMessageForChannel" ((("message" (struct "message") 2)) (struct "message"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "activeBuddySubscriberCount" (() i64)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getCallCreditPurchaseHistory" ((("request" (struct "coinhistorycondition") 2)) (struct "coinhistoryresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "isRoomMember" ((("roomId" string 1)) bool)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "sendSystemOAMessage" ((("message" (struct "message") 1)) (struct "message"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "acquirePaidCallRoute" ((("paidCallType" (enum "PaidCallType") 2) ("dialedNumber" string 3) ("language" string 4) ("networkCode" string 5) ("disableCallerId" bool 6) ("referer" string 7) ("adSessionId" string 8)) (struct "paidcallresponse"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getGroupsForChannel" ((("groupIds" (thrift:list string) 1)) (thrift:list (struct "group")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getUserCreateTime" (() i64)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "registerChannelCP" ((("cpId" string 2) ("registerPassword" string 3)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "reserveCallCreditPurchase" ((("request" (struct "coinpurchasereservation") 2)) (struct "paymentreservationresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "acquirePaidCallCurrencyExchangeRate" ((("language" string 2)) (thrift:list (struct "paidcallcurrencyexchangerate")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getRoomMemberMidsForAppPlatform" ((("roomId" string 1)) (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getPaidCallBalanceList" ((("language" string 2)) (thrift:list (struct "paidcallbalance")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getPersonalInfos" ((("requiredPersonalInfos" (thrift:set (enum "PersonalInfo")) 1)) (thrift:map (enum "PersonalInfo") string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getPrimaryClientsForChannel" ((("userMids" (thrift:list string) 1)) (thrift:list (struct "simplechannelclient")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "addBuddyToContact" ((("buddyMid" string 1)) (struct "contacttransition"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getGroupMemberMidsForAppPlatform" ((("groupId" string 1)) (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getUserLanguage" (() string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "lookupPaidCall" ((("dialedNumber" string 2) ("language" string 3) ("referer" string 4)) (struct "paidcallresponse"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getExtendedProfile" (() (struct "extendedprofile"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getReverseCompactContacts" ((("ids" (thrift:list string) 1)) (thrift:map string (struct "compactcontact")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getPaidCallAdStatus" (() (struct "paidcalladresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "findContactByUseridWithoutAbuseBlockForChannel" ((("userid" string 2)) (struct "contact"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getGroupMemberMids" ((("groupId" string 1)) (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "sendMessageWithoutRelationship" ((("message" (struct "message") 2)) (struct "message"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "displayBuddySubscriberCountInBulk" ((("mids" (thrift:list string) 1)) (thrift:map string i64))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "lookupRoomMembers" ((("roomId" string 1) ("mids" (thrift:list string) 2)) (thrift:list (struct "simplechannelcontact")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getFavoriteMidsForChannel" (() (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getAllContactIdsForChannel" (() (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "displayBuddySubscriberCount" (() i64)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getProfileForChannel" (() (struct "profile"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getUserTickets" ((("userMids" (thrift:list string) 1)) (thrift:list (struct "userticketresponse")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getOAFriendMids" (() (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "searchPaidCallUserRate" ((("countryCode" string 2) ("language" string 3)) (thrift:list (struct "paidcalluserrate")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getJoinedGroupIdsForChannel" (() (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "acquireGroupCallRoute" ((("chatMid" string 2) ("mediaType" (enum "GroupCallMediaType") 3)) (struct "groupcallroute"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getUserMidsWhoAddedMe" (() (thrift:list string))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getIdentityCredential" (() (struct "identitycredential"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "addOperationForChannel" ((("opType" (enum "OpType") 1) ("param1" string 2) ("param2" string 3) ("param3" string 4)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getSimpleChannelContacts" ((("ids" (thrift:list string) 1) ("statusSticonFallbackDisabled" bool 2)) (thrift:list (struct "simplechannelcontact")))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "getUserLastSentMessageTimeStamp" ((("mid" string 1)) i64)
   :exceptions (("e" nil :id 1 :type (struct "talkexception")))))

(thrift:def-service "AuthService" nil
  (:method "normalizePhoneNumber" ((("countryCode" string 2) ("phoneNumber" string 3) ("countryCodeHint" string 4)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "respondE2EELoginRequest" ((("verifier" string 1) ("publicKey" (struct "e2eepublickey") 2) ("encryptedKeyChain" binary 3) ("hashKeyChain" binary 4) ("errorCode" (enum "ErrorCode") 5)) void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "confirmE2EELogin" ((("verifier" string 1) ("deviceSecret" binary 2)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "logoutZ" (() void)
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "loginZ" ((("loginRequest" (struct "loginrequest") 2)) (struct "loginresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "issueTokenForAccountMigrationSettings" ((("enforce" bool 2)) (struct "securitycenterresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "issueTokenForAccountMigration" ((("migrationSessionId" string 2)) (struct "securitycenterresult"))
   :exceptions (("e" nil :id 1 :type (struct "talkexception"))))
  (:method "verifyQrcodeWithE2EE" ((("verifier" string 2) ("pinCode" string 3) ("errorCode" (enum "ErrorCode") 4) ("publicKey" (struct "e2eepublickey") 5) ("encryptedKeyChain" binary 6) ("hashKeyChain" binary 7)) string)
   :exceptions (("e" nil :id 1 :type (struct "talkexception")))))

(thrift:def-service "SquareService" nil
  (:method "getSquareChatAnnouncements" ((("request" (struct "getsquarechatannouncementsrequest") 1)) (struct "getsquarechatannouncementsresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "deleteSquareChatAnnouncement" ((("request" (struct "deletesquarechatannouncementrequest") 1)) (struct "deletesquarechatannouncementresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "createSquareChatAnnouncement" ((("request" (struct "createsquarechatannouncementrequest") 1)) (struct "createsquarechatannouncementresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "getNoteStatus" ((("request" (struct "getnotestatusrequest") 1)) (struct "getnotestatusresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "getSquareStatus" ((("request" (struct "getsquarestatusrequest") 1)) (struct "getsquarestatusresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "reportSquareMember" ((("request" (struct "reportsquarememberrequest") 1)) (struct "reportsquarememberresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "reportSquareMessage" ((("request" (struct "reportsquaremessagerequest") 1)) (struct "reportsquaremessageresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "reportSquareChat" ((("request" (struct "reportsquarechatrequest") 1)) (struct "reportsquarechatresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "reportSquare" ((("request" (struct "reportsquarerequest") 1)) (struct "reportsquareresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "updateSquareMemberRelation" ((("request" (struct "updatesquarememberrelationrequest") 1)) (struct "updatesquarememberrelationresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "updateSquareAuthority" ((("request" (struct "updatesquareauthorityrequest") 1)) (struct "updatesquareauthorityresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "updateSquareChatMember" ((("request" (struct "updatesquarechatmemberrequest") 1)) (struct "updatesquarechatmemberresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "updateSquareChat" ((("request" (struct "updatesquarechatrequest") 1)) (struct "updatesquarechatresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "refreshSubscriptions" ((("request" (struct "refreshsubscriptionsrequest") 1)) (struct "refreshsubscriptionsresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "removeSubscriptions" ((("request" (struct "removesubscriptionsrequest") 1)) (struct "removesubscriptionsresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "rejectSquareMembers" ((("request" (struct "rejectsquaremembersrequest") 1)) (struct "rejectsquaremembersresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "updateSquareMembers" ((("request" (struct "updatesquaremembersrequest") 1)) (struct "updatesquaremembersresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "updateSquareMember" ((("request" (struct "updatesquarememberrequest") 1)) (struct "updatesquarememberresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "updateSquareFeatureSet" ((("request" (struct "updatesquarefeaturesetrequest") 1)) (struct "updatesquarefeaturesetresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "getSquareFeatureSet" ((("request" (struct "getsquarefeaturesetrequest") 1)) (struct "getsquarefeaturesetresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "searchSquares" ((("request" (struct "searchsquaresrequest") 1)) (struct "searchsquaresresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "updateSquare" ((("request" (struct "updatesquarerequest") 1)) (struct "updatesquareresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "getCategories" ((("request" (struct "getsquarecategoriesrequest") 1)) (struct "getsquarecategoriesresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "searchSquareMembers" ((("request" (struct "searchsquaremembersrequest") 1)) (struct "searchsquaremembersresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "fetchSquareChatEvents" ((("request" (struct "fetchsquarechateventsrequest") 1)) (struct "fetchsquarechateventsresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "fetchMyEvents" ((("request" (struct "fetchmyeventsrequest") 1)) (struct "fetchmyeventsresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "markAsRead" ((("request" (struct "markasreadrequest") 1)) (struct "markasreadresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "getSquareAuthority" ((("request" (struct "getsquareauthorityrequest") 1)) (struct "getsquareauthorityresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "sendMessage" ((("request" (struct "sendmessagerequest") 1)) (struct "sendmessageresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "leaveSquare" ((("request" (struct "leavesquarerequest") 1)) (struct "leavesquareresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "leaveSquareChat" ((("request" (struct "leavesquarechatrequest") 1)) (struct "leavesquarechatresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "joinSquareChat" ((("request" (struct "joinsquarechatrequest") 1)) (struct "joinsquarechatresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "joinSquare" ((("request" (struct "joinsquarerequest") 1)) (struct "joinsquareresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "inviteToSquare" ((("request" (struct "invitetosquarerequest") 1)) (struct "invitetosquareresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "inviteToSquareChat" ((("request" (struct "invitetosquarechatrequest") 1)) (struct "invitetosquarechatresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "getSquareMember" ((("request" (struct "getsquarememberrequest") 1)) (struct "getsquarememberresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "getSquareMembers" ((("request" (struct "getsquaremembersrequest") 1)) (struct "getsquaremembersresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "getSquareMemberRelation" ((("request" (struct "getsquarememberrelationrequest") 1)) (struct "getsquarememberrelationresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "getSquareMemberRelations" ((("request" (struct "getsquarememberrelationsrequest") 1)) (struct "getsquarememberrelationsresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "getSquareChatMembers" ((("request" (struct "getsquarechatmembersrequest") 1)) (struct "getsquarechatmembersresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "getSquareChatStatus" ((("request" (struct "getsquarechatstatusrequest") 1)) (struct "getsquarechatstatusresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "getSquareChat" ((("request" (struct "getsquarechatrequest") 1)) (struct "getsquarechatresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "getSquare" ((("request" (struct "getsquarerequest") 1)) (struct "getsquareresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "getJoinedSquares" ((("request" (struct "getjoinedsquaresrequest") 1)) (struct "getjoinedsquaresresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "getJoinedSquareChats" ((("request" (struct "getjoinedsquarechatsrequest") 1)) (struct "getjoinedsquarechatsresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "approveSquareMembers" ((("request" (struct "approvesquaremembersrequest") 1)) (struct "approvesquaremembersresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "createSquareChat" ((("request" (struct "createsquarechatrequest") 1)) (struct "createsquarechatresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "createSquare" ((("request" (struct "createsquarerequest") 1)) (struct "createsquareresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "deleteSquareChat" ((("request" (struct "deletesquarechatrequest") 1)) (struct "deletesquarechatresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "deleteSquare" ((("request" (struct "deletesquarerequest") 1)) (struct "deletesquareresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "destroyMessage" ((("request" (struct "destroymessagerequest") 1)) (struct "destroymessageresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "getJoinableSquareChats" ((("request" (struct "getjoinablesquarechatsrequest") 1)) (struct "getjoinablesquarechatsresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "getInvitationTicketUrl" ((("request" (struct "getinvitationticketurlrequest") 1)) (struct "getinvitationticketurlresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception"))))
  (:method "findSquareByInvitationTicket" ((("request" (struct "findsquarebyinvitationticketrequest") 1)) (struct "findsquarebyinvitationticketresponse"))
   :exceptions (("e" nil :id 1 :type (struct "squareexception")))))

