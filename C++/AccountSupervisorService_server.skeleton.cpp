// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "AccountSupervisorService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class AccountSupervisorServiceHandler : virtual public AccountSupervisorServiceIf {
 public:
  AccountSupervisorServiceHandler() {
    // Your initialization goes here
  }

  void getRSAKey(RSAKey& _return) {
    // Your implementation goes here
    printf("getRSAKey\n");
  }

  void notifyEmailConfirmationResult(const std::map<std::string, std::string> & parameterMap) {
    // Your implementation goes here
    printf("notifyEmailConfirmationResult\n");
  }

  void registerVirtualAccount(std::string& _return, const std::string& locale, const std::string& encryptedVirtualUserId, const std::string& encryptedPassword) {
    // Your implementation goes here
    printf("registerVirtualAccount\n");
  }

  void requestVirtualAccountPasswordChange(const std::string& virtualMid, const std::string& encryptedVirtualUserId, const std::string& encryptedOldPassword, const std::string& encryptedNewPassword) {
    // Your implementation goes here
    printf("requestVirtualAccountPasswordChange\n");
  }

  void requestVirtualAccountPasswordSet(const std::string& virtualMid, const std::string& encryptedVirtualUserId, const std::string& encryptedNewPassword) {
    // Your implementation goes here
    printf("requestVirtualAccountPasswordSet\n");
  }

  void unregisterVirtualAccount(const std::string& virtualMid) {
    // Your implementation goes here
    printf("unregisterVirtualAccount\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<AccountSupervisorServiceHandler> handler(new AccountSupervisorServiceHandler());
  ::std::shared_ptr<TProcessor> processor(new AccountSupervisorServiceProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

