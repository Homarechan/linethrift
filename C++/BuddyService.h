/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef BuddyService_H
#define BuddyService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "line_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class BuddyServiceIf {
 public:
  virtual ~BuddyServiceIf() {}
  virtual void findBuddyContactsByQuery(std::vector<BuddySearchResult> & _return, const std::string& language, const std::string& country, const std::string& query, const int32_t fromIndex, const int32_t count, const BuddySearchRequestSource::type requestSource) = 0;
  virtual void getBuddyContacts(std::vector<Contact> & _return, const std::string& language, const std::string& country, const std::string& classification, const int32_t fromIndex, const int32_t count) = 0;
  virtual void getBuddyDetail(BuddyDetail& _return, const std::string& buddyMid) = 0;
  virtual void getBuddyOnAir(BuddyOnAir& _return, const std::string& buddyMid) = 0;
  virtual void getCountriesHavingBuddy(std::vector<std::string> & _return) = 0;
  virtual void getNewlyReleasedBuddyIds(std::map<std::string, int64_t> & _return, const std::string& country) = 0;
  virtual void getPopularBuddyBanner(BuddyBanner& _return, const std::string& language, const std::string& country, const ApplicationType::type applicationType, const std::string& resourceSpecification) = 0;
  virtual void getPopularBuddyLists(std::vector<BuddyList> & _return, const std::string& language, const std::string& country) = 0;
  virtual void getPromotedBuddyContacts(std::vector<Contact> & _return, const std::string& language, const std::string& country) = 0;
};

class BuddyServiceIfFactory {
 public:
  typedef BuddyServiceIf Handler;

  virtual ~BuddyServiceIfFactory() {}

  virtual BuddyServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(BuddyServiceIf* /* handler */) = 0;
};

class BuddyServiceIfSingletonFactory : virtual public BuddyServiceIfFactory {
 public:
  BuddyServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<BuddyServiceIf>& iface) : iface_(iface) {}
  virtual ~BuddyServiceIfSingletonFactory() {}

  virtual BuddyServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(BuddyServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<BuddyServiceIf> iface_;
};

class BuddyServiceNull : virtual public BuddyServiceIf {
 public:
  virtual ~BuddyServiceNull() {}
  void findBuddyContactsByQuery(std::vector<BuddySearchResult> & /* _return */, const std::string& /* language */, const std::string& /* country */, const std::string& /* query */, const int32_t /* fromIndex */, const int32_t /* count */, const BuddySearchRequestSource::type /* requestSource */) {
    return;
  }
  void getBuddyContacts(std::vector<Contact> & /* _return */, const std::string& /* language */, const std::string& /* country */, const std::string& /* classification */, const int32_t /* fromIndex */, const int32_t /* count */) {
    return;
  }
  void getBuddyDetail(BuddyDetail& /* _return */, const std::string& /* buddyMid */) {
    return;
  }
  void getBuddyOnAir(BuddyOnAir& /* _return */, const std::string& /* buddyMid */) {
    return;
  }
  void getCountriesHavingBuddy(std::vector<std::string> & /* _return */) {
    return;
  }
  void getNewlyReleasedBuddyIds(std::map<std::string, int64_t> & /* _return */, const std::string& /* country */) {
    return;
  }
  void getPopularBuddyBanner(BuddyBanner& /* _return */, const std::string& /* language */, const std::string& /* country */, const ApplicationType::type /* applicationType */, const std::string& /* resourceSpecification */) {
    return;
  }
  void getPopularBuddyLists(std::vector<BuddyList> & /* _return */, const std::string& /* language */, const std::string& /* country */) {
    return;
  }
  void getPromotedBuddyContacts(std::vector<Contact> & /* _return */, const std::string& /* language */, const std::string& /* country */) {
    return;
  }
};

typedef struct _BuddyService_findBuddyContactsByQuery_args__isset {
  _BuddyService_findBuddyContactsByQuery_args__isset() : language(false), country(false), query(false), fromIndex(false), count(false), requestSource(false) {}
  bool language :1;
  bool country :1;
  bool query :1;
  bool fromIndex :1;
  bool count :1;
  bool requestSource :1;
} _BuddyService_findBuddyContactsByQuery_args__isset;

class BuddyService_findBuddyContactsByQuery_args {
 public:

  BuddyService_findBuddyContactsByQuery_args(const BuddyService_findBuddyContactsByQuery_args&);
  BuddyService_findBuddyContactsByQuery_args& operator=(const BuddyService_findBuddyContactsByQuery_args&);
  BuddyService_findBuddyContactsByQuery_args() : language(), country(), query(), fromIndex(0), count(0), requestSource((BuddySearchRequestSource::type)0) {
  }

  virtual ~BuddyService_findBuddyContactsByQuery_args() throw();
  std::string language;
  std::string country;
  std::string query;
  int32_t fromIndex;
  int32_t count;
  BuddySearchRequestSource::type requestSource;

  _BuddyService_findBuddyContactsByQuery_args__isset __isset;

  void __set_language(const std::string& val);

  void __set_country(const std::string& val);

  void __set_query(const std::string& val);

  void __set_fromIndex(const int32_t val);

  void __set_count(const int32_t val);

  void __set_requestSource(const BuddySearchRequestSource::type val);

  bool operator == (const BuddyService_findBuddyContactsByQuery_args & rhs) const
  {
    if (!(language == rhs.language))
      return false;
    if (!(country == rhs.country))
      return false;
    if (!(query == rhs.query))
      return false;
    if (!(fromIndex == rhs.fromIndex))
      return false;
    if (!(count == rhs.count))
      return false;
    if (!(requestSource == rhs.requestSource))
      return false;
    return true;
  }
  bool operator != (const BuddyService_findBuddyContactsByQuery_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuddyService_findBuddyContactsByQuery_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BuddyService_findBuddyContactsByQuery_pargs {
 public:


  virtual ~BuddyService_findBuddyContactsByQuery_pargs() throw();
  const std::string* language;
  const std::string* country;
  const std::string* query;
  const int32_t* fromIndex;
  const int32_t* count;
  const BuddySearchRequestSource::type* requestSource;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BuddyService_findBuddyContactsByQuery_result__isset {
  _BuddyService_findBuddyContactsByQuery_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _BuddyService_findBuddyContactsByQuery_result__isset;

class BuddyService_findBuddyContactsByQuery_result {
 public:

  BuddyService_findBuddyContactsByQuery_result(const BuddyService_findBuddyContactsByQuery_result&);
  BuddyService_findBuddyContactsByQuery_result& operator=(const BuddyService_findBuddyContactsByQuery_result&);
  BuddyService_findBuddyContactsByQuery_result() {
  }

  virtual ~BuddyService_findBuddyContactsByQuery_result() throw();
  std::vector<BuddySearchResult>  success;
  TalkException e;

  _BuddyService_findBuddyContactsByQuery_result__isset __isset;

  void __set_success(const std::vector<BuddySearchResult> & val);

  void __set_e(const TalkException& val);

  bool operator == (const BuddyService_findBuddyContactsByQuery_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const BuddyService_findBuddyContactsByQuery_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuddyService_findBuddyContactsByQuery_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BuddyService_findBuddyContactsByQuery_presult__isset {
  _BuddyService_findBuddyContactsByQuery_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _BuddyService_findBuddyContactsByQuery_presult__isset;

class BuddyService_findBuddyContactsByQuery_presult {
 public:


  virtual ~BuddyService_findBuddyContactsByQuery_presult() throw();
  std::vector<BuddySearchResult> * success;
  TalkException e;

  _BuddyService_findBuddyContactsByQuery_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BuddyService_getBuddyContacts_args__isset {
  _BuddyService_getBuddyContacts_args__isset() : language(false), country(false), classification(false), fromIndex(false), count(false) {}
  bool language :1;
  bool country :1;
  bool classification :1;
  bool fromIndex :1;
  bool count :1;
} _BuddyService_getBuddyContacts_args__isset;

class BuddyService_getBuddyContacts_args {
 public:

  BuddyService_getBuddyContacts_args(const BuddyService_getBuddyContacts_args&);
  BuddyService_getBuddyContacts_args& operator=(const BuddyService_getBuddyContacts_args&);
  BuddyService_getBuddyContacts_args() : language(), country(), classification(), fromIndex(0), count(0) {
  }

  virtual ~BuddyService_getBuddyContacts_args() throw();
  std::string language;
  std::string country;
  std::string classification;
  int32_t fromIndex;
  int32_t count;

  _BuddyService_getBuddyContacts_args__isset __isset;

  void __set_language(const std::string& val);

  void __set_country(const std::string& val);

  void __set_classification(const std::string& val);

  void __set_fromIndex(const int32_t val);

  void __set_count(const int32_t val);

  bool operator == (const BuddyService_getBuddyContacts_args & rhs) const
  {
    if (!(language == rhs.language))
      return false;
    if (!(country == rhs.country))
      return false;
    if (!(classification == rhs.classification))
      return false;
    if (!(fromIndex == rhs.fromIndex))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const BuddyService_getBuddyContacts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuddyService_getBuddyContacts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BuddyService_getBuddyContacts_pargs {
 public:


  virtual ~BuddyService_getBuddyContacts_pargs() throw();
  const std::string* language;
  const std::string* country;
  const std::string* classification;
  const int32_t* fromIndex;
  const int32_t* count;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BuddyService_getBuddyContacts_result__isset {
  _BuddyService_getBuddyContacts_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _BuddyService_getBuddyContacts_result__isset;

class BuddyService_getBuddyContacts_result {
 public:

  BuddyService_getBuddyContacts_result(const BuddyService_getBuddyContacts_result&);
  BuddyService_getBuddyContacts_result& operator=(const BuddyService_getBuddyContacts_result&);
  BuddyService_getBuddyContacts_result() {
  }

  virtual ~BuddyService_getBuddyContacts_result() throw();
  std::vector<Contact>  success;
  TalkException e;

  _BuddyService_getBuddyContacts_result__isset __isset;

  void __set_success(const std::vector<Contact> & val);

  void __set_e(const TalkException& val);

  bool operator == (const BuddyService_getBuddyContacts_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const BuddyService_getBuddyContacts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuddyService_getBuddyContacts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BuddyService_getBuddyContacts_presult__isset {
  _BuddyService_getBuddyContacts_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _BuddyService_getBuddyContacts_presult__isset;

class BuddyService_getBuddyContacts_presult {
 public:


  virtual ~BuddyService_getBuddyContacts_presult() throw();
  std::vector<Contact> * success;
  TalkException e;

  _BuddyService_getBuddyContacts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BuddyService_getBuddyDetail_args__isset {
  _BuddyService_getBuddyDetail_args__isset() : buddyMid(false) {}
  bool buddyMid :1;
} _BuddyService_getBuddyDetail_args__isset;

class BuddyService_getBuddyDetail_args {
 public:

  BuddyService_getBuddyDetail_args(const BuddyService_getBuddyDetail_args&);
  BuddyService_getBuddyDetail_args& operator=(const BuddyService_getBuddyDetail_args&);
  BuddyService_getBuddyDetail_args() : buddyMid() {
  }

  virtual ~BuddyService_getBuddyDetail_args() throw();
  std::string buddyMid;

  _BuddyService_getBuddyDetail_args__isset __isset;

  void __set_buddyMid(const std::string& val);

  bool operator == (const BuddyService_getBuddyDetail_args & rhs) const
  {
    if (!(buddyMid == rhs.buddyMid))
      return false;
    return true;
  }
  bool operator != (const BuddyService_getBuddyDetail_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuddyService_getBuddyDetail_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BuddyService_getBuddyDetail_pargs {
 public:


  virtual ~BuddyService_getBuddyDetail_pargs() throw();
  const std::string* buddyMid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BuddyService_getBuddyDetail_result__isset {
  _BuddyService_getBuddyDetail_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _BuddyService_getBuddyDetail_result__isset;

class BuddyService_getBuddyDetail_result {
 public:

  BuddyService_getBuddyDetail_result(const BuddyService_getBuddyDetail_result&);
  BuddyService_getBuddyDetail_result& operator=(const BuddyService_getBuddyDetail_result&);
  BuddyService_getBuddyDetail_result() {
  }

  virtual ~BuddyService_getBuddyDetail_result() throw();
  BuddyDetail success;
  TalkException e;

  _BuddyService_getBuddyDetail_result__isset __isset;

  void __set_success(const BuddyDetail& val);

  void __set_e(const TalkException& val);

  bool operator == (const BuddyService_getBuddyDetail_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const BuddyService_getBuddyDetail_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuddyService_getBuddyDetail_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BuddyService_getBuddyDetail_presult__isset {
  _BuddyService_getBuddyDetail_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _BuddyService_getBuddyDetail_presult__isset;

class BuddyService_getBuddyDetail_presult {
 public:


  virtual ~BuddyService_getBuddyDetail_presult() throw();
  BuddyDetail* success;
  TalkException e;

  _BuddyService_getBuddyDetail_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BuddyService_getBuddyOnAir_args__isset {
  _BuddyService_getBuddyOnAir_args__isset() : buddyMid(false) {}
  bool buddyMid :1;
} _BuddyService_getBuddyOnAir_args__isset;

class BuddyService_getBuddyOnAir_args {
 public:

  BuddyService_getBuddyOnAir_args(const BuddyService_getBuddyOnAir_args&);
  BuddyService_getBuddyOnAir_args& operator=(const BuddyService_getBuddyOnAir_args&);
  BuddyService_getBuddyOnAir_args() : buddyMid() {
  }

  virtual ~BuddyService_getBuddyOnAir_args() throw();
  std::string buddyMid;

  _BuddyService_getBuddyOnAir_args__isset __isset;

  void __set_buddyMid(const std::string& val);

  bool operator == (const BuddyService_getBuddyOnAir_args & rhs) const
  {
    if (!(buddyMid == rhs.buddyMid))
      return false;
    return true;
  }
  bool operator != (const BuddyService_getBuddyOnAir_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuddyService_getBuddyOnAir_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BuddyService_getBuddyOnAir_pargs {
 public:


  virtual ~BuddyService_getBuddyOnAir_pargs() throw();
  const std::string* buddyMid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BuddyService_getBuddyOnAir_result__isset {
  _BuddyService_getBuddyOnAir_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _BuddyService_getBuddyOnAir_result__isset;

class BuddyService_getBuddyOnAir_result {
 public:

  BuddyService_getBuddyOnAir_result(const BuddyService_getBuddyOnAir_result&);
  BuddyService_getBuddyOnAir_result& operator=(const BuddyService_getBuddyOnAir_result&);
  BuddyService_getBuddyOnAir_result() {
  }

  virtual ~BuddyService_getBuddyOnAir_result() throw();
  BuddyOnAir success;
  TalkException e;

  _BuddyService_getBuddyOnAir_result__isset __isset;

  void __set_success(const BuddyOnAir& val);

  void __set_e(const TalkException& val);

  bool operator == (const BuddyService_getBuddyOnAir_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const BuddyService_getBuddyOnAir_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuddyService_getBuddyOnAir_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BuddyService_getBuddyOnAir_presult__isset {
  _BuddyService_getBuddyOnAir_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _BuddyService_getBuddyOnAir_presult__isset;

class BuddyService_getBuddyOnAir_presult {
 public:


  virtual ~BuddyService_getBuddyOnAir_presult() throw();
  BuddyOnAir* success;
  TalkException e;

  _BuddyService_getBuddyOnAir_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class BuddyService_getCountriesHavingBuddy_args {
 public:

  BuddyService_getCountriesHavingBuddy_args(const BuddyService_getCountriesHavingBuddy_args&);
  BuddyService_getCountriesHavingBuddy_args& operator=(const BuddyService_getCountriesHavingBuddy_args&);
  BuddyService_getCountriesHavingBuddy_args() {
  }

  virtual ~BuddyService_getCountriesHavingBuddy_args() throw();

  bool operator == (const BuddyService_getCountriesHavingBuddy_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BuddyService_getCountriesHavingBuddy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuddyService_getCountriesHavingBuddy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BuddyService_getCountriesHavingBuddy_pargs {
 public:


  virtual ~BuddyService_getCountriesHavingBuddy_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BuddyService_getCountriesHavingBuddy_result__isset {
  _BuddyService_getCountriesHavingBuddy_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _BuddyService_getCountriesHavingBuddy_result__isset;

class BuddyService_getCountriesHavingBuddy_result {
 public:

  BuddyService_getCountriesHavingBuddy_result(const BuddyService_getCountriesHavingBuddy_result&);
  BuddyService_getCountriesHavingBuddy_result& operator=(const BuddyService_getCountriesHavingBuddy_result&);
  BuddyService_getCountriesHavingBuddy_result() {
  }

  virtual ~BuddyService_getCountriesHavingBuddy_result() throw();
  std::vector<std::string>  success;
  TalkException e;

  _BuddyService_getCountriesHavingBuddy_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const BuddyService_getCountriesHavingBuddy_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const BuddyService_getCountriesHavingBuddy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuddyService_getCountriesHavingBuddy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BuddyService_getCountriesHavingBuddy_presult__isset {
  _BuddyService_getCountriesHavingBuddy_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _BuddyService_getCountriesHavingBuddy_presult__isset;

class BuddyService_getCountriesHavingBuddy_presult {
 public:


  virtual ~BuddyService_getCountriesHavingBuddy_presult() throw();
  std::vector<std::string> * success;
  TalkException e;

  _BuddyService_getCountriesHavingBuddy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BuddyService_getNewlyReleasedBuddyIds_args__isset {
  _BuddyService_getNewlyReleasedBuddyIds_args__isset() : country(false) {}
  bool country :1;
} _BuddyService_getNewlyReleasedBuddyIds_args__isset;

class BuddyService_getNewlyReleasedBuddyIds_args {
 public:

  BuddyService_getNewlyReleasedBuddyIds_args(const BuddyService_getNewlyReleasedBuddyIds_args&);
  BuddyService_getNewlyReleasedBuddyIds_args& operator=(const BuddyService_getNewlyReleasedBuddyIds_args&);
  BuddyService_getNewlyReleasedBuddyIds_args() : country() {
  }

  virtual ~BuddyService_getNewlyReleasedBuddyIds_args() throw();
  std::string country;

  _BuddyService_getNewlyReleasedBuddyIds_args__isset __isset;

  void __set_country(const std::string& val);

  bool operator == (const BuddyService_getNewlyReleasedBuddyIds_args & rhs) const
  {
    if (!(country == rhs.country))
      return false;
    return true;
  }
  bool operator != (const BuddyService_getNewlyReleasedBuddyIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuddyService_getNewlyReleasedBuddyIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BuddyService_getNewlyReleasedBuddyIds_pargs {
 public:


  virtual ~BuddyService_getNewlyReleasedBuddyIds_pargs() throw();
  const std::string* country;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BuddyService_getNewlyReleasedBuddyIds_result__isset {
  _BuddyService_getNewlyReleasedBuddyIds_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _BuddyService_getNewlyReleasedBuddyIds_result__isset;

class BuddyService_getNewlyReleasedBuddyIds_result {
 public:

  BuddyService_getNewlyReleasedBuddyIds_result(const BuddyService_getNewlyReleasedBuddyIds_result&);
  BuddyService_getNewlyReleasedBuddyIds_result& operator=(const BuddyService_getNewlyReleasedBuddyIds_result&);
  BuddyService_getNewlyReleasedBuddyIds_result() {
  }

  virtual ~BuddyService_getNewlyReleasedBuddyIds_result() throw();
  std::map<std::string, int64_t>  success;
  TalkException e;

  _BuddyService_getNewlyReleasedBuddyIds_result__isset __isset;

  void __set_success(const std::map<std::string, int64_t> & val);

  void __set_e(const TalkException& val);

  bool operator == (const BuddyService_getNewlyReleasedBuddyIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const BuddyService_getNewlyReleasedBuddyIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuddyService_getNewlyReleasedBuddyIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BuddyService_getNewlyReleasedBuddyIds_presult__isset {
  _BuddyService_getNewlyReleasedBuddyIds_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _BuddyService_getNewlyReleasedBuddyIds_presult__isset;

class BuddyService_getNewlyReleasedBuddyIds_presult {
 public:


  virtual ~BuddyService_getNewlyReleasedBuddyIds_presult() throw();
  std::map<std::string, int64_t> * success;
  TalkException e;

  _BuddyService_getNewlyReleasedBuddyIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BuddyService_getPopularBuddyBanner_args__isset {
  _BuddyService_getPopularBuddyBanner_args__isset() : language(false), country(false), applicationType(false), resourceSpecification(false) {}
  bool language :1;
  bool country :1;
  bool applicationType :1;
  bool resourceSpecification :1;
} _BuddyService_getPopularBuddyBanner_args__isset;

class BuddyService_getPopularBuddyBanner_args {
 public:

  BuddyService_getPopularBuddyBanner_args(const BuddyService_getPopularBuddyBanner_args&);
  BuddyService_getPopularBuddyBanner_args& operator=(const BuddyService_getPopularBuddyBanner_args&);
  BuddyService_getPopularBuddyBanner_args() : language(), country(), applicationType((ApplicationType::type)0), resourceSpecification() {
  }

  virtual ~BuddyService_getPopularBuddyBanner_args() throw();
  std::string language;
  std::string country;
  ApplicationType::type applicationType;
  std::string resourceSpecification;

  _BuddyService_getPopularBuddyBanner_args__isset __isset;

  void __set_language(const std::string& val);

  void __set_country(const std::string& val);

  void __set_applicationType(const ApplicationType::type val);

  void __set_resourceSpecification(const std::string& val);

  bool operator == (const BuddyService_getPopularBuddyBanner_args & rhs) const
  {
    if (!(language == rhs.language))
      return false;
    if (!(country == rhs.country))
      return false;
    if (!(applicationType == rhs.applicationType))
      return false;
    if (!(resourceSpecification == rhs.resourceSpecification))
      return false;
    return true;
  }
  bool operator != (const BuddyService_getPopularBuddyBanner_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuddyService_getPopularBuddyBanner_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BuddyService_getPopularBuddyBanner_pargs {
 public:


  virtual ~BuddyService_getPopularBuddyBanner_pargs() throw();
  const std::string* language;
  const std::string* country;
  const ApplicationType::type* applicationType;
  const std::string* resourceSpecification;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BuddyService_getPopularBuddyBanner_result__isset {
  _BuddyService_getPopularBuddyBanner_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _BuddyService_getPopularBuddyBanner_result__isset;

class BuddyService_getPopularBuddyBanner_result {
 public:

  BuddyService_getPopularBuddyBanner_result(const BuddyService_getPopularBuddyBanner_result&);
  BuddyService_getPopularBuddyBanner_result& operator=(const BuddyService_getPopularBuddyBanner_result&);
  BuddyService_getPopularBuddyBanner_result() {
  }

  virtual ~BuddyService_getPopularBuddyBanner_result() throw();
  BuddyBanner success;
  TalkException e;

  _BuddyService_getPopularBuddyBanner_result__isset __isset;

  void __set_success(const BuddyBanner& val);

  void __set_e(const TalkException& val);

  bool operator == (const BuddyService_getPopularBuddyBanner_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const BuddyService_getPopularBuddyBanner_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuddyService_getPopularBuddyBanner_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BuddyService_getPopularBuddyBanner_presult__isset {
  _BuddyService_getPopularBuddyBanner_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _BuddyService_getPopularBuddyBanner_presult__isset;

class BuddyService_getPopularBuddyBanner_presult {
 public:


  virtual ~BuddyService_getPopularBuddyBanner_presult() throw();
  BuddyBanner* success;
  TalkException e;

  _BuddyService_getPopularBuddyBanner_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BuddyService_getPopularBuddyLists_args__isset {
  _BuddyService_getPopularBuddyLists_args__isset() : language(false), country(false) {}
  bool language :1;
  bool country :1;
} _BuddyService_getPopularBuddyLists_args__isset;

class BuddyService_getPopularBuddyLists_args {
 public:

  BuddyService_getPopularBuddyLists_args(const BuddyService_getPopularBuddyLists_args&);
  BuddyService_getPopularBuddyLists_args& operator=(const BuddyService_getPopularBuddyLists_args&);
  BuddyService_getPopularBuddyLists_args() : language(), country() {
  }

  virtual ~BuddyService_getPopularBuddyLists_args() throw();
  std::string language;
  std::string country;

  _BuddyService_getPopularBuddyLists_args__isset __isset;

  void __set_language(const std::string& val);

  void __set_country(const std::string& val);

  bool operator == (const BuddyService_getPopularBuddyLists_args & rhs) const
  {
    if (!(language == rhs.language))
      return false;
    if (!(country == rhs.country))
      return false;
    return true;
  }
  bool operator != (const BuddyService_getPopularBuddyLists_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuddyService_getPopularBuddyLists_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BuddyService_getPopularBuddyLists_pargs {
 public:


  virtual ~BuddyService_getPopularBuddyLists_pargs() throw();
  const std::string* language;
  const std::string* country;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BuddyService_getPopularBuddyLists_result__isset {
  _BuddyService_getPopularBuddyLists_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _BuddyService_getPopularBuddyLists_result__isset;

class BuddyService_getPopularBuddyLists_result {
 public:

  BuddyService_getPopularBuddyLists_result(const BuddyService_getPopularBuddyLists_result&);
  BuddyService_getPopularBuddyLists_result& operator=(const BuddyService_getPopularBuddyLists_result&);
  BuddyService_getPopularBuddyLists_result() {
  }

  virtual ~BuddyService_getPopularBuddyLists_result() throw();
  std::vector<BuddyList>  success;
  TalkException e;

  _BuddyService_getPopularBuddyLists_result__isset __isset;

  void __set_success(const std::vector<BuddyList> & val);

  void __set_e(const TalkException& val);

  bool operator == (const BuddyService_getPopularBuddyLists_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const BuddyService_getPopularBuddyLists_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuddyService_getPopularBuddyLists_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BuddyService_getPopularBuddyLists_presult__isset {
  _BuddyService_getPopularBuddyLists_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _BuddyService_getPopularBuddyLists_presult__isset;

class BuddyService_getPopularBuddyLists_presult {
 public:


  virtual ~BuddyService_getPopularBuddyLists_presult() throw();
  std::vector<BuddyList> * success;
  TalkException e;

  _BuddyService_getPopularBuddyLists_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BuddyService_getPromotedBuddyContacts_args__isset {
  _BuddyService_getPromotedBuddyContacts_args__isset() : language(false), country(false) {}
  bool language :1;
  bool country :1;
} _BuddyService_getPromotedBuddyContacts_args__isset;

class BuddyService_getPromotedBuddyContacts_args {
 public:

  BuddyService_getPromotedBuddyContacts_args(const BuddyService_getPromotedBuddyContacts_args&);
  BuddyService_getPromotedBuddyContacts_args& operator=(const BuddyService_getPromotedBuddyContacts_args&);
  BuddyService_getPromotedBuddyContacts_args() : language(), country() {
  }

  virtual ~BuddyService_getPromotedBuddyContacts_args() throw();
  std::string language;
  std::string country;

  _BuddyService_getPromotedBuddyContacts_args__isset __isset;

  void __set_language(const std::string& val);

  void __set_country(const std::string& val);

  bool operator == (const BuddyService_getPromotedBuddyContacts_args & rhs) const
  {
    if (!(language == rhs.language))
      return false;
    if (!(country == rhs.country))
      return false;
    return true;
  }
  bool operator != (const BuddyService_getPromotedBuddyContacts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuddyService_getPromotedBuddyContacts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BuddyService_getPromotedBuddyContacts_pargs {
 public:


  virtual ~BuddyService_getPromotedBuddyContacts_pargs() throw();
  const std::string* language;
  const std::string* country;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BuddyService_getPromotedBuddyContacts_result__isset {
  _BuddyService_getPromotedBuddyContacts_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _BuddyService_getPromotedBuddyContacts_result__isset;

class BuddyService_getPromotedBuddyContacts_result {
 public:

  BuddyService_getPromotedBuddyContacts_result(const BuddyService_getPromotedBuddyContacts_result&);
  BuddyService_getPromotedBuddyContacts_result& operator=(const BuddyService_getPromotedBuddyContacts_result&);
  BuddyService_getPromotedBuddyContacts_result() {
  }

  virtual ~BuddyService_getPromotedBuddyContacts_result() throw();
  std::vector<Contact>  success;
  TalkException e;

  _BuddyService_getPromotedBuddyContacts_result__isset __isset;

  void __set_success(const std::vector<Contact> & val);

  void __set_e(const TalkException& val);

  bool operator == (const BuddyService_getPromotedBuddyContacts_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const BuddyService_getPromotedBuddyContacts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuddyService_getPromotedBuddyContacts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BuddyService_getPromotedBuddyContacts_presult__isset {
  _BuddyService_getPromotedBuddyContacts_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _BuddyService_getPromotedBuddyContacts_presult__isset;

class BuddyService_getPromotedBuddyContacts_presult {
 public:


  virtual ~BuddyService_getPromotedBuddyContacts_presult() throw();
  std::vector<Contact> * success;
  TalkException e;

  _BuddyService_getPromotedBuddyContacts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class BuddyServiceClient : virtual public BuddyServiceIf {
 public:
  BuddyServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  BuddyServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void findBuddyContactsByQuery(std::vector<BuddySearchResult> & _return, const std::string& language, const std::string& country, const std::string& query, const int32_t fromIndex, const int32_t count, const BuddySearchRequestSource::type requestSource);
  void send_findBuddyContactsByQuery(const std::string& language, const std::string& country, const std::string& query, const int32_t fromIndex, const int32_t count, const BuddySearchRequestSource::type requestSource);
  void recv_findBuddyContactsByQuery(std::vector<BuddySearchResult> & _return);
  void getBuddyContacts(std::vector<Contact> & _return, const std::string& language, const std::string& country, const std::string& classification, const int32_t fromIndex, const int32_t count);
  void send_getBuddyContacts(const std::string& language, const std::string& country, const std::string& classification, const int32_t fromIndex, const int32_t count);
  void recv_getBuddyContacts(std::vector<Contact> & _return);
  void getBuddyDetail(BuddyDetail& _return, const std::string& buddyMid);
  void send_getBuddyDetail(const std::string& buddyMid);
  void recv_getBuddyDetail(BuddyDetail& _return);
  void getBuddyOnAir(BuddyOnAir& _return, const std::string& buddyMid);
  void send_getBuddyOnAir(const std::string& buddyMid);
  void recv_getBuddyOnAir(BuddyOnAir& _return);
  void getCountriesHavingBuddy(std::vector<std::string> & _return);
  void send_getCountriesHavingBuddy();
  void recv_getCountriesHavingBuddy(std::vector<std::string> & _return);
  void getNewlyReleasedBuddyIds(std::map<std::string, int64_t> & _return, const std::string& country);
  void send_getNewlyReleasedBuddyIds(const std::string& country);
  void recv_getNewlyReleasedBuddyIds(std::map<std::string, int64_t> & _return);
  void getPopularBuddyBanner(BuddyBanner& _return, const std::string& language, const std::string& country, const ApplicationType::type applicationType, const std::string& resourceSpecification);
  void send_getPopularBuddyBanner(const std::string& language, const std::string& country, const ApplicationType::type applicationType, const std::string& resourceSpecification);
  void recv_getPopularBuddyBanner(BuddyBanner& _return);
  void getPopularBuddyLists(std::vector<BuddyList> & _return, const std::string& language, const std::string& country);
  void send_getPopularBuddyLists(const std::string& language, const std::string& country);
  void recv_getPopularBuddyLists(std::vector<BuddyList> & _return);
  void getPromotedBuddyContacts(std::vector<Contact> & _return, const std::string& language, const std::string& country);
  void send_getPromotedBuddyContacts(const std::string& language, const std::string& country);
  void recv_getPromotedBuddyContacts(std::vector<Contact> & _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class BuddyServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<BuddyServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (BuddyServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_findBuddyContactsByQuery(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getBuddyContacts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getBuddyDetail(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getBuddyOnAir(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCountriesHavingBuddy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getNewlyReleasedBuddyIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPopularBuddyBanner(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPopularBuddyLists(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPromotedBuddyContacts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  BuddyServiceProcessor(::apache::thrift::stdcxx::shared_ptr<BuddyServiceIf> iface) :
    iface_(iface) {
    processMap_["findBuddyContactsByQuery"] = &BuddyServiceProcessor::process_findBuddyContactsByQuery;
    processMap_["getBuddyContacts"] = &BuddyServiceProcessor::process_getBuddyContacts;
    processMap_["getBuddyDetail"] = &BuddyServiceProcessor::process_getBuddyDetail;
    processMap_["getBuddyOnAir"] = &BuddyServiceProcessor::process_getBuddyOnAir;
    processMap_["getCountriesHavingBuddy"] = &BuddyServiceProcessor::process_getCountriesHavingBuddy;
    processMap_["getNewlyReleasedBuddyIds"] = &BuddyServiceProcessor::process_getNewlyReleasedBuddyIds;
    processMap_["getPopularBuddyBanner"] = &BuddyServiceProcessor::process_getPopularBuddyBanner;
    processMap_["getPopularBuddyLists"] = &BuddyServiceProcessor::process_getPopularBuddyLists;
    processMap_["getPromotedBuddyContacts"] = &BuddyServiceProcessor::process_getPromotedBuddyContacts;
  }

  virtual ~BuddyServiceProcessor() {}
};

class BuddyServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  BuddyServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< BuddyServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< BuddyServiceIfFactory > handlerFactory_;
};

class BuddyServiceMultiface : virtual public BuddyServiceIf {
 public:
  BuddyServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<BuddyServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~BuddyServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<BuddyServiceIf> > ifaces_;
  BuddyServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<BuddyServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void findBuddyContactsByQuery(std::vector<BuddySearchResult> & _return, const std::string& language, const std::string& country, const std::string& query, const int32_t fromIndex, const int32_t count, const BuddySearchRequestSource::type requestSource) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findBuddyContactsByQuery(_return, language, country, query, fromIndex, count, requestSource);
    }
    ifaces_[i]->findBuddyContactsByQuery(_return, language, country, query, fromIndex, count, requestSource);
    return;
  }

  void getBuddyContacts(std::vector<Contact> & _return, const std::string& language, const std::string& country, const std::string& classification, const int32_t fromIndex, const int32_t count) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getBuddyContacts(_return, language, country, classification, fromIndex, count);
    }
    ifaces_[i]->getBuddyContacts(_return, language, country, classification, fromIndex, count);
    return;
  }

  void getBuddyDetail(BuddyDetail& _return, const std::string& buddyMid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getBuddyDetail(_return, buddyMid);
    }
    ifaces_[i]->getBuddyDetail(_return, buddyMid);
    return;
  }

  void getBuddyOnAir(BuddyOnAir& _return, const std::string& buddyMid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getBuddyOnAir(_return, buddyMid);
    }
    ifaces_[i]->getBuddyOnAir(_return, buddyMid);
    return;
  }

  void getCountriesHavingBuddy(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCountriesHavingBuddy(_return);
    }
    ifaces_[i]->getCountriesHavingBuddy(_return);
    return;
  }

  void getNewlyReleasedBuddyIds(std::map<std::string, int64_t> & _return, const std::string& country) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getNewlyReleasedBuddyIds(_return, country);
    }
    ifaces_[i]->getNewlyReleasedBuddyIds(_return, country);
    return;
  }

  void getPopularBuddyBanner(BuddyBanner& _return, const std::string& language, const std::string& country, const ApplicationType::type applicationType, const std::string& resourceSpecification) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPopularBuddyBanner(_return, language, country, applicationType, resourceSpecification);
    }
    ifaces_[i]->getPopularBuddyBanner(_return, language, country, applicationType, resourceSpecification);
    return;
  }

  void getPopularBuddyLists(std::vector<BuddyList> & _return, const std::string& language, const std::string& country) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPopularBuddyLists(_return, language, country);
    }
    ifaces_[i]->getPopularBuddyLists(_return, language, country);
    return;
  }

  void getPromotedBuddyContacts(std::vector<Contact> & _return, const std::string& language, const std::string& country) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPromotedBuddyContacts(_return, language, country);
    }
    ifaces_[i]->getPromotedBuddyContacts(_return, language, country);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class BuddyServiceConcurrentClient : virtual public BuddyServiceIf {
 public:
  BuddyServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  BuddyServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void findBuddyContactsByQuery(std::vector<BuddySearchResult> & _return, const std::string& language, const std::string& country, const std::string& query, const int32_t fromIndex, const int32_t count, const BuddySearchRequestSource::type requestSource);
  int32_t send_findBuddyContactsByQuery(const std::string& language, const std::string& country, const std::string& query, const int32_t fromIndex, const int32_t count, const BuddySearchRequestSource::type requestSource);
  void recv_findBuddyContactsByQuery(std::vector<BuddySearchResult> & _return, const int32_t seqid);
  void getBuddyContacts(std::vector<Contact> & _return, const std::string& language, const std::string& country, const std::string& classification, const int32_t fromIndex, const int32_t count);
  int32_t send_getBuddyContacts(const std::string& language, const std::string& country, const std::string& classification, const int32_t fromIndex, const int32_t count);
  void recv_getBuddyContacts(std::vector<Contact> & _return, const int32_t seqid);
  void getBuddyDetail(BuddyDetail& _return, const std::string& buddyMid);
  int32_t send_getBuddyDetail(const std::string& buddyMid);
  void recv_getBuddyDetail(BuddyDetail& _return, const int32_t seqid);
  void getBuddyOnAir(BuddyOnAir& _return, const std::string& buddyMid);
  int32_t send_getBuddyOnAir(const std::string& buddyMid);
  void recv_getBuddyOnAir(BuddyOnAir& _return, const int32_t seqid);
  void getCountriesHavingBuddy(std::vector<std::string> & _return);
  int32_t send_getCountriesHavingBuddy();
  void recv_getCountriesHavingBuddy(std::vector<std::string> & _return, const int32_t seqid);
  void getNewlyReleasedBuddyIds(std::map<std::string, int64_t> & _return, const std::string& country);
  int32_t send_getNewlyReleasedBuddyIds(const std::string& country);
  void recv_getNewlyReleasedBuddyIds(std::map<std::string, int64_t> & _return, const int32_t seqid);
  void getPopularBuddyBanner(BuddyBanner& _return, const std::string& language, const std::string& country, const ApplicationType::type applicationType, const std::string& resourceSpecification);
  int32_t send_getPopularBuddyBanner(const std::string& language, const std::string& country, const ApplicationType::type applicationType, const std::string& resourceSpecification);
  void recv_getPopularBuddyBanner(BuddyBanner& _return, const int32_t seqid);
  void getPopularBuddyLists(std::vector<BuddyList> & _return, const std::string& language, const std::string& country);
  int32_t send_getPopularBuddyLists(const std::string& language, const std::string& country);
  void recv_getPopularBuddyLists(std::vector<BuddyList> & _return, const int32_t seqid);
  void getPromotedBuddyContacts(std::vector<Contact> & _return, const std::string& language, const std::string& country);
  int32_t send_getPromotedBuddyContacts(const std::string& language, const std::string& country);
  void recv_getPromotedBuddyContacts(std::vector<Contact> & _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
