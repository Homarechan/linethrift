/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ChannelService_H
#define ChannelService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "line_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ChannelServiceIf {
 public:
  virtual ~ChannelServiceIf() {}
  virtual void issueOTP(OTPResult& _return, const std::string& channelId) = 0;
  virtual void approveChannelAndIssueChannelToken(ChannelToken& _return, const std::string& channelId) = 0;
  virtual void approveChannelAndIssueRequestToken(std::string& _return, const std::string& channelId, const std::string& otpId) = 0;
  virtual void fetchNotificationItems(NotificationFetchResult& _return, const int64_t localRev) = 0;
  virtual void getApprovedChannels(ApprovedChannelInfos& _return, const int64_t lastSynced, const std::string& locale) = 0;
  virtual void getChannelInfo(ChannelInfo& _return, const std::string& channelId, const std::string& locale) = 0;
  virtual void getChannelNotificationSetting(ChannelNotificationSetting& _return, const std::string& channelId, const std::string& locale) = 0;
  virtual void getChannelNotificationSettings(std::vector<ChannelNotificationSetting> & _return, const std::string& locale) = 0;
  virtual void getChannels(ChannelInfos& _return, const int64_t lastSynced, const std::string& locale) = 0;
  virtual void getDomains(ChannelDomains& _return, const int64_t lastSynced) = 0;
  virtual void getFriendChannelMatrices(FriendChannelMatricesResponse& _return, const std::vector<std::string> & channelIds) = 0;
  virtual bool updateChannelSettings(const ChannelSettings& channelSettings) = 0;
  virtual void getCommonDomains(ChannelDomains& _return, const int64_t lastSynced) = 0;
  virtual int32_t getNotificationBadgeCount(const int64_t localRev) = 0;
  virtual void issueChannelToken(ChannelToken& _return, const std::string& channelId) = 0;
  virtual void issueRequestToken(std::string& _return, const std::string& channelId, const std::string& otpId) = 0;
  virtual void issueRequestTokenWithAuthScheme(RequestTokenResponse& _return, const std::string& channelId, const std::string& otpId, const std::vector<std::string> & authScheme, const std::string& returnUrl) = 0;
  virtual void issueRequestTokenForAutoLogin(std::string& _return, const std::string& channelId, const std::string& otpId, const std::string& redirectUrl) = 0;
  virtual void getUpdatedChannelIds(std::vector<std::string> & _return, const std::vector<ChannelIdWithLastUpdated> & channelIds) = 0;
  virtual void reserveCoinUse(std::string& _return, const CoinUseReservation& request, const std::string& locale) = 0;
  virtual void revokeChannel(const std::string& channelId) = 0;
  virtual void syncChannelData(ChannelSyncDatas& _return, const int64_t lastSynced, const std::string& locale) = 0;
  virtual void updateChannelNotificationSetting(const std::vector<ChannelNotificationSetting> & setting) = 0;
};

class ChannelServiceIfFactory {
 public:
  typedef ChannelServiceIf Handler;

  virtual ~ChannelServiceIfFactory() {}

  virtual ChannelServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ChannelServiceIf* /* handler */) = 0;
};

class ChannelServiceIfSingletonFactory : virtual public ChannelServiceIfFactory {
 public:
  ChannelServiceIfSingletonFactory(const ::std::shared_ptr<ChannelServiceIf>& iface) : iface_(iface) {}
  virtual ~ChannelServiceIfSingletonFactory() {}

  virtual ChannelServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ChannelServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<ChannelServiceIf> iface_;
};

class ChannelServiceNull : virtual public ChannelServiceIf {
 public:
  virtual ~ChannelServiceNull() {}
  void issueOTP(OTPResult& /* _return */, const std::string& /* channelId */) {
    return;
  }
  void approveChannelAndIssueChannelToken(ChannelToken& /* _return */, const std::string& /* channelId */) {
    return;
  }
  void approveChannelAndIssueRequestToken(std::string& /* _return */, const std::string& /* channelId */, const std::string& /* otpId */) {
    return;
  }
  void fetchNotificationItems(NotificationFetchResult& /* _return */, const int64_t /* localRev */) {
    return;
  }
  void getApprovedChannels(ApprovedChannelInfos& /* _return */, const int64_t /* lastSynced */, const std::string& /* locale */) {
    return;
  }
  void getChannelInfo(ChannelInfo& /* _return */, const std::string& /* channelId */, const std::string& /* locale */) {
    return;
  }
  void getChannelNotificationSetting(ChannelNotificationSetting& /* _return */, const std::string& /* channelId */, const std::string& /* locale */) {
    return;
  }
  void getChannelNotificationSettings(std::vector<ChannelNotificationSetting> & /* _return */, const std::string& /* locale */) {
    return;
  }
  void getChannels(ChannelInfos& /* _return */, const int64_t /* lastSynced */, const std::string& /* locale */) {
    return;
  }
  void getDomains(ChannelDomains& /* _return */, const int64_t /* lastSynced */) {
    return;
  }
  void getFriendChannelMatrices(FriendChannelMatricesResponse& /* _return */, const std::vector<std::string> & /* channelIds */) {
    return;
  }
  bool updateChannelSettings(const ChannelSettings& /* channelSettings */) {
    bool _return = false;
    return _return;
  }
  void getCommonDomains(ChannelDomains& /* _return */, const int64_t /* lastSynced */) {
    return;
  }
  int32_t getNotificationBadgeCount(const int64_t /* localRev */) {
    int32_t _return = 0;
    return _return;
  }
  void issueChannelToken(ChannelToken& /* _return */, const std::string& /* channelId */) {
    return;
  }
  void issueRequestToken(std::string& /* _return */, const std::string& /* channelId */, const std::string& /* otpId */) {
    return;
  }
  void issueRequestTokenWithAuthScheme(RequestTokenResponse& /* _return */, const std::string& /* channelId */, const std::string& /* otpId */, const std::vector<std::string> & /* authScheme */, const std::string& /* returnUrl */) {
    return;
  }
  void issueRequestTokenForAutoLogin(std::string& /* _return */, const std::string& /* channelId */, const std::string& /* otpId */, const std::string& /* redirectUrl */) {
    return;
  }
  void getUpdatedChannelIds(std::vector<std::string> & /* _return */, const std::vector<ChannelIdWithLastUpdated> & /* channelIds */) {
    return;
  }
  void reserveCoinUse(std::string& /* _return */, const CoinUseReservation& /* request */, const std::string& /* locale */) {
    return;
  }
  void revokeChannel(const std::string& /* channelId */) {
    return;
  }
  void syncChannelData(ChannelSyncDatas& /* _return */, const int64_t /* lastSynced */, const std::string& /* locale */) {
    return;
  }
  void updateChannelNotificationSetting(const std::vector<ChannelNotificationSetting> & /* setting */) {
    return;
  }
};

typedef struct _ChannelService_issueOTP_args__isset {
  _ChannelService_issueOTP_args__isset() : channelId(false) {}
  bool channelId :1;
} _ChannelService_issueOTP_args__isset;

class ChannelService_issueOTP_args {
 public:

  ChannelService_issueOTP_args(const ChannelService_issueOTP_args&);
  ChannelService_issueOTP_args& operator=(const ChannelService_issueOTP_args&);
  ChannelService_issueOTP_args() : channelId() {
  }

  virtual ~ChannelService_issueOTP_args() noexcept;
  std::string channelId;

  _ChannelService_issueOTP_args__isset __isset;

  void __set_channelId(const std::string& val);

  bool operator == (const ChannelService_issueOTP_args & rhs) const
  {
    if (!(channelId == rhs.channelId))
      return false;
    return true;
  }
  bool operator != (const ChannelService_issueOTP_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_issueOTP_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_issueOTP_pargs {
 public:


  virtual ~ChannelService_issueOTP_pargs() noexcept;
  const std::string* channelId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_issueOTP_result__isset {
  _ChannelService_issueOTP_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_issueOTP_result__isset;

class ChannelService_issueOTP_result {
 public:

  ChannelService_issueOTP_result(const ChannelService_issueOTP_result&);
  ChannelService_issueOTP_result& operator=(const ChannelService_issueOTP_result&);
  ChannelService_issueOTP_result() {
  }

  virtual ~ChannelService_issueOTP_result() noexcept;
  OTPResult success;
  ChannelException e;

  _ChannelService_issueOTP_result__isset __isset;

  void __set_success(const OTPResult& val);

  void __set_e(const ChannelException& val);

  bool operator == (const ChannelService_issueOTP_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelService_issueOTP_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_issueOTP_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_issueOTP_presult__isset {
  _ChannelService_issueOTP_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_issueOTP_presult__isset;

class ChannelService_issueOTP_presult {
 public:


  virtual ~ChannelService_issueOTP_presult() noexcept;
  OTPResult* success;
  ChannelException e;

  _ChannelService_issueOTP_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_approveChannelAndIssueChannelToken_args__isset {
  _ChannelService_approveChannelAndIssueChannelToken_args__isset() : channelId(false) {}
  bool channelId :1;
} _ChannelService_approveChannelAndIssueChannelToken_args__isset;

class ChannelService_approveChannelAndIssueChannelToken_args {
 public:

  ChannelService_approveChannelAndIssueChannelToken_args(const ChannelService_approveChannelAndIssueChannelToken_args&);
  ChannelService_approveChannelAndIssueChannelToken_args& operator=(const ChannelService_approveChannelAndIssueChannelToken_args&);
  ChannelService_approveChannelAndIssueChannelToken_args() : channelId() {
  }

  virtual ~ChannelService_approveChannelAndIssueChannelToken_args() noexcept;
  std::string channelId;

  _ChannelService_approveChannelAndIssueChannelToken_args__isset __isset;

  void __set_channelId(const std::string& val);

  bool operator == (const ChannelService_approveChannelAndIssueChannelToken_args & rhs) const
  {
    if (!(channelId == rhs.channelId))
      return false;
    return true;
  }
  bool operator != (const ChannelService_approveChannelAndIssueChannelToken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_approveChannelAndIssueChannelToken_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_approveChannelAndIssueChannelToken_pargs {
 public:


  virtual ~ChannelService_approveChannelAndIssueChannelToken_pargs() noexcept;
  const std::string* channelId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_approveChannelAndIssueChannelToken_result__isset {
  _ChannelService_approveChannelAndIssueChannelToken_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_approveChannelAndIssueChannelToken_result__isset;

class ChannelService_approveChannelAndIssueChannelToken_result {
 public:

  ChannelService_approveChannelAndIssueChannelToken_result(const ChannelService_approveChannelAndIssueChannelToken_result&);
  ChannelService_approveChannelAndIssueChannelToken_result& operator=(const ChannelService_approveChannelAndIssueChannelToken_result&);
  ChannelService_approveChannelAndIssueChannelToken_result() {
  }

  virtual ~ChannelService_approveChannelAndIssueChannelToken_result() noexcept;
  ChannelToken success;
  ChannelException e;

  _ChannelService_approveChannelAndIssueChannelToken_result__isset __isset;

  void __set_success(const ChannelToken& val);

  void __set_e(const ChannelException& val);

  bool operator == (const ChannelService_approveChannelAndIssueChannelToken_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelService_approveChannelAndIssueChannelToken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_approveChannelAndIssueChannelToken_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_approveChannelAndIssueChannelToken_presult__isset {
  _ChannelService_approveChannelAndIssueChannelToken_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_approveChannelAndIssueChannelToken_presult__isset;

class ChannelService_approveChannelAndIssueChannelToken_presult {
 public:


  virtual ~ChannelService_approveChannelAndIssueChannelToken_presult() noexcept;
  ChannelToken* success;
  ChannelException e;

  _ChannelService_approveChannelAndIssueChannelToken_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_approveChannelAndIssueRequestToken_args__isset {
  _ChannelService_approveChannelAndIssueRequestToken_args__isset() : channelId(false), otpId(false) {}
  bool channelId :1;
  bool otpId :1;
} _ChannelService_approveChannelAndIssueRequestToken_args__isset;

class ChannelService_approveChannelAndIssueRequestToken_args {
 public:

  ChannelService_approveChannelAndIssueRequestToken_args(const ChannelService_approveChannelAndIssueRequestToken_args&);
  ChannelService_approveChannelAndIssueRequestToken_args& operator=(const ChannelService_approveChannelAndIssueRequestToken_args&);
  ChannelService_approveChannelAndIssueRequestToken_args() : channelId(), otpId() {
  }

  virtual ~ChannelService_approveChannelAndIssueRequestToken_args() noexcept;
  std::string channelId;
  std::string otpId;

  _ChannelService_approveChannelAndIssueRequestToken_args__isset __isset;

  void __set_channelId(const std::string& val);

  void __set_otpId(const std::string& val);

  bool operator == (const ChannelService_approveChannelAndIssueRequestToken_args & rhs) const
  {
    if (!(channelId == rhs.channelId))
      return false;
    if (!(otpId == rhs.otpId))
      return false;
    return true;
  }
  bool operator != (const ChannelService_approveChannelAndIssueRequestToken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_approveChannelAndIssueRequestToken_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_approveChannelAndIssueRequestToken_pargs {
 public:


  virtual ~ChannelService_approveChannelAndIssueRequestToken_pargs() noexcept;
  const std::string* channelId;
  const std::string* otpId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_approveChannelAndIssueRequestToken_result__isset {
  _ChannelService_approveChannelAndIssueRequestToken_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_approveChannelAndIssueRequestToken_result__isset;

class ChannelService_approveChannelAndIssueRequestToken_result {
 public:

  ChannelService_approveChannelAndIssueRequestToken_result(const ChannelService_approveChannelAndIssueRequestToken_result&);
  ChannelService_approveChannelAndIssueRequestToken_result& operator=(const ChannelService_approveChannelAndIssueRequestToken_result&);
  ChannelService_approveChannelAndIssueRequestToken_result() : success() {
  }

  virtual ~ChannelService_approveChannelAndIssueRequestToken_result() noexcept;
  std::string success;
  ChannelException e;

  _ChannelService_approveChannelAndIssueRequestToken_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const ChannelException& val);

  bool operator == (const ChannelService_approveChannelAndIssueRequestToken_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelService_approveChannelAndIssueRequestToken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_approveChannelAndIssueRequestToken_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_approveChannelAndIssueRequestToken_presult__isset {
  _ChannelService_approveChannelAndIssueRequestToken_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_approveChannelAndIssueRequestToken_presult__isset;

class ChannelService_approveChannelAndIssueRequestToken_presult {
 public:


  virtual ~ChannelService_approveChannelAndIssueRequestToken_presult() noexcept;
  std::string* success;
  ChannelException e;

  _ChannelService_approveChannelAndIssueRequestToken_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_fetchNotificationItems_args__isset {
  _ChannelService_fetchNotificationItems_args__isset() : localRev(false) {}
  bool localRev :1;
} _ChannelService_fetchNotificationItems_args__isset;

class ChannelService_fetchNotificationItems_args {
 public:

  ChannelService_fetchNotificationItems_args(const ChannelService_fetchNotificationItems_args&);
  ChannelService_fetchNotificationItems_args& operator=(const ChannelService_fetchNotificationItems_args&);
  ChannelService_fetchNotificationItems_args() : localRev(0) {
  }

  virtual ~ChannelService_fetchNotificationItems_args() noexcept;
  int64_t localRev;

  _ChannelService_fetchNotificationItems_args__isset __isset;

  void __set_localRev(const int64_t val);

  bool operator == (const ChannelService_fetchNotificationItems_args & rhs) const
  {
    if (!(localRev == rhs.localRev))
      return false;
    return true;
  }
  bool operator != (const ChannelService_fetchNotificationItems_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_fetchNotificationItems_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_fetchNotificationItems_pargs {
 public:


  virtual ~ChannelService_fetchNotificationItems_pargs() noexcept;
  const int64_t* localRev;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_fetchNotificationItems_result__isset {
  _ChannelService_fetchNotificationItems_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_fetchNotificationItems_result__isset;

class ChannelService_fetchNotificationItems_result {
 public:

  ChannelService_fetchNotificationItems_result(const ChannelService_fetchNotificationItems_result&);
  ChannelService_fetchNotificationItems_result& operator=(const ChannelService_fetchNotificationItems_result&);
  ChannelService_fetchNotificationItems_result() {
  }

  virtual ~ChannelService_fetchNotificationItems_result() noexcept;
  NotificationFetchResult success;
  ChannelException e;

  _ChannelService_fetchNotificationItems_result__isset __isset;

  void __set_success(const NotificationFetchResult& val);

  void __set_e(const ChannelException& val);

  bool operator == (const ChannelService_fetchNotificationItems_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelService_fetchNotificationItems_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_fetchNotificationItems_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_fetchNotificationItems_presult__isset {
  _ChannelService_fetchNotificationItems_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_fetchNotificationItems_presult__isset;

class ChannelService_fetchNotificationItems_presult {
 public:


  virtual ~ChannelService_fetchNotificationItems_presult() noexcept;
  NotificationFetchResult* success;
  ChannelException e;

  _ChannelService_fetchNotificationItems_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_getApprovedChannels_args__isset {
  _ChannelService_getApprovedChannels_args__isset() : lastSynced(false), locale(false) {}
  bool lastSynced :1;
  bool locale :1;
} _ChannelService_getApprovedChannels_args__isset;

class ChannelService_getApprovedChannels_args {
 public:

  ChannelService_getApprovedChannels_args(const ChannelService_getApprovedChannels_args&);
  ChannelService_getApprovedChannels_args& operator=(const ChannelService_getApprovedChannels_args&);
  ChannelService_getApprovedChannels_args() : lastSynced(0), locale() {
  }

  virtual ~ChannelService_getApprovedChannels_args() noexcept;
  int64_t lastSynced;
  std::string locale;

  _ChannelService_getApprovedChannels_args__isset __isset;

  void __set_lastSynced(const int64_t val);

  void __set_locale(const std::string& val);

  bool operator == (const ChannelService_getApprovedChannels_args & rhs) const
  {
    if (!(lastSynced == rhs.lastSynced))
      return false;
    if (!(locale == rhs.locale))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getApprovedChannels_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getApprovedChannels_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_getApprovedChannels_pargs {
 public:


  virtual ~ChannelService_getApprovedChannels_pargs() noexcept;
  const int64_t* lastSynced;
  const std::string* locale;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getApprovedChannels_result__isset {
  _ChannelService_getApprovedChannels_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_getApprovedChannels_result__isset;

class ChannelService_getApprovedChannels_result {
 public:

  ChannelService_getApprovedChannels_result(const ChannelService_getApprovedChannels_result&);
  ChannelService_getApprovedChannels_result& operator=(const ChannelService_getApprovedChannels_result&);
  ChannelService_getApprovedChannels_result() {
  }

  virtual ~ChannelService_getApprovedChannels_result() noexcept;
  ApprovedChannelInfos success;
  ChannelException e;

  _ChannelService_getApprovedChannels_result__isset __isset;

  void __set_success(const ApprovedChannelInfos& val);

  void __set_e(const ChannelException& val);

  bool operator == (const ChannelService_getApprovedChannels_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getApprovedChannels_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getApprovedChannels_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getApprovedChannels_presult__isset {
  _ChannelService_getApprovedChannels_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_getApprovedChannels_presult__isset;

class ChannelService_getApprovedChannels_presult {
 public:


  virtual ~ChannelService_getApprovedChannels_presult() noexcept;
  ApprovedChannelInfos* success;
  ChannelException e;

  _ChannelService_getApprovedChannels_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_getChannelInfo_args__isset {
  _ChannelService_getChannelInfo_args__isset() : channelId(false), locale(false) {}
  bool channelId :1;
  bool locale :1;
} _ChannelService_getChannelInfo_args__isset;

class ChannelService_getChannelInfo_args {
 public:

  ChannelService_getChannelInfo_args(const ChannelService_getChannelInfo_args&);
  ChannelService_getChannelInfo_args& operator=(const ChannelService_getChannelInfo_args&);
  ChannelService_getChannelInfo_args() : channelId(), locale() {
  }

  virtual ~ChannelService_getChannelInfo_args() noexcept;
  std::string channelId;
  std::string locale;

  _ChannelService_getChannelInfo_args__isset __isset;

  void __set_channelId(const std::string& val);

  void __set_locale(const std::string& val);

  bool operator == (const ChannelService_getChannelInfo_args & rhs) const
  {
    if (!(channelId == rhs.channelId))
      return false;
    if (!(locale == rhs.locale))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getChannelInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getChannelInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_getChannelInfo_pargs {
 public:


  virtual ~ChannelService_getChannelInfo_pargs() noexcept;
  const std::string* channelId;
  const std::string* locale;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getChannelInfo_result__isset {
  _ChannelService_getChannelInfo_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_getChannelInfo_result__isset;

class ChannelService_getChannelInfo_result {
 public:

  ChannelService_getChannelInfo_result(const ChannelService_getChannelInfo_result&);
  ChannelService_getChannelInfo_result& operator=(const ChannelService_getChannelInfo_result&);
  ChannelService_getChannelInfo_result() {
  }

  virtual ~ChannelService_getChannelInfo_result() noexcept;
  ChannelInfo success;
  ChannelException e;

  _ChannelService_getChannelInfo_result__isset __isset;

  void __set_success(const ChannelInfo& val);

  void __set_e(const ChannelException& val);

  bool operator == (const ChannelService_getChannelInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getChannelInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getChannelInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getChannelInfo_presult__isset {
  _ChannelService_getChannelInfo_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_getChannelInfo_presult__isset;

class ChannelService_getChannelInfo_presult {
 public:


  virtual ~ChannelService_getChannelInfo_presult() noexcept;
  ChannelInfo* success;
  ChannelException e;

  _ChannelService_getChannelInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_getChannelNotificationSetting_args__isset {
  _ChannelService_getChannelNotificationSetting_args__isset() : channelId(false), locale(false) {}
  bool channelId :1;
  bool locale :1;
} _ChannelService_getChannelNotificationSetting_args__isset;

class ChannelService_getChannelNotificationSetting_args {
 public:

  ChannelService_getChannelNotificationSetting_args(const ChannelService_getChannelNotificationSetting_args&);
  ChannelService_getChannelNotificationSetting_args& operator=(const ChannelService_getChannelNotificationSetting_args&);
  ChannelService_getChannelNotificationSetting_args() : channelId(), locale() {
  }

  virtual ~ChannelService_getChannelNotificationSetting_args() noexcept;
  std::string channelId;
  std::string locale;

  _ChannelService_getChannelNotificationSetting_args__isset __isset;

  void __set_channelId(const std::string& val);

  void __set_locale(const std::string& val);

  bool operator == (const ChannelService_getChannelNotificationSetting_args & rhs) const
  {
    if (!(channelId == rhs.channelId))
      return false;
    if (!(locale == rhs.locale))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getChannelNotificationSetting_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getChannelNotificationSetting_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_getChannelNotificationSetting_pargs {
 public:


  virtual ~ChannelService_getChannelNotificationSetting_pargs() noexcept;
  const std::string* channelId;
  const std::string* locale;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getChannelNotificationSetting_result__isset {
  _ChannelService_getChannelNotificationSetting_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_getChannelNotificationSetting_result__isset;

class ChannelService_getChannelNotificationSetting_result {
 public:

  ChannelService_getChannelNotificationSetting_result(const ChannelService_getChannelNotificationSetting_result&);
  ChannelService_getChannelNotificationSetting_result& operator=(const ChannelService_getChannelNotificationSetting_result&);
  ChannelService_getChannelNotificationSetting_result() {
  }

  virtual ~ChannelService_getChannelNotificationSetting_result() noexcept;
  ChannelNotificationSetting success;
  ChannelException e;

  _ChannelService_getChannelNotificationSetting_result__isset __isset;

  void __set_success(const ChannelNotificationSetting& val);

  void __set_e(const ChannelException& val);

  bool operator == (const ChannelService_getChannelNotificationSetting_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getChannelNotificationSetting_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getChannelNotificationSetting_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getChannelNotificationSetting_presult__isset {
  _ChannelService_getChannelNotificationSetting_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_getChannelNotificationSetting_presult__isset;

class ChannelService_getChannelNotificationSetting_presult {
 public:


  virtual ~ChannelService_getChannelNotificationSetting_presult() noexcept;
  ChannelNotificationSetting* success;
  ChannelException e;

  _ChannelService_getChannelNotificationSetting_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_getChannelNotificationSettings_args__isset {
  _ChannelService_getChannelNotificationSettings_args__isset() : locale(false) {}
  bool locale :1;
} _ChannelService_getChannelNotificationSettings_args__isset;

class ChannelService_getChannelNotificationSettings_args {
 public:

  ChannelService_getChannelNotificationSettings_args(const ChannelService_getChannelNotificationSettings_args&);
  ChannelService_getChannelNotificationSettings_args& operator=(const ChannelService_getChannelNotificationSettings_args&);
  ChannelService_getChannelNotificationSettings_args() : locale() {
  }

  virtual ~ChannelService_getChannelNotificationSettings_args() noexcept;
  std::string locale;

  _ChannelService_getChannelNotificationSettings_args__isset __isset;

  void __set_locale(const std::string& val);

  bool operator == (const ChannelService_getChannelNotificationSettings_args & rhs) const
  {
    if (!(locale == rhs.locale))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getChannelNotificationSettings_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getChannelNotificationSettings_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_getChannelNotificationSettings_pargs {
 public:


  virtual ~ChannelService_getChannelNotificationSettings_pargs() noexcept;
  const std::string* locale;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getChannelNotificationSettings_result__isset {
  _ChannelService_getChannelNotificationSettings_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_getChannelNotificationSettings_result__isset;

class ChannelService_getChannelNotificationSettings_result {
 public:

  ChannelService_getChannelNotificationSettings_result(const ChannelService_getChannelNotificationSettings_result&);
  ChannelService_getChannelNotificationSettings_result& operator=(const ChannelService_getChannelNotificationSettings_result&);
  ChannelService_getChannelNotificationSettings_result() {
  }

  virtual ~ChannelService_getChannelNotificationSettings_result() noexcept;
  std::vector<ChannelNotificationSetting>  success;
  ChannelException e;

  _ChannelService_getChannelNotificationSettings_result__isset __isset;

  void __set_success(const std::vector<ChannelNotificationSetting> & val);

  void __set_e(const ChannelException& val);

  bool operator == (const ChannelService_getChannelNotificationSettings_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getChannelNotificationSettings_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getChannelNotificationSettings_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getChannelNotificationSettings_presult__isset {
  _ChannelService_getChannelNotificationSettings_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_getChannelNotificationSettings_presult__isset;

class ChannelService_getChannelNotificationSettings_presult {
 public:


  virtual ~ChannelService_getChannelNotificationSettings_presult() noexcept;
  std::vector<ChannelNotificationSetting> * success;
  ChannelException e;

  _ChannelService_getChannelNotificationSettings_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_getChannels_args__isset {
  _ChannelService_getChannels_args__isset() : lastSynced(false), locale(false) {}
  bool lastSynced :1;
  bool locale :1;
} _ChannelService_getChannels_args__isset;

class ChannelService_getChannels_args {
 public:

  ChannelService_getChannels_args(const ChannelService_getChannels_args&);
  ChannelService_getChannels_args& operator=(const ChannelService_getChannels_args&);
  ChannelService_getChannels_args() : lastSynced(0), locale() {
  }

  virtual ~ChannelService_getChannels_args() noexcept;
  int64_t lastSynced;
  std::string locale;

  _ChannelService_getChannels_args__isset __isset;

  void __set_lastSynced(const int64_t val);

  void __set_locale(const std::string& val);

  bool operator == (const ChannelService_getChannels_args & rhs) const
  {
    if (!(lastSynced == rhs.lastSynced))
      return false;
    if (!(locale == rhs.locale))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getChannels_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getChannels_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_getChannels_pargs {
 public:


  virtual ~ChannelService_getChannels_pargs() noexcept;
  const int64_t* lastSynced;
  const std::string* locale;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getChannels_result__isset {
  _ChannelService_getChannels_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_getChannels_result__isset;

class ChannelService_getChannels_result {
 public:

  ChannelService_getChannels_result(const ChannelService_getChannels_result&);
  ChannelService_getChannels_result& operator=(const ChannelService_getChannels_result&);
  ChannelService_getChannels_result() {
  }

  virtual ~ChannelService_getChannels_result() noexcept;
  ChannelInfos success;
  ChannelException e;

  _ChannelService_getChannels_result__isset __isset;

  void __set_success(const ChannelInfos& val);

  void __set_e(const ChannelException& val);

  bool operator == (const ChannelService_getChannels_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getChannels_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getChannels_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getChannels_presult__isset {
  _ChannelService_getChannels_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_getChannels_presult__isset;

class ChannelService_getChannels_presult {
 public:


  virtual ~ChannelService_getChannels_presult() noexcept;
  ChannelInfos* success;
  ChannelException e;

  _ChannelService_getChannels_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_getDomains_args__isset {
  _ChannelService_getDomains_args__isset() : lastSynced(false) {}
  bool lastSynced :1;
} _ChannelService_getDomains_args__isset;

class ChannelService_getDomains_args {
 public:

  ChannelService_getDomains_args(const ChannelService_getDomains_args&);
  ChannelService_getDomains_args& operator=(const ChannelService_getDomains_args&);
  ChannelService_getDomains_args() : lastSynced(0) {
  }

  virtual ~ChannelService_getDomains_args() noexcept;
  int64_t lastSynced;

  _ChannelService_getDomains_args__isset __isset;

  void __set_lastSynced(const int64_t val);

  bool operator == (const ChannelService_getDomains_args & rhs) const
  {
    if (!(lastSynced == rhs.lastSynced))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getDomains_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getDomains_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_getDomains_pargs {
 public:


  virtual ~ChannelService_getDomains_pargs() noexcept;
  const int64_t* lastSynced;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getDomains_result__isset {
  _ChannelService_getDomains_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_getDomains_result__isset;

class ChannelService_getDomains_result {
 public:

  ChannelService_getDomains_result(const ChannelService_getDomains_result&);
  ChannelService_getDomains_result& operator=(const ChannelService_getDomains_result&);
  ChannelService_getDomains_result() {
  }

  virtual ~ChannelService_getDomains_result() noexcept;
  ChannelDomains success;
  ChannelException e;

  _ChannelService_getDomains_result__isset __isset;

  void __set_success(const ChannelDomains& val);

  void __set_e(const ChannelException& val);

  bool operator == (const ChannelService_getDomains_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getDomains_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getDomains_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getDomains_presult__isset {
  _ChannelService_getDomains_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_getDomains_presult__isset;

class ChannelService_getDomains_presult {
 public:


  virtual ~ChannelService_getDomains_presult() noexcept;
  ChannelDomains* success;
  ChannelException e;

  _ChannelService_getDomains_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_getFriendChannelMatrices_args__isset {
  _ChannelService_getFriendChannelMatrices_args__isset() : channelIds(false) {}
  bool channelIds :1;
} _ChannelService_getFriendChannelMatrices_args__isset;

class ChannelService_getFriendChannelMatrices_args {
 public:

  ChannelService_getFriendChannelMatrices_args(const ChannelService_getFriendChannelMatrices_args&);
  ChannelService_getFriendChannelMatrices_args& operator=(const ChannelService_getFriendChannelMatrices_args&);
  ChannelService_getFriendChannelMatrices_args() {
  }

  virtual ~ChannelService_getFriendChannelMatrices_args() noexcept;
  std::vector<std::string>  channelIds;

  _ChannelService_getFriendChannelMatrices_args__isset __isset;

  void __set_channelIds(const std::vector<std::string> & val);

  bool operator == (const ChannelService_getFriendChannelMatrices_args & rhs) const
  {
    if (!(channelIds == rhs.channelIds))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getFriendChannelMatrices_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getFriendChannelMatrices_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_getFriendChannelMatrices_pargs {
 public:


  virtual ~ChannelService_getFriendChannelMatrices_pargs() noexcept;
  const std::vector<std::string> * channelIds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getFriendChannelMatrices_result__isset {
  _ChannelService_getFriendChannelMatrices_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_getFriendChannelMatrices_result__isset;

class ChannelService_getFriendChannelMatrices_result {
 public:

  ChannelService_getFriendChannelMatrices_result(const ChannelService_getFriendChannelMatrices_result&);
  ChannelService_getFriendChannelMatrices_result& operator=(const ChannelService_getFriendChannelMatrices_result&);
  ChannelService_getFriendChannelMatrices_result() {
  }

  virtual ~ChannelService_getFriendChannelMatrices_result() noexcept;
  FriendChannelMatricesResponse success;
  ChannelException e;

  _ChannelService_getFriendChannelMatrices_result__isset __isset;

  void __set_success(const FriendChannelMatricesResponse& val);

  void __set_e(const ChannelException& val);

  bool operator == (const ChannelService_getFriendChannelMatrices_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getFriendChannelMatrices_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getFriendChannelMatrices_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getFriendChannelMatrices_presult__isset {
  _ChannelService_getFriendChannelMatrices_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_getFriendChannelMatrices_presult__isset;

class ChannelService_getFriendChannelMatrices_presult {
 public:


  virtual ~ChannelService_getFriendChannelMatrices_presult() noexcept;
  FriendChannelMatricesResponse* success;
  ChannelException e;

  _ChannelService_getFriendChannelMatrices_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_updateChannelSettings_args__isset {
  _ChannelService_updateChannelSettings_args__isset() : channelSettings(false) {}
  bool channelSettings :1;
} _ChannelService_updateChannelSettings_args__isset;

class ChannelService_updateChannelSettings_args {
 public:

  ChannelService_updateChannelSettings_args(const ChannelService_updateChannelSettings_args&);
  ChannelService_updateChannelSettings_args& operator=(const ChannelService_updateChannelSettings_args&);
  ChannelService_updateChannelSettings_args() {
  }

  virtual ~ChannelService_updateChannelSettings_args() noexcept;
  ChannelSettings channelSettings;

  _ChannelService_updateChannelSettings_args__isset __isset;

  void __set_channelSettings(const ChannelSettings& val);

  bool operator == (const ChannelService_updateChannelSettings_args & rhs) const
  {
    if (!(channelSettings == rhs.channelSettings))
      return false;
    return true;
  }
  bool operator != (const ChannelService_updateChannelSettings_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_updateChannelSettings_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_updateChannelSettings_pargs {
 public:


  virtual ~ChannelService_updateChannelSettings_pargs() noexcept;
  const ChannelSettings* channelSettings;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_updateChannelSettings_result__isset {
  _ChannelService_updateChannelSettings_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_updateChannelSettings_result__isset;

class ChannelService_updateChannelSettings_result {
 public:

  ChannelService_updateChannelSettings_result(const ChannelService_updateChannelSettings_result&);
  ChannelService_updateChannelSettings_result& operator=(const ChannelService_updateChannelSettings_result&);
  ChannelService_updateChannelSettings_result() : success(0) {
  }

  virtual ~ChannelService_updateChannelSettings_result() noexcept;
  bool success;
  ChannelException e;

  _ChannelService_updateChannelSettings_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const ChannelException& val);

  bool operator == (const ChannelService_updateChannelSettings_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelService_updateChannelSettings_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_updateChannelSettings_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_updateChannelSettings_presult__isset {
  _ChannelService_updateChannelSettings_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_updateChannelSettings_presult__isset;

class ChannelService_updateChannelSettings_presult {
 public:


  virtual ~ChannelService_updateChannelSettings_presult() noexcept;
  bool* success;
  ChannelException e;

  _ChannelService_updateChannelSettings_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_getCommonDomains_args__isset {
  _ChannelService_getCommonDomains_args__isset() : lastSynced(false) {}
  bool lastSynced :1;
} _ChannelService_getCommonDomains_args__isset;

class ChannelService_getCommonDomains_args {
 public:

  ChannelService_getCommonDomains_args(const ChannelService_getCommonDomains_args&);
  ChannelService_getCommonDomains_args& operator=(const ChannelService_getCommonDomains_args&);
  ChannelService_getCommonDomains_args() : lastSynced(0) {
  }

  virtual ~ChannelService_getCommonDomains_args() noexcept;
  int64_t lastSynced;

  _ChannelService_getCommonDomains_args__isset __isset;

  void __set_lastSynced(const int64_t val);

  bool operator == (const ChannelService_getCommonDomains_args & rhs) const
  {
    if (!(lastSynced == rhs.lastSynced))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getCommonDomains_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getCommonDomains_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_getCommonDomains_pargs {
 public:


  virtual ~ChannelService_getCommonDomains_pargs() noexcept;
  const int64_t* lastSynced;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getCommonDomains_result__isset {
  _ChannelService_getCommonDomains_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_getCommonDomains_result__isset;

class ChannelService_getCommonDomains_result {
 public:

  ChannelService_getCommonDomains_result(const ChannelService_getCommonDomains_result&);
  ChannelService_getCommonDomains_result& operator=(const ChannelService_getCommonDomains_result&);
  ChannelService_getCommonDomains_result() {
  }

  virtual ~ChannelService_getCommonDomains_result() noexcept;
  ChannelDomains success;
  ChannelException e;

  _ChannelService_getCommonDomains_result__isset __isset;

  void __set_success(const ChannelDomains& val);

  void __set_e(const ChannelException& val);

  bool operator == (const ChannelService_getCommonDomains_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getCommonDomains_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getCommonDomains_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getCommonDomains_presult__isset {
  _ChannelService_getCommonDomains_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_getCommonDomains_presult__isset;

class ChannelService_getCommonDomains_presult {
 public:


  virtual ~ChannelService_getCommonDomains_presult() noexcept;
  ChannelDomains* success;
  ChannelException e;

  _ChannelService_getCommonDomains_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_getNotificationBadgeCount_args__isset {
  _ChannelService_getNotificationBadgeCount_args__isset() : localRev(false) {}
  bool localRev :1;
} _ChannelService_getNotificationBadgeCount_args__isset;

class ChannelService_getNotificationBadgeCount_args {
 public:

  ChannelService_getNotificationBadgeCount_args(const ChannelService_getNotificationBadgeCount_args&);
  ChannelService_getNotificationBadgeCount_args& operator=(const ChannelService_getNotificationBadgeCount_args&);
  ChannelService_getNotificationBadgeCount_args() : localRev(0) {
  }

  virtual ~ChannelService_getNotificationBadgeCount_args() noexcept;
  int64_t localRev;

  _ChannelService_getNotificationBadgeCount_args__isset __isset;

  void __set_localRev(const int64_t val);

  bool operator == (const ChannelService_getNotificationBadgeCount_args & rhs) const
  {
    if (!(localRev == rhs.localRev))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getNotificationBadgeCount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getNotificationBadgeCount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_getNotificationBadgeCount_pargs {
 public:


  virtual ~ChannelService_getNotificationBadgeCount_pargs() noexcept;
  const int64_t* localRev;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getNotificationBadgeCount_result__isset {
  _ChannelService_getNotificationBadgeCount_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_getNotificationBadgeCount_result__isset;

class ChannelService_getNotificationBadgeCount_result {
 public:

  ChannelService_getNotificationBadgeCount_result(const ChannelService_getNotificationBadgeCount_result&);
  ChannelService_getNotificationBadgeCount_result& operator=(const ChannelService_getNotificationBadgeCount_result&);
  ChannelService_getNotificationBadgeCount_result() : success(0) {
  }

  virtual ~ChannelService_getNotificationBadgeCount_result() noexcept;
  int32_t success;
  ChannelException e;

  _ChannelService_getNotificationBadgeCount_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_e(const ChannelException& val);

  bool operator == (const ChannelService_getNotificationBadgeCount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getNotificationBadgeCount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getNotificationBadgeCount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getNotificationBadgeCount_presult__isset {
  _ChannelService_getNotificationBadgeCount_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_getNotificationBadgeCount_presult__isset;

class ChannelService_getNotificationBadgeCount_presult {
 public:


  virtual ~ChannelService_getNotificationBadgeCount_presult() noexcept;
  int32_t* success;
  ChannelException e;

  _ChannelService_getNotificationBadgeCount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_issueChannelToken_args__isset {
  _ChannelService_issueChannelToken_args__isset() : channelId(false) {}
  bool channelId :1;
} _ChannelService_issueChannelToken_args__isset;

class ChannelService_issueChannelToken_args {
 public:

  ChannelService_issueChannelToken_args(const ChannelService_issueChannelToken_args&);
  ChannelService_issueChannelToken_args& operator=(const ChannelService_issueChannelToken_args&);
  ChannelService_issueChannelToken_args() : channelId() {
  }

  virtual ~ChannelService_issueChannelToken_args() noexcept;
  std::string channelId;

  _ChannelService_issueChannelToken_args__isset __isset;

  void __set_channelId(const std::string& val);

  bool operator == (const ChannelService_issueChannelToken_args & rhs) const
  {
    if (!(channelId == rhs.channelId))
      return false;
    return true;
  }
  bool operator != (const ChannelService_issueChannelToken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_issueChannelToken_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_issueChannelToken_pargs {
 public:


  virtual ~ChannelService_issueChannelToken_pargs() noexcept;
  const std::string* channelId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_issueChannelToken_result__isset {
  _ChannelService_issueChannelToken_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_issueChannelToken_result__isset;

class ChannelService_issueChannelToken_result {
 public:

  ChannelService_issueChannelToken_result(const ChannelService_issueChannelToken_result&);
  ChannelService_issueChannelToken_result& operator=(const ChannelService_issueChannelToken_result&);
  ChannelService_issueChannelToken_result() {
  }

  virtual ~ChannelService_issueChannelToken_result() noexcept;
  ChannelToken success;
  ChannelException e;

  _ChannelService_issueChannelToken_result__isset __isset;

  void __set_success(const ChannelToken& val);

  void __set_e(const ChannelException& val);

  bool operator == (const ChannelService_issueChannelToken_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelService_issueChannelToken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_issueChannelToken_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_issueChannelToken_presult__isset {
  _ChannelService_issueChannelToken_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_issueChannelToken_presult__isset;

class ChannelService_issueChannelToken_presult {
 public:


  virtual ~ChannelService_issueChannelToken_presult() noexcept;
  ChannelToken* success;
  ChannelException e;

  _ChannelService_issueChannelToken_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_issueRequestToken_args__isset {
  _ChannelService_issueRequestToken_args__isset() : channelId(false), otpId(false) {}
  bool channelId :1;
  bool otpId :1;
} _ChannelService_issueRequestToken_args__isset;

class ChannelService_issueRequestToken_args {
 public:

  ChannelService_issueRequestToken_args(const ChannelService_issueRequestToken_args&);
  ChannelService_issueRequestToken_args& operator=(const ChannelService_issueRequestToken_args&);
  ChannelService_issueRequestToken_args() : channelId(), otpId() {
  }

  virtual ~ChannelService_issueRequestToken_args() noexcept;
  std::string channelId;
  std::string otpId;

  _ChannelService_issueRequestToken_args__isset __isset;

  void __set_channelId(const std::string& val);

  void __set_otpId(const std::string& val);

  bool operator == (const ChannelService_issueRequestToken_args & rhs) const
  {
    if (!(channelId == rhs.channelId))
      return false;
    if (!(otpId == rhs.otpId))
      return false;
    return true;
  }
  bool operator != (const ChannelService_issueRequestToken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_issueRequestToken_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_issueRequestToken_pargs {
 public:


  virtual ~ChannelService_issueRequestToken_pargs() noexcept;
  const std::string* channelId;
  const std::string* otpId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_issueRequestToken_result__isset {
  _ChannelService_issueRequestToken_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_issueRequestToken_result__isset;

class ChannelService_issueRequestToken_result {
 public:

  ChannelService_issueRequestToken_result(const ChannelService_issueRequestToken_result&);
  ChannelService_issueRequestToken_result& operator=(const ChannelService_issueRequestToken_result&);
  ChannelService_issueRequestToken_result() : success() {
  }

  virtual ~ChannelService_issueRequestToken_result() noexcept;
  std::string success;
  ChannelException e;

  _ChannelService_issueRequestToken_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const ChannelException& val);

  bool operator == (const ChannelService_issueRequestToken_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelService_issueRequestToken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_issueRequestToken_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_issueRequestToken_presult__isset {
  _ChannelService_issueRequestToken_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_issueRequestToken_presult__isset;

class ChannelService_issueRequestToken_presult {
 public:


  virtual ~ChannelService_issueRequestToken_presult() noexcept;
  std::string* success;
  ChannelException e;

  _ChannelService_issueRequestToken_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_issueRequestTokenWithAuthScheme_args__isset {
  _ChannelService_issueRequestTokenWithAuthScheme_args__isset() : channelId(false), otpId(false), authScheme(false), returnUrl(false) {}
  bool channelId :1;
  bool otpId :1;
  bool authScheme :1;
  bool returnUrl :1;
} _ChannelService_issueRequestTokenWithAuthScheme_args__isset;

class ChannelService_issueRequestTokenWithAuthScheme_args {
 public:

  ChannelService_issueRequestTokenWithAuthScheme_args(const ChannelService_issueRequestTokenWithAuthScheme_args&);
  ChannelService_issueRequestTokenWithAuthScheme_args& operator=(const ChannelService_issueRequestTokenWithAuthScheme_args&);
  ChannelService_issueRequestTokenWithAuthScheme_args() : channelId(), otpId(), returnUrl() {
  }

  virtual ~ChannelService_issueRequestTokenWithAuthScheme_args() noexcept;
  std::string channelId;
  std::string otpId;
  std::vector<std::string>  authScheme;
  std::string returnUrl;

  _ChannelService_issueRequestTokenWithAuthScheme_args__isset __isset;

  void __set_channelId(const std::string& val);

  void __set_otpId(const std::string& val);

  void __set_authScheme(const std::vector<std::string> & val);

  void __set_returnUrl(const std::string& val);

  bool operator == (const ChannelService_issueRequestTokenWithAuthScheme_args & rhs) const
  {
    if (!(channelId == rhs.channelId))
      return false;
    if (!(otpId == rhs.otpId))
      return false;
    if (!(authScheme == rhs.authScheme))
      return false;
    if (!(returnUrl == rhs.returnUrl))
      return false;
    return true;
  }
  bool operator != (const ChannelService_issueRequestTokenWithAuthScheme_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_issueRequestTokenWithAuthScheme_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_issueRequestTokenWithAuthScheme_pargs {
 public:


  virtual ~ChannelService_issueRequestTokenWithAuthScheme_pargs() noexcept;
  const std::string* channelId;
  const std::string* otpId;
  const std::vector<std::string> * authScheme;
  const std::string* returnUrl;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_issueRequestTokenWithAuthScheme_result__isset {
  _ChannelService_issueRequestTokenWithAuthScheme_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_issueRequestTokenWithAuthScheme_result__isset;

class ChannelService_issueRequestTokenWithAuthScheme_result {
 public:

  ChannelService_issueRequestTokenWithAuthScheme_result(const ChannelService_issueRequestTokenWithAuthScheme_result&);
  ChannelService_issueRequestTokenWithAuthScheme_result& operator=(const ChannelService_issueRequestTokenWithAuthScheme_result&);
  ChannelService_issueRequestTokenWithAuthScheme_result() {
  }

  virtual ~ChannelService_issueRequestTokenWithAuthScheme_result() noexcept;
  RequestTokenResponse success;
  ChannelException e;

  _ChannelService_issueRequestTokenWithAuthScheme_result__isset __isset;

  void __set_success(const RequestTokenResponse& val);

  void __set_e(const ChannelException& val);

  bool operator == (const ChannelService_issueRequestTokenWithAuthScheme_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelService_issueRequestTokenWithAuthScheme_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_issueRequestTokenWithAuthScheme_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_issueRequestTokenWithAuthScheme_presult__isset {
  _ChannelService_issueRequestTokenWithAuthScheme_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_issueRequestTokenWithAuthScheme_presult__isset;

class ChannelService_issueRequestTokenWithAuthScheme_presult {
 public:


  virtual ~ChannelService_issueRequestTokenWithAuthScheme_presult() noexcept;
  RequestTokenResponse* success;
  ChannelException e;

  _ChannelService_issueRequestTokenWithAuthScheme_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_issueRequestTokenForAutoLogin_args__isset {
  _ChannelService_issueRequestTokenForAutoLogin_args__isset() : channelId(false), otpId(false), redirectUrl(false) {}
  bool channelId :1;
  bool otpId :1;
  bool redirectUrl :1;
} _ChannelService_issueRequestTokenForAutoLogin_args__isset;

class ChannelService_issueRequestTokenForAutoLogin_args {
 public:

  ChannelService_issueRequestTokenForAutoLogin_args(const ChannelService_issueRequestTokenForAutoLogin_args&);
  ChannelService_issueRequestTokenForAutoLogin_args& operator=(const ChannelService_issueRequestTokenForAutoLogin_args&);
  ChannelService_issueRequestTokenForAutoLogin_args() : channelId(), otpId(), redirectUrl() {
  }

  virtual ~ChannelService_issueRequestTokenForAutoLogin_args() noexcept;
  std::string channelId;
  std::string otpId;
  std::string redirectUrl;

  _ChannelService_issueRequestTokenForAutoLogin_args__isset __isset;

  void __set_channelId(const std::string& val);

  void __set_otpId(const std::string& val);

  void __set_redirectUrl(const std::string& val);

  bool operator == (const ChannelService_issueRequestTokenForAutoLogin_args & rhs) const
  {
    if (!(channelId == rhs.channelId))
      return false;
    if (!(otpId == rhs.otpId))
      return false;
    if (!(redirectUrl == rhs.redirectUrl))
      return false;
    return true;
  }
  bool operator != (const ChannelService_issueRequestTokenForAutoLogin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_issueRequestTokenForAutoLogin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_issueRequestTokenForAutoLogin_pargs {
 public:


  virtual ~ChannelService_issueRequestTokenForAutoLogin_pargs() noexcept;
  const std::string* channelId;
  const std::string* otpId;
  const std::string* redirectUrl;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_issueRequestTokenForAutoLogin_result__isset {
  _ChannelService_issueRequestTokenForAutoLogin_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_issueRequestTokenForAutoLogin_result__isset;

class ChannelService_issueRequestTokenForAutoLogin_result {
 public:

  ChannelService_issueRequestTokenForAutoLogin_result(const ChannelService_issueRequestTokenForAutoLogin_result&);
  ChannelService_issueRequestTokenForAutoLogin_result& operator=(const ChannelService_issueRequestTokenForAutoLogin_result&);
  ChannelService_issueRequestTokenForAutoLogin_result() : success() {
  }

  virtual ~ChannelService_issueRequestTokenForAutoLogin_result() noexcept;
  std::string success;
  ChannelException e;

  _ChannelService_issueRequestTokenForAutoLogin_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const ChannelException& val);

  bool operator == (const ChannelService_issueRequestTokenForAutoLogin_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelService_issueRequestTokenForAutoLogin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_issueRequestTokenForAutoLogin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_issueRequestTokenForAutoLogin_presult__isset {
  _ChannelService_issueRequestTokenForAutoLogin_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_issueRequestTokenForAutoLogin_presult__isset;

class ChannelService_issueRequestTokenForAutoLogin_presult {
 public:


  virtual ~ChannelService_issueRequestTokenForAutoLogin_presult() noexcept;
  std::string* success;
  ChannelException e;

  _ChannelService_issueRequestTokenForAutoLogin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_getUpdatedChannelIds_args__isset {
  _ChannelService_getUpdatedChannelIds_args__isset() : channelIds(false) {}
  bool channelIds :1;
} _ChannelService_getUpdatedChannelIds_args__isset;

class ChannelService_getUpdatedChannelIds_args {
 public:

  ChannelService_getUpdatedChannelIds_args(const ChannelService_getUpdatedChannelIds_args&);
  ChannelService_getUpdatedChannelIds_args& operator=(const ChannelService_getUpdatedChannelIds_args&);
  ChannelService_getUpdatedChannelIds_args() {
  }

  virtual ~ChannelService_getUpdatedChannelIds_args() noexcept;
  std::vector<ChannelIdWithLastUpdated>  channelIds;

  _ChannelService_getUpdatedChannelIds_args__isset __isset;

  void __set_channelIds(const std::vector<ChannelIdWithLastUpdated> & val);

  bool operator == (const ChannelService_getUpdatedChannelIds_args & rhs) const
  {
    if (!(channelIds == rhs.channelIds))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getUpdatedChannelIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getUpdatedChannelIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_getUpdatedChannelIds_pargs {
 public:


  virtual ~ChannelService_getUpdatedChannelIds_pargs() noexcept;
  const std::vector<ChannelIdWithLastUpdated> * channelIds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getUpdatedChannelIds_result__isset {
  _ChannelService_getUpdatedChannelIds_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_getUpdatedChannelIds_result__isset;

class ChannelService_getUpdatedChannelIds_result {
 public:

  ChannelService_getUpdatedChannelIds_result(const ChannelService_getUpdatedChannelIds_result&);
  ChannelService_getUpdatedChannelIds_result& operator=(const ChannelService_getUpdatedChannelIds_result&);
  ChannelService_getUpdatedChannelIds_result() {
  }

  virtual ~ChannelService_getUpdatedChannelIds_result() noexcept;
  std::vector<std::string>  success;
  ChannelException e;

  _ChannelService_getUpdatedChannelIds_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const ChannelException& val);

  bool operator == (const ChannelService_getUpdatedChannelIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getUpdatedChannelIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getUpdatedChannelIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getUpdatedChannelIds_presult__isset {
  _ChannelService_getUpdatedChannelIds_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_getUpdatedChannelIds_presult__isset;

class ChannelService_getUpdatedChannelIds_presult {
 public:


  virtual ~ChannelService_getUpdatedChannelIds_presult() noexcept;
  std::vector<std::string> * success;
  ChannelException e;

  _ChannelService_getUpdatedChannelIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_reserveCoinUse_args__isset {
  _ChannelService_reserveCoinUse_args__isset() : request(false), locale(false) {}
  bool request :1;
  bool locale :1;
} _ChannelService_reserveCoinUse_args__isset;

class ChannelService_reserveCoinUse_args {
 public:

  ChannelService_reserveCoinUse_args(const ChannelService_reserveCoinUse_args&);
  ChannelService_reserveCoinUse_args& operator=(const ChannelService_reserveCoinUse_args&);
  ChannelService_reserveCoinUse_args() : locale() {
  }

  virtual ~ChannelService_reserveCoinUse_args() noexcept;
  CoinUseReservation request;
  std::string locale;

  _ChannelService_reserveCoinUse_args__isset __isset;

  void __set_request(const CoinUseReservation& val);

  void __set_locale(const std::string& val);

  bool operator == (const ChannelService_reserveCoinUse_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    if (!(locale == rhs.locale))
      return false;
    return true;
  }
  bool operator != (const ChannelService_reserveCoinUse_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_reserveCoinUse_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_reserveCoinUse_pargs {
 public:


  virtual ~ChannelService_reserveCoinUse_pargs() noexcept;
  const CoinUseReservation* request;
  const std::string* locale;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_reserveCoinUse_result__isset {
  _ChannelService_reserveCoinUse_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_reserveCoinUse_result__isset;

class ChannelService_reserveCoinUse_result {
 public:

  ChannelService_reserveCoinUse_result(const ChannelService_reserveCoinUse_result&);
  ChannelService_reserveCoinUse_result& operator=(const ChannelService_reserveCoinUse_result&);
  ChannelService_reserveCoinUse_result() : success() {
  }

  virtual ~ChannelService_reserveCoinUse_result() noexcept;
  std::string success;
  ChannelException e;

  _ChannelService_reserveCoinUse_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const ChannelException& val);

  bool operator == (const ChannelService_reserveCoinUse_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelService_reserveCoinUse_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_reserveCoinUse_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_reserveCoinUse_presult__isset {
  _ChannelService_reserveCoinUse_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_reserveCoinUse_presult__isset;

class ChannelService_reserveCoinUse_presult {
 public:


  virtual ~ChannelService_reserveCoinUse_presult() noexcept;
  std::string* success;
  ChannelException e;

  _ChannelService_reserveCoinUse_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_revokeChannel_args__isset {
  _ChannelService_revokeChannel_args__isset() : channelId(false) {}
  bool channelId :1;
} _ChannelService_revokeChannel_args__isset;

class ChannelService_revokeChannel_args {
 public:

  ChannelService_revokeChannel_args(const ChannelService_revokeChannel_args&);
  ChannelService_revokeChannel_args& operator=(const ChannelService_revokeChannel_args&);
  ChannelService_revokeChannel_args() : channelId() {
  }

  virtual ~ChannelService_revokeChannel_args() noexcept;
  std::string channelId;

  _ChannelService_revokeChannel_args__isset __isset;

  void __set_channelId(const std::string& val);

  bool operator == (const ChannelService_revokeChannel_args & rhs) const
  {
    if (!(channelId == rhs.channelId))
      return false;
    return true;
  }
  bool operator != (const ChannelService_revokeChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_revokeChannel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_revokeChannel_pargs {
 public:


  virtual ~ChannelService_revokeChannel_pargs() noexcept;
  const std::string* channelId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_revokeChannel_result__isset {
  _ChannelService_revokeChannel_result__isset() : e(false) {}
  bool e :1;
} _ChannelService_revokeChannel_result__isset;

class ChannelService_revokeChannel_result {
 public:

  ChannelService_revokeChannel_result(const ChannelService_revokeChannel_result&);
  ChannelService_revokeChannel_result& operator=(const ChannelService_revokeChannel_result&);
  ChannelService_revokeChannel_result() {
  }

  virtual ~ChannelService_revokeChannel_result() noexcept;
  ChannelException e;

  _ChannelService_revokeChannel_result__isset __isset;

  void __set_e(const ChannelException& val);

  bool operator == (const ChannelService_revokeChannel_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelService_revokeChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_revokeChannel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_revokeChannel_presult__isset {
  _ChannelService_revokeChannel_presult__isset() : e(false) {}
  bool e :1;
} _ChannelService_revokeChannel_presult__isset;

class ChannelService_revokeChannel_presult {
 public:


  virtual ~ChannelService_revokeChannel_presult() noexcept;
  ChannelException e;

  _ChannelService_revokeChannel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_syncChannelData_args__isset {
  _ChannelService_syncChannelData_args__isset() : lastSynced(false), locale(false) {}
  bool lastSynced :1;
  bool locale :1;
} _ChannelService_syncChannelData_args__isset;

class ChannelService_syncChannelData_args {
 public:

  ChannelService_syncChannelData_args(const ChannelService_syncChannelData_args&);
  ChannelService_syncChannelData_args& operator=(const ChannelService_syncChannelData_args&);
  ChannelService_syncChannelData_args() : lastSynced(0), locale() {
  }

  virtual ~ChannelService_syncChannelData_args() noexcept;
  int64_t lastSynced;
  std::string locale;

  _ChannelService_syncChannelData_args__isset __isset;

  void __set_lastSynced(const int64_t val);

  void __set_locale(const std::string& val);

  bool operator == (const ChannelService_syncChannelData_args & rhs) const
  {
    if (!(lastSynced == rhs.lastSynced))
      return false;
    if (!(locale == rhs.locale))
      return false;
    return true;
  }
  bool operator != (const ChannelService_syncChannelData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_syncChannelData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_syncChannelData_pargs {
 public:


  virtual ~ChannelService_syncChannelData_pargs() noexcept;
  const int64_t* lastSynced;
  const std::string* locale;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_syncChannelData_result__isset {
  _ChannelService_syncChannelData_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_syncChannelData_result__isset;

class ChannelService_syncChannelData_result {
 public:

  ChannelService_syncChannelData_result(const ChannelService_syncChannelData_result&);
  ChannelService_syncChannelData_result& operator=(const ChannelService_syncChannelData_result&);
  ChannelService_syncChannelData_result() {
  }

  virtual ~ChannelService_syncChannelData_result() noexcept;
  ChannelSyncDatas success;
  ChannelException e;

  _ChannelService_syncChannelData_result__isset __isset;

  void __set_success(const ChannelSyncDatas& val);

  void __set_e(const ChannelException& val);

  bool operator == (const ChannelService_syncChannelData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelService_syncChannelData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_syncChannelData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_syncChannelData_presult__isset {
  _ChannelService_syncChannelData_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelService_syncChannelData_presult__isset;

class ChannelService_syncChannelData_presult {
 public:


  virtual ~ChannelService_syncChannelData_presult() noexcept;
  ChannelSyncDatas* success;
  ChannelException e;

  _ChannelService_syncChannelData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_updateChannelNotificationSetting_args__isset {
  _ChannelService_updateChannelNotificationSetting_args__isset() : setting(false) {}
  bool setting :1;
} _ChannelService_updateChannelNotificationSetting_args__isset;

class ChannelService_updateChannelNotificationSetting_args {
 public:

  ChannelService_updateChannelNotificationSetting_args(const ChannelService_updateChannelNotificationSetting_args&);
  ChannelService_updateChannelNotificationSetting_args& operator=(const ChannelService_updateChannelNotificationSetting_args&);
  ChannelService_updateChannelNotificationSetting_args() {
  }

  virtual ~ChannelService_updateChannelNotificationSetting_args() noexcept;
  std::vector<ChannelNotificationSetting>  setting;

  _ChannelService_updateChannelNotificationSetting_args__isset __isset;

  void __set_setting(const std::vector<ChannelNotificationSetting> & val);

  bool operator == (const ChannelService_updateChannelNotificationSetting_args & rhs) const
  {
    if (!(setting == rhs.setting))
      return false;
    return true;
  }
  bool operator != (const ChannelService_updateChannelNotificationSetting_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_updateChannelNotificationSetting_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_updateChannelNotificationSetting_pargs {
 public:


  virtual ~ChannelService_updateChannelNotificationSetting_pargs() noexcept;
  const std::vector<ChannelNotificationSetting> * setting;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_updateChannelNotificationSetting_result__isset {
  _ChannelService_updateChannelNotificationSetting_result__isset() : e(false) {}
  bool e :1;
} _ChannelService_updateChannelNotificationSetting_result__isset;

class ChannelService_updateChannelNotificationSetting_result {
 public:

  ChannelService_updateChannelNotificationSetting_result(const ChannelService_updateChannelNotificationSetting_result&);
  ChannelService_updateChannelNotificationSetting_result& operator=(const ChannelService_updateChannelNotificationSetting_result&);
  ChannelService_updateChannelNotificationSetting_result() {
  }

  virtual ~ChannelService_updateChannelNotificationSetting_result() noexcept;
  ChannelException e;

  _ChannelService_updateChannelNotificationSetting_result__isset __isset;

  void __set_e(const ChannelException& val);

  bool operator == (const ChannelService_updateChannelNotificationSetting_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelService_updateChannelNotificationSetting_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_updateChannelNotificationSetting_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_updateChannelNotificationSetting_presult__isset {
  _ChannelService_updateChannelNotificationSetting_presult__isset() : e(false) {}
  bool e :1;
} _ChannelService_updateChannelNotificationSetting_presult__isset;

class ChannelService_updateChannelNotificationSetting_presult {
 public:


  virtual ~ChannelService_updateChannelNotificationSetting_presult() noexcept;
  ChannelException e;

  _ChannelService_updateChannelNotificationSetting_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ChannelServiceClient : virtual public ChannelServiceIf {
 public:
  ChannelServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ChannelServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void issueOTP(OTPResult& _return, const std::string& channelId);
  void send_issueOTP(const std::string& channelId);
  void recv_issueOTP(OTPResult& _return);
  void approveChannelAndIssueChannelToken(ChannelToken& _return, const std::string& channelId);
  void send_approveChannelAndIssueChannelToken(const std::string& channelId);
  void recv_approveChannelAndIssueChannelToken(ChannelToken& _return);
  void approveChannelAndIssueRequestToken(std::string& _return, const std::string& channelId, const std::string& otpId);
  void send_approveChannelAndIssueRequestToken(const std::string& channelId, const std::string& otpId);
  void recv_approveChannelAndIssueRequestToken(std::string& _return);
  void fetchNotificationItems(NotificationFetchResult& _return, const int64_t localRev);
  void send_fetchNotificationItems(const int64_t localRev);
  void recv_fetchNotificationItems(NotificationFetchResult& _return);
  void getApprovedChannels(ApprovedChannelInfos& _return, const int64_t lastSynced, const std::string& locale);
  void send_getApprovedChannels(const int64_t lastSynced, const std::string& locale);
  void recv_getApprovedChannels(ApprovedChannelInfos& _return);
  void getChannelInfo(ChannelInfo& _return, const std::string& channelId, const std::string& locale);
  void send_getChannelInfo(const std::string& channelId, const std::string& locale);
  void recv_getChannelInfo(ChannelInfo& _return);
  void getChannelNotificationSetting(ChannelNotificationSetting& _return, const std::string& channelId, const std::string& locale);
  void send_getChannelNotificationSetting(const std::string& channelId, const std::string& locale);
  void recv_getChannelNotificationSetting(ChannelNotificationSetting& _return);
  void getChannelNotificationSettings(std::vector<ChannelNotificationSetting> & _return, const std::string& locale);
  void send_getChannelNotificationSettings(const std::string& locale);
  void recv_getChannelNotificationSettings(std::vector<ChannelNotificationSetting> & _return);
  void getChannels(ChannelInfos& _return, const int64_t lastSynced, const std::string& locale);
  void send_getChannels(const int64_t lastSynced, const std::string& locale);
  void recv_getChannels(ChannelInfos& _return);
  void getDomains(ChannelDomains& _return, const int64_t lastSynced);
  void send_getDomains(const int64_t lastSynced);
  void recv_getDomains(ChannelDomains& _return);
  void getFriendChannelMatrices(FriendChannelMatricesResponse& _return, const std::vector<std::string> & channelIds);
  void send_getFriendChannelMatrices(const std::vector<std::string> & channelIds);
  void recv_getFriendChannelMatrices(FriendChannelMatricesResponse& _return);
  bool updateChannelSettings(const ChannelSettings& channelSettings);
  void send_updateChannelSettings(const ChannelSettings& channelSettings);
  bool recv_updateChannelSettings();
  void getCommonDomains(ChannelDomains& _return, const int64_t lastSynced);
  void send_getCommonDomains(const int64_t lastSynced);
  void recv_getCommonDomains(ChannelDomains& _return);
  int32_t getNotificationBadgeCount(const int64_t localRev);
  void send_getNotificationBadgeCount(const int64_t localRev);
  int32_t recv_getNotificationBadgeCount();
  void issueChannelToken(ChannelToken& _return, const std::string& channelId);
  void send_issueChannelToken(const std::string& channelId);
  void recv_issueChannelToken(ChannelToken& _return);
  void issueRequestToken(std::string& _return, const std::string& channelId, const std::string& otpId);
  void send_issueRequestToken(const std::string& channelId, const std::string& otpId);
  void recv_issueRequestToken(std::string& _return);
  void issueRequestTokenWithAuthScheme(RequestTokenResponse& _return, const std::string& channelId, const std::string& otpId, const std::vector<std::string> & authScheme, const std::string& returnUrl);
  void send_issueRequestTokenWithAuthScheme(const std::string& channelId, const std::string& otpId, const std::vector<std::string> & authScheme, const std::string& returnUrl);
  void recv_issueRequestTokenWithAuthScheme(RequestTokenResponse& _return);
  void issueRequestTokenForAutoLogin(std::string& _return, const std::string& channelId, const std::string& otpId, const std::string& redirectUrl);
  void send_issueRequestTokenForAutoLogin(const std::string& channelId, const std::string& otpId, const std::string& redirectUrl);
  void recv_issueRequestTokenForAutoLogin(std::string& _return);
  void getUpdatedChannelIds(std::vector<std::string> & _return, const std::vector<ChannelIdWithLastUpdated> & channelIds);
  void send_getUpdatedChannelIds(const std::vector<ChannelIdWithLastUpdated> & channelIds);
  void recv_getUpdatedChannelIds(std::vector<std::string> & _return);
  void reserveCoinUse(std::string& _return, const CoinUseReservation& request, const std::string& locale);
  void send_reserveCoinUse(const CoinUseReservation& request, const std::string& locale);
  void recv_reserveCoinUse(std::string& _return);
  void revokeChannel(const std::string& channelId);
  void send_revokeChannel(const std::string& channelId);
  void recv_revokeChannel();
  void syncChannelData(ChannelSyncDatas& _return, const int64_t lastSynced, const std::string& locale);
  void send_syncChannelData(const int64_t lastSynced, const std::string& locale);
  void recv_syncChannelData(ChannelSyncDatas& _return);
  void updateChannelNotificationSetting(const std::vector<ChannelNotificationSetting> & setting);
  void send_updateChannelNotificationSetting(const std::vector<ChannelNotificationSetting> & setting);
  void recv_updateChannelNotificationSetting();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ChannelServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<ChannelServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ChannelServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_issueOTP(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_approveChannelAndIssueChannelToken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_approveChannelAndIssueRequestToken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchNotificationItems(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getApprovedChannels(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getChannelInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getChannelNotificationSetting(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getChannelNotificationSettings(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getChannels(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDomains(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFriendChannelMatrices(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateChannelSettings(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCommonDomains(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getNotificationBadgeCount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_issueChannelToken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_issueRequestToken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_issueRequestTokenWithAuthScheme(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_issueRequestTokenForAutoLogin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUpdatedChannelIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reserveCoinUse(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_revokeChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_syncChannelData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateChannelNotificationSetting(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ChannelServiceProcessor(::std::shared_ptr<ChannelServiceIf> iface) :
    iface_(iface) {
    processMap_["issueOTP"] = &ChannelServiceProcessor::process_issueOTP;
    processMap_["approveChannelAndIssueChannelToken"] = &ChannelServiceProcessor::process_approveChannelAndIssueChannelToken;
    processMap_["approveChannelAndIssueRequestToken"] = &ChannelServiceProcessor::process_approveChannelAndIssueRequestToken;
    processMap_["fetchNotificationItems"] = &ChannelServiceProcessor::process_fetchNotificationItems;
    processMap_["getApprovedChannels"] = &ChannelServiceProcessor::process_getApprovedChannels;
    processMap_["getChannelInfo"] = &ChannelServiceProcessor::process_getChannelInfo;
    processMap_["getChannelNotificationSetting"] = &ChannelServiceProcessor::process_getChannelNotificationSetting;
    processMap_["getChannelNotificationSettings"] = &ChannelServiceProcessor::process_getChannelNotificationSettings;
    processMap_["getChannels"] = &ChannelServiceProcessor::process_getChannels;
    processMap_["getDomains"] = &ChannelServiceProcessor::process_getDomains;
    processMap_["getFriendChannelMatrices"] = &ChannelServiceProcessor::process_getFriendChannelMatrices;
    processMap_["updateChannelSettings"] = &ChannelServiceProcessor::process_updateChannelSettings;
    processMap_["getCommonDomains"] = &ChannelServiceProcessor::process_getCommonDomains;
    processMap_["getNotificationBadgeCount"] = &ChannelServiceProcessor::process_getNotificationBadgeCount;
    processMap_["issueChannelToken"] = &ChannelServiceProcessor::process_issueChannelToken;
    processMap_["issueRequestToken"] = &ChannelServiceProcessor::process_issueRequestToken;
    processMap_["issueRequestTokenWithAuthScheme"] = &ChannelServiceProcessor::process_issueRequestTokenWithAuthScheme;
    processMap_["issueRequestTokenForAutoLogin"] = &ChannelServiceProcessor::process_issueRequestTokenForAutoLogin;
    processMap_["getUpdatedChannelIds"] = &ChannelServiceProcessor::process_getUpdatedChannelIds;
    processMap_["reserveCoinUse"] = &ChannelServiceProcessor::process_reserveCoinUse;
    processMap_["revokeChannel"] = &ChannelServiceProcessor::process_revokeChannel;
    processMap_["syncChannelData"] = &ChannelServiceProcessor::process_syncChannelData;
    processMap_["updateChannelNotificationSetting"] = &ChannelServiceProcessor::process_updateChannelNotificationSetting;
  }

  virtual ~ChannelServiceProcessor() {}
};

class ChannelServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ChannelServiceProcessorFactory(const ::std::shared_ptr< ChannelServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< ChannelServiceIfFactory > handlerFactory_;
};

class ChannelServiceMultiface : virtual public ChannelServiceIf {
 public:
  ChannelServiceMultiface(std::vector<std::shared_ptr<ChannelServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ChannelServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<ChannelServiceIf> > ifaces_;
  ChannelServiceMultiface() {}
  void add(::std::shared_ptr<ChannelServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void issueOTP(OTPResult& _return, const std::string& channelId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->issueOTP(_return, channelId);
    }
    ifaces_[i]->issueOTP(_return, channelId);
    return;
  }

  void approveChannelAndIssueChannelToken(ChannelToken& _return, const std::string& channelId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->approveChannelAndIssueChannelToken(_return, channelId);
    }
    ifaces_[i]->approveChannelAndIssueChannelToken(_return, channelId);
    return;
  }

  void approveChannelAndIssueRequestToken(std::string& _return, const std::string& channelId, const std::string& otpId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->approveChannelAndIssueRequestToken(_return, channelId, otpId);
    }
    ifaces_[i]->approveChannelAndIssueRequestToken(_return, channelId, otpId);
    return;
  }

  void fetchNotificationItems(NotificationFetchResult& _return, const int64_t localRev) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchNotificationItems(_return, localRev);
    }
    ifaces_[i]->fetchNotificationItems(_return, localRev);
    return;
  }

  void getApprovedChannels(ApprovedChannelInfos& _return, const int64_t lastSynced, const std::string& locale) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getApprovedChannels(_return, lastSynced, locale);
    }
    ifaces_[i]->getApprovedChannels(_return, lastSynced, locale);
    return;
  }

  void getChannelInfo(ChannelInfo& _return, const std::string& channelId, const std::string& locale) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getChannelInfo(_return, channelId, locale);
    }
    ifaces_[i]->getChannelInfo(_return, channelId, locale);
    return;
  }

  void getChannelNotificationSetting(ChannelNotificationSetting& _return, const std::string& channelId, const std::string& locale) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getChannelNotificationSetting(_return, channelId, locale);
    }
    ifaces_[i]->getChannelNotificationSetting(_return, channelId, locale);
    return;
  }

  void getChannelNotificationSettings(std::vector<ChannelNotificationSetting> & _return, const std::string& locale) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getChannelNotificationSettings(_return, locale);
    }
    ifaces_[i]->getChannelNotificationSettings(_return, locale);
    return;
  }

  void getChannels(ChannelInfos& _return, const int64_t lastSynced, const std::string& locale) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getChannels(_return, lastSynced, locale);
    }
    ifaces_[i]->getChannels(_return, lastSynced, locale);
    return;
  }

  void getDomains(ChannelDomains& _return, const int64_t lastSynced) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDomains(_return, lastSynced);
    }
    ifaces_[i]->getDomains(_return, lastSynced);
    return;
  }

  void getFriendChannelMatrices(FriendChannelMatricesResponse& _return, const std::vector<std::string> & channelIds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFriendChannelMatrices(_return, channelIds);
    }
    ifaces_[i]->getFriendChannelMatrices(_return, channelIds);
    return;
  }

  bool updateChannelSettings(const ChannelSettings& channelSettings) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateChannelSettings(channelSettings);
    }
    return ifaces_[i]->updateChannelSettings(channelSettings);
  }

  void getCommonDomains(ChannelDomains& _return, const int64_t lastSynced) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCommonDomains(_return, lastSynced);
    }
    ifaces_[i]->getCommonDomains(_return, lastSynced);
    return;
  }

  int32_t getNotificationBadgeCount(const int64_t localRev) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getNotificationBadgeCount(localRev);
    }
    return ifaces_[i]->getNotificationBadgeCount(localRev);
  }

  void issueChannelToken(ChannelToken& _return, const std::string& channelId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->issueChannelToken(_return, channelId);
    }
    ifaces_[i]->issueChannelToken(_return, channelId);
    return;
  }

  void issueRequestToken(std::string& _return, const std::string& channelId, const std::string& otpId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->issueRequestToken(_return, channelId, otpId);
    }
    ifaces_[i]->issueRequestToken(_return, channelId, otpId);
    return;
  }

  void issueRequestTokenWithAuthScheme(RequestTokenResponse& _return, const std::string& channelId, const std::string& otpId, const std::vector<std::string> & authScheme, const std::string& returnUrl) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->issueRequestTokenWithAuthScheme(_return, channelId, otpId, authScheme, returnUrl);
    }
    ifaces_[i]->issueRequestTokenWithAuthScheme(_return, channelId, otpId, authScheme, returnUrl);
    return;
  }

  void issueRequestTokenForAutoLogin(std::string& _return, const std::string& channelId, const std::string& otpId, const std::string& redirectUrl) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->issueRequestTokenForAutoLogin(_return, channelId, otpId, redirectUrl);
    }
    ifaces_[i]->issueRequestTokenForAutoLogin(_return, channelId, otpId, redirectUrl);
    return;
  }

  void getUpdatedChannelIds(std::vector<std::string> & _return, const std::vector<ChannelIdWithLastUpdated> & channelIds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUpdatedChannelIds(_return, channelIds);
    }
    ifaces_[i]->getUpdatedChannelIds(_return, channelIds);
    return;
  }

  void reserveCoinUse(std::string& _return, const CoinUseReservation& request, const std::string& locale) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reserveCoinUse(_return, request, locale);
    }
    ifaces_[i]->reserveCoinUse(_return, request, locale);
    return;
  }

  void revokeChannel(const std::string& channelId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->revokeChannel(channelId);
    }
    ifaces_[i]->revokeChannel(channelId);
  }

  void syncChannelData(ChannelSyncDatas& _return, const int64_t lastSynced, const std::string& locale) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->syncChannelData(_return, lastSynced, locale);
    }
    ifaces_[i]->syncChannelData(_return, lastSynced, locale);
    return;
  }

  void updateChannelNotificationSetting(const std::vector<ChannelNotificationSetting> & setting) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateChannelNotificationSetting(setting);
    }
    ifaces_[i]->updateChannelNotificationSetting(setting);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ChannelServiceConcurrentClient : virtual public ChannelServiceIf {
 public:
  ChannelServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  ChannelServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void issueOTP(OTPResult& _return, const std::string& channelId);
  int32_t send_issueOTP(const std::string& channelId);
  void recv_issueOTP(OTPResult& _return, const int32_t seqid);
  void approveChannelAndIssueChannelToken(ChannelToken& _return, const std::string& channelId);
  int32_t send_approveChannelAndIssueChannelToken(const std::string& channelId);
  void recv_approveChannelAndIssueChannelToken(ChannelToken& _return, const int32_t seqid);
  void approveChannelAndIssueRequestToken(std::string& _return, const std::string& channelId, const std::string& otpId);
  int32_t send_approveChannelAndIssueRequestToken(const std::string& channelId, const std::string& otpId);
  void recv_approveChannelAndIssueRequestToken(std::string& _return, const int32_t seqid);
  void fetchNotificationItems(NotificationFetchResult& _return, const int64_t localRev);
  int32_t send_fetchNotificationItems(const int64_t localRev);
  void recv_fetchNotificationItems(NotificationFetchResult& _return, const int32_t seqid);
  void getApprovedChannels(ApprovedChannelInfos& _return, const int64_t lastSynced, const std::string& locale);
  int32_t send_getApprovedChannels(const int64_t lastSynced, const std::string& locale);
  void recv_getApprovedChannels(ApprovedChannelInfos& _return, const int32_t seqid);
  void getChannelInfo(ChannelInfo& _return, const std::string& channelId, const std::string& locale);
  int32_t send_getChannelInfo(const std::string& channelId, const std::string& locale);
  void recv_getChannelInfo(ChannelInfo& _return, const int32_t seqid);
  void getChannelNotificationSetting(ChannelNotificationSetting& _return, const std::string& channelId, const std::string& locale);
  int32_t send_getChannelNotificationSetting(const std::string& channelId, const std::string& locale);
  void recv_getChannelNotificationSetting(ChannelNotificationSetting& _return, const int32_t seqid);
  void getChannelNotificationSettings(std::vector<ChannelNotificationSetting> & _return, const std::string& locale);
  int32_t send_getChannelNotificationSettings(const std::string& locale);
  void recv_getChannelNotificationSettings(std::vector<ChannelNotificationSetting> & _return, const int32_t seqid);
  void getChannels(ChannelInfos& _return, const int64_t lastSynced, const std::string& locale);
  int32_t send_getChannels(const int64_t lastSynced, const std::string& locale);
  void recv_getChannels(ChannelInfos& _return, const int32_t seqid);
  void getDomains(ChannelDomains& _return, const int64_t lastSynced);
  int32_t send_getDomains(const int64_t lastSynced);
  void recv_getDomains(ChannelDomains& _return, const int32_t seqid);
  void getFriendChannelMatrices(FriendChannelMatricesResponse& _return, const std::vector<std::string> & channelIds);
  int32_t send_getFriendChannelMatrices(const std::vector<std::string> & channelIds);
  void recv_getFriendChannelMatrices(FriendChannelMatricesResponse& _return, const int32_t seqid);
  bool updateChannelSettings(const ChannelSettings& channelSettings);
  int32_t send_updateChannelSettings(const ChannelSettings& channelSettings);
  bool recv_updateChannelSettings(const int32_t seqid);
  void getCommonDomains(ChannelDomains& _return, const int64_t lastSynced);
  int32_t send_getCommonDomains(const int64_t lastSynced);
  void recv_getCommonDomains(ChannelDomains& _return, const int32_t seqid);
  int32_t getNotificationBadgeCount(const int64_t localRev);
  int32_t send_getNotificationBadgeCount(const int64_t localRev);
  int32_t recv_getNotificationBadgeCount(const int32_t seqid);
  void issueChannelToken(ChannelToken& _return, const std::string& channelId);
  int32_t send_issueChannelToken(const std::string& channelId);
  void recv_issueChannelToken(ChannelToken& _return, const int32_t seqid);
  void issueRequestToken(std::string& _return, const std::string& channelId, const std::string& otpId);
  int32_t send_issueRequestToken(const std::string& channelId, const std::string& otpId);
  void recv_issueRequestToken(std::string& _return, const int32_t seqid);
  void issueRequestTokenWithAuthScheme(RequestTokenResponse& _return, const std::string& channelId, const std::string& otpId, const std::vector<std::string> & authScheme, const std::string& returnUrl);
  int32_t send_issueRequestTokenWithAuthScheme(const std::string& channelId, const std::string& otpId, const std::vector<std::string> & authScheme, const std::string& returnUrl);
  void recv_issueRequestTokenWithAuthScheme(RequestTokenResponse& _return, const int32_t seqid);
  void issueRequestTokenForAutoLogin(std::string& _return, const std::string& channelId, const std::string& otpId, const std::string& redirectUrl);
  int32_t send_issueRequestTokenForAutoLogin(const std::string& channelId, const std::string& otpId, const std::string& redirectUrl);
  void recv_issueRequestTokenForAutoLogin(std::string& _return, const int32_t seqid);
  void getUpdatedChannelIds(std::vector<std::string> & _return, const std::vector<ChannelIdWithLastUpdated> & channelIds);
  int32_t send_getUpdatedChannelIds(const std::vector<ChannelIdWithLastUpdated> & channelIds);
  void recv_getUpdatedChannelIds(std::vector<std::string> & _return, const int32_t seqid);
  void reserveCoinUse(std::string& _return, const CoinUseReservation& request, const std::string& locale);
  int32_t send_reserveCoinUse(const CoinUseReservation& request, const std::string& locale);
  void recv_reserveCoinUse(std::string& _return, const int32_t seqid);
  void revokeChannel(const std::string& channelId);
  int32_t send_revokeChannel(const std::string& channelId);
  void recv_revokeChannel(const int32_t seqid);
  void syncChannelData(ChannelSyncDatas& _return, const int64_t lastSynced, const std::string& locale);
  int32_t send_syncChannelData(const int64_t lastSynced, const std::string& locale);
  void recv_syncChannelData(ChannelSyncDatas& _return, const int32_t seqid);
  void updateChannelNotificationSetting(const std::vector<ChannelNotificationSetting> & setting);
  int32_t send_updateChannelNotificationSetting(const std::vector<ChannelNotificationSetting> & setting);
  void recv_updateChannelNotificationSetting(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
