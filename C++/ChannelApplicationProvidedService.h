/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ChannelApplicationProvidedService_H
#define ChannelApplicationProvidedService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "line_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ChannelApplicationProvidedServiceIf {
 public:
  virtual ~ChannelApplicationProvidedServiceIf() {}
  virtual int64_t activeBuddySubscriberCount() = 0;
  virtual void addOperationForChannel(const OpType::type opType, const std::string& param1, const std::string& param2, const std::string& param3) = 0;
  virtual int64_t displayBuddySubscriberCount() = 0;
  virtual void findContactByUseridWithoutAbuseBlockForChannel(Contact& _return, const std::string& userid) = 0;
  virtual void getAllContactIdsForChannel(std::vector<std::string> & _return) = 0;
  virtual void getCompactContacts(std::vector<CompactContact> & _return, const int64_t lastModifiedTimestamp) = 0;
  virtual void getContactsForChannel(std::vector<Contact> & _return, const std::vector<std::string> & ids) = 0;
  virtual void getDisplayName(std::string& _return, const std::string& mid) = 0;
  virtual void getFavoriteMidsForChannel(std::vector<std::string> & _return) = 0;
  virtual void getFriendMids(std::vector<std::string> & _return) = 0;
  virtual void getGroupMemberMids(std::vector<std::string> & _return, const std::string& groupId) = 0;
  virtual void getGroupsForChannel(std::vector<Group> & _return, const std::vector<std::string> & groupIds) = 0;
  virtual void getIdentityCredential(IdentityCredential& _return) = 0;
  virtual void getJoinedGroupIdsForChannel(std::vector<std::string> & _return) = 0;
  virtual void getMetaProfile(MetaProfile& _return) = 0;
  virtual void getMid(std::string& _return) = 0;
  virtual void getPrimaryClientForChannel(SimpleChannelClient& _return) = 0;
  virtual void getProfileForChannel(Profile& _return) = 0;
  virtual void getSimpleChannelContacts(std::vector<SimpleChannelContact> & _return, const std::vector<std::string> & ids) = 0;
  virtual void getUserCountryForBilling(std::string& _return, const std::string& country, const std::string& remoteIp) = 0;
  virtual int64_t getUserCreateTime() = 0;
  virtual void getUserIdentities(std::map<RegistrationType::type, std::string> & _return) = 0;
  virtual void getUserLanguage(std::string& _return) = 0;
  virtual void getUserMidsWhoAddedMe(std::vector<std::string> & _return) = 0;
  virtual bool isGroupMember(const std::string& groupId) = 0;
  virtual bool isInContact(const std::string& mid) = 0;
  virtual void registerChannelCP(std::string& _return, const std::string& cpId, const std::string& registerPassword) = 0;
  virtual void removeNotificationStatus(const NotificationStatus::type notificationStatus) = 0;
  virtual void sendMessageForChannel(Message& _return, const Message& message) = 0;
  virtual void sendPinCodeOperation(const std::string& verifier) = 0;
  virtual void updateProfileAttributeForChannel(const ProfileAttribute::type profileAttribute, const std::string& value) = 0;
};

class ChannelApplicationProvidedServiceIfFactory {
 public:
  typedef ChannelApplicationProvidedServiceIf Handler;

  virtual ~ChannelApplicationProvidedServiceIfFactory() {}

  virtual ChannelApplicationProvidedServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ChannelApplicationProvidedServiceIf* /* handler */) = 0;
};

class ChannelApplicationProvidedServiceIfSingletonFactory : virtual public ChannelApplicationProvidedServiceIfFactory {
 public:
  ChannelApplicationProvidedServiceIfSingletonFactory(const ::std::shared_ptr<ChannelApplicationProvidedServiceIf>& iface) : iface_(iface) {}
  virtual ~ChannelApplicationProvidedServiceIfSingletonFactory() {}

  virtual ChannelApplicationProvidedServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ChannelApplicationProvidedServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<ChannelApplicationProvidedServiceIf> iface_;
};

class ChannelApplicationProvidedServiceNull : virtual public ChannelApplicationProvidedServiceIf {
 public:
  virtual ~ChannelApplicationProvidedServiceNull() {}
  int64_t activeBuddySubscriberCount() {
    int64_t _return = 0;
    return _return;
  }
  void addOperationForChannel(const OpType::type /* opType */, const std::string& /* param1 */, const std::string& /* param2 */, const std::string& /* param3 */) {
    return;
  }
  int64_t displayBuddySubscriberCount() {
    int64_t _return = 0;
    return _return;
  }
  void findContactByUseridWithoutAbuseBlockForChannel(Contact& /* _return */, const std::string& /* userid */) {
    return;
  }
  void getAllContactIdsForChannel(std::vector<std::string> & /* _return */) {
    return;
  }
  void getCompactContacts(std::vector<CompactContact> & /* _return */, const int64_t /* lastModifiedTimestamp */) {
    return;
  }
  void getContactsForChannel(std::vector<Contact> & /* _return */, const std::vector<std::string> & /* ids */) {
    return;
  }
  void getDisplayName(std::string& /* _return */, const std::string& /* mid */) {
    return;
  }
  void getFavoriteMidsForChannel(std::vector<std::string> & /* _return */) {
    return;
  }
  void getFriendMids(std::vector<std::string> & /* _return */) {
    return;
  }
  void getGroupMemberMids(std::vector<std::string> & /* _return */, const std::string& /* groupId */) {
    return;
  }
  void getGroupsForChannel(std::vector<Group> & /* _return */, const std::vector<std::string> & /* groupIds */) {
    return;
  }
  void getIdentityCredential(IdentityCredential& /* _return */) {
    return;
  }
  void getJoinedGroupIdsForChannel(std::vector<std::string> & /* _return */) {
    return;
  }
  void getMetaProfile(MetaProfile& /* _return */) {
    return;
  }
  void getMid(std::string& /* _return */) {
    return;
  }
  void getPrimaryClientForChannel(SimpleChannelClient& /* _return */) {
    return;
  }
  void getProfileForChannel(Profile& /* _return */) {
    return;
  }
  void getSimpleChannelContacts(std::vector<SimpleChannelContact> & /* _return */, const std::vector<std::string> & /* ids */) {
    return;
  }
  void getUserCountryForBilling(std::string& /* _return */, const std::string& /* country */, const std::string& /* remoteIp */) {
    return;
  }
  int64_t getUserCreateTime() {
    int64_t _return = 0;
    return _return;
  }
  void getUserIdentities(std::map<RegistrationType::type, std::string> & /* _return */) {
    return;
  }
  void getUserLanguage(std::string& /* _return */) {
    return;
  }
  void getUserMidsWhoAddedMe(std::vector<std::string> & /* _return */) {
    return;
  }
  bool isGroupMember(const std::string& /* groupId */) {
    bool _return = false;
    return _return;
  }
  bool isInContact(const std::string& /* mid */) {
    bool _return = false;
    return _return;
  }
  void registerChannelCP(std::string& /* _return */, const std::string& /* cpId */, const std::string& /* registerPassword */) {
    return;
  }
  void removeNotificationStatus(const NotificationStatus::type /* notificationStatus */) {
    return;
  }
  void sendMessageForChannel(Message& /* _return */, const Message& /* message */) {
    return;
  }
  void sendPinCodeOperation(const std::string& /* verifier */) {
    return;
  }
  void updateProfileAttributeForChannel(const ProfileAttribute::type /* profileAttribute */, const std::string& /* value */) {
    return;
  }
};


class ChannelApplicationProvidedService_activeBuddySubscriberCount_args {
 public:

  ChannelApplicationProvidedService_activeBuddySubscriberCount_args(const ChannelApplicationProvidedService_activeBuddySubscriberCount_args&);
  ChannelApplicationProvidedService_activeBuddySubscriberCount_args& operator=(const ChannelApplicationProvidedService_activeBuddySubscriberCount_args&);
  ChannelApplicationProvidedService_activeBuddySubscriberCount_args() {
  }

  virtual ~ChannelApplicationProvidedService_activeBuddySubscriberCount_args() noexcept;

  bool operator == (const ChannelApplicationProvidedService_activeBuddySubscriberCount_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_activeBuddySubscriberCount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_activeBuddySubscriberCount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelApplicationProvidedService_activeBuddySubscriberCount_pargs {
 public:


  virtual ~ChannelApplicationProvidedService_activeBuddySubscriberCount_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_activeBuddySubscriberCount_result__isset {
  _ChannelApplicationProvidedService_activeBuddySubscriberCount_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_activeBuddySubscriberCount_result__isset;

class ChannelApplicationProvidedService_activeBuddySubscriberCount_result {
 public:

  ChannelApplicationProvidedService_activeBuddySubscriberCount_result(const ChannelApplicationProvidedService_activeBuddySubscriberCount_result&);
  ChannelApplicationProvidedService_activeBuddySubscriberCount_result& operator=(const ChannelApplicationProvidedService_activeBuddySubscriberCount_result&);
  ChannelApplicationProvidedService_activeBuddySubscriberCount_result() : success(0) {
  }

  virtual ~ChannelApplicationProvidedService_activeBuddySubscriberCount_result() noexcept;
  int64_t success;
  TalkException e;

  _ChannelApplicationProvidedService_activeBuddySubscriberCount_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_e(const TalkException& val);

  bool operator == (const ChannelApplicationProvidedService_activeBuddySubscriberCount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_activeBuddySubscriberCount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_activeBuddySubscriberCount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_activeBuddySubscriberCount_presult__isset {
  _ChannelApplicationProvidedService_activeBuddySubscriberCount_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_activeBuddySubscriberCount_presult__isset;

class ChannelApplicationProvidedService_activeBuddySubscriberCount_presult {
 public:


  virtual ~ChannelApplicationProvidedService_activeBuddySubscriberCount_presult() noexcept;
  int64_t* success;
  TalkException e;

  _ChannelApplicationProvidedService_activeBuddySubscriberCount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelApplicationProvidedService_addOperationForChannel_args__isset {
  _ChannelApplicationProvidedService_addOperationForChannel_args__isset() : opType(false), param1(false), param2(false), param3(false) {}
  bool opType :1;
  bool param1 :1;
  bool param2 :1;
  bool param3 :1;
} _ChannelApplicationProvidedService_addOperationForChannel_args__isset;

class ChannelApplicationProvidedService_addOperationForChannel_args {
 public:

  ChannelApplicationProvidedService_addOperationForChannel_args(const ChannelApplicationProvidedService_addOperationForChannel_args&);
  ChannelApplicationProvidedService_addOperationForChannel_args& operator=(const ChannelApplicationProvidedService_addOperationForChannel_args&);
  ChannelApplicationProvidedService_addOperationForChannel_args() : opType((OpType::type)0), param1(), param2(), param3() {
  }

  virtual ~ChannelApplicationProvidedService_addOperationForChannel_args() noexcept;
  OpType::type opType;
  std::string param1;
  std::string param2;
  std::string param3;

  _ChannelApplicationProvidedService_addOperationForChannel_args__isset __isset;

  void __set_opType(const OpType::type val);

  void __set_param1(const std::string& val);

  void __set_param2(const std::string& val);

  void __set_param3(const std::string& val);

  bool operator == (const ChannelApplicationProvidedService_addOperationForChannel_args & rhs) const
  {
    if (!(opType == rhs.opType))
      return false;
    if (!(param1 == rhs.param1))
      return false;
    if (!(param2 == rhs.param2))
      return false;
    if (!(param3 == rhs.param3))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_addOperationForChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_addOperationForChannel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelApplicationProvidedService_addOperationForChannel_pargs {
 public:


  virtual ~ChannelApplicationProvidedService_addOperationForChannel_pargs() noexcept;
  const OpType::type* opType;
  const std::string* param1;
  const std::string* param2;
  const std::string* param3;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_addOperationForChannel_result__isset {
  _ChannelApplicationProvidedService_addOperationForChannel_result__isset() : e(false) {}
  bool e :1;
} _ChannelApplicationProvidedService_addOperationForChannel_result__isset;

class ChannelApplicationProvidedService_addOperationForChannel_result {
 public:

  ChannelApplicationProvidedService_addOperationForChannel_result(const ChannelApplicationProvidedService_addOperationForChannel_result&);
  ChannelApplicationProvidedService_addOperationForChannel_result& operator=(const ChannelApplicationProvidedService_addOperationForChannel_result&);
  ChannelApplicationProvidedService_addOperationForChannel_result() {
  }

  virtual ~ChannelApplicationProvidedService_addOperationForChannel_result() noexcept;
  TalkException e;

  _ChannelApplicationProvidedService_addOperationForChannel_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const ChannelApplicationProvidedService_addOperationForChannel_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_addOperationForChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_addOperationForChannel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_addOperationForChannel_presult__isset {
  _ChannelApplicationProvidedService_addOperationForChannel_presult__isset() : e(false) {}
  bool e :1;
} _ChannelApplicationProvidedService_addOperationForChannel_presult__isset;

class ChannelApplicationProvidedService_addOperationForChannel_presult {
 public:


  virtual ~ChannelApplicationProvidedService_addOperationForChannel_presult() noexcept;
  TalkException e;

  _ChannelApplicationProvidedService_addOperationForChannel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ChannelApplicationProvidedService_displayBuddySubscriberCount_args {
 public:

  ChannelApplicationProvidedService_displayBuddySubscriberCount_args(const ChannelApplicationProvidedService_displayBuddySubscriberCount_args&);
  ChannelApplicationProvidedService_displayBuddySubscriberCount_args& operator=(const ChannelApplicationProvidedService_displayBuddySubscriberCount_args&);
  ChannelApplicationProvidedService_displayBuddySubscriberCount_args() {
  }

  virtual ~ChannelApplicationProvidedService_displayBuddySubscriberCount_args() noexcept;

  bool operator == (const ChannelApplicationProvidedService_displayBuddySubscriberCount_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_displayBuddySubscriberCount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_displayBuddySubscriberCount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelApplicationProvidedService_displayBuddySubscriberCount_pargs {
 public:


  virtual ~ChannelApplicationProvidedService_displayBuddySubscriberCount_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_displayBuddySubscriberCount_result__isset {
  _ChannelApplicationProvidedService_displayBuddySubscriberCount_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_displayBuddySubscriberCount_result__isset;

class ChannelApplicationProvidedService_displayBuddySubscriberCount_result {
 public:

  ChannelApplicationProvidedService_displayBuddySubscriberCount_result(const ChannelApplicationProvidedService_displayBuddySubscriberCount_result&);
  ChannelApplicationProvidedService_displayBuddySubscriberCount_result& operator=(const ChannelApplicationProvidedService_displayBuddySubscriberCount_result&);
  ChannelApplicationProvidedService_displayBuddySubscriberCount_result() : success(0) {
  }

  virtual ~ChannelApplicationProvidedService_displayBuddySubscriberCount_result() noexcept;
  int64_t success;
  TalkException e;

  _ChannelApplicationProvidedService_displayBuddySubscriberCount_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_e(const TalkException& val);

  bool operator == (const ChannelApplicationProvidedService_displayBuddySubscriberCount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_displayBuddySubscriberCount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_displayBuddySubscriberCount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_displayBuddySubscriberCount_presult__isset {
  _ChannelApplicationProvidedService_displayBuddySubscriberCount_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_displayBuddySubscriberCount_presult__isset;

class ChannelApplicationProvidedService_displayBuddySubscriberCount_presult {
 public:


  virtual ~ChannelApplicationProvidedService_displayBuddySubscriberCount_presult() noexcept;
  int64_t* success;
  TalkException e;

  _ChannelApplicationProvidedService_displayBuddySubscriberCount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_args__isset {
  _ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_args__isset() : userid(false) {}
  bool userid :1;
} _ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_args__isset;

class ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_args {
 public:

  ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_args(const ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_args&);
  ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_args& operator=(const ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_args&);
  ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_args() : userid() {
  }

  virtual ~ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_args() noexcept;
  std::string userid;

  _ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_args__isset __isset;

  void __set_userid(const std::string& val);

  bool operator == (const ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_args & rhs) const
  {
    if (!(userid == rhs.userid))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_pargs {
 public:


  virtual ~ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_pargs() noexcept;
  const std::string* userid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_result__isset {
  _ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_result__isset;

class ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_result {
 public:

  ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_result(const ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_result&);
  ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_result& operator=(const ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_result&);
  ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_result() {
  }

  virtual ~ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_result() noexcept;
  Contact success;
  TalkException e;

  _ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_result__isset __isset;

  void __set_success(const Contact& val);

  void __set_e(const TalkException& val);

  bool operator == (const ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_presult__isset {
  _ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_presult__isset;

class ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_presult {
 public:


  virtual ~ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_presult() noexcept;
  Contact* success;
  TalkException e;

  _ChannelApplicationProvidedService_findContactByUseridWithoutAbuseBlockForChannel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ChannelApplicationProvidedService_getAllContactIdsForChannel_args {
 public:

  ChannelApplicationProvidedService_getAllContactIdsForChannel_args(const ChannelApplicationProvidedService_getAllContactIdsForChannel_args&);
  ChannelApplicationProvidedService_getAllContactIdsForChannel_args& operator=(const ChannelApplicationProvidedService_getAllContactIdsForChannel_args&);
  ChannelApplicationProvidedService_getAllContactIdsForChannel_args() {
  }

  virtual ~ChannelApplicationProvidedService_getAllContactIdsForChannel_args() noexcept;

  bool operator == (const ChannelApplicationProvidedService_getAllContactIdsForChannel_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getAllContactIdsForChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getAllContactIdsForChannel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelApplicationProvidedService_getAllContactIdsForChannel_pargs {
 public:


  virtual ~ChannelApplicationProvidedService_getAllContactIdsForChannel_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getAllContactIdsForChannel_result__isset {
  _ChannelApplicationProvidedService_getAllContactIdsForChannel_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getAllContactIdsForChannel_result__isset;

class ChannelApplicationProvidedService_getAllContactIdsForChannel_result {
 public:

  ChannelApplicationProvidedService_getAllContactIdsForChannel_result(const ChannelApplicationProvidedService_getAllContactIdsForChannel_result&);
  ChannelApplicationProvidedService_getAllContactIdsForChannel_result& operator=(const ChannelApplicationProvidedService_getAllContactIdsForChannel_result&);
  ChannelApplicationProvidedService_getAllContactIdsForChannel_result() {
  }

  virtual ~ChannelApplicationProvidedService_getAllContactIdsForChannel_result() noexcept;
  std::vector<std::string>  success;
  TalkException e;

  _ChannelApplicationProvidedService_getAllContactIdsForChannel_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const ChannelApplicationProvidedService_getAllContactIdsForChannel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getAllContactIdsForChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getAllContactIdsForChannel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getAllContactIdsForChannel_presult__isset {
  _ChannelApplicationProvidedService_getAllContactIdsForChannel_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getAllContactIdsForChannel_presult__isset;

class ChannelApplicationProvidedService_getAllContactIdsForChannel_presult {
 public:


  virtual ~ChannelApplicationProvidedService_getAllContactIdsForChannel_presult() noexcept;
  std::vector<std::string> * success;
  TalkException e;

  _ChannelApplicationProvidedService_getAllContactIdsForChannel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelApplicationProvidedService_getCompactContacts_args__isset {
  _ChannelApplicationProvidedService_getCompactContacts_args__isset() : lastModifiedTimestamp(false) {}
  bool lastModifiedTimestamp :1;
} _ChannelApplicationProvidedService_getCompactContacts_args__isset;

class ChannelApplicationProvidedService_getCompactContacts_args {
 public:

  ChannelApplicationProvidedService_getCompactContacts_args(const ChannelApplicationProvidedService_getCompactContacts_args&);
  ChannelApplicationProvidedService_getCompactContacts_args& operator=(const ChannelApplicationProvidedService_getCompactContacts_args&);
  ChannelApplicationProvidedService_getCompactContacts_args() : lastModifiedTimestamp(0) {
  }

  virtual ~ChannelApplicationProvidedService_getCompactContacts_args() noexcept;
  int64_t lastModifiedTimestamp;

  _ChannelApplicationProvidedService_getCompactContacts_args__isset __isset;

  void __set_lastModifiedTimestamp(const int64_t val);

  bool operator == (const ChannelApplicationProvidedService_getCompactContacts_args & rhs) const
  {
    if (!(lastModifiedTimestamp == rhs.lastModifiedTimestamp))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getCompactContacts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getCompactContacts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelApplicationProvidedService_getCompactContacts_pargs {
 public:


  virtual ~ChannelApplicationProvidedService_getCompactContacts_pargs() noexcept;
  const int64_t* lastModifiedTimestamp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getCompactContacts_result__isset {
  _ChannelApplicationProvidedService_getCompactContacts_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getCompactContacts_result__isset;

class ChannelApplicationProvidedService_getCompactContacts_result {
 public:

  ChannelApplicationProvidedService_getCompactContacts_result(const ChannelApplicationProvidedService_getCompactContacts_result&);
  ChannelApplicationProvidedService_getCompactContacts_result& operator=(const ChannelApplicationProvidedService_getCompactContacts_result&);
  ChannelApplicationProvidedService_getCompactContacts_result() {
  }

  virtual ~ChannelApplicationProvidedService_getCompactContacts_result() noexcept;
  std::vector<CompactContact>  success;
  TalkException e;

  _ChannelApplicationProvidedService_getCompactContacts_result__isset __isset;

  void __set_success(const std::vector<CompactContact> & val);

  void __set_e(const TalkException& val);

  bool operator == (const ChannelApplicationProvidedService_getCompactContacts_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getCompactContacts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getCompactContacts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getCompactContacts_presult__isset {
  _ChannelApplicationProvidedService_getCompactContacts_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getCompactContacts_presult__isset;

class ChannelApplicationProvidedService_getCompactContacts_presult {
 public:


  virtual ~ChannelApplicationProvidedService_getCompactContacts_presult() noexcept;
  std::vector<CompactContact> * success;
  TalkException e;

  _ChannelApplicationProvidedService_getCompactContacts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelApplicationProvidedService_getContactsForChannel_args__isset {
  _ChannelApplicationProvidedService_getContactsForChannel_args__isset() : ids(false) {}
  bool ids :1;
} _ChannelApplicationProvidedService_getContactsForChannel_args__isset;

class ChannelApplicationProvidedService_getContactsForChannel_args {
 public:

  ChannelApplicationProvidedService_getContactsForChannel_args(const ChannelApplicationProvidedService_getContactsForChannel_args&);
  ChannelApplicationProvidedService_getContactsForChannel_args& operator=(const ChannelApplicationProvidedService_getContactsForChannel_args&);
  ChannelApplicationProvidedService_getContactsForChannel_args() {
  }

  virtual ~ChannelApplicationProvidedService_getContactsForChannel_args() noexcept;
  std::vector<std::string>  ids;

  _ChannelApplicationProvidedService_getContactsForChannel_args__isset __isset;

  void __set_ids(const std::vector<std::string> & val);

  bool operator == (const ChannelApplicationProvidedService_getContactsForChannel_args & rhs) const
  {
    if (!(ids == rhs.ids))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getContactsForChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getContactsForChannel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelApplicationProvidedService_getContactsForChannel_pargs {
 public:


  virtual ~ChannelApplicationProvidedService_getContactsForChannel_pargs() noexcept;
  const std::vector<std::string> * ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getContactsForChannel_result__isset {
  _ChannelApplicationProvidedService_getContactsForChannel_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getContactsForChannel_result__isset;

class ChannelApplicationProvidedService_getContactsForChannel_result {
 public:

  ChannelApplicationProvidedService_getContactsForChannel_result(const ChannelApplicationProvidedService_getContactsForChannel_result&);
  ChannelApplicationProvidedService_getContactsForChannel_result& operator=(const ChannelApplicationProvidedService_getContactsForChannel_result&);
  ChannelApplicationProvidedService_getContactsForChannel_result() {
  }

  virtual ~ChannelApplicationProvidedService_getContactsForChannel_result() noexcept;
  std::vector<Contact>  success;
  TalkException e;

  _ChannelApplicationProvidedService_getContactsForChannel_result__isset __isset;

  void __set_success(const std::vector<Contact> & val);

  void __set_e(const TalkException& val);

  bool operator == (const ChannelApplicationProvidedService_getContactsForChannel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getContactsForChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getContactsForChannel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getContactsForChannel_presult__isset {
  _ChannelApplicationProvidedService_getContactsForChannel_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getContactsForChannel_presult__isset;

class ChannelApplicationProvidedService_getContactsForChannel_presult {
 public:


  virtual ~ChannelApplicationProvidedService_getContactsForChannel_presult() noexcept;
  std::vector<Contact> * success;
  TalkException e;

  _ChannelApplicationProvidedService_getContactsForChannel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelApplicationProvidedService_getDisplayName_args__isset {
  _ChannelApplicationProvidedService_getDisplayName_args__isset() : mid(false) {}
  bool mid :1;
} _ChannelApplicationProvidedService_getDisplayName_args__isset;

class ChannelApplicationProvidedService_getDisplayName_args {
 public:

  ChannelApplicationProvidedService_getDisplayName_args(const ChannelApplicationProvidedService_getDisplayName_args&);
  ChannelApplicationProvidedService_getDisplayName_args& operator=(const ChannelApplicationProvidedService_getDisplayName_args&);
  ChannelApplicationProvidedService_getDisplayName_args() : mid() {
  }

  virtual ~ChannelApplicationProvidedService_getDisplayName_args() noexcept;
  std::string mid;

  _ChannelApplicationProvidedService_getDisplayName_args__isset __isset;

  void __set_mid(const std::string& val);

  bool operator == (const ChannelApplicationProvidedService_getDisplayName_args & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getDisplayName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getDisplayName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelApplicationProvidedService_getDisplayName_pargs {
 public:


  virtual ~ChannelApplicationProvidedService_getDisplayName_pargs() noexcept;
  const std::string* mid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getDisplayName_result__isset {
  _ChannelApplicationProvidedService_getDisplayName_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getDisplayName_result__isset;

class ChannelApplicationProvidedService_getDisplayName_result {
 public:

  ChannelApplicationProvidedService_getDisplayName_result(const ChannelApplicationProvidedService_getDisplayName_result&);
  ChannelApplicationProvidedService_getDisplayName_result& operator=(const ChannelApplicationProvidedService_getDisplayName_result&);
  ChannelApplicationProvidedService_getDisplayName_result() : success() {
  }

  virtual ~ChannelApplicationProvidedService_getDisplayName_result() noexcept;
  std::string success;
  TalkException e;

  _ChannelApplicationProvidedService_getDisplayName_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const ChannelApplicationProvidedService_getDisplayName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getDisplayName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getDisplayName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getDisplayName_presult__isset {
  _ChannelApplicationProvidedService_getDisplayName_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getDisplayName_presult__isset;

class ChannelApplicationProvidedService_getDisplayName_presult {
 public:


  virtual ~ChannelApplicationProvidedService_getDisplayName_presult() noexcept;
  std::string* success;
  TalkException e;

  _ChannelApplicationProvidedService_getDisplayName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ChannelApplicationProvidedService_getFavoriteMidsForChannel_args {
 public:

  ChannelApplicationProvidedService_getFavoriteMidsForChannel_args(const ChannelApplicationProvidedService_getFavoriteMidsForChannel_args&);
  ChannelApplicationProvidedService_getFavoriteMidsForChannel_args& operator=(const ChannelApplicationProvidedService_getFavoriteMidsForChannel_args&);
  ChannelApplicationProvidedService_getFavoriteMidsForChannel_args() {
  }

  virtual ~ChannelApplicationProvidedService_getFavoriteMidsForChannel_args() noexcept;

  bool operator == (const ChannelApplicationProvidedService_getFavoriteMidsForChannel_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getFavoriteMidsForChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getFavoriteMidsForChannel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelApplicationProvidedService_getFavoriteMidsForChannel_pargs {
 public:


  virtual ~ChannelApplicationProvidedService_getFavoriteMidsForChannel_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getFavoriteMidsForChannel_result__isset {
  _ChannelApplicationProvidedService_getFavoriteMidsForChannel_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getFavoriteMidsForChannel_result__isset;

class ChannelApplicationProvidedService_getFavoriteMidsForChannel_result {
 public:

  ChannelApplicationProvidedService_getFavoriteMidsForChannel_result(const ChannelApplicationProvidedService_getFavoriteMidsForChannel_result&);
  ChannelApplicationProvidedService_getFavoriteMidsForChannel_result& operator=(const ChannelApplicationProvidedService_getFavoriteMidsForChannel_result&);
  ChannelApplicationProvidedService_getFavoriteMidsForChannel_result() {
  }

  virtual ~ChannelApplicationProvidedService_getFavoriteMidsForChannel_result() noexcept;
  std::vector<std::string>  success;
  TalkException e;

  _ChannelApplicationProvidedService_getFavoriteMidsForChannel_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const ChannelApplicationProvidedService_getFavoriteMidsForChannel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getFavoriteMidsForChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getFavoriteMidsForChannel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getFavoriteMidsForChannel_presult__isset {
  _ChannelApplicationProvidedService_getFavoriteMidsForChannel_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getFavoriteMidsForChannel_presult__isset;

class ChannelApplicationProvidedService_getFavoriteMidsForChannel_presult {
 public:


  virtual ~ChannelApplicationProvidedService_getFavoriteMidsForChannel_presult() noexcept;
  std::vector<std::string> * success;
  TalkException e;

  _ChannelApplicationProvidedService_getFavoriteMidsForChannel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ChannelApplicationProvidedService_getFriendMids_args {
 public:

  ChannelApplicationProvidedService_getFriendMids_args(const ChannelApplicationProvidedService_getFriendMids_args&);
  ChannelApplicationProvidedService_getFriendMids_args& operator=(const ChannelApplicationProvidedService_getFriendMids_args&);
  ChannelApplicationProvidedService_getFriendMids_args() {
  }

  virtual ~ChannelApplicationProvidedService_getFriendMids_args() noexcept;

  bool operator == (const ChannelApplicationProvidedService_getFriendMids_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getFriendMids_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getFriendMids_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelApplicationProvidedService_getFriendMids_pargs {
 public:


  virtual ~ChannelApplicationProvidedService_getFriendMids_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getFriendMids_result__isset {
  _ChannelApplicationProvidedService_getFriendMids_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getFriendMids_result__isset;

class ChannelApplicationProvidedService_getFriendMids_result {
 public:

  ChannelApplicationProvidedService_getFriendMids_result(const ChannelApplicationProvidedService_getFriendMids_result&);
  ChannelApplicationProvidedService_getFriendMids_result& operator=(const ChannelApplicationProvidedService_getFriendMids_result&);
  ChannelApplicationProvidedService_getFriendMids_result() {
  }

  virtual ~ChannelApplicationProvidedService_getFriendMids_result() noexcept;
  std::vector<std::string>  success;
  TalkException e;

  _ChannelApplicationProvidedService_getFriendMids_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const ChannelApplicationProvidedService_getFriendMids_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getFriendMids_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getFriendMids_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getFriendMids_presult__isset {
  _ChannelApplicationProvidedService_getFriendMids_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getFriendMids_presult__isset;

class ChannelApplicationProvidedService_getFriendMids_presult {
 public:


  virtual ~ChannelApplicationProvidedService_getFriendMids_presult() noexcept;
  std::vector<std::string> * success;
  TalkException e;

  _ChannelApplicationProvidedService_getFriendMids_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelApplicationProvidedService_getGroupMemberMids_args__isset {
  _ChannelApplicationProvidedService_getGroupMemberMids_args__isset() : groupId(false) {}
  bool groupId :1;
} _ChannelApplicationProvidedService_getGroupMemberMids_args__isset;

class ChannelApplicationProvidedService_getGroupMemberMids_args {
 public:

  ChannelApplicationProvidedService_getGroupMemberMids_args(const ChannelApplicationProvidedService_getGroupMemberMids_args&);
  ChannelApplicationProvidedService_getGroupMemberMids_args& operator=(const ChannelApplicationProvidedService_getGroupMemberMids_args&);
  ChannelApplicationProvidedService_getGroupMemberMids_args() : groupId() {
  }

  virtual ~ChannelApplicationProvidedService_getGroupMemberMids_args() noexcept;
  std::string groupId;

  _ChannelApplicationProvidedService_getGroupMemberMids_args__isset __isset;

  void __set_groupId(const std::string& val);

  bool operator == (const ChannelApplicationProvidedService_getGroupMemberMids_args & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getGroupMemberMids_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getGroupMemberMids_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelApplicationProvidedService_getGroupMemberMids_pargs {
 public:


  virtual ~ChannelApplicationProvidedService_getGroupMemberMids_pargs() noexcept;
  const std::string* groupId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getGroupMemberMids_result__isset {
  _ChannelApplicationProvidedService_getGroupMemberMids_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getGroupMemberMids_result__isset;

class ChannelApplicationProvidedService_getGroupMemberMids_result {
 public:

  ChannelApplicationProvidedService_getGroupMemberMids_result(const ChannelApplicationProvidedService_getGroupMemberMids_result&);
  ChannelApplicationProvidedService_getGroupMemberMids_result& operator=(const ChannelApplicationProvidedService_getGroupMemberMids_result&);
  ChannelApplicationProvidedService_getGroupMemberMids_result() {
  }

  virtual ~ChannelApplicationProvidedService_getGroupMemberMids_result() noexcept;
  std::vector<std::string>  success;
  TalkException e;

  _ChannelApplicationProvidedService_getGroupMemberMids_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const ChannelApplicationProvidedService_getGroupMemberMids_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getGroupMemberMids_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getGroupMemberMids_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getGroupMemberMids_presult__isset {
  _ChannelApplicationProvidedService_getGroupMemberMids_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getGroupMemberMids_presult__isset;

class ChannelApplicationProvidedService_getGroupMemberMids_presult {
 public:


  virtual ~ChannelApplicationProvidedService_getGroupMemberMids_presult() noexcept;
  std::vector<std::string> * success;
  TalkException e;

  _ChannelApplicationProvidedService_getGroupMemberMids_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelApplicationProvidedService_getGroupsForChannel_args__isset {
  _ChannelApplicationProvidedService_getGroupsForChannel_args__isset() : groupIds(false) {}
  bool groupIds :1;
} _ChannelApplicationProvidedService_getGroupsForChannel_args__isset;

class ChannelApplicationProvidedService_getGroupsForChannel_args {
 public:

  ChannelApplicationProvidedService_getGroupsForChannel_args(const ChannelApplicationProvidedService_getGroupsForChannel_args&);
  ChannelApplicationProvidedService_getGroupsForChannel_args& operator=(const ChannelApplicationProvidedService_getGroupsForChannel_args&);
  ChannelApplicationProvidedService_getGroupsForChannel_args() {
  }

  virtual ~ChannelApplicationProvidedService_getGroupsForChannel_args() noexcept;
  std::vector<std::string>  groupIds;

  _ChannelApplicationProvidedService_getGroupsForChannel_args__isset __isset;

  void __set_groupIds(const std::vector<std::string> & val);

  bool operator == (const ChannelApplicationProvidedService_getGroupsForChannel_args & rhs) const
  {
    if (!(groupIds == rhs.groupIds))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getGroupsForChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getGroupsForChannel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelApplicationProvidedService_getGroupsForChannel_pargs {
 public:


  virtual ~ChannelApplicationProvidedService_getGroupsForChannel_pargs() noexcept;
  const std::vector<std::string> * groupIds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getGroupsForChannel_result__isset {
  _ChannelApplicationProvidedService_getGroupsForChannel_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getGroupsForChannel_result__isset;

class ChannelApplicationProvidedService_getGroupsForChannel_result {
 public:

  ChannelApplicationProvidedService_getGroupsForChannel_result(const ChannelApplicationProvidedService_getGroupsForChannel_result&);
  ChannelApplicationProvidedService_getGroupsForChannel_result& operator=(const ChannelApplicationProvidedService_getGroupsForChannel_result&);
  ChannelApplicationProvidedService_getGroupsForChannel_result() {
  }

  virtual ~ChannelApplicationProvidedService_getGroupsForChannel_result() noexcept;
  std::vector<Group>  success;
  TalkException e;

  _ChannelApplicationProvidedService_getGroupsForChannel_result__isset __isset;

  void __set_success(const std::vector<Group> & val);

  void __set_e(const TalkException& val);

  bool operator == (const ChannelApplicationProvidedService_getGroupsForChannel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getGroupsForChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getGroupsForChannel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getGroupsForChannel_presult__isset {
  _ChannelApplicationProvidedService_getGroupsForChannel_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getGroupsForChannel_presult__isset;

class ChannelApplicationProvidedService_getGroupsForChannel_presult {
 public:


  virtual ~ChannelApplicationProvidedService_getGroupsForChannel_presult() noexcept;
  std::vector<Group> * success;
  TalkException e;

  _ChannelApplicationProvidedService_getGroupsForChannel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ChannelApplicationProvidedService_getIdentityCredential_args {
 public:

  ChannelApplicationProvidedService_getIdentityCredential_args(const ChannelApplicationProvidedService_getIdentityCredential_args&);
  ChannelApplicationProvidedService_getIdentityCredential_args& operator=(const ChannelApplicationProvidedService_getIdentityCredential_args&);
  ChannelApplicationProvidedService_getIdentityCredential_args() {
  }

  virtual ~ChannelApplicationProvidedService_getIdentityCredential_args() noexcept;

  bool operator == (const ChannelApplicationProvidedService_getIdentityCredential_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getIdentityCredential_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getIdentityCredential_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelApplicationProvidedService_getIdentityCredential_pargs {
 public:


  virtual ~ChannelApplicationProvidedService_getIdentityCredential_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getIdentityCredential_result__isset {
  _ChannelApplicationProvidedService_getIdentityCredential_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getIdentityCredential_result__isset;

class ChannelApplicationProvidedService_getIdentityCredential_result {
 public:

  ChannelApplicationProvidedService_getIdentityCredential_result(const ChannelApplicationProvidedService_getIdentityCredential_result&);
  ChannelApplicationProvidedService_getIdentityCredential_result& operator=(const ChannelApplicationProvidedService_getIdentityCredential_result&);
  ChannelApplicationProvidedService_getIdentityCredential_result() {
  }

  virtual ~ChannelApplicationProvidedService_getIdentityCredential_result() noexcept;
  IdentityCredential success;
  TalkException e;

  _ChannelApplicationProvidedService_getIdentityCredential_result__isset __isset;

  void __set_success(const IdentityCredential& val);

  void __set_e(const TalkException& val);

  bool operator == (const ChannelApplicationProvidedService_getIdentityCredential_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getIdentityCredential_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getIdentityCredential_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getIdentityCredential_presult__isset {
  _ChannelApplicationProvidedService_getIdentityCredential_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getIdentityCredential_presult__isset;

class ChannelApplicationProvidedService_getIdentityCredential_presult {
 public:


  virtual ~ChannelApplicationProvidedService_getIdentityCredential_presult() noexcept;
  IdentityCredential* success;
  TalkException e;

  _ChannelApplicationProvidedService_getIdentityCredential_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_args {
 public:

  ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_args(const ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_args&);
  ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_args& operator=(const ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_args&);
  ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_args() {
  }

  virtual ~ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_args() noexcept;

  bool operator == (const ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_pargs {
 public:


  virtual ~ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_result__isset {
  _ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_result__isset;

class ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_result {
 public:

  ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_result(const ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_result&);
  ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_result& operator=(const ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_result&);
  ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_result() {
  }

  virtual ~ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_result() noexcept;
  std::vector<std::string>  success;
  TalkException e;

  _ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_presult__isset {
  _ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_presult__isset;

class ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_presult {
 public:


  virtual ~ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_presult() noexcept;
  std::vector<std::string> * success;
  TalkException e;

  _ChannelApplicationProvidedService_getJoinedGroupIdsForChannel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ChannelApplicationProvidedService_getMetaProfile_args {
 public:

  ChannelApplicationProvidedService_getMetaProfile_args(const ChannelApplicationProvidedService_getMetaProfile_args&);
  ChannelApplicationProvidedService_getMetaProfile_args& operator=(const ChannelApplicationProvidedService_getMetaProfile_args&);
  ChannelApplicationProvidedService_getMetaProfile_args() {
  }

  virtual ~ChannelApplicationProvidedService_getMetaProfile_args() noexcept;

  bool operator == (const ChannelApplicationProvidedService_getMetaProfile_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getMetaProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getMetaProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelApplicationProvidedService_getMetaProfile_pargs {
 public:


  virtual ~ChannelApplicationProvidedService_getMetaProfile_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getMetaProfile_result__isset {
  _ChannelApplicationProvidedService_getMetaProfile_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getMetaProfile_result__isset;

class ChannelApplicationProvidedService_getMetaProfile_result {
 public:

  ChannelApplicationProvidedService_getMetaProfile_result(const ChannelApplicationProvidedService_getMetaProfile_result&);
  ChannelApplicationProvidedService_getMetaProfile_result& operator=(const ChannelApplicationProvidedService_getMetaProfile_result&);
  ChannelApplicationProvidedService_getMetaProfile_result() {
  }

  virtual ~ChannelApplicationProvidedService_getMetaProfile_result() noexcept;
  MetaProfile success;
  TalkException e;

  _ChannelApplicationProvidedService_getMetaProfile_result__isset __isset;

  void __set_success(const MetaProfile& val);

  void __set_e(const TalkException& val);

  bool operator == (const ChannelApplicationProvidedService_getMetaProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getMetaProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getMetaProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getMetaProfile_presult__isset {
  _ChannelApplicationProvidedService_getMetaProfile_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getMetaProfile_presult__isset;

class ChannelApplicationProvidedService_getMetaProfile_presult {
 public:


  virtual ~ChannelApplicationProvidedService_getMetaProfile_presult() noexcept;
  MetaProfile* success;
  TalkException e;

  _ChannelApplicationProvidedService_getMetaProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ChannelApplicationProvidedService_getMid_args {
 public:

  ChannelApplicationProvidedService_getMid_args(const ChannelApplicationProvidedService_getMid_args&);
  ChannelApplicationProvidedService_getMid_args& operator=(const ChannelApplicationProvidedService_getMid_args&);
  ChannelApplicationProvidedService_getMid_args() {
  }

  virtual ~ChannelApplicationProvidedService_getMid_args() noexcept;

  bool operator == (const ChannelApplicationProvidedService_getMid_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getMid_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getMid_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelApplicationProvidedService_getMid_pargs {
 public:


  virtual ~ChannelApplicationProvidedService_getMid_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getMid_result__isset {
  _ChannelApplicationProvidedService_getMid_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getMid_result__isset;

class ChannelApplicationProvidedService_getMid_result {
 public:

  ChannelApplicationProvidedService_getMid_result(const ChannelApplicationProvidedService_getMid_result&);
  ChannelApplicationProvidedService_getMid_result& operator=(const ChannelApplicationProvidedService_getMid_result&);
  ChannelApplicationProvidedService_getMid_result() : success() {
  }

  virtual ~ChannelApplicationProvidedService_getMid_result() noexcept;
  std::string success;
  TalkException e;

  _ChannelApplicationProvidedService_getMid_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const ChannelApplicationProvidedService_getMid_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getMid_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getMid_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getMid_presult__isset {
  _ChannelApplicationProvidedService_getMid_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getMid_presult__isset;

class ChannelApplicationProvidedService_getMid_presult {
 public:


  virtual ~ChannelApplicationProvidedService_getMid_presult() noexcept;
  std::string* success;
  TalkException e;

  _ChannelApplicationProvidedService_getMid_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ChannelApplicationProvidedService_getPrimaryClientForChannel_args {
 public:

  ChannelApplicationProvidedService_getPrimaryClientForChannel_args(const ChannelApplicationProvidedService_getPrimaryClientForChannel_args&);
  ChannelApplicationProvidedService_getPrimaryClientForChannel_args& operator=(const ChannelApplicationProvidedService_getPrimaryClientForChannel_args&);
  ChannelApplicationProvidedService_getPrimaryClientForChannel_args() {
  }

  virtual ~ChannelApplicationProvidedService_getPrimaryClientForChannel_args() noexcept;

  bool operator == (const ChannelApplicationProvidedService_getPrimaryClientForChannel_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getPrimaryClientForChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getPrimaryClientForChannel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelApplicationProvidedService_getPrimaryClientForChannel_pargs {
 public:


  virtual ~ChannelApplicationProvidedService_getPrimaryClientForChannel_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getPrimaryClientForChannel_result__isset {
  _ChannelApplicationProvidedService_getPrimaryClientForChannel_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getPrimaryClientForChannel_result__isset;

class ChannelApplicationProvidedService_getPrimaryClientForChannel_result {
 public:

  ChannelApplicationProvidedService_getPrimaryClientForChannel_result(const ChannelApplicationProvidedService_getPrimaryClientForChannel_result&);
  ChannelApplicationProvidedService_getPrimaryClientForChannel_result& operator=(const ChannelApplicationProvidedService_getPrimaryClientForChannel_result&);
  ChannelApplicationProvidedService_getPrimaryClientForChannel_result() {
  }

  virtual ~ChannelApplicationProvidedService_getPrimaryClientForChannel_result() noexcept;
  SimpleChannelClient success;
  TalkException e;

  _ChannelApplicationProvidedService_getPrimaryClientForChannel_result__isset __isset;

  void __set_success(const SimpleChannelClient& val);

  void __set_e(const TalkException& val);

  bool operator == (const ChannelApplicationProvidedService_getPrimaryClientForChannel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getPrimaryClientForChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getPrimaryClientForChannel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getPrimaryClientForChannel_presult__isset {
  _ChannelApplicationProvidedService_getPrimaryClientForChannel_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getPrimaryClientForChannel_presult__isset;

class ChannelApplicationProvidedService_getPrimaryClientForChannel_presult {
 public:


  virtual ~ChannelApplicationProvidedService_getPrimaryClientForChannel_presult() noexcept;
  SimpleChannelClient* success;
  TalkException e;

  _ChannelApplicationProvidedService_getPrimaryClientForChannel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ChannelApplicationProvidedService_getProfileForChannel_args {
 public:

  ChannelApplicationProvidedService_getProfileForChannel_args(const ChannelApplicationProvidedService_getProfileForChannel_args&);
  ChannelApplicationProvidedService_getProfileForChannel_args& operator=(const ChannelApplicationProvidedService_getProfileForChannel_args&);
  ChannelApplicationProvidedService_getProfileForChannel_args() {
  }

  virtual ~ChannelApplicationProvidedService_getProfileForChannel_args() noexcept;

  bool operator == (const ChannelApplicationProvidedService_getProfileForChannel_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getProfileForChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getProfileForChannel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelApplicationProvidedService_getProfileForChannel_pargs {
 public:


  virtual ~ChannelApplicationProvidedService_getProfileForChannel_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getProfileForChannel_result__isset {
  _ChannelApplicationProvidedService_getProfileForChannel_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getProfileForChannel_result__isset;

class ChannelApplicationProvidedService_getProfileForChannel_result {
 public:

  ChannelApplicationProvidedService_getProfileForChannel_result(const ChannelApplicationProvidedService_getProfileForChannel_result&);
  ChannelApplicationProvidedService_getProfileForChannel_result& operator=(const ChannelApplicationProvidedService_getProfileForChannel_result&);
  ChannelApplicationProvidedService_getProfileForChannel_result() {
  }

  virtual ~ChannelApplicationProvidedService_getProfileForChannel_result() noexcept;
  Profile success;
  TalkException e;

  _ChannelApplicationProvidedService_getProfileForChannel_result__isset __isset;

  void __set_success(const Profile& val);

  void __set_e(const TalkException& val);

  bool operator == (const ChannelApplicationProvidedService_getProfileForChannel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getProfileForChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getProfileForChannel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getProfileForChannel_presult__isset {
  _ChannelApplicationProvidedService_getProfileForChannel_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getProfileForChannel_presult__isset;

class ChannelApplicationProvidedService_getProfileForChannel_presult {
 public:


  virtual ~ChannelApplicationProvidedService_getProfileForChannel_presult() noexcept;
  Profile* success;
  TalkException e;

  _ChannelApplicationProvidedService_getProfileForChannel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelApplicationProvidedService_getSimpleChannelContacts_args__isset {
  _ChannelApplicationProvidedService_getSimpleChannelContacts_args__isset() : ids(false) {}
  bool ids :1;
} _ChannelApplicationProvidedService_getSimpleChannelContacts_args__isset;

class ChannelApplicationProvidedService_getSimpleChannelContacts_args {
 public:

  ChannelApplicationProvidedService_getSimpleChannelContacts_args(const ChannelApplicationProvidedService_getSimpleChannelContacts_args&);
  ChannelApplicationProvidedService_getSimpleChannelContacts_args& operator=(const ChannelApplicationProvidedService_getSimpleChannelContacts_args&);
  ChannelApplicationProvidedService_getSimpleChannelContacts_args() {
  }

  virtual ~ChannelApplicationProvidedService_getSimpleChannelContacts_args() noexcept;
  std::vector<std::string>  ids;

  _ChannelApplicationProvidedService_getSimpleChannelContacts_args__isset __isset;

  void __set_ids(const std::vector<std::string> & val);

  bool operator == (const ChannelApplicationProvidedService_getSimpleChannelContacts_args & rhs) const
  {
    if (!(ids == rhs.ids))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getSimpleChannelContacts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getSimpleChannelContacts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelApplicationProvidedService_getSimpleChannelContacts_pargs {
 public:


  virtual ~ChannelApplicationProvidedService_getSimpleChannelContacts_pargs() noexcept;
  const std::vector<std::string> * ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getSimpleChannelContacts_result__isset {
  _ChannelApplicationProvidedService_getSimpleChannelContacts_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getSimpleChannelContacts_result__isset;

class ChannelApplicationProvidedService_getSimpleChannelContacts_result {
 public:

  ChannelApplicationProvidedService_getSimpleChannelContacts_result(const ChannelApplicationProvidedService_getSimpleChannelContacts_result&);
  ChannelApplicationProvidedService_getSimpleChannelContacts_result& operator=(const ChannelApplicationProvidedService_getSimpleChannelContacts_result&);
  ChannelApplicationProvidedService_getSimpleChannelContacts_result() {
  }

  virtual ~ChannelApplicationProvidedService_getSimpleChannelContacts_result() noexcept;
  std::vector<SimpleChannelContact>  success;
  TalkException e;

  _ChannelApplicationProvidedService_getSimpleChannelContacts_result__isset __isset;

  void __set_success(const std::vector<SimpleChannelContact> & val);

  void __set_e(const TalkException& val);

  bool operator == (const ChannelApplicationProvidedService_getSimpleChannelContacts_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getSimpleChannelContacts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getSimpleChannelContacts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getSimpleChannelContacts_presult__isset {
  _ChannelApplicationProvidedService_getSimpleChannelContacts_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getSimpleChannelContacts_presult__isset;

class ChannelApplicationProvidedService_getSimpleChannelContacts_presult {
 public:


  virtual ~ChannelApplicationProvidedService_getSimpleChannelContacts_presult() noexcept;
  std::vector<SimpleChannelContact> * success;
  TalkException e;

  _ChannelApplicationProvidedService_getSimpleChannelContacts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelApplicationProvidedService_getUserCountryForBilling_args__isset {
  _ChannelApplicationProvidedService_getUserCountryForBilling_args__isset() : country(false), remoteIp(false) {}
  bool country :1;
  bool remoteIp :1;
} _ChannelApplicationProvidedService_getUserCountryForBilling_args__isset;

class ChannelApplicationProvidedService_getUserCountryForBilling_args {
 public:

  ChannelApplicationProvidedService_getUserCountryForBilling_args(const ChannelApplicationProvidedService_getUserCountryForBilling_args&);
  ChannelApplicationProvidedService_getUserCountryForBilling_args& operator=(const ChannelApplicationProvidedService_getUserCountryForBilling_args&);
  ChannelApplicationProvidedService_getUserCountryForBilling_args() : country(), remoteIp() {
  }

  virtual ~ChannelApplicationProvidedService_getUserCountryForBilling_args() noexcept;
  std::string country;
  std::string remoteIp;

  _ChannelApplicationProvidedService_getUserCountryForBilling_args__isset __isset;

  void __set_country(const std::string& val);

  void __set_remoteIp(const std::string& val);

  bool operator == (const ChannelApplicationProvidedService_getUserCountryForBilling_args & rhs) const
  {
    if (!(country == rhs.country))
      return false;
    if (!(remoteIp == rhs.remoteIp))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getUserCountryForBilling_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getUserCountryForBilling_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelApplicationProvidedService_getUserCountryForBilling_pargs {
 public:


  virtual ~ChannelApplicationProvidedService_getUserCountryForBilling_pargs() noexcept;
  const std::string* country;
  const std::string* remoteIp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getUserCountryForBilling_result__isset {
  _ChannelApplicationProvidedService_getUserCountryForBilling_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getUserCountryForBilling_result__isset;

class ChannelApplicationProvidedService_getUserCountryForBilling_result {
 public:

  ChannelApplicationProvidedService_getUserCountryForBilling_result(const ChannelApplicationProvidedService_getUserCountryForBilling_result&);
  ChannelApplicationProvidedService_getUserCountryForBilling_result& operator=(const ChannelApplicationProvidedService_getUserCountryForBilling_result&);
  ChannelApplicationProvidedService_getUserCountryForBilling_result() : success() {
  }

  virtual ~ChannelApplicationProvidedService_getUserCountryForBilling_result() noexcept;
  std::string success;
  TalkException e;

  _ChannelApplicationProvidedService_getUserCountryForBilling_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const ChannelApplicationProvidedService_getUserCountryForBilling_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getUserCountryForBilling_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getUserCountryForBilling_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getUserCountryForBilling_presult__isset {
  _ChannelApplicationProvidedService_getUserCountryForBilling_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getUserCountryForBilling_presult__isset;

class ChannelApplicationProvidedService_getUserCountryForBilling_presult {
 public:


  virtual ~ChannelApplicationProvidedService_getUserCountryForBilling_presult() noexcept;
  std::string* success;
  TalkException e;

  _ChannelApplicationProvidedService_getUserCountryForBilling_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ChannelApplicationProvidedService_getUserCreateTime_args {
 public:

  ChannelApplicationProvidedService_getUserCreateTime_args(const ChannelApplicationProvidedService_getUserCreateTime_args&);
  ChannelApplicationProvidedService_getUserCreateTime_args& operator=(const ChannelApplicationProvidedService_getUserCreateTime_args&);
  ChannelApplicationProvidedService_getUserCreateTime_args() {
  }

  virtual ~ChannelApplicationProvidedService_getUserCreateTime_args() noexcept;

  bool operator == (const ChannelApplicationProvidedService_getUserCreateTime_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getUserCreateTime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getUserCreateTime_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelApplicationProvidedService_getUserCreateTime_pargs {
 public:


  virtual ~ChannelApplicationProvidedService_getUserCreateTime_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getUserCreateTime_result__isset {
  _ChannelApplicationProvidedService_getUserCreateTime_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getUserCreateTime_result__isset;

class ChannelApplicationProvidedService_getUserCreateTime_result {
 public:

  ChannelApplicationProvidedService_getUserCreateTime_result(const ChannelApplicationProvidedService_getUserCreateTime_result&);
  ChannelApplicationProvidedService_getUserCreateTime_result& operator=(const ChannelApplicationProvidedService_getUserCreateTime_result&);
  ChannelApplicationProvidedService_getUserCreateTime_result() : success(0) {
  }

  virtual ~ChannelApplicationProvidedService_getUserCreateTime_result() noexcept;
  int64_t success;
  TalkException e;

  _ChannelApplicationProvidedService_getUserCreateTime_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_e(const TalkException& val);

  bool operator == (const ChannelApplicationProvidedService_getUserCreateTime_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getUserCreateTime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getUserCreateTime_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getUserCreateTime_presult__isset {
  _ChannelApplicationProvidedService_getUserCreateTime_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getUserCreateTime_presult__isset;

class ChannelApplicationProvidedService_getUserCreateTime_presult {
 public:


  virtual ~ChannelApplicationProvidedService_getUserCreateTime_presult() noexcept;
  int64_t* success;
  TalkException e;

  _ChannelApplicationProvidedService_getUserCreateTime_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ChannelApplicationProvidedService_getUserIdentities_args {
 public:

  ChannelApplicationProvidedService_getUserIdentities_args(const ChannelApplicationProvidedService_getUserIdentities_args&);
  ChannelApplicationProvidedService_getUserIdentities_args& operator=(const ChannelApplicationProvidedService_getUserIdentities_args&);
  ChannelApplicationProvidedService_getUserIdentities_args() {
  }

  virtual ~ChannelApplicationProvidedService_getUserIdentities_args() noexcept;

  bool operator == (const ChannelApplicationProvidedService_getUserIdentities_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getUserIdentities_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getUserIdentities_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelApplicationProvidedService_getUserIdentities_pargs {
 public:


  virtual ~ChannelApplicationProvidedService_getUserIdentities_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getUserIdentities_result__isset {
  _ChannelApplicationProvidedService_getUserIdentities_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getUserIdentities_result__isset;

class ChannelApplicationProvidedService_getUserIdentities_result {
 public:

  ChannelApplicationProvidedService_getUserIdentities_result(const ChannelApplicationProvidedService_getUserIdentities_result&);
  ChannelApplicationProvidedService_getUserIdentities_result& operator=(const ChannelApplicationProvidedService_getUserIdentities_result&);
  ChannelApplicationProvidedService_getUserIdentities_result() {
  }

  virtual ~ChannelApplicationProvidedService_getUserIdentities_result() noexcept;
  std::map<RegistrationType::type, std::string>  success;
  TalkException e;

  _ChannelApplicationProvidedService_getUserIdentities_result__isset __isset;

  void __set_success(const std::map<RegistrationType::type, std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const ChannelApplicationProvidedService_getUserIdentities_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getUserIdentities_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getUserIdentities_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getUserIdentities_presult__isset {
  _ChannelApplicationProvidedService_getUserIdentities_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getUserIdentities_presult__isset;

class ChannelApplicationProvidedService_getUserIdentities_presult {
 public:


  virtual ~ChannelApplicationProvidedService_getUserIdentities_presult() noexcept;
  std::map<RegistrationType::type, std::string> * success;
  TalkException e;

  _ChannelApplicationProvidedService_getUserIdentities_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ChannelApplicationProvidedService_getUserLanguage_args {
 public:

  ChannelApplicationProvidedService_getUserLanguage_args(const ChannelApplicationProvidedService_getUserLanguage_args&);
  ChannelApplicationProvidedService_getUserLanguage_args& operator=(const ChannelApplicationProvidedService_getUserLanguage_args&);
  ChannelApplicationProvidedService_getUserLanguage_args() {
  }

  virtual ~ChannelApplicationProvidedService_getUserLanguage_args() noexcept;

  bool operator == (const ChannelApplicationProvidedService_getUserLanguage_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getUserLanguage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getUserLanguage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelApplicationProvidedService_getUserLanguage_pargs {
 public:


  virtual ~ChannelApplicationProvidedService_getUserLanguage_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getUserLanguage_result__isset {
  _ChannelApplicationProvidedService_getUserLanguage_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getUserLanguage_result__isset;

class ChannelApplicationProvidedService_getUserLanguage_result {
 public:

  ChannelApplicationProvidedService_getUserLanguage_result(const ChannelApplicationProvidedService_getUserLanguage_result&);
  ChannelApplicationProvidedService_getUserLanguage_result& operator=(const ChannelApplicationProvidedService_getUserLanguage_result&);
  ChannelApplicationProvidedService_getUserLanguage_result() : success() {
  }

  virtual ~ChannelApplicationProvidedService_getUserLanguage_result() noexcept;
  std::string success;
  TalkException e;

  _ChannelApplicationProvidedService_getUserLanguage_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const ChannelApplicationProvidedService_getUserLanguage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getUserLanguage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getUserLanguage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getUserLanguage_presult__isset {
  _ChannelApplicationProvidedService_getUserLanguage_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getUserLanguage_presult__isset;

class ChannelApplicationProvidedService_getUserLanguage_presult {
 public:


  virtual ~ChannelApplicationProvidedService_getUserLanguage_presult() noexcept;
  std::string* success;
  TalkException e;

  _ChannelApplicationProvidedService_getUserLanguage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ChannelApplicationProvidedService_getUserMidsWhoAddedMe_args {
 public:

  ChannelApplicationProvidedService_getUserMidsWhoAddedMe_args(const ChannelApplicationProvidedService_getUserMidsWhoAddedMe_args&);
  ChannelApplicationProvidedService_getUserMidsWhoAddedMe_args& operator=(const ChannelApplicationProvidedService_getUserMidsWhoAddedMe_args&);
  ChannelApplicationProvidedService_getUserMidsWhoAddedMe_args() {
  }

  virtual ~ChannelApplicationProvidedService_getUserMidsWhoAddedMe_args() noexcept;

  bool operator == (const ChannelApplicationProvidedService_getUserMidsWhoAddedMe_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getUserMidsWhoAddedMe_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getUserMidsWhoAddedMe_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelApplicationProvidedService_getUserMidsWhoAddedMe_pargs {
 public:


  virtual ~ChannelApplicationProvidedService_getUserMidsWhoAddedMe_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getUserMidsWhoAddedMe_result__isset {
  _ChannelApplicationProvidedService_getUserMidsWhoAddedMe_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getUserMidsWhoAddedMe_result__isset;

class ChannelApplicationProvidedService_getUserMidsWhoAddedMe_result {
 public:

  ChannelApplicationProvidedService_getUserMidsWhoAddedMe_result(const ChannelApplicationProvidedService_getUserMidsWhoAddedMe_result&);
  ChannelApplicationProvidedService_getUserMidsWhoAddedMe_result& operator=(const ChannelApplicationProvidedService_getUserMidsWhoAddedMe_result&);
  ChannelApplicationProvidedService_getUserMidsWhoAddedMe_result() {
  }

  virtual ~ChannelApplicationProvidedService_getUserMidsWhoAddedMe_result() noexcept;
  std::vector<std::string>  success;
  TalkException e;

  _ChannelApplicationProvidedService_getUserMidsWhoAddedMe_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const ChannelApplicationProvidedService_getUserMidsWhoAddedMe_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_getUserMidsWhoAddedMe_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_getUserMidsWhoAddedMe_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_getUserMidsWhoAddedMe_presult__isset {
  _ChannelApplicationProvidedService_getUserMidsWhoAddedMe_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_getUserMidsWhoAddedMe_presult__isset;

class ChannelApplicationProvidedService_getUserMidsWhoAddedMe_presult {
 public:


  virtual ~ChannelApplicationProvidedService_getUserMidsWhoAddedMe_presult() noexcept;
  std::vector<std::string> * success;
  TalkException e;

  _ChannelApplicationProvidedService_getUserMidsWhoAddedMe_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelApplicationProvidedService_isGroupMember_args__isset {
  _ChannelApplicationProvidedService_isGroupMember_args__isset() : groupId(false) {}
  bool groupId :1;
} _ChannelApplicationProvidedService_isGroupMember_args__isset;

class ChannelApplicationProvidedService_isGroupMember_args {
 public:

  ChannelApplicationProvidedService_isGroupMember_args(const ChannelApplicationProvidedService_isGroupMember_args&);
  ChannelApplicationProvidedService_isGroupMember_args& operator=(const ChannelApplicationProvidedService_isGroupMember_args&);
  ChannelApplicationProvidedService_isGroupMember_args() : groupId() {
  }

  virtual ~ChannelApplicationProvidedService_isGroupMember_args() noexcept;
  std::string groupId;

  _ChannelApplicationProvidedService_isGroupMember_args__isset __isset;

  void __set_groupId(const std::string& val);

  bool operator == (const ChannelApplicationProvidedService_isGroupMember_args & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_isGroupMember_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_isGroupMember_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelApplicationProvidedService_isGroupMember_pargs {
 public:


  virtual ~ChannelApplicationProvidedService_isGroupMember_pargs() noexcept;
  const std::string* groupId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_isGroupMember_result__isset {
  _ChannelApplicationProvidedService_isGroupMember_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_isGroupMember_result__isset;

class ChannelApplicationProvidedService_isGroupMember_result {
 public:

  ChannelApplicationProvidedService_isGroupMember_result(const ChannelApplicationProvidedService_isGroupMember_result&);
  ChannelApplicationProvidedService_isGroupMember_result& operator=(const ChannelApplicationProvidedService_isGroupMember_result&);
  ChannelApplicationProvidedService_isGroupMember_result() : success(0) {
  }

  virtual ~ChannelApplicationProvidedService_isGroupMember_result() noexcept;
  bool success;
  TalkException e;

  _ChannelApplicationProvidedService_isGroupMember_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const TalkException& val);

  bool operator == (const ChannelApplicationProvidedService_isGroupMember_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_isGroupMember_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_isGroupMember_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_isGroupMember_presult__isset {
  _ChannelApplicationProvidedService_isGroupMember_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_isGroupMember_presult__isset;

class ChannelApplicationProvidedService_isGroupMember_presult {
 public:


  virtual ~ChannelApplicationProvidedService_isGroupMember_presult() noexcept;
  bool* success;
  TalkException e;

  _ChannelApplicationProvidedService_isGroupMember_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelApplicationProvidedService_isInContact_args__isset {
  _ChannelApplicationProvidedService_isInContact_args__isset() : mid(false) {}
  bool mid :1;
} _ChannelApplicationProvidedService_isInContact_args__isset;

class ChannelApplicationProvidedService_isInContact_args {
 public:

  ChannelApplicationProvidedService_isInContact_args(const ChannelApplicationProvidedService_isInContact_args&);
  ChannelApplicationProvidedService_isInContact_args& operator=(const ChannelApplicationProvidedService_isInContact_args&);
  ChannelApplicationProvidedService_isInContact_args() : mid() {
  }

  virtual ~ChannelApplicationProvidedService_isInContact_args() noexcept;
  std::string mid;

  _ChannelApplicationProvidedService_isInContact_args__isset __isset;

  void __set_mid(const std::string& val);

  bool operator == (const ChannelApplicationProvidedService_isInContact_args & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_isInContact_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_isInContact_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelApplicationProvidedService_isInContact_pargs {
 public:


  virtual ~ChannelApplicationProvidedService_isInContact_pargs() noexcept;
  const std::string* mid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_isInContact_result__isset {
  _ChannelApplicationProvidedService_isInContact_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_isInContact_result__isset;

class ChannelApplicationProvidedService_isInContact_result {
 public:

  ChannelApplicationProvidedService_isInContact_result(const ChannelApplicationProvidedService_isInContact_result&);
  ChannelApplicationProvidedService_isInContact_result& operator=(const ChannelApplicationProvidedService_isInContact_result&);
  ChannelApplicationProvidedService_isInContact_result() : success(0) {
  }

  virtual ~ChannelApplicationProvidedService_isInContact_result() noexcept;
  bool success;
  TalkException e;

  _ChannelApplicationProvidedService_isInContact_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const TalkException& val);

  bool operator == (const ChannelApplicationProvidedService_isInContact_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_isInContact_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_isInContact_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_isInContact_presult__isset {
  _ChannelApplicationProvidedService_isInContact_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_isInContact_presult__isset;

class ChannelApplicationProvidedService_isInContact_presult {
 public:


  virtual ~ChannelApplicationProvidedService_isInContact_presult() noexcept;
  bool* success;
  TalkException e;

  _ChannelApplicationProvidedService_isInContact_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelApplicationProvidedService_registerChannelCP_args__isset {
  _ChannelApplicationProvidedService_registerChannelCP_args__isset() : cpId(false), registerPassword(false) {}
  bool cpId :1;
  bool registerPassword :1;
} _ChannelApplicationProvidedService_registerChannelCP_args__isset;

class ChannelApplicationProvidedService_registerChannelCP_args {
 public:

  ChannelApplicationProvidedService_registerChannelCP_args(const ChannelApplicationProvidedService_registerChannelCP_args&);
  ChannelApplicationProvidedService_registerChannelCP_args& operator=(const ChannelApplicationProvidedService_registerChannelCP_args&);
  ChannelApplicationProvidedService_registerChannelCP_args() : cpId(), registerPassword() {
  }

  virtual ~ChannelApplicationProvidedService_registerChannelCP_args() noexcept;
  std::string cpId;
  std::string registerPassword;

  _ChannelApplicationProvidedService_registerChannelCP_args__isset __isset;

  void __set_cpId(const std::string& val);

  void __set_registerPassword(const std::string& val);

  bool operator == (const ChannelApplicationProvidedService_registerChannelCP_args & rhs) const
  {
    if (!(cpId == rhs.cpId))
      return false;
    if (!(registerPassword == rhs.registerPassword))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_registerChannelCP_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_registerChannelCP_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelApplicationProvidedService_registerChannelCP_pargs {
 public:


  virtual ~ChannelApplicationProvidedService_registerChannelCP_pargs() noexcept;
  const std::string* cpId;
  const std::string* registerPassword;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_registerChannelCP_result__isset {
  _ChannelApplicationProvidedService_registerChannelCP_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_registerChannelCP_result__isset;

class ChannelApplicationProvidedService_registerChannelCP_result {
 public:

  ChannelApplicationProvidedService_registerChannelCP_result(const ChannelApplicationProvidedService_registerChannelCP_result&);
  ChannelApplicationProvidedService_registerChannelCP_result& operator=(const ChannelApplicationProvidedService_registerChannelCP_result&);
  ChannelApplicationProvidedService_registerChannelCP_result() : success() {
  }

  virtual ~ChannelApplicationProvidedService_registerChannelCP_result() noexcept;
  std::string success;
  TalkException e;

  _ChannelApplicationProvidedService_registerChannelCP_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const ChannelApplicationProvidedService_registerChannelCP_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_registerChannelCP_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_registerChannelCP_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_registerChannelCP_presult__isset {
  _ChannelApplicationProvidedService_registerChannelCP_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_registerChannelCP_presult__isset;

class ChannelApplicationProvidedService_registerChannelCP_presult {
 public:


  virtual ~ChannelApplicationProvidedService_registerChannelCP_presult() noexcept;
  std::string* success;
  TalkException e;

  _ChannelApplicationProvidedService_registerChannelCP_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelApplicationProvidedService_removeNotificationStatus_args__isset {
  _ChannelApplicationProvidedService_removeNotificationStatus_args__isset() : notificationStatus(false) {}
  bool notificationStatus :1;
} _ChannelApplicationProvidedService_removeNotificationStatus_args__isset;

class ChannelApplicationProvidedService_removeNotificationStatus_args {
 public:

  ChannelApplicationProvidedService_removeNotificationStatus_args(const ChannelApplicationProvidedService_removeNotificationStatus_args&);
  ChannelApplicationProvidedService_removeNotificationStatus_args& operator=(const ChannelApplicationProvidedService_removeNotificationStatus_args&);
  ChannelApplicationProvidedService_removeNotificationStatus_args() : notificationStatus((NotificationStatus::type)0) {
  }

  virtual ~ChannelApplicationProvidedService_removeNotificationStatus_args() noexcept;
  NotificationStatus::type notificationStatus;

  _ChannelApplicationProvidedService_removeNotificationStatus_args__isset __isset;

  void __set_notificationStatus(const NotificationStatus::type val);

  bool operator == (const ChannelApplicationProvidedService_removeNotificationStatus_args & rhs) const
  {
    if (!(notificationStatus == rhs.notificationStatus))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_removeNotificationStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_removeNotificationStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelApplicationProvidedService_removeNotificationStatus_pargs {
 public:


  virtual ~ChannelApplicationProvidedService_removeNotificationStatus_pargs() noexcept;
  const NotificationStatus::type* notificationStatus;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_removeNotificationStatus_result__isset {
  _ChannelApplicationProvidedService_removeNotificationStatus_result__isset() : e(false) {}
  bool e :1;
} _ChannelApplicationProvidedService_removeNotificationStatus_result__isset;

class ChannelApplicationProvidedService_removeNotificationStatus_result {
 public:

  ChannelApplicationProvidedService_removeNotificationStatus_result(const ChannelApplicationProvidedService_removeNotificationStatus_result&);
  ChannelApplicationProvidedService_removeNotificationStatus_result& operator=(const ChannelApplicationProvidedService_removeNotificationStatus_result&);
  ChannelApplicationProvidedService_removeNotificationStatus_result() {
  }

  virtual ~ChannelApplicationProvidedService_removeNotificationStatus_result() noexcept;
  TalkException e;

  _ChannelApplicationProvidedService_removeNotificationStatus_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const ChannelApplicationProvidedService_removeNotificationStatus_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_removeNotificationStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_removeNotificationStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_removeNotificationStatus_presult__isset {
  _ChannelApplicationProvidedService_removeNotificationStatus_presult__isset() : e(false) {}
  bool e :1;
} _ChannelApplicationProvidedService_removeNotificationStatus_presult__isset;

class ChannelApplicationProvidedService_removeNotificationStatus_presult {
 public:


  virtual ~ChannelApplicationProvidedService_removeNotificationStatus_presult() noexcept;
  TalkException e;

  _ChannelApplicationProvidedService_removeNotificationStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelApplicationProvidedService_sendMessageForChannel_args__isset {
  _ChannelApplicationProvidedService_sendMessageForChannel_args__isset() : message(false) {}
  bool message :1;
} _ChannelApplicationProvidedService_sendMessageForChannel_args__isset;

class ChannelApplicationProvidedService_sendMessageForChannel_args {
 public:

  ChannelApplicationProvidedService_sendMessageForChannel_args(const ChannelApplicationProvidedService_sendMessageForChannel_args&);
  ChannelApplicationProvidedService_sendMessageForChannel_args& operator=(const ChannelApplicationProvidedService_sendMessageForChannel_args&);
  ChannelApplicationProvidedService_sendMessageForChannel_args() {
  }

  virtual ~ChannelApplicationProvidedService_sendMessageForChannel_args() noexcept;
  Message message;

  _ChannelApplicationProvidedService_sendMessageForChannel_args__isset __isset;

  void __set_message(const Message& val);

  bool operator == (const ChannelApplicationProvidedService_sendMessageForChannel_args & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_sendMessageForChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_sendMessageForChannel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelApplicationProvidedService_sendMessageForChannel_pargs {
 public:


  virtual ~ChannelApplicationProvidedService_sendMessageForChannel_pargs() noexcept;
  const Message* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_sendMessageForChannel_result__isset {
  _ChannelApplicationProvidedService_sendMessageForChannel_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_sendMessageForChannel_result__isset;

class ChannelApplicationProvidedService_sendMessageForChannel_result {
 public:

  ChannelApplicationProvidedService_sendMessageForChannel_result(const ChannelApplicationProvidedService_sendMessageForChannel_result&);
  ChannelApplicationProvidedService_sendMessageForChannel_result& operator=(const ChannelApplicationProvidedService_sendMessageForChannel_result&);
  ChannelApplicationProvidedService_sendMessageForChannel_result() {
  }

  virtual ~ChannelApplicationProvidedService_sendMessageForChannel_result() noexcept;
  Message success;
  TalkException e;

  _ChannelApplicationProvidedService_sendMessageForChannel_result__isset __isset;

  void __set_success(const Message& val);

  void __set_e(const TalkException& val);

  bool operator == (const ChannelApplicationProvidedService_sendMessageForChannel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_sendMessageForChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_sendMessageForChannel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_sendMessageForChannel_presult__isset {
  _ChannelApplicationProvidedService_sendMessageForChannel_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ChannelApplicationProvidedService_sendMessageForChannel_presult__isset;

class ChannelApplicationProvidedService_sendMessageForChannel_presult {
 public:


  virtual ~ChannelApplicationProvidedService_sendMessageForChannel_presult() noexcept;
  Message* success;
  TalkException e;

  _ChannelApplicationProvidedService_sendMessageForChannel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelApplicationProvidedService_sendPinCodeOperation_args__isset {
  _ChannelApplicationProvidedService_sendPinCodeOperation_args__isset() : verifier(false) {}
  bool verifier :1;
} _ChannelApplicationProvidedService_sendPinCodeOperation_args__isset;

class ChannelApplicationProvidedService_sendPinCodeOperation_args {
 public:

  ChannelApplicationProvidedService_sendPinCodeOperation_args(const ChannelApplicationProvidedService_sendPinCodeOperation_args&);
  ChannelApplicationProvidedService_sendPinCodeOperation_args& operator=(const ChannelApplicationProvidedService_sendPinCodeOperation_args&);
  ChannelApplicationProvidedService_sendPinCodeOperation_args() : verifier() {
  }

  virtual ~ChannelApplicationProvidedService_sendPinCodeOperation_args() noexcept;
  std::string verifier;

  _ChannelApplicationProvidedService_sendPinCodeOperation_args__isset __isset;

  void __set_verifier(const std::string& val);

  bool operator == (const ChannelApplicationProvidedService_sendPinCodeOperation_args & rhs) const
  {
    if (!(verifier == rhs.verifier))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_sendPinCodeOperation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_sendPinCodeOperation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelApplicationProvidedService_sendPinCodeOperation_pargs {
 public:


  virtual ~ChannelApplicationProvidedService_sendPinCodeOperation_pargs() noexcept;
  const std::string* verifier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_sendPinCodeOperation_result__isset {
  _ChannelApplicationProvidedService_sendPinCodeOperation_result__isset() : e(false) {}
  bool e :1;
} _ChannelApplicationProvidedService_sendPinCodeOperation_result__isset;

class ChannelApplicationProvidedService_sendPinCodeOperation_result {
 public:

  ChannelApplicationProvidedService_sendPinCodeOperation_result(const ChannelApplicationProvidedService_sendPinCodeOperation_result&);
  ChannelApplicationProvidedService_sendPinCodeOperation_result& operator=(const ChannelApplicationProvidedService_sendPinCodeOperation_result&);
  ChannelApplicationProvidedService_sendPinCodeOperation_result() {
  }

  virtual ~ChannelApplicationProvidedService_sendPinCodeOperation_result() noexcept;
  TalkException e;

  _ChannelApplicationProvidedService_sendPinCodeOperation_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const ChannelApplicationProvidedService_sendPinCodeOperation_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_sendPinCodeOperation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_sendPinCodeOperation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_sendPinCodeOperation_presult__isset {
  _ChannelApplicationProvidedService_sendPinCodeOperation_presult__isset() : e(false) {}
  bool e :1;
} _ChannelApplicationProvidedService_sendPinCodeOperation_presult__isset;

class ChannelApplicationProvidedService_sendPinCodeOperation_presult {
 public:


  virtual ~ChannelApplicationProvidedService_sendPinCodeOperation_presult() noexcept;
  TalkException e;

  _ChannelApplicationProvidedService_sendPinCodeOperation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelApplicationProvidedService_updateProfileAttributeForChannel_args__isset {
  _ChannelApplicationProvidedService_updateProfileAttributeForChannel_args__isset() : profileAttribute(false), value(false) {}
  bool profileAttribute :1;
  bool value :1;
} _ChannelApplicationProvidedService_updateProfileAttributeForChannel_args__isset;

class ChannelApplicationProvidedService_updateProfileAttributeForChannel_args {
 public:

  ChannelApplicationProvidedService_updateProfileAttributeForChannel_args(const ChannelApplicationProvidedService_updateProfileAttributeForChannel_args&);
  ChannelApplicationProvidedService_updateProfileAttributeForChannel_args& operator=(const ChannelApplicationProvidedService_updateProfileAttributeForChannel_args&);
  ChannelApplicationProvidedService_updateProfileAttributeForChannel_args() : profileAttribute((ProfileAttribute::type)0), value() {
  }

  virtual ~ChannelApplicationProvidedService_updateProfileAttributeForChannel_args() noexcept;
  ProfileAttribute::type profileAttribute;
  std::string value;

  _ChannelApplicationProvidedService_updateProfileAttributeForChannel_args__isset __isset;

  void __set_profileAttribute(const ProfileAttribute::type val);

  void __set_value(const std::string& val);

  bool operator == (const ChannelApplicationProvidedService_updateProfileAttributeForChannel_args & rhs) const
  {
    if (!(profileAttribute == rhs.profileAttribute))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_updateProfileAttributeForChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_updateProfileAttributeForChannel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelApplicationProvidedService_updateProfileAttributeForChannel_pargs {
 public:


  virtual ~ChannelApplicationProvidedService_updateProfileAttributeForChannel_pargs() noexcept;
  const ProfileAttribute::type* profileAttribute;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_updateProfileAttributeForChannel_result__isset {
  _ChannelApplicationProvidedService_updateProfileAttributeForChannel_result__isset() : e(false) {}
  bool e :1;
} _ChannelApplicationProvidedService_updateProfileAttributeForChannel_result__isset;

class ChannelApplicationProvidedService_updateProfileAttributeForChannel_result {
 public:

  ChannelApplicationProvidedService_updateProfileAttributeForChannel_result(const ChannelApplicationProvidedService_updateProfileAttributeForChannel_result&);
  ChannelApplicationProvidedService_updateProfileAttributeForChannel_result& operator=(const ChannelApplicationProvidedService_updateProfileAttributeForChannel_result&);
  ChannelApplicationProvidedService_updateProfileAttributeForChannel_result() {
  }

  virtual ~ChannelApplicationProvidedService_updateProfileAttributeForChannel_result() noexcept;
  TalkException e;

  _ChannelApplicationProvidedService_updateProfileAttributeForChannel_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const ChannelApplicationProvidedService_updateProfileAttributeForChannel_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ChannelApplicationProvidedService_updateProfileAttributeForChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelApplicationProvidedService_updateProfileAttributeForChannel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelApplicationProvidedService_updateProfileAttributeForChannel_presult__isset {
  _ChannelApplicationProvidedService_updateProfileAttributeForChannel_presult__isset() : e(false) {}
  bool e :1;
} _ChannelApplicationProvidedService_updateProfileAttributeForChannel_presult__isset;

class ChannelApplicationProvidedService_updateProfileAttributeForChannel_presult {
 public:


  virtual ~ChannelApplicationProvidedService_updateProfileAttributeForChannel_presult() noexcept;
  TalkException e;

  _ChannelApplicationProvidedService_updateProfileAttributeForChannel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ChannelApplicationProvidedServiceClient : virtual public ChannelApplicationProvidedServiceIf {
 public:
  ChannelApplicationProvidedServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ChannelApplicationProvidedServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t activeBuddySubscriberCount();
  void send_activeBuddySubscriberCount();
  int64_t recv_activeBuddySubscriberCount();
  void addOperationForChannel(const OpType::type opType, const std::string& param1, const std::string& param2, const std::string& param3);
  void send_addOperationForChannel(const OpType::type opType, const std::string& param1, const std::string& param2, const std::string& param3);
  void recv_addOperationForChannel();
  int64_t displayBuddySubscriberCount();
  void send_displayBuddySubscriberCount();
  int64_t recv_displayBuddySubscriberCount();
  void findContactByUseridWithoutAbuseBlockForChannel(Contact& _return, const std::string& userid);
  void send_findContactByUseridWithoutAbuseBlockForChannel(const std::string& userid);
  void recv_findContactByUseridWithoutAbuseBlockForChannel(Contact& _return);
  void getAllContactIdsForChannel(std::vector<std::string> & _return);
  void send_getAllContactIdsForChannel();
  void recv_getAllContactIdsForChannel(std::vector<std::string> & _return);
  void getCompactContacts(std::vector<CompactContact> & _return, const int64_t lastModifiedTimestamp);
  void send_getCompactContacts(const int64_t lastModifiedTimestamp);
  void recv_getCompactContacts(std::vector<CompactContact> & _return);
  void getContactsForChannel(std::vector<Contact> & _return, const std::vector<std::string> & ids);
  void send_getContactsForChannel(const std::vector<std::string> & ids);
  void recv_getContactsForChannel(std::vector<Contact> & _return);
  void getDisplayName(std::string& _return, const std::string& mid);
  void send_getDisplayName(const std::string& mid);
  void recv_getDisplayName(std::string& _return);
  void getFavoriteMidsForChannel(std::vector<std::string> & _return);
  void send_getFavoriteMidsForChannel();
  void recv_getFavoriteMidsForChannel(std::vector<std::string> & _return);
  void getFriendMids(std::vector<std::string> & _return);
  void send_getFriendMids();
  void recv_getFriendMids(std::vector<std::string> & _return);
  void getGroupMemberMids(std::vector<std::string> & _return, const std::string& groupId);
  void send_getGroupMemberMids(const std::string& groupId);
  void recv_getGroupMemberMids(std::vector<std::string> & _return);
  void getGroupsForChannel(std::vector<Group> & _return, const std::vector<std::string> & groupIds);
  void send_getGroupsForChannel(const std::vector<std::string> & groupIds);
  void recv_getGroupsForChannel(std::vector<Group> & _return);
  void getIdentityCredential(IdentityCredential& _return);
  void send_getIdentityCredential();
  void recv_getIdentityCredential(IdentityCredential& _return);
  void getJoinedGroupIdsForChannel(std::vector<std::string> & _return);
  void send_getJoinedGroupIdsForChannel();
  void recv_getJoinedGroupIdsForChannel(std::vector<std::string> & _return);
  void getMetaProfile(MetaProfile& _return);
  void send_getMetaProfile();
  void recv_getMetaProfile(MetaProfile& _return);
  void getMid(std::string& _return);
  void send_getMid();
  void recv_getMid(std::string& _return);
  void getPrimaryClientForChannel(SimpleChannelClient& _return);
  void send_getPrimaryClientForChannel();
  void recv_getPrimaryClientForChannel(SimpleChannelClient& _return);
  void getProfileForChannel(Profile& _return);
  void send_getProfileForChannel();
  void recv_getProfileForChannel(Profile& _return);
  void getSimpleChannelContacts(std::vector<SimpleChannelContact> & _return, const std::vector<std::string> & ids);
  void send_getSimpleChannelContacts(const std::vector<std::string> & ids);
  void recv_getSimpleChannelContacts(std::vector<SimpleChannelContact> & _return);
  void getUserCountryForBilling(std::string& _return, const std::string& country, const std::string& remoteIp);
  void send_getUserCountryForBilling(const std::string& country, const std::string& remoteIp);
  void recv_getUserCountryForBilling(std::string& _return);
  int64_t getUserCreateTime();
  void send_getUserCreateTime();
  int64_t recv_getUserCreateTime();
  void getUserIdentities(std::map<RegistrationType::type, std::string> & _return);
  void send_getUserIdentities();
  void recv_getUserIdentities(std::map<RegistrationType::type, std::string> & _return);
  void getUserLanguage(std::string& _return);
  void send_getUserLanguage();
  void recv_getUserLanguage(std::string& _return);
  void getUserMidsWhoAddedMe(std::vector<std::string> & _return);
  void send_getUserMidsWhoAddedMe();
  void recv_getUserMidsWhoAddedMe(std::vector<std::string> & _return);
  bool isGroupMember(const std::string& groupId);
  void send_isGroupMember(const std::string& groupId);
  bool recv_isGroupMember();
  bool isInContact(const std::string& mid);
  void send_isInContact(const std::string& mid);
  bool recv_isInContact();
  void registerChannelCP(std::string& _return, const std::string& cpId, const std::string& registerPassword);
  void send_registerChannelCP(const std::string& cpId, const std::string& registerPassword);
  void recv_registerChannelCP(std::string& _return);
  void removeNotificationStatus(const NotificationStatus::type notificationStatus);
  void send_removeNotificationStatus(const NotificationStatus::type notificationStatus);
  void recv_removeNotificationStatus();
  void sendMessageForChannel(Message& _return, const Message& message);
  void send_sendMessageForChannel(const Message& message);
  void recv_sendMessageForChannel(Message& _return);
  void sendPinCodeOperation(const std::string& verifier);
  void send_sendPinCodeOperation(const std::string& verifier);
  void recv_sendPinCodeOperation();
  void updateProfileAttributeForChannel(const ProfileAttribute::type profileAttribute, const std::string& value);
  void send_updateProfileAttributeForChannel(const ProfileAttribute::type profileAttribute, const std::string& value);
  void recv_updateProfileAttributeForChannel();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ChannelApplicationProvidedServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<ChannelApplicationProvidedServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ChannelApplicationProvidedServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_activeBuddySubscriberCount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addOperationForChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_displayBuddySubscriberCount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findContactByUseridWithoutAbuseBlockForChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllContactIdsForChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCompactContacts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getContactsForChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDisplayName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFavoriteMidsForChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFriendMids(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGroupMemberMids(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGroupsForChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getIdentityCredential(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getJoinedGroupIdsForChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMetaProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMid(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPrimaryClientForChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getProfileForChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSimpleChannelContacts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUserCountryForBilling(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUserCreateTime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUserIdentities(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUserLanguage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUserMidsWhoAddedMe(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isGroupMember(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isInContact(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerChannelCP(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeNotificationStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendMessageForChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendPinCodeOperation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateProfileAttributeForChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ChannelApplicationProvidedServiceProcessor(::std::shared_ptr<ChannelApplicationProvidedServiceIf> iface) :
    iface_(iface) {
    processMap_["activeBuddySubscriberCount"] = &ChannelApplicationProvidedServiceProcessor::process_activeBuddySubscriberCount;
    processMap_["addOperationForChannel"] = &ChannelApplicationProvidedServiceProcessor::process_addOperationForChannel;
    processMap_["displayBuddySubscriberCount"] = &ChannelApplicationProvidedServiceProcessor::process_displayBuddySubscriberCount;
    processMap_["findContactByUseridWithoutAbuseBlockForChannel"] = &ChannelApplicationProvidedServiceProcessor::process_findContactByUseridWithoutAbuseBlockForChannel;
    processMap_["getAllContactIdsForChannel"] = &ChannelApplicationProvidedServiceProcessor::process_getAllContactIdsForChannel;
    processMap_["getCompactContacts"] = &ChannelApplicationProvidedServiceProcessor::process_getCompactContacts;
    processMap_["getContactsForChannel"] = &ChannelApplicationProvidedServiceProcessor::process_getContactsForChannel;
    processMap_["getDisplayName"] = &ChannelApplicationProvidedServiceProcessor::process_getDisplayName;
    processMap_["getFavoriteMidsForChannel"] = &ChannelApplicationProvidedServiceProcessor::process_getFavoriteMidsForChannel;
    processMap_["getFriendMids"] = &ChannelApplicationProvidedServiceProcessor::process_getFriendMids;
    processMap_["getGroupMemberMids"] = &ChannelApplicationProvidedServiceProcessor::process_getGroupMemberMids;
    processMap_["getGroupsForChannel"] = &ChannelApplicationProvidedServiceProcessor::process_getGroupsForChannel;
    processMap_["getIdentityCredential"] = &ChannelApplicationProvidedServiceProcessor::process_getIdentityCredential;
    processMap_["getJoinedGroupIdsForChannel"] = &ChannelApplicationProvidedServiceProcessor::process_getJoinedGroupIdsForChannel;
    processMap_["getMetaProfile"] = &ChannelApplicationProvidedServiceProcessor::process_getMetaProfile;
    processMap_["getMid"] = &ChannelApplicationProvidedServiceProcessor::process_getMid;
    processMap_["getPrimaryClientForChannel"] = &ChannelApplicationProvidedServiceProcessor::process_getPrimaryClientForChannel;
    processMap_["getProfileForChannel"] = &ChannelApplicationProvidedServiceProcessor::process_getProfileForChannel;
    processMap_["getSimpleChannelContacts"] = &ChannelApplicationProvidedServiceProcessor::process_getSimpleChannelContacts;
    processMap_["getUserCountryForBilling"] = &ChannelApplicationProvidedServiceProcessor::process_getUserCountryForBilling;
    processMap_["getUserCreateTime"] = &ChannelApplicationProvidedServiceProcessor::process_getUserCreateTime;
    processMap_["getUserIdentities"] = &ChannelApplicationProvidedServiceProcessor::process_getUserIdentities;
    processMap_["getUserLanguage"] = &ChannelApplicationProvidedServiceProcessor::process_getUserLanguage;
    processMap_["getUserMidsWhoAddedMe"] = &ChannelApplicationProvidedServiceProcessor::process_getUserMidsWhoAddedMe;
    processMap_["isGroupMember"] = &ChannelApplicationProvidedServiceProcessor::process_isGroupMember;
    processMap_["isInContact"] = &ChannelApplicationProvidedServiceProcessor::process_isInContact;
    processMap_["registerChannelCP"] = &ChannelApplicationProvidedServiceProcessor::process_registerChannelCP;
    processMap_["removeNotificationStatus"] = &ChannelApplicationProvidedServiceProcessor::process_removeNotificationStatus;
    processMap_["sendMessageForChannel"] = &ChannelApplicationProvidedServiceProcessor::process_sendMessageForChannel;
    processMap_["sendPinCodeOperation"] = &ChannelApplicationProvidedServiceProcessor::process_sendPinCodeOperation;
    processMap_["updateProfileAttributeForChannel"] = &ChannelApplicationProvidedServiceProcessor::process_updateProfileAttributeForChannel;
  }

  virtual ~ChannelApplicationProvidedServiceProcessor() {}
};

class ChannelApplicationProvidedServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ChannelApplicationProvidedServiceProcessorFactory(const ::std::shared_ptr< ChannelApplicationProvidedServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< ChannelApplicationProvidedServiceIfFactory > handlerFactory_;
};

class ChannelApplicationProvidedServiceMultiface : virtual public ChannelApplicationProvidedServiceIf {
 public:
  ChannelApplicationProvidedServiceMultiface(std::vector<std::shared_ptr<ChannelApplicationProvidedServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ChannelApplicationProvidedServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<ChannelApplicationProvidedServiceIf> > ifaces_;
  ChannelApplicationProvidedServiceMultiface() {}
  void add(::std::shared_ptr<ChannelApplicationProvidedServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int64_t activeBuddySubscriberCount() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->activeBuddySubscriberCount();
    }
    return ifaces_[i]->activeBuddySubscriberCount();
  }

  void addOperationForChannel(const OpType::type opType, const std::string& param1, const std::string& param2, const std::string& param3) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addOperationForChannel(opType, param1, param2, param3);
    }
    ifaces_[i]->addOperationForChannel(opType, param1, param2, param3);
  }

  int64_t displayBuddySubscriberCount() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->displayBuddySubscriberCount();
    }
    return ifaces_[i]->displayBuddySubscriberCount();
  }

  void findContactByUseridWithoutAbuseBlockForChannel(Contact& _return, const std::string& userid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findContactByUseridWithoutAbuseBlockForChannel(_return, userid);
    }
    ifaces_[i]->findContactByUseridWithoutAbuseBlockForChannel(_return, userid);
    return;
  }

  void getAllContactIdsForChannel(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllContactIdsForChannel(_return);
    }
    ifaces_[i]->getAllContactIdsForChannel(_return);
    return;
  }

  void getCompactContacts(std::vector<CompactContact> & _return, const int64_t lastModifiedTimestamp) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCompactContacts(_return, lastModifiedTimestamp);
    }
    ifaces_[i]->getCompactContacts(_return, lastModifiedTimestamp);
    return;
  }

  void getContactsForChannel(std::vector<Contact> & _return, const std::vector<std::string> & ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getContactsForChannel(_return, ids);
    }
    ifaces_[i]->getContactsForChannel(_return, ids);
    return;
  }

  void getDisplayName(std::string& _return, const std::string& mid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDisplayName(_return, mid);
    }
    ifaces_[i]->getDisplayName(_return, mid);
    return;
  }

  void getFavoriteMidsForChannel(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFavoriteMidsForChannel(_return);
    }
    ifaces_[i]->getFavoriteMidsForChannel(_return);
    return;
  }

  void getFriendMids(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFriendMids(_return);
    }
    ifaces_[i]->getFriendMids(_return);
    return;
  }

  void getGroupMemberMids(std::vector<std::string> & _return, const std::string& groupId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getGroupMemberMids(_return, groupId);
    }
    ifaces_[i]->getGroupMemberMids(_return, groupId);
    return;
  }

  void getGroupsForChannel(std::vector<Group> & _return, const std::vector<std::string> & groupIds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getGroupsForChannel(_return, groupIds);
    }
    ifaces_[i]->getGroupsForChannel(_return, groupIds);
    return;
  }

  void getIdentityCredential(IdentityCredential& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getIdentityCredential(_return);
    }
    ifaces_[i]->getIdentityCredential(_return);
    return;
  }

  void getJoinedGroupIdsForChannel(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getJoinedGroupIdsForChannel(_return);
    }
    ifaces_[i]->getJoinedGroupIdsForChannel(_return);
    return;
  }

  void getMetaProfile(MetaProfile& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMetaProfile(_return);
    }
    ifaces_[i]->getMetaProfile(_return);
    return;
  }

  void getMid(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMid(_return);
    }
    ifaces_[i]->getMid(_return);
    return;
  }

  void getPrimaryClientForChannel(SimpleChannelClient& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPrimaryClientForChannel(_return);
    }
    ifaces_[i]->getPrimaryClientForChannel(_return);
    return;
  }

  void getProfileForChannel(Profile& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getProfileForChannel(_return);
    }
    ifaces_[i]->getProfileForChannel(_return);
    return;
  }

  void getSimpleChannelContacts(std::vector<SimpleChannelContact> & _return, const std::vector<std::string> & ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSimpleChannelContacts(_return, ids);
    }
    ifaces_[i]->getSimpleChannelContacts(_return, ids);
    return;
  }

  void getUserCountryForBilling(std::string& _return, const std::string& country, const std::string& remoteIp) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUserCountryForBilling(_return, country, remoteIp);
    }
    ifaces_[i]->getUserCountryForBilling(_return, country, remoteIp);
    return;
  }

  int64_t getUserCreateTime() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUserCreateTime();
    }
    return ifaces_[i]->getUserCreateTime();
  }

  void getUserIdentities(std::map<RegistrationType::type, std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUserIdentities(_return);
    }
    ifaces_[i]->getUserIdentities(_return);
    return;
  }

  void getUserLanguage(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUserLanguage(_return);
    }
    ifaces_[i]->getUserLanguage(_return);
    return;
  }

  void getUserMidsWhoAddedMe(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUserMidsWhoAddedMe(_return);
    }
    ifaces_[i]->getUserMidsWhoAddedMe(_return);
    return;
  }

  bool isGroupMember(const std::string& groupId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isGroupMember(groupId);
    }
    return ifaces_[i]->isGroupMember(groupId);
  }

  bool isInContact(const std::string& mid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isInContact(mid);
    }
    return ifaces_[i]->isInContact(mid);
  }

  void registerChannelCP(std::string& _return, const std::string& cpId, const std::string& registerPassword) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerChannelCP(_return, cpId, registerPassword);
    }
    ifaces_[i]->registerChannelCP(_return, cpId, registerPassword);
    return;
  }

  void removeNotificationStatus(const NotificationStatus::type notificationStatus) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeNotificationStatus(notificationStatus);
    }
    ifaces_[i]->removeNotificationStatus(notificationStatus);
  }

  void sendMessageForChannel(Message& _return, const Message& message) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendMessageForChannel(_return, message);
    }
    ifaces_[i]->sendMessageForChannel(_return, message);
    return;
  }

  void sendPinCodeOperation(const std::string& verifier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendPinCodeOperation(verifier);
    }
    ifaces_[i]->sendPinCodeOperation(verifier);
  }

  void updateProfileAttributeForChannel(const ProfileAttribute::type profileAttribute, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateProfileAttributeForChannel(profileAttribute, value);
    }
    ifaces_[i]->updateProfileAttributeForChannel(profileAttribute, value);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ChannelApplicationProvidedServiceConcurrentClient : virtual public ChannelApplicationProvidedServiceIf {
 public:
  ChannelApplicationProvidedServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  ChannelApplicationProvidedServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t activeBuddySubscriberCount();
  int32_t send_activeBuddySubscriberCount();
  int64_t recv_activeBuddySubscriberCount(const int32_t seqid);
  void addOperationForChannel(const OpType::type opType, const std::string& param1, const std::string& param2, const std::string& param3);
  int32_t send_addOperationForChannel(const OpType::type opType, const std::string& param1, const std::string& param2, const std::string& param3);
  void recv_addOperationForChannel(const int32_t seqid);
  int64_t displayBuddySubscriberCount();
  int32_t send_displayBuddySubscriberCount();
  int64_t recv_displayBuddySubscriberCount(const int32_t seqid);
  void findContactByUseridWithoutAbuseBlockForChannel(Contact& _return, const std::string& userid);
  int32_t send_findContactByUseridWithoutAbuseBlockForChannel(const std::string& userid);
  void recv_findContactByUseridWithoutAbuseBlockForChannel(Contact& _return, const int32_t seqid);
  void getAllContactIdsForChannel(std::vector<std::string> & _return);
  int32_t send_getAllContactIdsForChannel();
  void recv_getAllContactIdsForChannel(std::vector<std::string> & _return, const int32_t seqid);
  void getCompactContacts(std::vector<CompactContact> & _return, const int64_t lastModifiedTimestamp);
  int32_t send_getCompactContacts(const int64_t lastModifiedTimestamp);
  void recv_getCompactContacts(std::vector<CompactContact> & _return, const int32_t seqid);
  void getContactsForChannel(std::vector<Contact> & _return, const std::vector<std::string> & ids);
  int32_t send_getContactsForChannel(const std::vector<std::string> & ids);
  void recv_getContactsForChannel(std::vector<Contact> & _return, const int32_t seqid);
  void getDisplayName(std::string& _return, const std::string& mid);
  int32_t send_getDisplayName(const std::string& mid);
  void recv_getDisplayName(std::string& _return, const int32_t seqid);
  void getFavoriteMidsForChannel(std::vector<std::string> & _return);
  int32_t send_getFavoriteMidsForChannel();
  void recv_getFavoriteMidsForChannel(std::vector<std::string> & _return, const int32_t seqid);
  void getFriendMids(std::vector<std::string> & _return);
  int32_t send_getFriendMids();
  void recv_getFriendMids(std::vector<std::string> & _return, const int32_t seqid);
  void getGroupMemberMids(std::vector<std::string> & _return, const std::string& groupId);
  int32_t send_getGroupMemberMids(const std::string& groupId);
  void recv_getGroupMemberMids(std::vector<std::string> & _return, const int32_t seqid);
  void getGroupsForChannel(std::vector<Group> & _return, const std::vector<std::string> & groupIds);
  int32_t send_getGroupsForChannel(const std::vector<std::string> & groupIds);
  void recv_getGroupsForChannel(std::vector<Group> & _return, const int32_t seqid);
  void getIdentityCredential(IdentityCredential& _return);
  int32_t send_getIdentityCredential();
  void recv_getIdentityCredential(IdentityCredential& _return, const int32_t seqid);
  void getJoinedGroupIdsForChannel(std::vector<std::string> & _return);
  int32_t send_getJoinedGroupIdsForChannel();
  void recv_getJoinedGroupIdsForChannel(std::vector<std::string> & _return, const int32_t seqid);
  void getMetaProfile(MetaProfile& _return);
  int32_t send_getMetaProfile();
  void recv_getMetaProfile(MetaProfile& _return, const int32_t seqid);
  void getMid(std::string& _return);
  int32_t send_getMid();
  void recv_getMid(std::string& _return, const int32_t seqid);
  void getPrimaryClientForChannel(SimpleChannelClient& _return);
  int32_t send_getPrimaryClientForChannel();
  void recv_getPrimaryClientForChannel(SimpleChannelClient& _return, const int32_t seqid);
  void getProfileForChannel(Profile& _return);
  int32_t send_getProfileForChannel();
  void recv_getProfileForChannel(Profile& _return, const int32_t seqid);
  void getSimpleChannelContacts(std::vector<SimpleChannelContact> & _return, const std::vector<std::string> & ids);
  int32_t send_getSimpleChannelContacts(const std::vector<std::string> & ids);
  void recv_getSimpleChannelContacts(std::vector<SimpleChannelContact> & _return, const int32_t seqid);
  void getUserCountryForBilling(std::string& _return, const std::string& country, const std::string& remoteIp);
  int32_t send_getUserCountryForBilling(const std::string& country, const std::string& remoteIp);
  void recv_getUserCountryForBilling(std::string& _return, const int32_t seqid);
  int64_t getUserCreateTime();
  int32_t send_getUserCreateTime();
  int64_t recv_getUserCreateTime(const int32_t seqid);
  void getUserIdentities(std::map<RegistrationType::type, std::string> & _return);
  int32_t send_getUserIdentities();
  void recv_getUserIdentities(std::map<RegistrationType::type, std::string> & _return, const int32_t seqid);
  void getUserLanguage(std::string& _return);
  int32_t send_getUserLanguage();
  void recv_getUserLanguage(std::string& _return, const int32_t seqid);
  void getUserMidsWhoAddedMe(std::vector<std::string> & _return);
  int32_t send_getUserMidsWhoAddedMe();
  void recv_getUserMidsWhoAddedMe(std::vector<std::string> & _return, const int32_t seqid);
  bool isGroupMember(const std::string& groupId);
  int32_t send_isGroupMember(const std::string& groupId);
  bool recv_isGroupMember(const int32_t seqid);
  bool isInContact(const std::string& mid);
  int32_t send_isInContact(const std::string& mid);
  bool recv_isInContact(const int32_t seqid);
  void registerChannelCP(std::string& _return, const std::string& cpId, const std::string& registerPassword);
  int32_t send_registerChannelCP(const std::string& cpId, const std::string& registerPassword);
  void recv_registerChannelCP(std::string& _return, const int32_t seqid);
  void removeNotificationStatus(const NotificationStatus::type notificationStatus);
  int32_t send_removeNotificationStatus(const NotificationStatus::type notificationStatus);
  void recv_removeNotificationStatus(const int32_t seqid);
  void sendMessageForChannel(Message& _return, const Message& message);
  int32_t send_sendMessageForChannel(const Message& message);
  void recv_sendMessageForChannel(Message& _return, const int32_t seqid);
  void sendPinCodeOperation(const std::string& verifier);
  int32_t send_sendPinCodeOperation(const std::string& verifier);
  void recv_sendPinCodeOperation(const int32_t seqid);
  void updateProfileAttributeForChannel(const ProfileAttribute::type profileAttribute, const std::string& value);
  int32_t send_updateProfileAttributeForChannel(const ProfileAttribute::type profileAttribute, const std::string& value);
  void recv_updateProfileAttributeForChannel(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
