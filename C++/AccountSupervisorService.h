/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AccountSupervisorService_H
#define AccountSupervisorService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "line_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class AccountSupervisorServiceIf {
 public:
  virtual ~AccountSupervisorServiceIf() {}
  virtual void getRSAKey(RSAKey& _return) = 0;
  virtual void notifyEmailConfirmationResult(const std::map<std::string, std::string> & parameterMap) = 0;
  virtual void registerVirtualAccount(std::string& _return, const std::string& locale, const std::string& encryptedVirtualUserId, const std::string& encryptedPassword) = 0;
  virtual void requestVirtualAccountPasswordChange(const std::string& virtualMid, const std::string& encryptedVirtualUserId, const std::string& encryptedOldPassword, const std::string& encryptedNewPassword) = 0;
  virtual void requestVirtualAccountPasswordSet(const std::string& virtualMid, const std::string& encryptedVirtualUserId, const std::string& encryptedNewPassword) = 0;
  virtual void unregisterVirtualAccount(const std::string& virtualMid) = 0;
};

class AccountSupervisorServiceIfFactory {
 public:
  typedef AccountSupervisorServiceIf Handler;

  virtual ~AccountSupervisorServiceIfFactory() {}

  virtual AccountSupervisorServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AccountSupervisorServiceIf* /* handler */) = 0;
};

class AccountSupervisorServiceIfSingletonFactory : virtual public AccountSupervisorServiceIfFactory {
 public:
  AccountSupervisorServiceIfSingletonFactory(const ::std::shared_ptr<AccountSupervisorServiceIf>& iface) : iface_(iface) {}
  virtual ~AccountSupervisorServiceIfSingletonFactory() {}

  virtual AccountSupervisorServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AccountSupervisorServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<AccountSupervisorServiceIf> iface_;
};

class AccountSupervisorServiceNull : virtual public AccountSupervisorServiceIf {
 public:
  virtual ~AccountSupervisorServiceNull() {}
  void getRSAKey(RSAKey& /* _return */) {
    return;
  }
  void notifyEmailConfirmationResult(const std::map<std::string, std::string> & /* parameterMap */) {
    return;
  }
  void registerVirtualAccount(std::string& /* _return */, const std::string& /* locale */, const std::string& /* encryptedVirtualUserId */, const std::string& /* encryptedPassword */) {
    return;
  }
  void requestVirtualAccountPasswordChange(const std::string& /* virtualMid */, const std::string& /* encryptedVirtualUserId */, const std::string& /* encryptedOldPassword */, const std::string& /* encryptedNewPassword */) {
    return;
  }
  void requestVirtualAccountPasswordSet(const std::string& /* virtualMid */, const std::string& /* encryptedVirtualUserId */, const std::string& /* encryptedNewPassword */) {
    return;
  }
  void unregisterVirtualAccount(const std::string& /* virtualMid */) {
    return;
  }
};


class AccountSupervisorService_getRSAKey_args {
 public:

  AccountSupervisorService_getRSAKey_args(const AccountSupervisorService_getRSAKey_args&);
  AccountSupervisorService_getRSAKey_args& operator=(const AccountSupervisorService_getRSAKey_args&);
  AccountSupervisorService_getRSAKey_args() {
  }

  virtual ~AccountSupervisorService_getRSAKey_args() noexcept;

  bool operator == (const AccountSupervisorService_getRSAKey_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AccountSupervisorService_getRSAKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccountSupervisorService_getRSAKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccountSupervisorService_getRSAKey_pargs {
 public:


  virtual ~AccountSupervisorService_getRSAKey_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccountSupervisorService_getRSAKey_result__isset {
  _AccountSupervisorService_getRSAKey_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _AccountSupervisorService_getRSAKey_result__isset;

class AccountSupervisorService_getRSAKey_result {
 public:

  AccountSupervisorService_getRSAKey_result(const AccountSupervisorService_getRSAKey_result&);
  AccountSupervisorService_getRSAKey_result& operator=(const AccountSupervisorService_getRSAKey_result&);
  AccountSupervisorService_getRSAKey_result() {
  }

  virtual ~AccountSupervisorService_getRSAKey_result() noexcept;
  RSAKey success;
  TalkException e;

  _AccountSupervisorService_getRSAKey_result__isset __isset;

  void __set_success(const RSAKey& val);

  void __set_e(const TalkException& val);

  bool operator == (const AccountSupervisorService_getRSAKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const AccountSupervisorService_getRSAKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccountSupervisorService_getRSAKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccountSupervisorService_getRSAKey_presult__isset {
  _AccountSupervisorService_getRSAKey_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _AccountSupervisorService_getRSAKey_presult__isset;

class AccountSupervisorService_getRSAKey_presult {
 public:


  virtual ~AccountSupervisorService_getRSAKey_presult() noexcept;
  RSAKey* success;
  TalkException e;

  _AccountSupervisorService_getRSAKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccountSupervisorService_notifyEmailConfirmationResult_args__isset {
  _AccountSupervisorService_notifyEmailConfirmationResult_args__isset() : parameterMap(false) {}
  bool parameterMap :1;
} _AccountSupervisorService_notifyEmailConfirmationResult_args__isset;

class AccountSupervisorService_notifyEmailConfirmationResult_args {
 public:

  AccountSupervisorService_notifyEmailConfirmationResult_args(const AccountSupervisorService_notifyEmailConfirmationResult_args&);
  AccountSupervisorService_notifyEmailConfirmationResult_args& operator=(const AccountSupervisorService_notifyEmailConfirmationResult_args&);
  AccountSupervisorService_notifyEmailConfirmationResult_args() {
  }

  virtual ~AccountSupervisorService_notifyEmailConfirmationResult_args() noexcept;
  std::map<std::string, std::string>  parameterMap;

  _AccountSupervisorService_notifyEmailConfirmationResult_args__isset __isset;

  void __set_parameterMap(const std::map<std::string, std::string> & val);

  bool operator == (const AccountSupervisorService_notifyEmailConfirmationResult_args & rhs) const
  {
    if (!(parameterMap == rhs.parameterMap))
      return false;
    return true;
  }
  bool operator != (const AccountSupervisorService_notifyEmailConfirmationResult_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccountSupervisorService_notifyEmailConfirmationResult_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccountSupervisorService_notifyEmailConfirmationResult_pargs {
 public:


  virtual ~AccountSupervisorService_notifyEmailConfirmationResult_pargs() noexcept;
  const std::map<std::string, std::string> * parameterMap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccountSupervisorService_notifyEmailConfirmationResult_result__isset {
  _AccountSupervisorService_notifyEmailConfirmationResult_result__isset() : e(false) {}
  bool e :1;
} _AccountSupervisorService_notifyEmailConfirmationResult_result__isset;

class AccountSupervisorService_notifyEmailConfirmationResult_result {
 public:

  AccountSupervisorService_notifyEmailConfirmationResult_result(const AccountSupervisorService_notifyEmailConfirmationResult_result&);
  AccountSupervisorService_notifyEmailConfirmationResult_result& operator=(const AccountSupervisorService_notifyEmailConfirmationResult_result&);
  AccountSupervisorService_notifyEmailConfirmationResult_result() {
  }

  virtual ~AccountSupervisorService_notifyEmailConfirmationResult_result() noexcept;
  TalkException e;

  _AccountSupervisorService_notifyEmailConfirmationResult_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const AccountSupervisorService_notifyEmailConfirmationResult_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const AccountSupervisorService_notifyEmailConfirmationResult_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccountSupervisorService_notifyEmailConfirmationResult_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccountSupervisorService_notifyEmailConfirmationResult_presult__isset {
  _AccountSupervisorService_notifyEmailConfirmationResult_presult__isset() : e(false) {}
  bool e :1;
} _AccountSupervisorService_notifyEmailConfirmationResult_presult__isset;

class AccountSupervisorService_notifyEmailConfirmationResult_presult {
 public:


  virtual ~AccountSupervisorService_notifyEmailConfirmationResult_presult() noexcept;
  TalkException e;

  _AccountSupervisorService_notifyEmailConfirmationResult_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccountSupervisorService_registerVirtualAccount_args__isset {
  _AccountSupervisorService_registerVirtualAccount_args__isset() : locale(false), encryptedVirtualUserId(false), encryptedPassword(false) {}
  bool locale :1;
  bool encryptedVirtualUserId :1;
  bool encryptedPassword :1;
} _AccountSupervisorService_registerVirtualAccount_args__isset;

class AccountSupervisorService_registerVirtualAccount_args {
 public:

  AccountSupervisorService_registerVirtualAccount_args(const AccountSupervisorService_registerVirtualAccount_args&);
  AccountSupervisorService_registerVirtualAccount_args& operator=(const AccountSupervisorService_registerVirtualAccount_args&);
  AccountSupervisorService_registerVirtualAccount_args() : locale(), encryptedVirtualUserId(), encryptedPassword() {
  }

  virtual ~AccountSupervisorService_registerVirtualAccount_args() noexcept;
  std::string locale;
  std::string encryptedVirtualUserId;
  std::string encryptedPassword;

  _AccountSupervisorService_registerVirtualAccount_args__isset __isset;

  void __set_locale(const std::string& val);

  void __set_encryptedVirtualUserId(const std::string& val);

  void __set_encryptedPassword(const std::string& val);

  bool operator == (const AccountSupervisorService_registerVirtualAccount_args & rhs) const
  {
    if (!(locale == rhs.locale))
      return false;
    if (!(encryptedVirtualUserId == rhs.encryptedVirtualUserId))
      return false;
    if (!(encryptedPassword == rhs.encryptedPassword))
      return false;
    return true;
  }
  bool operator != (const AccountSupervisorService_registerVirtualAccount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccountSupervisorService_registerVirtualAccount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccountSupervisorService_registerVirtualAccount_pargs {
 public:


  virtual ~AccountSupervisorService_registerVirtualAccount_pargs() noexcept;
  const std::string* locale;
  const std::string* encryptedVirtualUserId;
  const std::string* encryptedPassword;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccountSupervisorService_registerVirtualAccount_result__isset {
  _AccountSupervisorService_registerVirtualAccount_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _AccountSupervisorService_registerVirtualAccount_result__isset;

class AccountSupervisorService_registerVirtualAccount_result {
 public:

  AccountSupervisorService_registerVirtualAccount_result(const AccountSupervisorService_registerVirtualAccount_result&);
  AccountSupervisorService_registerVirtualAccount_result& operator=(const AccountSupervisorService_registerVirtualAccount_result&);
  AccountSupervisorService_registerVirtualAccount_result() : success() {
  }

  virtual ~AccountSupervisorService_registerVirtualAccount_result() noexcept;
  std::string success;
  TalkException e;

  _AccountSupervisorService_registerVirtualAccount_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const AccountSupervisorService_registerVirtualAccount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const AccountSupervisorService_registerVirtualAccount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccountSupervisorService_registerVirtualAccount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccountSupervisorService_registerVirtualAccount_presult__isset {
  _AccountSupervisorService_registerVirtualAccount_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _AccountSupervisorService_registerVirtualAccount_presult__isset;

class AccountSupervisorService_registerVirtualAccount_presult {
 public:


  virtual ~AccountSupervisorService_registerVirtualAccount_presult() noexcept;
  std::string* success;
  TalkException e;

  _AccountSupervisorService_registerVirtualAccount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccountSupervisorService_requestVirtualAccountPasswordChange_args__isset {
  _AccountSupervisorService_requestVirtualAccountPasswordChange_args__isset() : virtualMid(false), encryptedVirtualUserId(false), encryptedOldPassword(false), encryptedNewPassword(false) {}
  bool virtualMid :1;
  bool encryptedVirtualUserId :1;
  bool encryptedOldPassword :1;
  bool encryptedNewPassword :1;
} _AccountSupervisorService_requestVirtualAccountPasswordChange_args__isset;

class AccountSupervisorService_requestVirtualAccountPasswordChange_args {
 public:

  AccountSupervisorService_requestVirtualAccountPasswordChange_args(const AccountSupervisorService_requestVirtualAccountPasswordChange_args&);
  AccountSupervisorService_requestVirtualAccountPasswordChange_args& operator=(const AccountSupervisorService_requestVirtualAccountPasswordChange_args&);
  AccountSupervisorService_requestVirtualAccountPasswordChange_args() : virtualMid(), encryptedVirtualUserId(), encryptedOldPassword(), encryptedNewPassword() {
  }

  virtual ~AccountSupervisorService_requestVirtualAccountPasswordChange_args() noexcept;
  std::string virtualMid;
  std::string encryptedVirtualUserId;
  std::string encryptedOldPassword;
  std::string encryptedNewPassword;

  _AccountSupervisorService_requestVirtualAccountPasswordChange_args__isset __isset;

  void __set_virtualMid(const std::string& val);

  void __set_encryptedVirtualUserId(const std::string& val);

  void __set_encryptedOldPassword(const std::string& val);

  void __set_encryptedNewPassword(const std::string& val);

  bool operator == (const AccountSupervisorService_requestVirtualAccountPasswordChange_args & rhs) const
  {
    if (!(virtualMid == rhs.virtualMid))
      return false;
    if (!(encryptedVirtualUserId == rhs.encryptedVirtualUserId))
      return false;
    if (!(encryptedOldPassword == rhs.encryptedOldPassword))
      return false;
    if (!(encryptedNewPassword == rhs.encryptedNewPassword))
      return false;
    return true;
  }
  bool operator != (const AccountSupervisorService_requestVirtualAccountPasswordChange_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccountSupervisorService_requestVirtualAccountPasswordChange_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccountSupervisorService_requestVirtualAccountPasswordChange_pargs {
 public:


  virtual ~AccountSupervisorService_requestVirtualAccountPasswordChange_pargs() noexcept;
  const std::string* virtualMid;
  const std::string* encryptedVirtualUserId;
  const std::string* encryptedOldPassword;
  const std::string* encryptedNewPassword;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccountSupervisorService_requestVirtualAccountPasswordChange_result__isset {
  _AccountSupervisorService_requestVirtualAccountPasswordChange_result__isset() : e(false) {}
  bool e :1;
} _AccountSupervisorService_requestVirtualAccountPasswordChange_result__isset;

class AccountSupervisorService_requestVirtualAccountPasswordChange_result {
 public:

  AccountSupervisorService_requestVirtualAccountPasswordChange_result(const AccountSupervisorService_requestVirtualAccountPasswordChange_result&);
  AccountSupervisorService_requestVirtualAccountPasswordChange_result& operator=(const AccountSupervisorService_requestVirtualAccountPasswordChange_result&);
  AccountSupervisorService_requestVirtualAccountPasswordChange_result() {
  }

  virtual ~AccountSupervisorService_requestVirtualAccountPasswordChange_result() noexcept;
  TalkException e;

  _AccountSupervisorService_requestVirtualAccountPasswordChange_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const AccountSupervisorService_requestVirtualAccountPasswordChange_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const AccountSupervisorService_requestVirtualAccountPasswordChange_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccountSupervisorService_requestVirtualAccountPasswordChange_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccountSupervisorService_requestVirtualAccountPasswordChange_presult__isset {
  _AccountSupervisorService_requestVirtualAccountPasswordChange_presult__isset() : e(false) {}
  bool e :1;
} _AccountSupervisorService_requestVirtualAccountPasswordChange_presult__isset;

class AccountSupervisorService_requestVirtualAccountPasswordChange_presult {
 public:


  virtual ~AccountSupervisorService_requestVirtualAccountPasswordChange_presult() noexcept;
  TalkException e;

  _AccountSupervisorService_requestVirtualAccountPasswordChange_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccountSupervisorService_requestVirtualAccountPasswordSet_args__isset {
  _AccountSupervisorService_requestVirtualAccountPasswordSet_args__isset() : virtualMid(false), encryptedVirtualUserId(false), encryptedNewPassword(false) {}
  bool virtualMid :1;
  bool encryptedVirtualUserId :1;
  bool encryptedNewPassword :1;
} _AccountSupervisorService_requestVirtualAccountPasswordSet_args__isset;

class AccountSupervisorService_requestVirtualAccountPasswordSet_args {
 public:

  AccountSupervisorService_requestVirtualAccountPasswordSet_args(const AccountSupervisorService_requestVirtualAccountPasswordSet_args&);
  AccountSupervisorService_requestVirtualAccountPasswordSet_args& operator=(const AccountSupervisorService_requestVirtualAccountPasswordSet_args&);
  AccountSupervisorService_requestVirtualAccountPasswordSet_args() : virtualMid(), encryptedVirtualUserId(), encryptedNewPassword() {
  }

  virtual ~AccountSupervisorService_requestVirtualAccountPasswordSet_args() noexcept;
  std::string virtualMid;
  std::string encryptedVirtualUserId;
  std::string encryptedNewPassword;

  _AccountSupervisorService_requestVirtualAccountPasswordSet_args__isset __isset;

  void __set_virtualMid(const std::string& val);

  void __set_encryptedVirtualUserId(const std::string& val);

  void __set_encryptedNewPassword(const std::string& val);

  bool operator == (const AccountSupervisorService_requestVirtualAccountPasswordSet_args & rhs) const
  {
    if (!(virtualMid == rhs.virtualMid))
      return false;
    if (!(encryptedVirtualUserId == rhs.encryptedVirtualUserId))
      return false;
    if (!(encryptedNewPassword == rhs.encryptedNewPassword))
      return false;
    return true;
  }
  bool operator != (const AccountSupervisorService_requestVirtualAccountPasswordSet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccountSupervisorService_requestVirtualAccountPasswordSet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccountSupervisorService_requestVirtualAccountPasswordSet_pargs {
 public:


  virtual ~AccountSupervisorService_requestVirtualAccountPasswordSet_pargs() noexcept;
  const std::string* virtualMid;
  const std::string* encryptedVirtualUserId;
  const std::string* encryptedNewPassword;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccountSupervisorService_requestVirtualAccountPasswordSet_result__isset {
  _AccountSupervisorService_requestVirtualAccountPasswordSet_result__isset() : e(false) {}
  bool e :1;
} _AccountSupervisorService_requestVirtualAccountPasswordSet_result__isset;

class AccountSupervisorService_requestVirtualAccountPasswordSet_result {
 public:

  AccountSupervisorService_requestVirtualAccountPasswordSet_result(const AccountSupervisorService_requestVirtualAccountPasswordSet_result&);
  AccountSupervisorService_requestVirtualAccountPasswordSet_result& operator=(const AccountSupervisorService_requestVirtualAccountPasswordSet_result&);
  AccountSupervisorService_requestVirtualAccountPasswordSet_result() {
  }

  virtual ~AccountSupervisorService_requestVirtualAccountPasswordSet_result() noexcept;
  TalkException e;

  _AccountSupervisorService_requestVirtualAccountPasswordSet_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const AccountSupervisorService_requestVirtualAccountPasswordSet_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const AccountSupervisorService_requestVirtualAccountPasswordSet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccountSupervisorService_requestVirtualAccountPasswordSet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccountSupervisorService_requestVirtualAccountPasswordSet_presult__isset {
  _AccountSupervisorService_requestVirtualAccountPasswordSet_presult__isset() : e(false) {}
  bool e :1;
} _AccountSupervisorService_requestVirtualAccountPasswordSet_presult__isset;

class AccountSupervisorService_requestVirtualAccountPasswordSet_presult {
 public:


  virtual ~AccountSupervisorService_requestVirtualAccountPasswordSet_presult() noexcept;
  TalkException e;

  _AccountSupervisorService_requestVirtualAccountPasswordSet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AccountSupervisorService_unregisterVirtualAccount_args__isset {
  _AccountSupervisorService_unregisterVirtualAccount_args__isset() : virtualMid(false) {}
  bool virtualMid :1;
} _AccountSupervisorService_unregisterVirtualAccount_args__isset;

class AccountSupervisorService_unregisterVirtualAccount_args {
 public:

  AccountSupervisorService_unregisterVirtualAccount_args(const AccountSupervisorService_unregisterVirtualAccount_args&);
  AccountSupervisorService_unregisterVirtualAccount_args& operator=(const AccountSupervisorService_unregisterVirtualAccount_args&);
  AccountSupervisorService_unregisterVirtualAccount_args() : virtualMid() {
  }

  virtual ~AccountSupervisorService_unregisterVirtualAccount_args() noexcept;
  std::string virtualMid;

  _AccountSupervisorService_unregisterVirtualAccount_args__isset __isset;

  void __set_virtualMid(const std::string& val);

  bool operator == (const AccountSupervisorService_unregisterVirtualAccount_args & rhs) const
  {
    if (!(virtualMid == rhs.virtualMid))
      return false;
    return true;
  }
  bool operator != (const AccountSupervisorService_unregisterVirtualAccount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccountSupervisorService_unregisterVirtualAccount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AccountSupervisorService_unregisterVirtualAccount_pargs {
 public:


  virtual ~AccountSupervisorService_unregisterVirtualAccount_pargs() noexcept;
  const std::string* virtualMid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccountSupervisorService_unregisterVirtualAccount_result__isset {
  _AccountSupervisorService_unregisterVirtualAccount_result__isset() : e(false) {}
  bool e :1;
} _AccountSupervisorService_unregisterVirtualAccount_result__isset;

class AccountSupervisorService_unregisterVirtualAccount_result {
 public:

  AccountSupervisorService_unregisterVirtualAccount_result(const AccountSupervisorService_unregisterVirtualAccount_result&);
  AccountSupervisorService_unregisterVirtualAccount_result& operator=(const AccountSupervisorService_unregisterVirtualAccount_result&);
  AccountSupervisorService_unregisterVirtualAccount_result() {
  }

  virtual ~AccountSupervisorService_unregisterVirtualAccount_result() noexcept;
  TalkException e;

  _AccountSupervisorService_unregisterVirtualAccount_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const AccountSupervisorService_unregisterVirtualAccount_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const AccountSupervisorService_unregisterVirtualAccount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccountSupervisorService_unregisterVirtualAccount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccountSupervisorService_unregisterVirtualAccount_presult__isset {
  _AccountSupervisorService_unregisterVirtualAccount_presult__isset() : e(false) {}
  bool e :1;
} _AccountSupervisorService_unregisterVirtualAccount_presult__isset;

class AccountSupervisorService_unregisterVirtualAccount_presult {
 public:


  virtual ~AccountSupervisorService_unregisterVirtualAccount_presult() noexcept;
  TalkException e;

  _AccountSupervisorService_unregisterVirtualAccount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AccountSupervisorServiceClient : virtual public AccountSupervisorServiceIf {
 public:
  AccountSupervisorServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AccountSupervisorServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getRSAKey(RSAKey& _return);
  void send_getRSAKey();
  void recv_getRSAKey(RSAKey& _return);
  void notifyEmailConfirmationResult(const std::map<std::string, std::string> & parameterMap);
  void send_notifyEmailConfirmationResult(const std::map<std::string, std::string> & parameterMap);
  void recv_notifyEmailConfirmationResult();
  void registerVirtualAccount(std::string& _return, const std::string& locale, const std::string& encryptedVirtualUserId, const std::string& encryptedPassword);
  void send_registerVirtualAccount(const std::string& locale, const std::string& encryptedVirtualUserId, const std::string& encryptedPassword);
  void recv_registerVirtualAccount(std::string& _return);
  void requestVirtualAccountPasswordChange(const std::string& virtualMid, const std::string& encryptedVirtualUserId, const std::string& encryptedOldPassword, const std::string& encryptedNewPassword);
  void send_requestVirtualAccountPasswordChange(const std::string& virtualMid, const std::string& encryptedVirtualUserId, const std::string& encryptedOldPassword, const std::string& encryptedNewPassword);
  void recv_requestVirtualAccountPasswordChange();
  void requestVirtualAccountPasswordSet(const std::string& virtualMid, const std::string& encryptedVirtualUserId, const std::string& encryptedNewPassword);
  void send_requestVirtualAccountPasswordSet(const std::string& virtualMid, const std::string& encryptedVirtualUserId, const std::string& encryptedNewPassword);
  void recv_requestVirtualAccountPasswordSet();
  void unregisterVirtualAccount(const std::string& virtualMid);
  void send_unregisterVirtualAccount(const std::string& virtualMid);
  void recv_unregisterVirtualAccount();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AccountSupervisorServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<AccountSupervisorServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AccountSupervisorServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getRSAKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_notifyEmailConfirmationResult(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerVirtualAccount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_requestVirtualAccountPasswordChange(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_requestVirtualAccountPasswordSet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unregisterVirtualAccount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AccountSupervisorServiceProcessor(::std::shared_ptr<AccountSupervisorServiceIf> iface) :
    iface_(iface) {
    processMap_["getRSAKey"] = &AccountSupervisorServiceProcessor::process_getRSAKey;
    processMap_["notifyEmailConfirmationResult"] = &AccountSupervisorServiceProcessor::process_notifyEmailConfirmationResult;
    processMap_["registerVirtualAccount"] = &AccountSupervisorServiceProcessor::process_registerVirtualAccount;
    processMap_["requestVirtualAccountPasswordChange"] = &AccountSupervisorServiceProcessor::process_requestVirtualAccountPasswordChange;
    processMap_["requestVirtualAccountPasswordSet"] = &AccountSupervisorServiceProcessor::process_requestVirtualAccountPasswordSet;
    processMap_["unregisterVirtualAccount"] = &AccountSupervisorServiceProcessor::process_unregisterVirtualAccount;
  }

  virtual ~AccountSupervisorServiceProcessor() {}
};

class AccountSupervisorServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AccountSupervisorServiceProcessorFactory(const ::std::shared_ptr< AccountSupervisorServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< AccountSupervisorServiceIfFactory > handlerFactory_;
};

class AccountSupervisorServiceMultiface : virtual public AccountSupervisorServiceIf {
 public:
  AccountSupervisorServiceMultiface(std::vector<std::shared_ptr<AccountSupervisorServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AccountSupervisorServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<AccountSupervisorServiceIf> > ifaces_;
  AccountSupervisorServiceMultiface() {}
  void add(::std::shared_ptr<AccountSupervisorServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getRSAKey(RSAKey& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRSAKey(_return);
    }
    ifaces_[i]->getRSAKey(_return);
    return;
  }

  void notifyEmailConfirmationResult(const std::map<std::string, std::string> & parameterMap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->notifyEmailConfirmationResult(parameterMap);
    }
    ifaces_[i]->notifyEmailConfirmationResult(parameterMap);
  }

  void registerVirtualAccount(std::string& _return, const std::string& locale, const std::string& encryptedVirtualUserId, const std::string& encryptedPassword) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerVirtualAccount(_return, locale, encryptedVirtualUserId, encryptedPassword);
    }
    ifaces_[i]->registerVirtualAccount(_return, locale, encryptedVirtualUserId, encryptedPassword);
    return;
  }

  void requestVirtualAccountPasswordChange(const std::string& virtualMid, const std::string& encryptedVirtualUserId, const std::string& encryptedOldPassword, const std::string& encryptedNewPassword) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->requestVirtualAccountPasswordChange(virtualMid, encryptedVirtualUserId, encryptedOldPassword, encryptedNewPassword);
    }
    ifaces_[i]->requestVirtualAccountPasswordChange(virtualMid, encryptedVirtualUserId, encryptedOldPassword, encryptedNewPassword);
  }

  void requestVirtualAccountPasswordSet(const std::string& virtualMid, const std::string& encryptedVirtualUserId, const std::string& encryptedNewPassword) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->requestVirtualAccountPasswordSet(virtualMid, encryptedVirtualUserId, encryptedNewPassword);
    }
    ifaces_[i]->requestVirtualAccountPasswordSet(virtualMid, encryptedVirtualUserId, encryptedNewPassword);
  }

  void unregisterVirtualAccount(const std::string& virtualMid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unregisterVirtualAccount(virtualMid);
    }
    ifaces_[i]->unregisterVirtualAccount(virtualMid);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class AccountSupervisorServiceConcurrentClient : virtual public AccountSupervisorServiceIf {
 public:
  AccountSupervisorServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  AccountSupervisorServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getRSAKey(RSAKey& _return);
  int32_t send_getRSAKey();
  void recv_getRSAKey(RSAKey& _return, const int32_t seqid);
  void notifyEmailConfirmationResult(const std::map<std::string, std::string> & parameterMap);
  int32_t send_notifyEmailConfirmationResult(const std::map<std::string, std::string> & parameterMap);
  void recv_notifyEmailConfirmationResult(const int32_t seqid);
  void registerVirtualAccount(std::string& _return, const std::string& locale, const std::string& encryptedVirtualUserId, const std::string& encryptedPassword);
  int32_t send_registerVirtualAccount(const std::string& locale, const std::string& encryptedVirtualUserId, const std::string& encryptedPassword);
  void recv_registerVirtualAccount(std::string& _return, const int32_t seqid);
  void requestVirtualAccountPasswordChange(const std::string& virtualMid, const std::string& encryptedVirtualUserId, const std::string& encryptedOldPassword, const std::string& encryptedNewPassword);
  int32_t send_requestVirtualAccountPasswordChange(const std::string& virtualMid, const std::string& encryptedVirtualUserId, const std::string& encryptedOldPassword, const std::string& encryptedNewPassword);
  void recv_requestVirtualAccountPasswordChange(const int32_t seqid);
  void requestVirtualAccountPasswordSet(const std::string& virtualMid, const std::string& encryptedVirtualUserId, const std::string& encryptedNewPassword);
  int32_t send_requestVirtualAccountPasswordSet(const std::string& virtualMid, const std::string& encryptedVirtualUserId, const std::string& encryptedNewPassword);
  void recv_requestVirtualAccountPasswordSet(const int32_t seqid);
  void unregisterVirtualAccount(const std::string& virtualMid);
  int32_t send_unregisterVirtualAccount(const std::string& virtualMid);
  void recv_unregisterVirtualAccount(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
