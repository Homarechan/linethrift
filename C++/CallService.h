/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CallService_H
#define CallService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "line_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class CallServiceIf {
 public:
  virtual ~CallServiceIf() {}
  virtual UserStatus::type getUserStatus(const std::string& mid) = 0;
  virtual void updateProfileAttributeForChannel(const ProfileAttribute::type profileAttribute, const std::string& value) = 0;
  virtual void updateExtendedProfileAttribute(const ExtendedProfileAttribute::type attr, const ExtendedProfile& extendedProfile) = 0;
  virtual void getAllSimpleChannelContacts(std::vector<SimpleChannelContact> & _return, const bool statusSticonFallbackDisabled) = 0;
  virtual void getUserIdentities(std::map<RegistrationType::type, std::string> & _return) = 0;
  virtual void markPaidCallAd(PaidCallDialing& _return, const std::string& dialedNumber, const std::string& language, const bool disableCallerId) = 0;
  virtual bool isGroupMember(const std::string& groupId) = 0;
  virtual void getPhoneInfoFromPhoneNumber(PhoneInfoForChannel& _return, const std::string& region, const std::string& phoneNumber) = 0;
  virtual void redeemPaidCallVoucher(PaidCallRedeemResult& _return, const std::string& serial, const std::string& language) = 0;
  virtual void getPreferredDisplayName(std::map<std::string, std::string> & _return, const std::vector<std::string> & mids) = 0;
  virtual void getContactsForChannel(std::vector<Contact> & _return, const std::vector<std::string> & ids) = 0;
  virtual void getCallCreditProducts(std::vector<CoinProductItem> & _return, const PaymentType::type appStoreCode, const PaymentPgType::type pgCode, const std::string& country, const std::string& language) = 0;
  virtual void getCompactContacts(std::vector<CompactContact> & _return, const int64_t lastModifiedTimestamp) = 0;
  virtual void notifyNotiCenterEvent(const NotiCenterEventData& event) = 0;
  virtual bool isInContact(const std::string& mid) = 0;
  virtual void lookupGroupMembers(std::vector<SimpleChannelContact> & _return, const std::string& groupId, const std::vector<std::string> & mids) = 0;
  virtual void getRoomInformation(Room& _return, const std::string& roomMid) = 0;
  virtual void getGroupCall(GroupCall& _return, const std::string& chatMid) = 0;
  virtual bool isAllowSecondaryDeviceLogin() = 0;
  virtual void getPrimaryClientForChannel(SimpleChannelClient& _return) = 0;
  virtual void createRoomWithBuddy(Room& _return, const int32_t reqSeq, const std::string& buddyMid, const std::vector<std::string> & contactIds) = 0;
  virtual void getDisplayName(std::string& _return, const std::string& mid) = 0;
  virtual void getPaidCallMetadata(PaidCallMetadataResult& _return, const std::string& language) = 0;
  virtual void getMid(std::string& _return) = 0;
  virtual void getUserCountryForBilling(std::string& _return, const std::string& country, const std::string& remoteIp) = 0;
  virtual void getFavoriteGroupIdsForChannel(std::vector<std::string> & _return) = 0;
  virtual void getPaidCallHistory(PaidCallHistoryResult& _return, const int64_t start, const int32_t size, const std::string& language) = 0;
  virtual void sendPinCodeOperation(const std::string& verifier) = 0;
  virtual void inviteIntoGroupCall(const std::string& chatMid, const std::vector<std::string> & memberMids, const GroupCallMediaType::type mediaType) = 0;
  virtual void getFriendMids(std::vector<std::string> & _return) = 0;
  virtual void getMetaProfile(MetaProfile& _return) = 0;
  virtual void sendMessageForChannel(Message& _return, const Message& message) = 0;
  virtual int64_t activeBuddySubscriberCount() = 0;
  virtual void getCallCreditPurchaseHistory(CoinHistoryResult& _return, const CoinHistoryCondition& request) = 0;
  virtual bool isRoomMember(const std::string& roomId) = 0;
  virtual void sendSystemOAMessage(Message& _return, const Message& message) = 0;
  virtual void acquirePaidCallRoute(PaidCallResponse& _return, const PaidCallType::type paidCallType, const std::string& dialedNumber, const std::string& language, const std::string& networkCode, const bool disableCallerId, const std::string& referer, const std::string& adSessionId) = 0;
  virtual void getGroupsForChannel(std::vector<Group> & _return, const std::vector<std::string> & groupIds) = 0;
  virtual int64_t getUserCreateTime() = 0;
  virtual void registerChannelCP(std::string& _return, const std::string& cpId, const std::string& registerPassword) = 0;
  virtual void reserveCallCreditPurchase(PaymentReservationResult& _return, const CoinPurchaseReservation& request) = 0;
  virtual void acquirePaidCallCurrencyExchangeRate(std::vector<PaidCallCurrencyExchangeRate> & _return, const std::string& language) = 0;
  virtual void getRoomMemberMidsForAppPlatform(std::vector<std::string> & _return, const std::string& roomId) = 0;
  virtual void getPaidCallBalanceList(std::vector<PaidCallBalance> & _return, const std::string& language) = 0;
  virtual void getPersonalInfos(std::map<PersonalInfo::type, std::string> & _return, const std::set<PersonalInfo::type> & requiredPersonalInfos) = 0;
  virtual void getPrimaryClientsForChannel(std::vector<SimpleChannelClient> & _return, const std::vector<std::string> & userMids) = 0;
  virtual void addBuddyToContact(ContactTransition& _return, const std::string& buddyMid) = 0;
  virtual void getGroupMemberMidsForAppPlatform(std::vector<std::string> & _return, const std::string& groupId) = 0;
  virtual void getUserLanguage(std::string& _return) = 0;
  virtual void lookupPaidCall(PaidCallResponse& _return, const std::string& dialedNumber, const std::string& language, const std::string& referer) = 0;
  virtual void getExtendedProfile(ExtendedProfile& _return) = 0;
  virtual void getReverseCompactContacts(std::map<std::string, CompactContact> & _return, const std::vector<std::string> & ids) = 0;
  virtual void getPaidCallAdStatus(PaidCallAdResult& _return) = 0;
  virtual void findContactByUseridWithoutAbuseBlockForChannel(Contact& _return, const std::string& userid) = 0;
  virtual void getGroupMemberMids(std::vector<std::string> & _return, const std::string& groupId) = 0;
  virtual void sendMessageWithoutRelationship(Message& _return, const Message& message) = 0;
  virtual void displayBuddySubscriberCountInBulk(std::map<std::string, int64_t> & _return, const std::vector<std::string> & mids) = 0;
  virtual void lookupRoomMembers(std::vector<SimpleChannelContact> & _return, const std::string& roomId, const std::vector<std::string> & mids) = 0;
  virtual void getFavoriteMidsForChannel(std::vector<std::string> & _return) = 0;
  virtual void getAllContactIdsForChannel(std::vector<std::string> & _return) = 0;
  virtual int64_t displayBuddySubscriberCount() = 0;
  virtual void getProfileForChannel(Profile& _return) = 0;
  virtual void getUserTickets(std::vector<UserTicketResponse> & _return, const std::vector<std::string> & userMids) = 0;
  virtual void getOAFriendMids(std::vector<std::string> & _return) = 0;
  virtual void searchPaidCallUserRate(std::vector<PaidCallUserRate> & _return, const std::string& countryCode, const std::string& language) = 0;
  virtual void getJoinedGroupIdsForChannel(std::vector<std::string> & _return) = 0;
  virtual void acquireGroupCallRoute(GroupCallRoute& _return, const std::string& chatMid, const GroupCallMediaType::type mediaType) = 0;
  virtual void getUserMidsWhoAddedMe(std::vector<std::string> & _return) = 0;
  virtual void getIdentityCredential(IdentityCredential& _return) = 0;
  virtual void addOperationForChannel(const OpType::type opType, const std::string& param1, const std::string& param2, const std::string& param3) = 0;
  virtual void getSimpleChannelContacts(std::vector<SimpleChannelContact> & _return, const std::vector<std::string> & ids, const bool statusSticonFallbackDisabled) = 0;
  virtual int64_t getUserLastSentMessageTimeStamp(const std::string& mid) = 0;
};

class CallServiceIfFactory {
 public:
  typedef CallServiceIf Handler;

  virtual ~CallServiceIfFactory() {}

  virtual CallServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CallServiceIf* /* handler */) = 0;
};

class CallServiceIfSingletonFactory : virtual public CallServiceIfFactory {
 public:
  CallServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<CallServiceIf>& iface) : iface_(iface) {}
  virtual ~CallServiceIfSingletonFactory() {}

  virtual CallServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CallServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<CallServiceIf> iface_;
};

class CallServiceNull : virtual public CallServiceIf {
 public:
  virtual ~CallServiceNull() {}
  UserStatus::type getUserStatus(const std::string& /* mid */) {
    UserStatus::type _return = (UserStatus::type)0;
    return _return;
  }
  void updateProfileAttributeForChannel(const ProfileAttribute::type /* profileAttribute */, const std::string& /* value */) {
    return;
  }
  void updateExtendedProfileAttribute(const ExtendedProfileAttribute::type /* attr */, const ExtendedProfile& /* extendedProfile */) {
    return;
  }
  void getAllSimpleChannelContacts(std::vector<SimpleChannelContact> & /* _return */, const bool /* statusSticonFallbackDisabled */) {
    return;
  }
  void getUserIdentities(std::map<RegistrationType::type, std::string> & /* _return */) {
    return;
  }
  void markPaidCallAd(PaidCallDialing& /* _return */, const std::string& /* dialedNumber */, const std::string& /* language */, const bool /* disableCallerId */) {
    return;
  }
  bool isGroupMember(const std::string& /* groupId */) {
    bool _return = false;
    return _return;
  }
  void getPhoneInfoFromPhoneNumber(PhoneInfoForChannel& /* _return */, const std::string& /* region */, const std::string& /* phoneNumber */) {
    return;
  }
  void redeemPaidCallVoucher(PaidCallRedeemResult& /* _return */, const std::string& /* serial */, const std::string& /* language */) {
    return;
  }
  void getPreferredDisplayName(std::map<std::string, std::string> & /* _return */, const std::vector<std::string> & /* mids */) {
    return;
  }
  void getContactsForChannel(std::vector<Contact> & /* _return */, const std::vector<std::string> & /* ids */) {
    return;
  }
  void getCallCreditProducts(std::vector<CoinProductItem> & /* _return */, const PaymentType::type /* appStoreCode */, const PaymentPgType::type /* pgCode */, const std::string& /* country */, const std::string& /* language */) {
    return;
  }
  void getCompactContacts(std::vector<CompactContact> & /* _return */, const int64_t /* lastModifiedTimestamp */) {
    return;
  }
  void notifyNotiCenterEvent(const NotiCenterEventData& /* event */) {
    return;
  }
  bool isInContact(const std::string& /* mid */) {
    bool _return = false;
    return _return;
  }
  void lookupGroupMembers(std::vector<SimpleChannelContact> & /* _return */, const std::string& /* groupId */, const std::vector<std::string> & /* mids */) {
    return;
  }
  void getRoomInformation(Room& /* _return */, const std::string& /* roomMid */) {
    return;
  }
  void getGroupCall(GroupCall& /* _return */, const std::string& /* chatMid */) {
    return;
  }
  bool isAllowSecondaryDeviceLogin() {
    bool _return = false;
    return _return;
  }
  void getPrimaryClientForChannel(SimpleChannelClient& /* _return */) {
    return;
  }
  void createRoomWithBuddy(Room& /* _return */, const int32_t /* reqSeq */, const std::string& /* buddyMid */, const std::vector<std::string> & /* contactIds */) {
    return;
  }
  void getDisplayName(std::string& /* _return */, const std::string& /* mid */) {
    return;
  }
  void getPaidCallMetadata(PaidCallMetadataResult& /* _return */, const std::string& /* language */) {
    return;
  }
  void getMid(std::string& /* _return */) {
    return;
  }
  void getUserCountryForBilling(std::string& /* _return */, const std::string& /* country */, const std::string& /* remoteIp */) {
    return;
  }
  void getFavoriteGroupIdsForChannel(std::vector<std::string> & /* _return */) {
    return;
  }
  void getPaidCallHistory(PaidCallHistoryResult& /* _return */, const int64_t /* start */, const int32_t /* size */, const std::string& /* language */) {
    return;
  }
  void sendPinCodeOperation(const std::string& /* verifier */) {
    return;
  }
  void inviteIntoGroupCall(const std::string& /* chatMid */, const std::vector<std::string> & /* memberMids */, const GroupCallMediaType::type /* mediaType */) {
    return;
  }
  void getFriendMids(std::vector<std::string> & /* _return */) {
    return;
  }
  void getMetaProfile(MetaProfile& /* _return */) {
    return;
  }
  void sendMessageForChannel(Message& /* _return */, const Message& /* message */) {
    return;
  }
  int64_t activeBuddySubscriberCount() {
    int64_t _return = 0;
    return _return;
  }
  void getCallCreditPurchaseHistory(CoinHistoryResult& /* _return */, const CoinHistoryCondition& /* request */) {
    return;
  }
  bool isRoomMember(const std::string& /* roomId */) {
    bool _return = false;
    return _return;
  }
  void sendSystemOAMessage(Message& /* _return */, const Message& /* message */) {
    return;
  }
  void acquirePaidCallRoute(PaidCallResponse& /* _return */, const PaidCallType::type /* paidCallType */, const std::string& /* dialedNumber */, const std::string& /* language */, const std::string& /* networkCode */, const bool /* disableCallerId */, const std::string& /* referer */, const std::string& /* adSessionId */) {
    return;
  }
  void getGroupsForChannel(std::vector<Group> & /* _return */, const std::vector<std::string> & /* groupIds */) {
    return;
  }
  int64_t getUserCreateTime() {
    int64_t _return = 0;
    return _return;
  }
  void registerChannelCP(std::string& /* _return */, const std::string& /* cpId */, const std::string& /* registerPassword */) {
    return;
  }
  void reserveCallCreditPurchase(PaymentReservationResult& /* _return */, const CoinPurchaseReservation& /* request */) {
    return;
  }
  void acquirePaidCallCurrencyExchangeRate(std::vector<PaidCallCurrencyExchangeRate> & /* _return */, const std::string& /* language */) {
    return;
  }
  void getRoomMemberMidsForAppPlatform(std::vector<std::string> & /* _return */, const std::string& /* roomId */) {
    return;
  }
  void getPaidCallBalanceList(std::vector<PaidCallBalance> & /* _return */, const std::string& /* language */) {
    return;
  }
  void getPersonalInfos(std::map<PersonalInfo::type, std::string> & /* _return */, const std::set<PersonalInfo::type> & /* requiredPersonalInfos */) {
    return;
  }
  void getPrimaryClientsForChannel(std::vector<SimpleChannelClient> & /* _return */, const std::vector<std::string> & /* userMids */) {
    return;
  }
  void addBuddyToContact(ContactTransition& /* _return */, const std::string& /* buddyMid */) {
    return;
  }
  void getGroupMemberMidsForAppPlatform(std::vector<std::string> & /* _return */, const std::string& /* groupId */) {
    return;
  }
  void getUserLanguage(std::string& /* _return */) {
    return;
  }
  void lookupPaidCall(PaidCallResponse& /* _return */, const std::string& /* dialedNumber */, const std::string& /* language */, const std::string& /* referer */) {
    return;
  }
  void getExtendedProfile(ExtendedProfile& /* _return */) {
    return;
  }
  void getReverseCompactContacts(std::map<std::string, CompactContact> & /* _return */, const std::vector<std::string> & /* ids */) {
    return;
  }
  void getPaidCallAdStatus(PaidCallAdResult& /* _return */) {
    return;
  }
  void findContactByUseridWithoutAbuseBlockForChannel(Contact& /* _return */, const std::string& /* userid */) {
    return;
  }
  void getGroupMemberMids(std::vector<std::string> & /* _return */, const std::string& /* groupId */) {
    return;
  }
  void sendMessageWithoutRelationship(Message& /* _return */, const Message& /* message */) {
    return;
  }
  void displayBuddySubscriberCountInBulk(std::map<std::string, int64_t> & /* _return */, const std::vector<std::string> & /* mids */) {
    return;
  }
  void lookupRoomMembers(std::vector<SimpleChannelContact> & /* _return */, const std::string& /* roomId */, const std::vector<std::string> & /* mids */) {
    return;
  }
  void getFavoriteMidsForChannel(std::vector<std::string> & /* _return */) {
    return;
  }
  void getAllContactIdsForChannel(std::vector<std::string> & /* _return */) {
    return;
  }
  int64_t displayBuddySubscriberCount() {
    int64_t _return = 0;
    return _return;
  }
  void getProfileForChannel(Profile& /* _return */) {
    return;
  }
  void getUserTickets(std::vector<UserTicketResponse> & /* _return */, const std::vector<std::string> & /* userMids */) {
    return;
  }
  void getOAFriendMids(std::vector<std::string> & /* _return */) {
    return;
  }
  void searchPaidCallUserRate(std::vector<PaidCallUserRate> & /* _return */, const std::string& /* countryCode */, const std::string& /* language */) {
    return;
  }
  void getJoinedGroupIdsForChannel(std::vector<std::string> & /* _return */) {
    return;
  }
  void acquireGroupCallRoute(GroupCallRoute& /* _return */, const std::string& /* chatMid */, const GroupCallMediaType::type /* mediaType */) {
    return;
  }
  void getUserMidsWhoAddedMe(std::vector<std::string> & /* _return */) {
    return;
  }
  void getIdentityCredential(IdentityCredential& /* _return */) {
    return;
  }
  void addOperationForChannel(const OpType::type /* opType */, const std::string& /* param1 */, const std::string& /* param2 */, const std::string& /* param3 */) {
    return;
  }
  void getSimpleChannelContacts(std::vector<SimpleChannelContact> & /* _return */, const std::vector<std::string> & /* ids */, const bool /* statusSticonFallbackDisabled */) {
    return;
  }
  int64_t getUserLastSentMessageTimeStamp(const std::string& /* mid */) {
    int64_t _return = 0;
    return _return;
  }
};

typedef struct _CallService_getUserStatus_args__isset {
  _CallService_getUserStatus_args__isset() : mid(false) {}
  bool mid :1;
} _CallService_getUserStatus_args__isset;

class CallService_getUserStatus_args {
 public:

  CallService_getUserStatus_args(const CallService_getUserStatus_args&);
  CallService_getUserStatus_args& operator=(const CallService_getUserStatus_args&);
  CallService_getUserStatus_args() : mid() {
  }

  virtual ~CallService_getUserStatus_args() throw();
  std::string mid;

  _CallService_getUserStatus_args__isset __isset;

  void __set_mid(const std::string& val);

  bool operator == (const CallService_getUserStatus_args & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    return true;
  }
  bool operator != (const CallService_getUserStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getUserStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getUserStatus_pargs {
 public:


  virtual ~CallService_getUserStatus_pargs() throw();
  const std::string* mid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getUserStatus_result__isset {
  _CallService_getUserStatus_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getUserStatus_result__isset;

class CallService_getUserStatus_result {
 public:

  CallService_getUserStatus_result(const CallService_getUserStatus_result&);
  CallService_getUserStatus_result& operator=(const CallService_getUserStatus_result&);
  CallService_getUserStatus_result() : success((UserStatus::type)0) {
  }

  virtual ~CallService_getUserStatus_result() throw();
  UserStatus::type success;
  TalkException e;

  _CallService_getUserStatus_result__isset __isset;

  void __set_success(const UserStatus::type val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getUserStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getUserStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getUserStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getUserStatus_presult__isset {
  _CallService_getUserStatus_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getUserStatus_presult__isset;

class CallService_getUserStatus_presult {
 public:


  virtual ~CallService_getUserStatus_presult() throw();
  UserStatus::type* success;
  TalkException e;

  _CallService_getUserStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_updateProfileAttributeForChannel_args__isset {
  _CallService_updateProfileAttributeForChannel_args__isset() : profileAttribute(false), value(false) {}
  bool profileAttribute :1;
  bool value :1;
} _CallService_updateProfileAttributeForChannel_args__isset;

class CallService_updateProfileAttributeForChannel_args {
 public:

  CallService_updateProfileAttributeForChannel_args(const CallService_updateProfileAttributeForChannel_args&);
  CallService_updateProfileAttributeForChannel_args& operator=(const CallService_updateProfileAttributeForChannel_args&);
  CallService_updateProfileAttributeForChannel_args() : profileAttribute((ProfileAttribute::type)0), value() {
  }

  virtual ~CallService_updateProfileAttributeForChannel_args() throw();
  ProfileAttribute::type profileAttribute;
  std::string value;

  _CallService_updateProfileAttributeForChannel_args__isset __isset;

  void __set_profileAttribute(const ProfileAttribute::type val);

  void __set_value(const std::string& val);

  bool operator == (const CallService_updateProfileAttributeForChannel_args & rhs) const
  {
    if (!(profileAttribute == rhs.profileAttribute))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CallService_updateProfileAttributeForChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_updateProfileAttributeForChannel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_updateProfileAttributeForChannel_pargs {
 public:


  virtual ~CallService_updateProfileAttributeForChannel_pargs() throw();
  const ProfileAttribute::type* profileAttribute;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_updateProfileAttributeForChannel_result__isset {
  _CallService_updateProfileAttributeForChannel_result__isset() : e(false) {}
  bool e :1;
} _CallService_updateProfileAttributeForChannel_result__isset;

class CallService_updateProfileAttributeForChannel_result {
 public:

  CallService_updateProfileAttributeForChannel_result(const CallService_updateProfileAttributeForChannel_result&);
  CallService_updateProfileAttributeForChannel_result& operator=(const CallService_updateProfileAttributeForChannel_result&);
  CallService_updateProfileAttributeForChannel_result() {
  }

  virtual ~CallService_updateProfileAttributeForChannel_result() throw();
  TalkException e;

  _CallService_updateProfileAttributeForChannel_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const CallService_updateProfileAttributeForChannel_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_updateProfileAttributeForChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_updateProfileAttributeForChannel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_updateProfileAttributeForChannel_presult__isset {
  _CallService_updateProfileAttributeForChannel_presult__isset() : e(false) {}
  bool e :1;
} _CallService_updateProfileAttributeForChannel_presult__isset;

class CallService_updateProfileAttributeForChannel_presult {
 public:


  virtual ~CallService_updateProfileAttributeForChannel_presult() throw();
  TalkException e;

  _CallService_updateProfileAttributeForChannel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_updateExtendedProfileAttribute_args__isset {
  _CallService_updateExtendedProfileAttribute_args__isset() : attr(false), extendedProfile(false) {}
  bool attr :1;
  bool extendedProfile :1;
} _CallService_updateExtendedProfileAttribute_args__isset;

class CallService_updateExtendedProfileAttribute_args {
 public:

  CallService_updateExtendedProfileAttribute_args(const CallService_updateExtendedProfileAttribute_args&);
  CallService_updateExtendedProfileAttribute_args& operator=(const CallService_updateExtendedProfileAttribute_args&);
  CallService_updateExtendedProfileAttribute_args() : attr((ExtendedProfileAttribute::type)0) {
  }

  virtual ~CallService_updateExtendedProfileAttribute_args() throw();
  ExtendedProfileAttribute::type attr;
  ExtendedProfile extendedProfile;

  _CallService_updateExtendedProfileAttribute_args__isset __isset;

  void __set_attr(const ExtendedProfileAttribute::type val);

  void __set_extendedProfile(const ExtendedProfile& val);

  bool operator == (const CallService_updateExtendedProfileAttribute_args & rhs) const
  {
    if (!(attr == rhs.attr))
      return false;
    if (!(extendedProfile == rhs.extendedProfile))
      return false;
    return true;
  }
  bool operator != (const CallService_updateExtendedProfileAttribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_updateExtendedProfileAttribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_updateExtendedProfileAttribute_pargs {
 public:


  virtual ~CallService_updateExtendedProfileAttribute_pargs() throw();
  const ExtendedProfileAttribute::type* attr;
  const ExtendedProfile* extendedProfile;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_updateExtendedProfileAttribute_result__isset {
  _CallService_updateExtendedProfileAttribute_result__isset() : e(false) {}
  bool e :1;
} _CallService_updateExtendedProfileAttribute_result__isset;

class CallService_updateExtendedProfileAttribute_result {
 public:

  CallService_updateExtendedProfileAttribute_result(const CallService_updateExtendedProfileAttribute_result&);
  CallService_updateExtendedProfileAttribute_result& operator=(const CallService_updateExtendedProfileAttribute_result&);
  CallService_updateExtendedProfileAttribute_result() {
  }

  virtual ~CallService_updateExtendedProfileAttribute_result() throw();
  TalkException e;

  _CallService_updateExtendedProfileAttribute_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const CallService_updateExtendedProfileAttribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_updateExtendedProfileAttribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_updateExtendedProfileAttribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_updateExtendedProfileAttribute_presult__isset {
  _CallService_updateExtendedProfileAttribute_presult__isset() : e(false) {}
  bool e :1;
} _CallService_updateExtendedProfileAttribute_presult__isset;

class CallService_updateExtendedProfileAttribute_presult {
 public:


  virtual ~CallService_updateExtendedProfileAttribute_presult() throw();
  TalkException e;

  _CallService_updateExtendedProfileAttribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_getAllSimpleChannelContacts_args__isset {
  _CallService_getAllSimpleChannelContacts_args__isset() : statusSticonFallbackDisabled(false) {}
  bool statusSticonFallbackDisabled :1;
} _CallService_getAllSimpleChannelContacts_args__isset;

class CallService_getAllSimpleChannelContacts_args {
 public:

  CallService_getAllSimpleChannelContacts_args(const CallService_getAllSimpleChannelContacts_args&);
  CallService_getAllSimpleChannelContacts_args& operator=(const CallService_getAllSimpleChannelContacts_args&);
  CallService_getAllSimpleChannelContacts_args() : statusSticonFallbackDisabled(0) {
  }

  virtual ~CallService_getAllSimpleChannelContacts_args() throw();
  bool statusSticonFallbackDisabled;

  _CallService_getAllSimpleChannelContacts_args__isset __isset;

  void __set_statusSticonFallbackDisabled(const bool val);

  bool operator == (const CallService_getAllSimpleChannelContacts_args & rhs) const
  {
    if (!(statusSticonFallbackDisabled == rhs.statusSticonFallbackDisabled))
      return false;
    return true;
  }
  bool operator != (const CallService_getAllSimpleChannelContacts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getAllSimpleChannelContacts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getAllSimpleChannelContacts_pargs {
 public:


  virtual ~CallService_getAllSimpleChannelContacts_pargs() throw();
  const bool* statusSticonFallbackDisabled;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getAllSimpleChannelContacts_result__isset {
  _CallService_getAllSimpleChannelContacts_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getAllSimpleChannelContacts_result__isset;

class CallService_getAllSimpleChannelContacts_result {
 public:

  CallService_getAllSimpleChannelContacts_result(const CallService_getAllSimpleChannelContacts_result&);
  CallService_getAllSimpleChannelContacts_result& operator=(const CallService_getAllSimpleChannelContacts_result&);
  CallService_getAllSimpleChannelContacts_result() {
  }

  virtual ~CallService_getAllSimpleChannelContacts_result() throw();
  std::vector<SimpleChannelContact>  success;
  TalkException e;

  _CallService_getAllSimpleChannelContacts_result__isset __isset;

  void __set_success(const std::vector<SimpleChannelContact> & val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getAllSimpleChannelContacts_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getAllSimpleChannelContacts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getAllSimpleChannelContacts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getAllSimpleChannelContacts_presult__isset {
  _CallService_getAllSimpleChannelContacts_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getAllSimpleChannelContacts_presult__isset;

class CallService_getAllSimpleChannelContacts_presult {
 public:


  virtual ~CallService_getAllSimpleChannelContacts_presult() throw();
  std::vector<SimpleChannelContact> * success;
  TalkException e;

  _CallService_getAllSimpleChannelContacts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CallService_getUserIdentities_args {
 public:

  CallService_getUserIdentities_args(const CallService_getUserIdentities_args&);
  CallService_getUserIdentities_args& operator=(const CallService_getUserIdentities_args&);
  CallService_getUserIdentities_args() {
  }

  virtual ~CallService_getUserIdentities_args() throw();

  bool operator == (const CallService_getUserIdentities_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CallService_getUserIdentities_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getUserIdentities_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getUserIdentities_pargs {
 public:


  virtual ~CallService_getUserIdentities_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getUserIdentities_result__isset {
  _CallService_getUserIdentities_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getUserIdentities_result__isset;

class CallService_getUserIdentities_result {
 public:

  CallService_getUserIdentities_result(const CallService_getUserIdentities_result&);
  CallService_getUserIdentities_result& operator=(const CallService_getUserIdentities_result&);
  CallService_getUserIdentities_result() {
  }

  virtual ~CallService_getUserIdentities_result() throw();
  std::map<RegistrationType::type, std::string>  success;
  TalkException e;

  _CallService_getUserIdentities_result__isset __isset;

  void __set_success(const std::map<RegistrationType::type, std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getUserIdentities_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getUserIdentities_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getUserIdentities_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getUserIdentities_presult__isset {
  _CallService_getUserIdentities_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getUserIdentities_presult__isset;

class CallService_getUserIdentities_presult {
 public:


  virtual ~CallService_getUserIdentities_presult() throw();
  std::map<RegistrationType::type, std::string> * success;
  TalkException e;

  _CallService_getUserIdentities_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_markPaidCallAd_args__isset {
  _CallService_markPaidCallAd_args__isset() : dialedNumber(false), language(false), disableCallerId(false) {}
  bool dialedNumber :1;
  bool language :1;
  bool disableCallerId :1;
} _CallService_markPaidCallAd_args__isset;

class CallService_markPaidCallAd_args {
 public:

  CallService_markPaidCallAd_args(const CallService_markPaidCallAd_args&);
  CallService_markPaidCallAd_args& operator=(const CallService_markPaidCallAd_args&);
  CallService_markPaidCallAd_args() : dialedNumber(), language(), disableCallerId(0) {
  }

  virtual ~CallService_markPaidCallAd_args() throw();
  std::string dialedNumber;
  std::string language;
  bool disableCallerId;

  _CallService_markPaidCallAd_args__isset __isset;

  void __set_dialedNumber(const std::string& val);

  void __set_language(const std::string& val);

  void __set_disableCallerId(const bool val);

  bool operator == (const CallService_markPaidCallAd_args & rhs) const
  {
    if (!(dialedNumber == rhs.dialedNumber))
      return false;
    if (!(language == rhs.language))
      return false;
    if (!(disableCallerId == rhs.disableCallerId))
      return false;
    return true;
  }
  bool operator != (const CallService_markPaidCallAd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_markPaidCallAd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_markPaidCallAd_pargs {
 public:


  virtual ~CallService_markPaidCallAd_pargs() throw();
  const std::string* dialedNumber;
  const std::string* language;
  const bool* disableCallerId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_markPaidCallAd_result__isset {
  _CallService_markPaidCallAd_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_markPaidCallAd_result__isset;

class CallService_markPaidCallAd_result {
 public:

  CallService_markPaidCallAd_result(const CallService_markPaidCallAd_result&);
  CallService_markPaidCallAd_result& operator=(const CallService_markPaidCallAd_result&);
  CallService_markPaidCallAd_result() {
  }

  virtual ~CallService_markPaidCallAd_result() throw();
  PaidCallDialing success;
  TalkException e;

  _CallService_markPaidCallAd_result__isset __isset;

  void __set_success(const PaidCallDialing& val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_markPaidCallAd_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_markPaidCallAd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_markPaidCallAd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_markPaidCallAd_presult__isset {
  _CallService_markPaidCallAd_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_markPaidCallAd_presult__isset;

class CallService_markPaidCallAd_presult {
 public:


  virtual ~CallService_markPaidCallAd_presult() throw();
  PaidCallDialing* success;
  TalkException e;

  _CallService_markPaidCallAd_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_isGroupMember_args__isset {
  _CallService_isGroupMember_args__isset() : groupId(false) {}
  bool groupId :1;
} _CallService_isGroupMember_args__isset;

class CallService_isGroupMember_args {
 public:

  CallService_isGroupMember_args(const CallService_isGroupMember_args&);
  CallService_isGroupMember_args& operator=(const CallService_isGroupMember_args&);
  CallService_isGroupMember_args() : groupId() {
  }

  virtual ~CallService_isGroupMember_args() throw();
  std::string groupId;

  _CallService_isGroupMember_args__isset __isset;

  void __set_groupId(const std::string& val);

  bool operator == (const CallService_isGroupMember_args & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    return true;
  }
  bool operator != (const CallService_isGroupMember_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_isGroupMember_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_isGroupMember_pargs {
 public:


  virtual ~CallService_isGroupMember_pargs() throw();
  const std::string* groupId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_isGroupMember_result__isset {
  _CallService_isGroupMember_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_isGroupMember_result__isset;

class CallService_isGroupMember_result {
 public:

  CallService_isGroupMember_result(const CallService_isGroupMember_result&);
  CallService_isGroupMember_result& operator=(const CallService_isGroupMember_result&);
  CallService_isGroupMember_result() : success(0) {
  }

  virtual ~CallService_isGroupMember_result() throw();
  bool success;
  TalkException e;

  _CallService_isGroupMember_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_isGroupMember_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_isGroupMember_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_isGroupMember_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_isGroupMember_presult__isset {
  _CallService_isGroupMember_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_isGroupMember_presult__isset;

class CallService_isGroupMember_presult {
 public:


  virtual ~CallService_isGroupMember_presult() throw();
  bool* success;
  TalkException e;

  _CallService_isGroupMember_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_getPhoneInfoFromPhoneNumber_args__isset {
  _CallService_getPhoneInfoFromPhoneNumber_args__isset() : region(false), phoneNumber(false) {}
  bool region :1;
  bool phoneNumber :1;
} _CallService_getPhoneInfoFromPhoneNumber_args__isset;

class CallService_getPhoneInfoFromPhoneNumber_args {
 public:

  CallService_getPhoneInfoFromPhoneNumber_args(const CallService_getPhoneInfoFromPhoneNumber_args&);
  CallService_getPhoneInfoFromPhoneNumber_args& operator=(const CallService_getPhoneInfoFromPhoneNumber_args&);
  CallService_getPhoneInfoFromPhoneNumber_args() : region(), phoneNumber() {
  }

  virtual ~CallService_getPhoneInfoFromPhoneNumber_args() throw();
  std::string region;
  std::string phoneNumber;

  _CallService_getPhoneInfoFromPhoneNumber_args__isset __isset;

  void __set_region(const std::string& val);

  void __set_phoneNumber(const std::string& val);

  bool operator == (const CallService_getPhoneInfoFromPhoneNumber_args & rhs) const
  {
    if (!(region == rhs.region))
      return false;
    if (!(phoneNumber == rhs.phoneNumber))
      return false;
    return true;
  }
  bool operator != (const CallService_getPhoneInfoFromPhoneNumber_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getPhoneInfoFromPhoneNumber_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getPhoneInfoFromPhoneNumber_pargs {
 public:


  virtual ~CallService_getPhoneInfoFromPhoneNumber_pargs() throw();
  const std::string* region;
  const std::string* phoneNumber;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getPhoneInfoFromPhoneNumber_result__isset {
  _CallService_getPhoneInfoFromPhoneNumber_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getPhoneInfoFromPhoneNumber_result__isset;

class CallService_getPhoneInfoFromPhoneNumber_result {
 public:

  CallService_getPhoneInfoFromPhoneNumber_result(const CallService_getPhoneInfoFromPhoneNumber_result&);
  CallService_getPhoneInfoFromPhoneNumber_result& operator=(const CallService_getPhoneInfoFromPhoneNumber_result&);
  CallService_getPhoneInfoFromPhoneNumber_result() {
  }

  virtual ~CallService_getPhoneInfoFromPhoneNumber_result() throw();
  PhoneInfoForChannel success;
  TalkException e;

  _CallService_getPhoneInfoFromPhoneNumber_result__isset __isset;

  void __set_success(const PhoneInfoForChannel& val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getPhoneInfoFromPhoneNumber_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getPhoneInfoFromPhoneNumber_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getPhoneInfoFromPhoneNumber_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getPhoneInfoFromPhoneNumber_presult__isset {
  _CallService_getPhoneInfoFromPhoneNumber_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getPhoneInfoFromPhoneNumber_presult__isset;

class CallService_getPhoneInfoFromPhoneNumber_presult {
 public:


  virtual ~CallService_getPhoneInfoFromPhoneNumber_presult() throw();
  PhoneInfoForChannel* success;
  TalkException e;

  _CallService_getPhoneInfoFromPhoneNumber_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_redeemPaidCallVoucher_args__isset {
  _CallService_redeemPaidCallVoucher_args__isset() : serial(false), language(false) {}
  bool serial :1;
  bool language :1;
} _CallService_redeemPaidCallVoucher_args__isset;

class CallService_redeemPaidCallVoucher_args {
 public:

  CallService_redeemPaidCallVoucher_args(const CallService_redeemPaidCallVoucher_args&);
  CallService_redeemPaidCallVoucher_args& operator=(const CallService_redeemPaidCallVoucher_args&);
  CallService_redeemPaidCallVoucher_args() : serial(), language() {
  }

  virtual ~CallService_redeemPaidCallVoucher_args() throw();
  std::string serial;
  std::string language;

  _CallService_redeemPaidCallVoucher_args__isset __isset;

  void __set_serial(const std::string& val);

  void __set_language(const std::string& val);

  bool operator == (const CallService_redeemPaidCallVoucher_args & rhs) const
  {
    if (!(serial == rhs.serial))
      return false;
    if (!(language == rhs.language))
      return false;
    return true;
  }
  bool operator != (const CallService_redeemPaidCallVoucher_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_redeemPaidCallVoucher_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_redeemPaidCallVoucher_pargs {
 public:


  virtual ~CallService_redeemPaidCallVoucher_pargs() throw();
  const std::string* serial;
  const std::string* language;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_redeemPaidCallVoucher_result__isset {
  _CallService_redeemPaidCallVoucher_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_redeemPaidCallVoucher_result__isset;

class CallService_redeemPaidCallVoucher_result {
 public:

  CallService_redeemPaidCallVoucher_result(const CallService_redeemPaidCallVoucher_result&);
  CallService_redeemPaidCallVoucher_result& operator=(const CallService_redeemPaidCallVoucher_result&);
  CallService_redeemPaidCallVoucher_result() {
  }

  virtual ~CallService_redeemPaidCallVoucher_result() throw();
  PaidCallRedeemResult success;
  TalkException e;

  _CallService_redeemPaidCallVoucher_result__isset __isset;

  void __set_success(const PaidCallRedeemResult& val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_redeemPaidCallVoucher_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_redeemPaidCallVoucher_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_redeemPaidCallVoucher_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_redeemPaidCallVoucher_presult__isset {
  _CallService_redeemPaidCallVoucher_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_redeemPaidCallVoucher_presult__isset;

class CallService_redeemPaidCallVoucher_presult {
 public:


  virtual ~CallService_redeemPaidCallVoucher_presult() throw();
  PaidCallRedeemResult* success;
  TalkException e;

  _CallService_redeemPaidCallVoucher_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_getPreferredDisplayName_args__isset {
  _CallService_getPreferredDisplayName_args__isset() : mids(false) {}
  bool mids :1;
} _CallService_getPreferredDisplayName_args__isset;

class CallService_getPreferredDisplayName_args {
 public:

  CallService_getPreferredDisplayName_args(const CallService_getPreferredDisplayName_args&);
  CallService_getPreferredDisplayName_args& operator=(const CallService_getPreferredDisplayName_args&);
  CallService_getPreferredDisplayName_args() {
  }

  virtual ~CallService_getPreferredDisplayName_args() throw();
  std::vector<std::string>  mids;

  _CallService_getPreferredDisplayName_args__isset __isset;

  void __set_mids(const std::vector<std::string> & val);

  bool operator == (const CallService_getPreferredDisplayName_args & rhs) const
  {
    if (!(mids == rhs.mids))
      return false;
    return true;
  }
  bool operator != (const CallService_getPreferredDisplayName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getPreferredDisplayName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getPreferredDisplayName_pargs {
 public:


  virtual ~CallService_getPreferredDisplayName_pargs() throw();
  const std::vector<std::string> * mids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getPreferredDisplayName_result__isset {
  _CallService_getPreferredDisplayName_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getPreferredDisplayName_result__isset;

class CallService_getPreferredDisplayName_result {
 public:

  CallService_getPreferredDisplayName_result(const CallService_getPreferredDisplayName_result&);
  CallService_getPreferredDisplayName_result& operator=(const CallService_getPreferredDisplayName_result&);
  CallService_getPreferredDisplayName_result() {
  }

  virtual ~CallService_getPreferredDisplayName_result() throw();
  std::map<std::string, std::string>  success;
  TalkException e;

  _CallService_getPreferredDisplayName_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getPreferredDisplayName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getPreferredDisplayName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getPreferredDisplayName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getPreferredDisplayName_presult__isset {
  _CallService_getPreferredDisplayName_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getPreferredDisplayName_presult__isset;

class CallService_getPreferredDisplayName_presult {
 public:


  virtual ~CallService_getPreferredDisplayName_presult() throw();
  std::map<std::string, std::string> * success;
  TalkException e;

  _CallService_getPreferredDisplayName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_getContactsForChannel_args__isset {
  _CallService_getContactsForChannel_args__isset() : ids(false) {}
  bool ids :1;
} _CallService_getContactsForChannel_args__isset;

class CallService_getContactsForChannel_args {
 public:

  CallService_getContactsForChannel_args(const CallService_getContactsForChannel_args&);
  CallService_getContactsForChannel_args& operator=(const CallService_getContactsForChannel_args&);
  CallService_getContactsForChannel_args() {
  }

  virtual ~CallService_getContactsForChannel_args() throw();
  std::vector<std::string>  ids;

  _CallService_getContactsForChannel_args__isset __isset;

  void __set_ids(const std::vector<std::string> & val);

  bool operator == (const CallService_getContactsForChannel_args & rhs) const
  {
    if (!(ids == rhs.ids))
      return false;
    return true;
  }
  bool operator != (const CallService_getContactsForChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getContactsForChannel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getContactsForChannel_pargs {
 public:


  virtual ~CallService_getContactsForChannel_pargs() throw();
  const std::vector<std::string> * ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getContactsForChannel_result__isset {
  _CallService_getContactsForChannel_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getContactsForChannel_result__isset;

class CallService_getContactsForChannel_result {
 public:

  CallService_getContactsForChannel_result(const CallService_getContactsForChannel_result&);
  CallService_getContactsForChannel_result& operator=(const CallService_getContactsForChannel_result&);
  CallService_getContactsForChannel_result() {
  }

  virtual ~CallService_getContactsForChannel_result() throw();
  std::vector<Contact>  success;
  TalkException e;

  _CallService_getContactsForChannel_result__isset __isset;

  void __set_success(const std::vector<Contact> & val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getContactsForChannel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getContactsForChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getContactsForChannel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getContactsForChannel_presult__isset {
  _CallService_getContactsForChannel_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getContactsForChannel_presult__isset;

class CallService_getContactsForChannel_presult {
 public:


  virtual ~CallService_getContactsForChannel_presult() throw();
  std::vector<Contact> * success;
  TalkException e;

  _CallService_getContactsForChannel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_getCallCreditProducts_args__isset {
  _CallService_getCallCreditProducts_args__isset() : appStoreCode(false), pgCode(false), country(false), language(false) {}
  bool appStoreCode :1;
  bool pgCode :1;
  bool country :1;
  bool language :1;
} _CallService_getCallCreditProducts_args__isset;

class CallService_getCallCreditProducts_args {
 public:

  CallService_getCallCreditProducts_args(const CallService_getCallCreditProducts_args&);
  CallService_getCallCreditProducts_args& operator=(const CallService_getCallCreditProducts_args&);
  CallService_getCallCreditProducts_args() : appStoreCode((PaymentType::type)0), pgCode((PaymentPgType::type)0), country(), language() {
  }

  virtual ~CallService_getCallCreditProducts_args() throw();
  PaymentType::type appStoreCode;
  PaymentPgType::type pgCode;
  std::string country;
  std::string language;

  _CallService_getCallCreditProducts_args__isset __isset;

  void __set_appStoreCode(const PaymentType::type val);

  void __set_pgCode(const PaymentPgType::type val);

  void __set_country(const std::string& val);

  void __set_language(const std::string& val);

  bool operator == (const CallService_getCallCreditProducts_args & rhs) const
  {
    if (!(appStoreCode == rhs.appStoreCode))
      return false;
    if (!(pgCode == rhs.pgCode))
      return false;
    if (!(country == rhs.country))
      return false;
    if (!(language == rhs.language))
      return false;
    return true;
  }
  bool operator != (const CallService_getCallCreditProducts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getCallCreditProducts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getCallCreditProducts_pargs {
 public:


  virtual ~CallService_getCallCreditProducts_pargs() throw();
  const PaymentType::type* appStoreCode;
  const PaymentPgType::type* pgCode;
  const std::string* country;
  const std::string* language;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getCallCreditProducts_result__isset {
  _CallService_getCallCreditProducts_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getCallCreditProducts_result__isset;

class CallService_getCallCreditProducts_result {
 public:

  CallService_getCallCreditProducts_result(const CallService_getCallCreditProducts_result&);
  CallService_getCallCreditProducts_result& operator=(const CallService_getCallCreditProducts_result&);
  CallService_getCallCreditProducts_result() {
  }

  virtual ~CallService_getCallCreditProducts_result() throw();
  std::vector<CoinProductItem>  success;
  TalkException e;

  _CallService_getCallCreditProducts_result__isset __isset;

  void __set_success(const std::vector<CoinProductItem> & val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getCallCreditProducts_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getCallCreditProducts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getCallCreditProducts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getCallCreditProducts_presult__isset {
  _CallService_getCallCreditProducts_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getCallCreditProducts_presult__isset;

class CallService_getCallCreditProducts_presult {
 public:


  virtual ~CallService_getCallCreditProducts_presult() throw();
  std::vector<CoinProductItem> * success;
  TalkException e;

  _CallService_getCallCreditProducts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_getCompactContacts_args__isset {
  _CallService_getCompactContacts_args__isset() : lastModifiedTimestamp(false) {}
  bool lastModifiedTimestamp :1;
} _CallService_getCompactContacts_args__isset;

class CallService_getCompactContacts_args {
 public:

  CallService_getCompactContacts_args(const CallService_getCompactContacts_args&);
  CallService_getCompactContacts_args& operator=(const CallService_getCompactContacts_args&);
  CallService_getCompactContacts_args() : lastModifiedTimestamp(0) {
  }

  virtual ~CallService_getCompactContacts_args() throw();
  int64_t lastModifiedTimestamp;

  _CallService_getCompactContacts_args__isset __isset;

  void __set_lastModifiedTimestamp(const int64_t val);

  bool operator == (const CallService_getCompactContacts_args & rhs) const
  {
    if (!(lastModifiedTimestamp == rhs.lastModifiedTimestamp))
      return false;
    return true;
  }
  bool operator != (const CallService_getCompactContacts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getCompactContacts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getCompactContacts_pargs {
 public:


  virtual ~CallService_getCompactContacts_pargs() throw();
  const int64_t* lastModifiedTimestamp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getCompactContacts_result__isset {
  _CallService_getCompactContacts_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getCompactContacts_result__isset;

class CallService_getCompactContacts_result {
 public:

  CallService_getCompactContacts_result(const CallService_getCompactContacts_result&);
  CallService_getCompactContacts_result& operator=(const CallService_getCompactContacts_result&);
  CallService_getCompactContacts_result() {
  }

  virtual ~CallService_getCompactContacts_result() throw();
  std::vector<CompactContact>  success;
  TalkException e;

  _CallService_getCompactContacts_result__isset __isset;

  void __set_success(const std::vector<CompactContact> & val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getCompactContacts_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getCompactContacts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getCompactContacts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getCompactContacts_presult__isset {
  _CallService_getCompactContacts_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getCompactContacts_presult__isset;

class CallService_getCompactContacts_presult {
 public:


  virtual ~CallService_getCompactContacts_presult() throw();
  std::vector<CompactContact> * success;
  TalkException e;

  _CallService_getCompactContacts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_notifyNotiCenterEvent_args__isset {
  _CallService_notifyNotiCenterEvent_args__isset() : event(false) {}
  bool event :1;
} _CallService_notifyNotiCenterEvent_args__isset;

class CallService_notifyNotiCenterEvent_args {
 public:

  CallService_notifyNotiCenterEvent_args(const CallService_notifyNotiCenterEvent_args&);
  CallService_notifyNotiCenterEvent_args& operator=(const CallService_notifyNotiCenterEvent_args&);
  CallService_notifyNotiCenterEvent_args() {
  }

  virtual ~CallService_notifyNotiCenterEvent_args() throw();
  NotiCenterEventData event;

  _CallService_notifyNotiCenterEvent_args__isset __isset;

  void __set_event(const NotiCenterEventData& val);

  bool operator == (const CallService_notifyNotiCenterEvent_args & rhs) const
  {
    if (!(event == rhs.event))
      return false;
    return true;
  }
  bool operator != (const CallService_notifyNotiCenterEvent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_notifyNotiCenterEvent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_notifyNotiCenterEvent_pargs {
 public:


  virtual ~CallService_notifyNotiCenterEvent_pargs() throw();
  const NotiCenterEventData* event;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_notifyNotiCenterEvent_result__isset {
  _CallService_notifyNotiCenterEvent_result__isset() : e(false) {}
  bool e :1;
} _CallService_notifyNotiCenterEvent_result__isset;

class CallService_notifyNotiCenterEvent_result {
 public:

  CallService_notifyNotiCenterEvent_result(const CallService_notifyNotiCenterEvent_result&);
  CallService_notifyNotiCenterEvent_result& operator=(const CallService_notifyNotiCenterEvent_result&);
  CallService_notifyNotiCenterEvent_result() {
  }

  virtual ~CallService_notifyNotiCenterEvent_result() throw();
  TalkException e;

  _CallService_notifyNotiCenterEvent_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const CallService_notifyNotiCenterEvent_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_notifyNotiCenterEvent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_notifyNotiCenterEvent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_notifyNotiCenterEvent_presult__isset {
  _CallService_notifyNotiCenterEvent_presult__isset() : e(false) {}
  bool e :1;
} _CallService_notifyNotiCenterEvent_presult__isset;

class CallService_notifyNotiCenterEvent_presult {
 public:


  virtual ~CallService_notifyNotiCenterEvent_presult() throw();
  TalkException e;

  _CallService_notifyNotiCenterEvent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_isInContact_args__isset {
  _CallService_isInContact_args__isset() : mid(false) {}
  bool mid :1;
} _CallService_isInContact_args__isset;

class CallService_isInContact_args {
 public:

  CallService_isInContact_args(const CallService_isInContact_args&);
  CallService_isInContact_args& operator=(const CallService_isInContact_args&);
  CallService_isInContact_args() : mid() {
  }

  virtual ~CallService_isInContact_args() throw();
  std::string mid;

  _CallService_isInContact_args__isset __isset;

  void __set_mid(const std::string& val);

  bool operator == (const CallService_isInContact_args & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    return true;
  }
  bool operator != (const CallService_isInContact_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_isInContact_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_isInContact_pargs {
 public:


  virtual ~CallService_isInContact_pargs() throw();
  const std::string* mid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_isInContact_result__isset {
  _CallService_isInContact_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_isInContact_result__isset;

class CallService_isInContact_result {
 public:

  CallService_isInContact_result(const CallService_isInContact_result&);
  CallService_isInContact_result& operator=(const CallService_isInContact_result&);
  CallService_isInContact_result() : success(0) {
  }

  virtual ~CallService_isInContact_result() throw();
  bool success;
  TalkException e;

  _CallService_isInContact_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_isInContact_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_isInContact_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_isInContact_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_isInContact_presult__isset {
  _CallService_isInContact_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_isInContact_presult__isset;

class CallService_isInContact_presult {
 public:


  virtual ~CallService_isInContact_presult() throw();
  bool* success;
  TalkException e;

  _CallService_isInContact_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_lookupGroupMembers_args__isset {
  _CallService_lookupGroupMembers_args__isset() : groupId(false), mids(false) {}
  bool groupId :1;
  bool mids :1;
} _CallService_lookupGroupMembers_args__isset;

class CallService_lookupGroupMembers_args {
 public:

  CallService_lookupGroupMembers_args(const CallService_lookupGroupMembers_args&);
  CallService_lookupGroupMembers_args& operator=(const CallService_lookupGroupMembers_args&);
  CallService_lookupGroupMembers_args() : groupId() {
  }

  virtual ~CallService_lookupGroupMembers_args() throw();
  std::string groupId;
  std::vector<std::string>  mids;

  _CallService_lookupGroupMembers_args__isset __isset;

  void __set_groupId(const std::string& val);

  void __set_mids(const std::vector<std::string> & val);

  bool operator == (const CallService_lookupGroupMembers_args & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    if (!(mids == rhs.mids))
      return false;
    return true;
  }
  bool operator != (const CallService_lookupGroupMembers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_lookupGroupMembers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_lookupGroupMembers_pargs {
 public:


  virtual ~CallService_lookupGroupMembers_pargs() throw();
  const std::string* groupId;
  const std::vector<std::string> * mids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_lookupGroupMembers_result__isset {
  _CallService_lookupGroupMembers_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_lookupGroupMembers_result__isset;

class CallService_lookupGroupMembers_result {
 public:

  CallService_lookupGroupMembers_result(const CallService_lookupGroupMembers_result&);
  CallService_lookupGroupMembers_result& operator=(const CallService_lookupGroupMembers_result&);
  CallService_lookupGroupMembers_result() {
  }

  virtual ~CallService_lookupGroupMembers_result() throw();
  std::vector<SimpleChannelContact>  success;
  TalkException e;

  _CallService_lookupGroupMembers_result__isset __isset;

  void __set_success(const std::vector<SimpleChannelContact> & val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_lookupGroupMembers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_lookupGroupMembers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_lookupGroupMembers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_lookupGroupMembers_presult__isset {
  _CallService_lookupGroupMembers_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_lookupGroupMembers_presult__isset;

class CallService_lookupGroupMembers_presult {
 public:


  virtual ~CallService_lookupGroupMembers_presult() throw();
  std::vector<SimpleChannelContact> * success;
  TalkException e;

  _CallService_lookupGroupMembers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_getRoomInformation_args__isset {
  _CallService_getRoomInformation_args__isset() : roomMid(false) {}
  bool roomMid :1;
} _CallService_getRoomInformation_args__isset;

class CallService_getRoomInformation_args {
 public:

  CallService_getRoomInformation_args(const CallService_getRoomInformation_args&);
  CallService_getRoomInformation_args& operator=(const CallService_getRoomInformation_args&);
  CallService_getRoomInformation_args() : roomMid() {
  }

  virtual ~CallService_getRoomInformation_args() throw();
  std::string roomMid;

  _CallService_getRoomInformation_args__isset __isset;

  void __set_roomMid(const std::string& val);

  bool operator == (const CallService_getRoomInformation_args & rhs) const
  {
    if (!(roomMid == rhs.roomMid))
      return false;
    return true;
  }
  bool operator != (const CallService_getRoomInformation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getRoomInformation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getRoomInformation_pargs {
 public:


  virtual ~CallService_getRoomInformation_pargs() throw();
  const std::string* roomMid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getRoomInformation_result__isset {
  _CallService_getRoomInformation_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getRoomInformation_result__isset;

class CallService_getRoomInformation_result {
 public:

  CallService_getRoomInformation_result(const CallService_getRoomInformation_result&);
  CallService_getRoomInformation_result& operator=(const CallService_getRoomInformation_result&);
  CallService_getRoomInformation_result() {
  }

  virtual ~CallService_getRoomInformation_result() throw();
  Room success;
  TalkException e;

  _CallService_getRoomInformation_result__isset __isset;

  void __set_success(const Room& val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getRoomInformation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getRoomInformation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getRoomInformation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getRoomInformation_presult__isset {
  _CallService_getRoomInformation_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getRoomInformation_presult__isset;

class CallService_getRoomInformation_presult {
 public:


  virtual ~CallService_getRoomInformation_presult() throw();
  Room* success;
  TalkException e;

  _CallService_getRoomInformation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_getGroupCall_args__isset {
  _CallService_getGroupCall_args__isset() : chatMid(false) {}
  bool chatMid :1;
} _CallService_getGroupCall_args__isset;

class CallService_getGroupCall_args {
 public:

  CallService_getGroupCall_args(const CallService_getGroupCall_args&);
  CallService_getGroupCall_args& operator=(const CallService_getGroupCall_args&);
  CallService_getGroupCall_args() : chatMid() {
  }

  virtual ~CallService_getGroupCall_args() throw();
  std::string chatMid;

  _CallService_getGroupCall_args__isset __isset;

  void __set_chatMid(const std::string& val);

  bool operator == (const CallService_getGroupCall_args & rhs) const
  {
    if (!(chatMid == rhs.chatMid))
      return false;
    return true;
  }
  bool operator != (const CallService_getGroupCall_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getGroupCall_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getGroupCall_pargs {
 public:


  virtual ~CallService_getGroupCall_pargs() throw();
  const std::string* chatMid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getGroupCall_result__isset {
  _CallService_getGroupCall_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getGroupCall_result__isset;

class CallService_getGroupCall_result {
 public:

  CallService_getGroupCall_result(const CallService_getGroupCall_result&);
  CallService_getGroupCall_result& operator=(const CallService_getGroupCall_result&);
  CallService_getGroupCall_result() {
  }

  virtual ~CallService_getGroupCall_result() throw();
  GroupCall success;
  TalkException e;

  _CallService_getGroupCall_result__isset __isset;

  void __set_success(const GroupCall& val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getGroupCall_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getGroupCall_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getGroupCall_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getGroupCall_presult__isset {
  _CallService_getGroupCall_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getGroupCall_presult__isset;

class CallService_getGroupCall_presult {
 public:


  virtual ~CallService_getGroupCall_presult() throw();
  GroupCall* success;
  TalkException e;

  _CallService_getGroupCall_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CallService_isAllowSecondaryDeviceLogin_args {
 public:

  CallService_isAllowSecondaryDeviceLogin_args(const CallService_isAllowSecondaryDeviceLogin_args&);
  CallService_isAllowSecondaryDeviceLogin_args& operator=(const CallService_isAllowSecondaryDeviceLogin_args&);
  CallService_isAllowSecondaryDeviceLogin_args() {
  }

  virtual ~CallService_isAllowSecondaryDeviceLogin_args() throw();

  bool operator == (const CallService_isAllowSecondaryDeviceLogin_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CallService_isAllowSecondaryDeviceLogin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_isAllowSecondaryDeviceLogin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_isAllowSecondaryDeviceLogin_pargs {
 public:


  virtual ~CallService_isAllowSecondaryDeviceLogin_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_isAllowSecondaryDeviceLogin_result__isset {
  _CallService_isAllowSecondaryDeviceLogin_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_isAllowSecondaryDeviceLogin_result__isset;

class CallService_isAllowSecondaryDeviceLogin_result {
 public:

  CallService_isAllowSecondaryDeviceLogin_result(const CallService_isAllowSecondaryDeviceLogin_result&);
  CallService_isAllowSecondaryDeviceLogin_result& operator=(const CallService_isAllowSecondaryDeviceLogin_result&);
  CallService_isAllowSecondaryDeviceLogin_result() : success(0) {
  }

  virtual ~CallService_isAllowSecondaryDeviceLogin_result() throw();
  bool success;
  TalkException e;

  _CallService_isAllowSecondaryDeviceLogin_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_isAllowSecondaryDeviceLogin_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_isAllowSecondaryDeviceLogin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_isAllowSecondaryDeviceLogin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_isAllowSecondaryDeviceLogin_presult__isset {
  _CallService_isAllowSecondaryDeviceLogin_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_isAllowSecondaryDeviceLogin_presult__isset;

class CallService_isAllowSecondaryDeviceLogin_presult {
 public:


  virtual ~CallService_isAllowSecondaryDeviceLogin_presult() throw();
  bool* success;
  TalkException e;

  _CallService_isAllowSecondaryDeviceLogin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CallService_getPrimaryClientForChannel_args {
 public:

  CallService_getPrimaryClientForChannel_args(const CallService_getPrimaryClientForChannel_args&);
  CallService_getPrimaryClientForChannel_args& operator=(const CallService_getPrimaryClientForChannel_args&);
  CallService_getPrimaryClientForChannel_args() {
  }

  virtual ~CallService_getPrimaryClientForChannel_args() throw();

  bool operator == (const CallService_getPrimaryClientForChannel_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CallService_getPrimaryClientForChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getPrimaryClientForChannel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getPrimaryClientForChannel_pargs {
 public:


  virtual ~CallService_getPrimaryClientForChannel_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getPrimaryClientForChannel_result__isset {
  _CallService_getPrimaryClientForChannel_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getPrimaryClientForChannel_result__isset;

class CallService_getPrimaryClientForChannel_result {
 public:

  CallService_getPrimaryClientForChannel_result(const CallService_getPrimaryClientForChannel_result&);
  CallService_getPrimaryClientForChannel_result& operator=(const CallService_getPrimaryClientForChannel_result&);
  CallService_getPrimaryClientForChannel_result() {
  }

  virtual ~CallService_getPrimaryClientForChannel_result() throw();
  SimpleChannelClient success;
  TalkException e;

  _CallService_getPrimaryClientForChannel_result__isset __isset;

  void __set_success(const SimpleChannelClient& val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getPrimaryClientForChannel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getPrimaryClientForChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getPrimaryClientForChannel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getPrimaryClientForChannel_presult__isset {
  _CallService_getPrimaryClientForChannel_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getPrimaryClientForChannel_presult__isset;

class CallService_getPrimaryClientForChannel_presult {
 public:


  virtual ~CallService_getPrimaryClientForChannel_presult() throw();
  SimpleChannelClient* success;
  TalkException e;

  _CallService_getPrimaryClientForChannel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_createRoomWithBuddy_args__isset {
  _CallService_createRoomWithBuddy_args__isset() : reqSeq(false), buddyMid(false), contactIds(false) {}
  bool reqSeq :1;
  bool buddyMid :1;
  bool contactIds :1;
} _CallService_createRoomWithBuddy_args__isset;

class CallService_createRoomWithBuddy_args {
 public:

  CallService_createRoomWithBuddy_args(const CallService_createRoomWithBuddy_args&);
  CallService_createRoomWithBuddy_args& operator=(const CallService_createRoomWithBuddy_args&);
  CallService_createRoomWithBuddy_args() : reqSeq(0), buddyMid() {
  }

  virtual ~CallService_createRoomWithBuddy_args() throw();
  int32_t reqSeq;
  std::string buddyMid;
  std::vector<std::string>  contactIds;

  _CallService_createRoomWithBuddy_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_buddyMid(const std::string& val);

  void __set_contactIds(const std::vector<std::string> & val);

  bool operator == (const CallService_createRoomWithBuddy_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(buddyMid == rhs.buddyMid))
      return false;
    if (!(contactIds == rhs.contactIds))
      return false;
    return true;
  }
  bool operator != (const CallService_createRoomWithBuddy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_createRoomWithBuddy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_createRoomWithBuddy_pargs {
 public:


  virtual ~CallService_createRoomWithBuddy_pargs() throw();
  const int32_t* reqSeq;
  const std::string* buddyMid;
  const std::vector<std::string> * contactIds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_createRoomWithBuddy_result__isset {
  _CallService_createRoomWithBuddy_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_createRoomWithBuddy_result__isset;

class CallService_createRoomWithBuddy_result {
 public:

  CallService_createRoomWithBuddy_result(const CallService_createRoomWithBuddy_result&);
  CallService_createRoomWithBuddy_result& operator=(const CallService_createRoomWithBuddy_result&);
  CallService_createRoomWithBuddy_result() {
  }

  virtual ~CallService_createRoomWithBuddy_result() throw();
  Room success;
  TalkException e;

  _CallService_createRoomWithBuddy_result__isset __isset;

  void __set_success(const Room& val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_createRoomWithBuddy_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_createRoomWithBuddy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_createRoomWithBuddy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_createRoomWithBuddy_presult__isset {
  _CallService_createRoomWithBuddy_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_createRoomWithBuddy_presult__isset;

class CallService_createRoomWithBuddy_presult {
 public:


  virtual ~CallService_createRoomWithBuddy_presult() throw();
  Room* success;
  TalkException e;

  _CallService_createRoomWithBuddy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_getDisplayName_args__isset {
  _CallService_getDisplayName_args__isset() : mid(false) {}
  bool mid :1;
} _CallService_getDisplayName_args__isset;

class CallService_getDisplayName_args {
 public:

  CallService_getDisplayName_args(const CallService_getDisplayName_args&);
  CallService_getDisplayName_args& operator=(const CallService_getDisplayName_args&);
  CallService_getDisplayName_args() : mid() {
  }

  virtual ~CallService_getDisplayName_args() throw();
  std::string mid;

  _CallService_getDisplayName_args__isset __isset;

  void __set_mid(const std::string& val);

  bool operator == (const CallService_getDisplayName_args & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    return true;
  }
  bool operator != (const CallService_getDisplayName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getDisplayName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getDisplayName_pargs {
 public:


  virtual ~CallService_getDisplayName_pargs() throw();
  const std::string* mid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getDisplayName_result__isset {
  _CallService_getDisplayName_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getDisplayName_result__isset;

class CallService_getDisplayName_result {
 public:

  CallService_getDisplayName_result(const CallService_getDisplayName_result&);
  CallService_getDisplayName_result& operator=(const CallService_getDisplayName_result&);
  CallService_getDisplayName_result() : success() {
  }

  virtual ~CallService_getDisplayName_result() throw();
  std::string success;
  TalkException e;

  _CallService_getDisplayName_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getDisplayName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getDisplayName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getDisplayName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getDisplayName_presult__isset {
  _CallService_getDisplayName_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getDisplayName_presult__isset;

class CallService_getDisplayName_presult {
 public:


  virtual ~CallService_getDisplayName_presult() throw();
  std::string* success;
  TalkException e;

  _CallService_getDisplayName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_getPaidCallMetadata_args__isset {
  _CallService_getPaidCallMetadata_args__isset() : language(false) {}
  bool language :1;
} _CallService_getPaidCallMetadata_args__isset;

class CallService_getPaidCallMetadata_args {
 public:

  CallService_getPaidCallMetadata_args(const CallService_getPaidCallMetadata_args&);
  CallService_getPaidCallMetadata_args& operator=(const CallService_getPaidCallMetadata_args&);
  CallService_getPaidCallMetadata_args() : language() {
  }

  virtual ~CallService_getPaidCallMetadata_args() throw();
  std::string language;

  _CallService_getPaidCallMetadata_args__isset __isset;

  void __set_language(const std::string& val);

  bool operator == (const CallService_getPaidCallMetadata_args & rhs) const
  {
    if (!(language == rhs.language))
      return false;
    return true;
  }
  bool operator != (const CallService_getPaidCallMetadata_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getPaidCallMetadata_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getPaidCallMetadata_pargs {
 public:


  virtual ~CallService_getPaidCallMetadata_pargs() throw();
  const std::string* language;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getPaidCallMetadata_result__isset {
  _CallService_getPaidCallMetadata_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getPaidCallMetadata_result__isset;

class CallService_getPaidCallMetadata_result {
 public:

  CallService_getPaidCallMetadata_result(const CallService_getPaidCallMetadata_result&);
  CallService_getPaidCallMetadata_result& operator=(const CallService_getPaidCallMetadata_result&);
  CallService_getPaidCallMetadata_result() {
  }

  virtual ~CallService_getPaidCallMetadata_result() throw();
  PaidCallMetadataResult success;
  TalkException e;

  _CallService_getPaidCallMetadata_result__isset __isset;

  void __set_success(const PaidCallMetadataResult& val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getPaidCallMetadata_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getPaidCallMetadata_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getPaidCallMetadata_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getPaidCallMetadata_presult__isset {
  _CallService_getPaidCallMetadata_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getPaidCallMetadata_presult__isset;

class CallService_getPaidCallMetadata_presult {
 public:


  virtual ~CallService_getPaidCallMetadata_presult() throw();
  PaidCallMetadataResult* success;
  TalkException e;

  _CallService_getPaidCallMetadata_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CallService_getMid_args {
 public:

  CallService_getMid_args(const CallService_getMid_args&);
  CallService_getMid_args& operator=(const CallService_getMid_args&);
  CallService_getMid_args() {
  }

  virtual ~CallService_getMid_args() throw();

  bool operator == (const CallService_getMid_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CallService_getMid_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getMid_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getMid_pargs {
 public:


  virtual ~CallService_getMid_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getMid_result__isset {
  _CallService_getMid_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getMid_result__isset;

class CallService_getMid_result {
 public:

  CallService_getMid_result(const CallService_getMid_result&);
  CallService_getMid_result& operator=(const CallService_getMid_result&);
  CallService_getMid_result() : success() {
  }

  virtual ~CallService_getMid_result() throw();
  std::string success;
  TalkException e;

  _CallService_getMid_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getMid_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getMid_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getMid_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getMid_presult__isset {
  _CallService_getMid_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getMid_presult__isset;

class CallService_getMid_presult {
 public:


  virtual ~CallService_getMid_presult() throw();
  std::string* success;
  TalkException e;

  _CallService_getMid_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_getUserCountryForBilling_args__isset {
  _CallService_getUserCountryForBilling_args__isset() : country(false), remoteIp(false) {}
  bool country :1;
  bool remoteIp :1;
} _CallService_getUserCountryForBilling_args__isset;

class CallService_getUserCountryForBilling_args {
 public:

  CallService_getUserCountryForBilling_args(const CallService_getUserCountryForBilling_args&);
  CallService_getUserCountryForBilling_args& operator=(const CallService_getUserCountryForBilling_args&);
  CallService_getUserCountryForBilling_args() : country(), remoteIp() {
  }

  virtual ~CallService_getUserCountryForBilling_args() throw();
  std::string country;
  std::string remoteIp;

  _CallService_getUserCountryForBilling_args__isset __isset;

  void __set_country(const std::string& val);

  void __set_remoteIp(const std::string& val);

  bool operator == (const CallService_getUserCountryForBilling_args & rhs) const
  {
    if (!(country == rhs.country))
      return false;
    if (!(remoteIp == rhs.remoteIp))
      return false;
    return true;
  }
  bool operator != (const CallService_getUserCountryForBilling_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getUserCountryForBilling_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getUserCountryForBilling_pargs {
 public:


  virtual ~CallService_getUserCountryForBilling_pargs() throw();
  const std::string* country;
  const std::string* remoteIp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getUserCountryForBilling_result__isset {
  _CallService_getUserCountryForBilling_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getUserCountryForBilling_result__isset;

class CallService_getUserCountryForBilling_result {
 public:

  CallService_getUserCountryForBilling_result(const CallService_getUserCountryForBilling_result&);
  CallService_getUserCountryForBilling_result& operator=(const CallService_getUserCountryForBilling_result&);
  CallService_getUserCountryForBilling_result() : success() {
  }

  virtual ~CallService_getUserCountryForBilling_result() throw();
  std::string success;
  TalkException e;

  _CallService_getUserCountryForBilling_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getUserCountryForBilling_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getUserCountryForBilling_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getUserCountryForBilling_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getUserCountryForBilling_presult__isset {
  _CallService_getUserCountryForBilling_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getUserCountryForBilling_presult__isset;

class CallService_getUserCountryForBilling_presult {
 public:


  virtual ~CallService_getUserCountryForBilling_presult() throw();
  std::string* success;
  TalkException e;

  _CallService_getUserCountryForBilling_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CallService_getFavoriteGroupIdsForChannel_args {
 public:

  CallService_getFavoriteGroupIdsForChannel_args(const CallService_getFavoriteGroupIdsForChannel_args&);
  CallService_getFavoriteGroupIdsForChannel_args& operator=(const CallService_getFavoriteGroupIdsForChannel_args&);
  CallService_getFavoriteGroupIdsForChannel_args() {
  }

  virtual ~CallService_getFavoriteGroupIdsForChannel_args() throw();

  bool operator == (const CallService_getFavoriteGroupIdsForChannel_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CallService_getFavoriteGroupIdsForChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getFavoriteGroupIdsForChannel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getFavoriteGroupIdsForChannel_pargs {
 public:


  virtual ~CallService_getFavoriteGroupIdsForChannel_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getFavoriteGroupIdsForChannel_result__isset {
  _CallService_getFavoriteGroupIdsForChannel_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getFavoriteGroupIdsForChannel_result__isset;

class CallService_getFavoriteGroupIdsForChannel_result {
 public:

  CallService_getFavoriteGroupIdsForChannel_result(const CallService_getFavoriteGroupIdsForChannel_result&);
  CallService_getFavoriteGroupIdsForChannel_result& operator=(const CallService_getFavoriteGroupIdsForChannel_result&);
  CallService_getFavoriteGroupIdsForChannel_result() {
  }

  virtual ~CallService_getFavoriteGroupIdsForChannel_result() throw();
  std::vector<std::string>  success;
  TalkException e;

  _CallService_getFavoriteGroupIdsForChannel_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getFavoriteGroupIdsForChannel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getFavoriteGroupIdsForChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getFavoriteGroupIdsForChannel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getFavoriteGroupIdsForChannel_presult__isset {
  _CallService_getFavoriteGroupIdsForChannel_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getFavoriteGroupIdsForChannel_presult__isset;

class CallService_getFavoriteGroupIdsForChannel_presult {
 public:


  virtual ~CallService_getFavoriteGroupIdsForChannel_presult() throw();
  std::vector<std::string> * success;
  TalkException e;

  _CallService_getFavoriteGroupIdsForChannel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_getPaidCallHistory_args__isset {
  _CallService_getPaidCallHistory_args__isset() : start(false), size(false), language(false) {}
  bool start :1;
  bool size :1;
  bool language :1;
} _CallService_getPaidCallHistory_args__isset;

class CallService_getPaidCallHistory_args {
 public:

  CallService_getPaidCallHistory_args(const CallService_getPaidCallHistory_args&);
  CallService_getPaidCallHistory_args& operator=(const CallService_getPaidCallHistory_args&);
  CallService_getPaidCallHistory_args() : start(0), size(0), language() {
  }

  virtual ~CallService_getPaidCallHistory_args() throw();
  int64_t start;
  int32_t size;
  std::string language;

  _CallService_getPaidCallHistory_args__isset __isset;

  void __set_start(const int64_t val);

  void __set_size(const int32_t val);

  void __set_language(const std::string& val);

  bool operator == (const CallService_getPaidCallHistory_args & rhs) const
  {
    if (!(start == rhs.start))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(language == rhs.language))
      return false;
    return true;
  }
  bool operator != (const CallService_getPaidCallHistory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getPaidCallHistory_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getPaidCallHistory_pargs {
 public:


  virtual ~CallService_getPaidCallHistory_pargs() throw();
  const int64_t* start;
  const int32_t* size;
  const std::string* language;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getPaidCallHistory_result__isset {
  _CallService_getPaidCallHistory_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getPaidCallHistory_result__isset;

class CallService_getPaidCallHistory_result {
 public:

  CallService_getPaidCallHistory_result(const CallService_getPaidCallHistory_result&);
  CallService_getPaidCallHistory_result& operator=(const CallService_getPaidCallHistory_result&);
  CallService_getPaidCallHistory_result() {
  }

  virtual ~CallService_getPaidCallHistory_result() throw();
  PaidCallHistoryResult success;
  TalkException e;

  _CallService_getPaidCallHistory_result__isset __isset;

  void __set_success(const PaidCallHistoryResult& val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getPaidCallHistory_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getPaidCallHistory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getPaidCallHistory_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getPaidCallHistory_presult__isset {
  _CallService_getPaidCallHistory_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getPaidCallHistory_presult__isset;

class CallService_getPaidCallHistory_presult {
 public:


  virtual ~CallService_getPaidCallHistory_presult() throw();
  PaidCallHistoryResult* success;
  TalkException e;

  _CallService_getPaidCallHistory_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_sendPinCodeOperation_args__isset {
  _CallService_sendPinCodeOperation_args__isset() : verifier(false) {}
  bool verifier :1;
} _CallService_sendPinCodeOperation_args__isset;

class CallService_sendPinCodeOperation_args {
 public:

  CallService_sendPinCodeOperation_args(const CallService_sendPinCodeOperation_args&);
  CallService_sendPinCodeOperation_args& operator=(const CallService_sendPinCodeOperation_args&);
  CallService_sendPinCodeOperation_args() : verifier() {
  }

  virtual ~CallService_sendPinCodeOperation_args() throw();
  std::string verifier;

  _CallService_sendPinCodeOperation_args__isset __isset;

  void __set_verifier(const std::string& val);

  bool operator == (const CallService_sendPinCodeOperation_args & rhs) const
  {
    if (!(verifier == rhs.verifier))
      return false;
    return true;
  }
  bool operator != (const CallService_sendPinCodeOperation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_sendPinCodeOperation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_sendPinCodeOperation_pargs {
 public:


  virtual ~CallService_sendPinCodeOperation_pargs() throw();
  const std::string* verifier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_sendPinCodeOperation_result__isset {
  _CallService_sendPinCodeOperation_result__isset() : e(false) {}
  bool e :1;
} _CallService_sendPinCodeOperation_result__isset;

class CallService_sendPinCodeOperation_result {
 public:

  CallService_sendPinCodeOperation_result(const CallService_sendPinCodeOperation_result&);
  CallService_sendPinCodeOperation_result& operator=(const CallService_sendPinCodeOperation_result&);
  CallService_sendPinCodeOperation_result() {
  }

  virtual ~CallService_sendPinCodeOperation_result() throw();
  TalkException e;

  _CallService_sendPinCodeOperation_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const CallService_sendPinCodeOperation_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_sendPinCodeOperation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_sendPinCodeOperation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_sendPinCodeOperation_presult__isset {
  _CallService_sendPinCodeOperation_presult__isset() : e(false) {}
  bool e :1;
} _CallService_sendPinCodeOperation_presult__isset;

class CallService_sendPinCodeOperation_presult {
 public:


  virtual ~CallService_sendPinCodeOperation_presult() throw();
  TalkException e;

  _CallService_sendPinCodeOperation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_inviteIntoGroupCall_args__isset {
  _CallService_inviteIntoGroupCall_args__isset() : chatMid(false), memberMids(false), mediaType(false) {}
  bool chatMid :1;
  bool memberMids :1;
  bool mediaType :1;
} _CallService_inviteIntoGroupCall_args__isset;

class CallService_inviteIntoGroupCall_args {
 public:

  CallService_inviteIntoGroupCall_args(const CallService_inviteIntoGroupCall_args&);
  CallService_inviteIntoGroupCall_args& operator=(const CallService_inviteIntoGroupCall_args&);
  CallService_inviteIntoGroupCall_args() : chatMid(), mediaType((GroupCallMediaType::type)0) {
  }

  virtual ~CallService_inviteIntoGroupCall_args() throw();
  std::string chatMid;
  std::vector<std::string>  memberMids;
  GroupCallMediaType::type mediaType;

  _CallService_inviteIntoGroupCall_args__isset __isset;

  void __set_chatMid(const std::string& val);

  void __set_memberMids(const std::vector<std::string> & val);

  void __set_mediaType(const GroupCallMediaType::type val);

  bool operator == (const CallService_inviteIntoGroupCall_args & rhs) const
  {
    if (!(chatMid == rhs.chatMid))
      return false;
    if (!(memberMids == rhs.memberMids))
      return false;
    if (!(mediaType == rhs.mediaType))
      return false;
    return true;
  }
  bool operator != (const CallService_inviteIntoGroupCall_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_inviteIntoGroupCall_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_inviteIntoGroupCall_pargs {
 public:


  virtual ~CallService_inviteIntoGroupCall_pargs() throw();
  const std::string* chatMid;
  const std::vector<std::string> * memberMids;
  const GroupCallMediaType::type* mediaType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_inviteIntoGroupCall_result__isset {
  _CallService_inviteIntoGroupCall_result__isset() : e(false) {}
  bool e :1;
} _CallService_inviteIntoGroupCall_result__isset;

class CallService_inviteIntoGroupCall_result {
 public:

  CallService_inviteIntoGroupCall_result(const CallService_inviteIntoGroupCall_result&);
  CallService_inviteIntoGroupCall_result& operator=(const CallService_inviteIntoGroupCall_result&);
  CallService_inviteIntoGroupCall_result() {
  }

  virtual ~CallService_inviteIntoGroupCall_result() throw();
  TalkException e;

  _CallService_inviteIntoGroupCall_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const CallService_inviteIntoGroupCall_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_inviteIntoGroupCall_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_inviteIntoGroupCall_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_inviteIntoGroupCall_presult__isset {
  _CallService_inviteIntoGroupCall_presult__isset() : e(false) {}
  bool e :1;
} _CallService_inviteIntoGroupCall_presult__isset;

class CallService_inviteIntoGroupCall_presult {
 public:


  virtual ~CallService_inviteIntoGroupCall_presult() throw();
  TalkException e;

  _CallService_inviteIntoGroupCall_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CallService_getFriendMids_args {
 public:

  CallService_getFriendMids_args(const CallService_getFriendMids_args&);
  CallService_getFriendMids_args& operator=(const CallService_getFriendMids_args&);
  CallService_getFriendMids_args() {
  }

  virtual ~CallService_getFriendMids_args() throw();

  bool operator == (const CallService_getFriendMids_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CallService_getFriendMids_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getFriendMids_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getFriendMids_pargs {
 public:


  virtual ~CallService_getFriendMids_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getFriendMids_result__isset {
  _CallService_getFriendMids_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getFriendMids_result__isset;

class CallService_getFriendMids_result {
 public:

  CallService_getFriendMids_result(const CallService_getFriendMids_result&);
  CallService_getFriendMids_result& operator=(const CallService_getFriendMids_result&);
  CallService_getFriendMids_result() {
  }

  virtual ~CallService_getFriendMids_result() throw();
  std::vector<std::string>  success;
  TalkException e;

  _CallService_getFriendMids_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getFriendMids_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getFriendMids_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getFriendMids_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getFriendMids_presult__isset {
  _CallService_getFriendMids_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getFriendMids_presult__isset;

class CallService_getFriendMids_presult {
 public:


  virtual ~CallService_getFriendMids_presult() throw();
  std::vector<std::string> * success;
  TalkException e;

  _CallService_getFriendMids_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CallService_getMetaProfile_args {
 public:

  CallService_getMetaProfile_args(const CallService_getMetaProfile_args&);
  CallService_getMetaProfile_args& operator=(const CallService_getMetaProfile_args&);
  CallService_getMetaProfile_args() {
  }

  virtual ~CallService_getMetaProfile_args() throw();

  bool operator == (const CallService_getMetaProfile_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CallService_getMetaProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getMetaProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getMetaProfile_pargs {
 public:


  virtual ~CallService_getMetaProfile_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getMetaProfile_result__isset {
  _CallService_getMetaProfile_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getMetaProfile_result__isset;

class CallService_getMetaProfile_result {
 public:

  CallService_getMetaProfile_result(const CallService_getMetaProfile_result&);
  CallService_getMetaProfile_result& operator=(const CallService_getMetaProfile_result&);
  CallService_getMetaProfile_result() {
  }

  virtual ~CallService_getMetaProfile_result() throw();
  MetaProfile success;
  TalkException e;

  _CallService_getMetaProfile_result__isset __isset;

  void __set_success(const MetaProfile& val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getMetaProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getMetaProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getMetaProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getMetaProfile_presult__isset {
  _CallService_getMetaProfile_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getMetaProfile_presult__isset;

class CallService_getMetaProfile_presult {
 public:


  virtual ~CallService_getMetaProfile_presult() throw();
  MetaProfile* success;
  TalkException e;

  _CallService_getMetaProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_sendMessageForChannel_args__isset {
  _CallService_sendMessageForChannel_args__isset() : message(false) {}
  bool message :1;
} _CallService_sendMessageForChannel_args__isset;

class CallService_sendMessageForChannel_args {
 public:

  CallService_sendMessageForChannel_args(const CallService_sendMessageForChannel_args&);
  CallService_sendMessageForChannel_args& operator=(const CallService_sendMessageForChannel_args&);
  CallService_sendMessageForChannel_args() {
  }

  virtual ~CallService_sendMessageForChannel_args() throw();
  Message message;

  _CallService_sendMessageForChannel_args__isset __isset;

  void __set_message(const Message& val);

  bool operator == (const CallService_sendMessageForChannel_args & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const CallService_sendMessageForChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_sendMessageForChannel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_sendMessageForChannel_pargs {
 public:


  virtual ~CallService_sendMessageForChannel_pargs() throw();
  const Message* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_sendMessageForChannel_result__isset {
  _CallService_sendMessageForChannel_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_sendMessageForChannel_result__isset;

class CallService_sendMessageForChannel_result {
 public:

  CallService_sendMessageForChannel_result(const CallService_sendMessageForChannel_result&);
  CallService_sendMessageForChannel_result& operator=(const CallService_sendMessageForChannel_result&);
  CallService_sendMessageForChannel_result() {
  }

  virtual ~CallService_sendMessageForChannel_result() throw();
  Message success;
  TalkException e;

  _CallService_sendMessageForChannel_result__isset __isset;

  void __set_success(const Message& val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_sendMessageForChannel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_sendMessageForChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_sendMessageForChannel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_sendMessageForChannel_presult__isset {
  _CallService_sendMessageForChannel_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_sendMessageForChannel_presult__isset;

class CallService_sendMessageForChannel_presult {
 public:


  virtual ~CallService_sendMessageForChannel_presult() throw();
  Message* success;
  TalkException e;

  _CallService_sendMessageForChannel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CallService_activeBuddySubscriberCount_args {
 public:

  CallService_activeBuddySubscriberCount_args(const CallService_activeBuddySubscriberCount_args&);
  CallService_activeBuddySubscriberCount_args& operator=(const CallService_activeBuddySubscriberCount_args&);
  CallService_activeBuddySubscriberCount_args() {
  }

  virtual ~CallService_activeBuddySubscriberCount_args() throw();

  bool operator == (const CallService_activeBuddySubscriberCount_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CallService_activeBuddySubscriberCount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_activeBuddySubscriberCount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_activeBuddySubscriberCount_pargs {
 public:


  virtual ~CallService_activeBuddySubscriberCount_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_activeBuddySubscriberCount_result__isset {
  _CallService_activeBuddySubscriberCount_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_activeBuddySubscriberCount_result__isset;

class CallService_activeBuddySubscriberCount_result {
 public:

  CallService_activeBuddySubscriberCount_result(const CallService_activeBuddySubscriberCount_result&);
  CallService_activeBuddySubscriberCount_result& operator=(const CallService_activeBuddySubscriberCount_result&);
  CallService_activeBuddySubscriberCount_result() : success(0) {
  }

  virtual ~CallService_activeBuddySubscriberCount_result() throw();
  int64_t success;
  TalkException e;

  _CallService_activeBuddySubscriberCount_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_activeBuddySubscriberCount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_activeBuddySubscriberCount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_activeBuddySubscriberCount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_activeBuddySubscriberCount_presult__isset {
  _CallService_activeBuddySubscriberCount_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_activeBuddySubscriberCount_presult__isset;

class CallService_activeBuddySubscriberCount_presult {
 public:


  virtual ~CallService_activeBuddySubscriberCount_presult() throw();
  int64_t* success;
  TalkException e;

  _CallService_activeBuddySubscriberCount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_getCallCreditPurchaseHistory_args__isset {
  _CallService_getCallCreditPurchaseHistory_args__isset() : request(false) {}
  bool request :1;
} _CallService_getCallCreditPurchaseHistory_args__isset;

class CallService_getCallCreditPurchaseHistory_args {
 public:

  CallService_getCallCreditPurchaseHistory_args(const CallService_getCallCreditPurchaseHistory_args&);
  CallService_getCallCreditPurchaseHistory_args& operator=(const CallService_getCallCreditPurchaseHistory_args&);
  CallService_getCallCreditPurchaseHistory_args() {
  }

  virtual ~CallService_getCallCreditPurchaseHistory_args() throw();
  CoinHistoryCondition request;

  _CallService_getCallCreditPurchaseHistory_args__isset __isset;

  void __set_request(const CoinHistoryCondition& val);

  bool operator == (const CallService_getCallCreditPurchaseHistory_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const CallService_getCallCreditPurchaseHistory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getCallCreditPurchaseHistory_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getCallCreditPurchaseHistory_pargs {
 public:


  virtual ~CallService_getCallCreditPurchaseHistory_pargs() throw();
  const CoinHistoryCondition* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getCallCreditPurchaseHistory_result__isset {
  _CallService_getCallCreditPurchaseHistory_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getCallCreditPurchaseHistory_result__isset;

class CallService_getCallCreditPurchaseHistory_result {
 public:

  CallService_getCallCreditPurchaseHistory_result(const CallService_getCallCreditPurchaseHistory_result&);
  CallService_getCallCreditPurchaseHistory_result& operator=(const CallService_getCallCreditPurchaseHistory_result&);
  CallService_getCallCreditPurchaseHistory_result() {
  }

  virtual ~CallService_getCallCreditPurchaseHistory_result() throw();
  CoinHistoryResult success;
  TalkException e;

  _CallService_getCallCreditPurchaseHistory_result__isset __isset;

  void __set_success(const CoinHistoryResult& val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getCallCreditPurchaseHistory_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getCallCreditPurchaseHistory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getCallCreditPurchaseHistory_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getCallCreditPurchaseHistory_presult__isset {
  _CallService_getCallCreditPurchaseHistory_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getCallCreditPurchaseHistory_presult__isset;

class CallService_getCallCreditPurchaseHistory_presult {
 public:


  virtual ~CallService_getCallCreditPurchaseHistory_presult() throw();
  CoinHistoryResult* success;
  TalkException e;

  _CallService_getCallCreditPurchaseHistory_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_isRoomMember_args__isset {
  _CallService_isRoomMember_args__isset() : roomId(false) {}
  bool roomId :1;
} _CallService_isRoomMember_args__isset;

class CallService_isRoomMember_args {
 public:

  CallService_isRoomMember_args(const CallService_isRoomMember_args&);
  CallService_isRoomMember_args& operator=(const CallService_isRoomMember_args&);
  CallService_isRoomMember_args() : roomId() {
  }

  virtual ~CallService_isRoomMember_args() throw();
  std::string roomId;

  _CallService_isRoomMember_args__isset __isset;

  void __set_roomId(const std::string& val);

  bool operator == (const CallService_isRoomMember_args & rhs) const
  {
    if (!(roomId == rhs.roomId))
      return false;
    return true;
  }
  bool operator != (const CallService_isRoomMember_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_isRoomMember_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_isRoomMember_pargs {
 public:


  virtual ~CallService_isRoomMember_pargs() throw();
  const std::string* roomId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_isRoomMember_result__isset {
  _CallService_isRoomMember_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_isRoomMember_result__isset;

class CallService_isRoomMember_result {
 public:

  CallService_isRoomMember_result(const CallService_isRoomMember_result&);
  CallService_isRoomMember_result& operator=(const CallService_isRoomMember_result&);
  CallService_isRoomMember_result() : success(0) {
  }

  virtual ~CallService_isRoomMember_result() throw();
  bool success;
  TalkException e;

  _CallService_isRoomMember_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_isRoomMember_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_isRoomMember_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_isRoomMember_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_isRoomMember_presult__isset {
  _CallService_isRoomMember_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_isRoomMember_presult__isset;

class CallService_isRoomMember_presult {
 public:


  virtual ~CallService_isRoomMember_presult() throw();
  bool* success;
  TalkException e;

  _CallService_isRoomMember_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_sendSystemOAMessage_args__isset {
  _CallService_sendSystemOAMessage_args__isset() : message(false) {}
  bool message :1;
} _CallService_sendSystemOAMessage_args__isset;

class CallService_sendSystemOAMessage_args {
 public:

  CallService_sendSystemOAMessage_args(const CallService_sendSystemOAMessage_args&);
  CallService_sendSystemOAMessage_args& operator=(const CallService_sendSystemOAMessage_args&);
  CallService_sendSystemOAMessage_args() {
  }

  virtual ~CallService_sendSystemOAMessage_args() throw();
  Message message;

  _CallService_sendSystemOAMessage_args__isset __isset;

  void __set_message(const Message& val);

  bool operator == (const CallService_sendSystemOAMessage_args & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const CallService_sendSystemOAMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_sendSystemOAMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_sendSystemOAMessage_pargs {
 public:


  virtual ~CallService_sendSystemOAMessage_pargs() throw();
  const Message* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_sendSystemOAMessage_result__isset {
  _CallService_sendSystemOAMessage_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_sendSystemOAMessage_result__isset;

class CallService_sendSystemOAMessage_result {
 public:

  CallService_sendSystemOAMessage_result(const CallService_sendSystemOAMessage_result&);
  CallService_sendSystemOAMessage_result& operator=(const CallService_sendSystemOAMessage_result&);
  CallService_sendSystemOAMessage_result() {
  }

  virtual ~CallService_sendSystemOAMessage_result() throw();
  Message success;
  TalkException e;

  _CallService_sendSystemOAMessage_result__isset __isset;

  void __set_success(const Message& val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_sendSystemOAMessage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_sendSystemOAMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_sendSystemOAMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_sendSystemOAMessage_presult__isset {
  _CallService_sendSystemOAMessage_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_sendSystemOAMessage_presult__isset;

class CallService_sendSystemOAMessage_presult {
 public:


  virtual ~CallService_sendSystemOAMessage_presult() throw();
  Message* success;
  TalkException e;

  _CallService_sendSystemOAMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_acquirePaidCallRoute_args__isset {
  _CallService_acquirePaidCallRoute_args__isset() : paidCallType(false), dialedNumber(false), language(false), networkCode(false), disableCallerId(false), referer(false), adSessionId(false) {}
  bool paidCallType :1;
  bool dialedNumber :1;
  bool language :1;
  bool networkCode :1;
  bool disableCallerId :1;
  bool referer :1;
  bool adSessionId :1;
} _CallService_acquirePaidCallRoute_args__isset;

class CallService_acquirePaidCallRoute_args {
 public:

  CallService_acquirePaidCallRoute_args(const CallService_acquirePaidCallRoute_args&);
  CallService_acquirePaidCallRoute_args& operator=(const CallService_acquirePaidCallRoute_args&);
  CallService_acquirePaidCallRoute_args() : paidCallType((PaidCallType::type)0), dialedNumber(), language(), networkCode(), disableCallerId(0), referer(), adSessionId() {
  }

  virtual ~CallService_acquirePaidCallRoute_args() throw();
  PaidCallType::type paidCallType;
  std::string dialedNumber;
  std::string language;
  std::string networkCode;
  bool disableCallerId;
  std::string referer;
  std::string adSessionId;

  _CallService_acquirePaidCallRoute_args__isset __isset;

  void __set_paidCallType(const PaidCallType::type val);

  void __set_dialedNumber(const std::string& val);

  void __set_language(const std::string& val);

  void __set_networkCode(const std::string& val);

  void __set_disableCallerId(const bool val);

  void __set_referer(const std::string& val);

  void __set_adSessionId(const std::string& val);

  bool operator == (const CallService_acquirePaidCallRoute_args & rhs) const
  {
    if (!(paidCallType == rhs.paidCallType))
      return false;
    if (!(dialedNumber == rhs.dialedNumber))
      return false;
    if (!(language == rhs.language))
      return false;
    if (!(networkCode == rhs.networkCode))
      return false;
    if (!(disableCallerId == rhs.disableCallerId))
      return false;
    if (!(referer == rhs.referer))
      return false;
    if (!(adSessionId == rhs.adSessionId))
      return false;
    return true;
  }
  bool operator != (const CallService_acquirePaidCallRoute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_acquirePaidCallRoute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_acquirePaidCallRoute_pargs {
 public:


  virtual ~CallService_acquirePaidCallRoute_pargs() throw();
  const PaidCallType::type* paidCallType;
  const std::string* dialedNumber;
  const std::string* language;
  const std::string* networkCode;
  const bool* disableCallerId;
  const std::string* referer;
  const std::string* adSessionId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_acquirePaidCallRoute_result__isset {
  _CallService_acquirePaidCallRoute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_acquirePaidCallRoute_result__isset;

class CallService_acquirePaidCallRoute_result {
 public:

  CallService_acquirePaidCallRoute_result(const CallService_acquirePaidCallRoute_result&);
  CallService_acquirePaidCallRoute_result& operator=(const CallService_acquirePaidCallRoute_result&);
  CallService_acquirePaidCallRoute_result() {
  }

  virtual ~CallService_acquirePaidCallRoute_result() throw();
  PaidCallResponse success;
  TalkException e;

  _CallService_acquirePaidCallRoute_result__isset __isset;

  void __set_success(const PaidCallResponse& val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_acquirePaidCallRoute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_acquirePaidCallRoute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_acquirePaidCallRoute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_acquirePaidCallRoute_presult__isset {
  _CallService_acquirePaidCallRoute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_acquirePaidCallRoute_presult__isset;

class CallService_acquirePaidCallRoute_presult {
 public:


  virtual ~CallService_acquirePaidCallRoute_presult() throw();
  PaidCallResponse* success;
  TalkException e;

  _CallService_acquirePaidCallRoute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_getGroupsForChannel_args__isset {
  _CallService_getGroupsForChannel_args__isset() : groupIds(false) {}
  bool groupIds :1;
} _CallService_getGroupsForChannel_args__isset;

class CallService_getGroupsForChannel_args {
 public:

  CallService_getGroupsForChannel_args(const CallService_getGroupsForChannel_args&);
  CallService_getGroupsForChannel_args& operator=(const CallService_getGroupsForChannel_args&);
  CallService_getGroupsForChannel_args() {
  }

  virtual ~CallService_getGroupsForChannel_args() throw();
  std::vector<std::string>  groupIds;

  _CallService_getGroupsForChannel_args__isset __isset;

  void __set_groupIds(const std::vector<std::string> & val);

  bool operator == (const CallService_getGroupsForChannel_args & rhs) const
  {
    if (!(groupIds == rhs.groupIds))
      return false;
    return true;
  }
  bool operator != (const CallService_getGroupsForChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getGroupsForChannel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getGroupsForChannel_pargs {
 public:


  virtual ~CallService_getGroupsForChannel_pargs() throw();
  const std::vector<std::string> * groupIds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getGroupsForChannel_result__isset {
  _CallService_getGroupsForChannel_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getGroupsForChannel_result__isset;

class CallService_getGroupsForChannel_result {
 public:

  CallService_getGroupsForChannel_result(const CallService_getGroupsForChannel_result&);
  CallService_getGroupsForChannel_result& operator=(const CallService_getGroupsForChannel_result&);
  CallService_getGroupsForChannel_result() {
  }

  virtual ~CallService_getGroupsForChannel_result() throw();
  std::vector<Group>  success;
  TalkException e;

  _CallService_getGroupsForChannel_result__isset __isset;

  void __set_success(const std::vector<Group> & val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getGroupsForChannel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getGroupsForChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getGroupsForChannel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getGroupsForChannel_presult__isset {
  _CallService_getGroupsForChannel_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getGroupsForChannel_presult__isset;

class CallService_getGroupsForChannel_presult {
 public:


  virtual ~CallService_getGroupsForChannel_presult() throw();
  std::vector<Group> * success;
  TalkException e;

  _CallService_getGroupsForChannel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CallService_getUserCreateTime_args {
 public:

  CallService_getUserCreateTime_args(const CallService_getUserCreateTime_args&);
  CallService_getUserCreateTime_args& operator=(const CallService_getUserCreateTime_args&);
  CallService_getUserCreateTime_args() {
  }

  virtual ~CallService_getUserCreateTime_args() throw();

  bool operator == (const CallService_getUserCreateTime_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CallService_getUserCreateTime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getUserCreateTime_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getUserCreateTime_pargs {
 public:


  virtual ~CallService_getUserCreateTime_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getUserCreateTime_result__isset {
  _CallService_getUserCreateTime_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getUserCreateTime_result__isset;

class CallService_getUserCreateTime_result {
 public:

  CallService_getUserCreateTime_result(const CallService_getUserCreateTime_result&);
  CallService_getUserCreateTime_result& operator=(const CallService_getUserCreateTime_result&);
  CallService_getUserCreateTime_result() : success(0) {
  }

  virtual ~CallService_getUserCreateTime_result() throw();
  int64_t success;
  TalkException e;

  _CallService_getUserCreateTime_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getUserCreateTime_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getUserCreateTime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getUserCreateTime_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getUserCreateTime_presult__isset {
  _CallService_getUserCreateTime_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getUserCreateTime_presult__isset;

class CallService_getUserCreateTime_presult {
 public:


  virtual ~CallService_getUserCreateTime_presult() throw();
  int64_t* success;
  TalkException e;

  _CallService_getUserCreateTime_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_registerChannelCP_args__isset {
  _CallService_registerChannelCP_args__isset() : cpId(false), registerPassword(false) {}
  bool cpId :1;
  bool registerPassword :1;
} _CallService_registerChannelCP_args__isset;

class CallService_registerChannelCP_args {
 public:

  CallService_registerChannelCP_args(const CallService_registerChannelCP_args&);
  CallService_registerChannelCP_args& operator=(const CallService_registerChannelCP_args&);
  CallService_registerChannelCP_args() : cpId(), registerPassword() {
  }

  virtual ~CallService_registerChannelCP_args() throw();
  std::string cpId;
  std::string registerPassword;

  _CallService_registerChannelCP_args__isset __isset;

  void __set_cpId(const std::string& val);

  void __set_registerPassword(const std::string& val);

  bool operator == (const CallService_registerChannelCP_args & rhs) const
  {
    if (!(cpId == rhs.cpId))
      return false;
    if (!(registerPassword == rhs.registerPassword))
      return false;
    return true;
  }
  bool operator != (const CallService_registerChannelCP_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_registerChannelCP_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_registerChannelCP_pargs {
 public:


  virtual ~CallService_registerChannelCP_pargs() throw();
  const std::string* cpId;
  const std::string* registerPassword;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_registerChannelCP_result__isset {
  _CallService_registerChannelCP_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_registerChannelCP_result__isset;

class CallService_registerChannelCP_result {
 public:

  CallService_registerChannelCP_result(const CallService_registerChannelCP_result&);
  CallService_registerChannelCP_result& operator=(const CallService_registerChannelCP_result&);
  CallService_registerChannelCP_result() : success() {
  }

  virtual ~CallService_registerChannelCP_result() throw();
  std::string success;
  TalkException e;

  _CallService_registerChannelCP_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_registerChannelCP_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_registerChannelCP_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_registerChannelCP_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_registerChannelCP_presult__isset {
  _CallService_registerChannelCP_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_registerChannelCP_presult__isset;

class CallService_registerChannelCP_presult {
 public:


  virtual ~CallService_registerChannelCP_presult() throw();
  std::string* success;
  TalkException e;

  _CallService_registerChannelCP_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_reserveCallCreditPurchase_args__isset {
  _CallService_reserveCallCreditPurchase_args__isset() : request(false) {}
  bool request :1;
} _CallService_reserveCallCreditPurchase_args__isset;

class CallService_reserveCallCreditPurchase_args {
 public:

  CallService_reserveCallCreditPurchase_args(const CallService_reserveCallCreditPurchase_args&);
  CallService_reserveCallCreditPurchase_args& operator=(const CallService_reserveCallCreditPurchase_args&);
  CallService_reserveCallCreditPurchase_args() {
  }

  virtual ~CallService_reserveCallCreditPurchase_args() throw();
  CoinPurchaseReservation request;

  _CallService_reserveCallCreditPurchase_args__isset __isset;

  void __set_request(const CoinPurchaseReservation& val);

  bool operator == (const CallService_reserveCallCreditPurchase_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const CallService_reserveCallCreditPurchase_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_reserveCallCreditPurchase_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_reserveCallCreditPurchase_pargs {
 public:


  virtual ~CallService_reserveCallCreditPurchase_pargs() throw();
  const CoinPurchaseReservation* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_reserveCallCreditPurchase_result__isset {
  _CallService_reserveCallCreditPurchase_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_reserveCallCreditPurchase_result__isset;

class CallService_reserveCallCreditPurchase_result {
 public:

  CallService_reserveCallCreditPurchase_result(const CallService_reserveCallCreditPurchase_result&);
  CallService_reserveCallCreditPurchase_result& operator=(const CallService_reserveCallCreditPurchase_result&);
  CallService_reserveCallCreditPurchase_result() {
  }

  virtual ~CallService_reserveCallCreditPurchase_result() throw();
  PaymentReservationResult success;
  TalkException e;

  _CallService_reserveCallCreditPurchase_result__isset __isset;

  void __set_success(const PaymentReservationResult& val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_reserveCallCreditPurchase_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_reserveCallCreditPurchase_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_reserveCallCreditPurchase_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_reserveCallCreditPurchase_presult__isset {
  _CallService_reserveCallCreditPurchase_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_reserveCallCreditPurchase_presult__isset;

class CallService_reserveCallCreditPurchase_presult {
 public:


  virtual ~CallService_reserveCallCreditPurchase_presult() throw();
  PaymentReservationResult* success;
  TalkException e;

  _CallService_reserveCallCreditPurchase_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_acquirePaidCallCurrencyExchangeRate_args__isset {
  _CallService_acquirePaidCallCurrencyExchangeRate_args__isset() : language(false) {}
  bool language :1;
} _CallService_acquirePaidCallCurrencyExchangeRate_args__isset;

class CallService_acquirePaidCallCurrencyExchangeRate_args {
 public:

  CallService_acquirePaidCallCurrencyExchangeRate_args(const CallService_acquirePaidCallCurrencyExchangeRate_args&);
  CallService_acquirePaidCallCurrencyExchangeRate_args& operator=(const CallService_acquirePaidCallCurrencyExchangeRate_args&);
  CallService_acquirePaidCallCurrencyExchangeRate_args() : language() {
  }

  virtual ~CallService_acquirePaidCallCurrencyExchangeRate_args() throw();
  std::string language;

  _CallService_acquirePaidCallCurrencyExchangeRate_args__isset __isset;

  void __set_language(const std::string& val);

  bool operator == (const CallService_acquirePaidCallCurrencyExchangeRate_args & rhs) const
  {
    if (!(language == rhs.language))
      return false;
    return true;
  }
  bool operator != (const CallService_acquirePaidCallCurrencyExchangeRate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_acquirePaidCallCurrencyExchangeRate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_acquirePaidCallCurrencyExchangeRate_pargs {
 public:


  virtual ~CallService_acquirePaidCallCurrencyExchangeRate_pargs() throw();
  const std::string* language;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_acquirePaidCallCurrencyExchangeRate_result__isset {
  _CallService_acquirePaidCallCurrencyExchangeRate_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_acquirePaidCallCurrencyExchangeRate_result__isset;

class CallService_acquirePaidCallCurrencyExchangeRate_result {
 public:

  CallService_acquirePaidCallCurrencyExchangeRate_result(const CallService_acquirePaidCallCurrencyExchangeRate_result&);
  CallService_acquirePaidCallCurrencyExchangeRate_result& operator=(const CallService_acquirePaidCallCurrencyExchangeRate_result&);
  CallService_acquirePaidCallCurrencyExchangeRate_result() {
  }

  virtual ~CallService_acquirePaidCallCurrencyExchangeRate_result() throw();
  std::vector<PaidCallCurrencyExchangeRate>  success;
  TalkException e;

  _CallService_acquirePaidCallCurrencyExchangeRate_result__isset __isset;

  void __set_success(const std::vector<PaidCallCurrencyExchangeRate> & val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_acquirePaidCallCurrencyExchangeRate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_acquirePaidCallCurrencyExchangeRate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_acquirePaidCallCurrencyExchangeRate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_acquirePaidCallCurrencyExchangeRate_presult__isset {
  _CallService_acquirePaidCallCurrencyExchangeRate_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_acquirePaidCallCurrencyExchangeRate_presult__isset;

class CallService_acquirePaidCallCurrencyExchangeRate_presult {
 public:


  virtual ~CallService_acquirePaidCallCurrencyExchangeRate_presult() throw();
  std::vector<PaidCallCurrencyExchangeRate> * success;
  TalkException e;

  _CallService_acquirePaidCallCurrencyExchangeRate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_getRoomMemberMidsForAppPlatform_args__isset {
  _CallService_getRoomMemberMidsForAppPlatform_args__isset() : roomId(false) {}
  bool roomId :1;
} _CallService_getRoomMemberMidsForAppPlatform_args__isset;

class CallService_getRoomMemberMidsForAppPlatform_args {
 public:

  CallService_getRoomMemberMidsForAppPlatform_args(const CallService_getRoomMemberMidsForAppPlatform_args&);
  CallService_getRoomMemberMidsForAppPlatform_args& operator=(const CallService_getRoomMemberMidsForAppPlatform_args&);
  CallService_getRoomMemberMidsForAppPlatform_args() : roomId() {
  }

  virtual ~CallService_getRoomMemberMidsForAppPlatform_args() throw();
  std::string roomId;

  _CallService_getRoomMemberMidsForAppPlatform_args__isset __isset;

  void __set_roomId(const std::string& val);

  bool operator == (const CallService_getRoomMemberMidsForAppPlatform_args & rhs) const
  {
    if (!(roomId == rhs.roomId))
      return false;
    return true;
  }
  bool operator != (const CallService_getRoomMemberMidsForAppPlatform_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getRoomMemberMidsForAppPlatform_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getRoomMemberMidsForAppPlatform_pargs {
 public:


  virtual ~CallService_getRoomMemberMidsForAppPlatform_pargs() throw();
  const std::string* roomId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getRoomMemberMidsForAppPlatform_result__isset {
  _CallService_getRoomMemberMidsForAppPlatform_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getRoomMemberMidsForAppPlatform_result__isset;

class CallService_getRoomMemberMidsForAppPlatform_result {
 public:

  CallService_getRoomMemberMidsForAppPlatform_result(const CallService_getRoomMemberMidsForAppPlatform_result&);
  CallService_getRoomMemberMidsForAppPlatform_result& operator=(const CallService_getRoomMemberMidsForAppPlatform_result&);
  CallService_getRoomMemberMidsForAppPlatform_result() {
  }

  virtual ~CallService_getRoomMemberMidsForAppPlatform_result() throw();
  std::vector<std::string>  success;
  TalkException e;

  _CallService_getRoomMemberMidsForAppPlatform_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getRoomMemberMidsForAppPlatform_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getRoomMemberMidsForAppPlatform_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getRoomMemberMidsForAppPlatform_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getRoomMemberMidsForAppPlatform_presult__isset {
  _CallService_getRoomMemberMidsForAppPlatform_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getRoomMemberMidsForAppPlatform_presult__isset;

class CallService_getRoomMemberMidsForAppPlatform_presult {
 public:


  virtual ~CallService_getRoomMemberMidsForAppPlatform_presult() throw();
  std::vector<std::string> * success;
  TalkException e;

  _CallService_getRoomMemberMidsForAppPlatform_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_getPaidCallBalanceList_args__isset {
  _CallService_getPaidCallBalanceList_args__isset() : language(false) {}
  bool language :1;
} _CallService_getPaidCallBalanceList_args__isset;

class CallService_getPaidCallBalanceList_args {
 public:

  CallService_getPaidCallBalanceList_args(const CallService_getPaidCallBalanceList_args&);
  CallService_getPaidCallBalanceList_args& operator=(const CallService_getPaidCallBalanceList_args&);
  CallService_getPaidCallBalanceList_args() : language() {
  }

  virtual ~CallService_getPaidCallBalanceList_args() throw();
  std::string language;

  _CallService_getPaidCallBalanceList_args__isset __isset;

  void __set_language(const std::string& val);

  bool operator == (const CallService_getPaidCallBalanceList_args & rhs) const
  {
    if (!(language == rhs.language))
      return false;
    return true;
  }
  bool operator != (const CallService_getPaidCallBalanceList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getPaidCallBalanceList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getPaidCallBalanceList_pargs {
 public:


  virtual ~CallService_getPaidCallBalanceList_pargs() throw();
  const std::string* language;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getPaidCallBalanceList_result__isset {
  _CallService_getPaidCallBalanceList_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getPaidCallBalanceList_result__isset;

class CallService_getPaidCallBalanceList_result {
 public:

  CallService_getPaidCallBalanceList_result(const CallService_getPaidCallBalanceList_result&);
  CallService_getPaidCallBalanceList_result& operator=(const CallService_getPaidCallBalanceList_result&);
  CallService_getPaidCallBalanceList_result() {
  }

  virtual ~CallService_getPaidCallBalanceList_result() throw();
  std::vector<PaidCallBalance>  success;
  TalkException e;

  _CallService_getPaidCallBalanceList_result__isset __isset;

  void __set_success(const std::vector<PaidCallBalance> & val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getPaidCallBalanceList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getPaidCallBalanceList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getPaidCallBalanceList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getPaidCallBalanceList_presult__isset {
  _CallService_getPaidCallBalanceList_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getPaidCallBalanceList_presult__isset;

class CallService_getPaidCallBalanceList_presult {
 public:


  virtual ~CallService_getPaidCallBalanceList_presult() throw();
  std::vector<PaidCallBalance> * success;
  TalkException e;

  _CallService_getPaidCallBalanceList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_getPersonalInfos_args__isset {
  _CallService_getPersonalInfos_args__isset() : requiredPersonalInfos(false) {}
  bool requiredPersonalInfos :1;
} _CallService_getPersonalInfos_args__isset;

class CallService_getPersonalInfos_args {
 public:

  CallService_getPersonalInfos_args(const CallService_getPersonalInfos_args&);
  CallService_getPersonalInfos_args& operator=(const CallService_getPersonalInfos_args&);
  CallService_getPersonalInfos_args() {
  }

  virtual ~CallService_getPersonalInfos_args() throw();
  std::set<PersonalInfo::type>  requiredPersonalInfos;

  _CallService_getPersonalInfos_args__isset __isset;

  void __set_requiredPersonalInfos(const std::set<PersonalInfo::type> & val);

  bool operator == (const CallService_getPersonalInfos_args & rhs) const
  {
    if (!(requiredPersonalInfos == rhs.requiredPersonalInfos))
      return false;
    return true;
  }
  bool operator != (const CallService_getPersonalInfos_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getPersonalInfos_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getPersonalInfos_pargs {
 public:


  virtual ~CallService_getPersonalInfos_pargs() throw();
  const std::set<PersonalInfo::type> * requiredPersonalInfos;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getPersonalInfos_result__isset {
  _CallService_getPersonalInfos_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getPersonalInfos_result__isset;

class CallService_getPersonalInfos_result {
 public:

  CallService_getPersonalInfos_result(const CallService_getPersonalInfos_result&);
  CallService_getPersonalInfos_result& operator=(const CallService_getPersonalInfos_result&);
  CallService_getPersonalInfos_result() {
  }

  virtual ~CallService_getPersonalInfos_result() throw();
  std::map<PersonalInfo::type, std::string>  success;
  TalkException e;

  _CallService_getPersonalInfos_result__isset __isset;

  void __set_success(const std::map<PersonalInfo::type, std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getPersonalInfos_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getPersonalInfos_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getPersonalInfos_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getPersonalInfos_presult__isset {
  _CallService_getPersonalInfos_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getPersonalInfos_presult__isset;

class CallService_getPersonalInfos_presult {
 public:


  virtual ~CallService_getPersonalInfos_presult() throw();
  std::map<PersonalInfo::type, std::string> * success;
  TalkException e;

  _CallService_getPersonalInfos_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_getPrimaryClientsForChannel_args__isset {
  _CallService_getPrimaryClientsForChannel_args__isset() : userMids(false) {}
  bool userMids :1;
} _CallService_getPrimaryClientsForChannel_args__isset;

class CallService_getPrimaryClientsForChannel_args {
 public:

  CallService_getPrimaryClientsForChannel_args(const CallService_getPrimaryClientsForChannel_args&);
  CallService_getPrimaryClientsForChannel_args& operator=(const CallService_getPrimaryClientsForChannel_args&);
  CallService_getPrimaryClientsForChannel_args() {
  }

  virtual ~CallService_getPrimaryClientsForChannel_args() throw();
  std::vector<std::string>  userMids;

  _CallService_getPrimaryClientsForChannel_args__isset __isset;

  void __set_userMids(const std::vector<std::string> & val);

  bool operator == (const CallService_getPrimaryClientsForChannel_args & rhs) const
  {
    if (!(userMids == rhs.userMids))
      return false;
    return true;
  }
  bool operator != (const CallService_getPrimaryClientsForChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getPrimaryClientsForChannel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getPrimaryClientsForChannel_pargs {
 public:


  virtual ~CallService_getPrimaryClientsForChannel_pargs() throw();
  const std::vector<std::string> * userMids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getPrimaryClientsForChannel_result__isset {
  _CallService_getPrimaryClientsForChannel_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getPrimaryClientsForChannel_result__isset;

class CallService_getPrimaryClientsForChannel_result {
 public:

  CallService_getPrimaryClientsForChannel_result(const CallService_getPrimaryClientsForChannel_result&);
  CallService_getPrimaryClientsForChannel_result& operator=(const CallService_getPrimaryClientsForChannel_result&);
  CallService_getPrimaryClientsForChannel_result() {
  }

  virtual ~CallService_getPrimaryClientsForChannel_result() throw();
  std::vector<SimpleChannelClient>  success;
  TalkException e;

  _CallService_getPrimaryClientsForChannel_result__isset __isset;

  void __set_success(const std::vector<SimpleChannelClient> & val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getPrimaryClientsForChannel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getPrimaryClientsForChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getPrimaryClientsForChannel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getPrimaryClientsForChannel_presult__isset {
  _CallService_getPrimaryClientsForChannel_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getPrimaryClientsForChannel_presult__isset;

class CallService_getPrimaryClientsForChannel_presult {
 public:


  virtual ~CallService_getPrimaryClientsForChannel_presult() throw();
  std::vector<SimpleChannelClient> * success;
  TalkException e;

  _CallService_getPrimaryClientsForChannel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_addBuddyToContact_args__isset {
  _CallService_addBuddyToContact_args__isset() : buddyMid(false) {}
  bool buddyMid :1;
} _CallService_addBuddyToContact_args__isset;

class CallService_addBuddyToContact_args {
 public:

  CallService_addBuddyToContact_args(const CallService_addBuddyToContact_args&);
  CallService_addBuddyToContact_args& operator=(const CallService_addBuddyToContact_args&);
  CallService_addBuddyToContact_args() : buddyMid() {
  }

  virtual ~CallService_addBuddyToContact_args() throw();
  std::string buddyMid;

  _CallService_addBuddyToContact_args__isset __isset;

  void __set_buddyMid(const std::string& val);

  bool operator == (const CallService_addBuddyToContact_args & rhs) const
  {
    if (!(buddyMid == rhs.buddyMid))
      return false;
    return true;
  }
  bool operator != (const CallService_addBuddyToContact_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_addBuddyToContact_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_addBuddyToContact_pargs {
 public:


  virtual ~CallService_addBuddyToContact_pargs() throw();
  const std::string* buddyMid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_addBuddyToContact_result__isset {
  _CallService_addBuddyToContact_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_addBuddyToContact_result__isset;

class CallService_addBuddyToContact_result {
 public:

  CallService_addBuddyToContact_result(const CallService_addBuddyToContact_result&);
  CallService_addBuddyToContact_result& operator=(const CallService_addBuddyToContact_result&);
  CallService_addBuddyToContact_result() {
  }

  virtual ~CallService_addBuddyToContact_result() throw();
  ContactTransition success;
  TalkException e;

  _CallService_addBuddyToContact_result__isset __isset;

  void __set_success(const ContactTransition& val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_addBuddyToContact_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_addBuddyToContact_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_addBuddyToContact_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_addBuddyToContact_presult__isset {
  _CallService_addBuddyToContact_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_addBuddyToContact_presult__isset;

class CallService_addBuddyToContact_presult {
 public:


  virtual ~CallService_addBuddyToContact_presult() throw();
  ContactTransition* success;
  TalkException e;

  _CallService_addBuddyToContact_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_getGroupMemberMidsForAppPlatform_args__isset {
  _CallService_getGroupMemberMidsForAppPlatform_args__isset() : groupId(false) {}
  bool groupId :1;
} _CallService_getGroupMemberMidsForAppPlatform_args__isset;

class CallService_getGroupMemberMidsForAppPlatform_args {
 public:

  CallService_getGroupMemberMidsForAppPlatform_args(const CallService_getGroupMemberMidsForAppPlatform_args&);
  CallService_getGroupMemberMidsForAppPlatform_args& operator=(const CallService_getGroupMemberMidsForAppPlatform_args&);
  CallService_getGroupMemberMidsForAppPlatform_args() : groupId() {
  }

  virtual ~CallService_getGroupMemberMidsForAppPlatform_args() throw();
  std::string groupId;

  _CallService_getGroupMemberMidsForAppPlatform_args__isset __isset;

  void __set_groupId(const std::string& val);

  bool operator == (const CallService_getGroupMemberMidsForAppPlatform_args & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    return true;
  }
  bool operator != (const CallService_getGroupMemberMidsForAppPlatform_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getGroupMemberMidsForAppPlatform_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getGroupMemberMidsForAppPlatform_pargs {
 public:


  virtual ~CallService_getGroupMemberMidsForAppPlatform_pargs() throw();
  const std::string* groupId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getGroupMemberMidsForAppPlatform_result__isset {
  _CallService_getGroupMemberMidsForAppPlatform_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getGroupMemberMidsForAppPlatform_result__isset;

class CallService_getGroupMemberMidsForAppPlatform_result {
 public:

  CallService_getGroupMemberMidsForAppPlatform_result(const CallService_getGroupMemberMidsForAppPlatform_result&);
  CallService_getGroupMemberMidsForAppPlatform_result& operator=(const CallService_getGroupMemberMidsForAppPlatform_result&);
  CallService_getGroupMemberMidsForAppPlatform_result() {
  }

  virtual ~CallService_getGroupMemberMidsForAppPlatform_result() throw();
  std::vector<std::string>  success;
  TalkException e;

  _CallService_getGroupMemberMidsForAppPlatform_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getGroupMemberMidsForAppPlatform_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getGroupMemberMidsForAppPlatform_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getGroupMemberMidsForAppPlatform_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getGroupMemberMidsForAppPlatform_presult__isset {
  _CallService_getGroupMemberMidsForAppPlatform_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getGroupMemberMidsForAppPlatform_presult__isset;

class CallService_getGroupMemberMidsForAppPlatform_presult {
 public:


  virtual ~CallService_getGroupMemberMidsForAppPlatform_presult() throw();
  std::vector<std::string> * success;
  TalkException e;

  _CallService_getGroupMemberMidsForAppPlatform_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CallService_getUserLanguage_args {
 public:

  CallService_getUserLanguage_args(const CallService_getUserLanguage_args&);
  CallService_getUserLanguage_args& operator=(const CallService_getUserLanguage_args&);
  CallService_getUserLanguage_args() {
  }

  virtual ~CallService_getUserLanguage_args() throw();

  bool operator == (const CallService_getUserLanguage_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CallService_getUserLanguage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getUserLanguage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getUserLanguage_pargs {
 public:


  virtual ~CallService_getUserLanguage_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getUserLanguage_result__isset {
  _CallService_getUserLanguage_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getUserLanguage_result__isset;

class CallService_getUserLanguage_result {
 public:

  CallService_getUserLanguage_result(const CallService_getUserLanguage_result&);
  CallService_getUserLanguage_result& operator=(const CallService_getUserLanguage_result&);
  CallService_getUserLanguage_result() : success() {
  }

  virtual ~CallService_getUserLanguage_result() throw();
  std::string success;
  TalkException e;

  _CallService_getUserLanguage_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getUserLanguage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getUserLanguage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getUserLanguage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getUserLanguage_presult__isset {
  _CallService_getUserLanguage_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getUserLanguage_presult__isset;

class CallService_getUserLanguage_presult {
 public:


  virtual ~CallService_getUserLanguage_presult() throw();
  std::string* success;
  TalkException e;

  _CallService_getUserLanguage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_lookupPaidCall_args__isset {
  _CallService_lookupPaidCall_args__isset() : dialedNumber(false), language(false), referer(false) {}
  bool dialedNumber :1;
  bool language :1;
  bool referer :1;
} _CallService_lookupPaidCall_args__isset;

class CallService_lookupPaidCall_args {
 public:

  CallService_lookupPaidCall_args(const CallService_lookupPaidCall_args&);
  CallService_lookupPaidCall_args& operator=(const CallService_lookupPaidCall_args&);
  CallService_lookupPaidCall_args() : dialedNumber(), language(), referer() {
  }

  virtual ~CallService_lookupPaidCall_args() throw();
  std::string dialedNumber;
  std::string language;
  std::string referer;

  _CallService_lookupPaidCall_args__isset __isset;

  void __set_dialedNumber(const std::string& val);

  void __set_language(const std::string& val);

  void __set_referer(const std::string& val);

  bool operator == (const CallService_lookupPaidCall_args & rhs) const
  {
    if (!(dialedNumber == rhs.dialedNumber))
      return false;
    if (!(language == rhs.language))
      return false;
    if (!(referer == rhs.referer))
      return false;
    return true;
  }
  bool operator != (const CallService_lookupPaidCall_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_lookupPaidCall_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_lookupPaidCall_pargs {
 public:


  virtual ~CallService_lookupPaidCall_pargs() throw();
  const std::string* dialedNumber;
  const std::string* language;
  const std::string* referer;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_lookupPaidCall_result__isset {
  _CallService_lookupPaidCall_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_lookupPaidCall_result__isset;

class CallService_lookupPaidCall_result {
 public:

  CallService_lookupPaidCall_result(const CallService_lookupPaidCall_result&);
  CallService_lookupPaidCall_result& operator=(const CallService_lookupPaidCall_result&);
  CallService_lookupPaidCall_result() {
  }

  virtual ~CallService_lookupPaidCall_result() throw();
  PaidCallResponse success;
  TalkException e;

  _CallService_lookupPaidCall_result__isset __isset;

  void __set_success(const PaidCallResponse& val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_lookupPaidCall_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_lookupPaidCall_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_lookupPaidCall_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_lookupPaidCall_presult__isset {
  _CallService_lookupPaidCall_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_lookupPaidCall_presult__isset;

class CallService_lookupPaidCall_presult {
 public:


  virtual ~CallService_lookupPaidCall_presult() throw();
  PaidCallResponse* success;
  TalkException e;

  _CallService_lookupPaidCall_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CallService_getExtendedProfile_args {
 public:

  CallService_getExtendedProfile_args(const CallService_getExtendedProfile_args&);
  CallService_getExtendedProfile_args& operator=(const CallService_getExtendedProfile_args&);
  CallService_getExtendedProfile_args() {
  }

  virtual ~CallService_getExtendedProfile_args() throw();

  bool operator == (const CallService_getExtendedProfile_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CallService_getExtendedProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getExtendedProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getExtendedProfile_pargs {
 public:


  virtual ~CallService_getExtendedProfile_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getExtendedProfile_result__isset {
  _CallService_getExtendedProfile_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getExtendedProfile_result__isset;

class CallService_getExtendedProfile_result {
 public:

  CallService_getExtendedProfile_result(const CallService_getExtendedProfile_result&);
  CallService_getExtendedProfile_result& operator=(const CallService_getExtendedProfile_result&);
  CallService_getExtendedProfile_result() {
  }

  virtual ~CallService_getExtendedProfile_result() throw();
  ExtendedProfile success;
  TalkException e;

  _CallService_getExtendedProfile_result__isset __isset;

  void __set_success(const ExtendedProfile& val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getExtendedProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getExtendedProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getExtendedProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getExtendedProfile_presult__isset {
  _CallService_getExtendedProfile_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getExtendedProfile_presult__isset;

class CallService_getExtendedProfile_presult {
 public:


  virtual ~CallService_getExtendedProfile_presult() throw();
  ExtendedProfile* success;
  TalkException e;

  _CallService_getExtendedProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_getReverseCompactContacts_args__isset {
  _CallService_getReverseCompactContacts_args__isset() : ids(false) {}
  bool ids :1;
} _CallService_getReverseCompactContacts_args__isset;

class CallService_getReverseCompactContacts_args {
 public:

  CallService_getReverseCompactContacts_args(const CallService_getReverseCompactContacts_args&);
  CallService_getReverseCompactContacts_args& operator=(const CallService_getReverseCompactContacts_args&);
  CallService_getReverseCompactContacts_args() {
  }

  virtual ~CallService_getReverseCompactContacts_args() throw();
  std::vector<std::string>  ids;

  _CallService_getReverseCompactContacts_args__isset __isset;

  void __set_ids(const std::vector<std::string> & val);

  bool operator == (const CallService_getReverseCompactContacts_args & rhs) const
  {
    if (!(ids == rhs.ids))
      return false;
    return true;
  }
  bool operator != (const CallService_getReverseCompactContacts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getReverseCompactContacts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getReverseCompactContacts_pargs {
 public:


  virtual ~CallService_getReverseCompactContacts_pargs() throw();
  const std::vector<std::string> * ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getReverseCompactContacts_result__isset {
  _CallService_getReverseCompactContacts_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getReverseCompactContacts_result__isset;

class CallService_getReverseCompactContacts_result {
 public:

  CallService_getReverseCompactContacts_result(const CallService_getReverseCompactContacts_result&);
  CallService_getReverseCompactContacts_result& operator=(const CallService_getReverseCompactContacts_result&);
  CallService_getReverseCompactContacts_result() {
  }

  virtual ~CallService_getReverseCompactContacts_result() throw();
  std::map<std::string, CompactContact>  success;
  TalkException e;

  _CallService_getReverseCompactContacts_result__isset __isset;

  void __set_success(const std::map<std::string, CompactContact> & val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getReverseCompactContacts_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getReverseCompactContacts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getReverseCompactContacts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getReverseCompactContacts_presult__isset {
  _CallService_getReverseCompactContacts_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getReverseCompactContacts_presult__isset;

class CallService_getReverseCompactContacts_presult {
 public:


  virtual ~CallService_getReverseCompactContacts_presult() throw();
  std::map<std::string, CompactContact> * success;
  TalkException e;

  _CallService_getReverseCompactContacts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CallService_getPaidCallAdStatus_args {
 public:

  CallService_getPaidCallAdStatus_args(const CallService_getPaidCallAdStatus_args&);
  CallService_getPaidCallAdStatus_args& operator=(const CallService_getPaidCallAdStatus_args&);
  CallService_getPaidCallAdStatus_args() {
  }

  virtual ~CallService_getPaidCallAdStatus_args() throw();

  bool operator == (const CallService_getPaidCallAdStatus_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CallService_getPaidCallAdStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getPaidCallAdStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getPaidCallAdStatus_pargs {
 public:


  virtual ~CallService_getPaidCallAdStatus_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getPaidCallAdStatus_result__isset {
  _CallService_getPaidCallAdStatus_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getPaidCallAdStatus_result__isset;

class CallService_getPaidCallAdStatus_result {
 public:

  CallService_getPaidCallAdStatus_result(const CallService_getPaidCallAdStatus_result&);
  CallService_getPaidCallAdStatus_result& operator=(const CallService_getPaidCallAdStatus_result&);
  CallService_getPaidCallAdStatus_result() {
  }

  virtual ~CallService_getPaidCallAdStatus_result() throw();
  PaidCallAdResult success;
  TalkException e;

  _CallService_getPaidCallAdStatus_result__isset __isset;

  void __set_success(const PaidCallAdResult& val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getPaidCallAdStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getPaidCallAdStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getPaidCallAdStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getPaidCallAdStatus_presult__isset {
  _CallService_getPaidCallAdStatus_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getPaidCallAdStatus_presult__isset;

class CallService_getPaidCallAdStatus_presult {
 public:


  virtual ~CallService_getPaidCallAdStatus_presult() throw();
  PaidCallAdResult* success;
  TalkException e;

  _CallService_getPaidCallAdStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_findContactByUseridWithoutAbuseBlockForChannel_args__isset {
  _CallService_findContactByUseridWithoutAbuseBlockForChannel_args__isset() : userid(false) {}
  bool userid :1;
} _CallService_findContactByUseridWithoutAbuseBlockForChannel_args__isset;

class CallService_findContactByUseridWithoutAbuseBlockForChannel_args {
 public:

  CallService_findContactByUseridWithoutAbuseBlockForChannel_args(const CallService_findContactByUseridWithoutAbuseBlockForChannel_args&);
  CallService_findContactByUseridWithoutAbuseBlockForChannel_args& operator=(const CallService_findContactByUseridWithoutAbuseBlockForChannel_args&);
  CallService_findContactByUseridWithoutAbuseBlockForChannel_args() : userid() {
  }

  virtual ~CallService_findContactByUseridWithoutAbuseBlockForChannel_args() throw();
  std::string userid;

  _CallService_findContactByUseridWithoutAbuseBlockForChannel_args__isset __isset;

  void __set_userid(const std::string& val);

  bool operator == (const CallService_findContactByUseridWithoutAbuseBlockForChannel_args & rhs) const
  {
    if (!(userid == rhs.userid))
      return false;
    return true;
  }
  bool operator != (const CallService_findContactByUseridWithoutAbuseBlockForChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_findContactByUseridWithoutAbuseBlockForChannel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_findContactByUseridWithoutAbuseBlockForChannel_pargs {
 public:


  virtual ~CallService_findContactByUseridWithoutAbuseBlockForChannel_pargs() throw();
  const std::string* userid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_findContactByUseridWithoutAbuseBlockForChannel_result__isset {
  _CallService_findContactByUseridWithoutAbuseBlockForChannel_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_findContactByUseridWithoutAbuseBlockForChannel_result__isset;

class CallService_findContactByUseridWithoutAbuseBlockForChannel_result {
 public:

  CallService_findContactByUseridWithoutAbuseBlockForChannel_result(const CallService_findContactByUseridWithoutAbuseBlockForChannel_result&);
  CallService_findContactByUseridWithoutAbuseBlockForChannel_result& operator=(const CallService_findContactByUseridWithoutAbuseBlockForChannel_result&);
  CallService_findContactByUseridWithoutAbuseBlockForChannel_result() {
  }

  virtual ~CallService_findContactByUseridWithoutAbuseBlockForChannel_result() throw();
  Contact success;
  TalkException e;

  _CallService_findContactByUseridWithoutAbuseBlockForChannel_result__isset __isset;

  void __set_success(const Contact& val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_findContactByUseridWithoutAbuseBlockForChannel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_findContactByUseridWithoutAbuseBlockForChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_findContactByUseridWithoutAbuseBlockForChannel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_findContactByUseridWithoutAbuseBlockForChannel_presult__isset {
  _CallService_findContactByUseridWithoutAbuseBlockForChannel_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_findContactByUseridWithoutAbuseBlockForChannel_presult__isset;

class CallService_findContactByUseridWithoutAbuseBlockForChannel_presult {
 public:


  virtual ~CallService_findContactByUseridWithoutAbuseBlockForChannel_presult() throw();
  Contact* success;
  TalkException e;

  _CallService_findContactByUseridWithoutAbuseBlockForChannel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_getGroupMemberMids_args__isset {
  _CallService_getGroupMemberMids_args__isset() : groupId(false) {}
  bool groupId :1;
} _CallService_getGroupMemberMids_args__isset;

class CallService_getGroupMemberMids_args {
 public:

  CallService_getGroupMemberMids_args(const CallService_getGroupMemberMids_args&);
  CallService_getGroupMemberMids_args& operator=(const CallService_getGroupMemberMids_args&);
  CallService_getGroupMemberMids_args() : groupId() {
  }

  virtual ~CallService_getGroupMemberMids_args() throw();
  std::string groupId;

  _CallService_getGroupMemberMids_args__isset __isset;

  void __set_groupId(const std::string& val);

  bool operator == (const CallService_getGroupMemberMids_args & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    return true;
  }
  bool operator != (const CallService_getGroupMemberMids_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getGroupMemberMids_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getGroupMemberMids_pargs {
 public:


  virtual ~CallService_getGroupMemberMids_pargs() throw();
  const std::string* groupId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getGroupMemberMids_result__isset {
  _CallService_getGroupMemberMids_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getGroupMemberMids_result__isset;

class CallService_getGroupMemberMids_result {
 public:

  CallService_getGroupMemberMids_result(const CallService_getGroupMemberMids_result&);
  CallService_getGroupMemberMids_result& operator=(const CallService_getGroupMemberMids_result&);
  CallService_getGroupMemberMids_result() {
  }

  virtual ~CallService_getGroupMemberMids_result() throw();
  std::vector<std::string>  success;
  TalkException e;

  _CallService_getGroupMemberMids_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getGroupMemberMids_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getGroupMemberMids_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getGroupMemberMids_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getGroupMemberMids_presult__isset {
  _CallService_getGroupMemberMids_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getGroupMemberMids_presult__isset;

class CallService_getGroupMemberMids_presult {
 public:


  virtual ~CallService_getGroupMemberMids_presult() throw();
  std::vector<std::string> * success;
  TalkException e;

  _CallService_getGroupMemberMids_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_sendMessageWithoutRelationship_args__isset {
  _CallService_sendMessageWithoutRelationship_args__isset() : message(false) {}
  bool message :1;
} _CallService_sendMessageWithoutRelationship_args__isset;

class CallService_sendMessageWithoutRelationship_args {
 public:

  CallService_sendMessageWithoutRelationship_args(const CallService_sendMessageWithoutRelationship_args&);
  CallService_sendMessageWithoutRelationship_args& operator=(const CallService_sendMessageWithoutRelationship_args&);
  CallService_sendMessageWithoutRelationship_args() {
  }

  virtual ~CallService_sendMessageWithoutRelationship_args() throw();
  Message message;

  _CallService_sendMessageWithoutRelationship_args__isset __isset;

  void __set_message(const Message& val);

  bool operator == (const CallService_sendMessageWithoutRelationship_args & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const CallService_sendMessageWithoutRelationship_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_sendMessageWithoutRelationship_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_sendMessageWithoutRelationship_pargs {
 public:


  virtual ~CallService_sendMessageWithoutRelationship_pargs() throw();
  const Message* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_sendMessageWithoutRelationship_result__isset {
  _CallService_sendMessageWithoutRelationship_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_sendMessageWithoutRelationship_result__isset;

class CallService_sendMessageWithoutRelationship_result {
 public:

  CallService_sendMessageWithoutRelationship_result(const CallService_sendMessageWithoutRelationship_result&);
  CallService_sendMessageWithoutRelationship_result& operator=(const CallService_sendMessageWithoutRelationship_result&);
  CallService_sendMessageWithoutRelationship_result() {
  }

  virtual ~CallService_sendMessageWithoutRelationship_result() throw();
  Message success;
  TalkException e;

  _CallService_sendMessageWithoutRelationship_result__isset __isset;

  void __set_success(const Message& val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_sendMessageWithoutRelationship_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_sendMessageWithoutRelationship_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_sendMessageWithoutRelationship_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_sendMessageWithoutRelationship_presult__isset {
  _CallService_sendMessageWithoutRelationship_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_sendMessageWithoutRelationship_presult__isset;

class CallService_sendMessageWithoutRelationship_presult {
 public:


  virtual ~CallService_sendMessageWithoutRelationship_presult() throw();
  Message* success;
  TalkException e;

  _CallService_sendMessageWithoutRelationship_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_displayBuddySubscriberCountInBulk_args__isset {
  _CallService_displayBuddySubscriberCountInBulk_args__isset() : mids(false) {}
  bool mids :1;
} _CallService_displayBuddySubscriberCountInBulk_args__isset;

class CallService_displayBuddySubscriberCountInBulk_args {
 public:

  CallService_displayBuddySubscriberCountInBulk_args(const CallService_displayBuddySubscriberCountInBulk_args&);
  CallService_displayBuddySubscriberCountInBulk_args& operator=(const CallService_displayBuddySubscriberCountInBulk_args&);
  CallService_displayBuddySubscriberCountInBulk_args() {
  }

  virtual ~CallService_displayBuddySubscriberCountInBulk_args() throw();
  std::vector<std::string>  mids;

  _CallService_displayBuddySubscriberCountInBulk_args__isset __isset;

  void __set_mids(const std::vector<std::string> & val);

  bool operator == (const CallService_displayBuddySubscriberCountInBulk_args & rhs) const
  {
    if (!(mids == rhs.mids))
      return false;
    return true;
  }
  bool operator != (const CallService_displayBuddySubscriberCountInBulk_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_displayBuddySubscriberCountInBulk_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_displayBuddySubscriberCountInBulk_pargs {
 public:


  virtual ~CallService_displayBuddySubscriberCountInBulk_pargs() throw();
  const std::vector<std::string> * mids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_displayBuddySubscriberCountInBulk_result__isset {
  _CallService_displayBuddySubscriberCountInBulk_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_displayBuddySubscriberCountInBulk_result__isset;

class CallService_displayBuddySubscriberCountInBulk_result {
 public:

  CallService_displayBuddySubscriberCountInBulk_result(const CallService_displayBuddySubscriberCountInBulk_result&);
  CallService_displayBuddySubscriberCountInBulk_result& operator=(const CallService_displayBuddySubscriberCountInBulk_result&);
  CallService_displayBuddySubscriberCountInBulk_result() {
  }

  virtual ~CallService_displayBuddySubscriberCountInBulk_result() throw();
  std::map<std::string, int64_t>  success;
  TalkException e;

  _CallService_displayBuddySubscriberCountInBulk_result__isset __isset;

  void __set_success(const std::map<std::string, int64_t> & val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_displayBuddySubscriberCountInBulk_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_displayBuddySubscriberCountInBulk_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_displayBuddySubscriberCountInBulk_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_displayBuddySubscriberCountInBulk_presult__isset {
  _CallService_displayBuddySubscriberCountInBulk_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_displayBuddySubscriberCountInBulk_presult__isset;

class CallService_displayBuddySubscriberCountInBulk_presult {
 public:


  virtual ~CallService_displayBuddySubscriberCountInBulk_presult() throw();
  std::map<std::string, int64_t> * success;
  TalkException e;

  _CallService_displayBuddySubscriberCountInBulk_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_lookupRoomMembers_args__isset {
  _CallService_lookupRoomMembers_args__isset() : roomId(false), mids(false) {}
  bool roomId :1;
  bool mids :1;
} _CallService_lookupRoomMembers_args__isset;

class CallService_lookupRoomMembers_args {
 public:

  CallService_lookupRoomMembers_args(const CallService_lookupRoomMembers_args&);
  CallService_lookupRoomMembers_args& operator=(const CallService_lookupRoomMembers_args&);
  CallService_lookupRoomMembers_args() : roomId() {
  }

  virtual ~CallService_lookupRoomMembers_args() throw();
  std::string roomId;
  std::vector<std::string>  mids;

  _CallService_lookupRoomMembers_args__isset __isset;

  void __set_roomId(const std::string& val);

  void __set_mids(const std::vector<std::string> & val);

  bool operator == (const CallService_lookupRoomMembers_args & rhs) const
  {
    if (!(roomId == rhs.roomId))
      return false;
    if (!(mids == rhs.mids))
      return false;
    return true;
  }
  bool operator != (const CallService_lookupRoomMembers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_lookupRoomMembers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_lookupRoomMembers_pargs {
 public:


  virtual ~CallService_lookupRoomMembers_pargs() throw();
  const std::string* roomId;
  const std::vector<std::string> * mids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_lookupRoomMembers_result__isset {
  _CallService_lookupRoomMembers_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_lookupRoomMembers_result__isset;

class CallService_lookupRoomMembers_result {
 public:

  CallService_lookupRoomMembers_result(const CallService_lookupRoomMembers_result&);
  CallService_lookupRoomMembers_result& operator=(const CallService_lookupRoomMembers_result&);
  CallService_lookupRoomMembers_result() {
  }

  virtual ~CallService_lookupRoomMembers_result() throw();
  std::vector<SimpleChannelContact>  success;
  TalkException e;

  _CallService_lookupRoomMembers_result__isset __isset;

  void __set_success(const std::vector<SimpleChannelContact> & val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_lookupRoomMembers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_lookupRoomMembers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_lookupRoomMembers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_lookupRoomMembers_presult__isset {
  _CallService_lookupRoomMembers_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_lookupRoomMembers_presult__isset;

class CallService_lookupRoomMembers_presult {
 public:


  virtual ~CallService_lookupRoomMembers_presult() throw();
  std::vector<SimpleChannelContact> * success;
  TalkException e;

  _CallService_lookupRoomMembers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CallService_getFavoriteMidsForChannel_args {
 public:

  CallService_getFavoriteMidsForChannel_args(const CallService_getFavoriteMidsForChannel_args&);
  CallService_getFavoriteMidsForChannel_args& operator=(const CallService_getFavoriteMidsForChannel_args&);
  CallService_getFavoriteMidsForChannel_args() {
  }

  virtual ~CallService_getFavoriteMidsForChannel_args() throw();

  bool operator == (const CallService_getFavoriteMidsForChannel_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CallService_getFavoriteMidsForChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getFavoriteMidsForChannel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getFavoriteMidsForChannel_pargs {
 public:


  virtual ~CallService_getFavoriteMidsForChannel_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getFavoriteMidsForChannel_result__isset {
  _CallService_getFavoriteMidsForChannel_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getFavoriteMidsForChannel_result__isset;

class CallService_getFavoriteMidsForChannel_result {
 public:

  CallService_getFavoriteMidsForChannel_result(const CallService_getFavoriteMidsForChannel_result&);
  CallService_getFavoriteMidsForChannel_result& operator=(const CallService_getFavoriteMidsForChannel_result&);
  CallService_getFavoriteMidsForChannel_result() {
  }

  virtual ~CallService_getFavoriteMidsForChannel_result() throw();
  std::vector<std::string>  success;
  TalkException e;

  _CallService_getFavoriteMidsForChannel_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getFavoriteMidsForChannel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getFavoriteMidsForChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getFavoriteMidsForChannel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getFavoriteMidsForChannel_presult__isset {
  _CallService_getFavoriteMidsForChannel_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getFavoriteMidsForChannel_presult__isset;

class CallService_getFavoriteMidsForChannel_presult {
 public:


  virtual ~CallService_getFavoriteMidsForChannel_presult() throw();
  std::vector<std::string> * success;
  TalkException e;

  _CallService_getFavoriteMidsForChannel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CallService_getAllContactIdsForChannel_args {
 public:

  CallService_getAllContactIdsForChannel_args(const CallService_getAllContactIdsForChannel_args&);
  CallService_getAllContactIdsForChannel_args& operator=(const CallService_getAllContactIdsForChannel_args&);
  CallService_getAllContactIdsForChannel_args() {
  }

  virtual ~CallService_getAllContactIdsForChannel_args() throw();

  bool operator == (const CallService_getAllContactIdsForChannel_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CallService_getAllContactIdsForChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getAllContactIdsForChannel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getAllContactIdsForChannel_pargs {
 public:


  virtual ~CallService_getAllContactIdsForChannel_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getAllContactIdsForChannel_result__isset {
  _CallService_getAllContactIdsForChannel_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getAllContactIdsForChannel_result__isset;

class CallService_getAllContactIdsForChannel_result {
 public:

  CallService_getAllContactIdsForChannel_result(const CallService_getAllContactIdsForChannel_result&);
  CallService_getAllContactIdsForChannel_result& operator=(const CallService_getAllContactIdsForChannel_result&);
  CallService_getAllContactIdsForChannel_result() {
  }

  virtual ~CallService_getAllContactIdsForChannel_result() throw();
  std::vector<std::string>  success;
  TalkException e;

  _CallService_getAllContactIdsForChannel_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getAllContactIdsForChannel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getAllContactIdsForChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getAllContactIdsForChannel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getAllContactIdsForChannel_presult__isset {
  _CallService_getAllContactIdsForChannel_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getAllContactIdsForChannel_presult__isset;

class CallService_getAllContactIdsForChannel_presult {
 public:


  virtual ~CallService_getAllContactIdsForChannel_presult() throw();
  std::vector<std::string> * success;
  TalkException e;

  _CallService_getAllContactIdsForChannel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CallService_displayBuddySubscriberCount_args {
 public:

  CallService_displayBuddySubscriberCount_args(const CallService_displayBuddySubscriberCount_args&);
  CallService_displayBuddySubscriberCount_args& operator=(const CallService_displayBuddySubscriberCount_args&);
  CallService_displayBuddySubscriberCount_args() {
  }

  virtual ~CallService_displayBuddySubscriberCount_args() throw();

  bool operator == (const CallService_displayBuddySubscriberCount_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CallService_displayBuddySubscriberCount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_displayBuddySubscriberCount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_displayBuddySubscriberCount_pargs {
 public:


  virtual ~CallService_displayBuddySubscriberCount_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_displayBuddySubscriberCount_result__isset {
  _CallService_displayBuddySubscriberCount_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_displayBuddySubscriberCount_result__isset;

class CallService_displayBuddySubscriberCount_result {
 public:

  CallService_displayBuddySubscriberCount_result(const CallService_displayBuddySubscriberCount_result&);
  CallService_displayBuddySubscriberCount_result& operator=(const CallService_displayBuddySubscriberCount_result&);
  CallService_displayBuddySubscriberCount_result() : success(0) {
  }

  virtual ~CallService_displayBuddySubscriberCount_result() throw();
  int64_t success;
  TalkException e;

  _CallService_displayBuddySubscriberCount_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_displayBuddySubscriberCount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_displayBuddySubscriberCount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_displayBuddySubscriberCount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_displayBuddySubscriberCount_presult__isset {
  _CallService_displayBuddySubscriberCount_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_displayBuddySubscriberCount_presult__isset;

class CallService_displayBuddySubscriberCount_presult {
 public:


  virtual ~CallService_displayBuddySubscriberCount_presult() throw();
  int64_t* success;
  TalkException e;

  _CallService_displayBuddySubscriberCount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CallService_getProfileForChannel_args {
 public:

  CallService_getProfileForChannel_args(const CallService_getProfileForChannel_args&);
  CallService_getProfileForChannel_args& operator=(const CallService_getProfileForChannel_args&);
  CallService_getProfileForChannel_args() {
  }

  virtual ~CallService_getProfileForChannel_args() throw();

  bool operator == (const CallService_getProfileForChannel_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CallService_getProfileForChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getProfileForChannel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getProfileForChannel_pargs {
 public:


  virtual ~CallService_getProfileForChannel_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getProfileForChannel_result__isset {
  _CallService_getProfileForChannel_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getProfileForChannel_result__isset;

class CallService_getProfileForChannel_result {
 public:

  CallService_getProfileForChannel_result(const CallService_getProfileForChannel_result&);
  CallService_getProfileForChannel_result& operator=(const CallService_getProfileForChannel_result&);
  CallService_getProfileForChannel_result() {
  }

  virtual ~CallService_getProfileForChannel_result() throw();
  Profile success;
  TalkException e;

  _CallService_getProfileForChannel_result__isset __isset;

  void __set_success(const Profile& val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getProfileForChannel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getProfileForChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getProfileForChannel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getProfileForChannel_presult__isset {
  _CallService_getProfileForChannel_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getProfileForChannel_presult__isset;

class CallService_getProfileForChannel_presult {
 public:


  virtual ~CallService_getProfileForChannel_presult() throw();
  Profile* success;
  TalkException e;

  _CallService_getProfileForChannel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_getUserTickets_args__isset {
  _CallService_getUserTickets_args__isset() : userMids(false) {}
  bool userMids :1;
} _CallService_getUserTickets_args__isset;

class CallService_getUserTickets_args {
 public:

  CallService_getUserTickets_args(const CallService_getUserTickets_args&);
  CallService_getUserTickets_args& operator=(const CallService_getUserTickets_args&);
  CallService_getUserTickets_args() {
  }

  virtual ~CallService_getUserTickets_args() throw();
  std::vector<std::string>  userMids;

  _CallService_getUserTickets_args__isset __isset;

  void __set_userMids(const std::vector<std::string> & val);

  bool operator == (const CallService_getUserTickets_args & rhs) const
  {
    if (!(userMids == rhs.userMids))
      return false;
    return true;
  }
  bool operator != (const CallService_getUserTickets_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getUserTickets_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getUserTickets_pargs {
 public:


  virtual ~CallService_getUserTickets_pargs() throw();
  const std::vector<std::string> * userMids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getUserTickets_result__isset {
  _CallService_getUserTickets_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getUserTickets_result__isset;

class CallService_getUserTickets_result {
 public:

  CallService_getUserTickets_result(const CallService_getUserTickets_result&);
  CallService_getUserTickets_result& operator=(const CallService_getUserTickets_result&);
  CallService_getUserTickets_result() {
  }

  virtual ~CallService_getUserTickets_result() throw();
  std::vector<UserTicketResponse>  success;
  TalkException e;

  _CallService_getUserTickets_result__isset __isset;

  void __set_success(const std::vector<UserTicketResponse> & val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getUserTickets_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getUserTickets_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getUserTickets_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getUserTickets_presult__isset {
  _CallService_getUserTickets_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getUserTickets_presult__isset;

class CallService_getUserTickets_presult {
 public:


  virtual ~CallService_getUserTickets_presult() throw();
  std::vector<UserTicketResponse> * success;
  TalkException e;

  _CallService_getUserTickets_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CallService_getOAFriendMids_args {
 public:

  CallService_getOAFriendMids_args(const CallService_getOAFriendMids_args&);
  CallService_getOAFriendMids_args& operator=(const CallService_getOAFriendMids_args&);
  CallService_getOAFriendMids_args() {
  }

  virtual ~CallService_getOAFriendMids_args() throw();

  bool operator == (const CallService_getOAFriendMids_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CallService_getOAFriendMids_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getOAFriendMids_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getOAFriendMids_pargs {
 public:


  virtual ~CallService_getOAFriendMids_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getOAFriendMids_result__isset {
  _CallService_getOAFriendMids_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getOAFriendMids_result__isset;

class CallService_getOAFriendMids_result {
 public:

  CallService_getOAFriendMids_result(const CallService_getOAFriendMids_result&);
  CallService_getOAFriendMids_result& operator=(const CallService_getOAFriendMids_result&);
  CallService_getOAFriendMids_result() {
  }

  virtual ~CallService_getOAFriendMids_result() throw();
  std::vector<std::string>  success;
  TalkException e;

  _CallService_getOAFriendMids_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getOAFriendMids_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getOAFriendMids_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getOAFriendMids_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getOAFriendMids_presult__isset {
  _CallService_getOAFriendMids_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getOAFriendMids_presult__isset;

class CallService_getOAFriendMids_presult {
 public:


  virtual ~CallService_getOAFriendMids_presult() throw();
  std::vector<std::string> * success;
  TalkException e;

  _CallService_getOAFriendMids_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_searchPaidCallUserRate_args__isset {
  _CallService_searchPaidCallUserRate_args__isset() : countryCode(false), language(false) {}
  bool countryCode :1;
  bool language :1;
} _CallService_searchPaidCallUserRate_args__isset;

class CallService_searchPaidCallUserRate_args {
 public:

  CallService_searchPaidCallUserRate_args(const CallService_searchPaidCallUserRate_args&);
  CallService_searchPaidCallUserRate_args& operator=(const CallService_searchPaidCallUserRate_args&);
  CallService_searchPaidCallUserRate_args() : countryCode(), language() {
  }

  virtual ~CallService_searchPaidCallUserRate_args() throw();
  std::string countryCode;
  std::string language;

  _CallService_searchPaidCallUserRate_args__isset __isset;

  void __set_countryCode(const std::string& val);

  void __set_language(const std::string& val);

  bool operator == (const CallService_searchPaidCallUserRate_args & rhs) const
  {
    if (!(countryCode == rhs.countryCode))
      return false;
    if (!(language == rhs.language))
      return false;
    return true;
  }
  bool operator != (const CallService_searchPaidCallUserRate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_searchPaidCallUserRate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_searchPaidCallUserRate_pargs {
 public:


  virtual ~CallService_searchPaidCallUserRate_pargs() throw();
  const std::string* countryCode;
  const std::string* language;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_searchPaidCallUserRate_result__isset {
  _CallService_searchPaidCallUserRate_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_searchPaidCallUserRate_result__isset;

class CallService_searchPaidCallUserRate_result {
 public:

  CallService_searchPaidCallUserRate_result(const CallService_searchPaidCallUserRate_result&);
  CallService_searchPaidCallUserRate_result& operator=(const CallService_searchPaidCallUserRate_result&);
  CallService_searchPaidCallUserRate_result() {
  }

  virtual ~CallService_searchPaidCallUserRate_result() throw();
  std::vector<PaidCallUserRate>  success;
  TalkException e;

  _CallService_searchPaidCallUserRate_result__isset __isset;

  void __set_success(const std::vector<PaidCallUserRate> & val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_searchPaidCallUserRate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_searchPaidCallUserRate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_searchPaidCallUserRate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_searchPaidCallUserRate_presult__isset {
  _CallService_searchPaidCallUserRate_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_searchPaidCallUserRate_presult__isset;

class CallService_searchPaidCallUserRate_presult {
 public:


  virtual ~CallService_searchPaidCallUserRate_presult() throw();
  std::vector<PaidCallUserRate> * success;
  TalkException e;

  _CallService_searchPaidCallUserRate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CallService_getJoinedGroupIdsForChannel_args {
 public:

  CallService_getJoinedGroupIdsForChannel_args(const CallService_getJoinedGroupIdsForChannel_args&);
  CallService_getJoinedGroupIdsForChannel_args& operator=(const CallService_getJoinedGroupIdsForChannel_args&);
  CallService_getJoinedGroupIdsForChannel_args() {
  }

  virtual ~CallService_getJoinedGroupIdsForChannel_args() throw();

  bool operator == (const CallService_getJoinedGroupIdsForChannel_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CallService_getJoinedGroupIdsForChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getJoinedGroupIdsForChannel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getJoinedGroupIdsForChannel_pargs {
 public:


  virtual ~CallService_getJoinedGroupIdsForChannel_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getJoinedGroupIdsForChannel_result__isset {
  _CallService_getJoinedGroupIdsForChannel_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getJoinedGroupIdsForChannel_result__isset;

class CallService_getJoinedGroupIdsForChannel_result {
 public:

  CallService_getJoinedGroupIdsForChannel_result(const CallService_getJoinedGroupIdsForChannel_result&);
  CallService_getJoinedGroupIdsForChannel_result& operator=(const CallService_getJoinedGroupIdsForChannel_result&);
  CallService_getJoinedGroupIdsForChannel_result() {
  }

  virtual ~CallService_getJoinedGroupIdsForChannel_result() throw();
  std::vector<std::string>  success;
  TalkException e;

  _CallService_getJoinedGroupIdsForChannel_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getJoinedGroupIdsForChannel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getJoinedGroupIdsForChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getJoinedGroupIdsForChannel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getJoinedGroupIdsForChannel_presult__isset {
  _CallService_getJoinedGroupIdsForChannel_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getJoinedGroupIdsForChannel_presult__isset;

class CallService_getJoinedGroupIdsForChannel_presult {
 public:


  virtual ~CallService_getJoinedGroupIdsForChannel_presult() throw();
  std::vector<std::string> * success;
  TalkException e;

  _CallService_getJoinedGroupIdsForChannel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_acquireGroupCallRoute_args__isset {
  _CallService_acquireGroupCallRoute_args__isset() : chatMid(false), mediaType(false) {}
  bool chatMid :1;
  bool mediaType :1;
} _CallService_acquireGroupCallRoute_args__isset;

class CallService_acquireGroupCallRoute_args {
 public:

  CallService_acquireGroupCallRoute_args(const CallService_acquireGroupCallRoute_args&);
  CallService_acquireGroupCallRoute_args& operator=(const CallService_acquireGroupCallRoute_args&);
  CallService_acquireGroupCallRoute_args() : chatMid(), mediaType((GroupCallMediaType::type)0) {
  }

  virtual ~CallService_acquireGroupCallRoute_args() throw();
  std::string chatMid;
  GroupCallMediaType::type mediaType;

  _CallService_acquireGroupCallRoute_args__isset __isset;

  void __set_chatMid(const std::string& val);

  void __set_mediaType(const GroupCallMediaType::type val);

  bool operator == (const CallService_acquireGroupCallRoute_args & rhs) const
  {
    if (!(chatMid == rhs.chatMid))
      return false;
    if (!(mediaType == rhs.mediaType))
      return false;
    return true;
  }
  bool operator != (const CallService_acquireGroupCallRoute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_acquireGroupCallRoute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_acquireGroupCallRoute_pargs {
 public:


  virtual ~CallService_acquireGroupCallRoute_pargs() throw();
  const std::string* chatMid;
  const GroupCallMediaType::type* mediaType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_acquireGroupCallRoute_result__isset {
  _CallService_acquireGroupCallRoute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_acquireGroupCallRoute_result__isset;

class CallService_acquireGroupCallRoute_result {
 public:

  CallService_acquireGroupCallRoute_result(const CallService_acquireGroupCallRoute_result&);
  CallService_acquireGroupCallRoute_result& operator=(const CallService_acquireGroupCallRoute_result&);
  CallService_acquireGroupCallRoute_result() {
  }

  virtual ~CallService_acquireGroupCallRoute_result() throw();
  GroupCallRoute success;
  TalkException e;

  _CallService_acquireGroupCallRoute_result__isset __isset;

  void __set_success(const GroupCallRoute& val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_acquireGroupCallRoute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_acquireGroupCallRoute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_acquireGroupCallRoute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_acquireGroupCallRoute_presult__isset {
  _CallService_acquireGroupCallRoute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_acquireGroupCallRoute_presult__isset;

class CallService_acquireGroupCallRoute_presult {
 public:


  virtual ~CallService_acquireGroupCallRoute_presult() throw();
  GroupCallRoute* success;
  TalkException e;

  _CallService_acquireGroupCallRoute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CallService_getUserMidsWhoAddedMe_args {
 public:

  CallService_getUserMidsWhoAddedMe_args(const CallService_getUserMidsWhoAddedMe_args&);
  CallService_getUserMidsWhoAddedMe_args& operator=(const CallService_getUserMidsWhoAddedMe_args&);
  CallService_getUserMidsWhoAddedMe_args() {
  }

  virtual ~CallService_getUserMidsWhoAddedMe_args() throw();

  bool operator == (const CallService_getUserMidsWhoAddedMe_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CallService_getUserMidsWhoAddedMe_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getUserMidsWhoAddedMe_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getUserMidsWhoAddedMe_pargs {
 public:


  virtual ~CallService_getUserMidsWhoAddedMe_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getUserMidsWhoAddedMe_result__isset {
  _CallService_getUserMidsWhoAddedMe_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getUserMidsWhoAddedMe_result__isset;

class CallService_getUserMidsWhoAddedMe_result {
 public:

  CallService_getUserMidsWhoAddedMe_result(const CallService_getUserMidsWhoAddedMe_result&);
  CallService_getUserMidsWhoAddedMe_result& operator=(const CallService_getUserMidsWhoAddedMe_result&);
  CallService_getUserMidsWhoAddedMe_result() {
  }

  virtual ~CallService_getUserMidsWhoAddedMe_result() throw();
  std::vector<std::string>  success;
  TalkException e;

  _CallService_getUserMidsWhoAddedMe_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getUserMidsWhoAddedMe_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getUserMidsWhoAddedMe_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getUserMidsWhoAddedMe_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getUserMidsWhoAddedMe_presult__isset {
  _CallService_getUserMidsWhoAddedMe_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getUserMidsWhoAddedMe_presult__isset;

class CallService_getUserMidsWhoAddedMe_presult {
 public:


  virtual ~CallService_getUserMidsWhoAddedMe_presult() throw();
  std::vector<std::string> * success;
  TalkException e;

  _CallService_getUserMidsWhoAddedMe_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CallService_getIdentityCredential_args {
 public:

  CallService_getIdentityCredential_args(const CallService_getIdentityCredential_args&);
  CallService_getIdentityCredential_args& operator=(const CallService_getIdentityCredential_args&);
  CallService_getIdentityCredential_args() {
  }

  virtual ~CallService_getIdentityCredential_args() throw();

  bool operator == (const CallService_getIdentityCredential_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CallService_getIdentityCredential_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getIdentityCredential_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getIdentityCredential_pargs {
 public:


  virtual ~CallService_getIdentityCredential_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getIdentityCredential_result__isset {
  _CallService_getIdentityCredential_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getIdentityCredential_result__isset;

class CallService_getIdentityCredential_result {
 public:

  CallService_getIdentityCredential_result(const CallService_getIdentityCredential_result&);
  CallService_getIdentityCredential_result& operator=(const CallService_getIdentityCredential_result&);
  CallService_getIdentityCredential_result() {
  }

  virtual ~CallService_getIdentityCredential_result() throw();
  IdentityCredential success;
  TalkException e;

  _CallService_getIdentityCredential_result__isset __isset;

  void __set_success(const IdentityCredential& val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getIdentityCredential_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getIdentityCredential_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getIdentityCredential_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getIdentityCredential_presult__isset {
  _CallService_getIdentityCredential_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getIdentityCredential_presult__isset;

class CallService_getIdentityCredential_presult {
 public:


  virtual ~CallService_getIdentityCredential_presult() throw();
  IdentityCredential* success;
  TalkException e;

  _CallService_getIdentityCredential_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_addOperationForChannel_args__isset {
  _CallService_addOperationForChannel_args__isset() : opType(false), param1(false), param2(false), param3(false) {}
  bool opType :1;
  bool param1 :1;
  bool param2 :1;
  bool param3 :1;
} _CallService_addOperationForChannel_args__isset;

class CallService_addOperationForChannel_args {
 public:

  CallService_addOperationForChannel_args(const CallService_addOperationForChannel_args&);
  CallService_addOperationForChannel_args& operator=(const CallService_addOperationForChannel_args&);
  CallService_addOperationForChannel_args() : opType((OpType::type)0), param1(), param2(), param3() {
  }

  virtual ~CallService_addOperationForChannel_args() throw();
  OpType::type opType;
  std::string param1;
  std::string param2;
  std::string param3;

  _CallService_addOperationForChannel_args__isset __isset;

  void __set_opType(const OpType::type val);

  void __set_param1(const std::string& val);

  void __set_param2(const std::string& val);

  void __set_param3(const std::string& val);

  bool operator == (const CallService_addOperationForChannel_args & rhs) const
  {
    if (!(opType == rhs.opType))
      return false;
    if (!(param1 == rhs.param1))
      return false;
    if (!(param2 == rhs.param2))
      return false;
    if (!(param3 == rhs.param3))
      return false;
    return true;
  }
  bool operator != (const CallService_addOperationForChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_addOperationForChannel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_addOperationForChannel_pargs {
 public:


  virtual ~CallService_addOperationForChannel_pargs() throw();
  const OpType::type* opType;
  const std::string* param1;
  const std::string* param2;
  const std::string* param3;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_addOperationForChannel_result__isset {
  _CallService_addOperationForChannel_result__isset() : e(false) {}
  bool e :1;
} _CallService_addOperationForChannel_result__isset;

class CallService_addOperationForChannel_result {
 public:

  CallService_addOperationForChannel_result(const CallService_addOperationForChannel_result&);
  CallService_addOperationForChannel_result& operator=(const CallService_addOperationForChannel_result&);
  CallService_addOperationForChannel_result() {
  }

  virtual ~CallService_addOperationForChannel_result() throw();
  TalkException e;

  _CallService_addOperationForChannel_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const CallService_addOperationForChannel_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_addOperationForChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_addOperationForChannel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_addOperationForChannel_presult__isset {
  _CallService_addOperationForChannel_presult__isset() : e(false) {}
  bool e :1;
} _CallService_addOperationForChannel_presult__isset;

class CallService_addOperationForChannel_presult {
 public:


  virtual ~CallService_addOperationForChannel_presult() throw();
  TalkException e;

  _CallService_addOperationForChannel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_getSimpleChannelContacts_args__isset {
  _CallService_getSimpleChannelContacts_args__isset() : ids(false), statusSticonFallbackDisabled(false) {}
  bool ids :1;
  bool statusSticonFallbackDisabled :1;
} _CallService_getSimpleChannelContacts_args__isset;

class CallService_getSimpleChannelContacts_args {
 public:

  CallService_getSimpleChannelContacts_args(const CallService_getSimpleChannelContacts_args&);
  CallService_getSimpleChannelContacts_args& operator=(const CallService_getSimpleChannelContacts_args&);
  CallService_getSimpleChannelContacts_args() : statusSticonFallbackDisabled(0) {
  }

  virtual ~CallService_getSimpleChannelContacts_args() throw();
  std::vector<std::string>  ids;
  bool statusSticonFallbackDisabled;

  _CallService_getSimpleChannelContacts_args__isset __isset;

  void __set_ids(const std::vector<std::string> & val);

  void __set_statusSticonFallbackDisabled(const bool val);

  bool operator == (const CallService_getSimpleChannelContacts_args & rhs) const
  {
    if (!(ids == rhs.ids))
      return false;
    if (!(statusSticonFallbackDisabled == rhs.statusSticonFallbackDisabled))
      return false;
    return true;
  }
  bool operator != (const CallService_getSimpleChannelContacts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getSimpleChannelContacts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getSimpleChannelContacts_pargs {
 public:


  virtual ~CallService_getSimpleChannelContacts_pargs() throw();
  const std::vector<std::string> * ids;
  const bool* statusSticonFallbackDisabled;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getSimpleChannelContacts_result__isset {
  _CallService_getSimpleChannelContacts_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getSimpleChannelContacts_result__isset;

class CallService_getSimpleChannelContacts_result {
 public:

  CallService_getSimpleChannelContacts_result(const CallService_getSimpleChannelContacts_result&);
  CallService_getSimpleChannelContacts_result& operator=(const CallService_getSimpleChannelContacts_result&);
  CallService_getSimpleChannelContacts_result() {
  }

  virtual ~CallService_getSimpleChannelContacts_result() throw();
  std::vector<SimpleChannelContact>  success;
  TalkException e;

  _CallService_getSimpleChannelContacts_result__isset __isset;

  void __set_success(const std::vector<SimpleChannelContact> & val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getSimpleChannelContacts_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getSimpleChannelContacts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getSimpleChannelContacts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getSimpleChannelContacts_presult__isset {
  _CallService_getSimpleChannelContacts_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getSimpleChannelContacts_presult__isset;

class CallService_getSimpleChannelContacts_presult {
 public:


  virtual ~CallService_getSimpleChannelContacts_presult() throw();
  std::vector<SimpleChannelContact> * success;
  TalkException e;

  _CallService_getSimpleChannelContacts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CallService_getUserLastSentMessageTimeStamp_args__isset {
  _CallService_getUserLastSentMessageTimeStamp_args__isset() : mid(false) {}
  bool mid :1;
} _CallService_getUserLastSentMessageTimeStamp_args__isset;

class CallService_getUserLastSentMessageTimeStamp_args {
 public:

  CallService_getUserLastSentMessageTimeStamp_args(const CallService_getUserLastSentMessageTimeStamp_args&);
  CallService_getUserLastSentMessageTimeStamp_args& operator=(const CallService_getUserLastSentMessageTimeStamp_args&);
  CallService_getUserLastSentMessageTimeStamp_args() : mid() {
  }

  virtual ~CallService_getUserLastSentMessageTimeStamp_args() throw();
  std::string mid;

  _CallService_getUserLastSentMessageTimeStamp_args__isset __isset;

  void __set_mid(const std::string& val);

  bool operator == (const CallService_getUserLastSentMessageTimeStamp_args & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    return true;
  }
  bool operator != (const CallService_getUserLastSentMessageTimeStamp_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getUserLastSentMessageTimeStamp_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CallService_getUserLastSentMessageTimeStamp_pargs {
 public:


  virtual ~CallService_getUserLastSentMessageTimeStamp_pargs() throw();
  const std::string* mid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getUserLastSentMessageTimeStamp_result__isset {
  _CallService_getUserLastSentMessageTimeStamp_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getUserLastSentMessageTimeStamp_result__isset;

class CallService_getUserLastSentMessageTimeStamp_result {
 public:

  CallService_getUserLastSentMessageTimeStamp_result(const CallService_getUserLastSentMessageTimeStamp_result&);
  CallService_getUserLastSentMessageTimeStamp_result& operator=(const CallService_getUserLastSentMessageTimeStamp_result&);
  CallService_getUserLastSentMessageTimeStamp_result() : success(0) {
  }

  virtual ~CallService_getUserLastSentMessageTimeStamp_result() throw();
  int64_t success;
  TalkException e;

  _CallService_getUserLastSentMessageTimeStamp_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_e(const TalkException& val);

  bool operator == (const CallService_getUserLastSentMessageTimeStamp_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const CallService_getUserLastSentMessageTimeStamp_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallService_getUserLastSentMessageTimeStamp_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CallService_getUserLastSentMessageTimeStamp_presult__isset {
  _CallService_getUserLastSentMessageTimeStamp_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _CallService_getUserLastSentMessageTimeStamp_presult__isset;

class CallService_getUserLastSentMessageTimeStamp_presult {
 public:


  virtual ~CallService_getUserLastSentMessageTimeStamp_presult() throw();
  int64_t* success;
  TalkException e;

  _CallService_getUserLastSentMessageTimeStamp_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CallServiceClient : virtual public CallServiceIf {
 public:
  CallServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CallServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  UserStatus::type getUserStatus(const std::string& mid);
  void send_getUserStatus(const std::string& mid);
  UserStatus::type recv_getUserStatus();
  void updateProfileAttributeForChannel(const ProfileAttribute::type profileAttribute, const std::string& value);
  void send_updateProfileAttributeForChannel(const ProfileAttribute::type profileAttribute, const std::string& value);
  void recv_updateProfileAttributeForChannel();
  void updateExtendedProfileAttribute(const ExtendedProfileAttribute::type attr, const ExtendedProfile& extendedProfile);
  void send_updateExtendedProfileAttribute(const ExtendedProfileAttribute::type attr, const ExtendedProfile& extendedProfile);
  void recv_updateExtendedProfileAttribute();
  void getAllSimpleChannelContacts(std::vector<SimpleChannelContact> & _return, const bool statusSticonFallbackDisabled);
  void send_getAllSimpleChannelContacts(const bool statusSticonFallbackDisabled);
  void recv_getAllSimpleChannelContacts(std::vector<SimpleChannelContact> & _return);
  void getUserIdentities(std::map<RegistrationType::type, std::string> & _return);
  void send_getUserIdentities();
  void recv_getUserIdentities(std::map<RegistrationType::type, std::string> & _return);
  void markPaidCallAd(PaidCallDialing& _return, const std::string& dialedNumber, const std::string& language, const bool disableCallerId);
  void send_markPaidCallAd(const std::string& dialedNumber, const std::string& language, const bool disableCallerId);
  void recv_markPaidCallAd(PaidCallDialing& _return);
  bool isGroupMember(const std::string& groupId);
  void send_isGroupMember(const std::string& groupId);
  bool recv_isGroupMember();
  void getPhoneInfoFromPhoneNumber(PhoneInfoForChannel& _return, const std::string& region, const std::string& phoneNumber);
  void send_getPhoneInfoFromPhoneNumber(const std::string& region, const std::string& phoneNumber);
  void recv_getPhoneInfoFromPhoneNumber(PhoneInfoForChannel& _return);
  void redeemPaidCallVoucher(PaidCallRedeemResult& _return, const std::string& serial, const std::string& language);
  void send_redeemPaidCallVoucher(const std::string& serial, const std::string& language);
  void recv_redeemPaidCallVoucher(PaidCallRedeemResult& _return);
  void getPreferredDisplayName(std::map<std::string, std::string> & _return, const std::vector<std::string> & mids);
  void send_getPreferredDisplayName(const std::vector<std::string> & mids);
  void recv_getPreferredDisplayName(std::map<std::string, std::string> & _return);
  void getContactsForChannel(std::vector<Contact> & _return, const std::vector<std::string> & ids);
  void send_getContactsForChannel(const std::vector<std::string> & ids);
  void recv_getContactsForChannel(std::vector<Contact> & _return);
  void getCallCreditProducts(std::vector<CoinProductItem> & _return, const PaymentType::type appStoreCode, const PaymentPgType::type pgCode, const std::string& country, const std::string& language);
  void send_getCallCreditProducts(const PaymentType::type appStoreCode, const PaymentPgType::type pgCode, const std::string& country, const std::string& language);
  void recv_getCallCreditProducts(std::vector<CoinProductItem> & _return);
  void getCompactContacts(std::vector<CompactContact> & _return, const int64_t lastModifiedTimestamp);
  void send_getCompactContacts(const int64_t lastModifiedTimestamp);
  void recv_getCompactContacts(std::vector<CompactContact> & _return);
  void notifyNotiCenterEvent(const NotiCenterEventData& event);
  void send_notifyNotiCenterEvent(const NotiCenterEventData& event);
  void recv_notifyNotiCenterEvent();
  bool isInContact(const std::string& mid);
  void send_isInContact(const std::string& mid);
  bool recv_isInContact();
  void lookupGroupMembers(std::vector<SimpleChannelContact> & _return, const std::string& groupId, const std::vector<std::string> & mids);
  void send_lookupGroupMembers(const std::string& groupId, const std::vector<std::string> & mids);
  void recv_lookupGroupMembers(std::vector<SimpleChannelContact> & _return);
  void getRoomInformation(Room& _return, const std::string& roomMid);
  void send_getRoomInformation(const std::string& roomMid);
  void recv_getRoomInformation(Room& _return);
  void getGroupCall(GroupCall& _return, const std::string& chatMid);
  void send_getGroupCall(const std::string& chatMid);
  void recv_getGroupCall(GroupCall& _return);
  bool isAllowSecondaryDeviceLogin();
  void send_isAllowSecondaryDeviceLogin();
  bool recv_isAllowSecondaryDeviceLogin();
  void getPrimaryClientForChannel(SimpleChannelClient& _return);
  void send_getPrimaryClientForChannel();
  void recv_getPrimaryClientForChannel(SimpleChannelClient& _return);
  void createRoomWithBuddy(Room& _return, const int32_t reqSeq, const std::string& buddyMid, const std::vector<std::string> & contactIds);
  void send_createRoomWithBuddy(const int32_t reqSeq, const std::string& buddyMid, const std::vector<std::string> & contactIds);
  void recv_createRoomWithBuddy(Room& _return);
  void getDisplayName(std::string& _return, const std::string& mid);
  void send_getDisplayName(const std::string& mid);
  void recv_getDisplayName(std::string& _return);
  void getPaidCallMetadata(PaidCallMetadataResult& _return, const std::string& language);
  void send_getPaidCallMetadata(const std::string& language);
  void recv_getPaidCallMetadata(PaidCallMetadataResult& _return);
  void getMid(std::string& _return);
  void send_getMid();
  void recv_getMid(std::string& _return);
  void getUserCountryForBilling(std::string& _return, const std::string& country, const std::string& remoteIp);
  void send_getUserCountryForBilling(const std::string& country, const std::string& remoteIp);
  void recv_getUserCountryForBilling(std::string& _return);
  void getFavoriteGroupIdsForChannel(std::vector<std::string> & _return);
  void send_getFavoriteGroupIdsForChannel();
  void recv_getFavoriteGroupIdsForChannel(std::vector<std::string> & _return);
  void getPaidCallHistory(PaidCallHistoryResult& _return, const int64_t start, const int32_t size, const std::string& language);
  void send_getPaidCallHistory(const int64_t start, const int32_t size, const std::string& language);
  void recv_getPaidCallHistory(PaidCallHistoryResult& _return);
  void sendPinCodeOperation(const std::string& verifier);
  void send_sendPinCodeOperation(const std::string& verifier);
  void recv_sendPinCodeOperation();
  void inviteIntoGroupCall(const std::string& chatMid, const std::vector<std::string> & memberMids, const GroupCallMediaType::type mediaType);
  void send_inviteIntoGroupCall(const std::string& chatMid, const std::vector<std::string> & memberMids, const GroupCallMediaType::type mediaType);
  void recv_inviteIntoGroupCall();
  void getFriendMids(std::vector<std::string> & _return);
  void send_getFriendMids();
  void recv_getFriendMids(std::vector<std::string> & _return);
  void getMetaProfile(MetaProfile& _return);
  void send_getMetaProfile();
  void recv_getMetaProfile(MetaProfile& _return);
  void sendMessageForChannel(Message& _return, const Message& message);
  void send_sendMessageForChannel(const Message& message);
  void recv_sendMessageForChannel(Message& _return);
  int64_t activeBuddySubscriberCount();
  void send_activeBuddySubscriberCount();
  int64_t recv_activeBuddySubscriberCount();
  void getCallCreditPurchaseHistory(CoinHistoryResult& _return, const CoinHistoryCondition& request);
  void send_getCallCreditPurchaseHistory(const CoinHistoryCondition& request);
  void recv_getCallCreditPurchaseHistory(CoinHistoryResult& _return);
  bool isRoomMember(const std::string& roomId);
  void send_isRoomMember(const std::string& roomId);
  bool recv_isRoomMember();
  void sendSystemOAMessage(Message& _return, const Message& message);
  void send_sendSystemOAMessage(const Message& message);
  void recv_sendSystemOAMessage(Message& _return);
  void acquirePaidCallRoute(PaidCallResponse& _return, const PaidCallType::type paidCallType, const std::string& dialedNumber, const std::string& language, const std::string& networkCode, const bool disableCallerId, const std::string& referer, const std::string& adSessionId);
  void send_acquirePaidCallRoute(const PaidCallType::type paidCallType, const std::string& dialedNumber, const std::string& language, const std::string& networkCode, const bool disableCallerId, const std::string& referer, const std::string& adSessionId);
  void recv_acquirePaidCallRoute(PaidCallResponse& _return);
  void getGroupsForChannel(std::vector<Group> & _return, const std::vector<std::string> & groupIds);
  void send_getGroupsForChannel(const std::vector<std::string> & groupIds);
  void recv_getGroupsForChannel(std::vector<Group> & _return);
  int64_t getUserCreateTime();
  void send_getUserCreateTime();
  int64_t recv_getUserCreateTime();
  void registerChannelCP(std::string& _return, const std::string& cpId, const std::string& registerPassword);
  void send_registerChannelCP(const std::string& cpId, const std::string& registerPassword);
  void recv_registerChannelCP(std::string& _return);
  void reserveCallCreditPurchase(PaymentReservationResult& _return, const CoinPurchaseReservation& request);
  void send_reserveCallCreditPurchase(const CoinPurchaseReservation& request);
  void recv_reserveCallCreditPurchase(PaymentReservationResult& _return);
  void acquirePaidCallCurrencyExchangeRate(std::vector<PaidCallCurrencyExchangeRate> & _return, const std::string& language);
  void send_acquirePaidCallCurrencyExchangeRate(const std::string& language);
  void recv_acquirePaidCallCurrencyExchangeRate(std::vector<PaidCallCurrencyExchangeRate> & _return);
  void getRoomMemberMidsForAppPlatform(std::vector<std::string> & _return, const std::string& roomId);
  void send_getRoomMemberMidsForAppPlatform(const std::string& roomId);
  void recv_getRoomMemberMidsForAppPlatform(std::vector<std::string> & _return);
  void getPaidCallBalanceList(std::vector<PaidCallBalance> & _return, const std::string& language);
  void send_getPaidCallBalanceList(const std::string& language);
  void recv_getPaidCallBalanceList(std::vector<PaidCallBalance> & _return);
  void getPersonalInfos(std::map<PersonalInfo::type, std::string> & _return, const std::set<PersonalInfo::type> & requiredPersonalInfos);
  void send_getPersonalInfos(const std::set<PersonalInfo::type> & requiredPersonalInfos);
  void recv_getPersonalInfos(std::map<PersonalInfo::type, std::string> & _return);
  void getPrimaryClientsForChannel(std::vector<SimpleChannelClient> & _return, const std::vector<std::string> & userMids);
  void send_getPrimaryClientsForChannel(const std::vector<std::string> & userMids);
  void recv_getPrimaryClientsForChannel(std::vector<SimpleChannelClient> & _return);
  void addBuddyToContact(ContactTransition& _return, const std::string& buddyMid);
  void send_addBuddyToContact(const std::string& buddyMid);
  void recv_addBuddyToContact(ContactTransition& _return);
  void getGroupMemberMidsForAppPlatform(std::vector<std::string> & _return, const std::string& groupId);
  void send_getGroupMemberMidsForAppPlatform(const std::string& groupId);
  void recv_getGroupMemberMidsForAppPlatform(std::vector<std::string> & _return);
  void getUserLanguage(std::string& _return);
  void send_getUserLanguage();
  void recv_getUserLanguage(std::string& _return);
  void lookupPaidCall(PaidCallResponse& _return, const std::string& dialedNumber, const std::string& language, const std::string& referer);
  void send_lookupPaidCall(const std::string& dialedNumber, const std::string& language, const std::string& referer);
  void recv_lookupPaidCall(PaidCallResponse& _return);
  void getExtendedProfile(ExtendedProfile& _return);
  void send_getExtendedProfile();
  void recv_getExtendedProfile(ExtendedProfile& _return);
  void getReverseCompactContacts(std::map<std::string, CompactContact> & _return, const std::vector<std::string> & ids);
  void send_getReverseCompactContacts(const std::vector<std::string> & ids);
  void recv_getReverseCompactContacts(std::map<std::string, CompactContact> & _return);
  void getPaidCallAdStatus(PaidCallAdResult& _return);
  void send_getPaidCallAdStatus();
  void recv_getPaidCallAdStatus(PaidCallAdResult& _return);
  void findContactByUseridWithoutAbuseBlockForChannel(Contact& _return, const std::string& userid);
  void send_findContactByUseridWithoutAbuseBlockForChannel(const std::string& userid);
  void recv_findContactByUseridWithoutAbuseBlockForChannel(Contact& _return);
  void getGroupMemberMids(std::vector<std::string> & _return, const std::string& groupId);
  void send_getGroupMemberMids(const std::string& groupId);
  void recv_getGroupMemberMids(std::vector<std::string> & _return);
  void sendMessageWithoutRelationship(Message& _return, const Message& message);
  void send_sendMessageWithoutRelationship(const Message& message);
  void recv_sendMessageWithoutRelationship(Message& _return);
  void displayBuddySubscriberCountInBulk(std::map<std::string, int64_t> & _return, const std::vector<std::string> & mids);
  void send_displayBuddySubscriberCountInBulk(const std::vector<std::string> & mids);
  void recv_displayBuddySubscriberCountInBulk(std::map<std::string, int64_t> & _return);
  void lookupRoomMembers(std::vector<SimpleChannelContact> & _return, const std::string& roomId, const std::vector<std::string> & mids);
  void send_lookupRoomMembers(const std::string& roomId, const std::vector<std::string> & mids);
  void recv_lookupRoomMembers(std::vector<SimpleChannelContact> & _return);
  void getFavoriteMidsForChannel(std::vector<std::string> & _return);
  void send_getFavoriteMidsForChannel();
  void recv_getFavoriteMidsForChannel(std::vector<std::string> & _return);
  void getAllContactIdsForChannel(std::vector<std::string> & _return);
  void send_getAllContactIdsForChannel();
  void recv_getAllContactIdsForChannel(std::vector<std::string> & _return);
  int64_t displayBuddySubscriberCount();
  void send_displayBuddySubscriberCount();
  int64_t recv_displayBuddySubscriberCount();
  void getProfileForChannel(Profile& _return);
  void send_getProfileForChannel();
  void recv_getProfileForChannel(Profile& _return);
  void getUserTickets(std::vector<UserTicketResponse> & _return, const std::vector<std::string> & userMids);
  void send_getUserTickets(const std::vector<std::string> & userMids);
  void recv_getUserTickets(std::vector<UserTicketResponse> & _return);
  void getOAFriendMids(std::vector<std::string> & _return);
  void send_getOAFriendMids();
  void recv_getOAFriendMids(std::vector<std::string> & _return);
  void searchPaidCallUserRate(std::vector<PaidCallUserRate> & _return, const std::string& countryCode, const std::string& language);
  void send_searchPaidCallUserRate(const std::string& countryCode, const std::string& language);
  void recv_searchPaidCallUserRate(std::vector<PaidCallUserRate> & _return);
  void getJoinedGroupIdsForChannel(std::vector<std::string> & _return);
  void send_getJoinedGroupIdsForChannel();
  void recv_getJoinedGroupIdsForChannel(std::vector<std::string> & _return);
  void acquireGroupCallRoute(GroupCallRoute& _return, const std::string& chatMid, const GroupCallMediaType::type mediaType);
  void send_acquireGroupCallRoute(const std::string& chatMid, const GroupCallMediaType::type mediaType);
  void recv_acquireGroupCallRoute(GroupCallRoute& _return);
  void getUserMidsWhoAddedMe(std::vector<std::string> & _return);
  void send_getUserMidsWhoAddedMe();
  void recv_getUserMidsWhoAddedMe(std::vector<std::string> & _return);
  void getIdentityCredential(IdentityCredential& _return);
  void send_getIdentityCredential();
  void recv_getIdentityCredential(IdentityCredential& _return);
  void addOperationForChannel(const OpType::type opType, const std::string& param1, const std::string& param2, const std::string& param3);
  void send_addOperationForChannel(const OpType::type opType, const std::string& param1, const std::string& param2, const std::string& param3);
  void recv_addOperationForChannel();
  void getSimpleChannelContacts(std::vector<SimpleChannelContact> & _return, const std::vector<std::string> & ids, const bool statusSticonFallbackDisabled);
  void send_getSimpleChannelContacts(const std::vector<std::string> & ids, const bool statusSticonFallbackDisabled);
  void recv_getSimpleChannelContacts(std::vector<SimpleChannelContact> & _return);
  int64_t getUserLastSentMessageTimeStamp(const std::string& mid);
  void send_getUserLastSentMessageTimeStamp(const std::string& mid);
  int64_t recv_getUserLastSentMessageTimeStamp();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CallServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<CallServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CallServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getUserStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateProfileAttributeForChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateExtendedProfileAttribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllSimpleChannelContacts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUserIdentities(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_markPaidCallAd(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isGroupMember(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPhoneInfoFromPhoneNumber(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_redeemPaidCallVoucher(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPreferredDisplayName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getContactsForChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCallCreditProducts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCompactContacts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_notifyNotiCenterEvent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isInContact(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_lookupGroupMembers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRoomInformation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGroupCall(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isAllowSecondaryDeviceLogin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPrimaryClientForChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createRoomWithBuddy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDisplayName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPaidCallMetadata(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMid(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUserCountryForBilling(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFavoriteGroupIdsForChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPaidCallHistory(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendPinCodeOperation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_inviteIntoGroupCall(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFriendMids(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMetaProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendMessageForChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_activeBuddySubscriberCount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCallCreditPurchaseHistory(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isRoomMember(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendSystemOAMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_acquirePaidCallRoute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGroupsForChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUserCreateTime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerChannelCP(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reserveCallCreditPurchase(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_acquirePaidCallCurrencyExchangeRate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRoomMemberMidsForAppPlatform(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPaidCallBalanceList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPersonalInfos(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPrimaryClientsForChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addBuddyToContact(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGroupMemberMidsForAppPlatform(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUserLanguage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_lookupPaidCall(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getExtendedProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getReverseCompactContacts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPaidCallAdStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findContactByUseridWithoutAbuseBlockForChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGroupMemberMids(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendMessageWithoutRelationship(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_displayBuddySubscriberCountInBulk(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_lookupRoomMembers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFavoriteMidsForChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllContactIdsForChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_displayBuddySubscriberCount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getProfileForChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUserTickets(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getOAFriendMids(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_searchPaidCallUserRate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getJoinedGroupIdsForChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_acquireGroupCallRoute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUserMidsWhoAddedMe(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getIdentityCredential(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addOperationForChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSimpleChannelContacts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUserLastSentMessageTimeStamp(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CallServiceProcessor(::apache::thrift::stdcxx::shared_ptr<CallServiceIf> iface) :
    iface_(iface) {
    processMap_["getUserStatus"] = &CallServiceProcessor::process_getUserStatus;
    processMap_["updateProfileAttributeForChannel"] = &CallServiceProcessor::process_updateProfileAttributeForChannel;
    processMap_["updateExtendedProfileAttribute"] = &CallServiceProcessor::process_updateExtendedProfileAttribute;
    processMap_["getAllSimpleChannelContacts"] = &CallServiceProcessor::process_getAllSimpleChannelContacts;
    processMap_["getUserIdentities"] = &CallServiceProcessor::process_getUserIdentities;
    processMap_["markPaidCallAd"] = &CallServiceProcessor::process_markPaidCallAd;
    processMap_["isGroupMember"] = &CallServiceProcessor::process_isGroupMember;
    processMap_["getPhoneInfoFromPhoneNumber"] = &CallServiceProcessor::process_getPhoneInfoFromPhoneNumber;
    processMap_["redeemPaidCallVoucher"] = &CallServiceProcessor::process_redeemPaidCallVoucher;
    processMap_["getPreferredDisplayName"] = &CallServiceProcessor::process_getPreferredDisplayName;
    processMap_["getContactsForChannel"] = &CallServiceProcessor::process_getContactsForChannel;
    processMap_["getCallCreditProducts"] = &CallServiceProcessor::process_getCallCreditProducts;
    processMap_["getCompactContacts"] = &CallServiceProcessor::process_getCompactContacts;
    processMap_["notifyNotiCenterEvent"] = &CallServiceProcessor::process_notifyNotiCenterEvent;
    processMap_["isInContact"] = &CallServiceProcessor::process_isInContact;
    processMap_["lookupGroupMembers"] = &CallServiceProcessor::process_lookupGroupMembers;
    processMap_["getRoomInformation"] = &CallServiceProcessor::process_getRoomInformation;
    processMap_["getGroupCall"] = &CallServiceProcessor::process_getGroupCall;
    processMap_["isAllowSecondaryDeviceLogin"] = &CallServiceProcessor::process_isAllowSecondaryDeviceLogin;
    processMap_["getPrimaryClientForChannel"] = &CallServiceProcessor::process_getPrimaryClientForChannel;
    processMap_["createRoomWithBuddy"] = &CallServiceProcessor::process_createRoomWithBuddy;
    processMap_["getDisplayName"] = &CallServiceProcessor::process_getDisplayName;
    processMap_["getPaidCallMetadata"] = &CallServiceProcessor::process_getPaidCallMetadata;
    processMap_["getMid"] = &CallServiceProcessor::process_getMid;
    processMap_["getUserCountryForBilling"] = &CallServiceProcessor::process_getUserCountryForBilling;
    processMap_["getFavoriteGroupIdsForChannel"] = &CallServiceProcessor::process_getFavoriteGroupIdsForChannel;
    processMap_["getPaidCallHistory"] = &CallServiceProcessor::process_getPaidCallHistory;
    processMap_["sendPinCodeOperation"] = &CallServiceProcessor::process_sendPinCodeOperation;
    processMap_["inviteIntoGroupCall"] = &CallServiceProcessor::process_inviteIntoGroupCall;
    processMap_["getFriendMids"] = &CallServiceProcessor::process_getFriendMids;
    processMap_["getMetaProfile"] = &CallServiceProcessor::process_getMetaProfile;
    processMap_["sendMessageForChannel"] = &CallServiceProcessor::process_sendMessageForChannel;
    processMap_["activeBuddySubscriberCount"] = &CallServiceProcessor::process_activeBuddySubscriberCount;
    processMap_["getCallCreditPurchaseHistory"] = &CallServiceProcessor::process_getCallCreditPurchaseHistory;
    processMap_["isRoomMember"] = &CallServiceProcessor::process_isRoomMember;
    processMap_["sendSystemOAMessage"] = &CallServiceProcessor::process_sendSystemOAMessage;
    processMap_["acquirePaidCallRoute"] = &CallServiceProcessor::process_acquirePaidCallRoute;
    processMap_["getGroupsForChannel"] = &CallServiceProcessor::process_getGroupsForChannel;
    processMap_["getUserCreateTime"] = &CallServiceProcessor::process_getUserCreateTime;
    processMap_["registerChannelCP"] = &CallServiceProcessor::process_registerChannelCP;
    processMap_["reserveCallCreditPurchase"] = &CallServiceProcessor::process_reserveCallCreditPurchase;
    processMap_["acquirePaidCallCurrencyExchangeRate"] = &CallServiceProcessor::process_acquirePaidCallCurrencyExchangeRate;
    processMap_["getRoomMemberMidsForAppPlatform"] = &CallServiceProcessor::process_getRoomMemberMidsForAppPlatform;
    processMap_["getPaidCallBalanceList"] = &CallServiceProcessor::process_getPaidCallBalanceList;
    processMap_["getPersonalInfos"] = &CallServiceProcessor::process_getPersonalInfos;
    processMap_["getPrimaryClientsForChannel"] = &CallServiceProcessor::process_getPrimaryClientsForChannel;
    processMap_["addBuddyToContact"] = &CallServiceProcessor::process_addBuddyToContact;
    processMap_["getGroupMemberMidsForAppPlatform"] = &CallServiceProcessor::process_getGroupMemberMidsForAppPlatform;
    processMap_["getUserLanguage"] = &CallServiceProcessor::process_getUserLanguage;
    processMap_["lookupPaidCall"] = &CallServiceProcessor::process_lookupPaidCall;
    processMap_["getExtendedProfile"] = &CallServiceProcessor::process_getExtendedProfile;
    processMap_["getReverseCompactContacts"] = &CallServiceProcessor::process_getReverseCompactContacts;
    processMap_["getPaidCallAdStatus"] = &CallServiceProcessor::process_getPaidCallAdStatus;
    processMap_["findContactByUseridWithoutAbuseBlockForChannel"] = &CallServiceProcessor::process_findContactByUseridWithoutAbuseBlockForChannel;
    processMap_["getGroupMemberMids"] = &CallServiceProcessor::process_getGroupMemberMids;
    processMap_["sendMessageWithoutRelationship"] = &CallServiceProcessor::process_sendMessageWithoutRelationship;
    processMap_["displayBuddySubscriberCountInBulk"] = &CallServiceProcessor::process_displayBuddySubscriberCountInBulk;
    processMap_["lookupRoomMembers"] = &CallServiceProcessor::process_lookupRoomMembers;
    processMap_["getFavoriteMidsForChannel"] = &CallServiceProcessor::process_getFavoriteMidsForChannel;
    processMap_["getAllContactIdsForChannel"] = &CallServiceProcessor::process_getAllContactIdsForChannel;
    processMap_["displayBuddySubscriberCount"] = &CallServiceProcessor::process_displayBuddySubscriberCount;
    processMap_["getProfileForChannel"] = &CallServiceProcessor::process_getProfileForChannel;
    processMap_["getUserTickets"] = &CallServiceProcessor::process_getUserTickets;
    processMap_["getOAFriendMids"] = &CallServiceProcessor::process_getOAFriendMids;
    processMap_["searchPaidCallUserRate"] = &CallServiceProcessor::process_searchPaidCallUserRate;
    processMap_["getJoinedGroupIdsForChannel"] = &CallServiceProcessor::process_getJoinedGroupIdsForChannel;
    processMap_["acquireGroupCallRoute"] = &CallServiceProcessor::process_acquireGroupCallRoute;
    processMap_["getUserMidsWhoAddedMe"] = &CallServiceProcessor::process_getUserMidsWhoAddedMe;
    processMap_["getIdentityCredential"] = &CallServiceProcessor::process_getIdentityCredential;
    processMap_["addOperationForChannel"] = &CallServiceProcessor::process_addOperationForChannel;
    processMap_["getSimpleChannelContacts"] = &CallServiceProcessor::process_getSimpleChannelContacts;
    processMap_["getUserLastSentMessageTimeStamp"] = &CallServiceProcessor::process_getUserLastSentMessageTimeStamp;
  }

  virtual ~CallServiceProcessor() {}
};

class CallServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CallServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< CallServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< CallServiceIfFactory > handlerFactory_;
};

class CallServiceMultiface : virtual public CallServiceIf {
 public:
  CallServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<CallServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CallServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<CallServiceIf> > ifaces_;
  CallServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<CallServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  UserStatus::type getUserStatus(const std::string& mid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUserStatus(mid);
    }
    return ifaces_[i]->getUserStatus(mid);
  }

  void updateProfileAttributeForChannel(const ProfileAttribute::type profileAttribute, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateProfileAttributeForChannel(profileAttribute, value);
    }
    ifaces_[i]->updateProfileAttributeForChannel(profileAttribute, value);
  }

  void updateExtendedProfileAttribute(const ExtendedProfileAttribute::type attr, const ExtendedProfile& extendedProfile) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateExtendedProfileAttribute(attr, extendedProfile);
    }
    ifaces_[i]->updateExtendedProfileAttribute(attr, extendedProfile);
  }

  void getAllSimpleChannelContacts(std::vector<SimpleChannelContact> & _return, const bool statusSticonFallbackDisabled) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllSimpleChannelContacts(_return, statusSticonFallbackDisabled);
    }
    ifaces_[i]->getAllSimpleChannelContacts(_return, statusSticonFallbackDisabled);
    return;
  }

  void getUserIdentities(std::map<RegistrationType::type, std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUserIdentities(_return);
    }
    ifaces_[i]->getUserIdentities(_return);
    return;
  }

  void markPaidCallAd(PaidCallDialing& _return, const std::string& dialedNumber, const std::string& language, const bool disableCallerId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->markPaidCallAd(_return, dialedNumber, language, disableCallerId);
    }
    ifaces_[i]->markPaidCallAd(_return, dialedNumber, language, disableCallerId);
    return;
  }

  bool isGroupMember(const std::string& groupId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isGroupMember(groupId);
    }
    return ifaces_[i]->isGroupMember(groupId);
  }

  void getPhoneInfoFromPhoneNumber(PhoneInfoForChannel& _return, const std::string& region, const std::string& phoneNumber) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPhoneInfoFromPhoneNumber(_return, region, phoneNumber);
    }
    ifaces_[i]->getPhoneInfoFromPhoneNumber(_return, region, phoneNumber);
    return;
  }

  void redeemPaidCallVoucher(PaidCallRedeemResult& _return, const std::string& serial, const std::string& language) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->redeemPaidCallVoucher(_return, serial, language);
    }
    ifaces_[i]->redeemPaidCallVoucher(_return, serial, language);
    return;
  }

  void getPreferredDisplayName(std::map<std::string, std::string> & _return, const std::vector<std::string> & mids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPreferredDisplayName(_return, mids);
    }
    ifaces_[i]->getPreferredDisplayName(_return, mids);
    return;
  }

  void getContactsForChannel(std::vector<Contact> & _return, const std::vector<std::string> & ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getContactsForChannel(_return, ids);
    }
    ifaces_[i]->getContactsForChannel(_return, ids);
    return;
  }

  void getCallCreditProducts(std::vector<CoinProductItem> & _return, const PaymentType::type appStoreCode, const PaymentPgType::type pgCode, const std::string& country, const std::string& language) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCallCreditProducts(_return, appStoreCode, pgCode, country, language);
    }
    ifaces_[i]->getCallCreditProducts(_return, appStoreCode, pgCode, country, language);
    return;
  }

  void getCompactContacts(std::vector<CompactContact> & _return, const int64_t lastModifiedTimestamp) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCompactContacts(_return, lastModifiedTimestamp);
    }
    ifaces_[i]->getCompactContacts(_return, lastModifiedTimestamp);
    return;
  }

  void notifyNotiCenterEvent(const NotiCenterEventData& event) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->notifyNotiCenterEvent(event);
    }
    ifaces_[i]->notifyNotiCenterEvent(event);
  }

  bool isInContact(const std::string& mid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isInContact(mid);
    }
    return ifaces_[i]->isInContact(mid);
  }

  void lookupGroupMembers(std::vector<SimpleChannelContact> & _return, const std::string& groupId, const std::vector<std::string> & mids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->lookupGroupMembers(_return, groupId, mids);
    }
    ifaces_[i]->lookupGroupMembers(_return, groupId, mids);
    return;
  }

  void getRoomInformation(Room& _return, const std::string& roomMid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRoomInformation(_return, roomMid);
    }
    ifaces_[i]->getRoomInformation(_return, roomMid);
    return;
  }

  void getGroupCall(GroupCall& _return, const std::string& chatMid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getGroupCall(_return, chatMid);
    }
    ifaces_[i]->getGroupCall(_return, chatMid);
    return;
  }

  bool isAllowSecondaryDeviceLogin() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isAllowSecondaryDeviceLogin();
    }
    return ifaces_[i]->isAllowSecondaryDeviceLogin();
  }

  void getPrimaryClientForChannel(SimpleChannelClient& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPrimaryClientForChannel(_return);
    }
    ifaces_[i]->getPrimaryClientForChannel(_return);
    return;
  }

  void createRoomWithBuddy(Room& _return, const int32_t reqSeq, const std::string& buddyMid, const std::vector<std::string> & contactIds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createRoomWithBuddy(_return, reqSeq, buddyMid, contactIds);
    }
    ifaces_[i]->createRoomWithBuddy(_return, reqSeq, buddyMid, contactIds);
    return;
  }

  void getDisplayName(std::string& _return, const std::string& mid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDisplayName(_return, mid);
    }
    ifaces_[i]->getDisplayName(_return, mid);
    return;
  }

  void getPaidCallMetadata(PaidCallMetadataResult& _return, const std::string& language) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPaidCallMetadata(_return, language);
    }
    ifaces_[i]->getPaidCallMetadata(_return, language);
    return;
  }

  void getMid(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMid(_return);
    }
    ifaces_[i]->getMid(_return);
    return;
  }

  void getUserCountryForBilling(std::string& _return, const std::string& country, const std::string& remoteIp) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUserCountryForBilling(_return, country, remoteIp);
    }
    ifaces_[i]->getUserCountryForBilling(_return, country, remoteIp);
    return;
  }

  void getFavoriteGroupIdsForChannel(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFavoriteGroupIdsForChannel(_return);
    }
    ifaces_[i]->getFavoriteGroupIdsForChannel(_return);
    return;
  }

  void getPaidCallHistory(PaidCallHistoryResult& _return, const int64_t start, const int32_t size, const std::string& language) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPaidCallHistory(_return, start, size, language);
    }
    ifaces_[i]->getPaidCallHistory(_return, start, size, language);
    return;
  }

  void sendPinCodeOperation(const std::string& verifier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendPinCodeOperation(verifier);
    }
    ifaces_[i]->sendPinCodeOperation(verifier);
  }

  void inviteIntoGroupCall(const std::string& chatMid, const std::vector<std::string> & memberMids, const GroupCallMediaType::type mediaType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->inviteIntoGroupCall(chatMid, memberMids, mediaType);
    }
    ifaces_[i]->inviteIntoGroupCall(chatMid, memberMids, mediaType);
  }

  void getFriendMids(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFriendMids(_return);
    }
    ifaces_[i]->getFriendMids(_return);
    return;
  }

  void getMetaProfile(MetaProfile& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMetaProfile(_return);
    }
    ifaces_[i]->getMetaProfile(_return);
    return;
  }

  void sendMessageForChannel(Message& _return, const Message& message) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendMessageForChannel(_return, message);
    }
    ifaces_[i]->sendMessageForChannel(_return, message);
    return;
  }

  int64_t activeBuddySubscriberCount() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->activeBuddySubscriberCount();
    }
    return ifaces_[i]->activeBuddySubscriberCount();
  }

  void getCallCreditPurchaseHistory(CoinHistoryResult& _return, const CoinHistoryCondition& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCallCreditPurchaseHistory(_return, request);
    }
    ifaces_[i]->getCallCreditPurchaseHistory(_return, request);
    return;
  }

  bool isRoomMember(const std::string& roomId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isRoomMember(roomId);
    }
    return ifaces_[i]->isRoomMember(roomId);
  }

  void sendSystemOAMessage(Message& _return, const Message& message) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendSystemOAMessage(_return, message);
    }
    ifaces_[i]->sendSystemOAMessage(_return, message);
    return;
  }

  void acquirePaidCallRoute(PaidCallResponse& _return, const PaidCallType::type paidCallType, const std::string& dialedNumber, const std::string& language, const std::string& networkCode, const bool disableCallerId, const std::string& referer, const std::string& adSessionId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->acquirePaidCallRoute(_return, paidCallType, dialedNumber, language, networkCode, disableCallerId, referer, adSessionId);
    }
    ifaces_[i]->acquirePaidCallRoute(_return, paidCallType, dialedNumber, language, networkCode, disableCallerId, referer, adSessionId);
    return;
  }

  void getGroupsForChannel(std::vector<Group> & _return, const std::vector<std::string> & groupIds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getGroupsForChannel(_return, groupIds);
    }
    ifaces_[i]->getGroupsForChannel(_return, groupIds);
    return;
  }

  int64_t getUserCreateTime() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUserCreateTime();
    }
    return ifaces_[i]->getUserCreateTime();
  }

  void registerChannelCP(std::string& _return, const std::string& cpId, const std::string& registerPassword) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerChannelCP(_return, cpId, registerPassword);
    }
    ifaces_[i]->registerChannelCP(_return, cpId, registerPassword);
    return;
  }

  void reserveCallCreditPurchase(PaymentReservationResult& _return, const CoinPurchaseReservation& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reserveCallCreditPurchase(_return, request);
    }
    ifaces_[i]->reserveCallCreditPurchase(_return, request);
    return;
  }

  void acquirePaidCallCurrencyExchangeRate(std::vector<PaidCallCurrencyExchangeRate> & _return, const std::string& language) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->acquirePaidCallCurrencyExchangeRate(_return, language);
    }
    ifaces_[i]->acquirePaidCallCurrencyExchangeRate(_return, language);
    return;
  }

  void getRoomMemberMidsForAppPlatform(std::vector<std::string> & _return, const std::string& roomId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRoomMemberMidsForAppPlatform(_return, roomId);
    }
    ifaces_[i]->getRoomMemberMidsForAppPlatform(_return, roomId);
    return;
  }

  void getPaidCallBalanceList(std::vector<PaidCallBalance> & _return, const std::string& language) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPaidCallBalanceList(_return, language);
    }
    ifaces_[i]->getPaidCallBalanceList(_return, language);
    return;
  }

  void getPersonalInfos(std::map<PersonalInfo::type, std::string> & _return, const std::set<PersonalInfo::type> & requiredPersonalInfos) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPersonalInfos(_return, requiredPersonalInfos);
    }
    ifaces_[i]->getPersonalInfos(_return, requiredPersonalInfos);
    return;
  }

  void getPrimaryClientsForChannel(std::vector<SimpleChannelClient> & _return, const std::vector<std::string> & userMids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPrimaryClientsForChannel(_return, userMids);
    }
    ifaces_[i]->getPrimaryClientsForChannel(_return, userMids);
    return;
  }

  void addBuddyToContact(ContactTransition& _return, const std::string& buddyMid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addBuddyToContact(_return, buddyMid);
    }
    ifaces_[i]->addBuddyToContact(_return, buddyMid);
    return;
  }

  void getGroupMemberMidsForAppPlatform(std::vector<std::string> & _return, const std::string& groupId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getGroupMemberMidsForAppPlatform(_return, groupId);
    }
    ifaces_[i]->getGroupMemberMidsForAppPlatform(_return, groupId);
    return;
  }

  void getUserLanguage(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUserLanguage(_return);
    }
    ifaces_[i]->getUserLanguage(_return);
    return;
  }

  void lookupPaidCall(PaidCallResponse& _return, const std::string& dialedNumber, const std::string& language, const std::string& referer) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->lookupPaidCall(_return, dialedNumber, language, referer);
    }
    ifaces_[i]->lookupPaidCall(_return, dialedNumber, language, referer);
    return;
  }

  void getExtendedProfile(ExtendedProfile& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getExtendedProfile(_return);
    }
    ifaces_[i]->getExtendedProfile(_return);
    return;
  }

  void getReverseCompactContacts(std::map<std::string, CompactContact> & _return, const std::vector<std::string> & ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getReverseCompactContacts(_return, ids);
    }
    ifaces_[i]->getReverseCompactContacts(_return, ids);
    return;
  }

  void getPaidCallAdStatus(PaidCallAdResult& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPaidCallAdStatus(_return);
    }
    ifaces_[i]->getPaidCallAdStatus(_return);
    return;
  }

  void findContactByUseridWithoutAbuseBlockForChannel(Contact& _return, const std::string& userid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findContactByUseridWithoutAbuseBlockForChannel(_return, userid);
    }
    ifaces_[i]->findContactByUseridWithoutAbuseBlockForChannel(_return, userid);
    return;
  }

  void getGroupMemberMids(std::vector<std::string> & _return, const std::string& groupId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getGroupMemberMids(_return, groupId);
    }
    ifaces_[i]->getGroupMemberMids(_return, groupId);
    return;
  }

  void sendMessageWithoutRelationship(Message& _return, const Message& message) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendMessageWithoutRelationship(_return, message);
    }
    ifaces_[i]->sendMessageWithoutRelationship(_return, message);
    return;
  }

  void displayBuddySubscriberCountInBulk(std::map<std::string, int64_t> & _return, const std::vector<std::string> & mids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->displayBuddySubscriberCountInBulk(_return, mids);
    }
    ifaces_[i]->displayBuddySubscriberCountInBulk(_return, mids);
    return;
  }

  void lookupRoomMembers(std::vector<SimpleChannelContact> & _return, const std::string& roomId, const std::vector<std::string> & mids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->lookupRoomMembers(_return, roomId, mids);
    }
    ifaces_[i]->lookupRoomMembers(_return, roomId, mids);
    return;
  }

  void getFavoriteMidsForChannel(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFavoriteMidsForChannel(_return);
    }
    ifaces_[i]->getFavoriteMidsForChannel(_return);
    return;
  }

  void getAllContactIdsForChannel(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllContactIdsForChannel(_return);
    }
    ifaces_[i]->getAllContactIdsForChannel(_return);
    return;
  }

  int64_t displayBuddySubscriberCount() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->displayBuddySubscriberCount();
    }
    return ifaces_[i]->displayBuddySubscriberCount();
  }

  void getProfileForChannel(Profile& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getProfileForChannel(_return);
    }
    ifaces_[i]->getProfileForChannel(_return);
    return;
  }

  void getUserTickets(std::vector<UserTicketResponse> & _return, const std::vector<std::string> & userMids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUserTickets(_return, userMids);
    }
    ifaces_[i]->getUserTickets(_return, userMids);
    return;
  }

  void getOAFriendMids(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getOAFriendMids(_return);
    }
    ifaces_[i]->getOAFriendMids(_return);
    return;
  }

  void searchPaidCallUserRate(std::vector<PaidCallUserRate> & _return, const std::string& countryCode, const std::string& language) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->searchPaidCallUserRate(_return, countryCode, language);
    }
    ifaces_[i]->searchPaidCallUserRate(_return, countryCode, language);
    return;
  }

  void getJoinedGroupIdsForChannel(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getJoinedGroupIdsForChannel(_return);
    }
    ifaces_[i]->getJoinedGroupIdsForChannel(_return);
    return;
  }

  void acquireGroupCallRoute(GroupCallRoute& _return, const std::string& chatMid, const GroupCallMediaType::type mediaType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->acquireGroupCallRoute(_return, chatMid, mediaType);
    }
    ifaces_[i]->acquireGroupCallRoute(_return, chatMid, mediaType);
    return;
  }

  void getUserMidsWhoAddedMe(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUserMidsWhoAddedMe(_return);
    }
    ifaces_[i]->getUserMidsWhoAddedMe(_return);
    return;
  }

  void getIdentityCredential(IdentityCredential& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getIdentityCredential(_return);
    }
    ifaces_[i]->getIdentityCredential(_return);
    return;
  }

  void addOperationForChannel(const OpType::type opType, const std::string& param1, const std::string& param2, const std::string& param3) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addOperationForChannel(opType, param1, param2, param3);
    }
    ifaces_[i]->addOperationForChannel(opType, param1, param2, param3);
  }

  void getSimpleChannelContacts(std::vector<SimpleChannelContact> & _return, const std::vector<std::string> & ids, const bool statusSticonFallbackDisabled) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSimpleChannelContacts(_return, ids, statusSticonFallbackDisabled);
    }
    ifaces_[i]->getSimpleChannelContacts(_return, ids, statusSticonFallbackDisabled);
    return;
  }

  int64_t getUserLastSentMessageTimeStamp(const std::string& mid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUserLastSentMessageTimeStamp(mid);
    }
    return ifaces_[i]->getUserLastSentMessageTimeStamp(mid);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class CallServiceConcurrentClient : virtual public CallServiceIf {
 public:
  CallServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CallServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  UserStatus::type getUserStatus(const std::string& mid);
  int32_t send_getUserStatus(const std::string& mid);
  UserStatus::type recv_getUserStatus(const int32_t seqid);
  void updateProfileAttributeForChannel(const ProfileAttribute::type profileAttribute, const std::string& value);
  int32_t send_updateProfileAttributeForChannel(const ProfileAttribute::type profileAttribute, const std::string& value);
  void recv_updateProfileAttributeForChannel(const int32_t seqid);
  void updateExtendedProfileAttribute(const ExtendedProfileAttribute::type attr, const ExtendedProfile& extendedProfile);
  int32_t send_updateExtendedProfileAttribute(const ExtendedProfileAttribute::type attr, const ExtendedProfile& extendedProfile);
  void recv_updateExtendedProfileAttribute(const int32_t seqid);
  void getAllSimpleChannelContacts(std::vector<SimpleChannelContact> & _return, const bool statusSticonFallbackDisabled);
  int32_t send_getAllSimpleChannelContacts(const bool statusSticonFallbackDisabled);
  void recv_getAllSimpleChannelContacts(std::vector<SimpleChannelContact> & _return, const int32_t seqid);
  void getUserIdentities(std::map<RegistrationType::type, std::string> & _return);
  int32_t send_getUserIdentities();
  void recv_getUserIdentities(std::map<RegistrationType::type, std::string> & _return, const int32_t seqid);
  void markPaidCallAd(PaidCallDialing& _return, const std::string& dialedNumber, const std::string& language, const bool disableCallerId);
  int32_t send_markPaidCallAd(const std::string& dialedNumber, const std::string& language, const bool disableCallerId);
  void recv_markPaidCallAd(PaidCallDialing& _return, const int32_t seqid);
  bool isGroupMember(const std::string& groupId);
  int32_t send_isGroupMember(const std::string& groupId);
  bool recv_isGroupMember(const int32_t seqid);
  void getPhoneInfoFromPhoneNumber(PhoneInfoForChannel& _return, const std::string& region, const std::string& phoneNumber);
  int32_t send_getPhoneInfoFromPhoneNumber(const std::string& region, const std::string& phoneNumber);
  void recv_getPhoneInfoFromPhoneNumber(PhoneInfoForChannel& _return, const int32_t seqid);
  void redeemPaidCallVoucher(PaidCallRedeemResult& _return, const std::string& serial, const std::string& language);
  int32_t send_redeemPaidCallVoucher(const std::string& serial, const std::string& language);
  void recv_redeemPaidCallVoucher(PaidCallRedeemResult& _return, const int32_t seqid);
  void getPreferredDisplayName(std::map<std::string, std::string> & _return, const std::vector<std::string> & mids);
  int32_t send_getPreferredDisplayName(const std::vector<std::string> & mids);
  void recv_getPreferredDisplayName(std::map<std::string, std::string> & _return, const int32_t seqid);
  void getContactsForChannel(std::vector<Contact> & _return, const std::vector<std::string> & ids);
  int32_t send_getContactsForChannel(const std::vector<std::string> & ids);
  void recv_getContactsForChannel(std::vector<Contact> & _return, const int32_t seqid);
  void getCallCreditProducts(std::vector<CoinProductItem> & _return, const PaymentType::type appStoreCode, const PaymentPgType::type pgCode, const std::string& country, const std::string& language);
  int32_t send_getCallCreditProducts(const PaymentType::type appStoreCode, const PaymentPgType::type pgCode, const std::string& country, const std::string& language);
  void recv_getCallCreditProducts(std::vector<CoinProductItem> & _return, const int32_t seqid);
  void getCompactContacts(std::vector<CompactContact> & _return, const int64_t lastModifiedTimestamp);
  int32_t send_getCompactContacts(const int64_t lastModifiedTimestamp);
  void recv_getCompactContacts(std::vector<CompactContact> & _return, const int32_t seqid);
  void notifyNotiCenterEvent(const NotiCenterEventData& event);
  int32_t send_notifyNotiCenterEvent(const NotiCenterEventData& event);
  void recv_notifyNotiCenterEvent(const int32_t seqid);
  bool isInContact(const std::string& mid);
  int32_t send_isInContact(const std::string& mid);
  bool recv_isInContact(const int32_t seqid);
  void lookupGroupMembers(std::vector<SimpleChannelContact> & _return, const std::string& groupId, const std::vector<std::string> & mids);
  int32_t send_lookupGroupMembers(const std::string& groupId, const std::vector<std::string> & mids);
  void recv_lookupGroupMembers(std::vector<SimpleChannelContact> & _return, const int32_t seqid);
  void getRoomInformation(Room& _return, const std::string& roomMid);
  int32_t send_getRoomInformation(const std::string& roomMid);
  void recv_getRoomInformation(Room& _return, const int32_t seqid);
  void getGroupCall(GroupCall& _return, const std::string& chatMid);
  int32_t send_getGroupCall(const std::string& chatMid);
  void recv_getGroupCall(GroupCall& _return, const int32_t seqid);
  bool isAllowSecondaryDeviceLogin();
  int32_t send_isAllowSecondaryDeviceLogin();
  bool recv_isAllowSecondaryDeviceLogin(const int32_t seqid);
  void getPrimaryClientForChannel(SimpleChannelClient& _return);
  int32_t send_getPrimaryClientForChannel();
  void recv_getPrimaryClientForChannel(SimpleChannelClient& _return, const int32_t seqid);
  void createRoomWithBuddy(Room& _return, const int32_t reqSeq, const std::string& buddyMid, const std::vector<std::string> & contactIds);
  int32_t send_createRoomWithBuddy(const int32_t reqSeq, const std::string& buddyMid, const std::vector<std::string> & contactIds);
  void recv_createRoomWithBuddy(Room& _return, const int32_t seqid);
  void getDisplayName(std::string& _return, const std::string& mid);
  int32_t send_getDisplayName(const std::string& mid);
  void recv_getDisplayName(std::string& _return, const int32_t seqid);
  void getPaidCallMetadata(PaidCallMetadataResult& _return, const std::string& language);
  int32_t send_getPaidCallMetadata(const std::string& language);
  void recv_getPaidCallMetadata(PaidCallMetadataResult& _return, const int32_t seqid);
  void getMid(std::string& _return);
  int32_t send_getMid();
  void recv_getMid(std::string& _return, const int32_t seqid);
  void getUserCountryForBilling(std::string& _return, const std::string& country, const std::string& remoteIp);
  int32_t send_getUserCountryForBilling(const std::string& country, const std::string& remoteIp);
  void recv_getUserCountryForBilling(std::string& _return, const int32_t seqid);
  void getFavoriteGroupIdsForChannel(std::vector<std::string> & _return);
  int32_t send_getFavoriteGroupIdsForChannel();
  void recv_getFavoriteGroupIdsForChannel(std::vector<std::string> & _return, const int32_t seqid);
  void getPaidCallHistory(PaidCallHistoryResult& _return, const int64_t start, const int32_t size, const std::string& language);
  int32_t send_getPaidCallHistory(const int64_t start, const int32_t size, const std::string& language);
  void recv_getPaidCallHistory(PaidCallHistoryResult& _return, const int32_t seqid);
  void sendPinCodeOperation(const std::string& verifier);
  int32_t send_sendPinCodeOperation(const std::string& verifier);
  void recv_sendPinCodeOperation(const int32_t seqid);
  void inviteIntoGroupCall(const std::string& chatMid, const std::vector<std::string> & memberMids, const GroupCallMediaType::type mediaType);
  int32_t send_inviteIntoGroupCall(const std::string& chatMid, const std::vector<std::string> & memberMids, const GroupCallMediaType::type mediaType);
  void recv_inviteIntoGroupCall(const int32_t seqid);
  void getFriendMids(std::vector<std::string> & _return);
  int32_t send_getFriendMids();
  void recv_getFriendMids(std::vector<std::string> & _return, const int32_t seqid);
  void getMetaProfile(MetaProfile& _return);
  int32_t send_getMetaProfile();
  void recv_getMetaProfile(MetaProfile& _return, const int32_t seqid);
  void sendMessageForChannel(Message& _return, const Message& message);
  int32_t send_sendMessageForChannel(const Message& message);
  void recv_sendMessageForChannel(Message& _return, const int32_t seqid);
  int64_t activeBuddySubscriberCount();
  int32_t send_activeBuddySubscriberCount();
  int64_t recv_activeBuddySubscriberCount(const int32_t seqid);
  void getCallCreditPurchaseHistory(CoinHistoryResult& _return, const CoinHistoryCondition& request);
  int32_t send_getCallCreditPurchaseHistory(const CoinHistoryCondition& request);
  void recv_getCallCreditPurchaseHistory(CoinHistoryResult& _return, const int32_t seqid);
  bool isRoomMember(const std::string& roomId);
  int32_t send_isRoomMember(const std::string& roomId);
  bool recv_isRoomMember(const int32_t seqid);
  void sendSystemOAMessage(Message& _return, const Message& message);
  int32_t send_sendSystemOAMessage(const Message& message);
  void recv_sendSystemOAMessage(Message& _return, const int32_t seqid);
  void acquirePaidCallRoute(PaidCallResponse& _return, const PaidCallType::type paidCallType, const std::string& dialedNumber, const std::string& language, const std::string& networkCode, const bool disableCallerId, const std::string& referer, const std::string& adSessionId);
  int32_t send_acquirePaidCallRoute(const PaidCallType::type paidCallType, const std::string& dialedNumber, const std::string& language, const std::string& networkCode, const bool disableCallerId, const std::string& referer, const std::string& adSessionId);
  void recv_acquirePaidCallRoute(PaidCallResponse& _return, const int32_t seqid);
  void getGroupsForChannel(std::vector<Group> & _return, const std::vector<std::string> & groupIds);
  int32_t send_getGroupsForChannel(const std::vector<std::string> & groupIds);
  void recv_getGroupsForChannel(std::vector<Group> & _return, const int32_t seqid);
  int64_t getUserCreateTime();
  int32_t send_getUserCreateTime();
  int64_t recv_getUserCreateTime(const int32_t seqid);
  void registerChannelCP(std::string& _return, const std::string& cpId, const std::string& registerPassword);
  int32_t send_registerChannelCP(const std::string& cpId, const std::string& registerPassword);
  void recv_registerChannelCP(std::string& _return, const int32_t seqid);
  void reserveCallCreditPurchase(PaymentReservationResult& _return, const CoinPurchaseReservation& request);
  int32_t send_reserveCallCreditPurchase(const CoinPurchaseReservation& request);
  void recv_reserveCallCreditPurchase(PaymentReservationResult& _return, const int32_t seqid);
  void acquirePaidCallCurrencyExchangeRate(std::vector<PaidCallCurrencyExchangeRate> & _return, const std::string& language);
  int32_t send_acquirePaidCallCurrencyExchangeRate(const std::string& language);
  void recv_acquirePaidCallCurrencyExchangeRate(std::vector<PaidCallCurrencyExchangeRate> & _return, const int32_t seqid);
  void getRoomMemberMidsForAppPlatform(std::vector<std::string> & _return, const std::string& roomId);
  int32_t send_getRoomMemberMidsForAppPlatform(const std::string& roomId);
  void recv_getRoomMemberMidsForAppPlatform(std::vector<std::string> & _return, const int32_t seqid);
  void getPaidCallBalanceList(std::vector<PaidCallBalance> & _return, const std::string& language);
  int32_t send_getPaidCallBalanceList(const std::string& language);
  void recv_getPaidCallBalanceList(std::vector<PaidCallBalance> & _return, const int32_t seqid);
  void getPersonalInfos(std::map<PersonalInfo::type, std::string> & _return, const std::set<PersonalInfo::type> & requiredPersonalInfos);
  int32_t send_getPersonalInfos(const std::set<PersonalInfo::type> & requiredPersonalInfos);
  void recv_getPersonalInfos(std::map<PersonalInfo::type, std::string> & _return, const int32_t seqid);
  void getPrimaryClientsForChannel(std::vector<SimpleChannelClient> & _return, const std::vector<std::string> & userMids);
  int32_t send_getPrimaryClientsForChannel(const std::vector<std::string> & userMids);
  void recv_getPrimaryClientsForChannel(std::vector<SimpleChannelClient> & _return, const int32_t seqid);
  void addBuddyToContact(ContactTransition& _return, const std::string& buddyMid);
  int32_t send_addBuddyToContact(const std::string& buddyMid);
  void recv_addBuddyToContact(ContactTransition& _return, const int32_t seqid);
  void getGroupMemberMidsForAppPlatform(std::vector<std::string> & _return, const std::string& groupId);
  int32_t send_getGroupMemberMidsForAppPlatform(const std::string& groupId);
  void recv_getGroupMemberMidsForAppPlatform(std::vector<std::string> & _return, const int32_t seqid);
  void getUserLanguage(std::string& _return);
  int32_t send_getUserLanguage();
  void recv_getUserLanguage(std::string& _return, const int32_t seqid);
  void lookupPaidCall(PaidCallResponse& _return, const std::string& dialedNumber, const std::string& language, const std::string& referer);
  int32_t send_lookupPaidCall(const std::string& dialedNumber, const std::string& language, const std::string& referer);
  void recv_lookupPaidCall(PaidCallResponse& _return, const int32_t seqid);
  void getExtendedProfile(ExtendedProfile& _return);
  int32_t send_getExtendedProfile();
  void recv_getExtendedProfile(ExtendedProfile& _return, const int32_t seqid);
  void getReverseCompactContacts(std::map<std::string, CompactContact> & _return, const std::vector<std::string> & ids);
  int32_t send_getReverseCompactContacts(const std::vector<std::string> & ids);
  void recv_getReverseCompactContacts(std::map<std::string, CompactContact> & _return, const int32_t seqid);
  void getPaidCallAdStatus(PaidCallAdResult& _return);
  int32_t send_getPaidCallAdStatus();
  void recv_getPaidCallAdStatus(PaidCallAdResult& _return, const int32_t seqid);
  void findContactByUseridWithoutAbuseBlockForChannel(Contact& _return, const std::string& userid);
  int32_t send_findContactByUseridWithoutAbuseBlockForChannel(const std::string& userid);
  void recv_findContactByUseridWithoutAbuseBlockForChannel(Contact& _return, const int32_t seqid);
  void getGroupMemberMids(std::vector<std::string> & _return, const std::string& groupId);
  int32_t send_getGroupMemberMids(const std::string& groupId);
  void recv_getGroupMemberMids(std::vector<std::string> & _return, const int32_t seqid);
  void sendMessageWithoutRelationship(Message& _return, const Message& message);
  int32_t send_sendMessageWithoutRelationship(const Message& message);
  void recv_sendMessageWithoutRelationship(Message& _return, const int32_t seqid);
  void displayBuddySubscriberCountInBulk(std::map<std::string, int64_t> & _return, const std::vector<std::string> & mids);
  int32_t send_displayBuddySubscriberCountInBulk(const std::vector<std::string> & mids);
  void recv_displayBuddySubscriberCountInBulk(std::map<std::string, int64_t> & _return, const int32_t seqid);
  void lookupRoomMembers(std::vector<SimpleChannelContact> & _return, const std::string& roomId, const std::vector<std::string> & mids);
  int32_t send_lookupRoomMembers(const std::string& roomId, const std::vector<std::string> & mids);
  void recv_lookupRoomMembers(std::vector<SimpleChannelContact> & _return, const int32_t seqid);
  void getFavoriteMidsForChannel(std::vector<std::string> & _return);
  int32_t send_getFavoriteMidsForChannel();
  void recv_getFavoriteMidsForChannel(std::vector<std::string> & _return, const int32_t seqid);
  void getAllContactIdsForChannel(std::vector<std::string> & _return);
  int32_t send_getAllContactIdsForChannel();
  void recv_getAllContactIdsForChannel(std::vector<std::string> & _return, const int32_t seqid);
  int64_t displayBuddySubscriberCount();
  int32_t send_displayBuddySubscriberCount();
  int64_t recv_displayBuddySubscriberCount(const int32_t seqid);
  void getProfileForChannel(Profile& _return);
  int32_t send_getProfileForChannel();
  void recv_getProfileForChannel(Profile& _return, const int32_t seqid);
  void getUserTickets(std::vector<UserTicketResponse> & _return, const std::vector<std::string> & userMids);
  int32_t send_getUserTickets(const std::vector<std::string> & userMids);
  void recv_getUserTickets(std::vector<UserTicketResponse> & _return, const int32_t seqid);
  void getOAFriendMids(std::vector<std::string> & _return);
  int32_t send_getOAFriendMids();
  void recv_getOAFriendMids(std::vector<std::string> & _return, const int32_t seqid);
  void searchPaidCallUserRate(std::vector<PaidCallUserRate> & _return, const std::string& countryCode, const std::string& language);
  int32_t send_searchPaidCallUserRate(const std::string& countryCode, const std::string& language);
  void recv_searchPaidCallUserRate(std::vector<PaidCallUserRate> & _return, const int32_t seqid);
  void getJoinedGroupIdsForChannel(std::vector<std::string> & _return);
  int32_t send_getJoinedGroupIdsForChannel();
  void recv_getJoinedGroupIdsForChannel(std::vector<std::string> & _return, const int32_t seqid);
  void acquireGroupCallRoute(GroupCallRoute& _return, const std::string& chatMid, const GroupCallMediaType::type mediaType);
  int32_t send_acquireGroupCallRoute(const std::string& chatMid, const GroupCallMediaType::type mediaType);
  void recv_acquireGroupCallRoute(GroupCallRoute& _return, const int32_t seqid);
  void getUserMidsWhoAddedMe(std::vector<std::string> & _return);
  int32_t send_getUserMidsWhoAddedMe();
  void recv_getUserMidsWhoAddedMe(std::vector<std::string> & _return, const int32_t seqid);
  void getIdentityCredential(IdentityCredential& _return);
  int32_t send_getIdentityCredential();
  void recv_getIdentityCredential(IdentityCredential& _return, const int32_t seqid);
  void addOperationForChannel(const OpType::type opType, const std::string& param1, const std::string& param2, const std::string& param3);
  int32_t send_addOperationForChannel(const OpType::type opType, const std::string& param1, const std::string& param2, const std::string& param3);
  void recv_addOperationForChannel(const int32_t seqid);
  void getSimpleChannelContacts(std::vector<SimpleChannelContact> & _return, const std::vector<std::string> & ids, const bool statusSticonFallbackDisabled);
  int32_t send_getSimpleChannelContacts(const std::vector<std::string> & ids, const bool statusSticonFallbackDisabled);
  void recv_getSimpleChannelContacts(std::vector<SimpleChannelContact> & _return, const int32_t seqid);
  int64_t getUserLastSentMessageTimeStamp(const std::string& mid);
  int32_t send_getUserLastSentMessageTimeStamp(const std::string& mid);
  int64_t recv_getUserLastSentMessageTimeStamp(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
