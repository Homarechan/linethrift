/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AuthService_H
#define AuthService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "line_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class AuthServiceIf {
 public:
  virtual ~AuthServiceIf() {}
  virtual void normalizePhoneNumber(std::string& _return, const std::string& countryCode, const std::string& phoneNumber, const std::string& countryCodeHint) = 0;
  virtual void respondE2EELoginRequest(const std::string& verifier, const E2EEPublicKey& publicKey, const std::string& encryptedKeyChain, const std::string& hashKeyChain, const ErrorCode::type errorCode) = 0;
  virtual void confirmE2EELogin(std::string& _return, const std::string& verifier, const std::string& deviceSecret) = 0;
  virtual void logoutZ() = 0;
  virtual void loginZ(LoginResult& _return, const LoginRequest& loginRequest) = 0;
  virtual void issueTokenForAccountMigrationSettings(SecurityCenterResult& _return, const bool enforce) = 0;
  virtual void issueTokenForAccountMigration(SecurityCenterResult& _return, const std::string& migrationSessionId) = 0;
  virtual void verifyQrcodeWithE2EE(std::string& _return, const std::string& verifier, const std::string& pinCode, const ErrorCode::type errorCode, const E2EEPublicKey& publicKey, const std::string& encryptedKeyChain, const std::string& hashKeyChain) = 0;
};

class AuthServiceIfFactory {
 public:
  typedef AuthServiceIf Handler;

  virtual ~AuthServiceIfFactory() {}

  virtual AuthServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AuthServiceIf* /* handler */) = 0;
};

class AuthServiceIfSingletonFactory : virtual public AuthServiceIfFactory {
 public:
  AuthServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<AuthServiceIf>& iface) : iface_(iface) {}
  virtual ~AuthServiceIfSingletonFactory() {}

  virtual AuthServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AuthServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<AuthServiceIf> iface_;
};

class AuthServiceNull : virtual public AuthServiceIf {
 public:
  virtual ~AuthServiceNull() {}
  void normalizePhoneNumber(std::string& /* _return */, const std::string& /* countryCode */, const std::string& /* phoneNumber */, const std::string& /* countryCodeHint */) {
    return;
  }
  void respondE2EELoginRequest(const std::string& /* verifier */, const E2EEPublicKey& /* publicKey */, const std::string& /* encryptedKeyChain */, const std::string& /* hashKeyChain */, const ErrorCode::type /* errorCode */) {
    return;
  }
  void confirmE2EELogin(std::string& /* _return */, const std::string& /* verifier */, const std::string& /* deviceSecret */) {
    return;
  }
  void logoutZ() {
    return;
  }
  void loginZ(LoginResult& /* _return */, const LoginRequest& /* loginRequest */) {
    return;
  }
  void issueTokenForAccountMigrationSettings(SecurityCenterResult& /* _return */, const bool /* enforce */) {
    return;
  }
  void issueTokenForAccountMigration(SecurityCenterResult& /* _return */, const std::string& /* migrationSessionId */) {
    return;
  }
  void verifyQrcodeWithE2EE(std::string& /* _return */, const std::string& /* verifier */, const std::string& /* pinCode */, const ErrorCode::type /* errorCode */, const E2EEPublicKey& /* publicKey */, const std::string& /* encryptedKeyChain */, const std::string& /* hashKeyChain */) {
    return;
  }
};

typedef struct _AuthService_normalizePhoneNumber_args__isset {
  _AuthService_normalizePhoneNumber_args__isset() : countryCode(false), phoneNumber(false), countryCodeHint(false) {}
  bool countryCode :1;
  bool phoneNumber :1;
  bool countryCodeHint :1;
} _AuthService_normalizePhoneNumber_args__isset;

class AuthService_normalizePhoneNumber_args {
 public:

  AuthService_normalizePhoneNumber_args(const AuthService_normalizePhoneNumber_args&);
  AuthService_normalizePhoneNumber_args& operator=(const AuthService_normalizePhoneNumber_args&);
  AuthService_normalizePhoneNumber_args() : countryCode(), phoneNumber(), countryCodeHint() {
  }

  virtual ~AuthService_normalizePhoneNumber_args() throw();
  std::string countryCode;
  std::string phoneNumber;
  std::string countryCodeHint;

  _AuthService_normalizePhoneNumber_args__isset __isset;

  void __set_countryCode(const std::string& val);

  void __set_phoneNumber(const std::string& val);

  void __set_countryCodeHint(const std::string& val);

  bool operator == (const AuthService_normalizePhoneNumber_args & rhs) const
  {
    if (!(countryCode == rhs.countryCode))
      return false;
    if (!(phoneNumber == rhs.phoneNumber))
      return false;
    if (!(countryCodeHint == rhs.countryCodeHint))
      return false;
    return true;
  }
  bool operator != (const AuthService_normalizePhoneNumber_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthService_normalizePhoneNumber_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AuthService_normalizePhoneNumber_pargs {
 public:


  virtual ~AuthService_normalizePhoneNumber_pargs() throw();
  const std::string* countryCode;
  const std::string* phoneNumber;
  const std::string* countryCodeHint;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthService_normalizePhoneNumber_result__isset {
  _AuthService_normalizePhoneNumber_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _AuthService_normalizePhoneNumber_result__isset;

class AuthService_normalizePhoneNumber_result {
 public:

  AuthService_normalizePhoneNumber_result(const AuthService_normalizePhoneNumber_result&);
  AuthService_normalizePhoneNumber_result& operator=(const AuthService_normalizePhoneNumber_result&);
  AuthService_normalizePhoneNumber_result() : success() {
  }

  virtual ~AuthService_normalizePhoneNumber_result() throw();
  std::string success;
  TalkException e;

  _AuthService_normalizePhoneNumber_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const AuthService_normalizePhoneNumber_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const AuthService_normalizePhoneNumber_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthService_normalizePhoneNumber_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthService_normalizePhoneNumber_presult__isset {
  _AuthService_normalizePhoneNumber_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _AuthService_normalizePhoneNumber_presult__isset;

class AuthService_normalizePhoneNumber_presult {
 public:


  virtual ~AuthService_normalizePhoneNumber_presult() throw();
  std::string* success;
  TalkException e;

  _AuthService_normalizePhoneNumber_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AuthService_respondE2EELoginRequest_args__isset {
  _AuthService_respondE2EELoginRequest_args__isset() : verifier(false), publicKey(false), encryptedKeyChain(false), hashKeyChain(false), errorCode(false) {}
  bool verifier :1;
  bool publicKey :1;
  bool encryptedKeyChain :1;
  bool hashKeyChain :1;
  bool errorCode :1;
} _AuthService_respondE2EELoginRequest_args__isset;

class AuthService_respondE2EELoginRequest_args {
 public:

  AuthService_respondE2EELoginRequest_args(const AuthService_respondE2EELoginRequest_args&);
  AuthService_respondE2EELoginRequest_args& operator=(const AuthService_respondE2EELoginRequest_args&);
  AuthService_respondE2EELoginRequest_args() : verifier(), encryptedKeyChain(), hashKeyChain(), errorCode((ErrorCode::type)0) {
  }

  virtual ~AuthService_respondE2EELoginRequest_args() throw();
  std::string verifier;
  E2EEPublicKey publicKey;
  std::string encryptedKeyChain;
  std::string hashKeyChain;
  ErrorCode::type errorCode;

  _AuthService_respondE2EELoginRequest_args__isset __isset;

  void __set_verifier(const std::string& val);

  void __set_publicKey(const E2EEPublicKey& val);

  void __set_encryptedKeyChain(const std::string& val);

  void __set_hashKeyChain(const std::string& val);

  void __set_errorCode(const ErrorCode::type val);

  bool operator == (const AuthService_respondE2EELoginRequest_args & rhs) const
  {
    if (!(verifier == rhs.verifier))
      return false;
    if (!(publicKey == rhs.publicKey))
      return false;
    if (!(encryptedKeyChain == rhs.encryptedKeyChain))
      return false;
    if (!(hashKeyChain == rhs.hashKeyChain))
      return false;
    if (!(errorCode == rhs.errorCode))
      return false;
    return true;
  }
  bool operator != (const AuthService_respondE2EELoginRequest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthService_respondE2EELoginRequest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AuthService_respondE2EELoginRequest_pargs {
 public:


  virtual ~AuthService_respondE2EELoginRequest_pargs() throw();
  const std::string* verifier;
  const E2EEPublicKey* publicKey;
  const std::string* encryptedKeyChain;
  const std::string* hashKeyChain;
  const ErrorCode::type* errorCode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthService_respondE2EELoginRequest_result__isset {
  _AuthService_respondE2EELoginRequest_result__isset() : e(false) {}
  bool e :1;
} _AuthService_respondE2EELoginRequest_result__isset;

class AuthService_respondE2EELoginRequest_result {
 public:

  AuthService_respondE2EELoginRequest_result(const AuthService_respondE2EELoginRequest_result&);
  AuthService_respondE2EELoginRequest_result& operator=(const AuthService_respondE2EELoginRequest_result&);
  AuthService_respondE2EELoginRequest_result() {
  }

  virtual ~AuthService_respondE2EELoginRequest_result() throw();
  TalkException e;

  _AuthService_respondE2EELoginRequest_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const AuthService_respondE2EELoginRequest_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const AuthService_respondE2EELoginRequest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthService_respondE2EELoginRequest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthService_respondE2EELoginRequest_presult__isset {
  _AuthService_respondE2EELoginRequest_presult__isset() : e(false) {}
  bool e :1;
} _AuthService_respondE2EELoginRequest_presult__isset;

class AuthService_respondE2EELoginRequest_presult {
 public:


  virtual ~AuthService_respondE2EELoginRequest_presult() throw();
  TalkException e;

  _AuthService_respondE2EELoginRequest_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AuthService_confirmE2EELogin_args__isset {
  _AuthService_confirmE2EELogin_args__isset() : verifier(false), deviceSecret(false) {}
  bool verifier :1;
  bool deviceSecret :1;
} _AuthService_confirmE2EELogin_args__isset;

class AuthService_confirmE2EELogin_args {
 public:

  AuthService_confirmE2EELogin_args(const AuthService_confirmE2EELogin_args&);
  AuthService_confirmE2EELogin_args& operator=(const AuthService_confirmE2EELogin_args&);
  AuthService_confirmE2EELogin_args() : verifier(), deviceSecret() {
  }

  virtual ~AuthService_confirmE2EELogin_args() throw();
  std::string verifier;
  std::string deviceSecret;

  _AuthService_confirmE2EELogin_args__isset __isset;

  void __set_verifier(const std::string& val);

  void __set_deviceSecret(const std::string& val);

  bool operator == (const AuthService_confirmE2EELogin_args & rhs) const
  {
    if (!(verifier == rhs.verifier))
      return false;
    if (!(deviceSecret == rhs.deviceSecret))
      return false;
    return true;
  }
  bool operator != (const AuthService_confirmE2EELogin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthService_confirmE2EELogin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AuthService_confirmE2EELogin_pargs {
 public:


  virtual ~AuthService_confirmE2EELogin_pargs() throw();
  const std::string* verifier;
  const std::string* deviceSecret;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthService_confirmE2EELogin_result__isset {
  _AuthService_confirmE2EELogin_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _AuthService_confirmE2EELogin_result__isset;

class AuthService_confirmE2EELogin_result {
 public:

  AuthService_confirmE2EELogin_result(const AuthService_confirmE2EELogin_result&);
  AuthService_confirmE2EELogin_result& operator=(const AuthService_confirmE2EELogin_result&);
  AuthService_confirmE2EELogin_result() : success() {
  }

  virtual ~AuthService_confirmE2EELogin_result() throw();
  std::string success;
  TalkException e;

  _AuthService_confirmE2EELogin_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const AuthService_confirmE2EELogin_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const AuthService_confirmE2EELogin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthService_confirmE2EELogin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthService_confirmE2EELogin_presult__isset {
  _AuthService_confirmE2EELogin_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _AuthService_confirmE2EELogin_presult__isset;

class AuthService_confirmE2EELogin_presult {
 public:


  virtual ~AuthService_confirmE2EELogin_presult() throw();
  std::string* success;
  TalkException e;

  _AuthService_confirmE2EELogin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class AuthService_logoutZ_args {
 public:

  AuthService_logoutZ_args(const AuthService_logoutZ_args&);
  AuthService_logoutZ_args& operator=(const AuthService_logoutZ_args&);
  AuthService_logoutZ_args() {
  }

  virtual ~AuthService_logoutZ_args() throw();

  bool operator == (const AuthService_logoutZ_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AuthService_logoutZ_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthService_logoutZ_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AuthService_logoutZ_pargs {
 public:


  virtual ~AuthService_logoutZ_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthService_logoutZ_result__isset {
  _AuthService_logoutZ_result__isset() : e(false) {}
  bool e :1;
} _AuthService_logoutZ_result__isset;

class AuthService_logoutZ_result {
 public:

  AuthService_logoutZ_result(const AuthService_logoutZ_result&);
  AuthService_logoutZ_result& operator=(const AuthService_logoutZ_result&);
  AuthService_logoutZ_result() {
  }

  virtual ~AuthService_logoutZ_result() throw();
  TalkException e;

  _AuthService_logoutZ_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const AuthService_logoutZ_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const AuthService_logoutZ_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthService_logoutZ_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthService_logoutZ_presult__isset {
  _AuthService_logoutZ_presult__isset() : e(false) {}
  bool e :1;
} _AuthService_logoutZ_presult__isset;

class AuthService_logoutZ_presult {
 public:


  virtual ~AuthService_logoutZ_presult() throw();
  TalkException e;

  _AuthService_logoutZ_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AuthService_loginZ_args__isset {
  _AuthService_loginZ_args__isset() : loginRequest(false) {}
  bool loginRequest :1;
} _AuthService_loginZ_args__isset;

class AuthService_loginZ_args {
 public:

  AuthService_loginZ_args(const AuthService_loginZ_args&);
  AuthService_loginZ_args& operator=(const AuthService_loginZ_args&);
  AuthService_loginZ_args() {
  }

  virtual ~AuthService_loginZ_args() throw();
  LoginRequest loginRequest;

  _AuthService_loginZ_args__isset __isset;

  void __set_loginRequest(const LoginRequest& val);

  bool operator == (const AuthService_loginZ_args & rhs) const
  {
    if (!(loginRequest == rhs.loginRequest))
      return false;
    return true;
  }
  bool operator != (const AuthService_loginZ_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthService_loginZ_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AuthService_loginZ_pargs {
 public:


  virtual ~AuthService_loginZ_pargs() throw();
  const LoginRequest* loginRequest;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthService_loginZ_result__isset {
  _AuthService_loginZ_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _AuthService_loginZ_result__isset;

class AuthService_loginZ_result {
 public:

  AuthService_loginZ_result(const AuthService_loginZ_result&);
  AuthService_loginZ_result& operator=(const AuthService_loginZ_result&);
  AuthService_loginZ_result() {
  }

  virtual ~AuthService_loginZ_result() throw();
  LoginResult success;
  TalkException e;

  _AuthService_loginZ_result__isset __isset;

  void __set_success(const LoginResult& val);

  void __set_e(const TalkException& val);

  bool operator == (const AuthService_loginZ_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const AuthService_loginZ_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthService_loginZ_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthService_loginZ_presult__isset {
  _AuthService_loginZ_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _AuthService_loginZ_presult__isset;

class AuthService_loginZ_presult {
 public:


  virtual ~AuthService_loginZ_presult() throw();
  LoginResult* success;
  TalkException e;

  _AuthService_loginZ_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AuthService_issueTokenForAccountMigrationSettings_args__isset {
  _AuthService_issueTokenForAccountMigrationSettings_args__isset() : enforce(false) {}
  bool enforce :1;
} _AuthService_issueTokenForAccountMigrationSettings_args__isset;

class AuthService_issueTokenForAccountMigrationSettings_args {
 public:

  AuthService_issueTokenForAccountMigrationSettings_args(const AuthService_issueTokenForAccountMigrationSettings_args&);
  AuthService_issueTokenForAccountMigrationSettings_args& operator=(const AuthService_issueTokenForAccountMigrationSettings_args&);
  AuthService_issueTokenForAccountMigrationSettings_args() : enforce(0) {
  }

  virtual ~AuthService_issueTokenForAccountMigrationSettings_args() throw();
  bool enforce;

  _AuthService_issueTokenForAccountMigrationSettings_args__isset __isset;

  void __set_enforce(const bool val);

  bool operator == (const AuthService_issueTokenForAccountMigrationSettings_args & rhs) const
  {
    if (!(enforce == rhs.enforce))
      return false;
    return true;
  }
  bool operator != (const AuthService_issueTokenForAccountMigrationSettings_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthService_issueTokenForAccountMigrationSettings_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AuthService_issueTokenForAccountMigrationSettings_pargs {
 public:


  virtual ~AuthService_issueTokenForAccountMigrationSettings_pargs() throw();
  const bool* enforce;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthService_issueTokenForAccountMigrationSettings_result__isset {
  _AuthService_issueTokenForAccountMigrationSettings_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _AuthService_issueTokenForAccountMigrationSettings_result__isset;

class AuthService_issueTokenForAccountMigrationSettings_result {
 public:

  AuthService_issueTokenForAccountMigrationSettings_result(const AuthService_issueTokenForAccountMigrationSettings_result&);
  AuthService_issueTokenForAccountMigrationSettings_result& operator=(const AuthService_issueTokenForAccountMigrationSettings_result&);
  AuthService_issueTokenForAccountMigrationSettings_result() {
  }

  virtual ~AuthService_issueTokenForAccountMigrationSettings_result() throw();
  SecurityCenterResult success;
  TalkException e;

  _AuthService_issueTokenForAccountMigrationSettings_result__isset __isset;

  void __set_success(const SecurityCenterResult& val);

  void __set_e(const TalkException& val);

  bool operator == (const AuthService_issueTokenForAccountMigrationSettings_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const AuthService_issueTokenForAccountMigrationSettings_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthService_issueTokenForAccountMigrationSettings_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthService_issueTokenForAccountMigrationSettings_presult__isset {
  _AuthService_issueTokenForAccountMigrationSettings_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _AuthService_issueTokenForAccountMigrationSettings_presult__isset;

class AuthService_issueTokenForAccountMigrationSettings_presult {
 public:


  virtual ~AuthService_issueTokenForAccountMigrationSettings_presult() throw();
  SecurityCenterResult* success;
  TalkException e;

  _AuthService_issueTokenForAccountMigrationSettings_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AuthService_issueTokenForAccountMigration_args__isset {
  _AuthService_issueTokenForAccountMigration_args__isset() : migrationSessionId(false) {}
  bool migrationSessionId :1;
} _AuthService_issueTokenForAccountMigration_args__isset;

class AuthService_issueTokenForAccountMigration_args {
 public:

  AuthService_issueTokenForAccountMigration_args(const AuthService_issueTokenForAccountMigration_args&);
  AuthService_issueTokenForAccountMigration_args& operator=(const AuthService_issueTokenForAccountMigration_args&);
  AuthService_issueTokenForAccountMigration_args() : migrationSessionId() {
  }

  virtual ~AuthService_issueTokenForAccountMigration_args() throw();
  std::string migrationSessionId;

  _AuthService_issueTokenForAccountMigration_args__isset __isset;

  void __set_migrationSessionId(const std::string& val);

  bool operator == (const AuthService_issueTokenForAccountMigration_args & rhs) const
  {
    if (!(migrationSessionId == rhs.migrationSessionId))
      return false;
    return true;
  }
  bool operator != (const AuthService_issueTokenForAccountMigration_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthService_issueTokenForAccountMigration_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AuthService_issueTokenForAccountMigration_pargs {
 public:


  virtual ~AuthService_issueTokenForAccountMigration_pargs() throw();
  const std::string* migrationSessionId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthService_issueTokenForAccountMigration_result__isset {
  _AuthService_issueTokenForAccountMigration_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _AuthService_issueTokenForAccountMigration_result__isset;

class AuthService_issueTokenForAccountMigration_result {
 public:

  AuthService_issueTokenForAccountMigration_result(const AuthService_issueTokenForAccountMigration_result&);
  AuthService_issueTokenForAccountMigration_result& operator=(const AuthService_issueTokenForAccountMigration_result&);
  AuthService_issueTokenForAccountMigration_result() {
  }

  virtual ~AuthService_issueTokenForAccountMigration_result() throw();
  SecurityCenterResult success;
  TalkException e;

  _AuthService_issueTokenForAccountMigration_result__isset __isset;

  void __set_success(const SecurityCenterResult& val);

  void __set_e(const TalkException& val);

  bool operator == (const AuthService_issueTokenForAccountMigration_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const AuthService_issueTokenForAccountMigration_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthService_issueTokenForAccountMigration_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthService_issueTokenForAccountMigration_presult__isset {
  _AuthService_issueTokenForAccountMigration_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _AuthService_issueTokenForAccountMigration_presult__isset;

class AuthService_issueTokenForAccountMigration_presult {
 public:


  virtual ~AuthService_issueTokenForAccountMigration_presult() throw();
  SecurityCenterResult* success;
  TalkException e;

  _AuthService_issueTokenForAccountMigration_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AuthService_verifyQrcodeWithE2EE_args__isset {
  _AuthService_verifyQrcodeWithE2EE_args__isset() : verifier(false), pinCode(false), errorCode(false), publicKey(false), encryptedKeyChain(false), hashKeyChain(false) {}
  bool verifier :1;
  bool pinCode :1;
  bool errorCode :1;
  bool publicKey :1;
  bool encryptedKeyChain :1;
  bool hashKeyChain :1;
} _AuthService_verifyQrcodeWithE2EE_args__isset;

class AuthService_verifyQrcodeWithE2EE_args {
 public:

  AuthService_verifyQrcodeWithE2EE_args(const AuthService_verifyQrcodeWithE2EE_args&);
  AuthService_verifyQrcodeWithE2EE_args& operator=(const AuthService_verifyQrcodeWithE2EE_args&);
  AuthService_verifyQrcodeWithE2EE_args() : verifier(), pinCode(), errorCode((ErrorCode::type)0), encryptedKeyChain(), hashKeyChain() {
  }

  virtual ~AuthService_verifyQrcodeWithE2EE_args() throw();
  std::string verifier;
  std::string pinCode;
  ErrorCode::type errorCode;
  E2EEPublicKey publicKey;
  std::string encryptedKeyChain;
  std::string hashKeyChain;

  _AuthService_verifyQrcodeWithE2EE_args__isset __isset;

  void __set_verifier(const std::string& val);

  void __set_pinCode(const std::string& val);

  void __set_errorCode(const ErrorCode::type val);

  void __set_publicKey(const E2EEPublicKey& val);

  void __set_encryptedKeyChain(const std::string& val);

  void __set_hashKeyChain(const std::string& val);

  bool operator == (const AuthService_verifyQrcodeWithE2EE_args & rhs) const
  {
    if (!(verifier == rhs.verifier))
      return false;
    if (!(pinCode == rhs.pinCode))
      return false;
    if (!(errorCode == rhs.errorCode))
      return false;
    if (!(publicKey == rhs.publicKey))
      return false;
    if (!(encryptedKeyChain == rhs.encryptedKeyChain))
      return false;
    if (!(hashKeyChain == rhs.hashKeyChain))
      return false;
    return true;
  }
  bool operator != (const AuthService_verifyQrcodeWithE2EE_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthService_verifyQrcodeWithE2EE_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AuthService_verifyQrcodeWithE2EE_pargs {
 public:


  virtual ~AuthService_verifyQrcodeWithE2EE_pargs() throw();
  const std::string* verifier;
  const std::string* pinCode;
  const ErrorCode::type* errorCode;
  const E2EEPublicKey* publicKey;
  const std::string* encryptedKeyChain;
  const std::string* hashKeyChain;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthService_verifyQrcodeWithE2EE_result__isset {
  _AuthService_verifyQrcodeWithE2EE_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _AuthService_verifyQrcodeWithE2EE_result__isset;

class AuthService_verifyQrcodeWithE2EE_result {
 public:

  AuthService_verifyQrcodeWithE2EE_result(const AuthService_verifyQrcodeWithE2EE_result&);
  AuthService_verifyQrcodeWithE2EE_result& operator=(const AuthService_verifyQrcodeWithE2EE_result&);
  AuthService_verifyQrcodeWithE2EE_result() : success() {
  }

  virtual ~AuthService_verifyQrcodeWithE2EE_result() throw();
  std::string success;
  TalkException e;

  _AuthService_verifyQrcodeWithE2EE_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const AuthService_verifyQrcodeWithE2EE_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const AuthService_verifyQrcodeWithE2EE_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthService_verifyQrcodeWithE2EE_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthService_verifyQrcodeWithE2EE_presult__isset {
  _AuthService_verifyQrcodeWithE2EE_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _AuthService_verifyQrcodeWithE2EE_presult__isset;

class AuthService_verifyQrcodeWithE2EE_presult {
 public:


  virtual ~AuthService_verifyQrcodeWithE2EE_presult() throw();
  std::string* success;
  TalkException e;

  _AuthService_verifyQrcodeWithE2EE_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AuthServiceClient : virtual public AuthServiceIf {
 public:
  AuthServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AuthServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void normalizePhoneNumber(std::string& _return, const std::string& countryCode, const std::string& phoneNumber, const std::string& countryCodeHint);
  void send_normalizePhoneNumber(const std::string& countryCode, const std::string& phoneNumber, const std::string& countryCodeHint);
  void recv_normalizePhoneNumber(std::string& _return);
  void respondE2EELoginRequest(const std::string& verifier, const E2EEPublicKey& publicKey, const std::string& encryptedKeyChain, const std::string& hashKeyChain, const ErrorCode::type errorCode);
  void send_respondE2EELoginRequest(const std::string& verifier, const E2EEPublicKey& publicKey, const std::string& encryptedKeyChain, const std::string& hashKeyChain, const ErrorCode::type errorCode);
  void recv_respondE2EELoginRequest();
  void confirmE2EELogin(std::string& _return, const std::string& verifier, const std::string& deviceSecret);
  void send_confirmE2EELogin(const std::string& verifier, const std::string& deviceSecret);
  void recv_confirmE2EELogin(std::string& _return);
  void logoutZ();
  void send_logoutZ();
  void recv_logoutZ();
  void loginZ(LoginResult& _return, const LoginRequest& loginRequest);
  void send_loginZ(const LoginRequest& loginRequest);
  void recv_loginZ(LoginResult& _return);
  void issueTokenForAccountMigrationSettings(SecurityCenterResult& _return, const bool enforce);
  void send_issueTokenForAccountMigrationSettings(const bool enforce);
  void recv_issueTokenForAccountMigrationSettings(SecurityCenterResult& _return);
  void issueTokenForAccountMigration(SecurityCenterResult& _return, const std::string& migrationSessionId);
  void send_issueTokenForAccountMigration(const std::string& migrationSessionId);
  void recv_issueTokenForAccountMigration(SecurityCenterResult& _return);
  void verifyQrcodeWithE2EE(std::string& _return, const std::string& verifier, const std::string& pinCode, const ErrorCode::type errorCode, const E2EEPublicKey& publicKey, const std::string& encryptedKeyChain, const std::string& hashKeyChain);
  void send_verifyQrcodeWithE2EE(const std::string& verifier, const std::string& pinCode, const ErrorCode::type errorCode, const E2EEPublicKey& publicKey, const std::string& encryptedKeyChain, const std::string& hashKeyChain);
  void recv_verifyQrcodeWithE2EE(std::string& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AuthServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<AuthServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AuthServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_normalizePhoneNumber(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_respondE2EELoginRequest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_confirmE2EELogin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_logoutZ(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loginZ(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_issueTokenForAccountMigrationSettings(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_issueTokenForAccountMigration(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_verifyQrcodeWithE2EE(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AuthServiceProcessor(::apache::thrift::stdcxx::shared_ptr<AuthServiceIf> iface) :
    iface_(iface) {
    processMap_["normalizePhoneNumber"] = &AuthServiceProcessor::process_normalizePhoneNumber;
    processMap_["respondE2EELoginRequest"] = &AuthServiceProcessor::process_respondE2EELoginRequest;
    processMap_["confirmE2EELogin"] = &AuthServiceProcessor::process_confirmE2EELogin;
    processMap_["logoutZ"] = &AuthServiceProcessor::process_logoutZ;
    processMap_["loginZ"] = &AuthServiceProcessor::process_loginZ;
    processMap_["issueTokenForAccountMigrationSettings"] = &AuthServiceProcessor::process_issueTokenForAccountMigrationSettings;
    processMap_["issueTokenForAccountMigration"] = &AuthServiceProcessor::process_issueTokenForAccountMigration;
    processMap_["verifyQrcodeWithE2EE"] = &AuthServiceProcessor::process_verifyQrcodeWithE2EE;
  }

  virtual ~AuthServiceProcessor() {}
};

class AuthServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AuthServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< AuthServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< AuthServiceIfFactory > handlerFactory_;
};

class AuthServiceMultiface : virtual public AuthServiceIf {
 public:
  AuthServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<AuthServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AuthServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<AuthServiceIf> > ifaces_;
  AuthServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<AuthServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void normalizePhoneNumber(std::string& _return, const std::string& countryCode, const std::string& phoneNumber, const std::string& countryCodeHint) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->normalizePhoneNumber(_return, countryCode, phoneNumber, countryCodeHint);
    }
    ifaces_[i]->normalizePhoneNumber(_return, countryCode, phoneNumber, countryCodeHint);
    return;
  }

  void respondE2EELoginRequest(const std::string& verifier, const E2EEPublicKey& publicKey, const std::string& encryptedKeyChain, const std::string& hashKeyChain, const ErrorCode::type errorCode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->respondE2EELoginRequest(verifier, publicKey, encryptedKeyChain, hashKeyChain, errorCode);
    }
    ifaces_[i]->respondE2EELoginRequest(verifier, publicKey, encryptedKeyChain, hashKeyChain, errorCode);
  }

  void confirmE2EELogin(std::string& _return, const std::string& verifier, const std::string& deviceSecret) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->confirmE2EELogin(_return, verifier, deviceSecret);
    }
    ifaces_[i]->confirmE2EELogin(_return, verifier, deviceSecret);
    return;
  }

  void logoutZ() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->logoutZ();
    }
    ifaces_[i]->logoutZ();
  }

  void loginZ(LoginResult& _return, const LoginRequest& loginRequest) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loginZ(_return, loginRequest);
    }
    ifaces_[i]->loginZ(_return, loginRequest);
    return;
  }

  void issueTokenForAccountMigrationSettings(SecurityCenterResult& _return, const bool enforce) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->issueTokenForAccountMigrationSettings(_return, enforce);
    }
    ifaces_[i]->issueTokenForAccountMigrationSettings(_return, enforce);
    return;
  }

  void issueTokenForAccountMigration(SecurityCenterResult& _return, const std::string& migrationSessionId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->issueTokenForAccountMigration(_return, migrationSessionId);
    }
    ifaces_[i]->issueTokenForAccountMigration(_return, migrationSessionId);
    return;
  }

  void verifyQrcodeWithE2EE(std::string& _return, const std::string& verifier, const std::string& pinCode, const ErrorCode::type errorCode, const E2EEPublicKey& publicKey, const std::string& encryptedKeyChain, const std::string& hashKeyChain) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->verifyQrcodeWithE2EE(_return, verifier, pinCode, errorCode, publicKey, encryptedKeyChain, hashKeyChain);
    }
    ifaces_[i]->verifyQrcodeWithE2EE(_return, verifier, pinCode, errorCode, publicKey, encryptedKeyChain, hashKeyChain);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class AuthServiceConcurrentClient : virtual public AuthServiceIf {
 public:
  AuthServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AuthServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void normalizePhoneNumber(std::string& _return, const std::string& countryCode, const std::string& phoneNumber, const std::string& countryCodeHint);
  int32_t send_normalizePhoneNumber(const std::string& countryCode, const std::string& phoneNumber, const std::string& countryCodeHint);
  void recv_normalizePhoneNumber(std::string& _return, const int32_t seqid);
  void respondE2EELoginRequest(const std::string& verifier, const E2EEPublicKey& publicKey, const std::string& encryptedKeyChain, const std::string& hashKeyChain, const ErrorCode::type errorCode);
  int32_t send_respondE2EELoginRequest(const std::string& verifier, const E2EEPublicKey& publicKey, const std::string& encryptedKeyChain, const std::string& hashKeyChain, const ErrorCode::type errorCode);
  void recv_respondE2EELoginRequest(const int32_t seqid);
  void confirmE2EELogin(std::string& _return, const std::string& verifier, const std::string& deviceSecret);
  int32_t send_confirmE2EELogin(const std::string& verifier, const std::string& deviceSecret);
  void recv_confirmE2EELogin(std::string& _return, const int32_t seqid);
  void logoutZ();
  int32_t send_logoutZ();
  void recv_logoutZ(const int32_t seqid);
  void loginZ(LoginResult& _return, const LoginRequest& loginRequest);
  int32_t send_loginZ(const LoginRequest& loginRequest);
  void recv_loginZ(LoginResult& _return, const int32_t seqid);
  void issueTokenForAccountMigrationSettings(SecurityCenterResult& _return, const bool enforce);
  int32_t send_issueTokenForAccountMigrationSettings(const bool enforce);
  void recv_issueTokenForAccountMigrationSettings(SecurityCenterResult& _return, const int32_t seqid);
  void issueTokenForAccountMigration(SecurityCenterResult& _return, const std::string& migrationSessionId);
  int32_t send_issueTokenForAccountMigration(const std::string& migrationSessionId);
  void recv_issueTokenForAccountMigration(SecurityCenterResult& _return, const int32_t seqid);
  void verifyQrcodeWithE2EE(std::string& _return, const std::string& verifier, const std::string& pinCode, const ErrorCode::type errorCode, const E2EEPublicKey& publicKey, const std::string& encryptedKeyChain, const std::string& hashKeyChain);
  int32_t send_verifyQrcodeWithE2EE(const std::string& verifier, const std::string& pinCode, const ErrorCode::type errorCode, const E2EEPublicKey& publicKey, const std::string& encryptedKeyChain, const std::string& hashKeyChain);
  void recv_verifyQrcodeWithE2EE(std::string& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
