/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TalkService_H
#define TalkService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "line_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TalkServiceIf {
 public:
  virtual ~TalkServiceIf() {}
  virtual void searchCollection(SearchResult& _return, const std::string& query, const SearchPagingParameter& param) = 0;
  virtual void getChatRoomAnnouncementsBulk(std::map<std::string, std::vector<ChatRoomAnnouncement> > & _return, const std::vector<std::string> & chatRoomMids) = 0;
  virtual void getChatRoomAnnouncements(std::vector<ChatRoomAnnouncement> & _return, const std::string& chatRoomMid) = 0;
  virtual void createChatRoomAnnouncement(ChatRoomAnnouncement& _return, const int32_t reqSeq, const std::string& chatRoomMid, const ChatRoomAnnouncementType::type type, const ChatRoomAnnouncementContents& contents) = 0;
  virtual void removeChatRoomAnnouncement(const int32_t reqSeq, const std::string& chatRoomMid, const int64_t announcementSeq) = 0;
  virtual void unsendMessage(const int32_t seq, const std::string& messageId) = 0;
  virtual void getGroupWithoutMembers(Group& _return, const std::string& groupId) = 0;
  virtual void requestResendMessage(const int32_t reqSeq, const std::string& senderMid, const std::string& messageId) = 0;
  virtual void respondResendMessage(const int32_t reqSeq, const std::string& receiverMid, const std::string& originalMessageId, const Message& resendMessage, const ErrorCode::type errorCode) = 0;
  virtual void acceptGroupInvitation(const int32_t reqSeq, const std::string& groupId) = 0;
  virtual void acceptGroupInvitationByTicket(const int32_t reqSeq, const std::string& GroupMid, const std::string& ticketId) = 0;
  virtual void acceptProximityMatches(const std::string& sessionId, const std::set<std::string> & ids) = 0;
  virtual void acquireCallRoute(std::vector<std::string> & _return, const std::string& to) = 0;
  virtual void acquireCallTicket(std::string& _return, const std::string& to) = 0;
  virtual void acquireEncryptedAccessToken(std::string& _return, const FeatureType::type featureType) = 0;
  virtual void addSnsId(std::string& _return, const SnsIdType::type snsIdType, const std::string& snsAccessToken) = 0;
  virtual void blockContact(const int32_t reqSeq, const std::string& id) = 0;
  virtual void blockRecommendation(const int32_t reqSeq, const std::string& id) = 0;
  virtual void cancelGroupInvitation(const int32_t reqSeq, const std::string& groupId, const std::vector<std::string> & contactIds) = 0;
  virtual void changeVerificationMethod(VerificationSessionData& _return, const std::string& sessionId, const VerificationMethod::type method) = 0;
  virtual void clearIdentityCredential() = 0;
  virtual void clearMessageBox(const std::string& channelId, const std::string& messageBoxId) = 0;
  virtual void closeProximityMatch(const std::string& sessionId) = 0;
  virtual void commitSendMessage(std::map<std::string, std::string> & _return, const int32_t seq, const std::string& messageId, const std::vector<std::string> & receiverMids) = 0;
  virtual void commitSendMessages(std::map<std::string, std::string> & _return, const int32_t seq, const std::vector<std::string> & messageIds, const std::vector<std::string> & receiverMids) = 0;
  virtual void commitUpdateProfile(std::map<std::string, std::string> & _return, const int32_t seq, const std::vector<ProfileAttribute::type> & attrs, const std::vector<std::string> & receiverMids) = 0;
  virtual void confirmEmail(const std::string& verifier, const std::string& pinCode) = 0;
  virtual void createGroup(Group& _return, const int32_t seq, const std::string& name, const std::vector<std::string> & contactIds) = 0;
  virtual void createQrcodeBase64Image(std::string& _return, const std::string& url, const std::string& characterSet, const int32_t imageSize, const int32_t x, const int32_t y, const int32_t width, const int32_t height) = 0;
  virtual void createRoom(Room& _return, const int32_t reqSeq, const std::vector<std::string> & contactIds) = 0;
  virtual void createSession(std::string& _return) = 0;
  virtual void fetchAnnouncements(std::vector<Announcement> & _return, const int32_t lastFetchedIndex) = 0;
  virtual void fetchMessages(std::vector<Message> & _return, const int64_t localTs, const int32_t count) = 0;
  virtual void fetchOperations(std::vector<Operation> & _return, const int64_t localRev, const int32_t count) = 0;
  virtual void fetchOps(std::vector<Operation> & _return, const int64_t localRev, const int32_t count, const int64_t globalRev, const int64_t individualRev) = 0;
  virtual void findAndAddContactsByEmail(std::map<std::string, Contact> & _return, const int32_t reqSeq, const std::set<std::string> & emails) = 0;
  virtual void findAndAddContactsByMid(std::map<std::string, Contact> & _return, const int32_t reqSeq, const std::string& mid, const ContactType::type type, const std::string& reference) = 0;
  virtual void findGroupByTicketV2(Group& _return, const std::string& ticketId) = 0;
  virtual void findAndAddContactsByPhone(std::map<std::string, Contact> & _return, const int32_t reqSeq, const std::set<std::string> & phones) = 0;
  virtual void getFriendRequests(std::vector<FriendRequest> & _return, const FriendRequestDirection::type direction, const int64_t lastSeenSeqId) = 0;
  virtual void removeFriendRequest(const FriendRequestDirection::type direction, const std::string& midOrEMid) = 0;
  virtual void findAndAddContactsByUserid(std::map<std::string, Contact> & _return, const int32_t reqSeq, const std::string& userid) = 0;
  virtual void findContactByUserid(Contact& _return, const std::string& userid) = 0;
  virtual void findContactByUserTicket(Contact& _return, const std::string& ticketIdWithTag) = 0;
  virtual void findContactsByEmail(std::map<std::string, Contact> & _return, const std::set<std::string> & emails) = 0;
  virtual void findContactsByPhone(std::map<std::string, Contact> & _return, const std::set<std::string> & phones) = 0;
  virtual void findSnsIdUserStatus(SnsIdUserStatus& _return, const SnsIdType::type snsIdType, const std::string& snsAccessToken, const std::string& udidHash) = 0;
  virtual void finishUpdateVerification(const std::string& sessionId) = 0;
  virtual void generateUserTicket(Ticket& _return, const int64_t expirationTime, const int32_t maxUseCount) = 0;
  virtual void destroyMessage(const int32_t seq, const std::string& chatId, const std::string& messageId, const int32_t sessionId) = 0;
  virtual void getAcceptedProximityMatches(std::set<std::string> & _return, const std::string& sessionId) = 0;
  virtual void getActiveBuddySubscriberIds(std::vector<std::string> & _return) = 0;
  virtual void getAllContactIds(std::vector<std::string> & _return) = 0;
  virtual void getAuthQrcode(AuthQrcode& _return, const bool keepLoggedIn, const std::string& systemName) = 0;
  virtual void getBlockedContactIds(std::vector<std::string> & _return) = 0;
  virtual void registerWithPhoneNumber(RegisterWithPhoneNumberResult& _return, const std::string& sessionId, const std::string& migrationPincodeSessionId) = 0;
  virtual void registerWithPhoneNumberAndPassword(RegisterWithPhoneNumberResult& _return, const std::string& sessionId, const std::string& keynm, const std::string& encrypted) = 0;
  virtual void getAnalyticsInfo(AnalyticsInfo& _return) = 0;
  virtual void reportClientStatistics(const int32_t reqSeq, const ReportCategory::type category, const int32_t count) = 0;
  virtual void verifyPhoneNumberForLogin(std::string& _return, const std::string& verifierFromPhone, const std::string& pinCodeForPhone, const std::string& verifierFromLogin) = 0;
  virtual void verifyPhoneNumber(PhoneVerificationResult& _return, const std::string& sessionId, const std::string& pinCode, const std::string& udidHash, const std::string& migrationPincodeSessionId, const std::string& oldUdidHash) = 0;
  virtual void getBlockedContactIdsByRange(std::vector<std::string> & _return, const int32_t start, const int32_t count) = 0;
  virtual void getBlockedRecommendationIds(std::vector<std::string> & _return) = 0;
  virtual void getBuddyBlockerIds(std::vector<std::string> & _return) = 0;
  virtual void getBuddyLocation(Geolocation& _return, const std::string& mid, const int32_t index) = 0;
  virtual void getCompactContactsModifiedSince(std::vector<CompactContact> & _return, const int64_t timestamp) = 0;
  virtual void getCompactGroup(Group& _return, const std::string& groupId) = 0;
  virtual void getCompactRoom(Room& _return, const std::string& roomId) = 0;
  virtual void getContact(Contact& _return, const std::string& id) = 0;
  virtual void getContacts(std::vector<Contact> & _return, const std::vector<std::string> & ids) = 0;
  virtual void getContactWithFriendRequestStatus(Contact& _return, const std::string& id) = 0;
  virtual void getCountryWithRequestIp(std::string& _return) = 0;
  virtual void getFavoriteMids(std::vector<std::string> & _return) = 0;
  virtual void getGroup(Group& _return, const std::string& groupId) = 0;
  virtual void getGroupIdsInvited(std::vector<std::string> & _return) = 0;
  virtual void getGroupIdsJoined(std::vector<std::string> & _return) = 0;
  virtual void getGroups(std::vector<Group> & _return, const std::vector<std::string> & groupIds) = 0;
  virtual void getHiddenContactMids(std::vector<std::string> & _return) = 0;
  virtual void getIdentityIdentifier(std::string& _return) = 0;
  virtual int32_t getLastAnnouncementIndex() = 0;
  virtual int64_t getLastOpRevision() = 0;
  virtual void getSuggestRevisions(SuggestDictionaryRevisions& _return) = 0;
  virtual void getPreviousMessagesV2WithReadCount(std::vector<Message> & _return, const std::string& messageBoxId, const MessageBoxV2MessageId& endMessageId, const int32_t messagesCount) = 0;
  virtual void getMessageBox(TMessageBox& _return, const std::string& channelId, const std::string& messageBoxId, const int32_t lastMessagesCount) = 0;
  virtual void getMessageBoxCompactWrapUp(TMessageBoxWrapUp& _return, const std::string& mid) = 0;
  virtual void getMessageBoxCompactWrapUpList(TMessageBoxWrapUpResponse& _return, const int32_t start, const int32_t messageBoxCount) = 0;
  virtual void getMessageBoxList(std::vector<TMessageBox> & _return, const std::string& channelId, const int32_t lastMessagesCount) = 0;
  virtual void getMessageBoxListByStatus(std::vector<TMessageBox> & _return, const std::string& channelId, const int32_t lastMessagesCount, const int32_t status) = 0;
  virtual void getMessageBoxWrapUp(TMessageBoxWrapUp& _return, const std::string& mid) = 0;
  virtual void getMessageBoxWrapUpList(TMessageBoxWrapUpResponse& _return, const int32_t start, const int32_t messageBoxCount) = 0;
  virtual void getMessagesBySequenceNumber(std::vector<Message> & _return, const std::string& channelId, const std::string& messageBoxId, const int64_t startSeq, const int64_t endSeq) = 0;
  virtual void getNextMessages(std::vector<Message> & _return, const std::string& messageBoxId, const int64_t startSeq, const int32_t messagesCount) = 0;
  virtual void getNotificationPolicy(std::vector<NotificationType::type> & _return, const CarrierCode::type carrier) = 0;
  virtual void getPreviousMessages(std::vector<Message> & _return, const std::string& messageBoxId, const int64_t endSeq, const int32_t messagesCount) = 0;
  virtual void getProfile(Profile& _return) = 0;
  virtual void getProximityMatchCandidateList(ProximityMatchCandidateResult& _return, const std::string& sessionId) = 0;
  virtual void getProximityMatchCandidates(std::set<Contact> & _return, const std::string& sessionId) = 0;
  virtual void getRecentMessages(std::vector<Message> & _return, const std::string& messageBoxId, const int32_t messagesCount) = 0;
  virtual void getRecommendationIds(std::vector<std::string> & _return) = 0;
  virtual void getRoom(Room& _return, const std::string& roomId) = 0;
  virtual void getRSAKeyInfo(RSAKey& _return, const IdentityProvider::type provider) = 0;
  virtual int64_t getServerTime() = 0;
  virtual void getSessions(std::vector<LoginSession> & _return) = 0;
  virtual void getSettings(Settings& _return) = 0;
  virtual void getGroupsV2(std::vector<Group> & _return, const std::vector<std::string> & groupIds) = 0;
  virtual void getSettingsAttributes(Settings& _return, const int32_t attrBitset) = 0;
  virtual void getSystemConfiguration(SystemConfiguration& _return) = 0;
  virtual void getUserTicket(Ticket& _return) = 0;
  virtual void getWapInvitation(WapInvitation& _return, const std::string& invitationHash) = 0;
  virtual void invalidateUserTicket() = 0;
  virtual void inviteFriendsBySms(const std::vector<std::string> & phoneNumberList) = 0;
  virtual void inviteIntoGroup(const int32_t reqSeq, const std::string& groupId, const std::vector<std::string> & contactIds) = 0;
  virtual void inviteIntoRoom(const int32_t reqSeq, const std::string& roomId, const std::vector<std::string> & contactIds) = 0;
  virtual void inviteViaEmail(const int32_t reqSeq, const std::string& email, const std::string& name) = 0;
  virtual bool isIdentityIdentifierAvailable(const IdentityProvider::type provider, const std::string& identifier) = 0;
  virtual bool isUseridAvailable(const std::string& userid) = 0;
  virtual void kickoutFromGroup(const int32_t reqSeq, const std::string& groupId, const std::vector<std::string> & contactIds) = 0;
  virtual void reissueGroupTicket(std::string& _return, const std::string& groupMid) = 0;
  virtual void findGroupByTicket(Group& _return, const std::string& ticketId) = 0;
  virtual void leaveGroup(const int32_t reqSeq, const std::string& groupId) = 0;
  virtual void leaveRoom(const int32_t reqSeq, const std::string& roomId) = 0;
  virtual void loginWithIdentityCredential(std::string& _return, const IdentityProvider::type identityProvider, const std::string& identifier, const std::string& password, const bool keepLoggedIn, const std::string& accessLocation, const std::string& systemName, const std::string& certificate) = 0;
  virtual void loginWithIdentityCredentialForCertificate(LoginResult& _return, const IdentityProvider::type identityProvider, const std::string& identifier, const std::string& password, const bool keepLoggedIn, const std::string& accessLocation, const std::string& systemName, const std::string& certificate) = 0;
  virtual void loginWithVerifier(std::string& _return, const std::string& verifier) = 0;
  virtual void loginWithVerifierForCerificate(LoginResult& _return, const std::string& verifier) = 0;
  virtual void loginWithVerifierForCertificate(LoginResult& _return, const std::string& verifier) = 0;
  virtual void logout() = 0;
  virtual void logoutSession(const std::string& tokenKey) = 0;
  virtual void noop() = 0;
  virtual void notifiedRedirect(const std::map<std::string, std::string> & paramMap) = 0;
  virtual void notifyBuddyOnAir(std::map<std::string, std::string> & _return, const int32_t seq, const std::vector<std::string> & receiverMids) = 0;
  virtual void notifyIndividualEvent(const NotificationStatus::type notificationStatus, const std::vector<std::string> & receiverMids) = 0;
  virtual void notifyInstalled(const std::string& udidHash, const std::string& applicationTypeWithExtensions) = 0;
  virtual void notifyRegistrationComplete(const std::string& udidHash, const std::string& applicationTypeWithExtensions) = 0;
  virtual void notifySleep(const int64_t lastRev, const int32_t badge) = 0;
  virtual void notifyUpdated(const int64_t lastRev, const DeviceInfo& deviceInfo) = 0;
  virtual void openProximityMatch(std::string& _return, const Location& location) = 0;
  virtual void registerBuddyUser(std::string& _return, const std::string& buddyId, const std::string& registrarPassword) = 0;
  virtual void registerBuddyUserid(const int32_t seq, const std::string& userid) = 0;
  virtual void registerDevice(std::string& _return, const std::string& sessionId) = 0;
  virtual void registerDeviceWithIdentityCredential(std::string& _return, const std::string& sessionId, const IdentityProvider::type provider, const std::string& identifier, const std::string& verifier) = 0;
  virtual void registerDeviceWithoutPhoneNumber(std::string& _return, const std::string& region, const std::string& udidHash, const DeviceInfo& deviceInfo) = 0;
  virtual void registerDeviceWithoutPhoneNumberWithIdentityCredential(std::string& _return, const std::string& region, const std::string& udidHash, const DeviceInfo& deviceInfo, const IdentityProvider::type provider, const std::string& identifier, const std::string& verifier, const std::string& mid, const std::string& migrationPincodeSessionId) = 0;
  virtual bool registerUserid(const int32_t reqSeq, const std::string& userid) = 0;
  virtual void registerWapDevice(std::string& _return, const std::string& invitationHash, const std::string& guidHash, const std::string& email, const DeviceInfo& deviceInfo) = 0;
  virtual void registerWithExistingSnsIdAndIdentityCredential(std::string& _return, const IdentityCredential& identityCredential, const std::string& region, const std::string& udidHash, const DeviceInfo& deviceInfo) = 0;
  virtual void registerWithSnsId(RegisterWithSnsIdResult& _return, const SnsIdType::type snsIdType, const std::string& snsAccessToken, const std::string& region, const std::string& udidHash, const DeviceInfo& deviceInfo, const std::string& mid) = 0;
  virtual void registerWithSnsIdAndIdentityCredential(std::string& _return, const SnsIdType::type snsIdType, const std::string& snsAccessToken, const IdentityCredential& identityCredential, const std::string& region, const std::string& udidHash, const DeviceInfo& deviceInfo) = 0;
  virtual void reissueDeviceCredential(std::string& _return) = 0;
  virtual void reissueUserTicket(std::string& _return, const int64_t expirationTime, const int32_t maxUseCount) = 0;
  virtual void getMessageReadRange(std::vector<TMessageReadRange> & _return, const std::vector<std::string> & chatIds) = 0;
  virtual void rejectGroupInvitation(const int32_t reqSeq, const std::string& groupId) = 0;
  virtual void releaseSession() = 0;
  virtual void removeAllMessages(const int32_t seq, const std::string& lastMessageId) = 0;
  virtual void removeBuddyLocation(const std::string& mid, const int32_t index) = 0;
  virtual bool removeMessage(const std::string& messageId) = 0;
  virtual void makeUserAddMyselfAsContact(ContactTransition& _return, const std::string& contactOwnerMid) = 0;
  virtual bool removeMessageFromMyHome(const std::string& messageId) = 0;
  virtual void removeSnsId(std::string& _return, const SnsIdType::type snsIdType) = 0;
  virtual void report(const int64_t syncOpRevision, const SyncCategory::type category, const std::string& report) = 0;
  virtual void reportContacts(std::vector<ContactReportResult> & _return, const int64_t syncOpRevision, const SyncCategory::type category, const std::vector<ContactReport> & contactReports, const SyncActionType::type actionType) = 0;
  virtual void reportGroups(const int64_t syncOpRevision, const std::vector<Group> & groups) = 0;
  virtual void reportProfile(const int64_t syncOpRevision, const Profile& profile) = 0;
  virtual void reportRooms(const int64_t syncOpRevision, const std::vector<Room> & rooms) = 0;
  virtual void findAndAddContactByMetaTag(Contact& _return, const int32_t reqSeq, const std::string& userid, const std::string& reference) = 0;
  virtual void reportSettings(const int64_t syncOpRevision, const Settings& settings) = 0;
  virtual void reportSpam(const std::string& chatMid, const std::vector<std::string> & memberMids, const std::vector<SpammerReason::type> & spammerReasons, const std::vector<std::string> & senderMids, const std::vector<std::string> & spamMessageIds, const std::vector<std::string> & spamMessages) = 0;
  virtual void reportSpammer(const std::string& spammerMid, const std::vector<SpammerReason::type> & spammerReasons, const std::vector<std::string> & spamMessageIds) = 0;
  virtual void requestAccountPasswordReset(const IdentityProvider::type provider, const std::string& identifier, const std::string& locale) = 0;
  virtual void requestEmailConfirmation(EmailConfirmationSession& _return, const EmailConfirmation& emailConfirmation) = 0;
  virtual void requestIdentityUnbind(const IdentityProvider::type provider, const std::string& identifier) = 0;
  virtual void resendEmailConfirmation(EmailConfirmationSession& _return, const std::string& verifier) = 0;
  virtual void resendPinCode(const std::string& sessionId) = 0;
  virtual void resendPinCodeBySMS(const std::string& sessionId) = 0;
  virtual void sendChatChecked(const int32_t seq, const std::string& consumer, const std::string& lastMessageId) = 0;
  virtual void sendMessageAwaitCommit(CommitMessageResult& _return, const int32_t seq, const Message& message) = 0;
  virtual void sendChatRemoved(const int32_t seq, const std::string& consumer, const std::string& lastMessageId) = 0;
  virtual void sendContentPreviewUpdated(std::map<std::string, std::string> & _return, const int32_t esq, const std::string& messageId, const std::vector<std::string> & receiverMids) = 0;
  virtual void sendContentReceipt(const int32_t seq, const std::string& consumer, const std::string& messageId) = 0;
  virtual void sendDummyPush() = 0;
  virtual void removeE2EEPublicKey(const E2EEPublicKey& publicKey) = 0;
  virtual void negotiateE2EEPublicKey(E2EENegotiationResult& _return, const std::string& mid) = 0;
  virtual void getE2EEPublicKey(E2EEPublicKey& _return, const std::string& mid, const int32_t version, const int32_t keyId) = 0;
  virtual void requestE2EEKeyExchange(const int32_t reqSeq, const std::string& temporalPublicKey, const E2EEPublicKey& publicKey, const std::string& verifier) = 0;
  virtual void getLastE2EEPublicKeys(std::map<std::string, E2EEPublicKey> & _return, const std::string& chatMid) = 0;
  virtual void registerE2EEPublicKey(E2EEPublicKey& _return, const int32_t reqSeq, const E2EEPublicKey& publicKey) = 0;
  virtual void getE2EEPublicKeys(std::vector<E2EEPublicKey> & _return) = 0;
  virtual void getE2EEPublicKeysEx(std::vector<E2EEPublicKey> & _return, const bool ignoreE2EEStatus) = 0;
  virtual void getReadMessageOpsInBulk(std::vector<Operation> & _return, const std::vector<std::string> & chatIds) = 0;
  virtual void sendEvent(Message& _return, const int32_t seq, const Message& message) = 0;
  virtual void sendMessage(Message& _return, const int32_t seq, const Message& message) = 0;
  virtual void sendMessageIgnored(const int32_t seq, const std::string& consumer, const std::vector<std::string> & messageIds) = 0;
  virtual void sendMessageReceipt(const int32_t seq, const std::string& consumer, const std::vector<std::string> & messageIds) = 0;
  virtual void findContactByMetaTag(Contact& _return, const std::string& userid, const std::string& reference) = 0;
  virtual void sendMessageToMyHome(Message& _return, const int32_t seq, const Message& message) = 0;
  virtual void setBuddyLocation(const std::string& mid, const int32_t index, const Geolocation& location) = 0;
  virtual void setIdentityCredential(const std::string& identifier, const std::string& verifier, const IdentityProvider::type provider) = 0;
  virtual void setNotificationsEnabled(const int32_t reqSeq, const MIDType::type type, const std::string& target, const bool enablement) = 0;
  virtual void startUpdateVerification(VerificationSessionData& _return, const std::string& region, const CarrierCode::type carrier, const std::string& phone, const std::string& udidHash, const DeviceInfo& deviceInfo, const std::string& networkCode, const std::string& locale) = 0;
  virtual void startVerification(VerificationSessionData& _return, const std::string& region, const CarrierCode::type carrier, const std::string& phone, const std::string& udidHash, const DeviceInfo& deviceInfo, const std::string& networkCode, const std::string& mid, const std::string& locale, const SIMInfo& simInfo, const std::string& oldUdidHash) = 0;
  virtual void updateGroupPreferenceAttribute(const int32_t reqSeq, const std::string& groupMid, const std::map<GroupPreferenceAttribute::type, std::string> & updatedAttrs) = 0;
  virtual void createRoomV2(Room& _return, const int32_t reqSeq, const std::vector<std::string> & contactIds) = 0;
  virtual void storeUpdateProfileAttribute(const int32_t seq, const ProfileAttribute::type profileAttribute, const std::string& value) = 0;
  virtual void syncContactBySnsIds(std::vector<SnsFriendContactRegistration> & _return, const int32_t reqSeq, const std::vector<SnsFriendModification> & modifications) = 0;
  virtual void syncContacts(std::map<std::string, ContactRegistration> & _return, const int32_t reqSeq, const std::vector<ContactModification> & localContacts) = 0;
  virtual void trySendMessage(Message& _return, const int32_t seq, const Message& message) = 0;
  virtual void getNextMessagesV2(std::vector<Message> & _return, const std::string& messageBoxId, const MessageBoxV2MessageId& startMessageId, const int32_t messagesCount) = 0;
  virtual void getMessageBoxCompactWrapUpV2(TMessageBoxWrapUp& _return, const std::string& messageBoxId) = 0;
  virtual void getRecentMessagesV2(std::vector<Message> & _return, const std::string& messageBoxId, const int32_t messagesCount) = 0;
  virtual void validateContactsOnBot(std::map<std::string, std::string> & _return, const std::vector<std::string> & contacts) = 0;
  virtual void tryFriendRequest(const std::string& midOrEMid, const FriendRequestMethod::type method, const std::string& friendRequestParams) = 0;
  virtual void unblockContact(const int32_t reqSeq, const std::string& id) = 0;
  virtual void unblockRecommendation(const int32_t reqSeq, const std::string& id) = 0;
  virtual void unregisterUserAndDevice(std::string& _return) = 0;
  virtual void updateApnsDeviceToken(const std::string& apnsDeviceToken) = 0;
  virtual void updateBuddySetting(const std::string& key, const std::string& value) = 0;
  virtual void updateC2DMRegistrationId(const std::string& registrationId) = 0;
  virtual void updateContactSetting(const int32_t reqSeq, const std::string& mid, const ContactSetting::type flag, const std::string& value) = 0;
  virtual void updateCustomModeSettings(const CustomMode::type customMode, const std::map<std::string, std::string> & paramMap) = 0;
  virtual void updateDeviceInfo(const std::string& deviceUid, const DeviceInfo& deviceInfo) = 0;
  virtual void updateGroup(const int32_t reqSeq, const Group& group) = 0;
  virtual void updateNotificationToken(const NotificationType::type type, const std::string& token) = 0;
  virtual void updateNotificationTokenWithBytes(const NotificationType::type type, const std::string& token) = 0;
  virtual void updateProfile(const int32_t reqSeq, const Profile& profile) = 0;
  virtual void updateProfileAttribute(const int32_t reqSeq, const ProfileAttribute::type attr, const std::string& value) = 0;
  virtual void updateProfileAttributes(const int32_t reqSeq, const UpdateProfileAttributesRequest& request) = 0;
  virtual void updateRegion(const std::string& region) = 0;
  virtual void updateSettings(const int32_t reqSeq, const Settings& settings) = 0;
  virtual int32_t updateSettings2(const int32_t reqSeq, const Settings& settings) = 0;
  virtual void updateSettingsAttribute(const int32_t reqSeq, const SettingsAttribute::type attr, const std::string& value) = 0;
  virtual int32_t updateSettingsAttributes(const int32_t reqSeq, const int32_t attrBitset, const Settings& settings) = 0;
  virtual void verifyIdentityCredential(const IdentityProvider::type identityProvider, const std::string& identifier, const std::string& password) = 0;
  virtual void verifyIdentityCredentialWithResult(UserAuthStatus& _return, const IdentityCredential& identityCredential) = 0;
  virtual VerificationResult::type verifyPhone(const std::string& sessionId, const std::string& pinCode, const std::string& udidHash) = 0;
  virtual void verifyQrcode(std::string& _return, const std::string& verifier, const std::string& pinCode) = 0;
};

class TalkServiceIfFactory {
 public:
  typedef TalkServiceIf Handler;

  virtual ~TalkServiceIfFactory() {}

  virtual TalkServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TalkServiceIf* /* handler */) = 0;
};

class TalkServiceIfSingletonFactory : virtual public TalkServiceIfFactory {
 public:
  TalkServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<TalkServiceIf>& iface) : iface_(iface) {}
  virtual ~TalkServiceIfSingletonFactory() {}

  virtual TalkServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TalkServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<TalkServiceIf> iface_;
};

class TalkServiceNull : virtual public TalkServiceIf {
 public:
  virtual ~TalkServiceNull() {}
  void searchCollection(SearchResult& /* _return */, const std::string& /* query */, const SearchPagingParameter& /* param */) {
    return;
  }
  void getChatRoomAnnouncementsBulk(std::map<std::string, std::vector<ChatRoomAnnouncement> > & /* _return */, const std::vector<std::string> & /* chatRoomMids */) {
    return;
  }
  void getChatRoomAnnouncements(std::vector<ChatRoomAnnouncement> & /* _return */, const std::string& /* chatRoomMid */) {
    return;
  }
  void createChatRoomAnnouncement(ChatRoomAnnouncement& /* _return */, const int32_t /* reqSeq */, const std::string& /* chatRoomMid */, const ChatRoomAnnouncementType::type /* type */, const ChatRoomAnnouncementContents& /* contents */) {
    return;
  }
  void removeChatRoomAnnouncement(const int32_t /* reqSeq */, const std::string& /* chatRoomMid */, const int64_t /* announcementSeq */) {
    return;
  }
  void unsendMessage(const int32_t /* seq */, const std::string& /* messageId */) {
    return;
  }
  void getGroupWithoutMembers(Group& /* _return */, const std::string& /* groupId */) {
    return;
  }
  void requestResendMessage(const int32_t /* reqSeq */, const std::string& /* senderMid */, const std::string& /* messageId */) {
    return;
  }
  void respondResendMessage(const int32_t /* reqSeq */, const std::string& /* receiverMid */, const std::string& /* originalMessageId */, const Message& /* resendMessage */, const ErrorCode::type /* errorCode */) {
    return;
  }
  void acceptGroupInvitation(const int32_t /* reqSeq */, const std::string& /* groupId */) {
    return;
  }
  void acceptGroupInvitationByTicket(const int32_t /* reqSeq */, const std::string& /* GroupMid */, const std::string& /* ticketId */) {
    return;
  }
  void acceptProximityMatches(const std::string& /* sessionId */, const std::set<std::string> & /* ids */) {
    return;
  }
  void acquireCallRoute(std::vector<std::string> & /* _return */, const std::string& /* to */) {
    return;
  }
  void acquireCallTicket(std::string& /* _return */, const std::string& /* to */) {
    return;
  }
  void acquireEncryptedAccessToken(std::string& /* _return */, const FeatureType::type /* featureType */) {
    return;
  }
  void addSnsId(std::string& /* _return */, const SnsIdType::type /* snsIdType */, const std::string& /* snsAccessToken */) {
    return;
  }
  void blockContact(const int32_t /* reqSeq */, const std::string& /* id */) {
    return;
  }
  void blockRecommendation(const int32_t /* reqSeq */, const std::string& /* id */) {
    return;
  }
  void cancelGroupInvitation(const int32_t /* reqSeq */, const std::string& /* groupId */, const std::vector<std::string> & /* contactIds */) {
    return;
  }
  void changeVerificationMethod(VerificationSessionData& /* _return */, const std::string& /* sessionId */, const VerificationMethod::type /* method */) {
    return;
  }
  void clearIdentityCredential() {
    return;
  }
  void clearMessageBox(const std::string& /* channelId */, const std::string& /* messageBoxId */) {
    return;
  }
  void closeProximityMatch(const std::string& /* sessionId */) {
    return;
  }
  void commitSendMessage(std::map<std::string, std::string> & /* _return */, const int32_t /* seq */, const std::string& /* messageId */, const std::vector<std::string> & /* receiverMids */) {
    return;
  }
  void commitSendMessages(std::map<std::string, std::string> & /* _return */, const int32_t /* seq */, const std::vector<std::string> & /* messageIds */, const std::vector<std::string> & /* receiverMids */) {
    return;
  }
  void commitUpdateProfile(std::map<std::string, std::string> & /* _return */, const int32_t /* seq */, const std::vector<ProfileAttribute::type> & /* attrs */, const std::vector<std::string> & /* receiverMids */) {
    return;
  }
  void confirmEmail(const std::string& /* verifier */, const std::string& /* pinCode */) {
    return;
  }
  void createGroup(Group& /* _return */, const int32_t /* seq */, const std::string& /* name */, const std::vector<std::string> & /* contactIds */) {
    return;
  }
  void createQrcodeBase64Image(std::string& /* _return */, const std::string& /* url */, const std::string& /* characterSet */, const int32_t /* imageSize */, const int32_t /* x */, const int32_t /* y */, const int32_t /* width */, const int32_t /* height */) {
    return;
  }
  void createRoom(Room& /* _return */, const int32_t /* reqSeq */, const std::vector<std::string> & /* contactIds */) {
    return;
  }
  void createSession(std::string& /* _return */) {
    return;
  }
  void fetchAnnouncements(std::vector<Announcement> & /* _return */, const int32_t /* lastFetchedIndex */) {
    return;
  }
  void fetchMessages(std::vector<Message> & /* _return */, const int64_t /* localTs */, const int32_t /* count */) {
    return;
  }
  void fetchOperations(std::vector<Operation> & /* _return */, const int64_t /* localRev */, const int32_t /* count */) {
    return;
  }
  void fetchOps(std::vector<Operation> & /* _return */, const int64_t /* localRev */, const int32_t /* count */, const int64_t /* globalRev */, const int64_t /* individualRev */) {
    return;
  }
  void findAndAddContactsByEmail(std::map<std::string, Contact> & /* _return */, const int32_t /* reqSeq */, const std::set<std::string> & /* emails */) {
    return;
  }
  void findAndAddContactsByMid(std::map<std::string, Contact> & /* _return */, const int32_t /* reqSeq */, const std::string& /* mid */, const ContactType::type /* type */, const std::string& /* reference */) {
    return;
  }
  void findGroupByTicketV2(Group& /* _return */, const std::string& /* ticketId */) {
    return;
  }
  void findAndAddContactsByPhone(std::map<std::string, Contact> & /* _return */, const int32_t /* reqSeq */, const std::set<std::string> & /* phones */) {
    return;
  }
  void getFriendRequests(std::vector<FriendRequest> & /* _return */, const FriendRequestDirection::type /* direction */, const int64_t /* lastSeenSeqId */) {
    return;
  }
  void removeFriendRequest(const FriendRequestDirection::type /* direction */, const std::string& /* midOrEMid */) {
    return;
  }
  void findAndAddContactsByUserid(std::map<std::string, Contact> & /* _return */, const int32_t /* reqSeq */, const std::string& /* userid */) {
    return;
  }
  void findContactByUserid(Contact& /* _return */, const std::string& /* userid */) {
    return;
  }
  void findContactByUserTicket(Contact& /* _return */, const std::string& /* ticketIdWithTag */) {
    return;
  }
  void findContactsByEmail(std::map<std::string, Contact> & /* _return */, const std::set<std::string> & /* emails */) {
    return;
  }
  void findContactsByPhone(std::map<std::string, Contact> & /* _return */, const std::set<std::string> & /* phones */) {
    return;
  }
  void findSnsIdUserStatus(SnsIdUserStatus& /* _return */, const SnsIdType::type /* snsIdType */, const std::string& /* snsAccessToken */, const std::string& /* udidHash */) {
    return;
  }
  void finishUpdateVerification(const std::string& /* sessionId */) {
    return;
  }
  void generateUserTicket(Ticket& /* _return */, const int64_t /* expirationTime */, const int32_t /* maxUseCount */) {
    return;
  }
  void destroyMessage(const int32_t /* seq */, const std::string& /* chatId */, const std::string& /* messageId */, const int32_t /* sessionId */) {
    return;
  }
  void getAcceptedProximityMatches(std::set<std::string> & /* _return */, const std::string& /* sessionId */) {
    return;
  }
  void getActiveBuddySubscriberIds(std::vector<std::string> & /* _return */) {
    return;
  }
  void getAllContactIds(std::vector<std::string> & /* _return */) {
    return;
  }
  void getAuthQrcode(AuthQrcode& /* _return */, const bool /* keepLoggedIn */, const std::string& /* systemName */) {
    return;
  }
  void getBlockedContactIds(std::vector<std::string> & /* _return */) {
    return;
  }
  void registerWithPhoneNumber(RegisterWithPhoneNumberResult& /* _return */, const std::string& /* sessionId */, const std::string& /* migrationPincodeSessionId */) {
    return;
  }
  void registerWithPhoneNumberAndPassword(RegisterWithPhoneNumberResult& /* _return */, const std::string& /* sessionId */, const std::string& /* keynm */, const std::string& /* encrypted */) {
    return;
  }
  void getAnalyticsInfo(AnalyticsInfo& /* _return */) {
    return;
  }
  void reportClientStatistics(const int32_t /* reqSeq */, const ReportCategory::type /* category */, const int32_t /* count */) {
    return;
  }
  void verifyPhoneNumberForLogin(std::string& /* _return */, const std::string& /* verifierFromPhone */, const std::string& /* pinCodeForPhone */, const std::string& /* verifierFromLogin */) {
    return;
  }
  void verifyPhoneNumber(PhoneVerificationResult& /* _return */, const std::string& /* sessionId */, const std::string& /* pinCode */, const std::string& /* udidHash */, const std::string& /* migrationPincodeSessionId */, const std::string& /* oldUdidHash */) {
    return;
  }
  void getBlockedContactIdsByRange(std::vector<std::string> & /* _return */, const int32_t /* start */, const int32_t /* count */) {
    return;
  }
  void getBlockedRecommendationIds(std::vector<std::string> & /* _return */) {
    return;
  }
  void getBuddyBlockerIds(std::vector<std::string> & /* _return */) {
    return;
  }
  void getBuddyLocation(Geolocation& /* _return */, const std::string& /* mid */, const int32_t /* index */) {
    return;
  }
  void getCompactContactsModifiedSince(std::vector<CompactContact> & /* _return */, const int64_t /* timestamp */) {
    return;
  }
  void getCompactGroup(Group& /* _return */, const std::string& /* groupId */) {
    return;
  }
  void getCompactRoom(Room& /* _return */, const std::string& /* roomId */) {
    return;
  }
  void getContact(Contact& /* _return */, const std::string& /* id */) {
    return;
  }
  void getContacts(std::vector<Contact> & /* _return */, const std::vector<std::string> & /* ids */) {
    return;
  }
  void getContactWithFriendRequestStatus(Contact& /* _return */, const std::string& /* id */) {
    return;
  }
  void getCountryWithRequestIp(std::string& /* _return */) {
    return;
  }
  void getFavoriteMids(std::vector<std::string> & /* _return */) {
    return;
  }
  void getGroup(Group& /* _return */, const std::string& /* groupId */) {
    return;
  }
  void getGroupIdsInvited(std::vector<std::string> & /* _return */) {
    return;
  }
  void getGroupIdsJoined(std::vector<std::string> & /* _return */) {
    return;
  }
  void getGroups(std::vector<Group> & /* _return */, const std::vector<std::string> & /* groupIds */) {
    return;
  }
  void getHiddenContactMids(std::vector<std::string> & /* _return */) {
    return;
  }
  void getIdentityIdentifier(std::string& /* _return */) {
    return;
  }
  int32_t getLastAnnouncementIndex() {
    int32_t _return = 0;
    return _return;
  }
  int64_t getLastOpRevision() {
    int64_t _return = 0;
    return _return;
  }
  void getSuggestRevisions(SuggestDictionaryRevisions& /* _return */) {
    return;
  }
  void getPreviousMessagesV2WithReadCount(std::vector<Message> & /* _return */, const std::string& /* messageBoxId */, const MessageBoxV2MessageId& /* endMessageId */, const int32_t /* messagesCount */) {
    return;
  }
  void getMessageBox(TMessageBox& /* _return */, const std::string& /* channelId */, const std::string& /* messageBoxId */, const int32_t /* lastMessagesCount */) {
    return;
  }
  void getMessageBoxCompactWrapUp(TMessageBoxWrapUp& /* _return */, const std::string& /* mid */) {
    return;
  }
  void getMessageBoxCompactWrapUpList(TMessageBoxWrapUpResponse& /* _return */, const int32_t /* start */, const int32_t /* messageBoxCount */) {
    return;
  }
  void getMessageBoxList(std::vector<TMessageBox> & /* _return */, const std::string& /* channelId */, const int32_t /* lastMessagesCount */) {
    return;
  }
  void getMessageBoxListByStatus(std::vector<TMessageBox> & /* _return */, const std::string& /* channelId */, const int32_t /* lastMessagesCount */, const int32_t /* status */) {
    return;
  }
  void getMessageBoxWrapUp(TMessageBoxWrapUp& /* _return */, const std::string& /* mid */) {
    return;
  }
  void getMessageBoxWrapUpList(TMessageBoxWrapUpResponse& /* _return */, const int32_t /* start */, const int32_t /* messageBoxCount */) {
    return;
  }
  void getMessagesBySequenceNumber(std::vector<Message> & /* _return */, const std::string& /* channelId */, const std::string& /* messageBoxId */, const int64_t /* startSeq */, const int64_t /* endSeq */) {
    return;
  }
  void getNextMessages(std::vector<Message> & /* _return */, const std::string& /* messageBoxId */, const int64_t /* startSeq */, const int32_t /* messagesCount */) {
    return;
  }
  void getNotificationPolicy(std::vector<NotificationType::type> & /* _return */, const CarrierCode::type /* carrier */) {
    return;
  }
  void getPreviousMessages(std::vector<Message> & /* _return */, const std::string& /* messageBoxId */, const int64_t /* endSeq */, const int32_t /* messagesCount */) {
    return;
  }
  void getProfile(Profile& /* _return */) {
    return;
  }
  void getProximityMatchCandidateList(ProximityMatchCandidateResult& /* _return */, const std::string& /* sessionId */) {
    return;
  }
  void getProximityMatchCandidates(std::set<Contact> & /* _return */, const std::string& /* sessionId */) {
    return;
  }
  void getRecentMessages(std::vector<Message> & /* _return */, const std::string& /* messageBoxId */, const int32_t /* messagesCount */) {
    return;
  }
  void getRecommendationIds(std::vector<std::string> & /* _return */) {
    return;
  }
  void getRoom(Room& /* _return */, const std::string& /* roomId */) {
    return;
  }
  void getRSAKeyInfo(RSAKey& /* _return */, const IdentityProvider::type /* provider */) {
    return;
  }
  int64_t getServerTime() {
    int64_t _return = 0;
    return _return;
  }
  void getSessions(std::vector<LoginSession> & /* _return */) {
    return;
  }
  void getSettings(Settings& /* _return */) {
    return;
  }
  void getGroupsV2(std::vector<Group> & /* _return */, const std::vector<std::string> & /* groupIds */) {
    return;
  }
  void getSettingsAttributes(Settings& /* _return */, const int32_t /* attrBitset */) {
    return;
  }
  void getSystemConfiguration(SystemConfiguration& /* _return */) {
    return;
  }
  void getUserTicket(Ticket& /* _return */) {
    return;
  }
  void getWapInvitation(WapInvitation& /* _return */, const std::string& /* invitationHash */) {
    return;
  }
  void invalidateUserTicket() {
    return;
  }
  void inviteFriendsBySms(const std::vector<std::string> & /* phoneNumberList */) {
    return;
  }
  void inviteIntoGroup(const int32_t /* reqSeq */, const std::string& /* groupId */, const std::vector<std::string> & /* contactIds */) {
    return;
  }
  void inviteIntoRoom(const int32_t /* reqSeq */, const std::string& /* roomId */, const std::vector<std::string> & /* contactIds */) {
    return;
  }
  void inviteViaEmail(const int32_t /* reqSeq */, const std::string& /* email */, const std::string& /* name */) {
    return;
  }
  bool isIdentityIdentifierAvailable(const IdentityProvider::type /* provider */, const std::string& /* identifier */) {
    bool _return = false;
    return _return;
  }
  bool isUseridAvailable(const std::string& /* userid */) {
    bool _return = false;
    return _return;
  }
  void kickoutFromGroup(const int32_t /* reqSeq */, const std::string& /* groupId */, const std::vector<std::string> & /* contactIds */) {
    return;
  }
  void reissueGroupTicket(std::string& /* _return */, const std::string& /* groupMid */) {
    return;
  }
  void findGroupByTicket(Group& /* _return */, const std::string& /* ticketId */) {
    return;
  }
  void leaveGroup(const int32_t /* reqSeq */, const std::string& /* groupId */) {
    return;
  }
  void leaveRoom(const int32_t /* reqSeq */, const std::string& /* roomId */) {
    return;
  }
  void loginWithIdentityCredential(std::string& /* _return */, const IdentityProvider::type /* identityProvider */, const std::string& /* identifier */, const std::string& /* password */, const bool /* keepLoggedIn */, const std::string& /* accessLocation */, const std::string& /* systemName */, const std::string& /* certificate */) {
    return;
  }
  void loginWithIdentityCredentialForCertificate(LoginResult& /* _return */, const IdentityProvider::type /* identityProvider */, const std::string& /* identifier */, const std::string& /* password */, const bool /* keepLoggedIn */, const std::string& /* accessLocation */, const std::string& /* systemName */, const std::string& /* certificate */) {
    return;
  }
  void loginWithVerifier(std::string& /* _return */, const std::string& /* verifier */) {
    return;
  }
  void loginWithVerifierForCerificate(LoginResult& /* _return */, const std::string& /* verifier */) {
    return;
  }
  void loginWithVerifierForCertificate(LoginResult& /* _return */, const std::string& /* verifier */) {
    return;
  }
  void logout() {
    return;
  }
  void logoutSession(const std::string& /* tokenKey */) {
    return;
  }
  void noop() {
    return;
  }
  void notifiedRedirect(const std::map<std::string, std::string> & /* paramMap */) {
    return;
  }
  void notifyBuddyOnAir(std::map<std::string, std::string> & /* _return */, const int32_t /* seq */, const std::vector<std::string> & /* receiverMids */) {
    return;
  }
  void notifyIndividualEvent(const NotificationStatus::type /* notificationStatus */, const std::vector<std::string> & /* receiverMids */) {
    return;
  }
  void notifyInstalled(const std::string& /* udidHash */, const std::string& /* applicationTypeWithExtensions */) {
    return;
  }
  void notifyRegistrationComplete(const std::string& /* udidHash */, const std::string& /* applicationTypeWithExtensions */) {
    return;
  }
  void notifySleep(const int64_t /* lastRev */, const int32_t /* badge */) {
    return;
  }
  void notifyUpdated(const int64_t /* lastRev */, const DeviceInfo& /* deviceInfo */) {
    return;
  }
  void openProximityMatch(std::string& /* _return */, const Location& /* location */) {
    return;
  }
  void registerBuddyUser(std::string& /* _return */, const std::string& /* buddyId */, const std::string& /* registrarPassword */) {
    return;
  }
  void registerBuddyUserid(const int32_t /* seq */, const std::string& /* userid */) {
    return;
  }
  void registerDevice(std::string& /* _return */, const std::string& /* sessionId */) {
    return;
  }
  void registerDeviceWithIdentityCredential(std::string& /* _return */, const std::string& /* sessionId */, const IdentityProvider::type /* provider */, const std::string& /* identifier */, const std::string& /* verifier */) {
    return;
  }
  void registerDeviceWithoutPhoneNumber(std::string& /* _return */, const std::string& /* region */, const std::string& /* udidHash */, const DeviceInfo& /* deviceInfo */) {
    return;
  }
  void registerDeviceWithoutPhoneNumberWithIdentityCredential(std::string& /* _return */, const std::string& /* region */, const std::string& /* udidHash */, const DeviceInfo& /* deviceInfo */, const IdentityProvider::type /* provider */, const std::string& /* identifier */, const std::string& /* verifier */, const std::string& /* mid */, const std::string& /* migrationPincodeSessionId */) {
    return;
  }
  bool registerUserid(const int32_t /* reqSeq */, const std::string& /* userid */) {
    bool _return = false;
    return _return;
  }
  void registerWapDevice(std::string& /* _return */, const std::string& /* invitationHash */, const std::string& /* guidHash */, const std::string& /* email */, const DeviceInfo& /* deviceInfo */) {
    return;
  }
  void registerWithExistingSnsIdAndIdentityCredential(std::string& /* _return */, const IdentityCredential& /* identityCredential */, const std::string& /* region */, const std::string& /* udidHash */, const DeviceInfo& /* deviceInfo */) {
    return;
  }
  void registerWithSnsId(RegisterWithSnsIdResult& /* _return */, const SnsIdType::type /* snsIdType */, const std::string& /* snsAccessToken */, const std::string& /* region */, const std::string& /* udidHash */, const DeviceInfo& /* deviceInfo */, const std::string& /* mid */) {
    return;
  }
  void registerWithSnsIdAndIdentityCredential(std::string& /* _return */, const SnsIdType::type /* snsIdType */, const std::string& /* snsAccessToken */, const IdentityCredential& /* identityCredential */, const std::string& /* region */, const std::string& /* udidHash */, const DeviceInfo& /* deviceInfo */) {
    return;
  }
  void reissueDeviceCredential(std::string& /* _return */) {
    return;
  }
  void reissueUserTicket(std::string& /* _return */, const int64_t /* expirationTime */, const int32_t /* maxUseCount */) {
    return;
  }
  void getMessageReadRange(std::vector<TMessageReadRange> & /* _return */, const std::vector<std::string> & /* chatIds */) {
    return;
  }
  void rejectGroupInvitation(const int32_t /* reqSeq */, const std::string& /* groupId */) {
    return;
  }
  void releaseSession() {
    return;
  }
  void removeAllMessages(const int32_t /* seq */, const std::string& /* lastMessageId */) {
    return;
  }
  void removeBuddyLocation(const std::string& /* mid */, const int32_t /* index */) {
    return;
  }
  bool removeMessage(const std::string& /* messageId */) {
    bool _return = false;
    return _return;
  }
  void makeUserAddMyselfAsContact(ContactTransition& /* _return */, const std::string& /* contactOwnerMid */) {
    return;
  }
  bool removeMessageFromMyHome(const std::string& /* messageId */) {
    bool _return = false;
    return _return;
  }
  void removeSnsId(std::string& /* _return */, const SnsIdType::type /* snsIdType */) {
    return;
  }
  void report(const int64_t /* syncOpRevision */, const SyncCategory::type /* category */, const std::string& /* report */) {
    return;
  }
  void reportContacts(std::vector<ContactReportResult> & /* _return */, const int64_t /* syncOpRevision */, const SyncCategory::type /* category */, const std::vector<ContactReport> & /* contactReports */, const SyncActionType::type /* actionType */) {
    return;
  }
  void reportGroups(const int64_t /* syncOpRevision */, const std::vector<Group> & /* groups */) {
    return;
  }
  void reportProfile(const int64_t /* syncOpRevision */, const Profile& /* profile */) {
    return;
  }
  void reportRooms(const int64_t /* syncOpRevision */, const std::vector<Room> & /* rooms */) {
    return;
  }
  void findAndAddContactByMetaTag(Contact& /* _return */, const int32_t /* reqSeq */, const std::string& /* userid */, const std::string& /* reference */) {
    return;
  }
  void reportSettings(const int64_t /* syncOpRevision */, const Settings& /* settings */) {
    return;
  }
  void reportSpam(const std::string& /* chatMid */, const std::vector<std::string> & /* memberMids */, const std::vector<SpammerReason::type> & /* spammerReasons */, const std::vector<std::string> & /* senderMids */, const std::vector<std::string> & /* spamMessageIds */, const std::vector<std::string> & /* spamMessages */) {
    return;
  }
  void reportSpammer(const std::string& /* spammerMid */, const std::vector<SpammerReason::type> & /* spammerReasons */, const std::vector<std::string> & /* spamMessageIds */) {
    return;
  }
  void requestAccountPasswordReset(const IdentityProvider::type /* provider */, const std::string& /* identifier */, const std::string& /* locale */) {
    return;
  }
  void requestEmailConfirmation(EmailConfirmationSession& /* _return */, const EmailConfirmation& /* emailConfirmation */) {
    return;
  }
  void requestIdentityUnbind(const IdentityProvider::type /* provider */, const std::string& /* identifier */) {
    return;
  }
  void resendEmailConfirmation(EmailConfirmationSession& /* _return */, const std::string& /* verifier */) {
    return;
  }
  void resendPinCode(const std::string& /* sessionId */) {
    return;
  }
  void resendPinCodeBySMS(const std::string& /* sessionId */) {
    return;
  }
  void sendChatChecked(const int32_t /* seq */, const std::string& /* consumer */, const std::string& /* lastMessageId */) {
    return;
  }
  void sendMessageAwaitCommit(CommitMessageResult& /* _return */, const int32_t /* seq */, const Message& /* message */) {
    return;
  }
  void sendChatRemoved(const int32_t /* seq */, const std::string& /* consumer */, const std::string& /* lastMessageId */) {
    return;
  }
  void sendContentPreviewUpdated(std::map<std::string, std::string> & /* _return */, const int32_t /* esq */, const std::string& /* messageId */, const std::vector<std::string> & /* receiverMids */) {
    return;
  }
  void sendContentReceipt(const int32_t /* seq */, const std::string& /* consumer */, const std::string& /* messageId */) {
    return;
  }
  void sendDummyPush() {
    return;
  }
  void removeE2EEPublicKey(const E2EEPublicKey& /* publicKey */) {
    return;
  }
  void negotiateE2EEPublicKey(E2EENegotiationResult& /* _return */, const std::string& /* mid */) {
    return;
  }
  void getE2EEPublicKey(E2EEPublicKey& /* _return */, const std::string& /* mid */, const int32_t /* version */, const int32_t /* keyId */) {
    return;
  }
  void requestE2EEKeyExchange(const int32_t /* reqSeq */, const std::string& /* temporalPublicKey */, const E2EEPublicKey& /* publicKey */, const std::string& /* verifier */) {
    return;
  }
  void getLastE2EEPublicKeys(std::map<std::string, E2EEPublicKey> & /* _return */, const std::string& /* chatMid */) {
    return;
  }
  void registerE2EEPublicKey(E2EEPublicKey& /* _return */, const int32_t /* reqSeq */, const E2EEPublicKey& /* publicKey */) {
    return;
  }
  void getE2EEPublicKeys(std::vector<E2EEPublicKey> & /* _return */) {
    return;
  }
  void getE2EEPublicKeysEx(std::vector<E2EEPublicKey> & /* _return */, const bool /* ignoreE2EEStatus */) {
    return;
  }
  void getReadMessageOpsInBulk(std::vector<Operation> & /* _return */, const std::vector<std::string> & /* chatIds */) {
    return;
  }
  void sendEvent(Message& /* _return */, const int32_t /* seq */, const Message& /* message */) {
    return;
  }
  void sendMessage(Message& /* _return */, const int32_t /* seq */, const Message& /* message */) {
    return;
  }
  void sendMessageIgnored(const int32_t /* seq */, const std::string& /* consumer */, const std::vector<std::string> & /* messageIds */) {
    return;
  }
  void sendMessageReceipt(const int32_t /* seq */, const std::string& /* consumer */, const std::vector<std::string> & /* messageIds */) {
    return;
  }
  void findContactByMetaTag(Contact& /* _return */, const std::string& /* userid */, const std::string& /* reference */) {
    return;
  }
  void sendMessageToMyHome(Message& /* _return */, const int32_t /* seq */, const Message& /* message */) {
    return;
  }
  void setBuddyLocation(const std::string& /* mid */, const int32_t /* index */, const Geolocation& /* location */) {
    return;
  }
  void setIdentityCredential(const std::string& /* identifier */, const std::string& /* verifier */, const IdentityProvider::type /* provider */) {
    return;
  }
  void setNotificationsEnabled(const int32_t /* reqSeq */, const MIDType::type /* type */, const std::string& /* target */, const bool /* enablement */) {
    return;
  }
  void startUpdateVerification(VerificationSessionData& /* _return */, const std::string& /* region */, const CarrierCode::type /* carrier */, const std::string& /* phone */, const std::string& /* udidHash */, const DeviceInfo& /* deviceInfo */, const std::string& /* networkCode */, const std::string& /* locale */) {
    return;
  }
  void startVerification(VerificationSessionData& /* _return */, const std::string& /* region */, const CarrierCode::type /* carrier */, const std::string& /* phone */, const std::string& /* udidHash */, const DeviceInfo& /* deviceInfo */, const std::string& /* networkCode */, const std::string& /* mid */, const std::string& /* locale */, const SIMInfo& /* simInfo */, const std::string& /* oldUdidHash */) {
    return;
  }
  void updateGroupPreferenceAttribute(const int32_t /* reqSeq */, const std::string& /* groupMid */, const std::map<GroupPreferenceAttribute::type, std::string> & /* updatedAttrs */) {
    return;
  }
  void createRoomV2(Room& /* _return */, const int32_t /* reqSeq */, const std::vector<std::string> & /* contactIds */) {
    return;
  }
  void storeUpdateProfileAttribute(const int32_t /* seq */, const ProfileAttribute::type /* profileAttribute */, const std::string& /* value */) {
    return;
  }
  void syncContactBySnsIds(std::vector<SnsFriendContactRegistration> & /* _return */, const int32_t /* reqSeq */, const std::vector<SnsFriendModification> & /* modifications */) {
    return;
  }
  void syncContacts(std::map<std::string, ContactRegistration> & /* _return */, const int32_t /* reqSeq */, const std::vector<ContactModification> & /* localContacts */) {
    return;
  }
  void trySendMessage(Message& /* _return */, const int32_t /* seq */, const Message& /* message */) {
    return;
  }
  void getNextMessagesV2(std::vector<Message> & /* _return */, const std::string& /* messageBoxId */, const MessageBoxV2MessageId& /* startMessageId */, const int32_t /* messagesCount */) {
    return;
  }
  void getMessageBoxCompactWrapUpV2(TMessageBoxWrapUp& /* _return */, const std::string& /* messageBoxId */) {
    return;
  }
  void getRecentMessagesV2(std::vector<Message> & /* _return */, const std::string& /* messageBoxId */, const int32_t /* messagesCount */) {
    return;
  }
  void validateContactsOnBot(std::map<std::string, std::string> & /* _return */, const std::vector<std::string> & /* contacts */) {
    return;
  }
  void tryFriendRequest(const std::string& /* midOrEMid */, const FriendRequestMethod::type /* method */, const std::string& /* friendRequestParams */) {
    return;
  }
  void unblockContact(const int32_t /* reqSeq */, const std::string& /* id */) {
    return;
  }
  void unblockRecommendation(const int32_t /* reqSeq */, const std::string& /* id */) {
    return;
  }
  void unregisterUserAndDevice(std::string& /* _return */) {
    return;
  }
  void updateApnsDeviceToken(const std::string& /* apnsDeviceToken */) {
    return;
  }
  void updateBuddySetting(const std::string& /* key */, const std::string& /* value */) {
    return;
  }
  void updateC2DMRegistrationId(const std::string& /* registrationId */) {
    return;
  }
  void updateContactSetting(const int32_t /* reqSeq */, const std::string& /* mid */, const ContactSetting::type /* flag */, const std::string& /* value */) {
    return;
  }
  void updateCustomModeSettings(const CustomMode::type /* customMode */, const std::map<std::string, std::string> & /* paramMap */) {
    return;
  }
  void updateDeviceInfo(const std::string& /* deviceUid */, const DeviceInfo& /* deviceInfo */) {
    return;
  }
  void updateGroup(const int32_t /* reqSeq */, const Group& /* group */) {
    return;
  }
  void updateNotificationToken(const NotificationType::type /* type */, const std::string& /* token */) {
    return;
  }
  void updateNotificationTokenWithBytes(const NotificationType::type /* type */, const std::string& /* token */) {
    return;
  }
  void updateProfile(const int32_t /* reqSeq */, const Profile& /* profile */) {
    return;
  }
  void updateProfileAttribute(const int32_t /* reqSeq */, const ProfileAttribute::type /* attr */, const std::string& /* value */) {
    return;
  }
  void updateProfileAttributes(const int32_t /* reqSeq */, const UpdateProfileAttributesRequest& /* request */) {
    return;
  }
  void updateRegion(const std::string& /* region */) {
    return;
  }
  void updateSettings(const int32_t /* reqSeq */, const Settings& /* settings */) {
    return;
  }
  int32_t updateSettings2(const int32_t /* reqSeq */, const Settings& /* settings */) {
    int32_t _return = 0;
    return _return;
  }
  void updateSettingsAttribute(const int32_t /* reqSeq */, const SettingsAttribute::type /* attr */, const std::string& /* value */) {
    return;
  }
  int32_t updateSettingsAttributes(const int32_t /* reqSeq */, const int32_t /* attrBitset */, const Settings& /* settings */) {
    int32_t _return = 0;
    return _return;
  }
  void verifyIdentityCredential(const IdentityProvider::type /* identityProvider */, const std::string& /* identifier */, const std::string& /* password */) {
    return;
  }
  void verifyIdentityCredentialWithResult(UserAuthStatus& /* _return */, const IdentityCredential& /* identityCredential */) {
    return;
  }
  VerificationResult::type verifyPhone(const std::string& /* sessionId */, const std::string& /* pinCode */, const std::string& /* udidHash */) {
    VerificationResult::type _return = (VerificationResult::type)0;
    return _return;
  }
  void verifyQrcode(std::string& /* _return */, const std::string& /* verifier */, const std::string& /* pinCode */) {
    return;
  }
};

typedef struct _TalkService_searchCollection_args__isset {
  _TalkService_searchCollection_args__isset() : query(false), param(false) {}
  bool query :1;
  bool param :1;
} _TalkService_searchCollection_args__isset;

class TalkService_searchCollection_args {
 public:

  TalkService_searchCollection_args(const TalkService_searchCollection_args&);
  TalkService_searchCollection_args& operator=(const TalkService_searchCollection_args&);
  TalkService_searchCollection_args() : query() {
  }

  virtual ~TalkService_searchCollection_args() throw();
  std::string query;
  SearchPagingParameter param;

  _TalkService_searchCollection_args__isset __isset;

  void __set_query(const std::string& val);

  void __set_param(const SearchPagingParameter& val);

  bool operator == (const TalkService_searchCollection_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    if (!(param == rhs.param))
      return false;
    return true;
  }
  bool operator != (const TalkService_searchCollection_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_searchCollection_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_searchCollection_pargs {
 public:


  virtual ~TalkService_searchCollection_pargs() throw();
  const std::string* query;
  const SearchPagingParameter* param;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_searchCollection_result__isset {
  _TalkService_searchCollection_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_searchCollection_result__isset;

class TalkService_searchCollection_result {
 public:

  TalkService_searchCollection_result(const TalkService_searchCollection_result&);
  TalkService_searchCollection_result& operator=(const TalkService_searchCollection_result&);
  TalkService_searchCollection_result() {
  }

  virtual ~TalkService_searchCollection_result() throw();
  SearchResult success;
  TalkException e;

  _TalkService_searchCollection_result__isset __isset;

  void __set_success(const SearchResult& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_searchCollection_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_searchCollection_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_searchCollection_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_searchCollection_presult__isset {
  _TalkService_searchCollection_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_searchCollection_presult__isset;

class TalkService_searchCollection_presult {
 public:


  virtual ~TalkService_searchCollection_presult() throw();
  SearchResult* success;
  TalkException e;

  _TalkService_searchCollection_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getChatRoomAnnouncementsBulk_args__isset {
  _TalkService_getChatRoomAnnouncementsBulk_args__isset() : chatRoomMids(false) {}
  bool chatRoomMids :1;
} _TalkService_getChatRoomAnnouncementsBulk_args__isset;

class TalkService_getChatRoomAnnouncementsBulk_args {
 public:

  TalkService_getChatRoomAnnouncementsBulk_args(const TalkService_getChatRoomAnnouncementsBulk_args&);
  TalkService_getChatRoomAnnouncementsBulk_args& operator=(const TalkService_getChatRoomAnnouncementsBulk_args&);
  TalkService_getChatRoomAnnouncementsBulk_args() {
  }

  virtual ~TalkService_getChatRoomAnnouncementsBulk_args() throw();
  std::vector<std::string>  chatRoomMids;

  _TalkService_getChatRoomAnnouncementsBulk_args__isset __isset;

  void __set_chatRoomMids(const std::vector<std::string> & val);

  bool operator == (const TalkService_getChatRoomAnnouncementsBulk_args & rhs) const
  {
    if (!(chatRoomMids == rhs.chatRoomMids))
      return false;
    return true;
  }
  bool operator != (const TalkService_getChatRoomAnnouncementsBulk_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getChatRoomAnnouncementsBulk_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getChatRoomAnnouncementsBulk_pargs {
 public:


  virtual ~TalkService_getChatRoomAnnouncementsBulk_pargs() throw();
  const std::vector<std::string> * chatRoomMids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getChatRoomAnnouncementsBulk_result__isset {
  _TalkService_getChatRoomAnnouncementsBulk_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getChatRoomAnnouncementsBulk_result__isset;

class TalkService_getChatRoomAnnouncementsBulk_result {
 public:

  TalkService_getChatRoomAnnouncementsBulk_result(const TalkService_getChatRoomAnnouncementsBulk_result&);
  TalkService_getChatRoomAnnouncementsBulk_result& operator=(const TalkService_getChatRoomAnnouncementsBulk_result&);
  TalkService_getChatRoomAnnouncementsBulk_result() {
  }

  virtual ~TalkService_getChatRoomAnnouncementsBulk_result() throw();
  std::map<std::string, std::vector<ChatRoomAnnouncement> >  success;
  TalkException e;

  _TalkService_getChatRoomAnnouncementsBulk_result__isset __isset;

  void __set_success(const std::map<std::string, std::vector<ChatRoomAnnouncement> > & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getChatRoomAnnouncementsBulk_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getChatRoomAnnouncementsBulk_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getChatRoomAnnouncementsBulk_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getChatRoomAnnouncementsBulk_presult__isset {
  _TalkService_getChatRoomAnnouncementsBulk_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getChatRoomAnnouncementsBulk_presult__isset;

class TalkService_getChatRoomAnnouncementsBulk_presult {
 public:


  virtual ~TalkService_getChatRoomAnnouncementsBulk_presult() throw();
  std::map<std::string, std::vector<ChatRoomAnnouncement> > * success;
  TalkException e;

  _TalkService_getChatRoomAnnouncementsBulk_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getChatRoomAnnouncements_args__isset {
  _TalkService_getChatRoomAnnouncements_args__isset() : chatRoomMid(false) {}
  bool chatRoomMid :1;
} _TalkService_getChatRoomAnnouncements_args__isset;

class TalkService_getChatRoomAnnouncements_args {
 public:

  TalkService_getChatRoomAnnouncements_args(const TalkService_getChatRoomAnnouncements_args&);
  TalkService_getChatRoomAnnouncements_args& operator=(const TalkService_getChatRoomAnnouncements_args&);
  TalkService_getChatRoomAnnouncements_args() : chatRoomMid() {
  }

  virtual ~TalkService_getChatRoomAnnouncements_args() throw();
  std::string chatRoomMid;

  _TalkService_getChatRoomAnnouncements_args__isset __isset;

  void __set_chatRoomMid(const std::string& val);

  bool operator == (const TalkService_getChatRoomAnnouncements_args & rhs) const
  {
    if (!(chatRoomMid == rhs.chatRoomMid))
      return false;
    return true;
  }
  bool operator != (const TalkService_getChatRoomAnnouncements_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getChatRoomAnnouncements_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getChatRoomAnnouncements_pargs {
 public:


  virtual ~TalkService_getChatRoomAnnouncements_pargs() throw();
  const std::string* chatRoomMid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getChatRoomAnnouncements_result__isset {
  _TalkService_getChatRoomAnnouncements_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getChatRoomAnnouncements_result__isset;

class TalkService_getChatRoomAnnouncements_result {
 public:

  TalkService_getChatRoomAnnouncements_result(const TalkService_getChatRoomAnnouncements_result&);
  TalkService_getChatRoomAnnouncements_result& operator=(const TalkService_getChatRoomAnnouncements_result&);
  TalkService_getChatRoomAnnouncements_result() {
  }

  virtual ~TalkService_getChatRoomAnnouncements_result() throw();
  std::vector<ChatRoomAnnouncement>  success;
  TalkException e;

  _TalkService_getChatRoomAnnouncements_result__isset __isset;

  void __set_success(const std::vector<ChatRoomAnnouncement> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getChatRoomAnnouncements_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getChatRoomAnnouncements_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getChatRoomAnnouncements_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getChatRoomAnnouncements_presult__isset {
  _TalkService_getChatRoomAnnouncements_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getChatRoomAnnouncements_presult__isset;

class TalkService_getChatRoomAnnouncements_presult {
 public:


  virtual ~TalkService_getChatRoomAnnouncements_presult() throw();
  std::vector<ChatRoomAnnouncement> * success;
  TalkException e;

  _TalkService_getChatRoomAnnouncements_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_createChatRoomAnnouncement_args__isset {
  _TalkService_createChatRoomAnnouncement_args__isset() : reqSeq(false), chatRoomMid(false), type(false), contents(false) {}
  bool reqSeq :1;
  bool chatRoomMid :1;
  bool type :1;
  bool contents :1;
} _TalkService_createChatRoomAnnouncement_args__isset;

class TalkService_createChatRoomAnnouncement_args {
 public:

  TalkService_createChatRoomAnnouncement_args(const TalkService_createChatRoomAnnouncement_args&);
  TalkService_createChatRoomAnnouncement_args& operator=(const TalkService_createChatRoomAnnouncement_args&);
  TalkService_createChatRoomAnnouncement_args() : reqSeq(0), chatRoomMid(), type((ChatRoomAnnouncementType::type)0) {
  }

  virtual ~TalkService_createChatRoomAnnouncement_args() throw();
  int32_t reqSeq;
  std::string chatRoomMid;
  ChatRoomAnnouncementType::type type;
  ChatRoomAnnouncementContents contents;

  _TalkService_createChatRoomAnnouncement_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_chatRoomMid(const std::string& val);

  void __set_type(const ChatRoomAnnouncementType::type val);

  void __set_contents(const ChatRoomAnnouncementContents& val);

  bool operator == (const TalkService_createChatRoomAnnouncement_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(chatRoomMid == rhs.chatRoomMid))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(contents == rhs.contents))
      return false;
    return true;
  }
  bool operator != (const TalkService_createChatRoomAnnouncement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_createChatRoomAnnouncement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_createChatRoomAnnouncement_pargs {
 public:


  virtual ~TalkService_createChatRoomAnnouncement_pargs() throw();
  const int32_t* reqSeq;
  const std::string* chatRoomMid;
  const ChatRoomAnnouncementType::type* type;
  const ChatRoomAnnouncementContents* contents;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_createChatRoomAnnouncement_result__isset {
  _TalkService_createChatRoomAnnouncement_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_createChatRoomAnnouncement_result__isset;

class TalkService_createChatRoomAnnouncement_result {
 public:

  TalkService_createChatRoomAnnouncement_result(const TalkService_createChatRoomAnnouncement_result&);
  TalkService_createChatRoomAnnouncement_result& operator=(const TalkService_createChatRoomAnnouncement_result&);
  TalkService_createChatRoomAnnouncement_result() {
  }

  virtual ~TalkService_createChatRoomAnnouncement_result() throw();
  ChatRoomAnnouncement success;
  TalkException e;

  _TalkService_createChatRoomAnnouncement_result__isset __isset;

  void __set_success(const ChatRoomAnnouncement& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_createChatRoomAnnouncement_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_createChatRoomAnnouncement_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_createChatRoomAnnouncement_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_createChatRoomAnnouncement_presult__isset {
  _TalkService_createChatRoomAnnouncement_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_createChatRoomAnnouncement_presult__isset;

class TalkService_createChatRoomAnnouncement_presult {
 public:


  virtual ~TalkService_createChatRoomAnnouncement_presult() throw();
  ChatRoomAnnouncement* success;
  TalkException e;

  _TalkService_createChatRoomAnnouncement_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_removeChatRoomAnnouncement_args__isset {
  _TalkService_removeChatRoomAnnouncement_args__isset() : reqSeq(false), chatRoomMid(false), announcementSeq(false) {}
  bool reqSeq :1;
  bool chatRoomMid :1;
  bool announcementSeq :1;
} _TalkService_removeChatRoomAnnouncement_args__isset;

class TalkService_removeChatRoomAnnouncement_args {
 public:

  TalkService_removeChatRoomAnnouncement_args(const TalkService_removeChatRoomAnnouncement_args&);
  TalkService_removeChatRoomAnnouncement_args& operator=(const TalkService_removeChatRoomAnnouncement_args&);
  TalkService_removeChatRoomAnnouncement_args() : reqSeq(0), chatRoomMid(), announcementSeq(0) {
  }

  virtual ~TalkService_removeChatRoomAnnouncement_args() throw();
  int32_t reqSeq;
  std::string chatRoomMid;
  int64_t announcementSeq;

  _TalkService_removeChatRoomAnnouncement_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_chatRoomMid(const std::string& val);

  void __set_announcementSeq(const int64_t val);

  bool operator == (const TalkService_removeChatRoomAnnouncement_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(chatRoomMid == rhs.chatRoomMid))
      return false;
    if (!(announcementSeq == rhs.announcementSeq))
      return false;
    return true;
  }
  bool operator != (const TalkService_removeChatRoomAnnouncement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_removeChatRoomAnnouncement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_removeChatRoomAnnouncement_pargs {
 public:


  virtual ~TalkService_removeChatRoomAnnouncement_pargs() throw();
  const int32_t* reqSeq;
  const std::string* chatRoomMid;
  const int64_t* announcementSeq;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_removeChatRoomAnnouncement_result__isset {
  _TalkService_removeChatRoomAnnouncement_result__isset() : e(false) {}
  bool e :1;
} _TalkService_removeChatRoomAnnouncement_result__isset;

class TalkService_removeChatRoomAnnouncement_result {
 public:

  TalkService_removeChatRoomAnnouncement_result(const TalkService_removeChatRoomAnnouncement_result&);
  TalkService_removeChatRoomAnnouncement_result& operator=(const TalkService_removeChatRoomAnnouncement_result&);
  TalkService_removeChatRoomAnnouncement_result() {
  }

  virtual ~TalkService_removeChatRoomAnnouncement_result() throw();
  TalkException e;

  _TalkService_removeChatRoomAnnouncement_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_removeChatRoomAnnouncement_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_removeChatRoomAnnouncement_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_removeChatRoomAnnouncement_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_removeChatRoomAnnouncement_presult__isset {
  _TalkService_removeChatRoomAnnouncement_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_removeChatRoomAnnouncement_presult__isset;

class TalkService_removeChatRoomAnnouncement_presult {
 public:


  virtual ~TalkService_removeChatRoomAnnouncement_presult() throw();
  TalkException e;

  _TalkService_removeChatRoomAnnouncement_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_unsendMessage_args__isset {
  _TalkService_unsendMessage_args__isset() : seq(false), messageId(false) {}
  bool seq :1;
  bool messageId :1;
} _TalkService_unsendMessage_args__isset;

class TalkService_unsendMessage_args {
 public:

  TalkService_unsendMessage_args(const TalkService_unsendMessage_args&);
  TalkService_unsendMessage_args& operator=(const TalkService_unsendMessage_args&);
  TalkService_unsendMessage_args() : seq(0), messageId() {
  }

  virtual ~TalkService_unsendMessage_args() throw();
  int32_t seq;
  std::string messageId;

  _TalkService_unsendMessage_args__isset __isset;

  void __set_seq(const int32_t val);

  void __set_messageId(const std::string& val);

  bool operator == (const TalkService_unsendMessage_args & rhs) const
  {
    if (!(seq == rhs.seq))
      return false;
    if (!(messageId == rhs.messageId))
      return false;
    return true;
  }
  bool operator != (const TalkService_unsendMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_unsendMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_unsendMessage_pargs {
 public:


  virtual ~TalkService_unsendMessage_pargs() throw();
  const int32_t* seq;
  const std::string* messageId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_unsendMessage_result__isset {
  _TalkService_unsendMessage_result__isset() : e(false) {}
  bool e :1;
} _TalkService_unsendMessage_result__isset;

class TalkService_unsendMessage_result {
 public:

  TalkService_unsendMessage_result(const TalkService_unsendMessage_result&);
  TalkService_unsendMessage_result& operator=(const TalkService_unsendMessage_result&);
  TalkService_unsendMessage_result() {
  }

  virtual ~TalkService_unsendMessage_result() throw();
  TalkException e;

  _TalkService_unsendMessage_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_unsendMessage_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_unsendMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_unsendMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_unsendMessage_presult__isset {
  _TalkService_unsendMessage_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_unsendMessage_presult__isset;

class TalkService_unsendMessage_presult {
 public:


  virtual ~TalkService_unsendMessage_presult() throw();
  TalkException e;

  _TalkService_unsendMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getGroupWithoutMembers_args__isset {
  _TalkService_getGroupWithoutMembers_args__isset() : groupId(false) {}
  bool groupId :1;
} _TalkService_getGroupWithoutMembers_args__isset;

class TalkService_getGroupWithoutMembers_args {
 public:

  TalkService_getGroupWithoutMembers_args(const TalkService_getGroupWithoutMembers_args&);
  TalkService_getGroupWithoutMembers_args& operator=(const TalkService_getGroupWithoutMembers_args&);
  TalkService_getGroupWithoutMembers_args() : groupId() {
  }

  virtual ~TalkService_getGroupWithoutMembers_args() throw();
  std::string groupId;

  _TalkService_getGroupWithoutMembers_args__isset __isset;

  void __set_groupId(const std::string& val);

  bool operator == (const TalkService_getGroupWithoutMembers_args & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    return true;
  }
  bool operator != (const TalkService_getGroupWithoutMembers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getGroupWithoutMembers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getGroupWithoutMembers_pargs {
 public:


  virtual ~TalkService_getGroupWithoutMembers_pargs() throw();
  const std::string* groupId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getGroupWithoutMembers_result__isset {
  _TalkService_getGroupWithoutMembers_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getGroupWithoutMembers_result__isset;

class TalkService_getGroupWithoutMembers_result {
 public:

  TalkService_getGroupWithoutMembers_result(const TalkService_getGroupWithoutMembers_result&);
  TalkService_getGroupWithoutMembers_result& operator=(const TalkService_getGroupWithoutMembers_result&);
  TalkService_getGroupWithoutMembers_result() {
  }

  virtual ~TalkService_getGroupWithoutMembers_result() throw();
  Group success;
  TalkException e;

  _TalkService_getGroupWithoutMembers_result__isset __isset;

  void __set_success(const Group& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getGroupWithoutMembers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getGroupWithoutMembers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getGroupWithoutMembers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getGroupWithoutMembers_presult__isset {
  _TalkService_getGroupWithoutMembers_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getGroupWithoutMembers_presult__isset;

class TalkService_getGroupWithoutMembers_presult {
 public:


  virtual ~TalkService_getGroupWithoutMembers_presult() throw();
  Group* success;
  TalkException e;

  _TalkService_getGroupWithoutMembers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_requestResendMessage_args__isset {
  _TalkService_requestResendMessage_args__isset() : reqSeq(false), senderMid(false), messageId(false) {}
  bool reqSeq :1;
  bool senderMid :1;
  bool messageId :1;
} _TalkService_requestResendMessage_args__isset;

class TalkService_requestResendMessage_args {
 public:

  TalkService_requestResendMessage_args(const TalkService_requestResendMessage_args&);
  TalkService_requestResendMessage_args& operator=(const TalkService_requestResendMessage_args&);
  TalkService_requestResendMessage_args() : reqSeq(0), senderMid(), messageId() {
  }

  virtual ~TalkService_requestResendMessage_args() throw();
  int32_t reqSeq;
  std::string senderMid;
  std::string messageId;

  _TalkService_requestResendMessage_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_senderMid(const std::string& val);

  void __set_messageId(const std::string& val);

  bool operator == (const TalkService_requestResendMessage_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(senderMid == rhs.senderMid))
      return false;
    if (!(messageId == rhs.messageId))
      return false;
    return true;
  }
  bool operator != (const TalkService_requestResendMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_requestResendMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_requestResendMessage_pargs {
 public:


  virtual ~TalkService_requestResendMessage_pargs() throw();
  const int32_t* reqSeq;
  const std::string* senderMid;
  const std::string* messageId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_requestResendMessage_result__isset {
  _TalkService_requestResendMessage_result__isset() : e(false) {}
  bool e :1;
} _TalkService_requestResendMessage_result__isset;

class TalkService_requestResendMessage_result {
 public:

  TalkService_requestResendMessage_result(const TalkService_requestResendMessage_result&);
  TalkService_requestResendMessage_result& operator=(const TalkService_requestResendMessage_result&);
  TalkService_requestResendMessage_result() {
  }

  virtual ~TalkService_requestResendMessage_result() throw();
  TalkException e;

  _TalkService_requestResendMessage_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_requestResendMessage_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_requestResendMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_requestResendMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_requestResendMessage_presult__isset {
  _TalkService_requestResendMessage_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_requestResendMessage_presult__isset;

class TalkService_requestResendMessage_presult {
 public:


  virtual ~TalkService_requestResendMessage_presult() throw();
  TalkException e;

  _TalkService_requestResendMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_respondResendMessage_args__isset {
  _TalkService_respondResendMessage_args__isset() : reqSeq(false), receiverMid(false), originalMessageId(false), resendMessage(false), errorCode(false) {}
  bool reqSeq :1;
  bool receiverMid :1;
  bool originalMessageId :1;
  bool resendMessage :1;
  bool errorCode :1;
} _TalkService_respondResendMessage_args__isset;

class TalkService_respondResendMessage_args {
 public:

  TalkService_respondResendMessage_args(const TalkService_respondResendMessage_args&);
  TalkService_respondResendMessage_args& operator=(const TalkService_respondResendMessage_args&);
  TalkService_respondResendMessage_args() : reqSeq(0), receiverMid(), originalMessageId(), errorCode((ErrorCode::type)0) {
  }

  virtual ~TalkService_respondResendMessage_args() throw();
  int32_t reqSeq;
  std::string receiverMid;
  std::string originalMessageId;
  Message resendMessage;
  ErrorCode::type errorCode;

  _TalkService_respondResendMessage_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_receiverMid(const std::string& val);

  void __set_originalMessageId(const std::string& val);

  void __set_resendMessage(const Message& val);

  void __set_errorCode(const ErrorCode::type val);

  bool operator == (const TalkService_respondResendMessage_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(receiverMid == rhs.receiverMid))
      return false;
    if (!(originalMessageId == rhs.originalMessageId))
      return false;
    if (!(resendMessage == rhs.resendMessage))
      return false;
    if (!(errorCode == rhs.errorCode))
      return false;
    return true;
  }
  bool operator != (const TalkService_respondResendMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_respondResendMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_respondResendMessage_pargs {
 public:


  virtual ~TalkService_respondResendMessage_pargs() throw();
  const int32_t* reqSeq;
  const std::string* receiverMid;
  const std::string* originalMessageId;
  const Message* resendMessage;
  const ErrorCode::type* errorCode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_respondResendMessage_result__isset {
  _TalkService_respondResendMessage_result__isset() : e(false) {}
  bool e :1;
} _TalkService_respondResendMessage_result__isset;

class TalkService_respondResendMessage_result {
 public:

  TalkService_respondResendMessage_result(const TalkService_respondResendMessage_result&);
  TalkService_respondResendMessage_result& operator=(const TalkService_respondResendMessage_result&);
  TalkService_respondResendMessage_result() {
  }

  virtual ~TalkService_respondResendMessage_result() throw();
  TalkException e;

  _TalkService_respondResendMessage_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_respondResendMessage_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_respondResendMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_respondResendMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_respondResendMessage_presult__isset {
  _TalkService_respondResendMessage_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_respondResendMessage_presult__isset;

class TalkService_respondResendMessage_presult {
 public:


  virtual ~TalkService_respondResendMessage_presult() throw();
  TalkException e;

  _TalkService_respondResendMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_acceptGroupInvitation_args__isset {
  _TalkService_acceptGroupInvitation_args__isset() : reqSeq(false), groupId(false) {}
  bool reqSeq :1;
  bool groupId :1;
} _TalkService_acceptGroupInvitation_args__isset;

class TalkService_acceptGroupInvitation_args {
 public:

  TalkService_acceptGroupInvitation_args(const TalkService_acceptGroupInvitation_args&);
  TalkService_acceptGroupInvitation_args& operator=(const TalkService_acceptGroupInvitation_args&);
  TalkService_acceptGroupInvitation_args() : reqSeq(0), groupId() {
  }

  virtual ~TalkService_acceptGroupInvitation_args() throw();
  int32_t reqSeq;
  std::string groupId;

  _TalkService_acceptGroupInvitation_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_groupId(const std::string& val);

  bool operator == (const TalkService_acceptGroupInvitation_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(groupId == rhs.groupId))
      return false;
    return true;
  }
  bool operator != (const TalkService_acceptGroupInvitation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_acceptGroupInvitation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_acceptGroupInvitation_pargs {
 public:


  virtual ~TalkService_acceptGroupInvitation_pargs() throw();
  const int32_t* reqSeq;
  const std::string* groupId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_acceptGroupInvitation_result__isset {
  _TalkService_acceptGroupInvitation_result__isset() : e(false) {}
  bool e :1;
} _TalkService_acceptGroupInvitation_result__isset;

class TalkService_acceptGroupInvitation_result {
 public:

  TalkService_acceptGroupInvitation_result(const TalkService_acceptGroupInvitation_result&);
  TalkService_acceptGroupInvitation_result& operator=(const TalkService_acceptGroupInvitation_result&);
  TalkService_acceptGroupInvitation_result() {
  }

  virtual ~TalkService_acceptGroupInvitation_result() throw();
  TalkException e;

  _TalkService_acceptGroupInvitation_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_acceptGroupInvitation_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_acceptGroupInvitation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_acceptGroupInvitation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_acceptGroupInvitation_presult__isset {
  _TalkService_acceptGroupInvitation_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_acceptGroupInvitation_presult__isset;

class TalkService_acceptGroupInvitation_presult {
 public:


  virtual ~TalkService_acceptGroupInvitation_presult() throw();
  TalkException e;

  _TalkService_acceptGroupInvitation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_acceptGroupInvitationByTicket_args__isset {
  _TalkService_acceptGroupInvitationByTicket_args__isset() : reqSeq(false), GroupMid(false), ticketId(false) {}
  bool reqSeq :1;
  bool GroupMid :1;
  bool ticketId :1;
} _TalkService_acceptGroupInvitationByTicket_args__isset;

class TalkService_acceptGroupInvitationByTicket_args {
 public:

  TalkService_acceptGroupInvitationByTicket_args(const TalkService_acceptGroupInvitationByTicket_args&);
  TalkService_acceptGroupInvitationByTicket_args& operator=(const TalkService_acceptGroupInvitationByTicket_args&);
  TalkService_acceptGroupInvitationByTicket_args() : reqSeq(0), GroupMid(), ticketId() {
  }

  virtual ~TalkService_acceptGroupInvitationByTicket_args() throw();
  int32_t reqSeq;
  std::string GroupMid;
  std::string ticketId;

  _TalkService_acceptGroupInvitationByTicket_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_GroupMid(const std::string& val);

  void __set_ticketId(const std::string& val);

  bool operator == (const TalkService_acceptGroupInvitationByTicket_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(GroupMid == rhs.GroupMid))
      return false;
    if (!(ticketId == rhs.ticketId))
      return false;
    return true;
  }
  bool operator != (const TalkService_acceptGroupInvitationByTicket_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_acceptGroupInvitationByTicket_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_acceptGroupInvitationByTicket_pargs {
 public:


  virtual ~TalkService_acceptGroupInvitationByTicket_pargs() throw();
  const int32_t* reqSeq;
  const std::string* GroupMid;
  const std::string* ticketId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_acceptGroupInvitationByTicket_result__isset {
  _TalkService_acceptGroupInvitationByTicket_result__isset() : e(false) {}
  bool e :1;
} _TalkService_acceptGroupInvitationByTicket_result__isset;

class TalkService_acceptGroupInvitationByTicket_result {
 public:

  TalkService_acceptGroupInvitationByTicket_result(const TalkService_acceptGroupInvitationByTicket_result&);
  TalkService_acceptGroupInvitationByTicket_result& operator=(const TalkService_acceptGroupInvitationByTicket_result&);
  TalkService_acceptGroupInvitationByTicket_result() {
  }

  virtual ~TalkService_acceptGroupInvitationByTicket_result() throw();
  TalkException e;

  _TalkService_acceptGroupInvitationByTicket_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_acceptGroupInvitationByTicket_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_acceptGroupInvitationByTicket_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_acceptGroupInvitationByTicket_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_acceptGroupInvitationByTicket_presult__isset {
  _TalkService_acceptGroupInvitationByTicket_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_acceptGroupInvitationByTicket_presult__isset;

class TalkService_acceptGroupInvitationByTicket_presult {
 public:


  virtual ~TalkService_acceptGroupInvitationByTicket_presult() throw();
  TalkException e;

  _TalkService_acceptGroupInvitationByTicket_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_acceptProximityMatches_args__isset {
  _TalkService_acceptProximityMatches_args__isset() : sessionId(false), ids(false) {}
  bool sessionId :1;
  bool ids :1;
} _TalkService_acceptProximityMatches_args__isset;

class TalkService_acceptProximityMatches_args {
 public:

  TalkService_acceptProximityMatches_args(const TalkService_acceptProximityMatches_args&);
  TalkService_acceptProximityMatches_args& operator=(const TalkService_acceptProximityMatches_args&);
  TalkService_acceptProximityMatches_args() : sessionId() {
  }

  virtual ~TalkService_acceptProximityMatches_args() throw();
  std::string sessionId;
  std::set<std::string>  ids;

  _TalkService_acceptProximityMatches_args__isset __isset;

  void __set_sessionId(const std::string& val);

  void __set_ids(const std::set<std::string> & val);

  bool operator == (const TalkService_acceptProximityMatches_args & rhs) const
  {
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(ids == rhs.ids))
      return false;
    return true;
  }
  bool operator != (const TalkService_acceptProximityMatches_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_acceptProximityMatches_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_acceptProximityMatches_pargs {
 public:


  virtual ~TalkService_acceptProximityMatches_pargs() throw();
  const std::string* sessionId;
  const std::set<std::string> * ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_acceptProximityMatches_result__isset {
  _TalkService_acceptProximityMatches_result__isset() : e(false) {}
  bool e :1;
} _TalkService_acceptProximityMatches_result__isset;

class TalkService_acceptProximityMatches_result {
 public:

  TalkService_acceptProximityMatches_result(const TalkService_acceptProximityMatches_result&);
  TalkService_acceptProximityMatches_result& operator=(const TalkService_acceptProximityMatches_result&);
  TalkService_acceptProximityMatches_result() {
  }

  virtual ~TalkService_acceptProximityMatches_result() throw();
  TalkException e;

  _TalkService_acceptProximityMatches_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_acceptProximityMatches_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_acceptProximityMatches_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_acceptProximityMatches_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_acceptProximityMatches_presult__isset {
  _TalkService_acceptProximityMatches_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_acceptProximityMatches_presult__isset;

class TalkService_acceptProximityMatches_presult {
 public:


  virtual ~TalkService_acceptProximityMatches_presult() throw();
  TalkException e;

  _TalkService_acceptProximityMatches_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_acquireCallRoute_args__isset {
  _TalkService_acquireCallRoute_args__isset() : to(false) {}
  bool to :1;
} _TalkService_acquireCallRoute_args__isset;

class TalkService_acquireCallRoute_args {
 public:

  TalkService_acquireCallRoute_args(const TalkService_acquireCallRoute_args&);
  TalkService_acquireCallRoute_args& operator=(const TalkService_acquireCallRoute_args&);
  TalkService_acquireCallRoute_args() : to() {
  }

  virtual ~TalkService_acquireCallRoute_args() throw();
  std::string to;

  _TalkService_acquireCallRoute_args__isset __isset;

  void __set_to(const std::string& val);

  bool operator == (const TalkService_acquireCallRoute_args & rhs) const
  {
    if (!(to == rhs.to))
      return false;
    return true;
  }
  bool operator != (const TalkService_acquireCallRoute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_acquireCallRoute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_acquireCallRoute_pargs {
 public:


  virtual ~TalkService_acquireCallRoute_pargs() throw();
  const std::string* to;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_acquireCallRoute_result__isset {
  _TalkService_acquireCallRoute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_acquireCallRoute_result__isset;

class TalkService_acquireCallRoute_result {
 public:

  TalkService_acquireCallRoute_result(const TalkService_acquireCallRoute_result&);
  TalkService_acquireCallRoute_result& operator=(const TalkService_acquireCallRoute_result&);
  TalkService_acquireCallRoute_result() {
  }

  virtual ~TalkService_acquireCallRoute_result() throw();
  std::vector<std::string>  success;
  TalkException e;

  _TalkService_acquireCallRoute_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_acquireCallRoute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_acquireCallRoute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_acquireCallRoute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_acquireCallRoute_presult__isset {
  _TalkService_acquireCallRoute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_acquireCallRoute_presult__isset;

class TalkService_acquireCallRoute_presult {
 public:


  virtual ~TalkService_acquireCallRoute_presult() throw();
  std::vector<std::string> * success;
  TalkException e;

  _TalkService_acquireCallRoute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_acquireCallTicket_args__isset {
  _TalkService_acquireCallTicket_args__isset() : to(false) {}
  bool to :1;
} _TalkService_acquireCallTicket_args__isset;

class TalkService_acquireCallTicket_args {
 public:

  TalkService_acquireCallTicket_args(const TalkService_acquireCallTicket_args&);
  TalkService_acquireCallTicket_args& operator=(const TalkService_acquireCallTicket_args&);
  TalkService_acquireCallTicket_args() : to() {
  }

  virtual ~TalkService_acquireCallTicket_args() throw();
  std::string to;

  _TalkService_acquireCallTicket_args__isset __isset;

  void __set_to(const std::string& val);

  bool operator == (const TalkService_acquireCallTicket_args & rhs) const
  {
    if (!(to == rhs.to))
      return false;
    return true;
  }
  bool operator != (const TalkService_acquireCallTicket_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_acquireCallTicket_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_acquireCallTicket_pargs {
 public:


  virtual ~TalkService_acquireCallTicket_pargs() throw();
  const std::string* to;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_acquireCallTicket_result__isset {
  _TalkService_acquireCallTicket_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_acquireCallTicket_result__isset;

class TalkService_acquireCallTicket_result {
 public:

  TalkService_acquireCallTicket_result(const TalkService_acquireCallTicket_result&);
  TalkService_acquireCallTicket_result& operator=(const TalkService_acquireCallTicket_result&);
  TalkService_acquireCallTicket_result() : success() {
  }

  virtual ~TalkService_acquireCallTicket_result() throw();
  std::string success;
  TalkException e;

  _TalkService_acquireCallTicket_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_acquireCallTicket_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_acquireCallTicket_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_acquireCallTicket_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_acquireCallTicket_presult__isset {
  _TalkService_acquireCallTicket_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_acquireCallTicket_presult__isset;

class TalkService_acquireCallTicket_presult {
 public:


  virtual ~TalkService_acquireCallTicket_presult() throw();
  std::string* success;
  TalkException e;

  _TalkService_acquireCallTicket_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_acquireEncryptedAccessToken_args__isset {
  _TalkService_acquireEncryptedAccessToken_args__isset() : featureType(false) {}
  bool featureType :1;
} _TalkService_acquireEncryptedAccessToken_args__isset;

class TalkService_acquireEncryptedAccessToken_args {
 public:

  TalkService_acquireEncryptedAccessToken_args(const TalkService_acquireEncryptedAccessToken_args&);
  TalkService_acquireEncryptedAccessToken_args& operator=(const TalkService_acquireEncryptedAccessToken_args&);
  TalkService_acquireEncryptedAccessToken_args() : featureType((FeatureType::type)0) {
  }

  virtual ~TalkService_acquireEncryptedAccessToken_args() throw();
  FeatureType::type featureType;

  _TalkService_acquireEncryptedAccessToken_args__isset __isset;

  void __set_featureType(const FeatureType::type val);

  bool operator == (const TalkService_acquireEncryptedAccessToken_args & rhs) const
  {
    if (!(featureType == rhs.featureType))
      return false;
    return true;
  }
  bool operator != (const TalkService_acquireEncryptedAccessToken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_acquireEncryptedAccessToken_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_acquireEncryptedAccessToken_pargs {
 public:


  virtual ~TalkService_acquireEncryptedAccessToken_pargs() throw();
  const FeatureType::type* featureType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_acquireEncryptedAccessToken_result__isset {
  _TalkService_acquireEncryptedAccessToken_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_acquireEncryptedAccessToken_result__isset;

class TalkService_acquireEncryptedAccessToken_result {
 public:

  TalkService_acquireEncryptedAccessToken_result(const TalkService_acquireEncryptedAccessToken_result&);
  TalkService_acquireEncryptedAccessToken_result& operator=(const TalkService_acquireEncryptedAccessToken_result&);
  TalkService_acquireEncryptedAccessToken_result() : success() {
  }

  virtual ~TalkService_acquireEncryptedAccessToken_result() throw();
  std::string success;
  TalkException e;

  _TalkService_acquireEncryptedAccessToken_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_acquireEncryptedAccessToken_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_acquireEncryptedAccessToken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_acquireEncryptedAccessToken_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_acquireEncryptedAccessToken_presult__isset {
  _TalkService_acquireEncryptedAccessToken_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_acquireEncryptedAccessToken_presult__isset;

class TalkService_acquireEncryptedAccessToken_presult {
 public:


  virtual ~TalkService_acquireEncryptedAccessToken_presult() throw();
  std::string* success;
  TalkException e;

  _TalkService_acquireEncryptedAccessToken_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_addSnsId_args__isset {
  _TalkService_addSnsId_args__isset() : snsIdType(false), snsAccessToken(false) {}
  bool snsIdType :1;
  bool snsAccessToken :1;
} _TalkService_addSnsId_args__isset;

class TalkService_addSnsId_args {
 public:

  TalkService_addSnsId_args(const TalkService_addSnsId_args&);
  TalkService_addSnsId_args& operator=(const TalkService_addSnsId_args&);
  TalkService_addSnsId_args() : snsIdType((SnsIdType::type)0), snsAccessToken() {
  }

  virtual ~TalkService_addSnsId_args() throw();
  SnsIdType::type snsIdType;
  std::string snsAccessToken;

  _TalkService_addSnsId_args__isset __isset;

  void __set_snsIdType(const SnsIdType::type val);

  void __set_snsAccessToken(const std::string& val);

  bool operator == (const TalkService_addSnsId_args & rhs) const
  {
    if (!(snsIdType == rhs.snsIdType))
      return false;
    if (!(snsAccessToken == rhs.snsAccessToken))
      return false;
    return true;
  }
  bool operator != (const TalkService_addSnsId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_addSnsId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_addSnsId_pargs {
 public:


  virtual ~TalkService_addSnsId_pargs() throw();
  const SnsIdType::type* snsIdType;
  const std::string* snsAccessToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_addSnsId_result__isset {
  _TalkService_addSnsId_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_addSnsId_result__isset;

class TalkService_addSnsId_result {
 public:

  TalkService_addSnsId_result(const TalkService_addSnsId_result&);
  TalkService_addSnsId_result& operator=(const TalkService_addSnsId_result&);
  TalkService_addSnsId_result() : success() {
  }

  virtual ~TalkService_addSnsId_result() throw();
  std::string success;
  TalkException e;

  _TalkService_addSnsId_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_addSnsId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_addSnsId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_addSnsId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_addSnsId_presult__isset {
  _TalkService_addSnsId_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_addSnsId_presult__isset;

class TalkService_addSnsId_presult {
 public:


  virtual ~TalkService_addSnsId_presult() throw();
  std::string* success;
  TalkException e;

  _TalkService_addSnsId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_blockContact_args__isset {
  _TalkService_blockContact_args__isset() : reqSeq(false), id(false) {}
  bool reqSeq :1;
  bool id :1;
} _TalkService_blockContact_args__isset;

class TalkService_blockContact_args {
 public:

  TalkService_blockContact_args(const TalkService_blockContact_args&);
  TalkService_blockContact_args& operator=(const TalkService_blockContact_args&);
  TalkService_blockContact_args() : reqSeq(0), id() {
  }

  virtual ~TalkService_blockContact_args() throw();
  int32_t reqSeq;
  std::string id;

  _TalkService_blockContact_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_id(const std::string& val);

  bool operator == (const TalkService_blockContact_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const TalkService_blockContact_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_blockContact_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_blockContact_pargs {
 public:


  virtual ~TalkService_blockContact_pargs() throw();
  const int32_t* reqSeq;
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_blockContact_result__isset {
  _TalkService_blockContact_result__isset() : e(false) {}
  bool e :1;
} _TalkService_blockContact_result__isset;

class TalkService_blockContact_result {
 public:

  TalkService_blockContact_result(const TalkService_blockContact_result&);
  TalkService_blockContact_result& operator=(const TalkService_blockContact_result&);
  TalkService_blockContact_result() {
  }

  virtual ~TalkService_blockContact_result() throw();
  TalkException e;

  _TalkService_blockContact_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_blockContact_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_blockContact_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_blockContact_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_blockContact_presult__isset {
  _TalkService_blockContact_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_blockContact_presult__isset;

class TalkService_blockContact_presult {
 public:


  virtual ~TalkService_blockContact_presult() throw();
  TalkException e;

  _TalkService_blockContact_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_blockRecommendation_args__isset {
  _TalkService_blockRecommendation_args__isset() : reqSeq(false), id(false) {}
  bool reqSeq :1;
  bool id :1;
} _TalkService_blockRecommendation_args__isset;

class TalkService_blockRecommendation_args {
 public:

  TalkService_blockRecommendation_args(const TalkService_blockRecommendation_args&);
  TalkService_blockRecommendation_args& operator=(const TalkService_blockRecommendation_args&);
  TalkService_blockRecommendation_args() : reqSeq(0), id() {
  }

  virtual ~TalkService_blockRecommendation_args() throw();
  int32_t reqSeq;
  std::string id;

  _TalkService_blockRecommendation_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_id(const std::string& val);

  bool operator == (const TalkService_blockRecommendation_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const TalkService_blockRecommendation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_blockRecommendation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_blockRecommendation_pargs {
 public:


  virtual ~TalkService_blockRecommendation_pargs() throw();
  const int32_t* reqSeq;
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_blockRecommendation_result__isset {
  _TalkService_blockRecommendation_result__isset() : e(false) {}
  bool e :1;
} _TalkService_blockRecommendation_result__isset;

class TalkService_blockRecommendation_result {
 public:

  TalkService_blockRecommendation_result(const TalkService_blockRecommendation_result&);
  TalkService_blockRecommendation_result& operator=(const TalkService_blockRecommendation_result&);
  TalkService_blockRecommendation_result() {
  }

  virtual ~TalkService_blockRecommendation_result() throw();
  TalkException e;

  _TalkService_blockRecommendation_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_blockRecommendation_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_blockRecommendation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_blockRecommendation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_blockRecommendation_presult__isset {
  _TalkService_blockRecommendation_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_blockRecommendation_presult__isset;

class TalkService_blockRecommendation_presult {
 public:


  virtual ~TalkService_blockRecommendation_presult() throw();
  TalkException e;

  _TalkService_blockRecommendation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_cancelGroupInvitation_args__isset {
  _TalkService_cancelGroupInvitation_args__isset() : reqSeq(false), groupId(false), contactIds(false) {}
  bool reqSeq :1;
  bool groupId :1;
  bool contactIds :1;
} _TalkService_cancelGroupInvitation_args__isset;

class TalkService_cancelGroupInvitation_args {
 public:

  TalkService_cancelGroupInvitation_args(const TalkService_cancelGroupInvitation_args&);
  TalkService_cancelGroupInvitation_args& operator=(const TalkService_cancelGroupInvitation_args&);
  TalkService_cancelGroupInvitation_args() : reqSeq(0), groupId() {
  }

  virtual ~TalkService_cancelGroupInvitation_args() throw();
  int32_t reqSeq;
  std::string groupId;
  std::vector<std::string>  contactIds;

  _TalkService_cancelGroupInvitation_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_groupId(const std::string& val);

  void __set_contactIds(const std::vector<std::string> & val);

  bool operator == (const TalkService_cancelGroupInvitation_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(groupId == rhs.groupId))
      return false;
    if (!(contactIds == rhs.contactIds))
      return false;
    return true;
  }
  bool operator != (const TalkService_cancelGroupInvitation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_cancelGroupInvitation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_cancelGroupInvitation_pargs {
 public:


  virtual ~TalkService_cancelGroupInvitation_pargs() throw();
  const int32_t* reqSeq;
  const std::string* groupId;
  const std::vector<std::string> * contactIds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_cancelGroupInvitation_result__isset {
  _TalkService_cancelGroupInvitation_result__isset() : e(false) {}
  bool e :1;
} _TalkService_cancelGroupInvitation_result__isset;

class TalkService_cancelGroupInvitation_result {
 public:

  TalkService_cancelGroupInvitation_result(const TalkService_cancelGroupInvitation_result&);
  TalkService_cancelGroupInvitation_result& operator=(const TalkService_cancelGroupInvitation_result&);
  TalkService_cancelGroupInvitation_result() {
  }

  virtual ~TalkService_cancelGroupInvitation_result() throw();
  TalkException e;

  _TalkService_cancelGroupInvitation_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_cancelGroupInvitation_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_cancelGroupInvitation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_cancelGroupInvitation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_cancelGroupInvitation_presult__isset {
  _TalkService_cancelGroupInvitation_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_cancelGroupInvitation_presult__isset;

class TalkService_cancelGroupInvitation_presult {
 public:


  virtual ~TalkService_cancelGroupInvitation_presult() throw();
  TalkException e;

  _TalkService_cancelGroupInvitation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_changeVerificationMethod_args__isset {
  _TalkService_changeVerificationMethod_args__isset() : sessionId(false), method(false) {}
  bool sessionId :1;
  bool method :1;
} _TalkService_changeVerificationMethod_args__isset;

class TalkService_changeVerificationMethod_args {
 public:

  TalkService_changeVerificationMethod_args(const TalkService_changeVerificationMethod_args&);
  TalkService_changeVerificationMethod_args& operator=(const TalkService_changeVerificationMethod_args&);
  TalkService_changeVerificationMethod_args() : sessionId(), method((VerificationMethod::type)0) {
  }

  virtual ~TalkService_changeVerificationMethod_args() throw();
  std::string sessionId;
  VerificationMethod::type method;

  _TalkService_changeVerificationMethod_args__isset __isset;

  void __set_sessionId(const std::string& val);

  void __set_method(const VerificationMethod::type val);

  bool operator == (const TalkService_changeVerificationMethod_args & rhs) const
  {
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(method == rhs.method))
      return false;
    return true;
  }
  bool operator != (const TalkService_changeVerificationMethod_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_changeVerificationMethod_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_changeVerificationMethod_pargs {
 public:


  virtual ~TalkService_changeVerificationMethod_pargs() throw();
  const std::string* sessionId;
  const VerificationMethod::type* method;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_changeVerificationMethod_result__isset {
  _TalkService_changeVerificationMethod_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_changeVerificationMethod_result__isset;

class TalkService_changeVerificationMethod_result {
 public:

  TalkService_changeVerificationMethod_result(const TalkService_changeVerificationMethod_result&);
  TalkService_changeVerificationMethod_result& operator=(const TalkService_changeVerificationMethod_result&);
  TalkService_changeVerificationMethod_result() {
  }

  virtual ~TalkService_changeVerificationMethod_result() throw();
  VerificationSessionData success;
  TalkException e;

  _TalkService_changeVerificationMethod_result__isset __isset;

  void __set_success(const VerificationSessionData& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_changeVerificationMethod_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_changeVerificationMethod_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_changeVerificationMethod_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_changeVerificationMethod_presult__isset {
  _TalkService_changeVerificationMethod_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_changeVerificationMethod_presult__isset;

class TalkService_changeVerificationMethod_presult {
 public:


  virtual ~TalkService_changeVerificationMethod_presult() throw();
  VerificationSessionData* success;
  TalkException e;

  _TalkService_changeVerificationMethod_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TalkService_clearIdentityCredential_args {
 public:

  TalkService_clearIdentityCredential_args(const TalkService_clearIdentityCredential_args&);
  TalkService_clearIdentityCredential_args& operator=(const TalkService_clearIdentityCredential_args&);
  TalkService_clearIdentityCredential_args() {
  }

  virtual ~TalkService_clearIdentityCredential_args() throw();

  bool operator == (const TalkService_clearIdentityCredential_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TalkService_clearIdentityCredential_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_clearIdentityCredential_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_clearIdentityCredential_pargs {
 public:


  virtual ~TalkService_clearIdentityCredential_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_clearIdentityCredential_result__isset {
  _TalkService_clearIdentityCredential_result__isset() : e(false) {}
  bool e :1;
} _TalkService_clearIdentityCredential_result__isset;

class TalkService_clearIdentityCredential_result {
 public:

  TalkService_clearIdentityCredential_result(const TalkService_clearIdentityCredential_result&);
  TalkService_clearIdentityCredential_result& operator=(const TalkService_clearIdentityCredential_result&);
  TalkService_clearIdentityCredential_result() {
  }

  virtual ~TalkService_clearIdentityCredential_result() throw();
  TalkException e;

  _TalkService_clearIdentityCredential_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_clearIdentityCredential_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_clearIdentityCredential_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_clearIdentityCredential_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_clearIdentityCredential_presult__isset {
  _TalkService_clearIdentityCredential_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_clearIdentityCredential_presult__isset;

class TalkService_clearIdentityCredential_presult {
 public:


  virtual ~TalkService_clearIdentityCredential_presult() throw();
  TalkException e;

  _TalkService_clearIdentityCredential_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_clearMessageBox_args__isset {
  _TalkService_clearMessageBox_args__isset() : channelId(false), messageBoxId(false) {}
  bool channelId :1;
  bool messageBoxId :1;
} _TalkService_clearMessageBox_args__isset;

class TalkService_clearMessageBox_args {
 public:

  TalkService_clearMessageBox_args(const TalkService_clearMessageBox_args&);
  TalkService_clearMessageBox_args& operator=(const TalkService_clearMessageBox_args&);
  TalkService_clearMessageBox_args() : channelId(), messageBoxId() {
  }

  virtual ~TalkService_clearMessageBox_args() throw();
  std::string channelId;
  std::string messageBoxId;

  _TalkService_clearMessageBox_args__isset __isset;

  void __set_channelId(const std::string& val);

  void __set_messageBoxId(const std::string& val);

  bool operator == (const TalkService_clearMessageBox_args & rhs) const
  {
    if (!(channelId == rhs.channelId))
      return false;
    if (!(messageBoxId == rhs.messageBoxId))
      return false;
    return true;
  }
  bool operator != (const TalkService_clearMessageBox_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_clearMessageBox_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_clearMessageBox_pargs {
 public:


  virtual ~TalkService_clearMessageBox_pargs() throw();
  const std::string* channelId;
  const std::string* messageBoxId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_clearMessageBox_result__isset {
  _TalkService_clearMessageBox_result__isset() : e(false) {}
  bool e :1;
} _TalkService_clearMessageBox_result__isset;

class TalkService_clearMessageBox_result {
 public:

  TalkService_clearMessageBox_result(const TalkService_clearMessageBox_result&);
  TalkService_clearMessageBox_result& operator=(const TalkService_clearMessageBox_result&);
  TalkService_clearMessageBox_result() {
  }

  virtual ~TalkService_clearMessageBox_result() throw();
  TalkException e;

  _TalkService_clearMessageBox_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_clearMessageBox_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_clearMessageBox_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_clearMessageBox_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_clearMessageBox_presult__isset {
  _TalkService_clearMessageBox_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_clearMessageBox_presult__isset;

class TalkService_clearMessageBox_presult {
 public:


  virtual ~TalkService_clearMessageBox_presult() throw();
  TalkException e;

  _TalkService_clearMessageBox_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_closeProximityMatch_args__isset {
  _TalkService_closeProximityMatch_args__isset() : sessionId(false) {}
  bool sessionId :1;
} _TalkService_closeProximityMatch_args__isset;

class TalkService_closeProximityMatch_args {
 public:

  TalkService_closeProximityMatch_args(const TalkService_closeProximityMatch_args&);
  TalkService_closeProximityMatch_args& operator=(const TalkService_closeProximityMatch_args&);
  TalkService_closeProximityMatch_args() : sessionId() {
  }

  virtual ~TalkService_closeProximityMatch_args() throw();
  std::string sessionId;

  _TalkService_closeProximityMatch_args__isset __isset;

  void __set_sessionId(const std::string& val);

  bool operator == (const TalkService_closeProximityMatch_args & rhs) const
  {
    if (!(sessionId == rhs.sessionId))
      return false;
    return true;
  }
  bool operator != (const TalkService_closeProximityMatch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_closeProximityMatch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_closeProximityMatch_pargs {
 public:


  virtual ~TalkService_closeProximityMatch_pargs() throw();
  const std::string* sessionId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_closeProximityMatch_result__isset {
  _TalkService_closeProximityMatch_result__isset() : e(false) {}
  bool e :1;
} _TalkService_closeProximityMatch_result__isset;

class TalkService_closeProximityMatch_result {
 public:

  TalkService_closeProximityMatch_result(const TalkService_closeProximityMatch_result&);
  TalkService_closeProximityMatch_result& operator=(const TalkService_closeProximityMatch_result&);
  TalkService_closeProximityMatch_result() {
  }

  virtual ~TalkService_closeProximityMatch_result() throw();
  TalkException e;

  _TalkService_closeProximityMatch_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_closeProximityMatch_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_closeProximityMatch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_closeProximityMatch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_closeProximityMatch_presult__isset {
  _TalkService_closeProximityMatch_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_closeProximityMatch_presult__isset;

class TalkService_closeProximityMatch_presult {
 public:


  virtual ~TalkService_closeProximityMatch_presult() throw();
  TalkException e;

  _TalkService_closeProximityMatch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_commitSendMessage_args__isset {
  _TalkService_commitSendMessage_args__isset() : seq(false), messageId(false), receiverMids(false) {}
  bool seq :1;
  bool messageId :1;
  bool receiverMids :1;
} _TalkService_commitSendMessage_args__isset;

class TalkService_commitSendMessage_args {
 public:

  TalkService_commitSendMessage_args(const TalkService_commitSendMessage_args&);
  TalkService_commitSendMessage_args& operator=(const TalkService_commitSendMessage_args&);
  TalkService_commitSendMessage_args() : seq(0), messageId() {
  }

  virtual ~TalkService_commitSendMessage_args() throw();
  int32_t seq;
  std::string messageId;
  std::vector<std::string>  receiverMids;

  _TalkService_commitSendMessage_args__isset __isset;

  void __set_seq(const int32_t val);

  void __set_messageId(const std::string& val);

  void __set_receiverMids(const std::vector<std::string> & val);

  bool operator == (const TalkService_commitSendMessage_args & rhs) const
  {
    if (!(seq == rhs.seq))
      return false;
    if (!(messageId == rhs.messageId))
      return false;
    if (!(receiverMids == rhs.receiverMids))
      return false;
    return true;
  }
  bool operator != (const TalkService_commitSendMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_commitSendMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_commitSendMessage_pargs {
 public:


  virtual ~TalkService_commitSendMessage_pargs() throw();
  const int32_t* seq;
  const std::string* messageId;
  const std::vector<std::string> * receiverMids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_commitSendMessage_result__isset {
  _TalkService_commitSendMessage_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_commitSendMessage_result__isset;

class TalkService_commitSendMessage_result {
 public:

  TalkService_commitSendMessage_result(const TalkService_commitSendMessage_result&);
  TalkService_commitSendMessage_result& operator=(const TalkService_commitSendMessage_result&);
  TalkService_commitSendMessage_result() {
  }

  virtual ~TalkService_commitSendMessage_result() throw();
  std::map<std::string, std::string>  success;
  TalkException e;

  _TalkService_commitSendMessage_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_commitSendMessage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_commitSendMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_commitSendMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_commitSendMessage_presult__isset {
  _TalkService_commitSendMessage_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_commitSendMessage_presult__isset;

class TalkService_commitSendMessage_presult {
 public:


  virtual ~TalkService_commitSendMessage_presult() throw();
  std::map<std::string, std::string> * success;
  TalkException e;

  _TalkService_commitSendMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_commitSendMessages_args__isset {
  _TalkService_commitSendMessages_args__isset() : seq(false), messageIds(false), receiverMids(false) {}
  bool seq :1;
  bool messageIds :1;
  bool receiverMids :1;
} _TalkService_commitSendMessages_args__isset;

class TalkService_commitSendMessages_args {
 public:

  TalkService_commitSendMessages_args(const TalkService_commitSendMessages_args&);
  TalkService_commitSendMessages_args& operator=(const TalkService_commitSendMessages_args&);
  TalkService_commitSendMessages_args() : seq(0) {
  }

  virtual ~TalkService_commitSendMessages_args() throw();
  int32_t seq;
  std::vector<std::string>  messageIds;
  std::vector<std::string>  receiverMids;

  _TalkService_commitSendMessages_args__isset __isset;

  void __set_seq(const int32_t val);

  void __set_messageIds(const std::vector<std::string> & val);

  void __set_receiverMids(const std::vector<std::string> & val);

  bool operator == (const TalkService_commitSendMessages_args & rhs) const
  {
    if (!(seq == rhs.seq))
      return false;
    if (!(messageIds == rhs.messageIds))
      return false;
    if (!(receiverMids == rhs.receiverMids))
      return false;
    return true;
  }
  bool operator != (const TalkService_commitSendMessages_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_commitSendMessages_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_commitSendMessages_pargs {
 public:


  virtual ~TalkService_commitSendMessages_pargs() throw();
  const int32_t* seq;
  const std::vector<std::string> * messageIds;
  const std::vector<std::string> * receiverMids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_commitSendMessages_result__isset {
  _TalkService_commitSendMessages_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_commitSendMessages_result__isset;

class TalkService_commitSendMessages_result {
 public:

  TalkService_commitSendMessages_result(const TalkService_commitSendMessages_result&);
  TalkService_commitSendMessages_result& operator=(const TalkService_commitSendMessages_result&);
  TalkService_commitSendMessages_result() {
  }

  virtual ~TalkService_commitSendMessages_result() throw();
  std::map<std::string, std::string>  success;
  TalkException e;

  _TalkService_commitSendMessages_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_commitSendMessages_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_commitSendMessages_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_commitSendMessages_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_commitSendMessages_presult__isset {
  _TalkService_commitSendMessages_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_commitSendMessages_presult__isset;

class TalkService_commitSendMessages_presult {
 public:


  virtual ~TalkService_commitSendMessages_presult() throw();
  std::map<std::string, std::string> * success;
  TalkException e;

  _TalkService_commitSendMessages_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_commitUpdateProfile_args__isset {
  _TalkService_commitUpdateProfile_args__isset() : seq(false), attrs(false), receiverMids(false) {}
  bool seq :1;
  bool attrs :1;
  bool receiverMids :1;
} _TalkService_commitUpdateProfile_args__isset;

class TalkService_commitUpdateProfile_args {
 public:

  TalkService_commitUpdateProfile_args(const TalkService_commitUpdateProfile_args&);
  TalkService_commitUpdateProfile_args& operator=(const TalkService_commitUpdateProfile_args&);
  TalkService_commitUpdateProfile_args() : seq(0) {
  }

  virtual ~TalkService_commitUpdateProfile_args() throw();
  int32_t seq;
  std::vector<ProfileAttribute::type>  attrs;
  std::vector<std::string>  receiverMids;

  _TalkService_commitUpdateProfile_args__isset __isset;

  void __set_seq(const int32_t val);

  void __set_attrs(const std::vector<ProfileAttribute::type> & val);

  void __set_receiverMids(const std::vector<std::string> & val);

  bool operator == (const TalkService_commitUpdateProfile_args & rhs) const
  {
    if (!(seq == rhs.seq))
      return false;
    if (!(attrs == rhs.attrs))
      return false;
    if (!(receiverMids == rhs.receiverMids))
      return false;
    return true;
  }
  bool operator != (const TalkService_commitUpdateProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_commitUpdateProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_commitUpdateProfile_pargs {
 public:


  virtual ~TalkService_commitUpdateProfile_pargs() throw();
  const int32_t* seq;
  const std::vector<ProfileAttribute::type> * attrs;
  const std::vector<std::string> * receiverMids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_commitUpdateProfile_result__isset {
  _TalkService_commitUpdateProfile_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_commitUpdateProfile_result__isset;

class TalkService_commitUpdateProfile_result {
 public:

  TalkService_commitUpdateProfile_result(const TalkService_commitUpdateProfile_result&);
  TalkService_commitUpdateProfile_result& operator=(const TalkService_commitUpdateProfile_result&);
  TalkService_commitUpdateProfile_result() {
  }

  virtual ~TalkService_commitUpdateProfile_result() throw();
  std::map<std::string, std::string>  success;
  TalkException e;

  _TalkService_commitUpdateProfile_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_commitUpdateProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_commitUpdateProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_commitUpdateProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_commitUpdateProfile_presult__isset {
  _TalkService_commitUpdateProfile_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_commitUpdateProfile_presult__isset;

class TalkService_commitUpdateProfile_presult {
 public:


  virtual ~TalkService_commitUpdateProfile_presult() throw();
  std::map<std::string, std::string> * success;
  TalkException e;

  _TalkService_commitUpdateProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_confirmEmail_args__isset {
  _TalkService_confirmEmail_args__isset() : verifier(false), pinCode(false) {}
  bool verifier :1;
  bool pinCode :1;
} _TalkService_confirmEmail_args__isset;

class TalkService_confirmEmail_args {
 public:

  TalkService_confirmEmail_args(const TalkService_confirmEmail_args&);
  TalkService_confirmEmail_args& operator=(const TalkService_confirmEmail_args&);
  TalkService_confirmEmail_args() : verifier(), pinCode() {
  }

  virtual ~TalkService_confirmEmail_args() throw();
  std::string verifier;
  std::string pinCode;

  _TalkService_confirmEmail_args__isset __isset;

  void __set_verifier(const std::string& val);

  void __set_pinCode(const std::string& val);

  bool operator == (const TalkService_confirmEmail_args & rhs) const
  {
    if (!(verifier == rhs.verifier))
      return false;
    if (!(pinCode == rhs.pinCode))
      return false;
    return true;
  }
  bool operator != (const TalkService_confirmEmail_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_confirmEmail_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_confirmEmail_pargs {
 public:


  virtual ~TalkService_confirmEmail_pargs() throw();
  const std::string* verifier;
  const std::string* pinCode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_confirmEmail_result__isset {
  _TalkService_confirmEmail_result__isset() : e(false) {}
  bool e :1;
} _TalkService_confirmEmail_result__isset;

class TalkService_confirmEmail_result {
 public:

  TalkService_confirmEmail_result(const TalkService_confirmEmail_result&);
  TalkService_confirmEmail_result& operator=(const TalkService_confirmEmail_result&);
  TalkService_confirmEmail_result() {
  }

  virtual ~TalkService_confirmEmail_result() throw();
  TalkException e;

  _TalkService_confirmEmail_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_confirmEmail_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_confirmEmail_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_confirmEmail_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_confirmEmail_presult__isset {
  _TalkService_confirmEmail_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_confirmEmail_presult__isset;

class TalkService_confirmEmail_presult {
 public:


  virtual ~TalkService_confirmEmail_presult() throw();
  TalkException e;

  _TalkService_confirmEmail_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_createGroup_args__isset {
  _TalkService_createGroup_args__isset() : seq(false), name(false), contactIds(false) {}
  bool seq :1;
  bool name :1;
  bool contactIds :1;
} _TalkService_createGroup_args__isset;

class TalkService_createGroup_args {
 public:

  TalkService_createGroup_args(const TalkService_createGroup_args&);
  TalkService_createGroup_args& operator=(const TalkService_createGroup_args&);
  TalkService_createGroup_args() : seq(0), name() {
  }

  virtual ~TalkService_createGroup_args() throw();
  int32_t seq;
  std::string name;
  std::vector<std::string>  contactIds;

  _TalkService_createGroup_args__isset __isset;

  void __set_seq(const int32_t val);

  void __set_name(const std::string& val);

  void __set_contactIds(const std::vector<std::string> & val);

  bool operator == (const TalkService_createGroup_args & rhs) const
  {
    if (!(seq == rhs.seq))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(contactIds == rhs.contactIds))
      return false;
    return true;
  }
  bool operator != (const TalkService_createGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_createGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_createGroup_pargs {
 public:


  virtual ~TalkService_createGroup_pargs() throw();
  const int32_t* seq;
  const std::string* name;
  const std::vector<std::string> * contactIds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_createGroup_result__isset {
  _TalkService_createGroup_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_createGroup_result__isset;

class TalkService_createGroup_result {
 public:

  TalkService_createGroup_result(const TalkService_createGroup_result&);
  TalkService_createGroup_result& operator=(const TalkService_createGroup_result&);
  TalkService_createGroup_result() {
  }

  virtual ~TalkService_createGroup_result() throw();
  Group success;
  TalkException e;

  _TalkService_createGroup_result__isset __isset;

  void __set_success(const Group& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_createGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_createGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_createGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_createGroup_presult__isset {
  _TalkService_createGroup_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_createGroup_presult__isset;

class TalkService_createGroup_presult {
 public:


  virtual ~TalkService_createGroup_presult() throw();
  Group* success;
  TalkException e;

  _TalkService_createGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_createQrcodeBase64Image_args__isset {
  _TalkService_createQrcodeBase64Image_args__isset() : url(false), characterSet(false), imageSize(false), x(false), y(false), width(false), height(false) {}
  bool url :1;
  bool characterSet :1;
  bool imageSize :1;
  bool x :1;
  bool y :1;
  bool width :1;
  bool height :1;
} _TalkService_createQrcodeBase64Image_args__isset;

class TalkService_createQrcodeBase64Image_args {
 public:

  TalkService_createQrcodeBase64Image_args(const TalkService_createQrcodeBase64Image_args&);
  TalkService_createQrcodeBase64Image_args& operator=(const TalkService_createQrcodeBase64Image_args&);
  TalkService_createQrcodeBase64Image_args() : url(), characterSet(), imageSize(0), x(0), y(0), width(0), height(0) {
  }

  virtual ~TalkService_createQrcodeBase64Image_args() throw();
  std::string url;
  std::string characterSet;
  int32_t imageSize;
  int32_t x;
  int32_t y;
  int32_t width;
  int32_t height;

  _TalkService_createQrcodeBase64Image_args__isset __isset;

  void __set_url(const std::string& val);

  void __set_characterSet(const std::string& val);

  void __set_imageSize(const int32_t val);

  void __set_x(const int32_t val);

  void __set_y(const int32_t val);

  void __set_width(const int32_t val);

  void __set_height(const int32_t val);

  bool operator == (const TalkService_createQrcodeBase64Image_args & rhs) const
  {
    if (!(url == rhs.url))
      return false;
    if (!(characterSet == rhs.characterSet))
      return false;
    if (!(imageSize == rhs.imageSize))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(width == rhs.width))
      return false;
    if (!(height == rhs.height))
      return false;
    return true;
  }
  bool operator != (const TalkService_createQrcodeBase64Image_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_createQrcodeBase64Image_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_createQrcodeBase64Image_pargs {
 public:


  virtual ~TalkService_createQrcodeBase64Image_pargs() throw();
  const std::string* url;
  const std::string* characterSet;
  const int32_t* imageSize;
  const int32_t* x;
  const int32_t* y;
  const int32_t* width;
  const int32_t* height;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_createQrcodeBase64Image_result__isset {
  _TalkService_createQrcodeBase64Image_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_createQrcodeBase64Image_result__isset;

class TalkService_createQrcodeBase64Image_result {
 public:

  TalkService_createQrcodeBase64Image_result(const TalkService_createQrcodeBase64Image_result&);
  TalkService_createQrcodeBase64Image_result& operator=(const TalkService_createQrcodeBase64Image_result&);
  TalkService_createQrcodeBase64Image_result() : success() {
  }

  virtual ~TalkService_createQrcodeBase64Image_result() throw();
  std::string success;
  TalkException e;

  _TalkService_createQrcodeBase64Image_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_createQrcodeBase64Image_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_createQrcodeBase64Image_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_createQrcodeBase64Image_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_createQrcodeBase64Image_presult__isset {
  _TalkService_createQrcodeBase64Image_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_createQrcodeBase64Image_presult__isset;

class TalkService_createQrcodeBase64Image_presult {
 public:


  virtual ~TalkService_createQrcodeBase64Image_presult() throw();
  std::string* success;
  TalkException e;

  _TalkService_createQrcodeBase64Image_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_createRoom_args__isset {
  _TalkService_createRoom_args__isset() : reqSeq(false), contactIds(false) {}
  bool reqSeq :1;
  bool contactIds :1;
} _TalkService_createRoom_args__isset;

class TalkService_createRoom_args {
 public:

  TalkService_createRoom_args(const TalkService_createRoom_args&);
  TalkService_createRoom_args& operator=(const TalkService_createRoom_args&);
  TalkService_createRoom_args() : reqSeq(0) {
  }

  virtual ~TalkService_createRoom_args() throw();
  int32_t reqSeq;
  std::vector<std::string>  contactIds;

  _TalkService_createRoom_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_contactIds(const std::vector<std::string> & val);

  bool operator == (const TalkService_createRoom_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(contactIds == rhs.contactIds))
      return false;
    return true;
  }
  bool operator != (const TalkService_createRoom_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_createRoom_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_createRoom_pargs {
 public:


  virtual ~TalkService_createRoom_pargs() throw();
  const int32_t* reqSeq;
  const std::vector<std::string> * contactIds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_createRoom_result__isset {
  _TalkService_createRoom_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_createRoom_result__isset;

class TalkService_createRoom_result {
 public:

  TalkService_createRoom_result(const TalkService_createRoom_result&);
  TalkService_createRoom_result& operator=(const TalkService_createRoom_result&);
  TalkService_createRoom_result() {
  }

  virtual ~TalkService_createRoom_result() throw();
  Room success;
  TalkException e;

  _TalkService_createRoom_result__isset __isset;

  void __set_success(const Room& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_createRoom_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_createRoom_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_createRoom_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_createRoom_presult__isset {
  _TalkService_createRoom_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_createRoom_presult__isset;

class TalkService_createRoom_presult {
 public:


  virtual ~TalkService_createRoom_presult() throw();
  Room* success;
  TalkException e;

  _TalkService_createRoom_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TalkService_createSession_args {
 public:

  TalkService_createSession_args(const TalkService_createSession_args&);
  TalkService_createSession_args& operator=(const TalkService_createSession_args&);
  TalkService_createSession_args() {
  }

  virtual ~TalkService_createSession_args() throw();

  bool operator == (const TalkService_createSession_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TalkService_createSession_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_createSession_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_createSession_pargs {
 public:


  virtual ~TalkService_createSession_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_createSession_result__isset {
  _TalkService_createSession_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_createSession_result__isset;

class TalkService_createSession_result {
 public:

  TalkService_createSession_result(const TalkService_createSession_result&);
  TalkService_createSession_result& operator=(const TalkService_createSession_result&);
  TalkService_createSession_result() : success() {
  }

  virtual ~TalkService_createSession_result() throw();
  std::string success;
  TalkException e;

  _TalkService_createSession_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_createSession_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_createSession_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_createSession_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_createSession_presult__isset {
  _TalkService_createSession_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_createSession_presult__isset;

class TalkService_createSession_presult {
 public:


  virtual ~TalkService_createSession_presult() throw();
  std::string* success;
  TalkException e;

  _TalkService_createSession_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_fetchAnnouncements_args__isset {
  _TalkService_fetchAnnouncements_args__isset() : lastFetchedIndex(false) {}
  bool lastFetchedIndex :1;
} _TalkService_fetchAnnouncements_args__isset;

class TalkService_fetchAnnouncements_args {
 public:

  TalkService_fetchAnnouncements_args(const TalkService_fetchAnnouncements_args&);
  TalkService_fetchAnnouncements_args& operator=(const TalkService_fetchAnnouncements_args&);
  TalkService_fetchAnnouncements_args() : lastFetchedIndex(0) {
  }

  virtual ~TalkService_fetchAnnouncements_args() throw();
  int32_t lastFetchedIndex;

  _TalkService_fetchAnnouncements_args__isset __isset;

  void __set_lastFetchedIndex(const int32_t val);

  bool operator == (const TalkService_fetchAnnouncements_args & rhs) const
  {
    if (!(lastFetchedIndex == rhs.lastFetchedIndex))
      return false;
    return true;
  }
  bool operator != (const TalkService_fetchAnnouncements_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_fetchAnnouncements_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_fetchAnnouncements_pargs {
 public:


  virtual ~TalkService_fetchAnnouncements_pargs() throw();
  const int32_t* lastFetchedIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_fetchAnnouncements_result__isset {
  _TalkService_fetchAnnouncements_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_fetchAnnouncements_result__isset;

class TalkService_fetchAnnouncements_result {
 public:

  TalkService_fetchAnnouncements_result(const TalkService_fetchAnnouncements_result&);
  TalkService_fetchAnnouncements_result& operator=(const TalkService_fetchAnnouncements_result&);
  TalkService_fetchAnnouncements_result() {
  }

  virtual ~TalkService_fetchAnnouncements_result() throw();
  std::vector<Announcement>  success;
  TalkException e;

  _TalkService_fetchAnnouncements_result__isset __isset;

  void __set_success(const std::vector<Announcement> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_fetchAnnouncements_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_fetchAnnouncements_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_fetchAnnouncements_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_fetchAnnouncements_presult__isset {
  _TalkService_fetchAnnouncements_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_fetchAnnouncements_presult__isset;

class TalkService_fetchAnnouncements_presult {
 public:


  virtual ~TalkService_fetchAnnouncements_presult() throw();
  std::vector<Announcement> * success;
  TalkException e;

  _TalkService_fetchAnnouncements_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_fetchMessages_args__isset {
  _TalkService_fetchMessages_args__isset() : localTs(false), count(false) {}
  bool localTs :1;
  bool count :1;
} _TalkService_fetchMessages_args__isset;

class TalkService_fetchMessages_args {
 public:

  TalkService_fetchMessages_args(const TalkService_fetchMessages_args&);
  TalkService_fetchMessages_args& operator=(const TalkService_fetchMessages_args&);
  TalkService_fetchMessages_args() : localTs(0), count(0) {
  }

  virtual ~TalkService_fetchMessages_args() throw();
  int64_t localTs;
  int32_t count;

  _TalkService_fetchMessages_args__isset __isset;

  void __set_localTs(const int64_t val);

  void __set_count(const int32_t val);

  bool operator == (const TalkService_fetchMessages_args & rhs) const
  {
    if (!(localTs == rhs.localTs))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const TalkService_fetchMessages_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_fetchMessages_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_fetchMessages_pargs {
 public:


  virtual ~TalkService_fetchMessages_pargs() throw();
  const int64_t* localTs;
  const int32_t* count;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_fetchMessages_result__isset {
  _TalkService_fetchMessages_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_fetchMessages_result__isset;

class TalkService_fetchMessages_result {
 public:

  TalkService_fetchMessages_result(const TalkService_fetchMessages_result&);
  TalkService_fetchMessages_result& operator=(const TalkService_fetchMessages_result&);
  TalkService_fetchMessages_result() {
  }

  virtual ~TalkService_fetchMessages_result() throw();
  std::vector<Message>  success;
  TalkException e;

  _TalkService_fetchMessages_result__isset __isset;

  void __set_success(const std::vector<Message> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_fetchMessages_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_fetchMessages_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_fetchMessages_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_fetchMessages_presult__isset {
  _TalkService_fetchMessages_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_fetchMessages_presult__isset;

class TalkService_fetchMessages_presult {
 public:


  virtual ~TalkService_fetchMessages_presult() throw();
  std::vector<Message> * success;
  TalkException e;

  _TalkService_fetchMessages_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_fetchOperations_args__isset {
  _TalkService_fetchOperations_args__isset() : localRev(false), count(false) {}
  bool localRev :1;
  bool count :1;
} _TalkService_fetchOperations_args__isset;

class TalkService_fetchOperations_args {
 public:

  TalkService_fetchOperations_args(const TalkService_fetchOperations_args&);
  TalkService_fetchOperations_args& operator=(const TalkService_fetchOperations_args&);
  TalkService_fetchOperations_args() : localRev(0), count(0) {
  }

  virtual ~TalkService_fetchOperations_args() throw();
  int64_t localRev;
  int32_t count;

  _TalkService_fetchOperations_args__isset __isset;

  void __set_localRev(const int64_t val);

  void __set_count(const int32_t val);

  bool operator == (const TalkService_fetchOperations_args & rhs) const
  {
    if (!(localRev == rhs.localRev))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const TalkService_fetchOperations_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_fetchOperations_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_fetchOperations_pargs {
 public:


  virtual ~TalkService_fetchOperations_pargs() throw();
  const int64_t* localRev;
  const int32_t* count;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_fetchOperations_result__isset {
  _TalkService_fetchOperations_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_fetchOperations_result__isset;

class TalkService_fetchOperations_result {
 public:

  TalkService_fetchOperations_result(const TalkService_fetchOperations_result&);
  TalkService_fetchOperations_result& operator=(const TalkService_fetchOperations_result&);
  TalkService_fetchOperations_result() {
  }

  virtual ~TalkService_fetchOperations_result() throw();
  std::vector<Operation>  success;
  ShouldSyncException e;

  _TalkService_fetchOperations_result__isset __isset;

  void __set_success(const std::vector<Operation> & val);

  void __set_e(const ShouldSyncException& val);

  bool operator == (const TalkService_fetchOperations_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_fetchOperations_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_fetchOperations_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_fetchOperations_presult__isset {
  _TalkService_fetchOperations_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_fetchOperations_presult__isset;

class TalkService_fetchOperations_presult {
 public:


  virtual ~TalkService_fetchOperations_presult() throw();
  std::vector<Operation> * success;
  ShouldSyncException e;

  _TalkService_fetchOperations_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_fetchOps_args__isset {
  _TalkService_fetchOps_args__isset() : localRev(false), count(false), globalRev(false), individualRev(false) {}
  bool localRev :1;
  bool count :1;
  bool globalRev :1;
  bool individualRev :1;
} _TalkService_fetchOps_args__isset;

class TalkService_fetchOps_args {
 public:

  TalkService_fetchOps_args(const TalkService_fetchOps_args&);
  TalkService_fetchOps_args& operator=(const TalkService_fetchOps_args&);
  TalkService_fetchOps_args() : localRev(0), count(0), globalRev(0), individualRev(0) {
  }

  virtual ~TalkService_fetchOps_args() throw();
  int64_t localRev;
  int32_t count;
  int64_t globalRev;
  int64_t individualRev;

  _TalkService_fetchOps_args__isset __isset;

  void __set_localRev(const int64_t val);

  void __set_count(const int32_t val);

  void __set_globalRev(const int64_t val);

  void __set_individualRev(const int64_t val);

  bool operator == (const TalkService_fetchOps_args & rhs) const
  {
    if (!(localRev == rhs.localRev))
      return false;
    if (!(count == rhs.count))
      return false;
    if (!(globalRev == rhs.globalRev))
      return false;
    if (!(individualRev == rhs.individualRev))
      return false;
    return true;
  }
  bool operator != (const TalkService_fetchOps_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_fetchOps_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_fetchOps_pargs {
 public:


  virtual ~TalkService_fetchOps_pargs() throw();
  const int64_t* localRev;
  const int32_t* count;
  const int64_t* globalRev;
  const int64_t* individualRev;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_fetchOps_result__isset {
  _TalkService_fetchOps_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_fetchOps_result__isset;

class TalkService_fetchOps_result {
 public:

  TalkService_fetchOps_result(const TalkService_fetchOps_result&);
  TalkService_fetchOps_result& operator=(const TalkService_fetchOps_result&);
  TalkService_fetchOps_result() {
  }

  virtual ~TalkService_fetchOps_result() throw();
  std::vector<Operation>  success;
  ShouldSyncException e;

  _TalkService_fetchOps_result__isset __isset;

  void __set_success(const std::vector<Operation> & val);

  void __set_e(const ShouldSyncException& val);

  bool operator == (const TalkService_fetchOps_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_fetchOps_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_fetchOps_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_fetchOps_presult__isset {
  _TalkService_fetchOps_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_fetchOps_presult__isset;

class TalkService_fetchOps_presult {
 public:


  virtual ~TalkService_fetchOps_presult() throw();
  std::vector<Operation> * success;
  ShouldSyncException e;

  _TalkService_fetchOps_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_findAndAddContactsByEmail_args__isset {
  _TalkService_findAndAddContactsByEmail_args__isset() : reqSeq(false), emails(false) {}
  bool reqSeq :1;
  bool emails :1;
} _TalkService_findAndAddContactsByEmail_args__isset;

class TalkService_findAndAddContactsByEmail_args {
 public:

  TalkService_findAndAddContactsByEmail_args(const TalkService_findAndAddContactsByEmail_args&);
  TalkService_findAndAddContactsByEmail_args& operator=(const TalkService_findAndAddContactsByEmail_args&);
  TalkService_findAndAddContactsByEmail_args() : reqSeq(0) {
  }

  virtual ~TalkService_findAndAddContactsByEmail_args() throw();
  int32_t reqSeq;
  std::set<std::string>  emails;

  _TalkService_findAndAddContactsByEmail_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_emails(const std::set<std::string> & val);

  bool operator == (const TalkService_findAndAddContactsByEmail_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(emails == rhs.emails))
      return false;
    return true;
  }
  bool operator != (const TalkService_findAndAddContactsByEmail_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_findAndAddContactsByEmail_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_findAndAddContactsByEmail_pargs {
 public:


  virtual ~TalkService_findAndAddContactsByEmail_pargs() throw();
  const int32_t* reqSeq;
  const std::set<std::string> * emails;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_findAndAddContactsByEmail_result__isset {
  _TalkService_findAndAddContactsByEmail_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_findAndAddContactsByEmail_result__isset;

class TalkService_findAndAddContactsByEmail_result {
 public:

  TalkService_findAndAddContactsByEmail_result(const TalkService_findAndAddContactsByEmail_result&);
  TalkService_findAndAddContactsByEmail_result& operator=(const TalkService_findAndAddContactsByEmail_result&);
  TalkService_findAndAddContactsByEmail_result() {
  }

  virtual ~TalkService_findAndAddContactsByEmail_result() throw();
  std::map<std::string, Contact>  success;
  TalkException e;

  _TalkService_findAndAddContactsByEmail_result__isset __isset;

  void __set_success(const std::map<std::string, Contact> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_findAndAddContactsByEmail_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_findAndAddContactsByEmail_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_findAndAddContactsByEmail_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_findAndAddContactsByEmail_presult__isset {
  _TalkService_findAndAddContactsByEmail_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_findAndAddContactsByEmail_presult__isset;

class TalkService_findAndAddContactsByEmail_presult {
 public:


  virtual ~TalkService_findAndAddContactsByEmail_presult() throw();
  std::map<std::string, Contact> * success;
  TalkException e;

  _TalkService_findAndAddContactsByEmail_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_findAndAddContactsByMid_args__isset {
  _TalkService_findAndAddContactsByMid_args__isset() : reqSeq(false), mid(false), type(false), reference(false) {}
  bool reqSeq :1;
  bool mid :1;
  bool type :1;
  bool reference :1;
} _TalkService_findAndAddContactsByMid_args__isset;

class TalkService_findAndAddContactsByMid_args {
 public:

  TalkService_findAndAddContactsByMid_args(const TalkService_findAndAddContactsByMid_args&);
  TalkService_findAndAddContactsByMid_args& operator=(const TalkService_findAndAddContactsByMid_args&);
  TalkService_findAndAddContactsByMid_args() : reqSeq(0), mid(), type((ContactType::type)0), reference() {
  }

  virtual ~TalkService_findAndAddContactsByMid_args() throw();
  int32_t reqSeq;
  std::string mid;
  ContactType::type type;
  std::string reference;

  _TalkService_findAndAddContactsByMid_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_mid(const std::string& val);

  void __set_type(const ContactType::type val);

  void __set_reference(const std::string& val);

  bool operator == (const TalkService_findAndAddContactsByMid_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(mid == rhs.mid))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(reference == rhs.reference))
      return false;
    return true;
  }
  bool operator != (const TalkService_findAndAddContactsByMid_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_findAndAddContactsByMid_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_findAndAddContactsByMid_pargs {
 public:


  virtual ~TalkService_findAndAddContactsByMid_pargs() throw();
  const int32_t* reqSeq;
  const std::string* mid;
  const ContactType::type* type;
  const std::string* reference;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_findAndAddContactsByMid_result__isset {
  _TalkService_findAndAddContactsByMid_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_findAndAddContactsByMid_result__isset;

class TalkService_findAndAddContactsByMid_result {
 public:

  TalkService_findAndAddContactsByMid_result(const TalkService_findAndAddContactsByMid_result&);
  TalkService_findAndAddContactsByMid_result& operator=(const TalkService_findAndAddContactsByMid_result&);
  TalkService_findAndAddContactsByMid_result() {
  }

  virtual ~TalkService_findAndAddContactsByMid_result() throw();
  std::map<std::string, Contact>  success;
  TalkException e;

  _TalkService_findAndAddContactsByMid_result__isset __isset;

  void __set_success(const std::map<std::string, Contact> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_findAndAddContactsByMid_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_findAndAddContactsByMid_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_findAndAddContactsByMid_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_findAndAddContactsByMid_presult__isset {
  _TalkService_findAndAddContactsByMid_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_findAndAddContactsByMid_presult__isset;

class TalkService_findAndAddContactsByMid_presult {
 public:


  virtual ~TalkService_findAndAddContactsByMid_presult() throw();
  std::map<std::string, Contact> * success;
  TalkException e;

  _TalkService_findAndAddContactsByMid_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_findGroupByTicketV2_args__isset {
  _TalkService_findGroupByTicketV2_args__isset() : ticketId(false) {}
  bool ticketId :1;
} _TalkService_findGroupByTicketV2_args__isset;

class TalkService_findGroupByTicketV2_args {
 public:

  TalkService_findGroupByTicketV2_args(const TalkService_findGroupByTicketV2_args&);
  TalkService_findGroupByTicketV2_args& operator=(const TalkService_findGroupByTicketV2_args&);
  TalkService_findGroupByTicketV2_args() : ticketId() {
  }

  virtual ~TalkService_findGroupByTicketV2_args() throw();
  std::string ticketId;

  _TalkService_findGroupByTicketV2_args__isset __isset;

  void __set_ticketId(const std::string& val);

  bool operator == (const TalkService_findGroupByTicketV2_args & rhs) const
  {
    if (!(ticketId == rhs.ticketId))
      return false;
    return true;
  }
  bool operator != (const TalkService_findGroupByTicketV2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_findGroupByTicketV2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_findGroupByTicketV2_pargs {
 public:


  virtual ~TalkService_findGroupByTicketV2_pargs() throw();
  const std::string* ticketId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_findGroupByTicketV2_result__isset {
  _TalkService_findGroupByTicketV2_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_findGroupByTicketV2_result__isset;

class TalkService_findGroupByTicketV2_result {
 public:

  TalkService_findGroupByTicketV2_result(const TalkService_findGroupByTicketV2_result&);
  TalkService_findGroupByTicketV2_result& operator=(const TalkService_findGroupByTicketV2_result&);
  TalkService_findGroupByTicketV2_result() {
  }

  virtual ~TalkService_findGroupByTicketV2_result() throw();
  Group success;
  TalkException e;

  _TalkService_findGroupByTicketV2_result__isset __isset;

  void __set_success(const Group& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_findGroupByTicketV2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_findGroupByTicketV2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_findGroupByTicketV2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_findGroupByTicketV2_presult__isset {
  _TalkService_findGroupByTicketV2_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_findGroupByTicketV2_presult__isset;

class TalkService_findGroupByTicketV2_presult {
 public:


  virtual ~TalkService_findGroupByTicketV2_presult() throw();
  Group* success;
  TalkException e;

  _TalkService_findGroupByTicketV2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_findAndAddContactsByPhone_args__isset {
  _TalkService_findAndAddContactsByPhone_args__isset() : reqSeq(false), phones(false) {}
  bool reqSeq :1;
  bool phones :1;
} _TalkService_findAndAddContactsByPhone_args__isset;

class TalkService_findAndAddContactsByPhone_args {
 public:

  TalkService_findAndAddContactsByPhone_args(const TalkService_findAndAddContactsByPhone_args&);
  TalkService_findAndAddContactsByPhone_args& operator=(const TalkService_findAndAddContactsByPhone_args&);
  TalkService_findAndAddContactsByPhone_args() : reqSeq(0) {
  }

  virtual ~TalkService_findAndAddContactsByPhone_args() throw();
  int32_t reqSeq;
  std::set<std::string>  phones;

  _TalkService_findAndAddContactsByPhone_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_phones(const std::set<std::string> & val);

  bool operator == (const TalkService_findAndAddContactsByPhone_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(phones == rhs.phones))
      return false;
    return true;
  }
  bool operator != (const TalkService_findAndAddContactsByPhone_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_findAndAddContactsByPhone_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_findAndAddContactsByPhone_pargs {
 public:


  virtual ~TalkService_findAndAddContactsByPhone_pargs() throw();
  const int32_t* reqSeq;
  const std::set<std::string> * phones;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_findAndAddContactsByPhone_result__isset {
  _TalkService_findAndAddContactsByPhone_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_findAndAddContactsByPhone_result__isset;

class TalkService_findAndAddContactsByPhone_result {
 public:

  TalkService_findAndAddContactsByPhone_result(const TalkService_findAndAddContactsByPhone_result&);
  TalkService_findAndAddContactsByPhone_result& operator=(const TalkService_findAndAddContactsByPhone_result&);
  TalkService_findAndAddContactsByPhone_result() {
  }

  virtual ~TalkService_findAndAddContactsByPhone_result() throw();
  std::map<std::string, Contact>  success;
  TalkException e;

  _TalkService_findAndAddContactsByPhone_result__isset __isset;

  void __set_success(const std::map<std::string, Contact> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_findAndAddContactsByPhone_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_findAndAddContactsByPhone_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_findAndAddContactsByPhone_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_findAndAddContactsByPhone_presult__isset {
  _TalkService_findAndAddContactsByPhone_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_findAndAddContactsByPhone_presult__isset;

class TalkService_findAndAddContactsByPhone_presult {
 public:


  virtual ~TalkService_findAndAddContactsByPhone_presult() throw();
  std::map<std::string, Contact> * success;
  TalkException e;

  _TalkService_findAndAddContactsByPhone_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getFriendRequests_args__isset {
  _TalkService_getFriendRequests_args__isset() : direction(false), lastSeenSeqId(false) {}
  bool direction :1;
  bool lastSeenSeqId :1;
} _TalkService_getFriendRequests_args__isset;

class TalkService_getFriendRequests_args {
 public:

  TalkService_getFriendRequests_args(const TalkService_getFriendRequests_args&);
  TalkService_getFriendRequests_args& operator=(const TalkService_getFriendRequests_args&);
  TalkService_getFriendRequests_args() : direction((FriendRequestDirection::type)0), lastSeenSeqId(0) {
  }

  virtual ~TalkService_getFriendRequests_args() throw();
  FriendRequestDirection::type direction;
  int64_t lastSeenSeqId;

  _TalkService_getFriendRequests_args__isset __isset;

  void __set_direction(const FriendRequestDirection::type val);

  void __set_lastSeenSeqId(const int64_t val);

  bool operator == (const TalkService_getFriendRequests_args & rhs) const
  {
    if (!(direction == rhs.direction))
      return false;
    if (!(lastSeenSeqId == rhs.lastSeenSeqId))
      return false;
    return true;
  }
  bool operator != (const TalkService_getFriendRequests_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getFriendRequests_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getFriendRequests_pargs {
 public:


  virtual ~TalkService_getFriendRequests_pargs() throw();
  const FriendRequestDirection::type* direction;
  const int64_t* lastSeenSeqId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getFriendRequests_result__isset {
  _TalkService_getFriendRequests_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getFriendRequests_result__isset;

class TalkService_getFriendRequests_result {
 public:

  TalkService_getFriendRequests_result(const TalkService_getFriendRequests_result&);
  TalkService_getFriendRequests_result& operator=(const TalkService_getFriendRequests_result&);
  TalkService_getFriendRequests_result() {
  }

  virtual ~TalkService_getFriendRequests_result() throw();
  std::vector<FriendRequest>  success;
  TalkException e;

  _TalkService_getFriendRequests_result__isset __isset;

  void __set_success(const std::vector<FriendRequest> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getFriendRequests_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getFriendRequests_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getFriendRequests_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getFriendRequests_presult__isset {
  _TalkService_getFriendRequests_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getFriendRequests_presult__isset;

class TalkService_getFriendRequests_presult {
 public:


  virtual ~TalkService_getFriendRequests_presult() throw();
  std::vector<FriendRequest> * success;
  TalkException e;

  _TalkService_getFriendRequests_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_removeFriendRequest_args__isset {
  _TalkService_removeFriendRequest_args__isset() : direction(false), midOrEMid(false) {}
  bool direction :1;
  bool midOrEMid :1;
} _TalkService_removeFriendRequest_args__isset;

class TalkService_removeFriendRequest_args {
 public:

  TalkService_removeFriendRequest_args(const TalkService_removeFriendRequest_args&);
  TalkService_removeFriendRequest_args& operator=(const TalkService_removeFriendRequest_args&);
  TalkService_removeFriendRequest_args() : direction((FriendRequestDirection::type)0), midOrEMid() {
  }

  virtual ~TalkService_removeFriendRequest_args() throw();
  FriendRequestDirection::type direction;
  std::string midOrEMid;

  _TalkService_removeFriendRequest_args__isset __isset;

  void __set_direction(const FriendRequestDirection::type val);

  void __set_midOrEMid(const std::string& val);

  bool operator == (const TalkService_removeFriendRequest_args & rhs) const
  {
    if (!(direction == rhs.direction))
      return false;
    if (!(midOrEMid == rhs.midOrEMid))
      return false;
    return true;
  }
  bool operator != (const TalkService_removeFriendRequest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_removeFriendRequest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_removeFriendRequest_pargs {
 public:


  virtual ~TalkService_removeFriendRequest_pargs() throw();
  const FriendRequestDirection::type* direction;
  const std::string* midOrEMid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_removeFriendRequest_result__isset {
  _TalkService_removeFriendRequest_result__isset() : e(false) {}
  bool e :1;
} _TalkService_removeFriendRequest_result__isset;

class TalkService_removeFriendRequest_result {
 public:

  TalkService_removeFriendRequest_result(const TalkService_removeFriendRequest_result&);
  TalkService_removeFriendRequest_result& operator=(const TalkService_removeFriendRequest_result&);
  TalkService_removeFriendRequest_result() {
  }

  virtual ~TalkService_removeFriendRequest_result() throw();
  TalkException e;

  _TalkService_removeFriendRequest_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_removeFriendRequest_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_removeFriendRequest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_removeFriendRequest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_removeFriendRequest_presult__isset {
  _TalkService_removeFriendRequest_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_removeFriendRequest_presult__isset;

class TalkService_removeFriendRequest_presult {
 public:


  virtual ~TalkService_removeFriendRequest_presult() throw();
  TalkException e;

  _TalkService_removeFriendRequest_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_findAndAddContactsByUserid_args__isset {
  _TalkService_findAndAddContactsByUserid_args__isset() : reqSeq(false), userid(false) {}
  bool reqSeq :1;
  bool userid :1;
} _TalkService_findAndAddContactsByUserid_args__isset;

class TalkService_findAndAddContactsByUserid_args {
 public:

  TalkService_findAndAddContactsByUserid_args(const TalkService_findAndAddContactsByUserid_args&);
  TalkService_findAndAddContactsByUserid_args& operator=(const TalkService_findAndAddContactsByUserid_args&);
  TalkService_findAndAddContactsByUserid_args() : reqSeq(0), userid() {
  }

  virtual ~TalkService_findAndAddContactsByUserid_args() throw();
  int32_t reqSeq;
  std::string userid;

  _TalkService_findAndAddContactsByUserid_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_userid(const std::string& val);

  bool operator == (const TalkService_findAndAddContactsByUserid_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(userid == rhs.userid))
      return false;
    return true;
  }
  bool operator != (const TalkService_findAndAddContactsByUserid_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_findAndAddContactsByUserid_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_findAndAddContactsByUserid_pargs {
 public:


  virtual ~TalkService_findAndAddContactsByUserid_pargs() throw();
  const int32_t* reqSeq;
  const std::string* userid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_findAndAddContactsByUserid_result__isset {
  _TalkService_findAndAddContactsByUserid_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_findAndAddContactsByUserid_result__isset;

class TalkService_findAndAddContactsByUserid_result {
 public:

  TalkService_findAndAddContactsByUserid_result(const TalkService_findAndAddContactsByUserid_result&);
  TalkService_findAndAddContactsByUserid_result& operator=(const TalkService_findAndAddContactsByUserid_result&);
  TalkService_findAndAddContactsByUserid_result() {
  }

  virtual ~TalkService_findAndAddContactsByUserid_result() throw();
  std::map<std::string, Contact>  success;
  TalkException e;

  _TalkService_findAndAddContactsByUserid_result__isset __isset;

  void __set_success(const std::map<std::string, Contact> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_findAndAddContactsByUserid_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_findAndAddContactsByUserid_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_findAndAddContactsByUserid_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_findAndAddContactsByUserid_presult__isset {
  _TalkService_findAndAddContactsByUserid_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_findAndAddContactsByUserid_presult__isset;

class TalkService_findAndAddContactsByUserid_presult {
 public:


  virtual ~TalkService_findAndAddContactsByUserid_presult() throw();
  std::map<std::string, Contact> * success;
  TalkException e;

  _TalkService_findAndAddContactsByUserid_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_findContactByUserid_args__isset {
  _TalkService_findContactByUserid_args__isset() : userid(false) {}
  bool userid :1;
} _TalkService_findContactByUserid_args__isset;

class TalkService_findContactByUserid_args {
 public:

  TalkService_findContactByUserid_args(const TalkService_findContactByUserid_args&);
  TalkService_findContactByUserid_args& operator=(const TalkService_findContactByUserid_args&);
  TalkService_findContactByUserid_args() : userid() {
  }

  virtual ~TalkService_findContactByUserid_args() throw();
  std::string userid;

  _TalkService_findContactByUserid_args__isset __isset;

  void __set_userid(const std::string& val);

  bool operator == (const TalkService_findContactByUserid_args & rhs) const
  {
    if (!(userid == rhs.userid))
      return false;
    return true;
  }
  bool operator != (const TalkService_findContactByUserid_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_findContactByUserid_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_findContactByUserid_pargs {
 public:


  virtual ~TalkService_findContactByUserid_pargs() throw();
  const std::string* userid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_findContactByUserid_result__isset {
  _TalkService_findContactByUserid_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_findContactByUserid_result__isset;

class TalkService_findContactByUserid_result {
 public:

  TalkService_findContactByUserid_result(const TalkService_findContactByUserid_result&);
  TalkService_findContactByUserid_result& operator=(const TalkService_findContactByUserid_result&);
  TalkService_findContactByUserid_result() {
  }

  virtual ~TalkService_findContactByUserid_result() throw();
  Contact success;
  TalkException e;

  _TalkService_findContactByUserid_result__isset __isset;

  void __set_success(const Contact& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_findContactByUserid_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_findContactByUserid_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_findContactByUserid_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_findContactByUserid_presult__isset {
  _TalkService_findContactByUserid_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_findContactByUserid_presult__isset;

class TalkService_findContactByUserid_presult {
 public:


  virtual ~TalkService_findContactByUserid_presult() throw();
  Contact* success;
  TalkException e;

  _TalkService_findContactByUserid_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_findContactByUserTicket_args__isset {
  _TalkService_findContactByUserTicket_args__isset() : ticketIdWithTag(false) {}
  bool ticketIdWithTag :1;
} _TalkService_findContactByUserTicket_args__isset;

class TalkService_findContactByUserTicket_args {
 public:

  TalkService_findContactByUserTicket_args(const TalkService_findContactByUserTicket_args&);
  TalkService_findContactByUserTicket_args& operator=(const TalkService_findContactByUserTicket_args&);
  TalkService_findContactByUserTicket_args() : ticketIdWithTag() {
  }

  virtual ~TalkService_findContactByUserTicket_args() throw();
  std::string ticketIdWithTag;

  _TalkService_findContactByUserTicket_args__isset __isset;

  void __set_ticketIdWithTag(const std::string& val);

  bool operator == (const TalkService_findContactByUserTicket_args & rhs) const
  {
    if (!(ticketIdWithTag == rhs.ticketIdWithTag))
      return false;
    return true;
  }
  bool operator != (const TalkService_findContactByUserTicket_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_findContactByUserTicket_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_findContactByUserTicket_pargs {
 public:


  virtual ~TalkService_findContactByUserTicket_pargs() throw();
  const std::string* ticketIdWithTag;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_findContactByUserTicket_result__isset {
  _TalkService_findContactByUserTicket_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_findContactByUserTicket_result__isset;

class TalkService_findContactByUserTicket_result {
 public:

  TalkService_findContactByUserTicket_result(const TalkService_findContactByUserTicket_result&);
  TalkService_findContactByUserTicket_result& operator=(const TalkService_findContactByUserTicket_result&);
  TalkService_findContactByUserTicket_result() {
  }

  virtual ~TalkService_findContactByUserTicket_result() throw();
  Contact success;
  TalkException e;

  _TalkService_findContactByUserTicket_result__isset __isset;

  void __set_success(const Contact& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_findContactByUserTicket_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_findContactByUserTicket_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_findContactByUserTicket_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_findContactByUserTicket_presult__isset {
  _TalkService_findContactByUserTicket_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_findContactByUserTicket_presult__isset;

class TalkService_findContactByUserTicket_presult {
 public:


  virtual ~TalkService_findContactByUserTicket_presult() throw();
  Contact* success;
  TalkException e;

  _TalkService_findContactByUserTicket_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_findContactsByEmail_args__isset {
  _TalkService_findContactsByEmail_args__isset() : emails(false) {}
  bool emails :1;
} _TalkService_findContactsByEmail_args__isset;

class TalkService_findContactsByEmail_args {
 public:

  TalkService_findContactsByEmail_args(const TalkService_findContactsByEmail_args&);
  TalkService_findContactsByEmail_args& operator=(const TalkService_findContactsByEmail_args&);
  TalkService_findContactsByEmail_args() {
  }

  virtual ~TalkService_findContactsByEmail_args() throw();
  std::set<std::string>  emails;

  _TalkService_findContactsByEmail_args__isset __isset;

  void __set_emails(const std::set<std::string> & val);

  bool operator == (const TalkService_findContactsByEmail_args & rhs) const
  {
    if (!(emails == rhs.emails))
      return false;
    return true;
  }
  bool operator != (const TalkService_findContactsByEmail_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_findContactsByEmail_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_findContactsByEmail_pargs {
 public:


  virtual ~TalkService_findContactsByEmail_pargs() throw();
  const std::set<std::string> * emails;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_findContactsByEmail_result__isset {
  _TalkService_findContactsByEmail_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_findContactsByEmail_result__isset;

class TalkService_findContactsByEmail_result {
 public:

  TalkService_findContactsByEmail_result(const TalkService_findContactsByEmail_result&);
  TalkService_findContactsByEmail_result& operator=(const TalkService_findContactsByEmail_result&);
  TalkService_findContactsByEmail_result() {
  }

  virtual ~TalkService_findContactsByEmail_result() throw();
  std::map<std::string, Contact>  success;
  TalkException e;

  _TalkService_findContactsByEmail_result__isset __isset;

  void __set_success(const std::map<std::string, Contact> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_findContactsByEmail_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_findContactsByEmail_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_findContactsByEmail_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_findContactsByEmail_presult__isset {
  _TalkService_findContactsByEmail_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_findContactsByEmail_presult__isset;

class TalkService_findContactsByEmail_presult {
 public:


  virtual ~TalkService_findContactsByEmail_presult() throw();
  std::map<std::string, Contact> * success;
  TalkException e;

  _TalkService_findContactsByEmail_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_findContactsByPhone_args__isset {
  _TalkService_findContactsByPhone_args__isset() : phones(false) {}
  bool phones :1;
} _TalkService_findContactsByPhone_args__isset;

class TalkService_findContactsByPhone_args {
 public:

  TalkService_findContactsByPhone_args(const TalkService_findContactsByPhone_args&);
  TalkService_findContactsByPhone_args& operator=(const TalkService_findContactsByPhone_args&);
  TalkService_findContactsByPhone_args() {
  }

  virtual ~TalkService_findContactsByPhone_args() throw();
  std::set<std::string>  phones;

  _TalkService_findContactsByPhone_args__isset __isset;

  void __set_phones(const std::set<std::string> & val);

  bool operator == (const TalkService_findContactsByPhone_args & rhs) const
  {
    if (!(phones == rhs.phones))
      return false;
    return true;
  }
  bool operator != (const TalkService_findContactsByPhone_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_findContactsByPhone_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_findContactsByPhone_pargs {
 public:


  virtual ~TalkService_findContactsByPhone_pargs() throw();
  const std::set<std::string> * phones;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_findContactsByPhone_result__isset {
  _TalkService_findContactsByPhone_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_findContactsByPhone_result__isset;

class TalkService_findContactsByPhone_result {
 public:

  TalkService_findContactsByPhone_result(const TalkService_findContactsByPhone_result&);
  TalkService_findContactsByPhone_result& operator=(const TalkService_findContactsByPhone_result&);
  TalkService_findContactsByPhone_result() {
  }

  virtual ~TalkService_findContactsByPhone_result() throw();
  std::map<std::string, Contact>  success;
  TalkException e;

  _TalkService_findContactsByPhone_result__isset __isset;

  void __set_success(const std::map<std::string, Contact> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_findContactsByPhone_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_findContactsByPhone_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_findContactsByPhone_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_findContactsByPhone_presult__isset {
  _TalkService_findContactsByPhone_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_findContactsByPhone_presult__isset;

class TalkService_findContactsByPhone_presult {
 public:


  virtual ~TalkService_findContactsByPhone_presult() throw();
  std::map<std::string, Contact> * success;
  TalkException e;

  _TalkService_findContactsByPhone_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_findSnsIdUserStatus_args__isset {
  _TalkService_findSnsIdUserStatus_args__isset() : snsIdType(false), snsAccessToken(false), udidHash(false) {}
  bool snsIdType :1;
  bool snsAccessToken :1;
  bool udidHash :1;
} _TalkService_findSnsIdUserStatus_args__isset;

class TalkService_findSnsIdUserStatus_args {
 public:

  TalkService_findSnsIdUserStatus_args(const TalkService_findSnsIdUserStatus_args&);
  TalkService_findSnsIdUserStatus_args& operator=(const TalkService_findSnsIdUserStatus_args&);
  TalkService_findSnsIdUserStatus_args() : snsIdType((SnsIdType::type)0), snsAccessToken(), udidHash() {
  }

  virtual ~TalkService_findSnsIdUserStatus_args() throw();
  SnsIdType::type snsIdType;
  std::string snsAccessToken;
  std::string udidHash;

  _TalkService_findSnsIdUserStatus_args__isset __isset;

  void __set_snsIdType(const SnsIdType::type val);

  void __set_snsAccessToken(const std::string& val);

  void __set_udidHash(const std::string& val);

  bool operator == (const TalkService_findSnsIdUserStatus_args & rhs) const
  {
    if (!(snsIdType == rhs.snsIdType))
      return false;
    if (!(snsAccessToken == rhs.snsAccessToken))
      return false;
    if (!(udidHash == rhs.udidHash))
      return false;
    return true;
  }
  bool operator != (const TalkService_findSnsIdUserStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_findSnsIdUserStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_findSnsIdUserStatus_pargs {
 public:


  virtual ~TalkService_findSnsIdUserStatus_pargs() throw();
  const SnsIdType::type* snsIdType;
  const std::string* snsAccessToken;
  const std::string* udidHash;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_findSnsIdUserStatus_result__isset {
  _TalkService_findSnsIdUserStatus_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_findSnsIdUserStatus_result__isset;

class TalkService_findSnsIdUserStatus_result {
 public:

  TalkService_findSnsIdUserStatus_result(const TalkService_findSnsIdUserStatus_result&);
  TalkService_findSnsIdUserStatus_result& operator=(const TalkService_findSnsIdUserStatus_result&);
  TalkService_findSnsIdUserStatus_result() {
  }

  virtual ~TalkService_findSnsIdUserStatus_result() throw();
  SnsIdUserStatus success;
  TalkException e;

  _TalkService_findSnsIdUserStatus_result__isset __isset;

  void __set_success(const SnsIdUserStatus& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_findSnsIdUserStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_findSnsIdUserStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_findSnsIdUserStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_findSnsIdUserStatus_presult__isset {
  _TalkService_findSnsIdUserStatus_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_findSnsIdUserStatus_presult__isset;

class TalkService_findSnsIdUserStatus_presult {
 public:


  virtual ~TalkService_findSnsIdUserStatus_presult() throw();
  SnsIdUserStatus* success;
  TalkException e;

  _TalkService_findSnsIdUserStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_finishUpdateVerification_args__isset {
  _TalkService_finishUpdateVerification_args__isset() : sessionId(false) {}
  bool sessionId :1;
} _TalkService_finishUpdateVerification_args__isset;

class TalkService_finishUpdateVerification_args {
 public:

  TalkService_finishUpdateVerification_args(const TalkService_finishUpdateVerification_args&);
  TalkService_finishUpdateVerification_args& operator=(const TalkService_finishUpdateVerification_args&);
  TalkService_finishUpdateVerification_args() : sessionId() {
  }

  virtual ~TalkService_finishUpdateVerification_args() throw();
  std::string sessionId;

  _TalkService_finishUpdateVerification_args__isset __isset;

  void __set_sessionId(const std::string& val);

  bool operator == (const TalkService_finishUpdateVerification_args & rhs) const
  {
    if (!(sessionId == rhs.sessionId))
      return false;
    return true;
  }
  bool operator != (const TalkService_finishUpdateVerification_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_finishUpdateVerification_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_finishUpdateVerification_pargs {
 public:


  virtual ~TalkService_finishUpdateVerification_pargs() throw();
  const std::string* sessionId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_finishUpdateVerification_result__isset {
  _TalkService_finishUpdateVerification_result__isset() : e(false) {}
  bool e :1;
} _TalkService_finishUpdateVerification_result__isset;

class TalkService_finishUpdateVerification_result {
 public:

  TalkService_finishUpdateVerification_result(const TalkService_finishUpdateVerification_result&);
  TalkService_finishUpdateVerification_result& operator=(const TalkService_finishUpdateVerification_result&);
  TalkService_finishUpdateVerification_result() {
  }

  virtual ~TalkService_finishUpdateVerification_result() throw();
  TalkException e;

  _TalkService_finishUpdateVerification_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_finishUpdateVerification_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_finishUpdateVerification_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_finishUpdateVerification_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_finishUpdateVerification_presult__isset {
  _TalkService_finishUpdateVerification_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_finishUpdateVerification_presult__isset;

class TalkService_finishUpdateVerification_presult {
 public:


  virtual ~TalkService_finishUpdateVerification_presult() throw();
  TalkException e;

  _TalkService_finishUpdateVerification_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_generateUserTicket_args__isset {
  _TalkService_generateUserTicket_args__isset() : expirationTime(false), maxUseCount(false) {}
  bool expirationTime :1;
  bool maxUseCount :1;
} _TalkService_generateUserTicket_args__isset;

class TalkService_generateUserTicket_args {
 public:

  TalkService_generateUserTicket_args(const TalkService_generateUserTicket_args&);
  TalkService_generateUserTicket_args& operator=(const TalkService_generateUserTicket_args&);
  TalkService_generateUserTicket_args() : expirationTime(0), maxUseCount(0) {
  }

  virtual ~TalkService_generateUserTicket_args() throw();
  int64_t expirationTime;
  int32_t maxUseCount;

  _TalkService_generateUserTicket_args__isset __isset;

  void __set_expirationTime(const int64_t val);

  void __set_maxUseCount(const int32_t val);

  bool operator == (const TalkService_generateUserTicket_args & rhs) const
  {
    if (!(expirationTime == rhs.expirationTime))
      return false;
    if (!(maxUseCount == rhs.maxUseCount))
      return false;
    return true;
  }
  bool operator != (const TalkService_generateUserTicket_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_generateUserTicket_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_generateUserTicket_pargs {
 public:


  virtual ~TalkService_generateUserTicket_pargs() throw();
  const int64_t* expirationTime;
  const int32_t* maxUseCount;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_generateUserTicket_result__isset {
  _TalkService_generateUserTicket_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_generateUserTicket_result__isset;

class TalkService_generateUserTicket_result {
 public:

  TalkService_generateUserTicket_result(const TalkService_generateUserTicket_result&);
  TalkService_generateUserTicket_result& operator=(const TalkService_generateUserTicket_result&);
  TalkService_generateUserTicket_result() {
  }

  virtual ~TalkService_generateUserTicket_result() throw();
  Ticket success;
  TalkException e;

  _TalkService_generateUserTicket_result__isset __isset;

  void __set_success(const Ticket& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_generateUserTicket_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_generateUserTicket_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_generateUserTicket_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_generateUserTicket_presult__isset {
  _TalkService_generateUserTicket_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_generateUserTicket_presult__isset;

class TalkService_generateUserTicket_presult {
 public:


  virtual ~TalkService_generateUserTicket_presult() throw();
  Ticket* success;
  TalkException e;

  _TalkService_generateUserTicket_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_destroyMessage_args__isset {
  _TalkService_destroyMessage_args__isset() : seq(false), chatId(false), messageId(false), sessionId(false) {}
  bool seq :1;
  bool chatId :1;
  bool messageId :1;
  bool sessionId :1;
} _TalkService_destroyMessage_args__isset;

class TalkService_destroyMessage_args {
 public:

  TalkService_destroyMessage_args(const TalkService_destroyMessage_args&);
  TalkService_destroyMessage_args& operator=(const TalkService_destroyMessage_args&);
  TalkService_destroyMessage_args() : seq(0), chatId(), messageId(), sessionId(0) {
  }

  virtual ~TalkService_destroyMessage_args() throw();
  int32_t seq;
  std::string chatId;
  std::string messageId;
  int32_t sessionId;

  _TalkService_destroyMessage_args__isset __isset;

  void __set_seq(const int32_t val);

  void __set_chatId(const std::string& val);

  void __set_messageId(const std::string& val);

  void __set_sessionId(const int32_t val);

  bool operator == (const TalkService_destroyMessage_args & rhs) const
  {
    if (!(seq == rhs.seq))
      return false;
    if (!(chatId == rhs.chatId))
      return false;
    if (!(messageId == rhs.messageId))
      return false;
    if (!(sessionId == rhs.sessionId))
      return false;
    return true;
  }
  bool operator != (const TalkService_destroyMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_destroyMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_destroyMessage_pargs {
 public:


  virtual ~TalkService_destroyMessage_pargs() throw();
  const int32_t* seq;
  const std::string* chatId;
  const std::string* messageId;
  const int32_t* sessionId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_destroyMessage_result__isset {
  _TalkService_destroyMessage_result__isset() : e(false) {}
  bool e :1;
} _TalkService_destroyMessage_result__isset;

class TalkService_destroyMessage_result {
 public:

  TalkService_destroyMessage_result(const TalkService_destroyMessage_result&);
  TalkService_destroyMessage_result& operator=(const TalkService_destroyMessage_result&);
  TalkService_destroyMessage_result() {
  }

  virtual ~TalkService_destroyMessage_result() throw();
  TalkException e;

  _TalkService_destroyMessage_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_destroyMessage_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_destroyMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_destroyMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_destroyMessage_presult__isset {
  _TalkService_destroyMessage_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_destroyMessage_presult__isset;

class TalkService_destroyMessage_presult {
 public:


  virtual ~TalkService_destroyMessage_presult() throw();
  TalkException e;

  _TalkService_destroyMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getAcceptedProximityMatches_args__isset {
  _TalkService_getAcceptedProximityMatches_args__isset() : sessionId(false) {}
  bool sessionId :1;
} _TalkService_getAcceptedProximityMatches_args__isset;

class TalkService_getAcceptedProximityMatches_args {
 public:

  TalkService_getAcceptedProximityMatches_args(const TalkService_getAcceptedProximityMatches_args&);
  TalkService_getAcceptedProximityMatches_args& operator=(const TalkService_getAcceptedProximityMatches_args&);
  TalkService_getAcceptedProximityMatches_args() : sessionId() {
  }

  virtual ~TalkService_getAcceptedProximityMatches_args() throw();
  std::string sessionId;

  _TalkService_getAcceptedProximityMatches_args__isset __isset;

  void __set_sessionId(const std::string& val);

  bool operator == (const TalkService_getAcceptedProximityMatches_args & rhs) const
  {
    if (!(sessionId == rhs.sessionId))
      return false;
    return true;
  }
  bool operator != (const TalkService_getAcceptedProximityMatches_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getAcceptedProximityMatches_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getAcceptedProximityMatches_pargs {
 public:


  virtual ~TalkService_getAcceptedProximityMatches_pargs() throw();
  const std::string* sessionId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getAcceptedProximityMatches_result__isset {
  _TalkService_getAcceptedProximityMatches_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getAcceptedProximityMatches_result__isset;

class TalkService_getAcceptedProximityMatches_result {
 public:

  TalkService_getAcceptedProximityMatches_result(const TalkService_getAcceptedProximityMatches_result&);
  TalkService_getAcceptedProximityMatches_result& operator=(const TalkService_getAcceptedProximityMatches_result&);
  TalkService_getAcceptedProximityMatches_result() {
  }

  virtual ~TalkService_getAcceptedProximityMatches_result() throw();
  std::set<std::string>  success;
  TalkException e;

  _TalkService_getAcceptedProximityMatches_result__isset __isset;

  void __set_success(const std::set<std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getAcceptedProximityMatches_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getAcceptedProximityMatches_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getAcceptedProximityMatches_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getAcceptedProximityMatches_presult__isset {
  _TalkService_getAcceptedProximityMatches_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getAcceptedProximityMatches_presult__isset;

class TalkService_getAcceptedProximityMatches_presult {
 public:


  virtual ~TalkService_getAcceptedProximityMatches_presult() throw();
  std::set<std::string> * success;
  TalkException e;

  _TalkService_getAcceptedProximityMatches_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TalkService_getActiveBuddySubscriberIds_args {
 public:

  TalkService_getActiveBuddySubscriberIds_args(const TalkService_getActiveBuddySubscriberIds_args&);
  TalkService_getActiveBuddySubscriberIds_args& operator=(const TalkService_getActiveBuddySubscriberIds_args&);
  TalkService_getActiveBuddySubscriberIds_args() {
  }

  virtual ~TalkService_getActiveBuddySubscriberIds_args() throw();

  bool operator == (const TalkService_getActiveBuddySubscriberIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TalkService_getActiveBuddySubscriberIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getActiveBuddySubscriberIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getActiveBuddySubscriberIds_pargs {
 public:


  virtual ~TalkService_getActiveBuddySubscriberIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getActiveBuddySubscriberIds_result__isset {
  _TalkService_getActiveBuddySubscriberIds_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getActiveBuddySubscriberIds_result__isset;

class TalkService_getActiveBuddySubscriberIds_result {
 public:

  TalkService_getActiveBuddySubscriberIds_result(const TalkService_getActiveBuddySubscriberIds_result&);
  TalkService_getActiveBuddySubscriberIds_result& operator=(const TalkService_getActiveBuddySubscriberIds_result&);
  TalkService_getActiveBuddySubscriberIds_result() {
  }

  virtual ~TalkService_getActiveBuddySubscriberIds_result() throw();
  std::vector<std::string>  success;
  TalkException e;

  _TalkService_getActiveBuddySubscriberIds_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getActiveBuddySubscriberIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getActiveBuddySubscriberIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getActiveBuddySubscriberIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getActiveBuddySubscriberIds_presult__isset {
  _TalkService_getActiveBuddySubscriberIds_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getActiveBuddySubscriberIds_presult__isset;

class TalkService_getActiveBuddySubscriberIds_presult {
 public:


  virtual ~TalkService_getActiveBuddySubscriberIds_presult() throw();
  std::vector<std::string> * success;
  TalkException e;

  _TalkService_getActiveBuddySubscriberIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TalkService_getAllContactIds_args {
 public:

  TalkService_getAllContactIds_args(const TalkService_getAllContactIds_args&);
  TalkService_getAllContactIds_args& operator=(const TalkService_getAllContactIds_args&);
  TalkService_getAllContactIds_args() {
  }

  virtual ~TalkService_getAllContactIds_args() throw();

  bool operator == (const TalkService_getAllContactIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TalkService_getAllContactIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getAllContactIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getAllContactIds_pargs {
 public:


  virtual ~TalkService_getAllContactIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getAllContactIds_result__isset {
  _TalkService_getAllContactIds_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getAllContactIds_result__isset;

class TalkService_getAllContactIds_result {
 public:

  TalkService_getAllContactIds_result(const TalkService_getAllContactIds_result&);
  TalkService_getAllContactIds_result& operator=(const TalkService_getAllContactIds_result&);
  TalkService_getAllContactIds_result() {
  }

  virtual ~TalkService_getAllContactIds_result() throw();
  std::vector<std::string>  success;
  TalkException e;

  _TalkService_getAllContactIds_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getAllContactIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getAllContactIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getAllContactIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getAllContactIds_presult__isset {
  _TalkService_getAllContactIds_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getAllContactIds_presult__isset;

class TalkService_getAllContactIds_presult {
 public:


  virtual ~TalkService_getAllContactIds_presult() throw();
  std::vector<std::string> * success;
  TalkException e;

  _TalkService_getAllContactIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getAuthQrcode_args__isset {
  _TalkService_getAuthQrcode_args__isset() : keepLoggedIn(false), systemName(false) {}
  bool keepLoggedIn :1;
  bool systemName :1;
} _TalkService_getAuthQrcode_args__isset;

class TalkService_getAuthQrcode_args {
 public:

  TalkService_getAuthQrcode_args(const TalkService_getAuthQrcode_args&);
  TalkService_getAuthQrcode_args& operator=(const TalkService_getAuthQrcode_args&);
  TalkService_getAuthQrcode_args() : keepLoggedIn(0), systemName() {
  }

  virtual ~TalkService_getAuthQrcode_args() throw();
  bool keepLoggedIn;
  std::string systemName;

  _TalkService_getAuthQrcode_args__isset __isset;

  void __set_keepLoggedIn(const bool val);

  void __set_systemName(const std::string& val);

  bool operator == (const TalkService_getAuthQrcode_args & rhs) const
  {
    if (!(keepLoggedIn == rhs.keepLoggedIn))
      return false;
    if (!(systemName == rhs.systemName))
      return false;
    return true;
  }
  bool operator != (const TalkService_getAuthQrcode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getAuthQrcode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getAuthQrcode_pargs {
 public:


  virtual ~TalkService_getAuthQrcode_pargs() throw();
  const bool* keepLoggedIn;
  const std::string* systemName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getAuthQrcode_result__isset {
  _TalkService_getAuthQrcode_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getAuthQrcode_result__isset;

class TalkService_getAuthQrcode_result {
 public:

  TalkService_getAuthQrcode_result(const TalkService_getAuthQrcode_result&);
  TalkService_getAuthQrcode_result& operator=(const TalkService_getAuthQrcode_result&);
  TalkService_getAuthQrcode_result() {
  }

  virtual ~TalkService_getAuthQrcode_result() throw();
  AuthQrcode success;
  TalkException e;

  _TalkService_getAuthQrcode_result__isset __isset;

  void __set_success(const AuthQrcode& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getAuthQrcode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getAuthQrcode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getAuthQrcode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getAuthQrcode_presult__isset {
  _TalkService_getAuthQrcode_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getAuthQrcode_presult__isset;

class TalkService_getAuthQrcode_presult {
 public:


  virtual ~TalkService_getAuthQrcode_presult() throw();
  AuthQrcode* success;
  TalkException e;

  _TalkService_getAuthQrcode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TalkService_getBlockedContactIds_args {
 public:

  TalkService_getBlockedContactIds_args(const TalkService_getBlockedContactIds_args&);
  TalkService_getBlockedContactIds_args& operator=(const TalkService_getBlockedContactIds_args&);
  TalkService_getBlockedContactIds_args() {
  }

  virtual ~TalkService_getBlockedContactIds_args() throw();

  bool operator == (const TalkService_getBlockedContactIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TalkService_getBlockedContactIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getBlockedContactIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getBlockedContactIds_pargs {
 public:


  virtual ~TalkService_getBlockedContactIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getBlockedContactIds_result__isset {
  _TalkService_getBlockedContactIds_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getBlockedContactIds_result__isset;

class TalkService_getBlockedContactIds_result {
 public:

  TalkService_getBlockedContactIds_result(const TalkService_getBlockedContactIds_result&);
  TalkService_getBlockedContactIds_result& operator=(const TalkService_getBlockedContactIds_result&);
  TalkService_getBlockedContactIds_result() {
  }

  virtual ~TalkService_getBlockedContactIds_result() throw();
  std::vector<std::string>  success;
  TalkException e;

  _TalkService_getBlockedContactIds_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getBlockedContactIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getBlockedContactIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getBlockedContactIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getBlockedContactIds_presult__isset {
  _TalkService_getBlockedContactIds_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getBlockedContactIds_presult__isset;

class TalkService_getBlockedContactIds_presult {
 public:


  virtual ~TalkService_getBlockedContactIds_presult() throw();
  std::vector<std::string> * success;
  TalkException e;

  _TalkService_getBlockedContactIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_registerWithPhoneNumber_args__isset {
  _TalkService_registerWithPhoneNumber_args__isset() : sessionId(false), migrationPincodeSessionId(false) {}
  bool sessionId :1;
  bool migrationPincodeSessionId :1;
} _TalkService_registerWithPhoneNumber_args__isset;

class TalkService_registerWithPhoneNumber_args {
 public:

  TalkService_registerWithPhoneNumber_args(const TalkService_registerWithPhoneNumber_args&);
  TalkService_registerWithPhoneNumber_args& operator=(const TalkService_registerWithPhoneNumber_args&);
  TalkService_registerWithPhoneNumber_args() : sessionId(), migrationPincodeSessionId() {
  }

  virtual ~TalkService_registerWithPhoneNumber_args() throw();
  std::string sessionId;
  std::string migrationPincodeSessionId;

  _TalkService_registerWithPhoneNumber_args__isset __isset;

  void __set_sessionId(const std::string& val);

  void __set_migrationPincodeSessionId(const std::string& val);

  bool operator == (const TalkService_registerWithPhoneNumber_args & rhs) const
  {
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(migrationPincodeSessionId == rhs.migrationPincodeSessionId))
      return false;
    return true;
  }
  bool operator != (const TalkService_registerWithPhoneNumber_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_registerWithPhoneNumber_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_registerWithPhoneNumber_pargs {
 public:


  virtual ~TalkService_registerWithPhoneNumber_pargs() throw();
  const std::string* sessionId;
  const std::string* migrationPincodeSessionId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_registerWithPhoneNumber_result__isset {
  _TalkService_registerWithPhoneNumber_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_registerWithPhoneNumber_result__isset;

class TalkService_registerWithPhoneNumber_result {
 public:

  TalkService_registerWithPhoneNumber_result(const TalkService_registerWithPhoneNumber_result&);
  TalkService_registerWithPhoneNumber_result& operator=(const TalkService_registerWithPhoneNumber_result&);
  TalkService_registerWithPhoneNumber_result() {
  }

  virtual ~TalkService_registerWithPhoneNumber_result() throw();
  RegisterWithPhoneNumberResult success;
  TalkException e;

  _TalkService_registerWithPhoneNumber_result__isset __isset;

  void __set_success(const RegisterWithPhoneNumberResult& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_registerWithPhoneNumber_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_registerWithPhoneNumber_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_registerWithPhoneNumber_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_registerWithPhoneNumber_presult__isset {
  _TalkService_registerWithPhoneNumber_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_registerWithPhoneNumber_presult__isset;

class TalkService_registerWithPhoneNumber_presult {
 public:


  virtual ~TalkService_registerWithPhoneNumber_presult() throw();
  RegisterWithPhoneNumberResult* success;
  TalkException e;

  _TalkService_registerWithPhoneNumber_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_registerWithPhoneNumberAndPassword_args__isset {
  _TalkService_registerWithPhoneNumberAndPassword_args__isset() : sessionId(false), keynm(false), encrypted(false) {}
  bool sessionId :1;
  bool keynm :1;
  bool encrypted :1;
} _TalkService_registerWithPhoneNumberAndPassword_args__isset;

class TalkService_registerWithPhoneNumberAndPassword_args {
 public:

  TalkService_registerWithPhoneNumberAndPassword_args(const TalkService_registerWithPhoneNumberAndPassword_args&);
  TalkService_registerWithPhoneNumberAndPassword_args& operator=(const TalkService_registerWithPhoneNumberAndPassword_args&);
  TalkService_registerWithPhoneNumberAndPassword_args() : sessionId(), keynm(), encrypted() {
  }

  virtual ~TalkService_registerWithPhoneNumberAndPassword_args() throw();
  std::string sessionId;
  std::string keynm;
  std::string encrypted;

  _TalkService_registerWithPhoneNumberAndPassword_args__isset __isset;

  void __set_sessionId(const std::string& val);

  void __set_keynm(const std::string& val);

  void __set_encrypted(const std::string& val);

  bool operator == (const TalkService_registerWithPhoneNumberAndPassword_args & rhs) const
  {
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(keynm == rhs.keynm))
      return false;
    if (!(encrypted == rhs.encrypted))
      return false;
    return true;
  }
  bool operator != (const TalkService_registerWithPhoneNumberAndPassword_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_registerWithPhoneNumberAndPassword_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_registerWithPhoneNumberAndPassword_pargs {
 public:


  virtual ~TalkService_registerWithPhoneNumberAndPassword_pargs() throw();
  const std::string* sessionId;
  const std::string* keynm;
  const std::string* encrypted;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_registerWithPhoneNumberAndPassword_result__isset {
  _TalkService_registerWithPhoneNumberAndPassword_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_registerWithPhoneNumberAndPassword_result__isset;

class TalkService_registerWithPhoneNumberAndPassword_result {
 public:

  TalkService_registerWithPhoneNumberAndPassword_result(const TalkService_registerWithPhoneNumberAndPassword_result&);
  TalkService_registerWithPhoneNumberAndPassword_result& operator=(const TalkService_registerWithPhoneNumberAndPassword_result&);
  TalkService_registerWithPhoneNumberAndPassword_result() {
  }

  virtual ~TalkService_registerWithPhoneNumberAndPassword_result() throw();
  RegisterWithPhoneNumberResult success;
  TalkException e;

  _TalkService_registerWithPhoneNumberAndPassword_result__isset __isset;

  void __set_success(const RegisterWithPhoneNumberResult& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_registerWithPhoneNumberAndPassword_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_registerWithPhoneNumberAndPassword_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_registerWithPhoneNumberAndPassword_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_registerWithPhoneNumberAndPassword_presult__isset {
  _TalkService_registerWithPhoneNumberAndPassword_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_registerWithPhoneNumberAndPassword_presult__isset;

class TalkService_registerWithPhoneNumberAndPassword_presult {
 public:


  virtual ~TalkService_registerWithPhoneNumberAndPassword_presult() throw();
  RegisterWithPhoneNumberResult* success;
  TalkException e;

  _TalkService_registerWithPhoneNumberAndPassword_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TalkService_getAnalyticsInfo_args {
 public:

  TalkService_getAnalyticsInfo_args(const TalkService_getAnalyticsInfo_args&);
  TalkService_getAnalyticsInfo_args& operator=(const TalkService_getAnalyticsInfo_args&);
  TalkService_getAnalyticsInfo_args() {
  }

  virtual ~TalkService_getAnalyticsInfo_args() throw();

  bool operator == (const TalkService_getAnalyticsInfo_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TalkService_getAnalyticsInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getAnalyticsInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getAnalyticsInfo_pargs {
 public:


  virtual ~TalkService_getAnalyticsInfo_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getAnalyticsInfo_result__isset {
  _TalkService_getAnalyticsInfo_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getAnalyticsInfo_result__isset;

class TalkService_getAnalyticsInfo_result {
 public:

  TalkService_getAnalyticsInfo_result(const TalkService_getAnalyticsInfo_result&);
  TalkService_getAnalyticsInfo_result& operator=(const TalkService_getAnalyticsInfo_result&);
  TalkService_getAnalyticsInfo_result() {
  }

  virtual ~TalkService_getAnalyticsInfo_result() throw();
  AnalyticsInfo success;
  TalkException e;

  _TalkService_getAnalyticsInfo_result__isset __isset;

  void __set_success(const AnalyticsInfo& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getAnalyticsInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getAnalyticsInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getAnalyticsInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getAnalyticsInfo_presult__isset {
  _TalkService_getAnalyticsInfo_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getAnalyticsInfo_presult__isset;

class TalkService_getAnalyticsInfo_presult {
 public:


  virtual ~TalkService_getAnalyticsInfo_presult() throw();
  AnalyticsInfo* success;
  TalkException e;

  _TalkService_getAnalyticsInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_reportClientStatistics_args__isset {
  _TalkService_reportClientStatistics_args__isset() : reqSeq(false), category(false), count(false) {}
  bool reqSeq :1;
  bool category :1;
  bool count :1;
} _TalkService_reportClientStatistics_args__isset;

class TalkService_reportClientStatistics_args {
 public:

  TalkService_reportClientStatistics_args(const TalkService_reportClientStatistics_args&);
  TalkService_reportClientStatistics_args& operator=(const TalkService_reportClientStatistics_args&);
  TalkService_reportClientStatistics_args() : reqSeq(0), category((ReportCategory::type)0), count(0) {
  }

  virtual ~TalkService_reportClientStatistics_args() throw();
  int32_t reqSeq;
  ReportCategory::type category;
  int32_t count;

  _TalkService_reportClientStatistics_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_category(const ReportCategory::type val);

  void __set_count(const int32_t val);

  bool operator == (const TalkService_reportClientStatistics_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(category == rhs.category))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const TalkService_reportClientStatistics_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_reportClientStatistics_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_reportClientStatistics_pargs {
 public:


  virtual ~TalkService_reportClientStatistics_pargs() throw();
  const int32_t* reqSeq;
  const ReportCategory::type* category;
  const int32_t* count;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_reportClientStatistics_result__isset {
  _TalkService_reportClientStatistics_result__isset() : e(false) {}
  bool e :1;
} _TalkService_reportClientStatistics_result__isset;

class TalkService_reportClientStatistics_result {
 public:

  TalkService_reportClientStatistics_result(const TalkService_reportClientStatistics_result&);
  TalkService_reportClientStatistics_result& operator=(const TalkService_reportClientStatistics_result&);
  TalkService_reportClientStatistics_result() {
  }

  virtual ~TalkService_reportClientStatistics_result() throw();
  TalkException e;

  _TalkService_reportClientStatistics_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_reportClientStatistics_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_reportClientStatistics_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_reportClientStatistics_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_reportClientStatistics_presult__isset {
  _TalkService_reportClientStatistics_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_reportClientStatistics_presult__isset;

class TalkService_reportClientStatistics_presult {
 public:


  virtual ~TalkService_reportClientStatistics_presult() throw();
  TalkException e;

  _TalkService_reportClientStatistics_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_verifyPhoneNumberForLogin_args__isset {
  _TalkService_verifyPhoneNumberForLogin_args__isset() : verifierFromPhone(false), pinCodeForPhone(false), verifierFromLogin(false) {}
  bool verifierFromPhone :1;
  bool pinCodeForPhone :1;
  bool verifierFromLogin :1;
} _TalkService_verifyPhoneNumberForLogin_args__isset;

class TalkService_verifyPhoneNumberForLogin_args {
 public:

  TalkService_verifyPhoneNumberForLogin_args(const TalkService_verifyPhoneNumberForLogin_args&);
  TalkService_verifyPhoneNumberForLogin_args& operator=(const TalkService_verifyPhoneNumberForLogin_args&);
  TalkService_verifyPhoneNumberForLogin_args() : verifierFromPhone(), pinCodeForPhone(), verifierFromLogin() {
  }

  virtual ~TalkService_verifyPhoneNumberForLogin_args() throw();
  std::string verifierFromPhone;
  std::string pinCodeForPhone;
  std::string verifierFromLogin;

  _TalkService_verifyPhoneNumberForLogin_args__isset __isset;

  void __set_verifierFromPhone(const std::string& val);

  void __set_pinCodeForPhone(const std::string& val);

  void __set_verifierFromLogin(const std::string& val);

  bool operator == (const TalkService_verifyPhoneNumberForLogin_args & rhs) const
  {
    if (!(verifierFromPhone == rhs.verifierFromPhone))
      return false;
    if (!(pinCodeForPhone == rhs.pinCodeForPhone))
      return false;
    if (!(verifierFromLogin == rhs.verifierFromLogin))
      return false;
    return true;
  }
  bool operator != (const TalkService_verifyPhoneNumberForLogin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_verifyPhoneNumberForLogin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_verifyPhoneNumberForLogin_pargs {
 public:


  virtual ~TalkService_verifyPhoneNumberForLogin_pargs() throw();
  const std::string* verifierFromPhone;
  const std::string* pinCodeForPhone;
  const std::string* verifierFromLogin;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_verifyPhoneNumberForLogin_result__isset {
  _TalkService_verifyPhoneNumberForLogin_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_verifyPhoneNumberForLogin_result__isset;

class TalkService_verifyPhoneNumberForLogin_result {
 public:

  TalkService_verifyPhoneNumberForLogin_result(const TalkService_verifyPhoneNumberForLogin_result&);
  TalkService_verifyPhoneNumberForLogin_result& operator=(const TalkService_verifyPhoneNumberForLogin_result&);
  TalkService_verifyPhoneNumberForLogin_result() : success() {
  }

  virtual ~TalkService_verifyPhoneNumberForLogin_result() throw();
  std::string success;
  TalkException e;

  _TalkService_verifyPhoneNumberForLogin_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_verifyPhoneNumberForLogin_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_verifyPhoneNumberForLogin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_verifyPhoneNumberForLogin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_verifyPhoneNumberForLogin_presult__isset {
  _TalkService_verifyPhoneNumberForLogin_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_verifyPhoneNumberForLogin_presult__isset;

class TalkService_verifyPhoneNumberForLogin_presult {
 public:


  virtual ~TalkService_verifyPhoneNumberForLogin_presult() throw();
  std::string* success;
  TalkException e;

  _TalkService_verifyPhoneNumberForLogin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_verifyPhoneNumber_args__isset {
  _TalkService_verifyPhoneNumber_args__isset() : sessionId(false), pinCode(false), udidHash(false), migrationPincodeSessionId(false), oldUdidHash(false) {}
  bool sessionId :1;
  bool pinCode :1;
  bool udidHash :1;
  bool migrationPincodeSessionId :1;
  bool oldUdidHash :1;
} _TalkService_verifyPhoneNumber_args__isset;

class TalkService_verifyPhoneNumber_args {
 public:

  TalkService_verifyPhoneNumber_args(const TalkService_verifyPhoneNumber_args&);
  TalkService_verifyPhoneNumber_args& operator=(const TalkService_verifyPhoneNumber_args&);
  TalkService_verifyPhoneNumber_args() : sessionId(), pinCode(), udidHash(), migrationPincodeSessionId(), oldUdidHash() {
  }

  virtual ~TalkService_verifyPhoneNumber_args() throw();
  std::string sessionId;
  std::string pinCode;
  std::string udidHash;
  std::string migrationPincodeSessionId;
  std::string oldUdidHash;

  _TalkService_verifyPhoneNumber_args__isset __isset;

  void __set_sessionId(const std::string& val);

  void __set_pinCode(const std::string& val);

  void __set_udidHash(const std::string& val);

  void __set_migrationPincodeSessionId(const std::string& val);

  void __set_oldUdidHash(const std::string& val);

  bool operator == (const TalkService_verifyPhoneNumber_args & rhs) const
  {
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(pinCode == rhs.pinCode))
      return false;
    if (!(udidHash == rhs.udidHash))
      return false;
    if (!(migrationPincodeSessionId == rhs.migrationPincodeSessionId))
      return false;
    if (!(oldUdidHash == rhs.oldUdidHash))
      return false;
    return true;
  }
  bool operator != (const TalkService_verifyPhoneNumber_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_verifyPhoneNumber_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_verifyPhoneNumber_pargs {
 public:


  virtual ~TalkService_verifyPhoneNumber_pargs() throw();
  const std::string* sessionId;
  const std::string* pinCode;
  const std::string* udidHash;
  const std::string* migrationPincodeSessionId;
  const std::string* oldUdidHash;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_verifyPhoneNumber_result__isset {
  _TalkService_verifyPhoneNumber_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_verifyPhoneNumber_result__isset;

class TalkService_verifyPhoneNumber_result {
 public:

  TalkService_verifyPhoneNumber_result(const TalkService_verifyPhoneNumber_result&);
  TalkService_verifyPhoneNumber_result& operator=(const TalkService_verifyPhoneNumber_result&);
  TalkService_verifyPhoneNumber_result() {
  }

  virtual ~TalkService_verifyPhoneNumber_result() throw();
  PhoneVerificationResult success;
  TalkException e;

  _TalkService_verifyPhoneNumber_result__isset __isset;

  void __set_success(const PhoneVerificationResult& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_verifyPhoneNumber_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_verifyPhoneNumber_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_verifyPhoneNumber_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_verifyPhoneNumber_presult__isset {
  _TalkService_verifyPhoneNumber_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_verifyPhoneNumber_presult__isset;

class TalkService_verifyPhoneNumber_presult {
 public:


  virtual ~TalkService_verifyPhoneNumber_presult() throw();
  PhoneVerificationResult* success;
  TalkException e;

  _TalkService_verifyPhoneNumber_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getBlockedContactIdsByRange_args__isset {
  _TalkService_getBlockedContactIdsByRange_args__isset() : start(false), count(false) {}
  bool start :1;
  bool count :1;
} _TalkService_getBlockedContactIdsByRange_args__isset;

class TalkService_getBlockedContactIdsByRange_args {
 public:

  TalkService_getBlockedContactIdsByRange_args(const TalkService_getBlockedContactIdsByRange_args&);
  TalkService_getBlockedContactIdsByRange_args& operator=(const TalkService_getBlockedContactIdsByRange_args&);
  TalkService_getBlockedContactIdsByRange_args() : start(0), count(0) {
  }

  virtual ~TalkService_getBlockedContactIdsByRange_args() throw();
  int32_t start;
  int32_t count;

  _TalkService_getBlockedContactIdsByRange_args__isset __isset;

  void __set_start(const int32_t val);

  void __set_count(const int32_t val);

  bool operator == (const TalkService_getBlockedContactIdsByRange_args & rhs) const
  {
    if (!(start == rhs.start))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const TalkService_getBlockedContactIdsByRange_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getBlockedContactIdsByRange_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getBlockedContactIdsByRange_pargs {
 public:


  virtual ~TalkService_getBlockedContactIdsByRange_pargs() throw();
  const int32_t* start;
  const int32_t* count;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getBlockedContactIdsByRange_result__isset {
  _TalkService_getBlockedContactIdsByRange_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getBlockedContactIdsByRange_result__isset;

class TalkService_getBlockedContactIdsByRange_result {
 public:

  TalkService_getBlockedContactIdsByRange_result(const TalkService_getBlockedContactIdsByRange_result&);
  TalkService_getBlockedContactIdsByRange_result& operator=(const TalkService_getBlockedContactIdsByRange_result&);
  TalkService_getBlockedContactIdsByRange_result() {
  }

  virtual ~TalkService_getBlockedContactIdsByRange_result() throw();
  std::vector<std::string>  success;
  TalkException e;

  _TalkService_getBlockedContactIdsByRange_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getBlockedContactIdsByRange_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getBlockedContactIdsByRange_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getBlockedContactIdsByRange_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getBlockedContactIdsByRange_presult__isset {
  _TalkService_getBlockedContactIdsByRange_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getBlockedContactIdsByRange_presult__isset;

class TalkService_getBlockedContactIdsByRange_presult {
 public:


  virtual ~TalkService_getBlockedContactIdsByRange_presult() throw();
  std::vector<std::string> * success;
  TalkException e;

  _TalkService_getBlockedContactIdsByRange_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TalkService_getBlockedRecommendationIds_args {
 public:

  TalkService_getBlockedRecommendationIds_args(const TalkService_getBlockedRecommendationIds_args&);
  TalkService_getBlockedRecommendationIds_args& operator=(const TalkService_getBlockedRecommendationIds_args&);
  TalkService_getBlockedRecommendationIds_args() {
  }

  virtual ~TalkService_getBlockedRecommendationIds_args() throw();

  bool operator == (const TalkService_getBlockedRecommendationIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TalkService_getBlockedRecommendationIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getBlockedRecommendationIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getBlockedRecommendationIds_pargs {
 public:


  virtual ~TalkService_getBlockedRecommendationIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getBlockedRecommendationIds_result__isset {
  _TalkService_getBlockedRecommendationIds_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getBlockedRecommendationIds_result__isset;

class TalkService_getBlockedRecommendationIds_result {
 public:

  TalkService_getBlockedRecommendationIds_result(const TalkService_getBlockedRecommendationIds_result&);
  TalkService_getBlockedRecommendationIds_result& operator=(const TalkService_getBlockedRecommendationIds_result&);
  TalkService_getBlockedRecommendationIds_result() {
  }

  virtual ~TalkService_getBlockedRecommendationIds_result() throw();
  std::vector<std::string>  success;
  TalkException e;

  _TalkService_getBlockedRecommendationIds_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getBlockedRecommendationIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getBlockedRecommendationIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getBlockedRecommendationIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getBlockedRecommendationIds_presult__isset {
  _TalkService_getBlockedRecommendationIds_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getBlockedRecommendationIds_presult__isset;

class TalkService_getBlockedRecommendationIds_presult {
 public:


  virtual ~TalkService_getBlockedRecommendationIds_presult() throw();
  std::vector<std::string> * success;
  TalkException e;

  _TalkService_getBlockedRecommendationIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TalkService_getBuddyBlockerIds_args {
 public:

  TalkService_getBuddyBlockerIds_args(const TalkService_getBuddyBlockerIds_args&);
  TalkService_getBuddyBlockerIds_args& operator=(const TalkService_getBuddyBlockerIds_args&);
  TalkService_getBuddyBlockerIds_args() {
  }

  virtual ~TalkService_getBuddyBlockerIds_args() throw();

  bool operator == (const TalkService_getBuddyBlockerIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TalkService_getBuddyBlockerIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getBuddyBlockerIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getBuddyBlockerIds_pargs {
 public:


  virtual ~TalkService_getBuddyBlockerIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getBuddyBlockerIds_result__isset {
  _TalkService_getBuddyBlockerIds_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getBuddyBlockerIds_result__isset;

class TalkService_getBuddyBlockerIds_result {
 public:

  TalkService_getBuddyBlockerIds_result(const TalkService_getBuddyBlockerIds_result&);
  TalkService_getBuddyBlockerIds_result& operator=(const TalkService_getBuddyBlockerIds_result&);
  TalkService_getBuddyBlockerIds_result() {
  }

  virtual ~TalkService_getBuddyBlockerIds_result() throw();
  std::vector<std::string>  success;
  TalkException e;

  _TalkService_getBuddyBlockerIds_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getBuddyBlockerIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getBuddyBlockerIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getBuddyBlockerIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getBuddyBlockerIds_presult__isset {
  _TalkService_getBuddyBlockerIds_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getBuddyBlockerIds_presult__isset;

class TalkService_getBuddyBlockerIds_presult {
 public:


  virtual ~TalkService_getBuddyBlockerIds_presult() throw();
  std::vector<std::string> * success;
  TalkException e;

  _TalkService_getBuddyBlockerIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getBuddyLocation_args__isset {
  _TalkService_getBuddyLocation_args__isset() : mid(false), index(false) {}
  bool mid :1;
  bool index :1;
} _TalkService_getBuddyLocation_args__isset;

class TalkService_getBuddyLocation_args {
 public:

  TalkService_getBuddyLocation_args(const TalkService_getBuddyLocation_args&);
  TalkService_getBuddyLocation_args& operator=(const TalkService_getBuddyLocation_args&);
  TalkService_getBuddyLocation_args() : mid(), index(0) {
  }

  virtual ~TalkService_getBuddyLocation_args() throw();
  std::string mid;
  int32_t index;

  _TalkService_getBuddyLocation_args__isset __isset;

  void __set_mid(const std::string& val);

  void __set_index(const int32_t val);

  bool operator == (const TalkService_getBuddyLocation_args & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    if (!(index == rhs.index))
      return false;
    return true;
  }
  bool operator != (const TalkService_getBuddyLocation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getBuddyLocation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getBuddyLocation_pargs {
 public:


  virtual ~TalkService_getBuddyLocation_pargs() throw();
  const std::string* mid;
  const int32_t* index;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getBuddyLocation_result__isset {
  _TalkService_getBuddyLocation_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getBuddyLocation_result__isset;

class TalkService_getBuddyLocation_result {
 public:

  TalkService_getBuddyLocation_result(const TalkService_getBuddyLocation_result&);
  TalkService_getBuddyLocation_result& operator=(const TalkService_getBuddyLocation_result&);
  TalkService_getBuddyLocation_result() {
  }

  virtual ~TalkService_getBuddyLocation_result() throw();
  Geolocation success;
  TalkException e;

  _TalkService_getBuddyLocation_result__isset __isset;

  void __set_success(const Geolocation& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getBuddyLocation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getBuddyLocation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getBuddyLocation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getBuddyLocation_presult__isset {
  _TalkService_getBuddyLocation_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getBuddyLocation_presult__isset;

class TalkService_getBuddyLocation_presult {
 public:


  virtual ~TalkService_getBuddyLocation_presult() throw();
  Geolocation* success;
  TalkException e;

  _TalkService_getBuddyLocation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getCompactContactsModifiedSince_args__isset {
  _TalkService_getCompactContactsModifiedSince_args__isset() : timestamp(false) {}
  bool timestamp :1;
} _TalkService_getCompactContactsModifiedSince_args__isset;

class TalkService_getCompactContactsModifiedSince_args {
 public:

  TalkService_getCompactContactsModifiedSince_args(const TalkService_getCompactContactsModifiedSince_args&);
  TalkService_getCompactContactsModifiedSince_args& operator=(const TalkService_getCompactContactsModifiedSince_args&);
  TalkService_getCompactContactsModifiedSince_args() : timestamp(0) {
  }

  virtual ~TalkService_getCompactContactsModifiedSince_args() throw();
  int64_t timestamp;

  _TalkService_getCompactContactsModifiedSince_args__isset __isset;

  void __set_timestamp(const int64_t val);

  bool operator == (const TalkService_getCompactContactsModifiedSince_args & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const TalkService_getCompactContactsModifiedSince_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getCompactContactsModifiedSince_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getCompactContactsModifiedSince_pargs {
 public:


  virtual ~TalkService_getCompactContactsModifiedSince_pargs() throw();
  const int64_t* timestamp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getCompactContactsModifiedSince_result__isset {
  _TalkService_getCompactContactsModifiedSince_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getCompactContactsModifiedSince_result__isset;

class TalkService_getCompactContactsModifiedSince_result {
 public:

  TalkService_getCompactContactsModifiedSince_result(const TalkService_getCompactContactsModifiedSince_result&);
  TalkService_getCompactContactsModifiedSince_result& operator=(const TalkService_getCompactContactsModifiedSince_result&);
  TalkService_getCompactContactsModifiedSince_result() {
  }

  virtual ~TalkService_getCompactContactsModifiedSince_result() throw();
  std::vector<CompactContact>  success;
  TalkException e;

  _TalkService_getCompactContactsModifiedSince_result__isset __isset;

  void __set_success(const std::vector<CompactContact> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getCompactContactsModifiedSince_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getCompactContactsModifiedSince_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getCompactContactsModifiedSince_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getCompactContactsModifiedSince_presult__isset {
  _TalkService_getCompactContactsModifiedSince_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getCompactContactsModifiedSince_presult__isset;

class TalkService_getCompactContactsModifiedSince_presult {
 public:


  virtual ~TalkService_getCompactContactsModifiedSince_presult() throw();
  std::vector<CompactContact> * success;
  TalkException e;

  _TalkService_getCompactContactsModifiedSince_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getCompactGroup_args__isset {
  _TalkService_getCompactGroup_args__isset() : groupId(false) {}
  bool groupId :1;
} _TalkService_getCompactGroup_args__isset;

class TalkService_getCompactGroup_args {
 public:

  TalkService_getCompactGroup_args(const TalkService_getCompactGroup_args&);
  TalkService_getCompactGroup_args& operator=(const TalkService_getCompactGroup_args&);
  TalkService_getCompactGroup_args() : groupId() {
  }

  virtual ~TalkService_getCompactGroup_args() throw();
  std::string groupId;

  _TalkService_getCompactGroup_args__isset __isset;

  void __set_groupId(const std::string& val);

  bool operator == (const TalkService_getCompactGroup_args & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    return true;
  }
  bool operator != (const TalkService_getCompactGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getCompactGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getCompactGroup_pargs {
 public:


  virtual ~TalkService_getCompactGroup_pargs() throw();
  const std::string* groupId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getCompactGroup_result__isset {
  _TalkService_getCompactGroup_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getCompactGroup_result__isset;

class TalkService_getCompactGroup_result {
 public:

  TalkService_getCompactGroup_result(const TalkService_getCompactGroup_result&);
  TalkService_getCompactGroup_result& operator=(const TalkService_getCompactGroup_result&);
  TalkService_getCompactGroup_result() {
  }

  virtual ~TalkService_getCompactGroup_result() throw();
  Group success;
  TalkException e;

  _TalkService_getCompactGroup_result__isset __isset;

  void __set_success(const Group& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getCompactGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getCompactGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getCompactGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getCompactGroup_presult__isset {
  _TalkService_getCompactGroup_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getCompactGroup_presult__isset;

class TalkService_getCompactGroup_presult {
 public:


  virtual ~TalkService_getCompactGroup_presult() throw();
  Group* success;
  TalkException e;

  _TalkService_getCompactGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getCompactRoom_args__isset {
  _TalkService_getCompactRoom_args__isset() : roomId(false) {}
  bool roomId :1;
} _TalkService_getCompactRoom_args__isset;

class TalkService_getCompactRoom_args {
 public:

  TalkService_getCompactRoom_args(const TalkService_getCompactRoom_args&);
  TalkService_getCompactRoom_args& operator=(const TalkService_getCompactRoom_args&);
  TalkService_getCompactRoom_args() : roomId() {
  }

  virtual ~TalkService_getCompactRoom_args() throw();
  std::string roomId;

  _TalkService_getCompactRoom_args__isset __isset;

  void __set_roomId(const std::string& val);

  bool operator == (const TalkService_getCompactRoom_args & rhs) const
  {
    if (!(roomId == rhs.roomId))
      return false;
    return true;
  }
  bool operator != (const TalkService_getCompactRoom_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getCompactRoom_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getCompactRoom_pargs {
 public:


  virtual ~TalkService_getCompactRoom_pargs() throw();
  const std::string* roomId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getCompactRoom_result__isset {
  _TalkService_getCompactRoom_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getCompactRoom_result__isset;

class TalkService_getCompactRoom_result {
 public:

  TalkService_getCompactRoom_result(const TalkService_getCompactRoom_result&);
  TalkService_getCompactRoom_result& operator=(const TalkService_getCompactRoom_result&);
  TalkService_getCompactRoom_result() {
  }

  virtual ~TalkService_getCompactRoom_result() throw();
  Room success;
  TalkException e;

  _TalkService_getCompactRoom_result__isset __isset;

  void __set_success(const Room& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getCompactRoom_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getCompactRoom_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getCompactRoom_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getCompactRoom_presult__isset {
  _TalkService_getCompactRoom_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getCompactRoom_presult__isset;

class TalkService_getCompactRoom_presult {
 public:


  virtual ~TalkService_getCompactRoom_presult() throw();
  Room* success;
  TalkException e;

  _TalkService_getCompactRoom_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getContact_args__isset {
  _TalkService_getContact_args__isset() : id(false) {}
  bool id :1;
} _TalkService_getContact_args__isset;

class TalkService_getContact_args {
 public:

  TalkService_getContact_args(const TalkService_getContact_args&);
  TalkService_getContact_args& operator=(const TalkService_getContact_args&);
  TalkService_getContact_args() : id() {
  }

  virtual ~TalkService_getContact_args() throw();
  std::string id;

  _TalkService_getContact_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const TalkService_getContact_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const TalkService_getContact_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getContact_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getContact_pargs {
 public:


  virtual ~TalkService_getContact_pargs() throw();
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getContact_result__isset {
  _TalkService_getContact_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getContact_result__isset;

class TalkService_getContact_result {
 public:

  TalkService_getContact_result(const TalkService_getContact_result&);
  TalkService_getContact_result& operator=(const TalkService_getContact_result&);
  TalkService_getContact_result() {
  }

  virtual ~TalkService_getContact_result() throw();
  Contact success;
  TalkException e;

  _TalkService_getContact_result__isset __isset;

  void __set_success(const Contact& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getContact_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getContact_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getContact_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getContact_presult__isset {
  _TalkService_getContact_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getContact_presult__isset;

class TalkService_getContact_presult {
 public:


  virtual ~TalkService_getContact_presult() throw();
  Contact* success;
  TalkException e;

  _TalkService_getContact_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getContacts_args__isset {
  _TalkService_getContacts_args__isset() : ids(false) {}
  bool ids :1;
} _TalkService_getContacts_args__isset;

class TalkService_getContacts_args {
 public:

  TalkService_getContacts_args(const TalkService_getContacts_args&);
  TalkService_getContacts_args& operator=(const TalkService_getContacts_args&);
  TalkService_getContacts_args() {
  }

  virtual ~TalkService_getContacts_args() throw();
  std::vector<std::string>  ids;

  _TalkService_getContacts_args__isset __isset;

  void __set_ids(const std::vector<std::string> & val);

  bool operator == (const TalkService_getContacts_args & rhs) const
  {
    if (!(ids == rhs.ids))
      return false;
    return true;
  }
  bool operator != (const TalkService_getContacts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getContacts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getContacts_pargs {
 public:


  virtual ~TalkService_getContacts_pargs() throw();
  const std::vector<std::string> * ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getContacts_result__isset {
  _TalkService_getContacts_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getContacts_result__isset;

class TalkService_getContacts_result {
 public:

  TalkService_getContacts_result(const TalkService_getContacts_result&);
  TalkService_getContacts_result& operator=(const TalkService_getContacts_result&);
  TalkService_getContacts_result() {
  }

  virtual ~TalkService_getContacts_result() throw();
  std::vector<Contact>  success;
  TalkException e;

  _TalkService_getContacts_result__isset __isset;

  void __set_success(const std::vector<Contact> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getContacts_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getContacts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getContacts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getContacts_presult__isset {
  _TalkService_getContacts_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getContacts_presult__isset;

class TalkService_getContacts_presult {
 public:


  virtual ~TalkService_getContacts_presult() throw();
  std::vector<Contact> * success;
  TalkException e;

  _TalkService_getContacts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getContactWithFriendRequestStatus_args__isset {
  _TalkService_getContactWithFriendRequestStatus_args__isset() : id(false) {}
  bool id :1;
} _TalkService_getContactWithFriendRequestStatus_args__isset;

class TalkService_getContactWithFriendRequestStatus_args {
 public:

  TalkService_getContactWithFriendRequestStatus_args(const TalkService_getContactWithFriendRequestStatus_args&);
  TalkService_getContactWithFriendRequestStatus_args& operator=(const TalkService_getContactWithFriendRequestStatus_args&);
  TalkService_getContactWithFriendRequestStatus_args() : id() {
  }

  virtual ~TalkService_getContactWithFriendRequestStatus_args() throw();
  std::string id;

  _TalkService_getContactWithFriendRequestStatus_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const TalkService_getContactWithFriendRequestStatus_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const TalkService_getContactWithFriendRequestStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getContactWithFriendRequestStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getContactWithFriendRequestStatus_pargs {
 public:


  virtual ~TalkService_getContactWithFriendRequestStatus_pargs() throw();
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getContactWithFriendRequestStatus_result__isset {
  _TalkService_getContactWithFriendRequestStatus_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getContactWithFriendRequestStatus_result__isset;

class TalkService_getContactWithFriendRequestStatus_result {
 public:

  TalkService_getContactWithFriendRequestStatus_result(const TalkService_getContactWithFriendRequestStatus_result&);
  TalkService_getContactWithFriendRequestStatus_result& operator=(const TalkService_getContactWithFriendRequestStatus_result&);
  TalkService_getContactWithFriendRequestStatus_result() {
  }

  virtual ~TalkService_getContactWithFriendRequestStatus_result() throw();
  Contact success;
  TalkException e;

  _TalkService_getContactWithFriendRequestStatus_result__isset __isset;

  void __set_success(const Contact& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getContactWithFriendRequestStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getContactWithFriendRequestStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getContactWithFriendRequestStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getContactWithFriendRequestStatus_presult__isset {
  _TalkService_getContactWithFriendRequestStatus_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getContactWithFriendRequestStatus_presult__isset;

class TalkService_getContactWithFriendRequestStatus_presult {
 public:


  virtual ~TalkService_getContactWithFriendRequestStatus_presult() throw();
  Contact* success;
  TalkException e;

  _TalkService_getContactWithFriendRequestStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TalkService_getCountryWithRequestIp_args {
 public:

  TalkService_getCountryWithRequestIp_args(const TalkService_getCountryWithRequestIp_args&);
  TalkService_getCountryWithRequestIp_args& operator=(const TalkService_getCountryWithRequestIp_args&);
  TalkService_getCountryWithRequestIp_args() {
  }

  virtual ~TalkService_getCountryWithRequestIp_args() throw();

  bool operator == (const TalkService_getCountryWithRequestIp_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TalkService_getCountryWithRequestIp_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getCountryWithRequestIp_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getCountryWithRequestIp_pargs {
 public:


  virtual ~TalkService_getCountryWithRequestIp_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getCountryWithRequestIp_result__isset {
  _TalkService_getCountryWithRequestIp_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getCountryWithRequestIp_result__isset;

class TalkService_getCountryWithRequestIp_result {
 public:

  TalkService_getCountryWithRequestIp_result(const TalkService_getCountryWithRequestIp_result&);
  TalkService_getCountryWithRequestIp_result& operator=(const TalkService_getCountryWithRequestIp_result&);
  TalkService_getCountryWithRequestIp_result() : success() {
  }

  virtual ~TalkService_getCountryWithRequestIp_result() throw();
  std::string success;
  TalkException e;

  _TalkService_getCountryWithRequestIp_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getCountryWithRequestIp_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getCountryWithRequestIp_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getCountryWithRequestIp_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getCountryWithRequestIp_presult__isset {
  _TalkService_getCountryWithRequestIp_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getCountryWithRequestIp_presult__isset;

class TalkService_getCountryWithRequestIp_presult {
 public:


  virtual ~TalkService_getCountryWithRequestIp_presult() throw();
  std::string* success;
  TalkException e;

  _TalkService_getCountryWithRequestIp_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TalkService_getFavoriteMids_args {
 public:

  TalkService_getFavoriteMids_args(const TalkService_getFavoriteMids_args&);
  TalkService_getFavoriteMids_args& operator=(const TalkService_getFavoriteMids_args&);
  TalkService_getFavoriteMids_args() {
  }

  virtual ~TalkService_getFavoriteMids_args() throw();

  bool operator == (const TalkService_getFavoriteMids_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TalkService_getFavoriteMids_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getFavoriteMids_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getFavoriteMids_pargs {
 public:


  virtual ~TalkService_getFavoriteMids_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getFavoriteMids_result__isset {
  _TalkService_getFavoriteMids_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getFavoriteMids_result__isset;

class TalkService_getFavoriteMids_result {
 public:

  TalkService_getFavoriteMids_result(const TalkService_getFavoriteMids_result&);
  TalkService_getFavoriteMids_result& operator=(const TalkService_getFavoriteMids_result&);
  TalkService_getFavoriteMids_result() {
  }

  virtual ~TalkService_getFavoriteMids_result() throw();
  std::vector<std::string>  success;
  TalkException e;

  _TalkService_getFavoriteMids_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getFavoriteMids_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getFavoriteMids_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getFavoriteMids_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getFavoriteMids_presult__isset {
  _TalkService_getFavoriteMids_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getFavoriteMids_presult__isset;

class TalkService_getFavoriteMids_presult {
 public:


  virtual ~TalkService_getFavoriteMids_presult() throw();
  std::vector<std::string> * success;
  TalkException e;

  _TalkService_getFavoriteMids_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getGroup_args__isset {
  _TalkService_getGroup_args__isset() : groupId(false) {}
  bool groupId :1;
} _TalkService_getGroup_args__isset;

class TalkService_getGroup_args {
 public:

  TalkService_getGroup_args(const TalkService_getGroup_args&);
  TalkService_getGroup_args& operator=(const TalkService_getGroup_args&);
  TalkService_getGroup_args() : groupId() {
  }

  virtual ~TalkService_getGroup_args() throw();
  std::string groupId;

  _TalkService_getGroup_args__isset __isset;

  void __set_groupId(const std::string& val);

  bool operator == (const TalkService_getGroup_args & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    return true;
  }
  bool operator != (const TalkService_getGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getGroup_pargs {
 public:


  virtual ~TalkService_getGroup_pargs() throw();
  const std::string* groupId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getGroup_result__isset {
  _TalkService_getGroup_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getGroup_result__isset;

class TalkService_getGroup_result {
 public:

  TalkService_getGroup_result(const TalkService_getGroup_result&);
  TalkService_getGroup_result& operator=(const TalkService_getGroup_result&);
  TalkService_getGroup_result() {
  }

  virtual ~TalkService_getGroup_result() throw();
  Group success;
  TalkException e;

  _TalkService_getGroup_result__isset __isset;

  void __set_success(const Group& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getGroup_presult__isset {
  _TalkService_getGroup_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getGroup_presult__isset;

class TalkService_getGroup_presult {
 public:


  virtual ~TalkService_getGroup_presult() throw();
  Group* success;
  TalkException e;

  _TalkService_getGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TalkService_getGroupIdsInvited_args {
 public:

  TalkService_getGroupIdsInvited_args(const TalkService_getGroupIdsInvited_args&);
  TalkService_getGroupIdsInvited_args& operator=(const TalkService_getGroupIdsInvited_args&);
  TalkService_getGroupIdsInvited_args() {
  }

  virtual ~TalkService_getGroupIdsInvited_args() throw();

  bool operator == (const TalkService_getGroupIdsInvited_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TalkService_getGroupIdsInvited_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getGroupIdsInvited_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getGroupIdsInvited_pargs {
 public:


  virtual ~TalkService_getGroupIdsInvited_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getGroupIdsInvited_result__isset {
  _TalkService_getGroupIdsInvited_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getGroupIdsInvited_result__isset;

class TalkService_getGroupIdsInvited_result {
 public:

  TalkService_getGroupIdsInvited_result(const TalkService_getGroupIdsInvited_result&);
  TalkService_getGroupIdsInvited_result& operator=(const TalkService_getGroupIdsInvited_result&);
  TalkService_getGroupIdsInvited_result() {
  }

  virtual ~TalkService_getGroupIdsInvited_result() throw();
  std::vector<std::string>  success;
  TalkException e;

  _TalkService_getGroupIdsInvited_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getGroupIdsInvited_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getGroupIdsInvited_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getGroupIdsInvited_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getGroupIdsInvited_presult__isset {
  _TalkService_getGroupIdsInvited_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getGroupIdsInvited_presult__isset;

class TalkService_getGroupIdsInvited_presult {
 public:


  virtual ~TalkService_getGroupIdsInvited_presult() throw();
  std::vector<std::string> * success;
  TalkException e;

  _TalkService_getGroupIdsInvited_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TalkService_getGroupIdsJoined_args {
 public:

  TalkService_getGroupIdsJoined_args(const TalkService_getGroupIdsJoined_args&);
  TalkService_getGroupIdsJoined_args& operator=(const TalkService_getGroupIdsJoined_args&);
  TalkService_getGroupIdsJoined_args() {
  }

  virtual ~TalkService_getGroupIdsJoined_args() throw();

  bool operator == (const TalkService_getGroupIdsJoined_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TalkService_getGroupIdsJoined_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getGroupIdsJoined_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getGroupIdsJoined_pargs {
 public:


  virtual ~TalkService_getGroupIdsJoined_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getGroupIdsJoined_result__isset {
  _TalkService_getGroupIdsJoined_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getGroupIdsJoined_result__isset;

class TalkService_getGroupIdsJoined_result {
 public:

  TalkService_getGroupIdsJoined_result(const TalkService_getGroupIdsJoined_result&);
  TalkService_getGroupIdsJoined_result& operator=(const TalkService_getGroupIdsJoined_result&);
  TalkService_getGroupIdsJoined_result() {
  }

  virtual ~TalkService_getGroupIdsJoined_result() throw();
  std::vector<std::string>  success;
  TalkException e;

  _TalkService_getGroupIdsJoined_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getGroupIdsJoined_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getGroupIdsJoined_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getGroupIdsJoined_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getGroupIdsJoined_presult__isset {
  _TalkService_getGroupIdsJoined_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getGroupIdsJoined_presult__isset;

class TalkService_getGroupIdsJoined_presult {
 public:


  virtual ~TalkService_getGroupIdsJoined_presult() throw();
  std::vector<std::string> * success;
  TalkException e;

  _TalkService_getGroupIdsJoined_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getGroups_args__isset {
  _TalkService_getGroups_args__isset() : groupIds(false) {}
  bool groupIds :1;
} _TalkService_getGroups_args__isset;

class TalkService_getGroups_args {
 public:

  TalkService_getGroups_args(const TalkService_getGroups_args&);
  TalkService_getGroups_args& operator=(const TalkService_getGroups_args&);
  TalkService_getGroups_args() {
  }

  virtual ~TalkService_getGroups_args() throw();
  std::vector<std::string>  groupIds;

  _TalkService_getGroups_args__isset __isset;

  void __set_groupIds(const std::vector<std::string> & val);

  bool operator == (const TalkService_getGroups_args & rhs) const
  {
    if (!(groupIds == rhs.groupIds))
      return false;
    return true;
  }
  bool operator != (const TalkService_getGroups_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getGroups_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getGroups_pargs {
 public:


  virtual ~TalkService_getGroups_pargs() throw();
  const std::vector<std::string> * groupIds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getGroups_result__isset {
  _TalkService_getGroups_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getGroups_result__isset;

class TalkService_getGroups_result {
 public:

  TalkService_getGroups_result(const TalkService_getGroups_result&);
  TalkService_getGroups_result& operator=(const TalkService_getGroups_result&);
  TalkService_getGroups_result() {
  }

  virtual ~TalkService_getGroups_result() throw();
  std::vector<Group>  success;
  TalkException e;

  _TalkService_getGroups_result__isset __isset;

  void __set_success(const std::vector<Group> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getGroups_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getGroups_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getGroups_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getGroups_presult__isset {
  _TalkService_getGroups_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getGroups_presult__isset;

class TalkService_getGroups_presult {
 public:


  virtual ~TalkService_getGroups_presult() throw();
  std::vector<Group> * success;
  TalkException e;

  _TalkService_getGroups_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TalkService_getHiddenContactMids_args {
 public:

  TalkService_getHiddenContactMids_args(const TalkService_getHiddenContactMids_args&);
  TalkService_getHiddenContactMids_args& operator=(const TalkService_getHiddenContactMids_args&);
  TalkService_getHiddenContactMids_args() {
  }

  virtual ~TalkService_getHiddenContactMids_args() throw();

  bool operator == (const TalkService_getHiddenContactMids_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TalkService_getHiddenContactMids_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getHiddenContactMids_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getHiddenContactMids_pargs {
 public:


  virtual ~TalkService_getHiddenContactMids_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getHiddenContactMids_result__isset {
  _TalkService_getHiddenContactMids_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getHiddenContactMids_result__isset;

class TalkService_getHiddenContactMids_result {
 public:

  TalkService_getHiddenContactMids_result(const TalkService_getHiddenContactMids_result&);
  TalkService_getHiddenContactMids_result& operator=(const TalkService_getHiddenContactMids_result&);
  TalkService_getHiddenContactMids_result() {
  }

  virtual ~TalkService_getHiddenContactMids_result() throw();
  std::vector<std::string>  success;
  TalkException e;

  _TalkService_getHiddenContactMids_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getHiddenContactMids_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getHiddenContactMids_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getHiddenContactMids_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getHiddenContactMids_presult__isset {
  _TalkService_getHiddenContactMids_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getHiddenContactMids_presult__isset;

class TalkService_getHiddenContactMids_presult {
 public:


  virtual ~TalkService_getHiddenContactMids_presult() throw();
  std::vector<std::string> * success;
  TalkException e;

  _TalkService_getHiddenContactMids_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TalkService_getIdentityIdentifier_args {
 public:

  TalkService_getIdentityIdentifier_args(const TalkService_getIdentityIdentifier_args&);
  TalkService_getIdentityIdentifier_args& operator=(const TalkService_getIdentityIdentifier_args&);
  TalkService_getIdentityIdentifier_args() {
  }

  virtual ~TalkService_getIdentityIdentifier_args() throw();

  bool operator == (const TalkService_getIdentityIdentifier_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TalkService_getIdentityIdentifier_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getIdentityIdentifier_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getIdentityIdentifier_pargs {
 public:


  virtual ~TalkService_getIdentityIdentifier_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getIdentityIdentifier_result__isset {
  _TalkService_getIdentityIdentifier_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getIdentityIdentifier_result__isset;

class TalkService_getIdentityIdentifier_result {
 public:

  TalkService_getIdentityIdentifier_result(const TalkService_getIdentityIdentifier_result&);
  TalkService_getIdentityIdentifier_result& operator=(const TalkService_getIdentityIdentifier_result&);
  TalkService_getIdentityIdentifier_result() : success() {
  }

  virtual ~TalkService_getIdentityIdentifier_result() throw();
  std::string success;
  TalkException e;

  _TalkService_getIdentityIdentifier_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getIdentityIdentifier_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getIdentityIdentifier_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getIdentityIdentifier_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getIdentityIdentifier_presult__isset {
  _TalkService_getIdentityIdentifier_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getIdentityIdentifier_presult__isset;

class TalkService_getIdentityIdentifier_presult {
 public:


  virtual ~TalkService_getIdentityIdentifier_presult() throw();
  std::string* success;
  TalkException e;

  _TalkService_getIdentityIdentifier_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TalkService_getLastAnnouncementIndex_args {
 public:

  TalkService_getLastAnnouncementIndex_args(const TalkService_getLastAnnouncementIndex_args&);
  TalkService_getLastAnnouncementIndex_args& operator=(const TalkService_getLastAnnouncementIndex_args&);
  TalkService_getLastAnnouncementIndex_args() {
  }

  virtual ~TalkService_getLastAnnouncementIndex_args() throw();

  bool operator == (const TalkService_getLastAnnouncementIndex_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TalkService_getLastAnnouncementIndex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getLastAnnouncementIndex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getLastAnnouncementIndex_pargs {
 public:


  virtual ~TalkService_getLastAnnouncementIndex_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getLastAnnouncementIndex_result__isset {
  _TalkService_getLastAnnouncementIndex_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getLastAnnouncementIndex_result__isset;

class TalkService_getLastAnnouncementIndex_result {
 public:

  TalkService_getLastAnnouncementIndex_result(const TalkService_getLastAnnouncementIndex_result&);
  TalkService_getLastAnnouncementIndex_result& operator=(const TalkService_getLastAnnouncementIndex_result&);
  TalkService_getLastAnnouncementIndex_result() : success(0) {
  }

  virtual ~TalkService_getLastAnnouncementIndex_result() throw();
  int32_t success;
  TalkException e;

  _TalkService_getLastAnnouncementIndex_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getLastAnnouncementIndex_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getLastAnnouncementIndex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getLastAnnouncementIndex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getLastAnnouncementIndex_presult__isset {
  _TalkService_getLastAnnouncementIndex_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getLastAnnouncementIndex_presult__isset;

class TalkService_getLastAnnouncementIndex_presult {
 public:


  virtual ~TalkService_getLastAnnouncementIndex_presult() throw();
  int32_t* success;
  TalkException e;

  _TalkService_getLastAnnouncementIndex_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TalkService_getLastOpRevision_args {
 public:

  TalkService_getLastOpRevision_args(const TalkService_getLastOpRevision_args&);
  TalkService_getLastOpRevision_args& operator=(const TalkService_getLastOpRevision_args&);
  TalkService_getLastOpRevision_args() {
  }

  virtual ~TalkService_getLastOpRevision_args() throw();

  bool operator == (const TalkService_getLastOpRevision_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TalkService_getLastOpRevision_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getLastOpRevision_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getLastOpRevision_pargs {
 public:


  virtual ~TalkService_getLastOpRevision_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getLastOpRevision_result__isset {
  _TalkService_getLastOpRevision_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getLastOpRevision_result__isset;

class TalkService_getLastOpRevision_result {
 public:

  TalkService_getLastOpRevision_result(const TalkService_getLastOpRevision_result&);
  TalkService_getLastOpRevision_result& operator=(const TalkService_getLastOpRevision_result&);
  TalkService_getLastOpRevision_result() : success(0) {
  }

  virtual ~TalkService_getLastOpRevision_result() throw();
  int64_t success;
  TalkException e;

  _TalkService_getLastOpRevision_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getLastOpRevision_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getLastOpRevision_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getLastOpRevision_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getLastOpRevision_presult__isset {
  _TalkService_getLastOpRevision_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getLastOpRevision_presult__isset;

class TalkService_getLastOpRevision_presult {
 public:


  virtual ~TalkService_getLastOpRevision_presult() throw();
  int64_t* success;
  TalkException e;

  _TalkService_getLastOpRevision_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TalkService_getSuggestRevisions_args {
 public:

  TalkService_getSuggestRevisions_args(const TalkService_getSuggestRevisions_args&);
  TalkService_getSuggestRevisions_args& operator=(const TalkService_getSuggestRevisions_args&);
  TalkService_getSuggestRevisions_args() {
  }

  virtual ~TalkService_getSuggestRevisions_args() throw();

  bool operator == (const TalkService_getSuggestRevisions_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TalkService_getSuggestRevisions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getSuggestRevisions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getSuggestRevisions_pargs {
 public:


  virtual ~TalkService_getSuggestRevisions_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getSuggestRevisions_result__isset {
  _TalkService_getSuggestRevisions_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getSuggestRevisions_result__isset;

class TalkService_getSuggestRevisions_result {
 public:

  TalkService_getSuggestRevisions_result(const TalkService_getSuggestRevisions_result&);
  TalkService_getSuggestRevisions_result& operator=(const TalkService_getSuggestRevisions_result&);
  TalkService_getSuggestRevisions_result() {
  }

  virtual ~TalkService_getSuggestRevisions_result() throw();
  SuggestDictionaryRevisions success;
  TalkException e;

  _TalkService_getSuggestRevisions_result__isset __isset;

  void __set_success(const SuggestDictionaryRevisions& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getSuggestRevisions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getSuggestRevisions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getSuggestRevisions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getSuggestRevisions_presult__isset {
  _TalkService_getSuggestRevisions_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getSuggestRevisions_presult__isset;

class TalkService_getSuggestRevisions_presult {
 public:


  virtual ~TalkService_getSuggestRevisions_presult() throw();
  SuggestDictionaryRevisions* success;
  TalkException e;

  _TalkService_getSuggestRevisions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getPreviousMessagesV2WithReadCount_args__isset {
  _TalkService_getPreviousMessagesV2WithReadCount_args__isset() : messageBoxId(false), endMessageId(false), messagesCount(false) {}
  bool messageBoxId :1;
  bool endMessageId :1;
  bool messagesCount :1;
} _TalkService_getPreviousMessagesV2WithReadCount_args__isset;

class TalkService_getPreviousMessagesV2WithReadCount_args {
 public:

  TalkService_getPreviousMessagesV2WithReadCount_args(const TalkService_getPreviousMessagesV2WithReadCount_args&);
  TalkService_getPreviousMessagesV2WithReadCount_args& operator=(const TalkService_getPreviousMessagesV2WithReadCount_args&);
  TalkService_getPreviousMessagesV2WithReadCount_args() : messageBoxId(), messagesCount(0) {
  }

  virtual ~TalkService_getPreviousMessagesV2WithReadCount_args() throw();
  std::string messageBoxId;
  MessageBoxV2MessageId endMessageId;
  int32_t messagesCount;

  _TalkService_getPreviousMessagesV2WithReadCount_args__isset __isset;

  void __set_messageBoxId(const std::string& val);

  void __set_endMessageId(const MessageBoxV2MessageId& val);

  void __set_messagesCount(const int32_t val);

  bool operator == (const TalkService_getPreviousMessagesV2WithReadCount_args & rhs) const
  {
    if (!(messageBoxId == rhs.messageBoxId))
      return false;
    if (!(endMessageId == rhs.endMessageId))
      return false;
    if (!(messagesCount == rhs.messagesCount))
      return false;
    return true;
  }
  bool operator != (const TalkService_getPreviousMessagesV2WithReadCount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getPreviousMessagesV2WithReadCount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getPreviousMessagesV2WithReadCount_pargs {
 public:


  virtual ~TalkService_getPreviousMessagesV2WithReadCount_pargs() throw();
  const std::string* messageBoxId;
  const MessageBoxV2MessageId* endMessageId;
  const int32_t* messagesCount;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getPreviousMessagesV2WithReadCount_result__isset {
  _TalkService_getPreviousMessagesV2WithReadCount_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getPreviousMessagesV2WithReadCount_result__isset;

class TalkService_getPreviousMessagesV2WithReadCount_result {
 public:

  TalkService_getPreviousMessagesV2WithReadCount_result(const TalkService_getPreviousMessagesV2WithReadCount_result&);
  TalkService_getPreviousMessagesV2WithReadCount_result& operator=(const TalkService_getPreviousMessagesV2WithReadCount_result&);
  TalkService_getPreviousMessagesV2WithReadCount_result() {
  }

  virtual ~TalkService_getPreviousMessagesV2WithReadCount_result() throw();
  std::vector<Message>  success;
  TalkException e;

  _TalkService_getPreviousMessagesV2WithReadCount_result__isset __isset;

  void __set_success(const std::vector<Message> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getPreviousMessagesV2WithReadCount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getPreviousMessagesV2WithReadCount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getPreviousMessagesV2WithReadCount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getPreviousMessagesV2WithReadCount_presult__isset {
  _TalkService_getPreviousMessagesV2WithReadCount_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getPreviousMessagesV2WithReadCount_presult__isset;

class TalkService_getPreviousMessagesV2WithReadCount_presult {
 public:


  virtual ~TalkService_getPreviousMessagesV2WithReadCount_presult() throw();
  std::vector<Message> * success;
  TalkException e;

  _TalkService_getPreviousMessagesV2WithReadCount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getMessageBox_args__isset {
  _TalkService_getMessageBox_args__isset() : channelId(false), messageBoxId(false), lastMessagesCount(false) {}
  bool channelId :1;
  bool messageBoxId :1;
  bool lastMessagesCount :1;
} _TalkService_getMessageBox_args__isset;

class TalkService_getMessageBox_args {
 public:

  TalkService_getMessageBox_args(const TalkService_getMessageBox_args&);
  TalkService_getMessageBox_args& operator=(const TalkService_getMessageBox_args&);
  TalkService_getMessageBox_args() : channelId(), messageBoxId(), lastMessagesCount(0) {
  }

  virtual ~TalkService_getMessageBox_args() throw();
  std::string channelId;
  std::string messageBoxId;
  int32_t lastMessagesCount;

  _TalkService_getMessageBox_args__isset __isset;

  void __set_channelId(const std::string& val);

  void __set_messageBoxId(const std::string& val);

  void __set_lastMessagesCount(const int32_t val);

  bool operator == (const TalkService_getMessageBox_args & rhs) const
  {
    if (!(channelId == rhs.channelId))
      return false;
    if (!(messageBoxId == rhs.messageBoxId))
      return false;
    if (!(lastMessagesCount == rhs.lastMessagesCount))
      return false;
    return true;
  }
  bool operator != (const TalkService_getMessageBox_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getMessageBox_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getMessageBox_pargs {
 public:


  virtual ~TalkService_getMessageBox_pargs() throw();
  const std::string* channelId;
  const std::string* messageBoxId;
  const int32_t* lastMessagesCount;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getMessageBox_result__isset {
  _TalkService_getMessageBox_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getMessageBox_result__isset;

class TalkService_getMessageBox_result {
 public:

  TalkService_getMessageBox_result(const TalkService_getMessageBox_result&);
  TalkService_getMessageBox_result& operator=(const TalkService_getMessageBox_result&);
  TalkService_getMessageBox_result() {
  }

  virtual ~TalkService_getMessageBox_result() throw();
  TMessageBox success;
  TalkException e;

  _TalkService_getMessageBox_result__isset __isset;

  void __set_success(const TMessageBox& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getMessageBox_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getMessageBox_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getMessageBox_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getMessageBox_presult__isset {
  _TalkService_getMessageBox_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getMessageBox_presult__isset;

class TalkService_getMessageBox_presult {
 public:


  virtual ~TalkService_getMessageBox_presult() throw();
  TMessageBox* success;
  TalkException e;

  _TalkService_getMessageBox_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getMessageBoxCompactWrapUp_args__isset {
  _TalkService_getMessageBoxCompactWrapUp_args__isset() : mid(false) {}
  bool mid :1;
} _TalkService_getMessageBoxCompactWrapUp_args__isset;

class TalkService_getMessageBoxCompactWrapUp_args {
 public:

  TalkService_getMessageBoxCompactWrapUp_args(const TalkService_getMessageBoxCompactWrapUp_args&);
  TalkService_getMessageBoxCompactWrapUp_args& operator=(const TalkService_getMessageBoxCompactWrapUp_args&);
  TalkService_getMessageBoxCompactWrapUp_args() : mid() {
  }

  virtual ~TalkService_getMessageBoxCompactWrapUp_args() throw();
  std::string mid;

  _TalkService_getMessageBoxCompactWrapUp_args__isset __isset;

  void __set_mid(const std::string& val);

  bool operator == (const TalkService_getMessageBoxCompactWrapUp_args & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    return true;
  }
  bool operator != (const TalkService_getMessageBoxCompactWrapUp_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getMessageBoxCompactWrapUp_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getMessageBoxCompactWrapUp_pargs {
 public:


  virtual ~TalkService_getMessageBoxCompactWrapUp_pargs() throw();
  const std::string* mid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getMessageBoxCompactWrapUp_result__isset {
  _TalkService_getMessageBoxCompactWrapUp_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getMessageBoxCompactWrapUp_result__isset;

class TalkService_getMessageBoxCompactWrapUp_result {
 public:

  TalkService_getMessageBoxCompactWrapUp_result(const TalkService_getMessageBoxCompactWrapUp_result&);
  TalkService_getMessageBoxCompactWrapUp_result& operator=(const TalkService_getMessageBoxCompactWrapUp_result&);
  TalkService_getMessageBoxCompactWrapUp_result() {
  }

  virtual ~TalkService_getMessageBoxCompactWrapUp_result() throw();
  TMessageBoxWrapUp success;
  TalkException e;

  _TalkService_getMessageBoxCompactWrapUp_result__isset __isset;

  void __set_success(const TMessageBoxWrapUp& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getMessageBoxCompactWrapUp_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getMessageBoxCompactWrapUp_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getMessageBoxCompactWrapUp_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getMessageBoxCompactWrapUp_presult__isset {
  _TalkService_getMessageBoxCompactWrapUp_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getMessageBoxCompactWrapUp_presult__isset;

class TalkService_getMessageBoxCompactWrapUp_presult {
 public:


  virtual ~TalkService_getMessageBoxCompactWrapUp_presult() throw();
  TMessageBoxWrapUp* success;
  TalkException e;

  _TalkService_getMessageBoxCompactWrapUp_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getMessageBoxCompactWrapUpList_args__isset {
  _TalkService_getMessageBoxCompactWrapUpList_args__isset() : start(false), messageBoxCount(false) {}
  bool start :1;
  bool messageBoxCount :1;
} _TalkService_getMessageBoxCompactWrapUpList_args__isset;

class TalkService_getMessageBoxCompactWrapUpList_args {
 public:

  TalkService_getMessageBoxCompactWrapUpList_args(const TalkService_getMessageBoxCompactWrapUpList_args&);
  TalkService_getMessageBoxCompactWrapUpList_args& operator=(const TalkService_getMessageBoxCompactWrapUpList_args&);
  TalkService_getMessageBoxCompactWrapUpList_args() : start(0), messageBoxCount(0) {
  }

  virtual ~TalkService_getMessageBoxCompactWrapUpList_args() throw();
  int32_t start;
  int32_t messageBoxCount;

  _TalkService_getMessageBoxCompactWrapUpList_args__isset __isset;

  void __set_start(const int32_t val);

  void __set_messageBoxCount(const int32_t val);

  bool operator == (const TalkService_getMessageBoxCompactWrapUpList_args & rhs) const
  {
    if (!(start == rhs.start))
      return false;
    if (!(messageBoxCount == rhs.messageBoxCount))
      return false;
    return true;
  }
  bool operator != (const TalkService_getMessageBoxCompactWrapUpList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getMessageBoxCompactWrapUpList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getMessageBoxCompactWrapUpList_pargs {
 public:


  virtual ~TalkService_getMessageBoxCompactWrapUpList_pargs() throw();
  const int32_t* start;
  const int32_t* messageBoxCount;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getMessageBoxCompactWrapUpList_result__isset {
  _TalkService_getMessageBoxCompactWrapUpList_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getMessageBoxCompactWrapUpList_result__isset;

class TalkService_getMessageBoxCompactWrapUpList_result {
 public:

  TalkService_getMessageBoxCompactWrapUpList_result(const TalkService_getMessageBoxCompactWrapUpList_result&);
  TalkService_getMessageBoxCompactWrapUpList_result& operator=(const TalkService_getMessageBoxCompactWrapUpList_result&);
  TalkService_getMessageBoxCompactWrapUpList_result() {
  }

  virtual ~TalkService_getMessageBoxCompactWrapUpList_result() throw();
  TMessageBoxWrapUpResponse success;
  TalkException e;

  _TalkService_getMessageBoxCompactWrapUpList_result__isset __isset;

  void __set_success(const TMessageBoxWrapUpResponse& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getMessageBoxCompactWrapUpList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getMessageBoxCompactWrapUpList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getMessageBoxCompactWrapUpList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getMessageBoxCompactWrapUpList_presult__isset {
  _TalkService_getMessageBoxCompactWrapUpList_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getMessageBoxCompactWrapUpList_presult__isset;

class TalkService_getMessageBoxCompactWrapUpList_presult {
 public:


  virtual ~TalkService_getMessageBoxCompactWrapUpList_presult() throw();
  TMessageBoxWrapUpResponse* success;
  TalkException e;

  _TalkService_getMessageBoxCompactWrapUpList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getMessageBoxList_args__isset {
  _TalkService_getMessageBoxList_args__isset() : channelId(false), lastMessagesCount(false) {}
  bool channelId :1;
  bool lastMessagesCount :1;
} _TalkService_getMessageBoxList_args__isset;

class TalkService_getMessageBoxList_args {
 public:

  TalkService_getMessageBoxList_args(const TalkService_getMessageBoxList_args&);
  TalkService_getMessageBoxList_args& operator=(const TalkService_getMessageBoxList_args&);
  TalkService_getMessageBoxList_args() : channelId(), lastMessagesCount(0) {
  }

  virtual ~TalkService_getMessageBoxList_args() throw();
  std::string channelId;
  int32_t lastMessagesCount;

  _TalkService_getMessageBoxList_args__isset __isset;

  void __set_channelId(const std::string& val);

  void __set_lastMessagesCount(const int32_t val);

  bool operator == (const TalkService_getMessageBoxList_args & rhs) const
  {
    if (!(channelId == rhs.channelId))
      return false;
    if (!(lastMessagesCount == rhs.lastMessagesCount))
      return false;
    return true;
  }
  bool operator != (const TalkService_getMessageBoxList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getMessageBoxList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getMessageBoxList_pargs {
 public:


  virtual ~TalkService_getMessageBoxList_pargs() throw();
  const std::string* channelId;
  const int32_t* lastMessagesCount;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getMessageBoxList_result__isset {
  _TalkService_getMessageBoxList_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getMessageBoxList_result__isset;

class TalkService_getMessageBoxList_result {
 public:

  TalkService_getMessageBoxList_result(const TalkService_getMessageBoxList_result&);
  TalkService_getMessageBoxList_result& operator=(const TalkService_getMessageBoxList_result&);
  TalkService_getMessageBoxList_result() {
  }

  virtual ~TalkService_getMessageBoxList_result() throw();
  std::vector<TMessageBox>  success;
  TalkException e;

  _TalkService_getMessageBoxList_result__isset __isset;

  void __set_success(const std::vector<TMessageBox> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getMessageBoxList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getMessageBoxList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getMessageBoxList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getMessageBoxList_presult__isset {
  _TalkService_getMessageBoxList_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getMessageBoxList_presult__isset;

class TalkService_getMessageBoxList_presult {
 public:


  virtual ~TalkService_getMessageBoxList_presult() throw();
  std::vector<TMessageBox> * success;
  TalkException e;

  _TalkService_getMessageBoxList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getMessageBoxListByStatus_args__isset {
  _TalkService_getMessageBoxListByStatus_args__isset() : channelId(false), lastMessagesCount(false), status(false) {}
  bool channelId :1;
  bool lastMessagesCount :1;
  bool status :1;
} _TalkService_getMessageBoxListByStatus_args__isset;

class TalkService_getMessageBoxListByStatus_args {
 public:

  TalkService_getMessageBoxListByStatus_args(const TalkService_getMessageBoxListByStatus_args&);
  TalkService_getMessageBoxListByStatus_args& operator=(const TalkService_getMessageBoxListByStatus_args&);
  TalkService_getMessageBoxListByStatus_args() : channelId(), lastMessagesCount(0), status(0) {
  }

  virtual ~TalkService_getMessageBoxListByStatus_args() throw();
  std::string channelId;
  int32_t lastMessagesCount;
  int32_t status;

  _TalkService_getMessageBoxListByStatus_args__isset __isset;

  void __set_channelId(const std::string& val);

  void __set_lastMessagesCount(const int32_t val);

  void __set_status(const int32_t val);

  bool operator == (const TalkService_getMessageBoxListByStatus_args & rhs) const
  {
    if (!(channelId == rhs.channelId))
      return false;
    if (!(lastMessagesCount == rhs.lastMessagesCount))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const TalkService_getMessageBoxListByStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getMessageBoxListByStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getMessageBoxListByStatus_pargs {
 public:


  virtual ~TalkService_getMessageBoxListByStatus_pargs() throw();
  const std::string* channelId;
  const int32_t* lastMessagesCount;
  const int32_t* status;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getMessageBoxListByStatus_result__isset {
  _TalkService_getMessageBoxListByStatus_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getMessageBoxListByStatus_result__isset;

class TalkService_getMessageBoxListByStatus_result {
 public:

  TalkService_getMessageBoxListByStatus_result(const TalkService_getMessageBoxListByStatus_result&);
  TalkService_getMessageBoxListByStatus_result& operator=(const TalkService_getMessageBoxListByStatus_result&);
  TalkService_getMessageBoxListByStatus_result() {
  }

  virtual ~TalkService_getMessageBoxListByStatus_result() throw();
  std::vector<TMessageBox>  success;
  TalkException e;

  _TalkService_getMessageBoxListByStatus_result__isset __isset;

  void __set_success(const std::vector<TMessageBox> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getMessageBoxListByStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getMessageBoxListByStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getMessageBoxListByStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getMessageBoxListByStatus_presult__isset {
  _TalkService_getMessageBoxListByStatus_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getMessageBoxListByStatus_presult__isset;

class TalkService_getMessageBoxListByStatus_presult {
 public:


  virtual ~TalkService_getMessageBoxListByStatus_presult() throw();
  std::vector<TMessageBox> * success;
  TalkException e;

  _TalkService_getMessageBoxListByStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getMessageBoxWrapUp_args__isset {
  _TalkService_getMessageBoxWrapUp_args__isset() : mid(false) {}
  bool mid :1;
} _TalkService_getMessageBoxWrapUp_args__isset;

class TalkService_getMessageBoxWrapUp_args {
 public:

  TalkService_getMessageBoxWrapUp_args(const TalkService_getMessageBoxWrapUp_args&);
  TalkService_getMessageBoxWrapUp_args& operator=(const TalkService_getMessageBoxWrapUp_args&);
  TalkService_getMessageBoxWrapUp_args() : mid() {
  }

  virtual ~TalkService_getMessageBoxWrapUp_args() throw();
  std::string mid;

  _TalkService_getMessageBoxWrapUp_args__isset __isset;

  void __set_mid(const std::string& val);

  bool operator == (const TalkService_getMessageBoxWrapUp_args & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    return true;
  }
  bool operator != (const TalkService_getMessageBoxWrapUp_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getMessageBoxWrapUp_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getMessageBoxWrapUp_pargs {
 public:


  virtual ~TalkService_getMessageBoxWrapUp_pargs() throw();
  const std::string* mid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getMessageBoxWrapUp_result__isset {
  _TalkService_getMessageBoxWrapUp_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getMessageBoxWrapUp_result__isset;

class TalkService_getMessageBoxWrapUp_result {
 public:

  TalkService_getMessageBoxWrapUp_result(const TalkService_getMessageBoxWrapUp_result&);
  TalkService_getMessageBoxWrapUp_result& operator=(const TalkService_getMessageBoxWrapUp_result&);
  TalkService_getMessageBoxWrapUp_result() {
  }

  virtual ~TalkService_getMessageBoxWrapUp_result() throw();
  TMessageBoxWrapUp success;
  TalkException e;

  _TalkService_getMessageBoxWrapUp_result__isset __isset;

  void __set_success(const TMessageBoxWrapUp& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getMessageBoxWrapUp_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getMessageBoxWrapUp_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getMessageBoxWrapUp_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getMessageBoxWrapUp_presult__isset {
  _TalkService_getMessageBoxWrapUp_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getMessageBoxWrapUp_presult__isset;

class TalkService_getMessageBoxWrapUp_presult {
 public:


  virtual ~TalkService_getMessageBoxWrapUp_presult() throw();
  TMessageBoxWrapUp* success;
  TalkException e;

  _TalkService_getMessageBoxWrapUp_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getMessageBoxWrapUpList_args__isset {
  _TalkService_getMessageBoxWrapUpList_args__isset() : start(false), messageBoxCount(false) {}
  bool start :1;
  bool messageBoxCount :1;
} _TalkService_getMessageBoxWrapUpList_args__isset;

class TalkService_getMessageBoxWrapUpList_args {
 public:

  TalkService_getMessageBoxWrapUpList_args(const TalkService_getMessageBoxWrapUpList_args&);
  TalkService_getMessageBoxWrapUpList_args& operator=(const TalkService_getMessageBoxWrapUpList_args&);
  TalkService_getMessageBoxWrapUpList_args() : start(0), messageBoxCount(0) {
  }

  virtual ~TalkService_getMessageBoxWrapUpList_args() throw();
  int32_t start;
  int32_t messageBoxCount;

  _TalkService_getMessageBoxWrapUpList_args__isset __isset;

  void __set_start(const int32_t val);

  void __set_messageBoxCount(const int32_t val);

  bool operator == (const TalkService_getMessageBoxWrapUpList_args & rhs) const
  {
    if (!(start == rhs.start))
      return false;
    if (!(messageBoxCount == rhs.messageBoxCount))
      return false;
    return true;
  }
  bool operator != (const TalkService_getMessageBoxWrapUpList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getMessageBoxWrapUpList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getMessageBoxWrapUpList_pargs {
 public:


  virtual ~TalkService_getMessageBoxWrapUpList_pargs() throw();
  const int32_t* start;
  const int32_t* messageBoxCount;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getMessageBoxWrapUpList_result__isset {
  _TalkService_getMessageBoxWrapUpList_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getMessageBoxWrapUpList_result__isset;

class TalkService_getMessageBoxWrapUpList_result {
 public:

  TalkService_getMessageBoxWrapUpList_result(const TalkService_getMessageBoxWrapUpList_result&);
  TalkService_getMessageBoxWrapUpList_result& operator=(const TalkService_getMessageBoxWrapUpList_result&);
  TalkService_getMessageBoxWrapUpList_result() {
  }

  virtual ~TalkService_getMessageBoxWrapUpList_result() throw();
  TMessageBoxWrapUpResponse success;
  TalkException e;

  _TalkService_getMessageBoxWrapUpList_result__isset __isset;

  void __set_success(const TMessageBoxWrapUpResponse& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getMessageBoxWrapUpList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getMessageBoxWrapUpList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getMessageBoxWrapUpList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getMessageBoxWrapUpList_presult__isset {
  _TalkService_getMessageBoxWrapUpList_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getMessageBoxWrapUpList_presult__isset;

class TalkService_getMessageBoxWrapUpList_presult {
 public:


  virtual ~TalkService_getMessageBoxWrapUpList_presult() throw();
  TMessageBoxWrapUpResponse* success;
  TalkException e;

  _TalkService_getMessageBoxWrapUpList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getMessagesBySequenceNumber_args__isset {
  _TalkService_getMessagesBySequenceNumber_args__isset() : channelId(false), messageBoxId(false), startSeq(false), endSeq(false) {}
  bool channelId :1;
  bool messageBoxId :1;
  bool startSeq :1;
  bool endSeq :1;
} _TalkService_getMessagesBySequenceNumber_args__isset;

class TalkService_getMessagesBySequenceNumber_args {
 public:

  TalkService_getMessagesBySequenceNumber_args(const TalkService_getMessagesBySequenceNumber_args&);
  TalkService_getMessagesBySequenceNumber_args& operator=(const TalkService_getMessagesBySequenceNumber_args&);
  TalkService_getMessagesBySequenceNumber_args() : channelId(), messageBoxId(), startSeq(0), endSeq(0) {
  }

  virtual ~TalkService_getMessagesBySequenceNumber_args() throw();
  std::string channelId;
  std::string messageBoxId;
  int64_t startSeq;
  int64_t endSeq;

  _TalkService_getMessagesBySequenceNumber_args__isset __isset;

  void __set_channelId(const std::string& val);

  void __set_messageBoxId(const std::string& val);

  void __set_startSeq(const int64_t val);

  void __set_endSeq(const int64_t val);

  bool operator == (const TalkService_getMessagesBySequenceNumber_args & rhs) const
  {
    if (!(channelId == rhs.channelId))
      return false;
    if (!(messageBoxId == rhs.messageBoxId))
      return false;
    if (!(startSeq == rhs.startSeq))
      return false;
    if (!(endSeq == rhs.endSeq))
      return false;
    return true;
  }
  bool operator != (const TalkService_getMessagesBySequenceNumber_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getMessagesBySequenceNumber_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getMessagesBySequenceNumber_pargs {
 public:


  virtual ~TalkService_getMessagesBySequenceNumber_pargs() throw();
  const std::string* channelId;
  const std::string* messageBoxId;
  const int64_t* startSeq;
  const int64_t* endSeq;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getMessagesBySequenceNumber_result__isset {
  _TalkService_getMessagesBySequenceNumber_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getMessagesBySequenceNumber_result__isset;

class TalkService_getMessagesBySequenceNumber_result {
 public:

  TalkService_getMessagesBySequenceNumber_result(const TalkService_getMessagesBySequenceNumber_result&);
  TalkService_getMessagesBySequenceNumber_result& operator=(const TalkService_getMessagesBySequenceNumber_result&);
  TalkService_getMessagesBySequenceNumber_result() {
  }

  virtual ~TalkService_getMessagesBySequenceNumber_result() throw();
  std::vector<Message>  success;
  TalkException e;

  _TalkService_getMessagesBySequenceNumber_result__isset __isset;

  void __set_success(const std::vector<Message> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getMessagesBySequenceNumber_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getMessagesBySequenceNumber_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getMessagesBySequenceNumber_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getMessagesBySequenceNumber_presult__isset {
  _TalkService_getMessagesBySequenceNumber_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getMessagesBySequenceNumber_presult__isset;

class TalkService_getMessagesBySequenceNumber_presult {
 public:


  virtual ~TalkService_getMessagesBySequenceNumber_presult() throw();
  std::vector<Message> * success;
  TalkException e;

  _TalkService_getMessagesBySequenceNumber_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getNextMessages_args__isset {
  _TalkService_getNextMessages_args__isset() : messageBoxId(false), startSeq(false), messagesCount(false) {}
  bool messageBoxId :1;
  bool startSeq :1;
  bool messagesCount :1;
} _TalkService_getNextMessages_args__isset;

class TalkService_getNextMessages_args {
 public:

  TalkService_getNextMessages_args(const TalkService_getNextMessages_args&);
  TalkService_getNextMessages_args& operator=(const TalkService_getNextMessages_args&);
  TalkService_getNextMessages_args() : messageBoxId(), startSeq(0), messagesCount(0) {
  }

  virtual ~TalkService_getNextMessages_args() throw();
  std::string messageBoxId;
  int64_t startSeq;
  int32_t messagesCount;

  _TalkService_getNextMessages_args__isset __isset;

  void __set_messageBoxId(const std::string& val);

  void __set_startSeq(const int64_t val);

  void __set_messagesCount(const int32_t val);

  bool operator == (const TalkService_getNextMessages_args & rhs) const
  {
    if (!(messageBoxId == rhs.messageBoxId))
      return false;
    if (!(startSeq == rhs.startSeq))
      return false;
    if (!(messagesCount == rhs.messagesCount))
      return false;
    return true;
  }
  bool operator != (const TalkService_getNextMessages_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getNextMessages_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getNextMessages_pargs {
 public:


  virtual ~TalkService_getNextMessages_pargs() throw();
  const std::string* messageBoxId;
  const int64_t* startSeq;
  const int32_t* messagesCount;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getNextMessages_result__isset {
  _TalkService_getNextMessages_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getNextMessages_result__isset;

class TalkService_getNextMessages_result {
 public:

  TalkService_getNextMessages_result(const TalkService_getNextMessages_result&);
  TalkService_getNextMessages_result& operator=(const TalkService_getNextMessages_result&);
  TalkService_getNextMessages_result() {
  }

  virtual ~TalkService_getNextMessages_result() throw();
  std::vector<Message>  success;
  TalkException e;

  _TalkService_getNextMessages_result__isset __isset;

  void __set_success(const std::vector<Message> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getNextMessages_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getNextMessages_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getNextMessages_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getNextMessages_presult__isset {
  _TalkService_getNextMessages_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getNextMessages_presult__isset;

class TalkService_getNextMessages_presult {
 public:


  virtual ~TalkService_getNextMessages_presult() throw();
  std::vector<Message> * success;
  TalkException e;

  _TalkService_getNextMessages_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getNotificationPolicy_args__isset {
  _TalkService_getNotificationPolicy_args__isset() : carrier(false) {}
  bool carrier :1;
} _TalkService_getNotificationPolicy_args__isset;

class TalkService_getNotificationPolicy_args {
 public:

  TalkService_getNotificationPolicy_args(const TalkService_getNotificationPolicy_args&);
  TalkService_getNotificationPolicy_args& operator=(const TalkService_getNotificationPolicy_args&);
  TalkService_getNotificationPolicy_args() : carrier((CarrierCode::type)0) {
  }

  virtual ~TalkService_getNotificationPolicy_args() throw();
  CarrierCode::type carrier;

  _TalkService_getNotificationPolicy_args__isset __isset;

  void __set_carrier(const CarrierCode::type val);

  bool operator == (const TalkService_getNotificationPolicy_args & rhs) const
  {
    if (!(carrier == rhs.carrier))
      return false;
    return true;
  }
  bool operator != (const TalkService_getNotificationPolicy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getNotificationPolicy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getNotificationPolicy_pargs {
 public:


  virtual ~TalkService_getNotificationPolicy_pargs() throw();
  const CarrierCode::type* carrier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getNotificationPolicy_result__isset {
  _TalkService_getNotificationPolicy_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getNotificationPolicy_result__isset;

class TalkService_getNotificationPolicy_result {
 public:

  TalkService_getNotificationPolicy_result(const TalkService_getNotificationPolicy_result&);
  TalkService_getNotificationPolicy_result& operator=(const TalkService_getNotificationPolicy_result&);
  TalkService_getNotificationPolicy_result() {
  }

  virtual ~TalkService_getNotificationPolicy_result() throw();
  std::vector<NotificationType::type>  success;
  TalkException e;

  _TalkService_getNotificationPolicy_result__isset __isset;

  void __set_success(const std::vector<NotificationType::type> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getNotificationPolicy_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getNotificationPolicy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getNotificationPolicy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getNotificationPolicy_presult__isset {
  _TalkService_getNotificationPolicy_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getNotificationPolicy_presult__isset;

class TalkService_getNotificationPolicy_presult {
 public:


  virtual ~TalkService_getNotificationPolicy_presult() throw();
  std::vector<NotificationType::type> * success;
  TalkException e;

  _TalkService_getNotificationPolicy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getPreviousMessages_args__isset {
  _TalkService_getPreviousMessages_args__isset() : messageBoxId(false), endSeq(false), messagesCount(false) {}
  bool messageBoxId :1;
  bool endSeq :1;
  bool messagesCount :1;
} _TalkService_getPreviousMessages_args__isset;

class TalkService_getPreviousMessages_args {
 public:

  TalkService_getPreviousMessages_args(const TalkService_getPreviousMessages_args&);
  TalkService_getPreviousMessages_args& operator=(const TalkService_getPreviousMessages_args&);
  TalkService_getPreviousMessages_args() : messageBoxId(), endSeq(0), messagesCount(0) {
  }

  virtual ~TalkService_getPreviousMessages_args() throw();
  std::string messageBoxId;
  int64_t endSeq;
  int32_t messagesCount;

  _TalkService_getPreviousMessages_args__isset __isset;

  void __set_messageBoxId(const std::string& val);

  void __set_endSeq(const int64_t val);

  void __set_messagesCount(const int32_t val);

  bool operator == (const TalkService_getPreviousMessages_args & rhs) const
  {
    if (!(messageBoxId == rhs.messageBoxId))
      return false;
    if (!(endSeq == rhs.endSeq))
      return false;
    if (!(messagesCount == rhs.messagesCount))
      return false;
    return true;
  }
  bool operator != (const TalkService_getPreviousMessages_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getPreviousMessages_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getPreviousMessages_pargs {
 public:


  virtual ~TalkService_getPreviousMessages_pargs() throw();
  const std::string* messageBoxId;
  const int64_t* endSeq;
  const int32_t* messagesCount;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getPreviousMessages_result__isset {
  _TalkService_getPreviousMessages_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getPreviousMessages_result__isset;

class TalkService_getPreviousMessages_result {
 public:

  TalkService_getPreviousMessages_result(const TalkService_getPreviousMessages_result&);
  TalkService_getPreviousMessages_result& operator=(const TalkService_getPreviousMessages_result&);
  TalkService_getPreviousMessages_result() {
  }

  virtual ~TalkService_getPreviousMessages_result() throw();
  std::vector<Message>  success;
  TalkException e;

  _TalkService_getPreviousMessages_result__isset __isset;

  void __set_success(const std::vector<Message> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getPreviousMessages_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getPreviousMessages_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getPreviousMessages_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getPreviousMessages_presult__isset {
  _TalkService_getPreviousMessages_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getPreviousMessages_presult__isset;

class TalkService_getPreviousMessages_presult {
 public:


  virtual ~TalkService_getPreviousMessages_presult() throw();
  std::vector<Message> * success;
  TalkException e;

  _TalkService_getPreviousMessages_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TalkService_getProfile_args {
 public:

  TalkService_getProfile_args(const TalkService_getProfile_args&);
  TalkService_getProfile_args& operator=(const TalkService_getProfile_args&);
  TalkService_getProfile_args() {
  }

  virtual ~TalkService_getProfile_args() throw();

  bool operator == (const TalkService_getProfile_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TalkService_getProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getProfile_pargs {
 public:


  virtual ~TalkService_getProfile_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getProfile_result__isset {
  _TalkService_getProfile_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getProfile_result__isset;

class TalkService_getProfile_result {
 public:

  TalkService_getProfile_result(const TalkService_getProfile_result&);
  TalkService_getProfile_result& operator=(const TalkService_getProfile_result&);
  TalkService_getProfile_result() {
  }

  virtual ~TalkService_getProfile_result() throw();
  Profile success;
  TalkException e;

  _TalkService_getProfile_result__isset __isset;

  void __set_success(const Profile& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getProfile_presult__isset {
  _TalkService_getProfile_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getProfile_presult__isset;

class TalkService_getProfile_presult {
 public:


  virtual ~TalkService_getProfile_presult() throw();
  Profile* success;
  TalkException e;

  _TalkService_getProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getProximityMatchCandidateList_args__isset {
  _TalkService_getProximityMatchCandidateList_args__isset() : sessionId(false) {}
  bool sessionId :1;
} _TalkService_getProximityMatchCandidateList_args__isset;

class TalkService_getProximityMatchCandidateList_args {
 public:

  TalkService_getProximityMatchCandidateList_args(const TalkService_getProximityMatchCandidateList_args&);
  TalkService_getProximityMatchCandidateList_args& operator=(const TalkService_getProximityMatchCandidateList_args&);
  TalkService_getProximityMatchCandidateList_args() : sessionId() {
  }

  virtual ~TalkService_getProximityMatchCandidateList_args() throw();
  std::string sessionId;

  _TalkService_getProximityMatchCandidateList_args__isset __isset;

  void __set_sessionId(const std::string& val);

  bool operator == (const TalkService_getProximityMatchCandidateList_args & rhs) const
  {
    if (!(sessionId == rhs.sessionId))
      return false;
    return true;
  }
  bool operator != (const TalkService_getProximityMatchCandidateList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getProximityMatchCandidateList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getProximityMatchCandidateList_pargs {
 public:


  virtual ~TalkService_getProximityMatchCandidateList_pargs() throw();
  const std::string* sessionId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getProximityMatchCandidateList_result__isset {
  _TalkService_getProximityMatchCandidateList_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getProximityMatchCandidateList_result__isset;

class TalkService_getProximityMatchCandidateList_result {
 public:

  TalkService_getProximityMatchCandidateList_result(const TalkService_getProximityMatchCandidateList_result&);
  TalkService_getProximityMatchCandidateList_result& operator=(const TalkService_getProximityMatchCandidateList_result&);
  TalkService_getProximityMatchCandidateList_result() {
  }

  virtual ~TalkService_getProximityMatchCandidateList_result() throw();
  ProximityMatchCandidateResult success;
  TalkException e;

  _TalkService_getProximityMatchCandidateList_result__isset __isset;

  void __set_success(const ProximityMatchCandidateResult& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getProximityMatchCandidateList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getProximityMatchCandidateList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getProximityMatchCandidateList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getProximityMatchCandidateList_presult__isset {
  _TalkService_getProximityMatchCandidateList_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getProximityMatchCandidateList_presult__isset;

class TalkService_getProximityMatchCandidateList_presult {
 public:


  virtual ~TalkService_getProximityMatchCandidateList_presult() throw();
  ProximityMatchCandidateResult* success;
  TalkException e;

  _TalkService_getProximityMatchCandidateList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getProximityMatchCandidates_args__isset {
  _TalkService_getProximityMatchCandidates_args__isset() : sessionId(false) {}
  bool sessionId :1;
} _TalkService_getProximityMatchCandidates_args__isset;

class TalkService_getProximityMatchCandidates_args {
 public:

  TalkService_getProximityMatchCandidates_args(const TalkService_getProximityMatchCandidates_args&);
  TalkService_getProximityMatchCandidates_args& operator=(const TalkService_getProximityMatchCandidates_args&);
  TalkService_getProximityMatchCandidates_args() : sessionId() {
  }

  virtual ~TalkService_getProximityMatchCandidates_args() throw();
  std::string sessionId;

  _TalkService_getProximityMatchCandidates_args__isset __isset;

  void __set_sessionId(const std::string& val);

  bool operator == (const TalkService_getProximityMatchCandidates_args & rhs) const
  {
    if (!(sessionId == rhs.sessionId))
      return false;
    return true;
  }
  bool operator != (const TalkService_getProximityMatchCandidates_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getProximityMatchCandidates_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getProximityMatchCandidates_pargs {
 public:


  virtual ~TalkService_getProximityMatchCandidates_pargs() throw();
  const std::string* sessionId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getProximityMatchCandidates_result__isset {
  _TalkService_getProximityMatchCandidates_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getProximityMatchCandidates_result__isset;

class TalkService_getProximityMatchCandidates_result {
 public:

  TalkService_getProximityMatchCandidates_result(const TalkService_getProximityMatchCandidates_result&);
  TalkService_getProximityMatchCandidates_result& operator=(const TalkService_getProximityMatchCandidates_result&);
  TalkService_getProximityMatchCandidates_result() {
  }

  virtual ~TalkService_getProximityMatchCandidates_result() throw();
  std::set<Contact>  success;
  TalkException e;

  _TalkService_getProximityMatchCandidates_result__isset __isset;

  void __set_success(const std::set<Contact> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getProximityMatchCandidates_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getProximityMatchCandidates_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getProximityMatchCandidates_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getProximityMatchCandidates_presult__isset {
  _TalkService_getProximityMatchCandidates_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getProximityMatchCandidates_presult__isset;

class TalkService_getProximityMatchCandidates_presult {
 public:


  virtual ~TalkService_getProximityMatchCandidates_presult() throw();
  std::set<Contact> * success;
  TalkException e;

  _TalkService_getProximityMatchCandidates_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getRecentMessages_args__isset {
  _TalkService_getRecentMessages_args__isset() : messageBoxId(false), messagesCount(false) {}
  bool messageBoxId :1;
  bool messagesCount :1;
} _TalkService_getRecentMessages_args__isset;

class TalkService_getRecentMessages_args {
 public:

  TalkService_getRecentMessages_args(const TalkService_getRecentMessages_args&);
  TalkService_getRecentMessages_args& operator=(const TalkService_getRecentMessages_args&);
  TalkService_getRecentMessages_args() : messageBoxId(), messagesCount(0) {
  }

  virtual ~TalkService_getRecentMessages_args() throw();
  std::string messageBoxId;
  int32_t messagesCount;

  _TalkService_getRecentMessages_args__isset __isset;

  void __set_messageBoxId(const std::string& val);

  void __set_messagesCount(const int32_t val);

  bool operator == (const TalkService_getRecentMessages_args & rhs) const
  {
    if (!(messageBoxId == rhs.messageBoxId))
      return false;
    if (!(messagesCount == rhs.messagesCount))
      return false;
    return true;
  }
  bool operator != (const TalkService_getRecentMessages_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getRecentMessages_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getRecentMessages_pargs {
 public:


  virtual ~TalkService_getRecentMessages_pargs() throw();
  const std::string* messageBoxId;
  const int32_t* messagesCount;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getRecentMessages_result__isset {
  _TalkService_getRecentMessages_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getRecentMessages_result__isset;

class TalkService_getRecentMessages_result {
 public:

  TalkService_getRecentMessages_result(const TalkService_getRecentMessages_result&);
  TalkService_getRecentMessages_result& operator=(const TalkService_getRecentMessages_result&);
  TalkService_getRecentMessages_result() {
  }

  virtual ~TalkService_getRecentMessages_result() throw();
  std::vector<Message>  success;
  TalkException e;

  _TalkService_getRecentMessages_result__isset __isset;

  void __set_success(const std::vector<Message> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getRecentMessages_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getRecentMessages_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getRecentMessages_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getRecentMessages_presult__isset {
  _TalkService_getRecentMessages_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getRecentMessages_presult__isset;

class TalkService_getRecentMessages_presult {
 public:


  virtual ~TalkService_getRecentMessages_presult() throw();
  std::vector<Message> * success;
  TalkException e;

  _TalkService_getRecentMessages_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TalkService_getRecommendationIds_args {
 public:

  TalkService_getRecommendationIds_args(const TalkService_getRecommendationIds_args&);
  TalkService_getRecommendationIds_args& operator=(const TalkService_getRecommendationIds_args&);
  TalkService_getRecommendationIds_args() {
  }

  virtual ~TalkService_getRecommendationIds_args() throw();

  bool operator == (const TalkService_getRecommendationIds_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TalkService_getRecommendationIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getRecommendationIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getRecommendationIds_pargs {
 public:


  virtual ~TalkService_getRecommendationIds_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getRecommendationIds_result__isset {
  _TalkService_getRecommendationIds_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getRecommendationIds_result__isset;

class TalkService_getRecommendationIds_result {
 public:

  TalkService_getRecommendationIds_result(const TalkService_getRecommendationIds_result&);
  TalkService_getRecommendationIds_result& operator=(const TalkService_getRecommendationIds_result&);
  TalkService_getRecommendationIds_result() {
  }

  virtual ~TalkService_getRecommendationIds_result() throw();
  std::vector<std::string>  success;
  TalkException e;

  _TalkService_getRecommendationIds_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getRecommendationIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getRecommendationIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getRecommendationIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getRecommendationIds_presult__isset {
  _TalkService_getRecommendationIds_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getRecommendationIds_presult__isset;

class TalkService_getRecommendationIds_presult {
 public:


  virtual ~TalkService_getRecommendationIds_presult() throw();
  std::vector<std::string> * success;
  TalkException e;

  _TalkService_getRecommendationIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getRoom_args__isset {
  _TalkService_getRoom_args__isset() : roomId(false) {}
  bool roomId :1;
} _TalkService_getRoom_args__isset;

class TalkService_getRoom_args {
 public:

  TalkService_getRoom_args(const TalkService_getRoom_args&);
  TalkService_getRoom_args& operator=(const TalkService_getRoom_args&);
  TalkService_getRoom_args() : roomId() {
  }

  virtual ~TalkService_getRoom_args() throw();
  std::string roomId;

  _TalkService_getRoom_args__isset __isset;

  void __set_roomId(const std::string& val);

  bool operator == (const TalkService_getRoom_args & rhs) const
  {
    if (!(roomId == rhs.roomId))
      return false;
    return true;
  }
  bool operator != (const TalkService_getRoom_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getRoom_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getRoom_pargs {
 public:


  virtual ~TalkService_getRoom_pargs() throw();
  const std::string* roomId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getRoom_result__isset {
  _TalkService_getRoom_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getRoom_result__isset;

class TalkService_getRoom_result {
 public:

  TalkService_getRoom_result(const TalkService_getRoom_result&);
  TalkService_getRoom_result& operator=(const TalkService_getRoom_result&);
  TalkService_getRoom_result() {
  }

  virtual ~TalkService_getRoom_result() throw();
  Room success;
  TalkException e;

  _TalkService_getRoom_result__isset __isset;

  void __set_success(const Room& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getRoom_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getRoom_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getRoom_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getRoom_presult__isset {
  _TalkService_getRoom_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getRoom_presult__isset;

class TalkService_getRoom_presult {
 public:


  virtual ~TalkService_getRoom_presult() throw();
  Room* success;
  TalkException e;

  _TalkService_getRoom_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getRSAKeyInfo_args__isset {
  _TalkService_getRSAKeyInfo_args__isset() : provider(false) {}
  bool provider :1;
} _TalkService_getRSAKeyInfo_args__isset;

class TalkService_getRSAKeyInfo_args {
 public:

  TalkService_getRSAKeyInfo_args(const TalkService_getRSAKeyInfo_args&);
  TalkService_getRSAKeyInfo_args& operator=(const TalkService_getRSAKeyInfo_args&);
  TalkService_getRSAKeyInfo_args() : provider((IdentityProvider::type)0) {
  }

  virtual ~TalkService_getRSAKeyInfo_args() throw();
  IdentityProvider::type provider;

  _TalkService_getRSAKeyInfo_args__isset __isset;

  void __set_provider(const IdentityProvider::type val);

  bool operator == (const TalkService_getRSAKeyInfo_args & rhs) const
  {
    if (!(provider == rhs.provider))
      return false;
    return true;
  }
  bool operator != (const TalkService_getRSAKeyInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getRSAKeyInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getRSAKeyInfo_pargs {
 public:


  virtual ~TalkService_getRSAKeyInfo_pargs() throw();
  const IdentityProvider::type* provider;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getRSAKeyInfo_result__isset {
  _TalkService_getRSAKeyInfo_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getRSAKeyInfo_result__isset;

class TalkService_getRSAKeyInfo_result {
 public:

  TalkService_getRSAKeyInfo_result(const TalkService_getRSAKeyInfo_result&);
  TalkService_getRSAKeyInfo_result& operator=(const TalkService_getRSAKeyInfo_result&);
  TalkService_getRSAKeyInfo_result() {
  }

  virtual ~TalkService_getRSAKeyInfo_result() throw();
  RSAKey success;
  TalkException e;

  _TalkService_getRSAKeyInfo_result__isset __isset;

  void __set_success(const RSAKey& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getRSAKeyInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getRSAKeyInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getRSAKeyInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getRSAKeyInfo_presult__isset {
  _TalkService_getRSAKeyInfo_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getRSAKeyInfo_presult__isset;

class TalkService_getRSAKeyInfo_presult {
 public:


  virtual ~TalkService_getRSAKeyInfo_presult() throw();
  RSAKey* success;
  TalkException e;

  _TalkService_getRSAKeyInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TalkService_getServerTime_args {
 public:

  TalkService_getServerTime_args(const TalkService_getServerTime_args&);
  TalkService_getServerTime_args& operator=(const TalkService_getServerTime_args&);
  TalkService_getServerTime_args() {
  }

  virtual ~TalkService_getServerTime_args() throw();

  bool operator == (const TalkService_getServerTime_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TalkService_getServerTime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getServerTime_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getServerTime_pargs {
 public:


  virtual ~TalkService_getServerTime_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getServerTime_result__isset {
  _TalkService_getServerTime_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getServerTime_result__isset;

class TalkService_getServerTime_result {
 public:

  TalkService_getServerTime_result(const TalkService_getServerTime_result&);
  TalkService_getServerTime_result& operator=(const TalkService_getServerTime_result&);
  TalkService_getServerTime_result() : success(0) {
  }

  virtual ~TalkService_getServerTime_result() throw();
  int64_t success;
  TalkException e;

  _TalkService_getServerTime_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getServerTime_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getServerTime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getServerTime_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getServerTime_presult__isset {
  _TalkService_getServerTime_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getServerTime_presult__isset;

class TalkService_getServerTime_presult {
 public:


  virtual ~TalkService_getServerTime_presult() throw();
  int64_t* success;
  TalkException e;

  _TalkService_getServerTime_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TalkService_getSessions_args {
 public:

  TalkService_getSessions_args(const TalkService_getSessions_args&);
  TalkService_getSessions_args& operator=(const TalkService_getSessions_args&);
  TalkService_getSessions_args() {
  }

  virtual ~TalkService_getSessions_args() throw();

  bool operator == (const TalkService_getSessions_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TalkService_getSessions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getSessions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getSessions_pargs {
 public:


  virtual ~TalkService_getSessions_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getSessions_result__isset {
  _TalkService_getSessions_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getSessions_result__isset;

class TalkService_getSessions_result {
 public:

  TalkService_getSessions_result(const TalkService_getSessions_result&);
  TalkService_getSessions_result& operator=(const TalkService_getSessions_result&);
  TalkService_getSessions_result() {
  }

  virtual ~TalkService_getSessions_result() throw();
  std::vector<LoginSession>  success;
  TalkException e;

  _TalkService_getSessions_result__isset __isset;

  void __set_success(const std::vector<LoginSession> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getSessions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getSessions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getSessions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getSessions_presult__isset {
  _TalkService_getSessions_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getSessions_presult__isset;

class TalkService_getSessions_presult {
 public:


  virtual ~TalkService_getSessions_presult() throw();
  std::vector<LoginSession> * success;
  TalkException e;

  _TalkService_getSessions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TalkService_getSettings_args {
 public:

  TalkService_getSettings_args(const TalkService_getSettings_args&);
  TalkService_getSettings_args& operator=(const TalkService_getSettings_args&);
  TalkService_getSettings_args() {
  }

  virtual ~TalkService_getSettings_args() throw();

  bool operator == (const TalkService_getSettings_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TalkService_getSettings_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getSettings_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getSettings_pargs {
 public:


  virtual ~TalkService_getSettings_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getSettings_result__isset {
  _TalkService_getSettings_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getSettings_result__isset;

class TalkService_getSettings_result {
 public:

  TalkService_getSettings_result(const TalkService_getSettings_result&);
  TalkService_getSettings_result& operator=(const TalkService_getSettings_result&);
  TalkService_getSettings_result() {
  }

  virtual ~TalkService_getSettings_result() throw();
  Settings success;
  TalkException e;

  _TalkService_getSettings_result__isset __isset;

  void __set_success(const Settings& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getSettings_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getSettings_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getSettings_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getSettings_presult__isset {
  _TalkService_getSettings_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getSettings_presult__isset;

class TalkService_getSettings_presult {
 public:


  virtual ~TalkService_getSettings_presult() throw();
  Settings* success;
  TalkException e;

  _TalkService_getSettings_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getGroupsV2_args__isset {
  _TalkService_getGroupsV2_args__isset() : groupIds(false) {}
  bool groupIds :1;
} _TalkService_getGroupsV2_args__isset;

class TalkService_getGroupsV2_args {
 public:

  TalkService_getGroupsV2_args(const TalkService_getGroupsV2_args&);
  TalkService_getGroupsV2_args& operator=(const TalkService_getGroupsV2_args&);
  TalkService_getGroupsV2_args() {
  }

  virtual ~TalkService_getGroupsV2_args() throw();
  std::vector<std::string>  groupIds;

  _TalkService_getGroupsV2_args__isset __isset;

  void __set_groupIds(const std::vector<std::string> & val);

  bool operator == (const TalkService_getGroupsV2_args & rhs) const
  {
    if (!(groupIds == rhs.groupIds))
      return false;
    return true;
  }
  bool operator != (const TalkService_getGroupsV2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getGroupsV2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getGroupsV2_pargs {
 public:


  virtual ~TalkService_getGroupsV2_pargs() throw();
  const std::vector<std::string> * groupIds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getGroupsV2_result__isset {
  _TalkService_getGroupsV2_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getGroupsV2_result__isset;

class TalkService_getGroupsV2_result {
 public:

  TalkService_getGroupsV2_result(const TalkService_getGroupsV2_result&);
  TalkService_getGroupsV2_result& operator=(const TalkService_getGroupsV2_result&);
  TalkService_getGroupsV2_result() {
  }

  virtual ~TalkService_getGroupsV2_result() throw();
  std::vector<Group>  success;
  TalkException e;

  _TalkService_getGroupsV2_result__isset __isset;

  void __set_success(const std::vector<Group> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getGroupsV2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getGroupsV2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getGroupsV2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getGroupsV2_presult__isset {
  _TalkService_getGroupsV2_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getGroupsV2_presult__isset;

class TalkService_getGroupsV2_presult {
 public:


  virtual ~TalkService_getGroupsV2_presult() throw();
  std::vector<Group> * success;
  TalkException e;

  _TalkService_getGroupsV2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getSettingsAttributes_args__isset {
  _TalkService_getSettingsAttributes_args__isset() : attrBitset(false) {}
  bool attrBitset :1;
} _TalkService_getSettingsAttributes_args__isset;

class TalkService_getSettingsAttributes_args {
 public:

  TalkService_getSettingsAttributes_args(const TalkService_getSettingsAttributes_args&);
  TalkService_getSettingsAttributes_args& operator=(const TalkService_getSettingsAttributes_args&);
  TalkService_getSettingsAttributes_args() : attrBitset(0) {
  }

  virtual ~TalkService_getSettingsAttributes_args() throw();
  int32_t attrBitset;

  _TalkService_getSettingsAttributes_args__isset __isset;

  void __set_attrBitset(const int32_t val);

  bool operator == (const TalkService_getSettingsAttributes_args & rhs) const
  {
    if (!(attrBitset == rhs.attrBitset))
      return false;
    return true;
  }
  bool operator != (const TalkService_getSettingsAttributes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getSettingsAttributes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getSettingsAttributes_pargs {
 public:


  virtual ~TalkService_getSettingsAttributes_pargs() throw();
  const int32_t* attrBitset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getSettingsAttributes_result__isset {
  _TalkService_getSettingsAttributes_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getSettingsAttributes_result__isset;

class TalkService_getSettingsAttributes_result {
 public:

  TalkService_getSettingsAttributes_result(const TalkService_getSettingsAttributes_result&);
  TalkService_getSettingsAttributes_result& operator=(const TalkService_getSettingsAttributes_result&);
  TalkService_getSettingsAttributes_result() {
  }

  virtual ~TalkService_getSettingsAttributes_result() throw();
  Settings success;
  TalkException e;

  _TalkService_getSettingsAttributes_result__isset __isset;

  void __set_success(const Settings& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getSettingsAttributes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getSettingsAttributes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getSettingsAttributes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getSettingsAttributes_presult__isset {
  _TalkService_getSettingsAttributes_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getSettingsAttributes_presult__isset;

class TalkService_getSettingsAttributes_presult {
 public:


  virtual ~TalkService_getSettingsAttributes_presult() throw();
  Settings* success;
  TalkException e;

  _TalkService_getSettingsAttributes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TalkService_getSystemConfiguration_args {
 public:

  TalkService_getSystemConfiguration_args(const TalkService_getSystemConfiguration_args&);
  TalkService_getSystemConfiguration_args& operator=(const TalkService_getSystemConfiguration_args&);
  TalkService_getSystemConfiguration_args() {
  }

  virtual ~TalkService_getSystemConfiguration_args() throw();

  bool operator == (const TalkService_getSystemConfiguration_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TalkService_getSystemConfiguration_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getSystemConfiguration_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getSystemConfiguration_pargs {
 public:


  virtual ~TalkService_getSystemConfiguration_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getSystemConfiguration_result__isset {
  _TalkService_getSystemConfiguration_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getSystemConfiguration_result__isset;

class TalkService_getSystemConfiguration_result {
 public:

  TalkService_getSystemConfiguration_result(const TalkService_getSystemConfiguration_result&);
  TalkService_getSystemConfiguration_result& operator=(const TalkService_getSystemConfiguration_result&);
  TalkService_getSystemConfiguration_result() {
  }

  virtual ~TalkService_getSystemConfiguration_result() throw();
  SystemConfiguration success;
  TalkException e;

  _TalkService_getSystemConfiguration_result__isset __isset;

  void __set_success(const SystemConfiguration& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getSystemConfiguration_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getSystemConfiguration_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getSystemConfiguration_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getSystemConfiguration_presult__isset {
  _TalkService_getSystemConfiguration_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getSystemConfiguration_presult__isset;

class TalkService_getSystemConfiguration_presult {
 public:


  virtual ~TalkService_getSystemConfiguration_presult() throw();
  SystemConfiguration* success;
  TalkException e;

  _TalkService_getSystemConfiguration_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TalkService_getUserTicket_args {
 public:

  TalkService_getUserTicket_args(const TalkService_getUserTicket_args&);
  TalkService_getUserTicket_args& operator=(const TalkService_getUserTicket_args&);
  TalkService_getUserTicket_args() {
  }

  virtual ~TalkService_getUserTicket_args() throw();

  bool operator == (const TalkService_getUserTicket_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TalkService_getUserTicket_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getUserTicket_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getUserTicket_pargs {
 public:


  virtual ~TalkService_getUserTicket_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getUserTicket_result__isset {
  _TalkService_getUserTicket_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getUserTicket_result__isset;

class TalkService_getUserTicket_result {
 public:

  TalkService_getUserTicket_result(const TalkService_getUserTicket_result&);
  TalkService_getUserTicket_result& operator=(const TalkService_getUserTicket_result&);
  TalkService_getUserTicket_result() {
  }

  virtual ~TalkService_getUserTicket_result() throw();
  Ticket success;
  TalkException e;

  _TalkService_getUserTicket_result__isset __isset;

  void __set_success(const Ticket& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getUserTicket_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getUserTicket_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getUserTicket_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getUserTicket_presult__isset {
  _TalkService_getUserTicket_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getUserTicket_presult__isset;

class TalkService_getUserTicket_presult {
 public:


  virtual ~TalkService_getUserTicket_presult() throw();
  Ticket* success;
  TalkException e;

  _TalkService_getUserTicket_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getWapInvitation_args__isset {
  _TalkService_getWapInvitation_args__isset() : invitationHash(false) {}
  bool invitationHash :1;
} _TalkService_getWapInvitation_args__isset;

class TalkService_getWapInvitation_args {
 public:

  TalkService_getWapInvitation_args(const TalkService_getWapInvitation_args&);
  TalkService_getWapInvitation_args& operator=(const TalkService_getWapInvitation_args&);
  TalkService_getWapInvitation_args() : invitationHash() {
  }

  virtual ~TalkService_getWapInvitation_args() throw();
  std::string invitationHash;

  _TalkService_getWapInvitation_args__isset __isset;

  void __set_invitationHash(const std::string& val);

  bool operator == (const TalkService_getWapInvitation_args & rhs) const
  {
    if (!(invitationHash == rhs.invitationHash))
      return false;
    return true;
  }
  bool operator != (const TalkService_getWapInvitation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getWapInvitation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getWapInvitation_pargs {
 public:


  virtual ~TalkService_getWapInvitation_pargs() throw();
  const std::string* invitationHash;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getWapInvitation_result__isset {
  _TalkService_getWapInvitation_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getWapInvitation_result__isset;

class TalkService_getWapInvitation_result {
 public:

  TalkService_getWapInvitation_result(const TalkService_getWapInvitation_result&);
  TalkService_getWapInvitation_result& operator=(const TalkService_getWapInvitation_result&);
  TalkService_getWapInvitation_result() {
  }

  virtual ~TalkService_getWapInvitation_result() throw();
  WapInvitation success;
  TalkException e;

  _TalkService_getWapInvitation_result__isset __isset;

  void __set_success(const WapInvitation& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getWapInvitation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getWapInvitation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getWapInvitation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getWapInvitation_presult__isset {
  _TalkService_getWapInvitation_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getWapInvitation_presult__isset;

class TalkService_getWapInvitation_presult {
 public:


  virtual ~TalkService_getWapInvitation_presult() throw();
  WapInvitation* success;
  TalkException e;

  _TalkService_getWapInvitation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TalkService_invalidateUserTicket_args {
 public:

  TalkService_invalidateUserTicket_args(const TalkService_invalidateUserTicket_args&);
  TalkService_invalidateUserTicket_args& operator=(const TalkService_invalidateUserTicket_args&);
  TalkService_invalidateUserTicket_args() {
  }

  virtual ~TalkService_invalidateUserTicket_args() throw();

  bool operator == (const TalkService_invalidateUserTicket_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TalkService_invalidateUserTicket_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_invalidateUserTicket_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_invalidateUserTicket_pargs {
 public:


  virtual ~TalkService_invalidateUserTicket_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_invalidateUserTicket_result__isset {
  _TalkService_invalidateUserTicket_result__isset() : e(false) {}
  bool e :1;
} _TalkService_invalidateUserTicket_result__isset;

class TalkService_invalidateUserTicket_result {
 public:

  TalkService_invalidateUserTicket_result(const TalkService_invalidateUserTicket_result&);
  TalkService_invalidateUserTicket_result& operator=(const TalkService_invalidateUserTicket_result&);
  TalkService_invalidateUserTicket_result() {
  }

  virtual ~TalkService_invalidateUserTicket_result() throw();
  TalkException e;

  _TalkService_invalidateUserTicket_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_invalidateUserTicket_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_invalidateUserTicket_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_invalidateUserTicket_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_invalidateUserTicket_presult__isset {
  _TalkService_invalidateUserTicket_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_invalidateUserTicket_presult__isset;

class TalkService_invalidateUserTicket_presult {
 public:


  virtual ~TalkService_invalidateUserTicket_presult() throw();
  TalkException e;

  _TalkService_invalidateUserTicket_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_inviteFriendsBySms_args__isset {
  _TalkService_inviteFriendsBySms_args__isset() : phoneNumberList(false) {}
  bool phoneNumberList :1;
} _TalkService_inviteFriendsBySms_args__isset;

class TalkService_inviteFriendsBySms_args {
 public:

  TalkService_inviteFriendsBySms_args(const TalkService_inviteFriendsBySms_args&);
  TalkService_inviteFriendsBySms_args& operator=(const TalkService_inviteFriendsBySms_args&);
  TalkService_inviteFriendsBySms_args() {
  }

  virtual ~TalkService_inviteFriendsBySms_args() throw();
  std::vector<std::string>  phoneNumberList;

  _TalkService_inviteFriendsBySms_args__isset __isset;

  void __set_phoneNumberList(const std::vector<std::string> & val);

  bool operator == (const TalkService_inviteFriendsBySms_args & rhs) const
  {
    if (!(phoneNumberList == rhs.phoneNumberList))
      return false;
    return true;
  }
  bool operator != (const TalkService_inviteFriendsBySms_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_inviteFriendsBySms_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_inviteFriendsBySms_pargs {
 public:


  virtual ~TalkService_inviteFriendsBySms_pargs() throw();
  const std::vector<std::string> * phoneNumberList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_inviteFriendsBySms_result__isset {
  _TalkService_inviteFriendsBySms_result__isset() : e(false) {}
  bool e :1;
} _TalkService_inviteFriendsBySms_result__isset;

class TalkService_inviteFriendsBySms_result {
 public:

  TalkService_inviteFriendsBySms_result(const TalkService_inviteFriendsBySms_result&);
  TalkService_inviteFriendsBySms_result& operator=(const TalkService_inviteFriendsBySms_result&);
  TalkService_inviteFriendsBySms_result() {
  }

  virtual ~TalkService_inviteFriendsBySms_result() throw();
  TalkException e;

  _TalkService_inviteFriendsBySms_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_inviteFriendsBySms_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_inviteFriendsBySms_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_inviteFriendsBySms_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_inviteFriendsBySms_presult__isset {
  _TalkService_inviteFriendsBySms_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_inviteFriendsBySms_presult__isset;

class TalkService_inviteFriendsBySms_presult {
 public:


  virtual ~TalkService_inviteFriendsBySms_presult() throw();
  TalkException e;

  _TalkService_inviteFriendsBySms_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_inviteIntoGroup_args__isset {
  _TalkService_inviteIntoGroup_args__isset() : reqSeq(false), groupId(false), contactIds(false) {}
  bool reqSeq :1;
  bool groupId :1;
  bool contactIds :1;
} _TalkService_inviteIntoGroup_args__isset;

class TalkService_inviteIntoGroup_args {
 public:

  TalkService_inviteIntoGroup_args(const TalkService_inviteIntoGroup_args&);
  TalkService_inviteIntoGroup_args& operator=(const TalkService_inviteIntoGroup_args&);
  TalkService_inviteIntoGroup_args() : reqSeq(0), groupId() {
  }

  virtual ~TalkService_inviteIntoGroup_args() throw();
  int32_t reqSeq;
  std::string groupId;
  std::vector<std::string>  contactIds;

  _TalkService_inviteIntoGroup_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_groupId(const std::string& val);

  void __set_contactIds(const std::vector<std::string> & val);

  bool operator == (const TalkService_inviteIntoGroup_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(groupId == rhs.groupId))
      return false;
    if (!(contactIds == rhs.contactIds))
      return false;
    return true;
  }
  bool operator != (const TalkService_inviteIntoGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_inviteIntoGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_inviteIntoGroup_pargs {
 public:


  virtual ~TalkService_inviteIntoGroup_pargs() throw();
  const int32_t* reqSeq;
  const std::string* groupId;
  const std::vector<std::string> * contactIds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_inviteIntoGroup_result__isset {
  _TalkService_inviteIntoGroup_result__isset() : e(false) {}
  bool e :1;
} _TalkService_inviteIntoGroup_result__isset;

class TalkService_inviteIntoGroup_result {
 public:

  TalkService_inviteIntoGroup_result(const TalkService_inviteIntoGroup_result&);
  TalkService_inviteIntoGroup_result& operator=(const TalkService_inviteIntoGroup_result&);
  TalkService_inviteIntoGroup_result() {
  }

  virtual ~TalkService_inviteIntoGroup_result() throw();
  TalkException e;

  _TalkService_inviteIntoGroup_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_inviteIntoGroup_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_inviteIntoGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_inviteIntoGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_inviteIntoGroup_presult__isset {
  _TalkService_inviteIntoGroup_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_inviteIntoGroup_presult__isset;

class TalkService_inviteIntoGroup_presult {
 public:


  virtual ~TalkService_inviteIntoGroup_presult() throw();
  TalkException e;

  _TalkService_inviteIntoGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_inviteIntoRoom_args__isset {
  _TalkService_inviteIntoRoom_args__isset() : reqSeq(false), roomId(false), contactIds(false) {}
  bool reqSeq :1;
  bool roomId :1;
  bool contactIds :1;
} _TalkService_inviteIntoRoom_args__isset;

class TalkService_inviteIntoRoom_args {
 public:

  TalkService_inviteIntoRoom_args(const TalkService_inviteIntoRoom_args&);
  TalkService_inviteIntoRoom_args& operator=(const TalkService_inviteIntoRoom_args&);
  TalkService_inviteIntoRoom_args() : reqSeq(0), roomId() {
  }

  virtual ~TalkService_inviteIntoRoom_args() throw();
  int32_t reqSeq;
  std::string roomId;
  std::vector<std::string>  contactIds;

  _TalkService_inviteIntoRoom_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_roomId(const std::string& val);

  void __set_contactIds(const std::vector<std::string> & val);

  bool operator == (const TalkService_inviteIntoRoom_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(roomId == rhs.roomId))
      return false;
    if (!(contactIds == rhs.contactIds))
      return false;
    return true;
  }
  bool operator != (const TalkService_inviteIntoRoom_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_inviteIntoRoom_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_inviteIntoRoom_pargs {
 public:


  virtual ~TalkService_inviteIntoRoom_pargs() throw();
  const int32_t* reqSeq;
  const std::string* roomId;
  const std::vector<std::string> * contactIds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_inviteIntoRoom_result__isset {
  _TalkService_inviteIntoRoom_result__isset() : e(false) {}
  bool e :1;
} _TalkService_inviteIntoRoom_result__isset;

class TalkService_inviteIntoRoom_result {
 public:

  TalkService_inviteIntoRoom_result(const TalkService_inviteIntoRoom_result&);
  TalkService_inviteIntoRoom_result& operator=(const TalkService_inviteIntoRoom_result&);
  TalkService_inviteIntoRoom_result() {
  }

  virtual ~TalkService_inviteIntoRoom_result() throw();
  TalkException e;

  _TalkService_inviteIntoRoom_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_inviteIntoRoom_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_inviteIntoRoom_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_inviteIntoRoom_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_inviteIntoRoom_presult__isset {
  _TalkService_inviteIntoRoom_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_inviteIntoRoom_presult__isset;

class TalkService_inviteIntoRoom_presult {
 public:


  virtual ~TalkService_inviteIntoRoom_presult() throw();
  TalkException e;

  _TalkService_inviteIntoRoom_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_inviteViaEmail_args__isset {
  _TalkService_inviteViaEmail_args__isset() : reqSeq(false), email(false), name(false) {}
  bool reqSeq :1;
  bool email :1;
  bool name :1;
} _TalkService_inviteViaEmail_args__isset;

class TalkService_inviteViaEmail_args {
 public:

  TalkService_inviteViaEmail_args(const TalkService_inviteViaEmail_args&);
  TalkService_inviteViaEmail_args& operator=(const TalkService_inviteViaEmail_args&);
  TalkService_inviteViaEmail_args() : reqSeq(0), email(), name() {
  }

  virtual ~TalkService_inviteViaEmail_args() throw();
  int32_t reqSeq;
  std::string email;
  std::string name;

  _TalkService_inviteViaEmail_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_email(const std::string& val);

  void __set_name(const std::string& val);

  bool operator == (const TalkService_inviteViaEmail_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(email == rhs.email))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const TalkService_inviteViaEmail_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_inviteViaEmail_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_inviteViaEmail_pargs {
 public:


  virtual ~TalkService_inviteViaEmail_pargs() throw();
  const int32_t* reqSeq;
  const std::string* email;
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_inviteViaEmail_result__isset {
  _TalkService_inviteViaEmail_result__isset() : e(false) {}
  bool e :1;
} _TalkService_inviteViaEmail_result__isset;

class TalkService_inviteViaEmail_result {
 public:

  TalkService_inviteViaEmail_result(const TalkService_inviteViaEmail_result&);
  TalkService_inviteViaEmail_result& operator=(const TalkService_inviteViaEmail_result&);
  TalkService_inviteViaEmail_result() {
  }

  virtual ~TalkService_inviteViaEmail_result() throw();
  TalkException e;

  _TalkService_inviteViaEmail_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_inviteViaEmail_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_inviteViaEmail_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_inviteViaEmail_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_inviteViaEmail_presult__isset {
  _TalkService_inviteViaEmail_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_inviteViaEmail_presult__isset;

class TalkService_inviteViaEmail_presult {
 public:


  virtual ~TalkService_inviteViaEmail_presult() throw();
  TalkException e;

  _TalkService_inviteViaEmail_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_isIdentityIdentifierAvailable_args__isset {
  _TalkService_isIdentityIdentifierAvailable_args__isset() : provider(false), identifier(false) {}
  bool provider :1;
  bool identifier :1;
} _TalkService_isIdentityIdentifierAvailable_args__isset;

class TalkService_isIdentityIdentifierAvailable_args {
 public:

  TalkService_isIdentityIdentifierAvailable_args(const TalkService_isIdentityIdentifierAvailable_args&);
  TalkService_isIdentityIdentifierAvailable_args& operator=(const TalkService_isIdentityIdentifierAvailable_args&);
  TalkService_isIdentityIdentifierAvailable_args() : provider((IdentityProvider::type)0), identifier() {
  }

  virtual ~TalkService_isIdentityIdentifierAvailable_args() throw();
  IdentityProvider::type provider;
  std::string identifier;

  _TalkService_isIdentityIdentifierAvailable_args__isset __isset;

  void __set_provider(const IdentityProvider::type val);

  void __set_identifier(const std::string& val);

  bool operator == (const TalkService_isIdentityIdentifierAvailable_args & rhs) const
  {
    if (!(provider == rhs.provider))
      return false;
    if (!(identifier == rhs.identifier))
      return false;
    return true;
  }
  bool operator != (const TalkService_isIdentityIdentifierAvailable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_isIdentityIdentifierAvailable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_isIdentityIdentifierAvailable_pargs {
 public:


  virtual ~TalkService_isIdentityIdentifierAvailable_pargs() throw();
  const IdentityProvider::type* provider;
  const std::string* identifier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_isIdentityIdentifierAvailable_result__isset {
  _TalkService_isIdentityIdentifierAvailable_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_isIdentityIdentifierAvailable_result__isset;

class TalkService_isIdentityIdentifierAvailable_result {
 public:

  TalkService_isIdentityIdentifierAvailable_result(const TalkService_isIdentityIdentifierAvailable_result&);
  TalkService_isIdentityIdentifierAvailable_result& operator=(const TalkService_isIdentityIdentifierAvailable_result&);
  TalkService_isIdentityIdentifierAvailable_result() : success(0) {
  }

  virtual ~TalkService_isIdentityIdentifierAvailable_result() throw();
  bool success;
  TalkException e;

  _TalkService_isIdentityIdentifierAvailable_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_isIdentityIdentifierAvailable_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_isIdentityIdentifierAvailable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_isIdentityIdentifierAvailable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_isIdentityIdentifierAvailable_presult__isset {
  _TalkService_isIdentityIdentifierAvailable_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_isIdentityIdentifierAvailable_presult__isset;

class TalkService_isIdentityIdentifierAvailable_presult {
 public:


  virtual ~TalkService_isIdentityIdentifierAvailable_presult() throw();
  bool* success;
  TalkException e;

  _TalkService_isIdentityIdentifierAvailable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_isUseridAvailable_args__isset {
  _TalkService_isUseridAvailable_args__isset() : userid(false) {}
  bool userid :1;
} _TalkService_isUseridAvailable_args__isset;

class TalkService_isUseridAvailable_args {
 public:

  TalkService_isUseridAvailable_args(const TalkService_isUseridAvailable_args&);
  TalkService_isUseridAvailable_args& operator=(const TalkService_isUseridAvailable_args&);
  TalkService_isUseridAvailable_args() : userid() {
  }

  virtual ~TalkService_isUseridAvailable_args() throw();
  std::string userid;

  _TalkService_isUseridAvailable_args__isset __isset;

  void __set_userid(const std::string& val);

  bool operator == (const TalkService_isUseridAvailable_args & rhs) const
  {
    if (!(userid == rhs.userid))
      return false;
    return true;
  }
  bool operator != (const TalkService_isUseridAvailable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_isUseridAvailable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_isUseridAvailable_pargs {
 public:


  virtual ~TalkService_isUseridAvailable_pargs() throw();
  const std::string* userid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_isUseridAvailable_result__isset {
  _TalkService_isUseridAvailable_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_isUseridAvailable_result__isset;

class TalkService_isUseridAvailable_result {
 public:

  TalkService_isUseridAvailable_result(const TalkService_isUseridAvailable_result&);
  TalkService_isUseridAvailable_result& operator=(const TalkService_isUseridAvailable_result&);
  TalkService_isUseridAvailable_result() : success(0) {
  }

  virtual ~TalkService_isUseridAvailable_result() throw();
  bool success;
  TalkException e;

  _TalkService_isUseridAvailable_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_isUseridAvailable_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_isUseridAvailable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_isUseridAvailable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_isUseridAvailable_presult__isset {
  _TalkService_isUseridAvailable_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_isUseridAvailable_presult__isset;

class TalkService_isUseridAvailable_presult {
 public:


  virtual ~TalkService_isUseridAvailable_presult() throw();
  bool* success;
  TalkException e;

  _TalkService_isUseridAvailable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_kickoutFromGroup_args__isset {
  _TalkService_kickoutFromGroup_args__isset() : reqSeq(false), groupId(false), contactIds(false) {}
  bool reqSeq :1;
  bool groupId :1;
  bool contactIds :1;
} _TalkService_kickoutFromGroup_args__isset;

class TalkService_kickoutFromGroup_args {
 public:

  TalkService_kickoutFromGroup_args(const TalkService_kickoutFromGroup_args&);
  TalkService_kickoutFromGroup_args& operator=(const TalkService_kickoutFromGroup_args&);
  TalkService_kickoutFromGroup_args() : reqSeq(0), groupId() {
  }

  virtual ~TalkService_kickoutFromGroup_args() throw();
  int32_t reqSeq;
  std::string groupId;
  std::vector<std::string>  contactIds;

  _TalkService_kickoutFromGroup_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_groupId(const std::string& val);

  void __set_contactIds(const std::vector<std::string> & val);

  bool operator == (const TalkService_kickoutFromGroup_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(groupId == rhs.groupId))
      return false;
    if (!(contactIds == rhs.contactIds))
      return false;
    return true;
  }
  bool operator != (const TalkService_kickoutFromGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_kickoutFromGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_kickoutFromGroup_pargs {
 public:


  virtual ~TalkService_kickoutFromGroup_pargs() throw();
  const int32_t* reqSeq;
  const std::string* groupId;
  const std::vector<std::string> * contactIds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_kickoutFromGroup_result__isset {
  _TalkService_kickoutFromGroup_result__isset() : e(false) {}
  bool e :1;
} _TalkService_kickoutFromGroup_result__isset;

class TalkService_kickoutFromGroup_result {
 public:

  TalkService_kickoutFromGroup_result(const TalkService_kickoutFromGroup_result&);
  TalkService_kickoutFromGroup_result& operator=(const TalkService_kickoutFromGroup_result&);
  TalkService_kickoutFromGroup_result() {
  }

  virtual ~TalkService_kickoutFromGroup_result() throw();
  TalkException e;

  _TalkService_kickoutFromGroup_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_kickoutFromGroup_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_kickoutFromGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_kickoutFromGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_kickoutFromGroup_presult__isset {
  _TalkService_kickoutFromGroup_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_kickoutFromGroup_presult__isset;

class TalkService_kickoutFromGroup_presult {
 public:


  virtual ~TalkService_kickoutFromGroup_presult() throw();
  TalkException e;

  _TalkService_kickoutFromGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_reissueGroupTicket_args__isset {
  _TalkService_reissueGroupTicket_args__isset() : groupMid(false) {}
  bool groupMid :1;
} _TalkService_reissueGroupTicket_args__isset;

class TalkService_reissueGroupTicket_args {
 public:

  TalkService_reissueGroupTicket_args(const TalkService_reissueGroupTicket_args&);
  TalkService_reissueGroupTicket_args& operator=(const TalkService_reissueGroupTicket_args&);
  TalkService_reissueGroupTicket_args() : groupMid() {
  }

  virtual ~TalkService_reissueGroupTicket_args() throw();
  std::string groupMid;

  _TalkService_reissueGroupTicket_args__isset __isset;

  void __set_groupMid(const std::string& val);

  bool operator == (const TalkService_reissueGroupTicket_args & rhs) const
  {
    if (!(groupMid == rhs.groupMid))
      return false;
    return true;
  }
  bool operator != (const TalkService_reissueGroupTicket_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_reissueGroupTicket_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_reissueGroupTicket_pargs {
 public:


  virtual ~TalkService_reissueGroupTicket_pargs() throw();
  const std::string* groupMid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_reissueGroupTicket_result__isset {
  _TalkService_reissueGroupTicket_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_reissueGroupTicket_result__isset;

class TalkService_reissueGroupTicket_result {
 public:

  TalkService_reissueGroupTicket_result(const TalkService_reissueGroupTicket_result&);
  TalkService_reissueGroupTicket_result& operator=(const TalkService_reissueGroupTicket_result&);
  TalkService_reissueGroupTicket_result() : success() {
  }

  virtual ~TalkService_reissueGroupTicket_result() throw();
  std::string success;
  TalkException e;

  _TalkService_reissueGroupTicket_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_reissueGroupTicket_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_reissueGroupTicket_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_reissueGroupTicket_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_reissueGroupTicket_presult__isset {
  _TalkService_reissueGroupTicket_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_reissueGroupTicket_presult__isset;

class TalkService_reissueGroupTicket_presult {
 public:


  virtual ~TalkService_reissueGroupTicket_presult() throw();
  std::string* success;
  TalkException e;

  _TalkService_reissueGroupTicket_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_findGroupByTicket_args__isset {
  _TalkService_findGroupByTicket_args__isset() : ticketId(false) {}
  bool ticketId :1;
} _TalkService_findGroupByTicket_args__isset;

class TalkService_findGroupByTicket_args {
 public:

  TalkService_findGroupByTicket_args(const TalkService_findGroupByTicket_args&);
  TalkService_findGroupByTicket_args& operator=(const TalkService_findGroupByTicket_args&);
  TalkService_findGroupByTicket_args() : ticketId() {
  }

  virtual ~TalkService_findGroupByTicket_args() throw();
  std::string ticketId;

  _TalkService_findGroupByTicket_args__isset __isset;

  void __set_ticketId(const std::string& val);

  bool operator == (const TalkService_findGroupByTicket_args & rhs) const
  {
    if (!(ticketId == rhs.ticketId))
      return false;
    return true;
  }
  bool operator != (const TalkService_findGroupByTicket_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_findGroupByTicket_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_findGroupByTicket_pargs {
 public:


  virtual ~TalkService_findGroupByTicket_pargs() throw();
  const std::string* ticketId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_findGroupByTicket_result__isset {
  _TalkService_findGroupByTicket_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_findGroupByTicket_result__isset;

class TalkService_findGroupByTicket_result {
 public:

  TalkService_findGroupByTicket_result(const TalkService_findGroupByTicket_result&);
  TalkService_findGroupByTicket_result& operator=(const TalkService_findGroupByTicket_result&);
  TalkService_findGroupByTicket_result() {
  }

  virtual ~TalkService_findGroupByTicket_result() throw();
  Group success;
  TalkException e;

  _TalkService_findGroupByTicket_result__isset __isset;

  void __set_success(const Group& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_findGroupByTicket_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_findGroupByTicket_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_findGroupByTicket_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_findGroupByTicket_presult__isset {
  _TalkService_findGroupByTicket_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_findGroupByTicket_presult__isset;

class TalkService_findGroupByTicket_presult {
 public:


  virtual ~TalkService_findGroupByTicket_presult() throw();
  Group* success;
  TalkException e;

  _TalkService_findGroupByTicket_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_leaveGroup_args__isset {
  _TalkService_leaveGroup_args__isset() : reqSeq(false), groupId(false) {}
  bool reqSeq :1;
  bool groupId :1;
} _TalkService_leaveGroup_args__isset;

class TalkService_leaveGroup_args {
 public:

  TalkService_leaveGroup_args(const TalkService_leaveGroup_args&);
  TalkService_leaveGroup_args& operator=(const TalkService_leaveGroup_args&);
  TalkService_leaveGroup_args() : reqSeq(0), groupId() {
  }

  virtual ~TalkService_leaveGroup_args() throw();
  int32_t reqSeq;
  std::string groupId;

  _TalkService_leaveGroup_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_groupId(const std::string& val);

  bool operator == (const TalkService_leaveGroup_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(groupId == rhs.groupId))
      return false;
    return true;
  }
  bool operator != (const TalkService_leaveGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_leaveGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_leaveGroup_pargs {
 public:


  virtual ~TalkService_leaveGroup_pargs() throw();
  const int32_t* reqSeq;
  const std::string* groupId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_leaveGroup_result__isset {
  _TalkService_leaveGroup_result__isset() : e(false) {}
  bool e :1;
} _TalkService_leaveGroup_result__isset;

class TalkService_leaveGroup_result {
 public:

  TalkService_leaveGroup_result(const TalkService_leaveGroup_result&);
  TalkService_leaveGroup_result& operator=(const TalkService_leaveGroup_result&);
  TalkService_leaveGroup_result() {
  }

  virtual ~TalkService_leaveGroup_result() throw();
  TalkException e;

  _TalkService_leaveGroup_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_leaveGroup_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_leaveGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_leaveGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_leaveGroup_presult__isset {
  _TalkService_leaveGroup_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_leaveGroup_presult__isset;

class TalkService_leaveGroup_presult {
 public:


  virtual ~TalkService_leaveGroup_presult() throw();
  TalkException e;

  _TalkService_leaveGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_leaveRoom_args__isset {
  _TalkService_leaveRoom_args__isset() : reqSeq(false), roomId(false) {}
  bool reqSeq :1;
  bool roomId :1;
} _TalkService_leaveRoom_args__isset;

class TalkService_leaveRoom_args {
 public:

  TalkService_leaveRoom_args(const TalkService_leaveRoom_args&);
  TalkService_leaveRoom_args& operator=(const TalkService_leaveRoom_args&);
  TalkService_leaveRoom_args() : reqSeq(0), roomId() {
  }

  virtual ~TalkService_leaveRoom_args() throw();
  int32_t reqSeq;
  std::string roomId;

  _TalkService_leaveRoom_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_roomId(const std::string& val);

  bool operator == (const TalkService_leaveRoom_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(roomId == rhs.roomId))
      return false;
    return true;
  }
  bool operator != (const TalkService_leaveRoom_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_leaveRoom_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_leaveRoom_pargs {
 public:


  virtual ~TalkService_leaveRoom_pargs() throw();
  const int32_t* reqSeq;
  const std::string* roomId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_leaveRoom_result__isset {
  _TalkService_leaveRoom_result__isset() : e(false) {}
  bool e :1;
} _TalkService_leaveRoom_result__isset;

class TalkService_leaveRoom_result {
 public:

  TalkService_leaveRoom_result(const TalkService_leaveRoom_result&);
  TalkService_leaveRoom_result& operator=(const TalkService_leaveRoom_result&);
  TalkService_leaveRoom_result() {
  }

  virtual ~TalkService_leaveRoom_result() throw();
  TalkException e;

  _TalkService_leaveRoom_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_leaveRoom_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_leaveRoom_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_leaveRoom_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_leaveRoom_presult__isset {
  _TalkService_leaveRoom_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_leaveRoom_presult__isset;

class TalkService_leaveRoom_presult {
 public:


  virtual ~TalkService_leaveRoom_presult() throw();
  TalkException e;

  _TalkService_leaveRoom_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_loginWithIdentityCredential_args__isset {
  _TalkService_loginWithIdentityCredential_args__isset() : identityProvider(false), identifier(false), password(false), keepLoggedIn(false), accessLocation(false), systemName(false), certificate(false) {}
  bool identityProvider :1;
  bool identifier :1;
  bool password :1;
  bool keepLoggedIn :1;
  bool accessLocation :1;
  bool systemName :1;
  bool certificate :1;
} _TalkService_loginWithIdentityCredential_args__isset;

class TalkService_loginWithIdentityCredential_args {
 public:

  TalkService_loginWithIdentityCredential_args(const TalkService_loginWithIdentityCredential_args&);
  TalkService_loginWithIdentityCredential_args& operator=(const TalkService_loginWithIdentityCredential_args&);
  TalkService_loginWithIdentityCredential_args() : identityProvider((IdentityProvider::type)0), identifier(), password(), keepLoggedIn(0), accessLocation(), systemName(), certificate() {
  }

  virtual ~TalkService_loginWithIdentityCredential_args() throw();
  IdentityProvider::type identityProvider;
  std::string identifier;
  std::string password;
  bool keepLoggedIn;
  std::string accessLocation;
  std::string systemName;
  std::string certificate;

  _TalkService_loginWithIdentityCredential_args__isset __isset;

  void __set_identityProvider(const IdentityProvider::type val);

  void __set_identifier(const std::string& val);

  void __set_password(const std::string& val);

  void __set_keepLoggedIn(const bool val);

  void __set_accessLocation(const std::string& val);

  void __set_systemName(const std::string& val);

  void __set_certificate(const std::string& val);

  bool operator == (const TalkService_loginWithIdentityCredential_args & rhs) const
  {
    if (!(identityProvider == rhs.identityProvider))
      return false;
    if (!(identifier == rhs.identifier))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(keepLoggedIn == rhs.keepLoggedIn))
      return false;
    if (!(accessLocation == rhs.accessLocation))
      return false;
    if (!(systemName == rhs.systemName))
      return false;
    if (!(certificate == rhs.certificate))
      return false;
    return true;
  }
  bool operator != (const TalkService_loginWithIdentityCredential_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_loginWithIdentityCredential_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_loginWithIdentityCredential_pargs {
 public:


  virtual ~TalkService_loginWithIdentityCredential_pargs() throw();
  const IdentityProvider::type* identityProvider;
  const std::string* identifier;
  const std::string* password;
  const bool* keepLoggedIn;
  const std::string* accessLocation;
  const std::string* systemName;
  const std::string* certificate;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_loginWithIdentityCredential_result__isset {
  _TalkService_loginWithIdentityCredential_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_loginWithIdentityCredential_result__isset;

class TalkService_loginWithIdentityCredential_result {
 public:

  TalkService_loginWithIdentityCredential_result(const TalkService_loginWithIdentityCredential_result&);
  TalkService_loginWithIdentityCredential_result& operator=(const TalkService_loginWithIdentityCredential_result&);
  TalkService_loginWithIdentityCredential_result() : success() {
  }

  virtual ~TalkService_loginWithIdentityCredential_result() throw();
  std::string success;
  TalkException e;

  _TalkService_loginWithIdentityCredential_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_loginWithIdentityCredential_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_loginWithIdentityCredential_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_loginWithIdentityCredential_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_loginWithIdentityCredential_presult__isset {
  _TalkService_loginWithIdentityCredential_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_loginWithIdentityCredential_presult__isset;

class TalkService_loginWithIdentityCredential_presult {
 public:


  virtual ~TalkService_loginWithIdentityCredential_presult() throw();
  std::string* success;
  TalkException e;

  _TalkService_loginWithIdentityCredential_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_loginWithIdentityCredentialForCertificate_args__isset {
  _TalkService_loginWithIdentityCredentialForCertificate_args__isset() : identityProvider(false), identifier(false), password(false), keepLoggedIn(false), accessLocation(false), systemName(false), certificate(false) {}
  bool identityProvider :1;
  bool identifier :1;
  bool password :1;
  bool keepLoggedIn :1;
  bool accessLocation :1;
  bool systemName :1;
  bool certificate :1;
} _TalkService_loginWithIdentityCredentialForCertificate_args__isset;

class TalkService_loginWithIdentityCredentialForCertificate_args {
 public:

  TalkService_loginWithIdentityCredentialForCertificate_args(const TalkService_loginWithIdentityCredentialForCertificate_args&);
  TalkService_loginWithIdentityCredentialForCertificate_args& operator=(const TalkService_loginWithIdentityCredentialForCertificate_args&);
  TalkService_loginWithIdentityCredentialForCertificate_args() : identityProvider((IdentityProvider::type)0), identifier(), password(), keepLoggedIn(0), accessLocation(), systemName(), certificate() {
  }

  virtual ~TalkService_loginWithIdentityCredentialForCertificate_args() throw();
  IdentityProvider::type identityProvider;
  std::string identifier;
  std::string password;
  bool keepLoggedIn;
  std::string accessLocation;
  std::string systemName;
  std::string certificate;

  _TalkService_loginWithIdentityCredentialForCertificate_args__isset __isset;

  void __set_identityProvider(const IdentityProvider::type val);

  void __set_identifier(const std::string& val);

  void __set_password(const std::string& val);

  void __set_keepLoggedIn(const bool val);

  void __set_accessLocation(const std::string& val);

  void __set_systemName(const std::string& val);

  void __set_certificate(const std::string& val);

  bool operator == (const TalkService_loginWithIdentityCredentialForCertificate_args & rhs) const
  {
    if (!(identityProvider == rhs.identityProvider))
      return false;
    if (!(identifier == rhs.identifier))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(keepLoggedIn == rhs.keepLoggedIn))
      return false;
    if (!(accessLocation == rhs.accessLocation))
      return false;
    if (!(systemName == rhs.systemName))
      return false;
    if (!(certificate == rhs.certificate))
      return false;
    return true;
  }
  bool operator != (const TalkService_loginWithIdentityCredentialForCertificate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_loginWithIdentityCredentialForCertificate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_loginWithIdentityCredentialForCertificate_pargs {
 public:


  virtual ~TalkService_loginWithIdentityCredentialForCertificate_pargs() throw();
  const IdentityProvider::type* identityProvider;
  const std::string* identifier;
  const std::string* password;
  const bool* keepLoggedIn;
  const std::string* accessLocation;
  const std::string* systemName;
  const std::string* certificate;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_loginWithIdentityCredentialForCertificate_result__isset {
  _TalkService_loginWithIdentityCredentialForCertificate_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_loginWithIdentityCredentialForCertificate_result__isset;

class TalkService_loginWithIdentityCredentialForCertificate_result {
 public:

  TalkService_loginWithIdentityCredentialForCertificate_result(const TalkService_loginWithIdentityCredentialForCertificate_result&);
  TalkService_loginWithIdentityCredentialForCertificate_result& operator=(const TalkService_loginWithIdentityCredentialForCertificate_result&);
  TalkService_loginWithIdentityCredentialForCertificate_result() {
  }

  virtual ~TalkService_loginWithIdentityCredentialForCertificate_result() throw();
  LoginResult success;
  TalkException e;

  _TalkService_loginWithIdentityCredentialForCertificate_result__isset __isset;

  void __set_success(const LoginResult& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_loginWithIdentityCredentialForCertificate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_loginWithIdentityCredentialForCertificate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_loginWithIdentityCredentialForCertificate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_loginWithIdentityCredentialForCertificate_presult__isset {
  _TalkService_loginWithIdentityCredentialForCertificate_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_loginWithIdentityCredentialForCertificate_presult__isset;

class TalkService_loginWithIdentityCredentialForCertificate_presult {
 public:


  virtual ~TalkService_loginWithIdentityCredentialForCertificate_presult() throw();
  LoginResult* success;
  TalkException e;

  _TalkService_loginWithIdentityCredentialForCertificate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_loginWithVerifier_args__isset {
  _TalkService_loginWithVerifier_args__isset() : verifier(false) {}
  bool verifier :1;
} _TalkService_loginWithVerifier_args__isset;

class TalkService_loginWithVerifier_args {
 public:

  TalkService_loginWithVerifier_args(const TalkService_loginWithVerifier_args&);
  TalkService_loginWithVerifier_args& operator=(const TalkService_loginWithVerifier_args&);
  TalkService_loginWithVerifier_args() : verifier() {
  }

  virtual ~TalkService_loginWithVerifier_args() throw();
  std::string verifier;

  _TalkService_loginWithVerifier_args__isset __isset;

  void __set_verifier(const std::string& val);

  bool operator == (const TalkService_loginWithVerifier_args & rhs) const
  {
    if (!(verifier == rhs.verifier))
      return false;
    return true;
  }
  bool operator != (const TalkService_loginWithVerifier_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_loginWithVerifier_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_loginWithVerifier_pargs {
 public:


  virtual ~TalkService_loginWithVerifier_pargs() throw();
  const std::string* verifier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_loginWithVerifier_result__isset {
  _TalkService_loginWithVerifier_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_loginWithVerifier_result__isset;

class TalkService_loginWithVerifier_result {
 public:

  TalkService_loginWithVerifier_result(const TalkService_loginWithVerifier_result&);
  TalkService_loginWithVerifier_result& operator=(const TalkService_loginWithVerifier_result&);
  TalkService_loginWithVerifier_result() : success() {
  }

  virtual ~TalkService_loginWithVerifier_result() throw();
  std::string success;
  TalkException e;

  _TalkService_loginWithVerifier_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_loginWithVerifier_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_loginWithVerifier_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_loginWithVerifier_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_loginWithVerifier_presult__isset {
  _TalkService_loginWithVerifier_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_loginWithVerifier_presult__isset;

class TalkService_loginWithVerifier_presult {
 public:


  virtual ~TalkService_loginWithVerifier_presult() throw();
  std::string* success;
  TalkException e;

  _TalkService_loginWithVerifier_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_loginWithVerifierForCerificate_args__isset {
  _TalkService_loginWithVerifierForCerificate_args__isset() : verifier(false) {}
  bool verifier :1;
} _TalkService_loginWithVerifierForCerificate_args__isset;

class TalkService_loginWithVerifierForCerificate_args {
 public:

  TalkService_loginWithVerifierForCerificate_args(const TalkService_loginWithVerifierForCerificate_args&);
  TalkService_loginWithVerifierForCerificate_args& operator=(const TalkService_loginWithVerifierForCerificate_args&);
  TalkService_loginWithVerifierForCerificate_args() : verifier() {
  }

  virtual ~TalkService_loginWithVerifierForCerificate_args() throw();
  std::string verifier;

  _TalkService_loginWithVerifierForCerificate_args__isset __isset;

  void __set_verifier(const std::string& val);

  bool operator == (const TalkService_loginWithVerifierForCerificate_args & rhs) const
  {
    if (!(verifier == rhs.verifier))
      return false;
    return true;
  }
  bool operator != (const TalkService_loginWithVerifierForCerificate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_loginWithVerifierForCerificate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_loginWithVerifierForCerificate_pargs {
 public:


  virtual ~TalkService_loginWithVerifierForCerificate_pargs() throw();
  const std::string* verifier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_loginWithVerifierForCerificate_result__isset {
  _TalkService_loginWithVerifierForCerificate_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_loginWithVerifierForCerificate_result__isset;

class TalkService_loginWithVerifierForCerificate_result {
 public:

  TalkService_loginWithVerifierForCerificate_result(const TalkService_loginWithVerifierForCerificate_result&);
  TalkService_loginWithVerifierForCerificate_result& operator=(const TalkService_loginWithVerifierForCerificate_result&);
  TalkService_loginWithVerifierForCerificate_result() {
  }

  virtual ~TalkService_loginWithVerifierForCerificate_result() throw();
  LoginResult success;
  TalkException e;

  _TalkService_loginWithVerifierForCerificate_result__isset __isset;

  void __set_success(const LoginResult& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_loginWithVerifierForCerificate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_loginWithVerifierForCerificate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_loginWithVerifierForCerificate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_loginWithVerifierForCerificate_presult__isset {
  _TalkService_loginWithVerifierForCerificate_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_loginWithVerifierForCerificate_presult__isset;

class TalkService_loginWithVerifierForCerificate_presult {
 public:


  virtual ~TalkService_loginWithVerifierForCerificate_presult() throw();
  LoginResult* success;
  TalkException e;

  _TalkService_loginWithVerifierForCerificate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_loginWithVerifierForCertificate_args__isset {
  _TalkService_loginWithVerifierForCertificate_args__isset() : verifier(false) {}
  bool verifier :1;
} _TalkService_loginWithVerifierForCertificate_args__isset;

class TalkService_loginWithVerifierForCertificate_args {
 public:

  TalkService_loginWithVerifierForCertificate_args(const TalkService_loginWithVerifierForCertificate_args&);
  TalkService_loginWithVerifierForCertificate_args& operator=(const TalkService_loginWithVerifierForCertificate_args&);
  TalkService_loginWithVerifierForCertificate_args() : verifier() {
  }

  virtual ~TalkService_loginWithVerifierForCertificate_args() throw();
  std::string verifier;

  _TalkService_loginWithVerifierForCertificate_args__isset __isset;

  void __set_verifier(const std::string& val);

  bool operator == (const TalkService_loginWithVerifierForCertificate_args & rhs) const
  {
    if (!(verifier == rhs.verifier))
      return false;
    return true;
  }
  bool operator != (const TalkService_loginWithVerifierForCertificate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_loginWithVerifierForCertificate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_loginWithVerifierForCertificate_pargs {
 public:


  virtual ~TalkService_loginWithVerifierForCertificate_pargs() throw();
  const std::string* verifier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_loginWithVerifierForCertificate_result__isset {
  _TalkService_loginWithVerifierForCertificate_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_loginWithVerifierForCertificate_result__isset;

class TalkService_loginWithVerifierForCertificate_result {
 public:

  TalkService_loginWithVerifierForCertificate_result(const TalkService_loginWithVerifierForCertificate_result&);
  TalkService_loginWithVerifierForCertificate_result& operator=(const TalkService_loginWithVerifierForCertificate_result&);
  TalkService_loginWithVerifierForCertificate_result() {
  }

  virtual ~TalkService_loginWithVerifierForCertificate_result() throw();
  LoginResult success;
  TalkException e;

  _TalkService_loginWithVerifierForCertificate_result__isset __isset;

  void __set_success(const LoginResult& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_loginWithVerifierForCertificate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_loginWithVerifierForCertificate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_loginWithVerifierForCertificate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_loginWithVerifierForCertificate_presult__isset {
  _TalkService_loginWithVerifierForCertificate_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_loginWithVerifierForCertificate_presult__isset;

class TalkService_loginWithVerifierForCertificate_presult {
 public:


  virtual ~TalkService_loginWithVerifierForCertificate_presult() throw();
  LoginResult* success;
  TalkException e;

  _TalkService_loginWithVerifierForCertificate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TalkService_logout_args {
 public:

  TalkService_logout_args(const TalkService_logout_args&);
  TalkService_logout_args& operator=(const TalkService_logout_args&);
  TalkService_logout_args() {
  }

  virtual ~TalkService_logout_args() throw();

  bool operator == (const TalkService_logout_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TalkService_logout_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_logout_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_logout_pargs {
 public:


  virtual ~TalkService_logout_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_logout_result__isset {
  _TalkService_logout_result__isset() : e(false) {}
  bool e :1;
} _TalkService_logout_result__isset;

class TalkService_logout_result {
 public:

  TalkService_logout_result(const TalkService_logout_result&);
  TalkService_logout_result& operator=(const TalkService_logout_result&);
  TalkService_logout_result() {
  }

  virtual ~TalkService_logout_result() throw();
  TalkException e;

  _TalkService_logout_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_logout_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_logout_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_logout_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_logout_presult__isset {
  _TalkService_logout_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_logout_presult__isset;

class TalkService_logout_presult {
 public:


  virtual ~TalkService_logout_presult() throw();
  TalkException e;

  _TalkService_logout_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_logoutSession_args__isset {
  _TalkService_logoutSession_args__isset() : tokenKey(false) {}
  bool tokenKey :1;
} _TalkService_logoutSession_args__isset;

class TalkService_logoutSession_args {
 public:

  TalkService_logoutSession_args(const TalkService_logoutSession_args&);
  TalkService_logoutSession_args& operator=(const TalkService_logoutSession_args&);
  TalkService_logoutSession_args() : tokenKey() {
  }

  virtual ~TalkService_logoutSession_args() throw();
  std::string tokenKey;

  _TalkService_logoutSession_args__isset __isset;

  void __set_tokenKey(const std::string& val);

  bool operator == (const TalkService_logoutSession_args & rhs) const
  {
    if (!(tokenKey == rhs.tokenKey))
      return false;
    return true;
  }
  bool operator != (const TalkService_logoutSession_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_logoutSession_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_logoutSession_pargs {
 public:


  virtual ~TalkService_logoutSession_pargs() throw();
  const std::string* tokenKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_logoutSession_result__isset {
  _TalkService_logoutSession_result__isset() : e(false) {}
  bool e :1;
} _TalkService_logoutSession_result__isset;

class TalkService_logoutSession_result {
 public:

  TalkService_logoutSession_result(const TalkService_logoutSession_result&);
  TalkService_logoutSession_result& operator=(const TalkService_logoutSession_result&);
  TalkService_logoutSession_result() {
  }

  virtual ~TalkService_logoutSession_result() throw();
  TalkException e;

  _TalkService_logoutSession_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_logoutSession_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_logoutSession_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_logoutSession_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_logoutSession_presult__isset {
  _TalkService_logoutSession_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_logoutSession_presult__isset;

class TalkService_logoutSession_presult {
 public:


  virtual ~TalkService_logoutSession_presult() throw();
  TalkException e;

  _TalkService_logoutSession_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TalkService_noop_args {
 public:

  TalkService_noop_args(const TalkService_noop_args&);
  TalkService_noop_args& operator=(const TalkService_noop_args&);
  TalkService_noop_args() {
  }

  virtual ~TalkService_noop_args() throw();

  bool operator == (const TalkService_noop_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TalkService_noop_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_noop_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_noop_pargs {
 public:


  virtual ~TalkService_noop_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_noop_result__isset {
  _TalkService_noop_result__isset() : e(false) {}
  bool e :1;
} _TalkService_noop_result__isset;

class TalkService_noop_result {
 public:

  TalkService_noop_result(const TalkService_noop_result&);
  TalkService_noop_result& operator=(const TalkService_noop_result&);
  TalkService_noop_result() {
  }

  virtual ~TalkService_noop_result() throw();
  TalkException e;

  _TalkService_noop_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_noop_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_noop_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_noop_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_noop_presult__isset {
  _TalkService_noop_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_noop_presult__isset;

class TalkService_noop_presult {
 public:


  virtual ~TalkService_noop_presult() throw();
  TalkException e;

  _TalkService_noop_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_notifiedRedirect_args__isset {
  _TalkService_notifiedRedirect_args__isset() : paramMap(false) {}
  bool paramMap :1;
} _TalkService_notifiedRedirect_args__isset;

class TalkService_notifiedRedirect_args {
 public:

  TalkService_notifiedRedirect_args(const TalkService_notifiedRedirect_args&);
  TalkService_notifiedRedirect_args& operator=(const TalkService_notifiedRedirect_args&);
  TalkService_notifiedRedirect_args() {
  }

  virtual ~TalkService_notifiedRedirect_args() throw();
  std::map<std::string, std::string>  paramMap;

  _TalkService_notifiedRedirect_args__isset __isset;

  void __set_paramMap(const std::map<std::string, std::string> & val);

  bool operator == (const TalkService_notifiedRedirect_args & rhs) const
  {
    if (!(paramMap == rhs.paramMap))
      return false;
    return true;
  }
  bool operator != (const TalkService_notifiedRedirect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_notifiedRedirect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_notifiedRedirect_pargs {
 public:


  virtual ~TalkService_notifiedRedirect_pargs() throw();
  const std::map<std::string, std::string> * paramMap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_notifiedRedirect_result__isset {
  _TalkService_notifiedRedirect_result__isset() : e(false) {}
  bool e :1;
} _TalkService_notifiedRedirect_result__isset;

class TalkService_notifiedRedirect_result {
 public:

  TalkService_notifiedRedirect_result(const TalkService_notifiedRedirect_result&);
  TalkService_notifiedRedirect_result& operator=(const TalkService_notifiedRedirect_result&);
  TalkService_notifiedRedirect_result() {
  }

  virtual ~TalkService_notifiedRedirect_result() throw();
  TalkException e;

  _TalkService_notifiedRedirect_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_notifiedRedirect_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_notifiedRedirect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_notifiedRedirect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_notifiedRedirect_presult__isset {
  _TalkService_notifiedRedirect_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_notifiedRedirect_presult__isset;

class TalkService_notifiedRedirect_presult {
 public:


  virtual ~TalkService_notifiedRedirect_presult() throw();
  TalkException e;

  _TalkService_notifiedRedirect_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_notifyBuddyOnAir_args__isset {
  _TalkService_notifyBuddyOnAir_args__isset() : seq(false), receiverMids(false) {}
  bool seq :1;
  bool receiverMids :1;
} _TalkService_notifyBuddyOnAir_args__isset;

class TalkService_notifyBuddyOnAir_args {
 public:

  TalkService_notifyBuddyOnAir_args(const TalkService_notifyBuddyOnAir_args&);
  TalkService_notifyBuddyOnAir_args& operator=(const TalkService_notifyBuddyOnAir_args&);
  TalkService_notifyBuddyOnAir_args() : seq(0) {
  }

  virtual ~TalkService_notifyBuddyOnAir_args() throw();
  int32_t seq;
  std::vector<std::string>  receiverMids;

  _TalkService_notifyBuddyOnAir_args__isset __isset;

  void __set_seq(const int32_t val);

  void __set_receiverMids(const std::vector<std::string> & val);

  bool operator == (const TalkService_notifyBuddyOnAir_args & rhs) const
  {
    if (!(seq == rhs.seq))
      return false;
    if (!(receiverMids == rhs.receiverMids))
      return false;
    return true;
  }
  bool operator != (const TalkService_notifyBuddyOnAir_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_notifyBuddyOnAir_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_notifyBuddyOnAir_pargs {
 public:


  virtual ~TalkService_notifyBuddyOnAir_pargs() throw();
  const int32_t* seq;
  const std::vector<std::string> * receiverMids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_notifyBuddyOnAir_result__isset {
  _TalkService_notifyBuddyOnAir_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_notifyBuddyOnAir_result__isset;

class TalkService_notifyBuddyOnAir_result {
 public:

  TalkService_notifyBuddyOnAir_result(const TalkService_notifyBuddyOnAir_result&);
  TalkService_notifyBuddyOnAir_result& operator=(const TalkService_notifyBuddyOnAir_result&);
  TalkService_notifyBuddyOnAir_result() {
  }

  virtual ~TalkService_notifyBuddyOnAir_result() throw();
  std::map<std::string, std::string>  success;
  TalkException e;

  _TalkService_notifyBuddyOnAir_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_notifyBuddyOnAir_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_notifyBuddyOnAir_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_notifyBuddyOnAir_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_notifyBuddyOnAir_presult__isset {
  _TalkService_notifyBuddyOnAir_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_notifyBuddyOnAir_presult__isset;

class TalkService_notifyBuddyOnAir_presult {
 public:


  virtual ~TalkService_notifyBuddyOnAir_presult() throw();
  std::map<std::string, std::string> * success;
  TalkException e;

  _TalkService_notifyBuddyOnAir_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_notifyIndividualEvent_args__isset {
  _TalkService_notifyIndividualEvent_args__isset() : notificationStatus(false), receiverMids(false) {}
  bool notificationStatus :1;
  bool receiverMids :1;
} _TalkService_notifyIndividualEvent_args__isset;

class TalkService_notifyIndividualEvent_args {
 public:

  TalkService_notifyIndividualEvent_args(const TalkService_notifyIndividualEvent_args&);
  TalkService_notifyIndividualEvent_args& operator=(const TalkService_notifyIndividualEvent_args&);
  TalkService_notifyIndividualEvent_args() : notificationStatus((NotificationStatus::type)0) {
  }

  virtual ~TalkService_notifyIndividualEvent_args() throw();
  NotificationStatus::type notificationStatus;
  std::vector<std::string>  receiverMids;

  _TalkService_notifyIndividualEvent_args__isset __isset;

  void __set_notificationStatus(const NotificationStatus::type val);

  void __set_receiverMids(const std::vector<std::string> & val);

  bool operator == (const TalkService_notifyIndividualEvent_args & rhs) const
  {
    if (!(notificationStatus == rhs.notificationStatus))
      return false;
    if (!(receiverMids == rhs.receiverMids))
      return false;
    return true;
  }
  bool operator != (const TalkService_notifyIndividualEvent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_notifyIndividualEvent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_notifyIndividualEvent_pargs {
 public:


  virtual ~TalkService_notifyIndividualEvent_pargs() throw();
  const NotificationStatus::type* notificationStatus;
  const std::vector<std::string> * receiverMids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_notifyIndividualEvent_result__isset {
  _TalkService_notifyIndividualEvent_result__isset() : e(false) {}
  bool e :1;
} _TalkService_notifyIndividualEvent_result__isset;

class TalkService_notifyIndividualEvent_result {
 public:

  TalkService_notifyIndividualEvent_result(const TalkService_notifyIndividualEvent_result&);
  TalkService_notifyIndividualEvent_result& operator=(const TalkService_notifyIndividualEvent_result&);
  TalkService_notifyIndividualEvent_result() {
  }

  virtual ~TalkService_notifyIndividualEvent_result() throw();
  TalkException e;

  _TalkService_notifyIndividualEvent_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_notifyIndividualEvent_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_notifyIndividualEvent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_notifyIndividualEvent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_notifyIndividualEvent_presult__isset {
  _TalkService_notifyIndividualEvent_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_notifyIndividualEvent_presult__isset;

class TalkService_notifyIndividualEvent_presult {
 public:


  virtual ~TalkService_notifyIndividualEvent_presult() throw();
  TalkException e;

  _TalkService_notifyIndividualEvent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_notifyInstalled_args__isset {
  _TalkService_notifyInstalled_args__isset() : udidHash(false), applicationTypeWithExtensions(false) {}
  bool udidHash :1;
  bool applicationTypeWithExtensions :1;
} _TalkService_notifyInstalled_args__isset;

class TalkService_notifyInstalled_args {
 public:

  TalkService_notifyInstalled_args(const TalkService_notifyInstalled_args&);
  TalkService_notifyInstalled_args& operator=(const TalkService_notifyInstalled_args&);
  TalkService_notifyInstalled_args() : udidHash(), applicationTypeWithExtensions() {
  }

  virtual ~TalkService_notifyInstalled_args() throw();
  std::string udidHash;
  std::string applicationTypeWithExtensions;

  _TalkService_notifyInstalled_args__isset __isset;

  void __set_udidHash(const std::string& val);

  void __set_applicationTypeWithExtensions(const std::string& val);

  bool operator == (const TalkService_notifyInstalled_args & rhs) const
  {
    if (!(udidHash == rhs.udidHash))
      return false;
    if (!(applicationTypeWithExtensions == rhs.applicationTypeWithExtensions))
      return false;
    return true;
  }
  bool operator != (const TalkService_notifyInstalled_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_notifyInstalled_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_notifyInstalled_pargs {
 public:


  virtual ~TalkService_notifyInstalled_pargs() throw();
  const std::string* udidHash;
  const std::string* applicationTypeWithExtensions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_notifyInstalled_result__isset {
  _TalkService_notifyInstalled_result__isset() : e(false) {}
  bool e :1;
} _TalkService_notifyInstalled_result__isset;

class TalkService_notifyInstalled_result {
 public:

  TalkService_notifyInstalled_result(const TalkService_notifyInstalled_result&);
  TalkService_notifyInstalled_result& operator=(const TalkService_notifyInstalled_result&);
  TalkService_notifyInstalled_result() {
  }

  virtual ~TalkService_notifyInstalled_result() throw();
  TalkException e;

  _TalkService_notifyInstalled_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_notifyInstalled_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_notifyInstalled_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_notifyInstalled_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_notifyInstalled_presult__isset {
  _TalkService_notifyInstalled_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_notifyInstalled_presult__isset;

class TalkService_notifyInstalled_presult {
 public:


  virtual ~TalkService_notifyInstalled_presult() throw();
  TalkException e;

  _TalkService_notifyInstalled_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_notifyRegistrationComplete_args__isset {
  _TalkService_notifyRegistrationComplete_args__isset() : udidHash(false), applicationTypeWithExtensions(false) {}
  bool udidHash :1;
  bool applicationTypeWithExtensions :1;
} _TalkService_notifyRegistrationComplete_args__isset;

class TalkService_notifyRegistrationComplete_args {
 public:

  TalkService_notifyRegistrationComplete_args(const TalkService_notifyRegistrationComplete_args&);
  TalkService_notifyRegistrationComplete_args& operator=(const TalkService_notifyRegistrationComplete_args&);
  TalkService_notifyRegistrationComplete_args() : udidHash(), applicationTypeWithExtensions() {
  }

  virtual ~TalkService_notifyRegistrationComplete_args() throw();
  std::string udidHash;
  std::string applicationTypeWithExtensions;

  _TalkService_notifyRegistrationComplete_args__isset __isset;

  void __set_udidHash(const std::string& val);

  void __set_applicationTypeWithExtensions(const std::string& val);

  bool operator == (const TalkService_notifyRegistrationComplete_args & rhs) const
  {
    if (!(udidHash == rhs.udidHash))
      return false;
    if (!(applicationTypeWithExtensions == rhs.applicationTypeWithExtensions))
      return false;
    return true;
  }
  bool operator != (const TalkService_notifyRegistrationComplete_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_notifyRegistrationComplete_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_notifyRegistrationComplete_pargs {
 public:


  virtual ~TalkService_notifyRegistrationComplete_pargs() throw();
  const std::string* udidHash;
  const std::string* applicationTypeWithExtensions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_notifyRegistrationComplete_result__isset {
  _TalkService_notifyRegistrationComplete_result__isset() : e(false) {}
  bool e :1;
} _TalkService_notifyRegistrationComplete_result__isset;

class TalkService_notifyRegistrationComplete_result {
 public:

  TalkService_notifyRegistrationComplete_result(const TalkService_notifyRegistrationComplete_result&);
  TalkService_notifyRegistrationComplete_result& operator=(const TalkService_notifyRegistrationComplete_result&);
  TalkService_notifyRegistrationComplete_result() {
  }

  virtual ~TalkService_notifyRegistrationComplete_result() throw();
  TalkException e;

  _TalkService_notifyRegistrationComplete_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_notifyRegistrationComplete_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_notifyRegistrationComplete_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_notifyRegistrationComplete_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_notifyRegistrationComplete_presult__isset {
  _TalkService_notifyRegistrationComplete_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_notifyRegistrationComplete_presult__isset;

class TalkService_notifyRegistrationComplete_presult {
 public:


  virtual ~TalkService_notifyRegistrationComplete_presult() throw();
  TalkException e;

  _TalkService_notifyRegistrationComplete_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_notifySleep_args__isset {
  _TalkService_notifySleep_args__isset() : lastRev(false), badge(false) {}
  bool lastRev :1;
  bool badge :1;
} _TalkService_notifySleep_args__isset;

class TalkService_notifySleep_args {
 public:

  TalkService_notifySleep_args(const TalkService_notifySleep_args&);
  TalkService_notifySleep_args& operator=(const TalkService_notifySleep_args&);
  TalkService_notifySleep_args() : lastRev(0), badge(0) {
  }

  virtual ~TalkService_notifySleep_args() throw();
  int64_t lastRev;
  int32_t badge;

  _TalkService_notifySleep_args__isset __isset;

  void __set_lastRev(const int64_t val);

  void __set_badge(const int32_t val);

  bool operator == (const TalkService_notifySleep_args & rhs) const
  {
    if (!(lastRev == rhs.lastRev))
      return false;
    if (!(badge == rhs.badge))
      return false;
    return true;
  }
  bool operator != (const TalkService_notifySleep_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_notifySleep_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_notifySleep_pargs {
 public:


  virtual ~TalkService_notifySleep_pargs() throw();
  const int64_t* lastRev;
  const int32_t* badge;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_notifySleep_result__isset {
  _TalkService_notifySleep_result__isset() : e(false) {}
  bool e :1;
} _TalkService_notifySleep_result__isset;

class TalkService_notifySleep_result {
 public:

  TalkService_notifySleep_result(const TalkService_notifySleep_result&);
  TalkService_notifySleep_result& operator=(const TalkService_notifySleep_result&);
  TalkService_notifySleep_result() {
  }

  virtual ~TalkService_notifySleep_result() throw();
  TalkException e;

  _TalkService_notifySleep_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_notifySleep_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_notifySleep_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_notifySleep_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_notifySleep_presult__isset {
  _TalkService_notifySleep_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_notifySleep_presult__isset;

class TalkService_notifySleep_presult {
 public:


  virtual ~TalkService_notifySleep_presult() throw();
  TalkException e;

  _TalkService_notifySleep_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_notifyUpdated_args__isset {
  _TalkService_notifyUpdated_args__isset() : lastRev(false), deviceInfo(false) {}
  bool lastRev :1;
  bool deviceInfo :1;
} _TalkService_notifyUpdated_args__isset;

class TalkService_notifyUpdated_args {
 public:

  TalkService_notifyUpdated_args(const TalkService_notifyUpdated_args&);
  TalkService_notifyUpdated_args& operator=(const TalkService_notifyUpdated_args&);
  TalkService_notifyUpdated_args() : lastRev(0) {
  }

  virtual ~TalkService_notifyUpdated_args() throw();
  int64_t lastRev;
  DeviceInfo deviceInfo;

  _TalkService_notifyUpdated_args__isset __isset;

  void __set_lastRev(const int64_t val);

  void __set_deviceInfo(const DeviceInfo& val);

  bool operator == (const TalkService_notifyUpdated_args & rhs) const
  {
    if (!(lastRev == rhs.lastRev))
      return false;
    if (!(deviceInfo == rhs.deviceInfo))
      return false;
    return true;
  }
  bool operator != (const TalkService_notifyUpdated_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_notifyUpdated_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_notifyUpdated_pargs {
 public:


  virtual ~TalkService_notifyUpdated_pargs() throw();
  const int64_t* lastRev;
  const DeviceInfo* deviceInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_notifyUpdated_result__isset {
  _TalkService_notifyUpdated_result__isset() : e(false) {}
  bool e :1;
} _TalkService_notifyUpdated_result__isset;

class TalkService_notifyUpdated_result {
 public:

  TalkService_notifyUpdated_result(const TalkService_notifyUpdated_result&);
  TalkService_notifyUpdated_result& operator=(const TalkService_notifyUpdated_result&);
  TalkService_notifyUpdated_result() {
  }

  virtual ~TalkService_notifyUpdated_result() throw();
  TalkException e;

  _TalkService_notifyUpdated_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_notifyUpdated_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_notifyUpdated_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_notifyUpdated_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_notifyUpdated_presult__isset {
  _TalkService_notifyUpdated_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_notifyUpdated_presult__isset;

class TalkService_notifyUpdated_presult {
 public:


  virtual ~TalkService_notifyUpdated_presult() throw();
  TalkException e;

  _TalkService_notifyUpdated_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_openProximityMatch_args__isset {
  _TalkService_openProximityMatch_args__isset() : location(false) {}
  bool location :1;
} _TalkService_openProximityMatch_args__isset;

class TalkService_openProximityMatch_args {
 public:

  TalkService_openProximityMatch_args(const TalkService_openProximityMatch_args&);
  TalkService_openProximityMatch_args& operator=(const TalkService_openProximityMatch_args&);
  TalkService_openProximityMatch_args() {
  }

  virtual ~TalkService_openProximityMatch_args() throw();
  Location location;

  _TalkService_openProximityMatch_args__isset __isset;

  void __set_location(const Location& val);

  bool operator == (const TalkService_openProximityMatch_args & rhs) const
  {
    if (!(location == rhs.location))
      return false;
    return true;
  }
  bool operator != (const TalkService_openProximityMatch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_openProximityMatch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_openProximityMatch_pargs {
 public:


  virtual ~TalkService_openProximityMatch_pargs() throw();
  const Location* location;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_openProximityMatch_result__isset {
  _TalkService_openProximityMatch_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_openProximityMatch_result__isset;

class TalkService_openProximityMatch_result {
 public:

  TalkService_openProximityMatch_result(const TalkService_openProximityMatch_result&);
  TalkService_openProximityMatch_result& operator=(const TalkService_openProximityMatch_result&);
  TalkService_openProximityMatch_result() : success() {
  }

  virtual ~TalkService_openProximityMatch_result() throw();
  std::string success;
  TalkException e;

  _TalkService_openProximityMatch_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_openProximityMatch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_openProximityMatch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_openProximityMatch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_openProximityMatch_presult__isset {
  _TalkService_openProximityMatch_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_openProximityMatch_presult__isset;

class TalkService_openProximityMatch_presult {
 public:


  virtual ~TalkService_openProximityMatch_presult() throw();
  std::string* success;
  TalkException e;

  _TalkService_openProximityMatch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_registerBuddyUser_args__isset {
  _TalkService_registerBuddyUser_args__isset() : buddyId(false), registrarPassword(false) {}
  bool buddyId :1;
  bool registrarPassword :1;
} _TalkService_registerBuddyUser_args__isset;

class TalkService_registerBuddyUser_args {
 public:

  TalkService_registerBuddyUser_args(const TalkService_registerBuddyUser_args&);
  TalkService_registerBuddyUser_args& operator=(const TalkService_registerBuddyUser_args&);
  TalkService_registerBuddyUser_args() : buddyId(), registrarPassword() {
  }

  virtual ~TalkService_registerBuddyUser_args() throw();
  std::string buddyId;
  std::string registrarPassword;

  _TalkService_registerBuddyUser_args__isset __isset;

  void __set_buddyId(const std::string& val);

  void __set_registrarPassword(const std::string& val);

  bool operator == (const TalkService_registerBuddyUser_args & rhs) const
  {
    if (!(buddyId == rhs.buddyId))
      return false;
    if (!(registrarPassword == rhs.registrarPassword))
      return false;
    return true;
  }
  bool operator != (const TalkService_registerBuddyUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_registerBuddyUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_registerBuddyUser_pargs {
 public:


  virtual ~TalkService_registerBuddyUser_pargs() throw();
  const std::string* buddyId;
  const std::string* registrarPassword;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_registerBuddyUser_result__isset {
  _TalkService_registerBuddyUser_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_registerBuddyUser_result__isset;

class TalkService_registerBuddyUser_result {
 public:

  TalkService_registerBuddyUser_result(const TalkService_registerBuddyUser_result&);
  TalkService_registerBuddyUser_result& operator=(const TalkService_registerBuddyUser_result&);
  TalkService_registerBuddyUser_result() : success() {
  }

  virtual ~TalkService_registerBuddyUser_result() throw();
  std::string success;
  TalkException e;

  _TalkService_registerBuddyUser_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_registerBuddyUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_registerBuddyUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_registerBuddyUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_registerBuddyUser_presult__isset {
  _TalkService_registerBuddyUser_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_registerBuddyUser_presult__isset;

class TalkService_registerBuddyUser_presult {
 public:


  virtual ~TalkService_registerBuddyUser_presult() throw();
  std::string* success;
  TalkException e;

  _TalkService_registerBuddyUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_registerBuddyUserid_args__isset {
  _TalkService_registerBuddyUserid_args__isset() : seq(false), userid(false) {}
  bool seq :1;
  bool userid :1;
} _TalkService_registerBuddyUserid_args__isset;

class TalkService_registerBuddyUserid_args {
 public:

  TalkService_registerBuddyUserid_args(const TalkService_registerBuddyUserid_args&);
  TalkService_registerBuddyUserid_args& operator=(const TalkService_registerBuddyUserid_args&);
  TalkService_registerBuddyUserid_args() : seq(0), userid() {
  }

  virtual ~TalkService_registerBuddyUserid_args() throw();
  int32_t seq;
  std::string userid;

  _TalkService_registerBuddyUserid_args__isset __isset;

  void __set_seq(const int32_t val);

  void __set_userid(const std::string& val);

  bool operator == (const TalkService_registerBuddyUserid_args & rhs) const
  {
    if (!(seq == rhs.seq))
      return false;
    if (!(userid == rhs.userid))
      return false;
    return true;
  }
  bool operator != (const TalkService_registerBuddyUserid_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_registerBuddyUserid_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_registerBuddyUserid_pargs {
 public:


  virtual ~TalkService_registerBuddyUserid_pargs() throw();
  const int32_t* seq;
  const std::string* userid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_registerBuddyUserid_result__isset {
  _TalkService_registerBuddyUserid_result__isset() : e(false) {}
  bool e :1;
} _TalkService_registerBuddyUserid_result__isset;

class TalkService_registerBuddyUserid_result {
 public:

  TalkService_registerBuddyUserid_result(const TalkService_registerBuddyUserid_result&);
  TalkService_registerBuddyUserid_result& operator=(const TalkService_registerBuddyUserid_result&);
  TalkService_registerBuddyUserid_result() {
  }

  virtual ~TalkService_registerBuddyUserid_result() throw();
  TalkException e;

  _TalkService_registerBuddyUserid_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_registerBuddyUserid_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_registerBuddyUserid_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_registerBuddyUserid_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_registerBuddyUserid_presult__isset {
  _TalkService_registerBuddyUserid_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_registerBuddyUserid_presult__isset;

class TalkService_registerBuddyUserid_presult {
 public:


  virtual ~TalkService_registerBuddyUserid_presult() throw();
  TalkException e;

  _TalkService_registerBuddyUserid_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_registerDevice_args__isset {
  _TalkService_registerDevice_args__isset() : sessionId(false) {}
  bool sessionId :1;
} _TalkService_registerDevice_args__isset;

class TalkService_registerDevice_args {
 public:

  TalkService_registerDevice_args(const TalkService_registerDevice_args&);
  TalkService_registerDevice_args& operator=(const TalkService_registerDevice_args&);
  TalkService_registerDevice_args() : sessionId() {
  }

  virtual ~TalkService_registerDevice_args() throw();
  std::string sessionId;

  _TalkService_registerDevice_args__isset __isset;

  void __set_sessionId(const std::string& val);

  bool operator == (const TalkService_registerDevice_args & rhs) const
  {
    if (!(sessionId == rhs.sessionId))
      return false;
    return true;
  }
  bool operator != (const TalkService_registerDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_registerDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_registerDevice_pargs {
 public:


  virtual ~TalkService_registerDevice_pargs() throw();
  const std::string* sessionId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_registerDevice_result__isset {
  _TalkService_registerDevice_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_registerDevice_result__isset;

class TalkService_registerDevice_result {
 public:

  TalkService_registerDevice_result(const TalkService_registerDevice_result&);
  TalkService_registerDevice_result& operator=(const TalkService_registerDevice_result&);
  TalkService_registerDevice_result() : success() {
  }

  virtual ~TalkService_registerDevice_result() throw();
  std::string success;
  TalkException e;

  _TalkService_registerDevice_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_registerDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_registerDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_registerDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_registerDevice_presult__isset {
  _TalkService_registerDevice_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_registerDevice_presult__isset;

class TalkService_registerDevice_presult {
 public:


  virtual ~TalkService_registerDevice_presult() throw();
  std::string* success;
  TalkException e;

  _TalkService_registerDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_registerDeviceWithIdentityCredential_args__isset {
  _TalkService_registerDeviceWithIdentityCredential_args__isset() : sessionId(false), provider(false), identifier(false), verifier(false) {}
  bool sessionId :1;
  bool provider :1;
  bool identifier :1;
  bool verifier :1;
} _TalkService_registerDeviceWithIdentityCredential_args__isset;

class TalkService_registerDeviceWithIdentityCredential_args {
 public:

  TalkService_registerDeviceWithIdentityCredential_args(const TalkService_registerDeviceWithIdentityCredential_args&);
  TalkService_registerDeviceWithIdentityCredential_args& operator=(const TalkService_registerDeviceWithIdentityCredential_args&);
  TalkService_registerDeviceWithIdentityCredential_args() : sessionId(), provider((IdentityProvider::type)0), identifier(), verifier() {
  }

  virtual ~TalkService_registerDeviceWithIdentityCredential_args() throw();
  std::string sessionId;
  IdentityProvider::type provider;
  std::string identifier;
  std::string verifier;

  _TalkService_registerDeviceWithIdentityCredential_args__isset __isset;

  void __set_sessionId(const std::string& val);

  void __set_provider(const IdentityProvider::type val);

  void __set_identifier(const std::string& val);

  void __set_verifier(const std::string& val);

  bool operator == (const TalkService_registerDeviceWithIdentityCredential_args & rhs) const
  {
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(provider == rhs.provider))
      return false;
    if (!(identifier == rhs.identifier))
      return false;
    if (!(verifier == rhs.verifier))
      return false;
    return true;
  }
  bool operator != (const TalkService_registerDeviceWithIdentityCredential_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_registerDeviceWithIdentityCredential_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_registerDeviceWithIdentityCredential_pargs {
 public:


  virtual ~TalkService_registerDeviceWithIdentityCredential_pargs() throw();
  const std::string* sessionId;
  const IdentityProvider::type* provider;
  const std::string* identifier;
  const std::string* verifier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_registerDeviceWithIdentityCredential_result__isset {
  _TalkService_registerDeviceWithIdentityCredential_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_registerDeviceWithIdentityCredential_result__isset;

class TalkService_registerDeviceWithIdentityCredential_result {
 public:

  TalkService_registerDeviceWithIdentityCredential_result(const TalkService_registerDeviceWithIdentityCredential_result&);
  TalkService_registerDeviceWithIdentityCredential_result& operator=(const TalkService_registerDeviceWithIdentityCredential_result&);
  TalkService_registerDeviceWithIdentityCredential_result() : success() {
  }

  virtual ~TalkService_registerDeviceWithIdentityCredential_result() throw();
  std::string success;
  TalkException e;

  _TalkService_registerDeviceWithIdentityCredential_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_registerDeviceWithIdentityCredential_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_registerDeviceWithIdentityCredential_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_registerDeviceWithIdentityCredential_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_registerDeviceWithIdentityCredential_presult__isset {
  _TalkService_registerDeviceWithIdentityCredential_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_registerDeviceWithIdentityCredential_presult__isset;

class TalkService_registerDeviceWithIdentityCredential_presult {
 public:


  virtual ~TalkService_registerDeviceWithIdentityCredential_presult() throw();
  std::string* success;
  TalkException e;

  _TalkService_registerDeviceWithIdentityCredential_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_registerDeviceWithoutPhoneNumber_args__isset {
  _TalkService_registerDeviceWithoutPhoneNumber_args__isset() : region(false), udidHash(false), deviceInfo(false) {}
  bool region :1;
  bool udidHash :1;
  bool deviceInfo :1;
} _TalkService_registerDeviceWithoutPhoneNumber_args__isset;

class TalkService_registerDeviceWithoutPhoneNumber_args {
 public:

  TalkService_registerDeviceWithoutPhoneNumber_args(const TalkService_registerDeviceWithoutPhoneNumber_args&);
  TalkService_registerDeviceWithoutPhoneNumber_args& operator=(const TalkService_registerDeviceWithoutPhoneNumber_args&);
  TalkService_registerDeviceWithoutPhoneNumber_args() : region(), udidHash() {
  }

  virtual ~TalkService_registerDeviceWithoutPhoneNumber_args() throw();
  std::string region;
  std::string udidHash;
  DeviceInfo deviceInfo;

  _TalkService_registerDeviceWithoutPhoneNumber_args__isset __isset;

  void __set_region(const std::string& val);

  void __set_udidHash(const std::string& val);

  void __set_deviceInfo(const DeviceInfo& val);

  bool operator == (const TalkService_registerDeviceWithoutPhoneNumber_args & rhs) const
  {
    if (!(region == rhs.region))
      return false;
    if (!(udidHash == rhs.udidHash))
      return false;
    if (!(deviceInfo == rhs.deviceInfo))
      return false;
    return true;
  }
  bool operator != (const TalkService_registerDeviceWithoutPhoneNumber_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_registerDeviceWithoutPhoneNumber_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_registerDeviceWithoutPhoneNumber_pargs {
 public:


  virtual ~TalkService_registerDeviceWithoutPhoneNumber_pargs() throw();
  const std::string* region;
  const std::string* udidHash;
  const DeviceInfo* deviceInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_registerDeviceWithoutPhoneNumber_result__isset {
  _TalkService_registerDeviceWithoutPhoneNumber_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_registerDeviceWithoutPhoneNumber_result__isset;

class TalkService_registerDeviceWithoutPhoneNumber_result {
 public:

  TalkService_registerDeviceWithoutPhoneNumber_result(const TalkService_registerDeviceWithoutPhoneNumber_result&);
  TalkService_registerDeviceWithoutPhoneNumber_result& operator=(const TalkService_registerDeviceWithoutPhoneNumber_result&);
  TalkService_registerDeviceWithoutPhoneNumber_result() : success() {
  }

  virtual ~TalkService_registerDeviceWithoutPhoneNumber_result() throw();
  std::string success;
  TalkException e;

  _TalkService_registerDeviceWithoutPhoneNumber_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_registerDeviceWithoutPhoneNumber_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_registerDeviceWithoutPhoneNumber_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_registerDeviceWithoutPhoneNumber_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_registerDeviceWithoutPhoneNumber_presult__isset {
  _TalkService_registerDeviceWithoutPhoneNumber_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_registerDeviceWithoutPhoneNumber_presult__isset;

class TalkService_registerDeviceWithoutPhoneNumber_presult {
 public:


  virtual ~TalkService_registerDeviceWithoutPhoneNumber_presult() throw();
  std::string* success;
  TalkException e;

  _TalkService_registerDeviceWithoutPhoneNumber_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_args__isset {
  _TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_args__isset() : region(false), udidHash(false), deviceInfo(false), provider(false), identifier(false), verifier(false), mid(false), migrationPincodeSessionId(false) {}
  bool region :1;
  bool udidHash :1;
  bool deviceInfo :1;
  bool provider :1;
  bool identifier :1;
  bool verifier :1;
  bool mid :1;
  bool migrationPincodeSessionId :1;
} _TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_args__isset;

class TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_args {
 public:

  TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_args(const TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_args&);
  TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_args& operator=(const TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_args&);
  TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_args() : region(), udidHash(), provider((IdentityProvider::type)0), identifier(), verifier(), mid(), migrationPincodeSessionId() {
  }

  virtual ~TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_args() throw();
  std::string region;
  std::string udidHash;
  DeviceInfo deviceInfo;
  IdentityProvider::type provider;
  std::string identifier;
  std::string verifier;
  std::string mid;
  std::string migrationPincodeSessionId;

  _TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_args__isset __isset;

  void __set_region(const std::string& val);

  void __set_udidHash(const std::string& val);

  void __set_deviceInfo(const DeviceInfo& val);

  void __set_provider(const IdentityProvider::type val);

  void __set_identifier(const std::string& val);

  void __set_verifier(const std::string& val);

  void __set_mid(const std::string& val);

  void __set_migrationPincodeSessionId(const std::string& val);

  bool operator == (const TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_args & rhs) const
  {
    if (!(region == rhs.region))
      return false;
    if (!(udidHash == rhs.udidHash))
      return false;
    if (!(deviceInfo == rhs.deviceInfo))
      return false;
    if (!(provider == rhs.provider))
      return false;
    if (!(identifier == rhs.identifier))
      return false;
    if (!(verifier == rhs.verifier))
      return false;
    if (!(mid == rhs.mid))
      return false;
    if (!(migrationPincodeSessionId == rhs.migrationPincodeSessionId))
      return false;
    return true;
  }
  bool operator != (const TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_pargs {
 public:


  virtual ~TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_pargs() throw();
  const std::string* region;
  const std::string* udidHash;
  const DeviceInfo* deviceInfo;
  const IdentityProvider::type* provider;
  const std::string* identifier;
  const std::string* verifier;
  const std::string* mid;
  const std::string* migrationPincodeSessionId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_result__isset {
  _TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_result__isset;

class TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_result {
 public:

  TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_result(const TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_result&);
  TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_result& operator=(const TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_result&);
  TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_result() : success() {
  }

  virtual ~TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_result() throw();
  std::string success;
  TalkException e;

  _TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_presult__isset {
  _TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_presult__isset;

class TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_presult {
 public:


  virtual ~TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_presult() throw();
  std::string* success;
  TalkException e;

  _TalkService_registerDeviceWithoutPhoneNumberWithIdentityCredential_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_registerUserid_args__isset {
  _TalkService_registerUserid_args__isset() : reqSeq(false), userid(false) {}
  bool reqSeq :1;
  bool userid :1;
} _TalkService_registerUserid_args__isset;

class TalkService_registerUserid_args {
 public:

  TalkService_registerUserid_args(const TalkService_registerUserid_args&);
  TalkService_registerUserid_args& operator=(const TalkService_registerUserid_args&);
  TalkService_registerUserid_args() : reqSeq(0), userid() {
  }

  virtual ~TalkService_registerUserid_args() throw();
  int32_t reqSeq;
  std::string userid;

  _TalkService_registerUserid_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_userid(const std::string& val);

  bool operator == (const TalkService_registerUserid_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(userid == rhs.userid))
      return false;
    return true;
  }
  bool operator != (const TalkService_registerUserid_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_registerUserid_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_registerUserid_pargs {
 public:


  virtual ~TalkService_registerUserid_pargs() throw();
  const int32_t* reqSeq;
  const std::string* userid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_registerUserid_result__isset {
  _TalkService_registerUserid_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_registerUserid_result__isset;

class TalkService_registerUserid_result {
 public:

  TalkService_registerUserid_result(const TalkService_registerUserid_result&);
  TalkService_registerUserid_result& operator=(const TalkService_registerUserid_result&);
  TalkService_registerUserid_result() : success(0) {
  }

  virtual ~TalkService_registerUserid_result() throw();
  bool success;
  TalkException e;

  _TalkService_registerUserid_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_registerUserid_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_registerUserid_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_registerUserid_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_registerUserid_presult__isset {
  _TalkService_registerUserid_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_registerUserid_presult__isset;

class TalkService_registerUserid_presult {
 public:


  virtual ~TalkService_registerUserid_presult() throw();
  bool* success;
  TalkException e;

  _TalkService_registerUserid_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_registerWapDevice_args__isset {
  _TalkService_registerWapDevice_args__isset() : invitationHash(false), guidHash(false), email(false), deviceInfo(false) {}
  bool invitationHash :1;
  bool guidHash :1;
  bool email :1;
  bool deviceInfo :1;
} _TalkService_registerWapDevice_args__isset;

class TalkService_registerWapDevice_args {
 public:

  TalkService_registerWapDevice_args(const TalkService_registerWapDevice_args&);
  TalkService_registerWapDevice_args& operator=(const TalkService_registerWapDevice_args&);
  TalkService_registerWapDevice_args() : invitationHash(), guidHash(), email() {
  }

  virtual ~TalkService_registerWapDevice_args() throw();
  std::string invitationHash;
  std::string guidHash;
  std::string email;
  DeviceInfo deviceInfo;

  _TalkService_registerWapDevice_args__isset __isset;

  void __set_invitationHash(const std::string& val);

  void __set_guidHash(const std::string& val);

  void __set_email(const std::string& val);

  void __set_deviceInfo(const DeviceInfo& val);

  bool operator == (const TalkService_registerWapDevice_args & rhs) const
  {
    if (!(invitationHash == rhs.invitationHash))
      return false;
    if (!(guidHash == rhs.guidHash))
      return false;
    if (!(email == rhs.email))
      return false;
    if (!(deviceInfo == rhs.deviceInfo))
      return false;
    return true;
  }
  bool operator != (const TalkService_registerWapDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_registerWapDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_registerWapDevice_pargs {
 public:


  virtual ~TalkService_registerWapDevice_pargs() throw();
  const std::string* invitationHash;
  const std::string* guidHash;
  const std::string* email;
  const DeviceInfo* deviceInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_registerWapDevice_result__isset {
  _TalkService_registerWapDevice_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_registerWapDevice_result__isset;

class TalkService_registerWapDevice_result {
 public:

  TalkService_registerWapDevice_result(const TalkService_registerWapDevice_result&);
  TalkService_registerWapDevice_result& operator=(const TalkService_registerWapDevice_result&);
  TalkService_registerWapDevice_result() : success() {
  }

  virtual ~TalkService_registerWapDevice_result() throw();
  std::string success;
  TalkException e;

  _TalkService_registerWapDevice_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_registerWapDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_registerWapDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_registerWapDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_registerWapDevice_presult__isset {
  _TalkService_registerWapDevice_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_registerWapDevice_presult__isset;

class TalkService_registerWapDevice_presult {
 public:


  virtual ~TalkService_registerWapDevice_presult() throw();
  std::string* success;
  TalkException e;

  _TalkService_registerWapDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_registerWithExistingSnsIdAndIdentityCredential_args__isset {
  _TalkService_registerWithExistingSnsIdAndIdentityCredential_args__isset() : identityCredential(false), region(false), udidHash(false), deviceInfo(false) {}
  bool identityCredential :1;
  bool region :1;
  bool udidHash :1;
  bool deviceInfo :1;
} _TalkService_registerWithExistingSnsIdAndIdentityCredential_args__isset;

class TalkService_registerWithExistingSnsIdAndIdentityCredential_args {
 public:

  TalkService_registerWithExistingSnsIdAndIdentityCredential_args(const TalkService_registerWithExistingSnsIdAndIdentityCredential_args&);
  TalkService_registerWithExistingSnsIdAndIdentityCredential_args& operator=(const TalkService_registerWithExistingSnsIdAndIdentityCredential_args&);
  TalkService_registerWithExistingSnsIdAndIdentityCredential_args() : region(), udidHash() {
  }

  virtual ~TalkService_registerWithExistingSnsIdAndIdentityCredential_args() throw();
  IdentityCredential identityCredential;
  std::string region;
  std::string udidHash;
  DeviceInfo deviceInfo;

  _TalkService_registerWithExistingSnsIdAndIdentityCredential_args__isset __isset;

  void __set_identityCredential(const IdentityCredential& val);

  void __set_region(const std::string& val);

  void __set_udidHash(const std::string& val);

  void __set_deviceInfo(const DeviceInfo& val);

  bool operator == (const TalkService_registerWithExistingSnsIdAndIdentityCredential_args & rhs) const
  {
    if (!(identityCredential == rhs.identityCredential))
      return false;
    if (!(region == rhs.region))
      return false;
    if (!(udidHash == rhs.udidHash))
      return false;
    if (!(deviceInfo == rhs.deviceInfo))
      return false;
    return true;
  }
  bool operator != (const TalkService_registerWithExistingSnsIdAndIdentityCredential_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_registerWithExistingSnsIdAndIdentityCredential_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_registerWithExistingSnsIdAndIdentityCredential_pargs {
 public:


  virtual ~TalkService_registerWithExistingSnsIdAndIdentityCredential_pargs() throw();
  const IdentityCredential* identityCredential;
  const std::string* region;
  const std::string* udidHash;
  const DeviceInfo* deviceInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_registerWithExistingSnsIdAndIdentityCredential_result__isset {
  _TalkService_registerWithExistingSnsIdAndIdentityCredential_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_registerWithExistingSnsIdAndIdentityCredential_result__isset;

class TalkService_registerWithExistingSnsIdAndIdentityCredential_result {
 public:

  TalkService_registerWithExistingSnsIdAndIdentityCredential_result(const TalkService_registerWithExistingSnsIdAndIdentityCredential_result&);
  TalkService_registerWithExistingSnsIdAndIdentityCredential_result& operator=(const TalkService_registerWithExistingSnsIdAndIdentityCredential_result&);
  TalkService_registerWithExistingSnsIdAndIdentityCredential_result() : success() {
  }

  virtual ~TalkService_registerWithExistingSnsIdAndIdentityCredential_result() throw();
  std::string success;
  TalkException e;

  _TalkService_registerWithExistingSnsIdAndIdentityCredential_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_registerWithExistingSnsIdAndIdentityCredential_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_registerWithExistingSnsIdAndIdentityCredential_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_registerWithExistingSnsIdAndIdentityCredential_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_registerWithExistingSnsIdAndIdentityCredential_presult__isset {
  _TalkService_registerWithExistingSnsIdAndIdentityCredential_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_registerWithExistingSnsIdAndIdentityCredential_presult__isset;

class TalkService_registerWithExistingSnsIdAndIdentityCredential_presult {
 public:


  virtual ~TalkService_registerWithExistingSnsIdAndIdentityCredential_presult() throw();
  std::string* success;
  TalkException e;

  _TalkService_registerWithExistingSnsIdAndIdentityCredential_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_registerWithSnsId_args__isset {
  _TalkService_registerWithSnsId_args__isset() : snsIdType(false), snsAccessToken(false), region(false), udidHash(false), deviceInfo(false), mid(false) {}
  bool snsIdType :1;
  bool snsAccessToken :1;
  bool region :1;
  bool udidHash :1;
  bool deviceInfo :1;
  bool mid :1;
} _TalkService_registerWithSnsId_args__isset;

class TalkService_registerWithSnsId_args {
 public:

  TalkService_registerWithSnsId_args(const TalkService_registerWithSnsId_args&);
  TalkService_registerWithSnsId_args& operator=(const TalkService_registerWithSnsId_args&);
  TalkService_registerWithSnsId_args() : snsIdType((SnsIdType::type)0), snsAccessToken(), region(), udidHash(), mid() {
  }

  virtual ~TalkService_registerWithSnsId_args() throw();
  SnsIdType::type snsIdType;
  std::string snsAccessToken;
  std::string region;
  std::string udidHash;
  DeviceInfo deviceInfo;
  std::string mid;

  _TalkService_registerWithSnsId_args__isset __isset;

  void __set_snsIdType(const SnsIdType::type val);

  void __set_snsAccessToken(const std::string& val);

  void __set_region(const std::string& val);

  void __set_udidHash(const std::string& val);

  void __set_deviceInfo(const DeviceInfo& val);

  void __set_mid(const std::string& val);

  bool operator == (const TalkService_registerWithSnsId_args & rhs) const
  {
    if (!(snsIdType == rhs.snsIdType))
      return false;
    if (!(snsAccessToken == rhs.snsAccessToken))
      return false;
    if (!(region == rhs.region))
      return false;
    if (!(udidHash == rhs.udidHash))
      return false;
    if (!(deviceInfo == rhs.deviceInfo))
      return false;
    if (!(mid == rhs.mid))
      return false;
    return true;
  }
  bool operator != (const TalkService_registerWithSnsId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_registerWithSnsId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_registerWithSnsId_pargs {
 public:


  virtual ~TalkService_registerWithSnsId_pargs() throw();
  const SnsIdType::type* snsIdType;
  const std::string* snsAccessToken;
  const std::string* region;
  const std::string* udidHash;
  const DeviceInfo* deviceInfo;
  const std::string* mid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_registerWithSnsId_result__isset {
  _TalkService_registerWithSnsId_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_registerWithSnsId_result__isset;

class TalkService_registerWithSnsId_result {
 public:

  TalkService_registerWithSnsId_result(const TalkService_registerWithSnsId_result&);
  TalkService_registerWithSnsId_result& operator=(const TalkService_registerWithSnsId_result&);
  TalkService_registerWithSnsId_result() {
  }

  virtual ~TalkService_registerWithSnsId_result() throw();
  RegisterWithSnsIdResult success;
  TalkException e;

  _TalkService_registerWithSnsId_result__isset __isset;

  void __set_success(const RegisterWithSnsIdResult& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_registerWithSnsId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_registerWithSnsId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_registerWithSnsId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_registerWithSnsId_presult__isset {
  _TalkService_registerWithSnsId_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_registerWithSnsId_presult__isset;

class TalkService_registerWithSnsId_presult {
 public:


  virtual ~TalkService_registerWithSnsId_presult() throw();
  RegisterWithSnsIdResult* success;
  TalkException e;

  _TalkService_registerWithSnsId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_registerWithSnsIdAndIdentityCredential_args__isset {
  _TalkService_registerWithSnsIdAndIdentityCredential_args__isset() : snsIdType(false), snsAccessToken(false), identityCredential(false), region(false), udidHash(false), deviceInfo(false) {}
  bool snsIdType :1;
  bool snsAccessToken :1;
  bool identityCredential :1;
  bool region :1;
  bool udidHash :1;
  bool deviceInfo :1;
} _TalkService_registerWithSnsIdAndIdentityCredential_args__isset;

class TalkService_registerWithSnsIdAndIdentityCredential_args {
 public:

  TalkService_registerWithSnsIdAndIdentityCredential_args(const TalkService_registerWithSnsIdAndIdentityCredential_args&);
  TalkService_registerWithSnsIdAndIdentityCredential_args& operator=(const TalkService_registerWithSnsIdAndIdentityCredential_args&);
  TalkService_registerWithSnsIdAndIdentityCredential_args() : snsIdType((SnsIdType::type)0), snsAccessToken(), region(), udidHash() {
  }

  virtual ~TalkService_registerWithSnsIdAndIdentityCredential_args() throw();
  SnsIdType::type snsIdType;
  std::string snsAccessToken;
  IdentityCredential identityCredential;
  std::string region;
  std::string udidHash;
  DeviceInfo deviceInfo;

  _TalkService_registerWithSnsIdAndIdentityCredential_args__isset __isset;

  void __set_snsIdType(const SnsIdType::type val);

  void __set_snsAccessToken(const std::string& val);

  void __set_identityCredential(const IdentityCredential& val);

  void __set_region(const std::string& val);

  void __set_udidHash(const std::string& val);

  void __set_deviceInfo(const DeviceInfo& val);

  bool operator == (const TalkService_registerWithSnsIdAndIdentityCredential_args & rhs) const
  {
    if (!(snsIdType == rhs.snsIdType))
      return false;
    if (!(snsAccessToken == rhs.snsAccessToken))
      return false;
    if (!(identityCredential == rhs.identityCredential))
      return false;
    if (!(region == rhs.region))
      return false;
    if (!(udidHash == rhs.udidHash))
      return false;
    if (!(deviceInfo == rhs.deviceInfo))
      return false;
    return true;
  }
  bool operator != (const TalkService_registerWithSnsIdAndIdentityCredential_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_registerWithSnsIdAndIdentityCredential_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_registerWithSnsIdAndIdentityCredential_pargs {
 public:


  virtual ~TalkService_registerWithSnsIdAndIdentityCredential_pargs() throw();
  const SnsIdType::type* snsIdType;
  const std::string* snsAccessToken;
  const IdentityCredential* identityCredential;
  const std::string* region;
  const std::string* udidHash;
  const DeviceInfo* deviceInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_registerWithSnsIdAndIdentityCredential_result__isset {
  _TalkService_registerWithSnsIdAndIdentityCredential_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_registerWithSnsIdAndIdentityCredential_result__isset;

class TalkService_registerWithSnsIdAndIdentityCredential_result {
 public:

  TalkService_registerWithSnsIdAndIdentityCredential_result(const TalkService_registerWithSnsIdAndIdentityCredential_result&);
  TalkService_registerWithSnsIdAndIdentityCredential_result& operator=(const TalkService_registerWithSnsIdAndIdentityCredential_result&);
  TalkService_registerWithSnsIdAndIdentityCredential_result() : success() {
  }

  virtual ~TalkService_registerWithSnsIdAndIdentityCredential_result() throw();
  std::string success;
  TalkException e;

  _TalkService_registerWithSnsIdAndIdentityCredential_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_registerWithSnsIdAndIdentityCredential_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_registerWithSnsIdAndIdentityCredential_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_registerWithSnsIdAndIdentityCredential_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_registerWithSnsIdAndIdentityCredential_presult__isset {
  _TalkService_registerWithSnsIdAndIdentityCredential_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_registerWithSnsIdAndIdentityCredential_presult__isset;

class TalkService_registerWithSnsIdAndIdentityCredential_presult {
 public:


  virtual ~TalkService_registerWithSnsIdAndIdentityCredential_presult() throw();
  std::string* success;
  TalkException e;

  _TalkService_registerWithSnsIdAndIdentityCredential_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TalkService_reissueDeviceCredential_args {
 public:

  TalkService_reissueDeviceCredential_args(const TalkService_reissueDeviceCredential_args&);
  TalkService_reissueDeviceCredential_args& operator=(const TalkService_reissueDeviceCredential_args&);
  TalkService_reissueDeviceCredential_args() {
  }

  virtual ~TalkService_reissueDeviceCredential_args() throw();

  bool operator == (const TalkService_reissueDeviceCredential_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TalkService_reissueDeviceCredential_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_reissueDeviceCredential_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_reissueDeviceCredential_pargs {
 public:


  virtual ~TalkService_reissueDeviceCredential_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_reissueDeviceCredential_result__isset {
  _TalkService_reissueDeviceCredential_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_reissueDeviceCredential_result__isset;

class TalkService_reissueDeviceCredential_result {
 public:

  TalkService_reissueDeviceCredential_result(const TalkService_reissueDeviceCredential_result&);
  TalkService_reissueDeviceCredential_result& operator=(const TalkService_reissueDeviceCredential_result&);
  TalkService_reissueDeviceCredential_result() : success() {
  }

  virtual ~TalkService_reissueDeviceCredential_result() throw();
  std::string success;
  TalkException e;

  _TalkService_reissueDeviceCredential_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_reissueDeviceCredential_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_reissueDeviceCredential_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_reissueDeviceCredential_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_reissueDeviceCredential_presult__isset {
  _TalkService_reissueDeviceCredential_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_reissueDeviceCredential_presult__isset;

class TalkService_reissueDeviceCredential_presult {
 public:


  virtual ~TalkService_reissueDeviceCredential_presult() throw();
  std::string* success;
  TalkException e;

  _TalkService_reissueDeviceCredential_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_reissueUserTicket_args__isset {
  _TalkService_reissueUserTicket_args__isset() : expirationTime(false), maxUseCount(false) {}
  bool expirationTime :1;
  bool maxUseCount :1;
} _TalkService_reissueUserTicket_args__isset;

class TalkService_reissueUserTicket_args {
 public:

  TalkService_reissueUserTicket_args(const TalkService_reissueUserTicket_args&);
  TalkService_reissueUserTicket_args& operator=(const TalkService_reissueUserTicket_args&);
  TalkService_reissueUserTicket_args() : expirationTime(0), maxUseCount(0) {
  }

  virtual ~TalkService_reissueUserTicket_args() throw();
  int64_t expirationTime;
  int32_t maxUseCount;

  _TalkService_reissueUserTicket_args__isset __isset;

  void __set_expirationTime(const int64_t val);

  void __set_maxUseCount(const int32_t val);

  bool operator == (const TalkService_reissueUserTicket_args & rhs) const
  {
    if (!(expirationTime == rhs.expirationTime))
      return false;
    if (!(maxUseCount == rhs.maxUseCount))
      return false;
    return true;
  }
  bool operator != (const TalkService_reissueUserTicket_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_reissueUserTicket_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_reissueUserTicket_pargs {
 public:


  virtual ~TalkService_reissueUserTicket_pargs() throw();
  const int64_t* expirationTime;
  const int32_t* maxUseCount;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_reissueUserTicket_result__isset {
  _TalkService_reissueUserTicket_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_reissueUserTicket_result__isset;

class TalkService_reissueUserTicket_result {
 public:

  TalkService_reissueUserTicket_result(const TalkService_reissueUserTicket_result&);
  TalkService_reissueUserTicket_result& operator=(const TalkService_reissueUserTicket_result&);
  TalkService_reissueUserTicket_result() : success() {
  }

  virtual ~TalkService_reissueUserTicket_result() throw();
  std::string success;
  TalkException e;

  _TalkService_reissueUserTicket_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_reissueUserTicket_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_reissueUserTicket_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_reissueUserTicket_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_reissueUserTicket_presult__isset {
  _TalkService_reissueUserTicket_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_reissueUserTicket_presult__isset;

class TalkService_reissueUserTicket_presult {
 public:


  virtual ~TalkService_reissueUserTicket_presult() throw();
  std::string* success;
  TalkException e;

  _TalkService_reissueUserTicket_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getMessageReadRange_args__isset {
  _TalkService_getMessageReadRange_args__isset() : chatIds(false) {}
  bool chatIds :1;
} _TalkService_getMessageReadRange_args__isset;

class TalkService_getMessageReadRange_args {
 public:

  TalkService_getMessageReadRange_args(const TalkService_getMessageReadRange_args&);
  TalkService_getMessageReadRange_args& operator=(const TalkService_getMessageReadRange_args&);
  TalkService_getMessageReadRange_args() {
  }

  virtual ~TalkService_getMessageReadRange_args() throw();
  std::vector<std::string>  chatIds;

  _TalkService_getMessageReadRange_args__isset __isset;

  void __set_chatIds(const std::vector<std::string> & val);

  bool operator == (const TalkService_getMessageReadRange_args & rhs) const
  {
    if (!(chatIds == rhs.chatIds))
      return false;
    return true;
  }
  bool operator != (const TalkService_getMessageReadRange_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getMessageReadRange_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getMessageReadRange_pargs {
 public:


  virtual ~TalkService_getMessageReadRange_pargs() throw();
  const std::vector<std::string> * chatIds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getMessageReadRange_result__isset {
  _TalkService_getMessageReadRange_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getMessageReadRange_result__isset;

class TalkService_getMessageReadRange_result {
 public:

  TalkService_getMessageReadRange_result(const TalkService_getMessageReadRange_result&);
  TalkService_getMessageReadRange_result& operator=(const TalkService_getMessageReadRange_result&);
  TalkService_getMessageReadRange_result() {
  }

  virtual ~TalkService_getMessageReadRange_result() throw();
  std::vector<TMessageReadRange>  success;
  TalkException e;

  _TalkService_getMessageReadRange_result__isset __isset;

  void __set_success(const std::vector<TMessageReadRange> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getMessageReadRange_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getMessageReadRange_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getMessageReadRange_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getMessageReadRange_presult__isset {
  _TalkService_getMessageReadRange_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getMessageReadRange_presult__isset;

class TalkService_getMessageReadRange_presult {
 public:


  virtual ~TalkService_getMessageReadRange_presult() throw();
  std::vector<TMessageReadRange> * success;
  TalkException e;

  _TalkService_getMessageReadRange_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_rejectGroupInvitation_args__isset {
  _TalkService_rejectGroupInvitation_args__isset() : reqSeq(false), groupId(false) {}
  bool reqSeq :1;
  bool groupId :1;
} _TalkService_rejectGroupInvitation_args__isset;

class TalkService_rejectGroupInvitation_args {
 public:

  TalkService_rejectGroupInvitation_args(const TalkService_rejectGroupInvitation_args&);
  TalkService_rejectGroupInvitation_args& operator=(const TalkService_rejectGroupInvitation_args&);
  TalkService_rejectGroupInvitation_args() : reqSeq(0), groupId() {
  }

  virtual ~TalkService_rejectGroupInvitation_args() throw();
  int32_t reqSeq;
  std::string groupId;

  _TalkService_rejectGroupInvitation_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_groupId(const std::string& val);

  bool operator == (const TalkService_rejectGroupInvitation_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(groupId == rhs.groupId))
      return false;
    return true;
  }
  bool operator != (const TalkService_rejectGroupInvitation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_rejectGroupInvitation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_rejectGroupInvitation_pargs {
 public:


  virtual ~TalkService_rejectGroupInvitation_pargs() throw();
  const int32_t* reqSeq;
  const std::string* groupId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_rejectGroupInvitation_result__isset {
  _TalkService_rejectGroupInvitation_result__isset() : e(false) {}
  bool e :1;
} _TalkService_rejectGroupInvitation_result__isset;

class TalkService_rejectGroupInvitation_result {
 public:

  TalkService_rejectGroupInvitation_result(const TalkService_rejectGroupInvitation_result&);
  TalkService_rejectGroupInvitation_result& operator=(const TalkService_rejectGroupInvitation_result&);
  TalkService_rejectGroupInvitation_result() {
  }

  virtual ~TalkService_rejectGroupInvitation_result() throw();
  TalkException e;

  _TalkService_rejectGroupInvitation_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_rejectGroupInvitation_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_rejectGroupInvitation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_rejectGroupInvitation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_rejectGroupInvitation_presult__isset {
  _TalkService_rejectGroupInvitation_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_rejectGroupInvitation_presult__isset;

class TalkService_rejectGroupInvitation_presult {
 public:


  virtual ~TalkService_rejectGroupInvitation_presult() throw();
  TalkException e;

  _TalkService_rejectGroupInvitation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TalkService_releaseSession_args {
 public:

  TalkService_releaseSession_args(const TalkService_releaseSession_args&);
  TalkService_releaseSession_args& operator=(const TalkService_releaseSession_args&);
  TalkService_releaseSession_args() {
  }

  virtual ~TalkService_releaseSession_args() throw();

  bool operator == (const TalkService_releaseSession_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TalkService_releaseSession_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_releaseSession_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_releaseSession_pargs {
 public:


  virtual ~TalkService_releaseSession_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_releaseSession_result__isset {
  _TalkService_releaseSession_result__isset() : e(false) {}
  bool e :1;
} _TalkService_releaseSession_result__isset;

class TalkService_releaseSession_result {
 public:

  TalkService_releaseSession_result(const TalkService_releaseSession_result&);
  TalkService_releaseSession_result& operator=(const TalkService_releaseSession_result&);
  TalkService_releaseSession_result() {
  }

  virtual ~TalkService_releaseSession_result() throw();
  TalkException e;

  _TalkService_releaseSession_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_releaseSession_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_releaseSession_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_releaseSession_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_releaseSession_presult__isset {
  _TalkService_releaseSession_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_releaseSession_presult__isset;

class TalkService_releaseSession_presult {
 public:


  virtual ~TalkService_releaseSession_presult() throw();
  TalkException e;

  _TalkService_releaseSession_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_removeAllMessages_args__isset {
  _TalkService_removeAllMessages_args__isset() : seq(false), lastMessageId(false) {}
  bool seq :1;
  bool lastMessageId :1;
} _TalkService_removeAllMessages_args__isset;

class TalkService_removeAllMessages_args {
 public:

  TalkService_removeAllMessages_args(const TalkService_removeAllMessages_args&);
  TalkService_removeAllMessages_args& operator=(const TalkService_removeAllMessages_args&);
  TalkService_removeAllMessages_args() : seq(0), lastMessageId() {
  }

  virtual ~TalkService_removeAllMessages_args() throw();
  int32_t seq;
  std::string lastMessageId;

  _TalkService_removeAllMessages_args__isset __isset;

  void __set_seq(const int32_t val);

  void __set_lastMessageId(const std::string& val);

  bool operator == (const TalkService_removeAllMessages_args & rhs) const
  {
    if (!(seq == rhs.seq))
      return false;
    if (!(lastMessageId == rhs.lastMessageId))
      return false;
    return true;
  }
  bool operator != (const TalkService_removeAllMessages_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_removeAllMessages_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_removeAllMessages_pargs {
 public:


  virtual ~TalkService_removeAllMessages_pargs() throw();
  const int32_t* seq;
  const std::string* lastMessageId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_removeAllMessages_result__isset {
  _TalkService_removeAllMessages_result__isset() : e(false) {}
  bool e :1;
} _TalkService_removeAllMessages_result__isset;

class TalkService_removeAllMessages_result {
 public:

  TalkService_removeAllMessages_result(const TalkService_removeAllMessages_result&);
  TalkService_removeAllMessages_result& operator=(const TalkService_removeAllMessages_result&);
  TalkService_removeAllMessages_result() {
  }

  virtual ~TalkService_removeAllMessages_result() throw();
  TalkException e;

  _TalkService_removeAllMessages_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_removeAllMessages_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_removeAllMessages_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_removeAllMessages_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_removeAllMessages_presult__isset {
  _TalkService_removeAllMessages_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_removeAllMessages_presult__isset;

class TalkService_removeAllMessages_presult {
 public:


  virtual ~TalkService_removeAllMessages_presult() throw();
  TalkException e;

  _TalkService_removeAllMessages_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_removeBuddyLocation_args__isset {
  _TalkService_removeBuddyLocation_args__isset() : mid(false), index(false) {}
  bool mid :1;
  bool index :1;
} _TalkService_removeBuddyLocation_args__isset;

class TalkService_removeBuddyLocation_args {
 public:

  TalkService_removeBuddyLocation_args(const TalkService_removeBuddyLocation_args&);
  TalkService_removeBuddyLocation_args& operator=(const TalkService_removeBuddyLocation_args&);
  TalkService_removeBuddyLocation_args() : mid(), index(0) {
  }

  virtual ~TalkService_removeBuddyLocation_args() throw();
  std::string mid;
  int32_t index;

  _TalkService_removeBuddyLocation_args__isset __isset;

  void __set_mid(const std::string& val);

  void __set_index(const int32_t val);

  bool operator == (const TalkService_removeBuddyLocation_args & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    if (!(index == rhs.index))
      return false;
    return true;
  }
  bool operator != (const TalkService_removeBuddyLocation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_removeBuddyLocation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_removeBuddyLocation_pargs {
 public:


  virtual ~TalkService_removeBuddyLocation_pargs() throw();
  const std::string* mid;
  const int32_t* index;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_removeBuddyLocation_result__isset {
  _TalkService_removeBuddyLocation_result__isset() : e(false) {}
  bool e :1;
} _TalkService_removeBuddyLocation_result__isset;

class TalkService_removeBuddyLocation_result {
 public:

  TalkService_removeBuddyLocation_result(const TalkService_removeBuddyLocation_result&);
  TalkService_removeBuddyLocation_result& operator=(const TalkService_removeBuddyLocation_result&);
  TalkService_removeBuddyLocation_result() {
  }

  virtual ~TalkService_removeBuddyLocation_result() throw();
  TalkException e;

  _TalkService_removeBuddyLocation_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_removeBuddyLocation_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_removeBuddyLocation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_removeBuddyLocation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_removeBuddyLocation_presult__isset {
  _TalkService_removeBuddyLocation_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_removeBuddyLocation_presult__isset;

class TalkService_removeBuddyLocation_presult {
 public:


  virtual ~TalkService_removeBuddyLocation_presult() throw();
  TalkException e;

  _TalkService_removeBuddyLocation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_removeMessage_args__isset {
  _TalkService_removeMessage_args__isset() : messageId(false) {}
  bool messageId :1;
} _TalkService_removeMessage_args__isset;

class TalkService_removeMessage_args {
 public:

  TalkService_removeMessage_args(const TalkService_removeMessage_args&);
  TalkService_removeMessage_args& operator=(const TalkService_removeMessage_args&);
  TalkService_removeMessage_args() : messageId() {
  }

  virtual ~TalkService_removeMessage_args() throw();
  std::string messageId;

  _TalkService_removeMessage_args__isset __isset;

  void __set_messageId(const std::string& val);

  bool operator == (const TalkService_removeMessage_args & rhs) const
  {
    if (!(messageId == rhs.messageId))
      return false;
    return true;
  }
  bool operator != (const TalkService_removeMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_removeMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_removeMessage_pargs {
 public:


  virtual ~TalkService_removeMessage_pargs() throw();
  const std::string* messageId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_removeMessage_result__isset {
  _TalkService_removeMessage_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_removeMessage_result__isset;

class TalkService_removeMessage_result {
 public:

  TalkService_removeMessage_result(const TalkService_removeMessage_result&);
  TalkService_removeMessage_result& operator=(const TalkService_removeMessage_result&);
  TalkService_removeMessage_result() : success(0) {
  }

  virtual ~TalkService_removeMessage_result() throw();
  bool success;
  TalkException e;

  _TalkService_removeMessage_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_removeMessage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_removeMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_removeMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_removeMessage_presult__isset {
  _TalkService_removeMessage_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_removeMessage_presult__isset;

class TalkService_removeMessage_presult {
 public:


  virtual ~TalkService_removeMessage_presult() throw();
  bool* success;
  TalkException e;

  _TalkService_removeMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_makeUserAddMyselfAsContact_args__isset {
  _TalkService_makeUserAddMyselfAsContact_args__isset() : contactOwnerMid(false) {}
  bool contactOwnerMid :1;
} _TalkService_makeUserAddMyselfAsContact_args__isset;

class TalkService_makeUserAddMyselfAsContact_args {
 public:

  TalkService_makeUserAddMyselfAsContact_args(const TalkService_makeUserAddMyselfAsContact_args&);
  TalkService_makeUserAddMyselfAsContact_args& operator=(const TalkService_makeUserAddMyselfAsContact_args&);
  TalkService_makeUserAddMyselfAsContact_args() : contactOwnerMid() {
  }

  virtual ~TalkService_makeUserAddMyselfAsContact_args() throw();
  std::string contactOwnerMid;

  _TalkService_makeUserAddMyselfAsContact_args__isset __isset;

  void __set_contactOwnerMid(const std::string& val);

  bool operator == (const TalkService_makeUserAddMyselfAsContact_args & rhs) const
  {
    if (!(contactOwnerMid == rhs.contactOwnerMid))
      return false;
    return true;
  }
  bool operator != (const TalkService_makeUserAddMyselfAsContact_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_makeUserAddMyselfAsContact_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_makeUserAddMyselfAsContact_pargs {
 public:


  virtual ~TalkService_makeUserAddMyselfAsContact_pargs() throw();
  const std::string* contactOwnerMid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_makeUserAddMyselfAsContact_result__isset {
  _TalkService_makeUserAddMyselfAsContact_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_makeUserAddMyselfAsContact_result__isset;

class TalkService_makeUserAddMyselfAsContact_result {
 public:

  TalkService_makeUserAddMyselfAsContact_result(const TalkService_makeUserAddMyselfAsContact_result&);
  TalkService_makeUserAddMyselfAsContact_result& operator=(const TalkService_makeUserAddMyselfAsContact_result&);
  TalkService_makeUserAddMyselfAsContact_result() {
  }

  virtual ~TalkService_makeUserAddMyselfAsContact_result() throw();
  ContactTransition success;
  TalkException e;

  _TalkService_makeUserAddMyselfAsContact_result__isset __isset;

  void __set_success(const ContactTransition& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_makeUserAddMyselfAsContact_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_makeUserAddMyselfAsContact_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_makeUserAddMyselfAsContact_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_makeUserAddMyselfAsContact_presult__isset {
  _TalkService_makeUserAddMyselfAsContact_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_makeUserAddMyselfAsContact_presult__isset;

class TalkService_makeUserAddMyselfAsContact_presult {
 public:


  virtual ~TalkService_makeUserAddMyselfAsContact_presult() throw();
  ContactTransition* success;
  TalkException e;

  _TalkService_makeUserAddMyselfAsContact_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_removeMessageFromMyHome_args__isset {
  _TalkService_removeMessageFromMyHome_args__isset() : messageId(false) {}
  bool messageId :1;
} _TalkService_removeMessageFromMyHome_args__isset;

class TalkService_removeMessageFromMyHome_args {
 public:

  TalkService_removeMessageFromMyHome_args(const TalkService_removeMessageFromMyHome_args&);
  TalkService_removeMessageFromMyHome_args& operator=(const TalkService_removeMessageFromMyHome_args&);
  TalkService_removeMessageFromMyHome_args() : messageId() {
  }

  virtual ~TalkService_removeMessageFromMyHome_args() throw();
  std::string messageId;

  _TalkService_removeMessageFromMyHome_args__isset __isset;

  void __set_messageId(const std::string& val);

  bool operator == (const TalkService_removeMessageFromMyHome_args & rhs) const
  {
    if (!(messageId == rhs.messageId))
      return false;
    return true;
  }
  bool operator != (const TalkService_removeMessageFromMyHome_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_removeMessageFromMyHome_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_removeMessageFromMyHome_pargs {
 public:


  virtual ~TalkService_removeMessageFromMyHome_pargs() throw();
  const std::string* messageId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_removeMessageFromMyHome_result__isset {
  _TalkService_removeMessageFromMyHome_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_removeMessageFromMyHome_result__isset;

class TalkService_removeMessageFromMyHome_result {
 public:

  TalkService_removeMessageFromMyHome_result(const TalkService_removeMessageFromMyHome_result&);
  TalkService_removeMessageFromMyHome_result& operator=(const TalkService_removeMessageFromMyHome_result&);
  TalkService_removeMessageFromMyHome_result() : success(0) {
  }

  virtual ~TalkService_removeMessageFromMyHome_result() throw();
  bool success;
  TalkException e;

  _TalkService_removeMessageFromMyHome_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_removeMessageFromMyHome_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_removeMessageFromMyHome_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_removeMessageFromMyHome_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_removeMessageFromMyHome_presult__isset {
  _TalkService_removeMessageFromMyHome_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_removeMessageFromMyHome_presult__isset;

class TalkService_removeMessageFromMyHome_presult {
 public:


  virtual ~TalkService_removeMessageFromMyHome_presult() throw();
  bool* success;
  TalkException e;

  _TalkService_removeMessageFromMyHome_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_removeSnsId_args__isset {
  _TalkService_removeSnsId_args__isset() : snsIdType(false) {}
  bool snsIdType :1;
} _TalkService_removeSnsId_args__isset;

class TalkService_removeSnsId_args {
 public:

  TalkService_removeSnsId_args(const TalkService_removeSnsId_args&);
  TalkService_removeSnsId_args& operator=(const TalkService_removeSnsId_args&);
  TalkService_removeSnsId_args() : snsIdType((SnsIdType::type)0) {
  }

  virtual ~TalkService_removeSnsId_args() throw();
  SnsIdType::type snsIdType;

  _TalkService_removeSnsId_args__isset __isset;

  void __set_snsIdType(const SnsIdType::type val);

  bool operator == (const TalkService_removeSnsId_args & rhs) const
  {
    if (!(snsIdType == rhs.snsIdType))
      return false;
    return true;
  }
  bool operator != (const TalkService_removeSnsId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_removeSnsId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_removeSnsId_pargs {
 public:


  virtual ~TalkService_removeSnsId_pargs() throw();
  const SnsIdType::type* snsIdType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_removeSnsId_result__isset {
  _TalkService_removeSnsId_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_removeSnsId_result__isset;

class TalkService_removeSnsId_result {
 public:

  TalkService_removeSnsId_result(const TalkService_removeSnsId_result&);
  TalkService_removeSnsId_result& operator=(const TalkService_removeSnsId_result&);
  TalkService_removeSnsId_result() : success() {
  }

  virtual ~TalkService_removeSnsId_result() throw();
  std::string success;
  TalkException e;

  _TalkService_removeSnsId_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_removeSnsId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_removeSnsId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_removeSnsId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_removeSnsId_presult__isset {
  _TalkService_removeSnsId_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_removeSnsId_presult__isset;

class TalkService_removeSnsId_presult {
 public:


  virtual ~TalkService_removeSnsId_presult() throw();
  std::string* success;
  TalkException e;

  _TalkService_removeSnsId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_report_args__isset {
  _TalkService_report_args__isset() : syncOpRevision(false), category(false), report(false) {}
  bool syncOpRevision :1;
  bool category :1;
  bool report :1;
} _TalkService_report_args__isset;

class TalkService_report_args {
 public:

  TalkService_report_args(const TalkService_report_args&);
  TalkService_report_args& operator=(const TalkService_report_args&);
  TalkService_report_args() : syncOpRevision(0), category((SyncCategory::type)0), report() {
  }

  virtual ~TalkService_report_args() throw();
  int64_t syncOpRevision;
  SyncCategory::type category;
  std::string report;

  _TalkService_report_args__isset __isset;

  void __set_syncOpRevision(const int64_t val);

  void __set_category(const SyncCategory::type val);

  void __set_report(const std::string& val);

  bool operator == (const TalkService_report_args & rhs) const
  {
    if (!(syncOpRevision == rhs.syncOpRevision))
      return false;
    if (!(category == rhs.category))
      return false;
    if (!(report == rhs.report))
      return false;
    return true;
  }
  bool operator != (const TalkService_report_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_report_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_report_pargs {
 public:


  virtual ~TalkService_report_pargs() throw();
  const int64_t* syncOpRevision;
  const SyncCategory::type* category;
  const std::string* report;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_report_result__isset {
  _TalkService_report_result__isset() : e(false) {}
  bool e :1;
} _TalkService_report_result__isset;

class TalkService_report_result {
 public:

  TalkService_report_result(const TalkService_report_result&);
  TalkService_report_result& operator=(const TalkService_report_result&);
  TalkService_report_result() {
  }

  virtual ~TalkService_report_result() throw();
  TalkException e;

  _TalkService_report_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_report_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_report_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_report_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_report_presult__isset {
  _TalkService_report_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_report_presult__isset;

class TalkService_report_presult {
 public:


  virtual ~TalkService_report_presult() throw();
  TalkException e;

  _TalkService_report_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_reportContacts_args__isset {
  _TalkService_reportContacts_args__isset() : syncOpRevision(false), category(false), contactReports(false), actionType(false) {}
  bool syncOpRevision :1;
  bool category :1;
  bool contactReports :1;
  bool actionType :1;
} _TalkService_reportContacts_args__isset;

class TalkService_reportContacts_args {
 public:

  TalkService_reportContacts_args(const TalkService_reportContacts_args&);
  TalkService_reportContacts_args& operator=(const TalkService_reportContacts_args&);
  TalkService_reportContacts_args() : syncOpRevision(0), category((SyncCategory::type)0), actionType((SyncActionType::type)0) {
  }

  virtual ~TalkService_reportContacts_args() throw();
  int64_t syncOpRevision;
  SyncCategory::type category;
  std::vector<ContactReport>  contactReports;
  SyncActionType::type actionType;

  _TalkService_reportContacts_args__isset __isset;

  void __set_syncOpRevision(const int64_t val);

  void __set_category(const SyncCategory::type val);

  void __set_contactReports(const std::vector<ContactReport> & val);

  void __set_actionType(const SyncActionType::type val);

  bool operator == (const TalkService_reportContacts_args & rhs) const
  {
    if (!(syncOpRevision == rhs.syncOpRevision))
      return false;
    if (!(category == rhs.category))
      return false;
    if (!(contactReports == rhs.contactReports))
      return false;
    if (!(actionType == rhs.actionType))
      return false;
    return true;
  }
  bool operator != (const TalkService_reportContacts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_reportContacts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_reportContacts_pargs {
 public:


  virtual ~TalkService_reportContacts_pargs() throw();
  const int64_t* syncOpRevision;
  const SyncCategory::type* category;
  const std::vector<ContactReport> * contactReports;
  const SyncActionType::type* actionType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_reportContacts_result__isset {
  _TalkService_reportContacts_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_reportContacts_result__isset;

class TalkService_reportContacts_result {
 public:

  TalkService_reportContacts_result(const TalkService_reportContacts_result&);
  TalkService_reportContacts_result& operator=(const TalkService_reportContacts_result&);
  TalkService_reportContacts_result() {
  }

  virtual ~TalkService_reportContacts_result() throw();
  std::vector<ContactReportResult>  success;
  TalkException e;

  _TalkService_reportContacts_result__isset __isset;

  void __set_success(const std::vector<ContactReportResult> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_reportContacts_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_reportContacts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_reportContacts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_reportContacts_presult__isset {
  _TalkService_reportContacts_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_reportContacts_presult__isset;

class TalkService_reportContacts_presult {
 public:


  virtual ~TalkService_reportContacts_presult() throw();
  std::vector<ContactReportResult> * success;
  TalkException e;

  _TalkService_reportContacts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_reportGroups_args__isset {
  _TalkService_reportGroups_args__isset() : syncOpRevision(false), groups(false) {}
  bool syncOpRevision :1;
  bool groups :1;
} _TalkService_reportGroups_args__isset;

class TalkService_reportGroups_args {
 public:

  TalkService_reportGroups_args(const TalkService_reportGroups_args&);
  TalkService_reportGroups_args& operator=(const TalkService_reportGroups_args&);
  TalkService_reportGroups_args() : syncOpRevision(0) {
  }

  virtual ~TalkService_reportGroups_args() throw();
  int64_t syncOpRevision;
  std::vector<Group>  groups;

  _TalkService_reportGroups_args__isset __isset;

  void __set_syncOpRevision(const int64_t val);

  void __set_groups(const std::vector<Group> & val);

  bool operator == (const TalkService_reportGroups_args & rhs) const
  {
    if (!(syncOpRevision == rhs.syncOpRevision))
      return false;
    if (!(groups == rhs.groups))
      return false;
    return true;
  }
  bool operator != (const TalkService_reportGroups_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_reportGroups_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_reportGroups_pargs {
 public:


  virtual ~TalkService_reportGroups_pargs() throw();
  const int64_t* syncOpRevision;
  const std::vector<Group> * groups;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_reportGroups_result__isset {
  _TalkService_reportGroups_result__isset() : e(false) {}
  bool e :1;
} _TalkService_reportGroups_result__isset;

class TalkService_reportGroups_result {
 public:

  TalkService_reportGroups_result(const TalkService_reportGroups_result&);
  TalkService_reportGroups_result& operator=(const TalkService_reportGroups_result&);
  TalkService_reportGroups_result() {
  }

  virtual ~TalkService_reportGroups_result() throw();
  TalkException e;

  _TalkService_reportGroups_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_reportGroups_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_reportGroups_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_reportGroups_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_reportGroups_presult__isset {
  _TalkService_reportGroups_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_reportGroups_presult__isset;

class TalkService_reportGroups_presult {
 public:


  virtual ~TalkService_reportGroups_presult() throw();
  TalkException e;

  _TalkService_reportGroups_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_reportProfile_args__isset {
  _TalkService_reportProfile_args__isset() : syncOpRevision(false), profile(false) {}
  bool syncOpRevision :1;
  bool profile :1;
} _TalkService_reportProfile_args__isset;

class TalkService_reportProfile_args {
 public:

  TalkService_reportProfile_args(const TalkService_reportProfile_args&);
  TalkService_reportProfile_args& operator=(const TalkService_reportProfile_args&);
  TalkService_reportProfile_args() : syncOpRevision(0) {
  }

  virtual ~TalkService_reportProfile_args() throw();
  int64_t syncOpRevision;
  Profile profile;

  _TalkService_reportProfile_args__isset __isset;

  void __set_syncOpRevision(const int64_t val);

  void __set_profile(const Profile& val);

  bool operator == (const TalkService_reportProfile_args & rhs) const
  {
    if (!(syncOpRevision == rhs.syncOpRevision))
      return false;
    if (!(profile == rhs.profile))
      return false;
    return true;
  }
  bool operator != (const TalkService_reportProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_reportProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_reportProfile_pargs {
 public:


  virtual ~TalkService_reportProfile_pargs() throw();
  const int64_t* syncOpRevision;
  const Profile* profile;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_reportProfile_result__isset {
  _TalkService_reportProfile_result__isset() : e(false) {}
  bool e :1;
} _TalkService_reportProfile_result__isset;

class TalkService_reportProfile_result {
 public:

  TalkService_reportProfile_result(const TalkService_reportProfile_result&);
  TalkService_reportProfile_result& operator=(const TalkService_reportProfile_result&);
  TalkService_reportProfile_result() {
  }

  virtual ~TalkService_reportProfile_result() throw();
  TalkException e;

  _TalkService_reportProfile_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_reportProfile_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_reportProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_reportProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_reportProfile_presult__isset {
  _TalkService_reportProfile_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_reportProfile_presult__isset;

class TalkService_reportProfile_presult {
 public:


  virtual ~TalkService_reportProfile_presult() throw();
  TalkException e;

  _TalkService_reportProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_reportRooms_args__isset {
  _TalkService_reportRooms_args__isset() : syncOpRevision(false), rooms(false) {}
  bool syncOpRevision :1;
  bool rooms :1;
} _TalkService_reportRooms_args__isset;

class TalkService_reportRooms_args {
 public:

  TalkService_reportRooms_args(const TalkService_reportRooms_args&);
  TalkService_reportRooms_args& operator=(const TalkService_reportRooms_args&);
  TalkService_reportRooms_args() : syncOpRevision(0) {
  }

  virtual ~TalkService_reportRooms_args() throw();
  int64_t syncOpRevision;
  std::vector<Room>  rooms;

  _TalkService_reportRooms_args__isset __isset;

  void __set_syncOpRevision(const int64_t val);

  void __set_rooms(const std::vector<Room> & val);

  bool operator == (const TalkService_reportRooms_args & rhs) const
  {
    if (!(syncOpRevision == rhs.syncOpRevision))
      return false;
    if (!(rooms == rhs.rooms))
      return false;
    return true;
  }
  bool operator != (const TalkService_reportRooms_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_reportRooms_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_reportRooms_pargs {
 public:


  virtual ~TalkService_reportRooms_pargs() throw();
  const int64_t* syncOpRevision;
  const std::vector<Room> * rooms;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_reportRooms_result__isset {
  _TalkService_reportRooms_result__isset() : e(false) {}
  bool e :1;
} _TalkService_reportRooms_result__isset;

class TalkService_reportRooms_result {
 public:

  TalkService_reportRooms_result(const TalkService_reportRooms_result&);
  TalkService_reportRooms_result& operator=(const TalkService_reportRooms_result&);
  TalkService_reportRooms_result() {
  }

  virtual ~TalkService_reportRooms_result() throw();
  TalkException e;

  _TalkService_reportRooms_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_reportRooms_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_reportRooms_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_reportRooms_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_reportRooms_presult__isset {
  _TalkService_reportRooms_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_reportRooms_presult__isset;

class TalkService_reportRooms_presult {
 public:


  virtual ~TalkService_reportRooms_presult() throw();
  TalkException e;

  _TalkService_reportRooms_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_findAndAddContactByMetaTag_args__isset {
  _TalkService_findAndAddContactByMetaTag_args__isset() : reqSeq(false), userid(false), reference(false) {}
  bool reqSeq :1;
  bool userid :1;
  bool reference :1;
} _TalkService_findAndAddContactByMetaTag_args__isset;

class TalkService_findAndAddContactByMetaTag_args {
 public:

  TalkService_findAndAddContactByMetaTag_args(const TalkService_findAndAddContactByMetaTag_args&);
  TalkService_findAndAddContactByMetaTag_args& operator=(const TalkService_findAndAddContactByMetaTag_args&);
  TalkService_findAndAddContactByMetaTag_args() : reqSeq(0), userid(), reference() {
  }

  virtual ~TalkService_findAndAddContactByMetaTag_args() throw();
  int32_t reqSeq;
  std::string userid;
  std::string reference;

  _TalkService_findAndAddContactByMetaTag_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_userid(const std::string& val);

  void __set_reference(const std::string& val);

  bool operator == (const TalkService_findAndAddContactByMetaTag_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(userid == rhs.userid))
      return false;
    if (!(reference == rhs.reference))
      return false;
    return true;
  }
  bool operator != (const TalkService_findAndAddContactByMetaTag_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_findAndAddContactByMetaTag_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_findAndAddContactByMetaTag_pargs {
 public:


  virtual ~TalkService_findAndAddContactByMetaTag_pargs() throw();
  const int32_t* reqSeq;
  const std::string* userid;
  const std::string* reference;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_findAndAddContactByMetaTag_result__isset {
  _TalkService_findAndAddContactByMetaTag_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_findAndAddContactByMetaTag_result__isset;

class TalkService_findAndAddContactByMetaTag_result {
 public:

  TalkService_findAndAddContactByMetaTag_result(const TalkService_findAndAddContactByMetaTag_result&);
  TalkService_findAndAddContactByMetaTag_result& operator=(const TalkService_findAndAddContactByMetaTag_result&);
  TalkService_findAndAddContactByMetaTag_result() {
  }

  virtual ~TalkService_findAndAddContactByMetaTag_result() throw();
  Contact success;
  TalkException e;

  _TalkService_findAndAddContactByMetaTag_result__isset __isset;

  void __set_success(const Contact& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_findAndAddContactByMetaTag_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_findAndAddContactByMetaTag_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_findAndAddContactByMetaTag_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_findAndAddContactByMetaTag_presult__isset {
  _TalkService_findAndAddContactByMetaTag_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_findAndAddContactByMetaTag_presult__isset;

class TalkService_findAndAddContactByMetaTag_presult {
 public:


  virtual ~TalkService_findAndAddContactByMetaTag_presult() throw();
  Contact* success;
  TalkException e;

  _TalkService_findAndAddContactByMetaTag_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_reportSettings_args__isset {
  _TalkService_reportSettings_args__isset() : syncOpRevision(false), settings(false) {}
  bool syncOpRevision :1;
  bool settings :1;
} _TalkService_reportSettings_args__isset;

class TalkService_reportSettings_args {
 public:

  TalkService_reportSettings_args(const TalkService_reportSettings_args&);
  TalkService_reportSettings_args& operator=(const TalkService_reportSettings_args&);
  TalkService_reportSettings_args() : syncOpRevision(0) {
  }

  virtual ~TalkService_reportSettings_args() throw();
  int64_t syncOpRevision;
  Settings settings;

  _TalkService_reportSettings_args__isset __isset;

  void __set_syncOpRevision(const int64_t val);

  void __set_settings(const Settings& val);

  bool operator == (const TalkService_reportSettings_args & rhs) const
  {
    if (!(syncOpRevision == rhs.syncOpRevision))
      return false;
    if (!(settings == rhs.settings))
      return false;
    return true;
  }
  bool operator != (const TalkService_reportSettings_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_reportSettings_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_reportSettings_pargs {
 public:


  virtual ~TalkService_reportSettings_pargs() throw();
  const int64_t* syncOpRevision;
  const Settings* settings;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_reportSettings_result__isset {
  _TalkService_reportSettings_result__isset() : e(false) {}
  bool e :1;
} _TalkService_reportSettings_result__isset;

class TalkService_reportSettings_result {
 public:

  TalkService_reportSettings_result(const TalkService_reportSettings_result&);
  TalkService_reportSettings_result& operator=(const TalkService_reportSettings_result&);
  TalkService_reportSettings_result() {
  }

  virtual ~TalkService_reportSettings_result() throw();
  TalkException e;

  _TalkService_reportSettings_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_reportSettings_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_reportSettings_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_reportSettings_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_reportSettings_presult__isset {
  _TalkService_reportSettings_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_reportSettings_presult__isset;

class TalkService_reportSettings_presult {
 public:


  virtual ~TalkService_reportSettings_presult() throw();
  TalkException e;

  _TalkService_reportSettings_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_reportSpam_args__isset {
  _TalkService_reportSpam_args__isset() : chatMid(false), memberMids(false), spammerReasons(false), senderMids(false), spamMessageIds(false), spamMessages(false) {}
  bool chatMid :1;
  bool memberMids :1;
  bool spammerReasons :1;
  bool senderMids :1;
  bool spamMessageIds :1;
  bool spamMessages :1;
} _TalkService_reportSpam_args__isset;

class TalkService_reportSpam_args {
 public:

  TalkService_reportSpam_args(const TalkService_reportSpam_args&);
  TalkService_reportSpam_args& operator=(const TalkService_reportSpam_args&);
  TalkService_reportSpam_args() : chatMid() {
  }

  virtual ~TalkService_reportSpam_args() throw();
  std::string chatMid;
  std::vector<std::string>  memberMids;
  std::vector<SpammerReason::type>  spammerReasons;
  std::vector<std::string>  senderMids;
  std::vector<std::string>  spamMessageIds;
  std::vector<std::string>  spamMessages;

  _TalkService_reportSpam_args__isset __isset;

  void __set_chatMid(const std::string& val);

  void __set_memberMids(const std::vector<std::string> & val);

  void __set_spammerReasons(const std::vector<SpammerReason::type> & val);

  void __set_senderMids(const std::vector<std::string> & val);

  void __set_spamMessageIds(const std::vector<std::string> & val);

  void __set_spamMessages(const std::vector<std::string> & val);

  bool operator == (const TalkService_reportSpam_args & rhs) const
  {
    if (!(chatMid == rhs.chatMid))
      return false;
    if (!(memberMids == rhs.memberMids))
      return false;
    if (!(spammerReasons == rhs.spammerReasons))
      return false;
    if (!(senderMids == rhs.senderMids))
      return false;
    if (!(spamMessageIds == rhs.spamMessageIds))
      return false;
    if (!(spamMessages == rhs.spamMessages))
      return false;
    return true;
  }
  bool operator != (const TalkService_reportSpam_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_reportSpam_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_reportSpam_pargs {
 public:


  virtual ~TalkService_reportSpam_pargs() throw();
  const std::string* chatMid;
  const std::vector<std::string> * memberMids;
  const std::vector<SpammerReason::type> * spammerReasons;
  const std::vector<std::string> * senderMids;
  const std::vector<std::string> * spamMessageIds;
  const std::vector<std::string> * spamMessages;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_reportSpam_result__isset {
  _TalkService_reportSpam_result__isset() : e(false) {}
  bool e :1;
} _TalkService_reportSpam_result__isset;

class TalkService_reportSpam_result {
 public:

  TalkService_reportSpam_result(const TalkService_reportSpam_result&);
  TalkService_reportSpam_result& operator=(const TalkService_reportSpam_result&);
  TalkService_reportSpam_result() {
  }

  virtual ~TalkService_reportSpam_result() throw();
  TalkException e;

  _TalkService_reportSpam_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_reportSpam_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_reportSpam_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_reportSpam_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_reportSpam_presult__isset {
  _TalkService_reportSpam_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_reportSpam_presult__isset;

class TalkService_reportSpam_presult {
 public:


  virtual ~TalkService_reportSpam_presult() throw();
  TalkException e;

  _TalkService_reportSpam_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_reportSpammer_args__isset {
  _TalkService_reportSpammer_args__isset() : spammerMid(false), spammerReasons(false), spamMessageIds(false) {}
  bool spammerMid :1;
  bool spammerReasons :1;
  bool spamMessageIds :1;
} _TalkService_reportSpammer_args__isset;

class TalkService_reportSpammer_args {
 public:

  TalkService_reportSpammer_args(const TalkService_reportSpammer_args&);
  TalkService_reportSpammer_args& operator=(const TalkService_reportSpammer_args&);
  TalkService_reportSpammer_args() : spammerMid() {
  }

  virtual ~TalkService_reportSpammer_args() throw();
  std::string spammerMid;
  std::vector<SpammerReason::type>  spammerReasons;
  std::vector<std::string>  spamMessageIds;

  _TalkService_reportSpammer_args__isset __isset;

  void __set_spammerMid(const std::string& val);

  void __set_spammerReasons(const std::vector<SpammerReason::type> & val);

  void __set_spamMessageIds(const std::vector<std::string> & val);

  bool operator == (const TalkService_reportSpammer_args & rhs) const
  {
    if (!(spammerMid == rhs.spammerMid))
      return false;
    if (!(spammerReasons == rhs.spammerReasons))
      return false;
    if (!(spamMessageIds == rhs.spamMessageIds))
      return false;
    return true;
  }
  bool operator != (const TalkService_reportSpammer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_reportSpammer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_reportSpammer_pargs {
 public:


  virtual ~TalkService_reportSpammer_pargs() throw();
  const std::string* spammerMid;
  const std::vector<SpammerReason::type> * spammerReasons;
  const std::vector<std::string> * spamMessageIds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_reportSpammer_result__isset {
  _TalkService_reportSpammer_result__isset() : e(false) {}
  bool e :1;
} _TalkService_reportSpammer_result__isset;

class TalkService_reportSpammer_result {
 public:

  TalkService_reportSpammer_result(const TalkService_reportSpammer_result&);
  TalkService_reportSpammer_result& operator=(const TalkService_reportSpammer_result&);
  TalkService_reportSpammer_result() {
  }

  virtual ~TalkService_reportSpammer_result() throw();
  TalkException e;

  _TalkService_reportSpammer_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_reportSpammer_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_reportSpammer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_reportSpammer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_reportSpammer_presult__isset {
  _TalkService_reportSpammer_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_reportSpammer_presult__isset;

class TalkService_reportSpammer_presult {
 public:


  virtual ~TalkService_reportSpammer_presult() throw();
  TalkException e;

  _TalkService_reportSpammer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_requestAccountPasswordReset_args__isset {
  _TalkService_requestAccountPasswordReset_args__isset() : provider(false), identifier(false), locale(false) {}
  bool provider :1;
  bool identifier :1;
  bool locale :1;
} _TalkService_requestAccountPasswordReset_args__isset;

class TalkService_requestAccountPasswordReset_args {
 public:

  TalkService_requestAccountPasswordReset_args(const TalkService_requestAccountPasswordReset_args&);
  TalkService_requestAccountPasswordReset_args& operator=(const TalkService_requestAccountPasswordReset_args&);
  TalkService_requestAccountPasswordReset_args() : provider((IdentityProvider::type)0), identifier(), locale() {
  }

  virtual ~TalkService_requestAccountPasswordReset_args() throw();
  IdentityProvider::type provider;
  std::string identifier;
  std::string locale;

  _TalkService_requestAccountPasswordReset_args__isset __isset;

  void __set_provider(const IdentityProvider::type val);

  void __set_identifier(const std::string& val);

  void __set_locale(const std::string& val);

  bool operator == (const TalkService_requestAccountPasswordReset_args & rhs) const
  {
    if (!(provider == rhs.provider))
      return false;
    if (!(identifier == rhs.identifier))
      return false;
    if (!(locale == rhs.locale))
      return false;
    return true;
  }
  bool operator != (const TalkService_requestAccountPasswordReset_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_requestAccountPasswordReset_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_requestAccountPasswordReset_pargs {
 public:


  virtual ~TalkService_requestAccountPasswordReset_pargs() throw();
  const IdentityProvider::type* provider;
  const std::string* identifier;
  const std::string* locale;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_requestAccountPasswordReset_result__isset {
  _TalkService_requestAccountPasswordReset_result__isset() : e(false) {}
  bool e :1;
} _TalkService_requestAccountPasswordReset_result__isset;

class TalkService_requestAccountPasswordReset_result {
 public:

  TalkService_requestAccountPasswordReset_result(const TalkService_requestAccountPasswordReset_result&);
  TalkService_requestAccountPasswordReset_result& operator=(const TalkService_requestAccountPasswordReset_result&);
  TalkService_requestAccountPasswordReset_result() {
  }

  virtual ~TalkService_requestAccountPasswordReset_result() throw();
  TalkException e;

  _TalkService_requestAccountPasswordReset_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_requestAccountPasswordReset_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_requestAccountPasswordReset_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_requestAccountPasswordReset_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_requestAccountPasswordReset_presult__isset {
  _TalkService_requestAccountPasswordReset_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_requestAccountPasswordReset_presult__isset;

class TalkService_requestAccountPasswordReset_presult {
 public:


  virtual ~TalkService_requestAccountPasswordReset_presult() throw();
  TalkException e;

  _TalkService_requestAccountPasswordReset_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_requestEmailConfirmation_args__isset {
  _TalkService_requestEmailConfirmation_args__isset() : emailConfirmation(false) {}
  bool emailConfirmation :1;
} _TalkService_requestEmailConfirmation_args__isset;

class TalkService_requestEmailConfirmation_args {
 public:

  TalkService_requestEmailConfirmation_args(const TalkService_requestEmailConfirmation_args&);
  TalkService_requestEmailConfirmation_args& operator=(const TalkService_requestEmailConfirmation_args&);
  TalkService_requestEmailConfirmation_args() {
  }

  virtual ~TalkService_requestEmailConfirmation_args() throw();
  EmailConfirmation emailConfirmation;

  _TalkService_requestEmailConfirmation_args__isset __isset;

  void __set_emailConfirmation(const EmailConfirmation& val);

  bool operator == (const TalkService_requestEmailConfirmation_args & rhs) const
  {
    if (!(emailConfirmation == rhs.emailConfirmation))
      return false;
    return true;
  }
  bool operator != (const TalkService_requestEmailConfirmation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_requestEmailConfirmation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_requestEmailConfirmation_pargs {
 public:


  virtual ~TalkService_requestEmailConfirmation_pargs() throw();
  const EmailConfirmation* emailConfirmation;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_requestEmailConfirmation_result__isset {
  _TalkService_requestEmailConfirmation_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_requestEmailConfirmation_result__isset;

class TalkService_requestEmailConfirmation_result {
 public:

  TalkService_requestEmailConfirmation_result(const TalkService_requestEmailConfirmation_result&);
  TalkService_requestEmailConfirmation_result& operator=(const TalkService_requestEmailConfirmation_result&);
  TalkService_requestEmailConfirmation_result() {
  }

  virtual ~TalkService_requestEmailConfirmation_result() throw();
  EmailConfirmationSession success;
  TalkException e;

  _TalkService_requestEmailConfirmation_result__isset __isset;

  void __set_success(const EmailConfirmationSession& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_requestEmailConfirmation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_requestEmailConfirmation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_requestEmailConfirmation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_requestEmailConfirmation_presult__isset {
  _TalkService_requestEmailConfirmation_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_requestEmailConfirmation_presult__isset;

class TalkService_requestEmailConfirmation_presult {
 public:


  virtual ~TalkService_requestEmailConfirmation_presult() throw();
  EmailConfirmationSession* success;
  TalkException e;

  _TalkService_requestEmailConfirmation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_requestIdentityUnbind_args__isset {
  _TalkService_requestIdentityUnbind_args__isset() : provider(false), identifier(false) {}
  bool provider :1;
  bool identifier :1;
} _TalkService_requestIdentityUnbind_args__isset;

class TalkService_requestIdentityUnbind_args {
 public:

  TalkService_requestIdentityUnbind_args(const TalkService_requestIdentityUnbind_args&);
  TalkService_requestIdentityUnbind_args& operator=(const TalkService_requestIdentityUnbind_args&);
  TalkService_requestIdentityUnbind_args() : provider((IdentityProvider::type)0), identifier() {
  }

  virtual ~TalkService_requestIdentityUnbind_args() throw();
  IdentityProvider::type provider;
  std::string identifier;

  _TalkService_requestIdentityUnbind_args__isset __isset;

  void __set_provider(const IdentityProvider::type val);

  void __set_identifier(const std::string& val);

  bool operator == (const TalkService_requestIdentityUnbind_args & rhs) const
  {
    if (!(provider == rhs.provider))
      return false;
    if (!(identifier == rhs.identifier))
      return false;
    return true;
  }
  bool operator != (const TalkService_requestIdentityUnbind_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_requestIdentityUnbind_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_requestIdentityUnbind_pargs {
 public:


  virtual ~TalkService_requestIdentityUnbind_pargs() throw();
  const IdentityProvider::type* provider;
  const std::string* identifier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_requestIdentityUnbind_result__isset {
  _TalkService_requestIdentityUnbind_result__isset() : e(false) {}
  bool e :1;
} _TalkService_requestIdentityUnbind_result__isset;

class TalkService_requestIdentityUnbind_result {
 public:

  TalkService_requestIdentityUnbind_result(const TalkService_requestIdentityUnbind_result&);
  TalkService_requestIdentityUnbind_result& operator=(const TalkService_requestIdentityUnbind_result&);
  TalkService_requestIdentityUnbind_result() {
  }

  virtual ~TalkService_requestIdentityUnbind_result() throw();
  TalkException e;

  _TalkService_requestIdentityUnbind_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_requestIdentityUnbind_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_requestIdentityUnbind_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_requestIdentityUnbind_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_requestIdentityUnbind_presult__isset {
  _TalkService_requestIdentityUnbind_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_requestIdentityUnbind_presult__isset;

class TalkService_requestIdentityUnbind_presult {
 public:


  virtual ~TalkService_requestIdentityUnbind_presult() throw();
  TalkException e;

  _TalkService_requestIdentityUnbind_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_resendEmailConfirmation_args__isset {
  _TalkService_resendEmailConfirmation_args__isset() : verifier(false) {}
  bool verifier :1;
} _TalkService_resendEmailConfirmation_args__isset;

class TalkService_resendEmailConfirmation_args {
 public:

  TalkService_resendEmailConfirmation_args(const TalkService_resendEmailConfirmation_args&);
  TalkService_resendEmailConfirmation_args& operator=(const TalkService_resendEmailConfirmation_args&);
  TalkService_resendEmailConfirmation_args() : verifier() {
  }

  virtual ~TalkService_resendEmailConfirmation_args() throw();
  std::string verifier;

  _TalkService_resendEmailConfirmation_args__isset __isset;

  void __set_verifier(const std::string& val);

  bool operator == (const TalkService_resendEmailConfirmation_args & rhs) const
  {
    if (!(verifier == rhs.verifier))
      return false;
    return true;
  }
  bool operator != (const TalkService_resendEmailConfirmation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_resendEmailConfirmation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_resendEmailConfirmation_pargs {
 public:


  virtual ~TalkService_resendEmailConfirmation_pargs() throw();
  const std::string* verifier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_resendEmailConfirmation_result__isset {
  _TalkService_resendEmailConfirmation_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_resendEmailConfirmation_result__isset;

class TalkService_resendEmailConfirmation_result {
 public:

  TalkService_resendEmailConfirmation_result(const TalkService_resendEmailConfirmation_result&);
  TalkService_resendEmailConfirmation_result& operator=(const TalkService_resendEmailConfirmation_result&);
  TalkService_resendEmailConfirmation_result() {
  }

  virtual ~TalkService_resendEmailConfirmation_result() throw();
  EmailConfirmationSession success;
  TalkException e;

  _TalkService_resendEmailConfirmation_result__isset __isset;

  void __set_success(const EmailConfirmationSession& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_resendEmailConfirmation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_resendEmailConfirmation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_resendEmailConfirmation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_resendEmailConfirmation_presult__isset {
  _TalkService_resendEmailConfirmation_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_resendEmailConfirmation_presult__isset;

class TalkService_resendEmailConfirmation_presult {
 public:


  virtual ~TalkService_resendEmailConfirmation_presult() throw();
  EmailConfirmationSession* success;
  TalkException e;

  _TalkService_resendEmailConfirmation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_resendPinCode_args__isset {
  _TalkService_resendPinCode_args__isset() : sessionId(false) {}
  bool sessionId :1;
} _TalkService_resendPinCode_args__isset;

class TalkService_resendPinCode_args {
 public:

  TalkService_resendPinCode_args(const TalkService_resendPinCode_args&);
  TalkService_resendPinCode_args& operator=(const TalkService_resendPinCode_args&);
  TalkService_resendPinCode_args() : sessionId() {
  }

  virtual ~TalkService_resendPinCode_args() throw();
  std::string sessionId;

  _TalkService_resendPinCode_args__isset __isset;

  void __set_sessionId(const std::string& val);

  bool operator == (const TalkService_resendPinCode_args & rhs) const
  {
    if (!(sessionId == rhs.sessionId))
      return false;
    return true;
  }
  bool operator != (const TalkService_resendPinCode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_resendPinCode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_resendPinCode_pargs {
 public:


  virtual ~TalkService_resendPinCode_pargs() throw();
  const std::string* sessionId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_resendPinCode_result__isset {
  _TalkService_resendPinCode_result__isset() : e(false) {}
  bool e :1;
} _TalkService_resendPinCode_result__isset;

class TalkService_resendPinCode_result {
 public:

  TalkService_resendPinCode_result(const TalkService_resendPinCode_result&);
  TalkService_resendPinCode_result& operator=(const TalkService_resendPinCode_result&);
  TalkService_resendPinCode_result() {
  }

  virtual ~TalkService_resendPinCode_result() throw();
  TalkException e;

  _TalkService_resendPinCode_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_resendPinCode_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_resendPinCode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_resendPinCode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_resendPinCode_presult__isset {
  _TalkService_resendPinCode_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_resendPinCode_presult__isset;

class TalkService_resendPinCode_presult {
 public:


  virtual ~TalkService_resendPinCode_presult() throw();
  TalkException e;

  _TalkService_resendPinCode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_resendPinCodeBySMS_args__isset {
  _TalkService_resendPinCodeBySMS_args__isset() : sessionId(false) {}
  bool sessionId :1;
} _TalkService_resendPinCodeBySMS_args__isset;

class TalkService_resendPinCodeBySMS_args {
 public:

  TalkService_resendPinCodeBySMS_args(const TalkService_resendPinCodeBySMS_args&);
  TalkService_resendPinCodeBySMS_args& operator=(const TalkService_resendPinCodeBySMS_args&);
  TalkService_resendPinCodeBySMS_args() : sessionId() {
  }

  virtual ~TalkService_resendPinCodeBySMS_args() throw();
  std::string sessionId;

  _TalkService_resendPinCodeBySMS_args__isset __isset;

  void __set_sessionId(const std::string& val);

  bool operator == (const TalkService_resendPinCodeBySMS_args & rhs) const
  {
    if (!(sessionId == rhs.sessionId))
      return false;
    return true;
  }
  bool operator != (const TalkService_resendPinCodeBySMS_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_resendPinCodeBySMS_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_resendPinCodeBySMS_pargs {
 public:


  virtual ~TalkService_resendPinCodeBySMS_pargs() throw();
  const std::string* sessionId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_resendPinCodeBySMS_result__isset {
  _TalkService_resendPinCodeBySMS_result__isset() : e(false) {}
  bool e :1;
} _TalkService_resendPinCodeBySMS_result__isset;

class TalkService_resendPinCodeBySMS_result {
 public:

  TalkService_resendPinCodeBySMS_result(const TalkService_resendPinCodeBySMS_result&);
  TalkService_resendPinCodeBySMS_result& operator=(const TalkService_resendPinCodeBySMS_result&);
  TalkService_resendPinCodeBySMS_result() {
  }

  virtual ~TalkService_resendPinCodeBySMS_result() throw();
  TalkException e;

  _TalkService_resendPinCodeBySMS_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_resendPinCodeBySMS_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_resendPinCodeBySMS_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_resendPinCodeBySMS_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_resendPinCodeBySMS_presult__isset {
  _TalkService_resendPinCodeBySMS_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_resendPinCodeBySMS_presult__isset;

class TalkService_resendPinCodeBySMS_presult {
 public:


  virtual ~TalkService_resendPinCodeBySMS_presult() throw();
  TalkException e;

  _TalkService_resendPinCodeBySMS_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_sendChatChecked_args__isset {
  _TalkService_sendChatChecked_args__isset() : seq(false), consumer(false), lastMessageId(false) {}
  bool seq :1;
  bool consumer :1;
  bool lastMessageId :1;
} _TalkService_sendChatChecked_args__isset;

class TalkService_sendChatChecked_args {
 public:

  TalkService_sendChatChecked_args(const TalkService_sendChatChecked_args&);
  TalkService_sendChatChecked_args& operator=(const TalkService_sendChatChecked_args&);
  TalkService_sendChatChecked_args() : seq(0), consumer(), lastMessageId() {
  }

  virtual ~TalkService_sendChatChecked_args() throw();
  int32_t seq;
  std::string consumer;
  std::string lastMessageId;

  _TalkService_sendChatChecked_args__isset __isset;

  void __set_seq(const int32_t val);

  void __set_consumer(const std::string& val);

  void __set_lastMessageId(const std::string& val);

  bool operator == (const TalkService_sendChatChecked_args & rhs) const
  {
    if (!(seq == rhs.seq))
      return false;
    if (!(consumer == rhs.consumer))
      return false;
    if (!(lastMessageId == rhs.lastMessageId))
      return false;
    return true;
  }
  bool operator != (const TalkService_sendChatChecked_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_sendChatChecked_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_sendChatChecked_pargs {
 public:


  virtual ~TalkService_sendChatChecked_pargs() throw();
  const int32_t* seq;
  const std::string* consumer;
  const std::string* lastMessageId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_sendChatChecked_result__isset {
  _TalkService_sendChatChecked_result__isset() : e(false) {}
  bool e :1;
} _TalkService_sendChatChecked_result__isset;

class TalkService_sendChatChecked_result {
 public:

  TalkService_sendChatChecked_result(const TalkService_sendChatChecked_result&);
  TalkService_sendChatChecked_result& operator=(const TalkService_sendChatChecked_result&);
  TalkService_sendChatChecked_result() {
  }

  virtual ~TalkService_sendChatChecked_result() throw();
  TalkException e;

  _TalkService_sendChatChecked_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_sendChatChecked_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_sendChatChecked_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_sendChatChecked_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_sendChatChecked_presult__isset {
  _TalkService_sendChatChecked_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_sendChatChecked_presult__isset;

class TalkService_sendChatChecked_presult {
 public:


  virtual ~TalkService_sendChatChecked_presult() throw();
  TalkException e;

  _TalkService_sendChatChecked_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_sendMessageAwaitCommit_args__isset {
  _TalkService_sendMessageAwaitCommit_args__isset() : seq(false), message(false) {}
  bool seq :1;
  bool message :1;
} _TalkService_sendMessageAwaitCommit_args__isset;

class TalkService_sendMessageAwaitCommit_args {
 public:

  TalkService_sendMessageAwaitCommit_args(const TalkService_sendMessageAwaitCommit_args&);
  TalkService_sendMessageAwaitCommit_args& operator=(const TalkService_sendMessageAwaitCommit_args&);
  TalkService_sendMessageAwaitCommit_args() : seq(0) {
  }

  virtual ~TalkService_sendMessageAwaitCommit_args() throw();
  int32_t seq;
  Message message;

  _TalkService_sendMessageAwaitCommit_args__isset __isset;

  void __set_seq(const int32_t val);

  void __set_message(const Message& val);

  bool operator == (const TalkService_sendMessageAwaitCommit_args & rhs) const
  {
    if (!(seq == rhs.seq))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const TalkService_sendMessageAwaitCommit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_sendMessageAwaitCommit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_sendMessageAwaitCommit_pargs {
 public:


  virtual ~TalkService_sendMessageAwaitCommit_pargs() throw();
  const int32_t* seq;
  const Message* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_sendMessageAwaitCommit_result__isset {
  _TalkService_sendMessageAwaitCommit_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_sendMessageAwaitCommit_result__isset;

class TalkService_sendMessageAwaitCommit_result {
 public:

  TalkService_sendMessageAwaitCommit_result(const TalkService_sendMessageAwaitCommit_result&);
  TalkService_sendMessageAwaitCommit_result& operator=(const TalkService_sendMessageAwaitCommit_result&);
  TalkService_sendMessageAwaitCommit_result() {
  }

  virtual ~TalkService_sendMessageAwaitCommit_result() throw();
  CommitMessageResult success;
  TalkException e;

  _TalkService_sendMessageAwaitCommit_result__isset __isset;

  void __set_success(const CommitMessageResult& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_sendMessageAwaitCommit_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_sendMessageAwaitCommit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_sendMessageAwaitCommit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_sendMessageAwaitCommit_presult__isset {
  _TalkService_sendMessageAwaitCommit_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_sendMessageAwaitCommit_presult__isset;

class TalkService_sendMessageAwaitCommit_presult {
 public:


  virtual ~TalkService_sendMessageAwaitCommit_presult() throw();
  CommitMessageResult* success;
  TalkException e;

  _TalkService_sendMessageAwaitCommit_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_sendChatRemoved_args__isset {
  _TalkService_sendChatRemoved_args__isset() : seq(false), consumer(false), lastMessageId(false) {}
  bool seq :1;
  bool consumer :1;
  bool lastMessageId :1;
} _TalkService_sendChatRemoved_args__isset;

class TalkService_sendChatRemoved_args {
 public:

  TalkService_sendChatRemoved_args(const TalkService_sendChatRemoved_args&);
  TalkService_sendChatRemoved_args& operator=(const TalkService_sendChatRemoved_args&);
  TalkService_sendChatRemoved_args() : seq(0), consumer(), lastMessageId() {
  }

  virtual ~TalkService_sendChatRemoved_args() throw();
  int32_t seq;
  std::string consumer;
  std::string lastMessageId;

  _TalkService_sendChatRemoved_args__isset __isset;

  void __set_seq(const int32_t val);

  void __set_consumer(const std::string& val);

  void __set_lastMessageId(const std::string& val);

  bool operator == (const TalkService_sendChatRemoved_args & rhs) const
  {
    if (!(seq == rhs.seq))
      return false;
    if (!(consumer == rhs.consumer))
      return false;
    if (!(lastMessageId == rhs.lastMessageId))
      return false;
    return true;
  }
  bool operator != (const TalkService_sendChatRemoved_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_sendChatRemoved_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_sendChatRemoved_pargs {
 public:


  virtual ~TalkService_sendChatRemoved_pargs() throw();
  const int32_t* seq;
  const std::string* consumer;
  const std::string* lastMessageId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_sendChatRemoved_result__isset {
  _TalkService_sendChatRemoved_result__isset() : e(false) {}
  bool e :1;
} _TalkService_sendChatRemoved_result__isset;

class TalkService_sendChatRemoved_result {
 public:

  TalkService_sendChatRemoved_result(const TalkService_sendChatRemoved_result&);
  TalkService_sendChatRemoved_result& operator=(const TalkService_sendChatRemoved_result&);
  TalkService_sendChatRemoved_result() {
  }

  virtual ~TalkService_sendChatRemoved_result() throw();
  TalkException e;

  _TalkService_sendChatRemoved_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_sendChatRemoved_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_sendChatRemoved_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_sendChatRemoved_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_sendChatRemoved_presult__isset {
  _TalkService_sendChatRemoved_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_sendChatRemoved_presult__isset;

class TalkService_sendChatRemoved_presult {
 public:


  virtual ~TalkService_sendChatRemoved_presult() throw();
  TalkException e;

  _TalkService_sendChatRemoved_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_sendContentPreviewUpdated_args__isset {
  _TalkService_sendContentPreviewUpdated_args__isset() : esq(false), messageId(false), receiverMids(false) {}
  bool esq :1;
  bool messageId :1;
  bool receiverMids :1;
} _TalkService_sendContentPreviewUpdated_args__isset;

class TalkService_sendContentPreviewUpdated_args {
 public:

  TalkService_sendContentPreviewUpdated_args(const TalkService_sendContentPreviewUpdated_args&);
  TalkService_sendContentPreviewUpdated_args& operator=(const TalkService_sendContentPreviewUpdated_args&);
  TalkService_sendContentPreviewUpdated_args() : esq(0), messageId() {
  }

  virtual ~TalkService_sendContentPreviewUpdated_args() throw();
  int32_t esq;
  std::string messageId;
  std::vector<std::string>  receiverMids;

  _TalkService_sendContentPreviewUpdated_args__isset __isset;

  void __set_esq(const int32_t val);

  void __set_messageId(const std::string& val);

  void __set_receiverMids(const std::vector<std::string> & val);

  bool operator == (const TalkService_sendContentPreviewUpdated_args & rhs) const
  {
    if (!(esq == rhs.esq))
      return false;
    if (!(messageId == rhs.messageId))
      return false;
    if (!(receiverMids == rhs.receiverMids))
      return false;
    return true;
  }
  bool operator != (const TalkService_sendContentPreviewUpdated_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_sendContentPreviewUpdated_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_sendContentPreviewUpdated_pargs {
 public:


  virtual ~TalkService_sendContentPreviewUpdated_pargs() throw();
  const int32_t* esq;
  const std::string* messageId;
  const std::vector<std::string> * receiverMids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_sendContentPreviewUpdated_result__isset {
  _TalkService_sendContentPreviewUpdated_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_sendContentPreviewUpdated_result__isset;

class TalkService_sendContentPreviewUpdated_result {
 public:

  TalkService_sendContentPreviewUpdated_result(const TalkService_sendContentPreviewUpdated_result&);
  TalkService_sendContentPreviewUpdated_result& operator=(const TalkService_sendContentPreviewUpdated_result&);
  TalkService_sendContentPreviewUpdated_result() {
  }

  virtual ~TalkService_sendContentPreviewUpdated_result() throw();
  std::map<std::string, std::string>  success;
  TalkException e;

  _TalkService_sendContentPreviewUpdated_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_sendContentPreviewUpdated_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_sendContentPreviewUpdated_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_sendContentPreviewUpdated_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_sendContentPreviewUpdated_presult__isset {
  _TalkService_sendContentPreviewUpdated_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_sendContentPreviewUpdated_presult__isset;

class TalkService_sendContentPreviewUpdated_presult {
 public:


  virtual ~TalkService_sendContentPreviewUpdated_presult() throw();
  std::map<std::string, std::string> * success;
  TalkException e;

  _TalkService_sendContentPreviewUpdated_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_sendContentReceipt_args__isset {
  _TalkService_sendContentReceipt_args__isset() : seq(false), consumer(false), messageId(false) {}
  bool seq :1;
  bool consumer :1;
  bool messageId :1;
} _TalkService_sendContentReceipt_args__isset;

class TalkService_sendContentReceipt_args {
 public:

  TalkService_sendContentReceipt_args(const TalkService_sendContentReceipt_args&);
  TalkService_sendContentReceipt_args& operator=(const TalkService_sendContentReceipt_args&);
  TalkService_sendContentReceipt_args() : seq(0), consumer(), messageId() {
  }

  virtual ~TalkService_sendContentReceipt_args() throw();
  int32_t seq;
  std::string consumer;
  std::string messageId;

  _TalkService_sendContentReceipt_args__isset __isset;

  void __set_seq(const int32_t val);

  void __set_consumer(const std::string& val);

  void __set_messageId(const std::string& val);

  bool operator == (const TalkService_sendContentReceipt_args & rhs) const
  {
    if (!(seq == rhs.seq))
      return false;
    if (!(consumer == rhs.consumer))
      return false;
    if (!(messageId == rhs.messageId))
      return false;
    return true;
  }
  bool operator != (const TalkService_sendContentReceipt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_sendContentReceipt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_sendContentReceipt_pargs {
 public:


  virtual ~TalkService_sendContentReceipt_pargs() throw();
  const int32_t* seq;
  const std::string* consumer;
  const std::string* messageId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_sendContentReceipt_result__isset {
  _TalkService_sendContentReceipt_result__isset() : e(false) {}
  bool e :1;
} _TalkService_sendContentReceipt_result__isset;

class TalkService_sendContentReceipt_result {
 public:

  TalkService_sendContentReceipt_result(const TalkService_sendContentReceipt_result&);
  TalkService_sendContentReceipt_result& operator=(const TalkService_sendContentReceipt_result&);
  TalkService_sendContentReceipt_result() {
  }

  virtual ~TalkService_sendContentReceipt_result() throw();
  TalkException e;

  _TalkService_sendContentReceipt_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_sendContentReceipt_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_sendContentReceipt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_sendContentReceipt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_sendContentReceipt_presult__isset {
  _TalkService_sendContentReceipt_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_sendContentReceipt_presult__isset;

class TalkService_sendContentReceipt_presult {
 public:


  virtual ~TalkService_sendContentReceipt_presult() throw();
  TalkException e;

  _TalkService_sendContentReceipt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TalkService_sendDummyPush_args {
 public:

  TalkService_sendDummyPush_args(const TalkService_sendDummyPush_args&);
  TalkService_sendDummyPush_args& operator=(const TalkService_sendDummyPush_args&);
  TalkService_sendDummyPush_args() {
  }

  virtual ~TalkService_sendDummyPush_args() throw();

  bool operator == (const TalkService_sendDummyPush_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TalkService_sendDummyPush_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_sendDummyPush_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_sendDummyPush_pargs {
 public:


  virtual ~TalkService_sendDummyPush_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_sendDummyPush_result__isset {
  _TalkService_sendDummyPush_result__isset() : e(false) {}
  bool e :1;
} _TalkService_sendDummyPush_result__isset;

class TalkService_sendDummyPush_result {
 public:

  TalkService_sendDummyPush_result(const TalkService_sendDummyPush_result&);
  TalkService_sendDummyPush_result& operator=(const TalkService_sendDummyPush_result&);
  TalkService_sendDummyPush_result() {
  }

  virtual ~TalkService_sendDummyPush_result() throw();
  TalkException e;

  _TalkService_sendDummyPush_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_sendDummyPush_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_sendDummyPush_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_sendDummyPush_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_sendDummyPush_presult__isset {
  _TalkService_sendDummyPush_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_sendDummyPush_presult__isset;

class TalkService_sendDummyPush_presult {
 public:


  virtual ~TalkService_sendDummyPush_presult() throw();
  TalkException e;

  _TalkService_sendDummyPush_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_removeE2EEPublicKey_args__isset {
  _TalkService_removeE2EEPublicKey_args__isset() : publicKey(false) {}
  bool publicKey :1;
} _TalkService_removeE2EEPublicKey_args__isset;

class TalkService_removeE2EEPublicKey_args {
 public:

  TalkService_removeE2EEPublicKey_args(const TalkService_removeE2EEPublicKey_args&);
  TalkService_removeE2EEPublicKey_args& operator=(const TalkService_removeE2EEPublicKey_args&);
  TalkService_removeE2EEPublicKey_args() {
  }

  virtual ~TalkService_removeE2EEPublicKey_args() throw();
  E2EEPublicKey publicKey;

  _TalkService_removeE2EEPublicKey_args__isset __isset;

  void __set_publicKey(const E2EEPublicKey& val);

  bool operator == (const TalkService_removeE2EEPublicKey_args & rhs) const
  {
    if (!(publicKey == rhs.publicKey))
      return false;
    return true;
  }
  bool operator != (const TalkService_removeE2EEPublicKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_removeE2EEPublicKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_removeE2EEPublicKey_pargs {
 public:


  virtual ~TalkService_removeE2EEPublicKey_pargs() throw();
  const E2EEPublicKey* publicKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_removeE2EEPublicKey_result__isset {
  _TalkService_removeE2EEPublicKey_result__isset() : e(false) {}
  bool e :1;
} _TalkService_removeE2EEPublicKey_result__isset;

class TalkService_removeE2EEPublicKey_result {
 public:

  TalkService_removeE2EEPublicKey_result(const TalkService_removeE2EEPublicKey_result&);
  TalkService_removeE2EEPublicKey_result& operator=(const TalkService_removeE2EEPublicKey_result&);
  TalkService_removeE2EEPublicKey_result() {
  }

  virtual ~TalkService_removeE2EEPublicKey_result() throw();
  TalkException e;

  _TalkService_removeE2EEPublicKey_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_removeE2EEPublicKey_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_removeE2EEPublicKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_removeE2EEPublicKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_removeE2EEPublicKey_presult__isset {
  _TalkService_removeE2EEPublicKey_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_removeE2EEPublicKey_presult__isset;

class TalkService_removeE2EEPublicKey_presult {
 public:


  virtual ~TalkService_removeE2EEPublicKey_presult() throw();
  TalkException e;

  _TalkService_removeE2EEPublicKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_negotiateE2EEPublicKey_args__isset {
  _TalkService_negotiateE2EEPublicKey_args__isset() : mid(false) {}
  bool mid :1;
} _TalkService_negotiateE2EEPublicKey_args__isset;

class TalkService_negotiateE2EEPublicKey_args {
 public:

  TalkService_negotiateE2EEPublicKey_args(const TalkService_negotiateE2EEPublicKey_args&);
  TalkService_negotiateE2EEPublicKey_args& operator=(const TalkService_negotiateE2EEPublicKey_args&);
  TalkService_negotiateE2EEPublicKey_args() : mid() {
  }

  virtual ~TalkService_negotiateE2EEPublicKey_args() throw();
  std::string mid;

  _TalkService_negotiateE2EEPublicKey_args__isset __isset;

  void __set_mid(const std::string& val);

  bool operator == (const TalkService_negotiateE2EEPublicKey_args & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    return true;
  }
  bool operator != (const TalkService_negotiateE2EEPublicKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_negotiateE2EEPublicKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_negotiateE2EEPublicKey_pargs {
 public:


  virtual ~TalkService_negotiateE2EEPublicKey_pargs() throw();
  const std::string* mid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_negotiateE2EEPublicKey_result__isset {
  _TalkService_negotiateE2EEPublicKey_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_negotiateE2EEPublicKey_result__isset;

class TalkService_negotiateE2EEPublicKey_result {
 public:

  TalkService_negotiateE2EEPublicKey_result(const TalkService_negotiateE2EEPublicKey_result&);
  TalkService_negotiateE2EEPublicKey_result& operator=(const TalkService_negotiateE2EEPublicKey_result&);
  TalkService_negotiateE2EEPublicKey_result() {
  }

  virtual ~TalkService_negotiateE2EEPublicKey_result() throw();
  E2EENegotiationResult success;
  TalkException e;

  _TalkService_negotiateE2EEPublicKey_result__isset __isset;

  void __set_success(const E2EENegotiationResult& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_negotiateE2EEPublicKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_negotiateE2EEPublicKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_negotiateE2EEPublicKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_negotiateE2EEPublicKey_presult__isset {
  _TalkService_negotiateE2EEPublicKey_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_negotiateE2EEPublicKey_presult__isset;

class TalkService_negotiateE2EEPublicKey_presult {
 public:


  virtual ~TalkService_negotiateE2EEPublicKey_presult() throw();
  E2EENegotiationResult* success;
  TalkException e;

  _TalkService_negotiateE2EEPublicKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getE2EEPublicKey_args__isset {
  _TalkService_getE2EEPublicKey_args__isset() : mid(false), version(false), keyId(false) {}
  bool mid :1;
  bool version :1;
  bool keyId :1;
} _TalkService_getE2EEPublicKey_args__isset;

class TalkService_getE2EEPublicKey_args {
 public:

  TalkService_getE2EEPublicKey_args(const TalkService_getE2EEPublicKey_args&);
  TalkService_getE2EEPublicKey_args& operator=(const TalkService_getE2EEPublicKey_args&);
  TalkService_getE2EEPublicKey_args() : mid(), version(0), keyId(0) {
  }

  virtual ~TalkService_getE2EEPublicKey_args() throw();
  std::string mid;
  int32_t version;
  int32_t keyId;

  _TalkService_getE2EEPublicKey_args__isset __isset;

  void __set_mid(const std::string& val);

  void __set_version(const int32_t val);

  void __set_keyId(const int32_t val);

  bool operator == (const TalkService_getE2EEPublicKey_args & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(keyId == rhs.keyId))
      return false;
    return true;
  }
  bool operator != (const TalkService_getE2EEPublicKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getE2EEPublicKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getE2EEPublicKey_pargs {
 public:


  virtual ~TalkService_getE2EEPublicKey_pargs() throw();
  const std::string* mid;
  const int32_t* version;
  const int32_t* keyId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getE2EEPublicKey_result__isset {
  _TalkService_getE2EEPublicKey_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getE2EEPublicKey_result__isset;

class TalkService_getE2EEPublicKey_result {
 public:

  TalkService_getE2EEPublicKey_result(const TalkService_getE2EEPublicKey_result&);
  TalkService_getE2EEPublicKey_result& operator=(const TalkService_getE2EEPublicKey_result&);
  TalkService_getE2EEPublicKey_result() {
  }

  virtual ~TalkService_getE2EEPublicKey_result() throw();
  E2EEPublicKey success;
  TalkException e;

  _TalkService_getE2EEPublicKey_result__isset __isset;

  void __set_success(const E2EEPublicKey& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getE2EEPublicKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getE2EEPublicKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getE2EEPublicKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getE2EEPublicKey_presult__isset {
  _TalkService_getE2EEPublicKey_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getE2EEPublicKey_presult__isset;

class TalkService_getE2EEPublicKey_presult {
 public:


  virtual ~TalkService_getE2EEPublicKey_presult() throw();
  E2EEPublicKey* success;
  TalkException e;

  _TalkService_getE2EEPublicKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_requestE2EEKeyExchange_args__isset {
  _TalkService_requestE2EEKeyExchange_args__isset() : reqSeq(false), temporalPublicKey(false), publicKey(false), verifier(false) {}
  bool reqSeq :1;
  bool temporalPublicKey :1;
  bool publicKey :1;
  bool verifier :1;
} _TalkService_requestE2EEKeyExchange_args__isset;

class TalkService_requestE2EEKeyExchange_args {
 public:

  TalkService_requestE2EEKeyExchange_args(const TalkService_requestE2EEKeyExchange_args&);
  TalkService_requestE2EEKeyExchange_args& operator=(const TalkService_requestE2EEKeyExchange_args&);
  TalkService_requestE2EEKeyExchange_args() : reqSeq(0), temporalPublicKey(), verifier() {
  }

  virtual ~TalkService_requestE2EEKeyExchange_args() throw();
  int32_t reqSeq;
  std::string temporalPublicKey;
  E2EEPublicKey publicKey;
  std::string verifier;

  _TalkService_requestE2EEKeyExchange_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_temporalPublicKey(const std::string& val);

  void __set_publicKey(const E2EEPublicKey& val);

  void __set_verifier(const std::string& val);

  bool operator == (const TalkService_requestE2EEKeyExchange_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(temporalPublicKey == rhs.temporalPublicKey))
      return false;
    if (!(publicKey == rhs.publicKey))
      return false;
    if (!(verifier == rhs.verifier))
      return false;
    return true;
  }
  bool operator != (const TalkService_requestE2EEKeyExchange_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_requestE2EEKeyExchange_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_requestE2EEKeyExchange_pargs {
 public:


  virtual ~TalkService_requestE2EEKeyExchange_pargs() throw();
  const int32_t* reqSeq;
  const std::string* temporalPublicKey;
  const E2EEPublicKey* publicKey;
  const std::string* verifier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_requestE2EEKeyExchange_result__isset {
  _TalkService_requestE2EEKeyExchange_result__isset() : e(false) {}
  bool e :1;
} _TalkService_requestE2EEKeyExchange_result__isset;

class TalkService_requestE2EEKeyExchange_result {
 public:

  TalkService_requestE2EEKeyExchange_result(const TalkService_requestE2EEKeyExchange_result&);
  TalkService_requestE2EEKeyExchange_result& operator=(const TalkService_requestE2EEKeyExchange_result&);
  TalkService_requestE2EEKeyExchange_result() {
  }

  virtual ~TalkService_requestE2EEKeyExchange_result() throw();
  TalkException e;

  _TalkService_requestE2EEKeyExchange_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_requestE2EEKeyExchange_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_requestE2EEKeyExchange_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_requestE2EEKeyExchange_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_requestE2EEKeyExchange_presult__isset {
  _TalkService_requestE2EEKeyExchange_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_requestE2EEKeyExchange_presult__isset;

class TalkService_requestE2EEKeyExchange_presult {
 public:


  virtual ~TalkService_requestE2EEKeyExchange_presult() throw();
  TalkException e;

  _TalkService_requestE2EEKeyExchange_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getLastE2EEPublicKeys_args__isset {
  _TalkService_getLastE2EEPublicKeys_args__isset() : chatMid(false) {}
  bool chatMid :1;
} _TalkService_getLastE2EEPublicKeys_args__isset;

class TalkService_getLastE2EEPublicKeys_args {
 public:

  TalkService_getLastE2EEPublicKeys_args(const TalkService_getLastE2EEPublicKeys_args&);
  TalkService_getLastE2EEPublicKeys_args& operator=(const TalkService_getLastE2EEPublicKeys_args&);
  TalkService_getLastE2EEPublicKeys_args() : chatMid() {
  }

  virtual ~TalkService_getLastE2EEPublicKeys_args() throw();
  std::string chatMid;

  _TalkService_getLastE2EEPublicKeys_args__isset __isset;

  void __set_chatMid(const std::string& val);

  bool operator == (const TalkService_getLastE2EEPublicKeys_args & rhs) const
  {
    if (!(chatMid == rhs.chatMid))
      return false;
    return true;
  }
  bool operator != (const TalkService_getLastE2EEPublicKeys_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getLastE2EEPublicKeys_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getLastE2EEPublicKeys_pargs {
 public:


  virtual ~TalkService_getLastE2EEPublicKeys_pargs() throw();
  const std::string* chatMid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getLastE2EEPublicKeys_result__isset {
  _TalkService_getLastE2EEPublicKeys_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getLastE2EEPublicKeys_result__isset;

class TalkService_getLastE2EEPublicKeys_result {
 public:

  TalkService_getLastE2EEPublicKeys_result(const TalkService_getLastE2EEPublicKeys_result&);
  TalkService_getLastE2EEPublicKeys_result& operator=(const TalkService_getLastE2EEPublicKeys_result&);
  TalkService_getLastE2EEPublicKeys_result() {
  }

  virtual ~TalkService_getLastE2EEPublicKeys_result() throw();
  std::map<std::string, E2EEPublicKey>  success;
  TalkException e;

  _TalkService_getLastE2EEPublicKeys_result__isset __isset;

  void __set_success(const std::map<std::string, E2EEPublicKey> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getLastE2EEPublicKeys_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getLastE2EEPublicKeys_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getLastE2EEPublicKeys_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getLastE2EEPublicKeys_presult__isset {
  _TalkService_getLastE2EEPublicKeys_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getLastE2EEPublicKeys_presult__isset;

class TalkService_getLastE2EEPublicKeys_presult {
 public:


  virtual ~TalkService_getLastE2EEPublicKeys_presult() throw();
  std::map<std::string, E2EEPublicKey> * success;
  TalkException e;

  _TalkService_getLastE2EEPublicKeys_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_registerE2EEPublicKey_args__isset {
  _TalkService_registerE2EEPublicKey_args__isset() : reqSeq(false), publicKey(false) {}
  bool reqSeq :1;
  bool publicKey :1;
} _TalkService_registerE2EEPublicKey_args__isset;

class TalkService_registerE2EEPublicKey_args {
 public:

  TalkService_registerE2EEPublicKey_args(const TalkService_registerE2EEPublicKey_args&);
  TalkService_registerE2EEPublicKey_args& operator=(const TalkService_registerE2EEPublicKey_args&);
  TalkService_registerE2EEPublicKey_args() : reqSeq(0) {
  }

  virtual ~TalkService_registerE2EEPublicKey_args() throw();
  int32_t reqSeq;
  E2EEPublicKey publicKey;

  _TalkService_registerE2EEPublicKey_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_publicKey(const E2EEPublicKey& val);

  bool operator == (const TalkService_registerE2EEPublicKey_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(publicKey == rhs.publicKey))
      return false;
    return true;
  }
  bool operator != (const TalkService_registerE2EEPublicKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_registerE2EEPublicKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_registerE2EEPublicKey_pargs {
 public:


  virtual ~TalkService_registerE2EEPublicKey_pargs() throw();
  const int32_t* reqSeq;
  const E2EEPublicKey* publicKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_registerE2EEPublicKey_result__isset {
  _TalkService_registerE2EEPublicKey_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_registerE2EEPublicKey_result__isset;

class TalkService_registerE2EEPublicKey_result {
 public:

  TalkService_registerE2EEPublicKey_result(const TalkService_registerE2EEPublicKey_result&);
  TalkService_registerE2EEPublicKey_result& operator=(const TalkService_registerE2EEPublicKey_result&);
  TalkService_registerE2EEPublicKey_result() {
  }

  virtual ~TalkService_registerE2EEPublicKey_result() throw();
  E2EEPublicKey success;
  TalkException e;

  _TalkService_registerE2EEPublicKey_result__isset __isset;

  void __set_success(const E2EEPublicKey& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_registerE2EEPublicKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_registerE2EEPublicKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_registerE2EEPublicKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_registerE2EEPublicKey_presult__isset {
  _TalkService_registerE2EEPublicKey_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_registerE2EEPublicKey_presult__isset;

class TalkService_registerE2EEPublicKey_presult {
 public:


  virtual ~TalkService_registerE2EEPublicKey_presult() throw();
  E2EEPublicKey* success;
  TalkException e;

  _TalkService_registerE2EEPublicKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TalkService_getE2EEPublicKeys_args {
 public:

  TalkService_getE2EEPublicKeys_args(const TalkService_getE2EEPublicKeys_args&);
  TalkService_getE2EEPublicKeys_args& operator=(const TalkService_getE2EEPublicKeys_args&);
  TalkService_getE2EEPublicKeys_args() {
  }

  virtual ~TalkService_getE2EEPublicKeys_args() throw();

  bool operator == (const TalkService_getE2EEPublicKeys_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TalkService_getE2EEPublicKeys_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getE2EEPublicKeys_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getE2EEPublicKeys_pargs {
 public:


  virtual ~TalkService_getE2EEPublicKeys_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getE2EEPublicKeys_result__isset {
  _TalkService_getE2EEPublicKeys_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getE2EEPublicKeys_result__isset;

class TalkService_getE2EEPublicKeys_result {
 public:

  TalkService_getE2EEPublicKeys_result(const TalkService_getE2EEPublicKeys_result&);
  TalkService_getE2EEPublicKeys_result& operator=(const TalkService_getE2EEPublicKeys_result&);
  TalkService_getE2EEPublicKeys_result() {
  }

  virtual ~TalkService_getE2EEPublicKeys_result() throw();
  std::vector<E2EEPublicKey>  success;
  TalkException e;

  _TalkService_getE2EEPublicKeys_result__isset __isset;

  void __set_success(const std::vector<E2EEPublicKey> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getE2EEPublicKeys_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getE2EEPublicKeys_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getE2EEPublicKeys_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getE2EEPublicKeys_presult__isset {
  _TalkService_getE2EEPublicKeys_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getE2EEPublicKeys_presult__isset;

class TalkService_getE2EEPublicKeys_presult {
 public:


  virtual ~TalkService_getE2EEPublicKeys_presult() throw();
  std::vector<E2EEPublicKey> * success;
  TalkException e;

  _TalkService_getE2EEPublicKeys_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getE2EEPublicKeysEx_args__isset {
  _TalkService_getE2EEPublicKeysEx_args__isset() : ignoreE2EEStatus(false) {}
  bool ignoreE2EEStatus :1;
} _TalkService_getE2EEPublicKeysEx_args__isset;

class TalkService_getE2EEPublicKeysEx_args {
 public:

  TalkService_getE2EEPublicKeysEx_args(const TalkService_getE2EEPublicKeysEx_args&);
  TalkService_getE2EEPublicKeysEx_args& operator=(const TalkService_getE2EEPublicKeysEx_args&);
  TalkService_getE2EEPublicKeysEx_args() : ignoreE2EEStatus(0) {
  }

  virtual ~TalkService_getE2EEPublicKeysEx_args() throw();
  bool ignoreE2EEStatus;

  _TalkService_getE2EEPublicKeysEx_args__isset __isset;

  void __set_ignoreE2EEStatus(const bool val);

  bool operator == (const TalkService_getE2EEPublicKeysEx_args & rhs) const
  {
    if (!(ignoreE2EEStatus == rhs.ignoreE2EEStatus))
      return false;
    return true;
  }
  bool operator != (const TalkService_getE2EEPublicKeysEx_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getE2EEPublicKeysEx_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getE2EEPublicKeysEx_pargs {
 public:


  virtual ~TalkService_getE2EEPublicKeysEx_pargs() throw();
  const bool* ignoreE2EEStatus;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getE2EEPublicKeysEx_result__isset {
  _TalkService_getE2EEPublicKeysEx_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getE2EEPublicKeysEx_result__isset;

class TalkService_getE2EEPublicKeysEx_result {
 public:

  TalkService_getE2EEPublicKeysEx_result(const TalkService_getE2EEPublicKeysEx_result&);
  TalkService_getE2EEPublicKeysEx_result& operator=(const TalkService_getE2EEPublicKeysEx_result&);
  TalkService_getE2EEPublicKeysEx_result() {
  }

  virtual ~TalkService_getE2EEPublicKeysEx_result() throw();
  std::vector<E2EEPublicKey>  success;
  TalkException e;

  _TalkService_getE2EEPublicKeysEx_result__isset __isset;

  void __set_success(const std::vector<E2EEPublicKey> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getE2EEPublicKeysEx_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getE2EEPublicKeysEx_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getE2EEPublicKeysEx_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getE2EEPublicKeysEx_presult__isset {
  _TalkService_getE2EEPublicKeysEx_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getE2EEPublicKeysEx_presult__isset;

class TalkService_getE2EEPublicKeysEx_presult {
 public:


  virtual ~TalkService_getE2EEPublicKeysEx_presult() throw();
  std::vector<E2EEPublicKey> * success;
  TalkException e;

  _TalkService_getE2EEPublicKeysEx_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getReadMessageOpsInBulk_args__isset {
  _TalkService_getReadMessageOpsInBulk_args__isset() : chatIds(false) {}
  bool chatIds :1;
} _TalkService_getReadMessageOpsInBulk_args__isset;

class TalkService_getReadMessageOpsInBulk_args {
 public:

  TalkService_getReadMessageOpsInBulk_args(const TalkService_getReadMessageOpsInBulk_args&);
  TalkService_getReadMessageOpsInBulk_args& operator=(const TalkService_getReadMessageOpsInBulk_args&);
  TalkService_getReadMessageOpsInBulk_args() {
  }

  virtual ~TalkService_getReadMessageOpsInBulk_args() throw();
  std::vector<std::string>  chatIds;

  _TalkService_getReadMessageOpsInBulk_args__isset __isset;

  void __set_chatIds(const std::vector<std::string> & val);

  bool operator == (const TalkService_getReadMessageOpsInBulk_args & rhs) const
  {
    if (!(chatIds == rhs.chatIds))
      return false;
    return true;
  }
  bool operator != (const TalkService_getReadMessageOpsInBulk_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getReadMessageOpsInBulk_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getReadMessageOpsInBulk_pargs {
 public:


  virtual ~TalkService_getReadMessageOpsInBulk_pargs() throw();
  const std::vector<std::string> * chatIds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getReadMessageOpsInBulk_result__isset {
  _TalkService_getReadMessageOpsInBulk_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getReadMessageOpsInBulk_result__isset;

class TalkService_getReadMessageOpsInBulk_result {
 public:

  TalkService_getReadMessageOpsInBulk_result(const TalkService_getReadMessageOpsInBulk_result&);
  TalkService_getReadMessageOpsInBulk_result& operator=(const TalkService_getReadMessageOpsInBulk_result&);
  TalkService_getReadMessageOpsInBulk_result() {
  }

  virtual ~TalkService_getReadMessageOpsInBulk_result() throw();
  std::vector<Operation>  success;
  TalkException e;

  _TalkService_getReadMessageOpsInBulk_result__isset __isset;

  void __set_success(const std::vector<Operation> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getReadMessageOpsInBulk_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getReadMessageOpsInBulk_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getReadMessageOpsInBulk_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getReadMessageOpsInBulk_presult__isset {
  _TalkService_getReadMessageOpsInBulk_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getReadMessageOpsInBulk_presult__isset;

class TalkService_getReadMessageOpsInBulk_presult {
 public:


  virtual ~TalkService_getReadMessageOpsInBulk_presult() throw();
  std::vector<Operation> * success;
  TalkException e;

  _TalkService_getReadMessageOpsInBulk_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_sendEvent_args__isset {
  _TalkService_sendEvent_args__isset() : seq(false), message(false) {}
  bool seq :1;
  bool message :1;
} _TalkService_sendEvent_args__isset;

class TalkService_sendEvent_args {
 public:

  TalkService_sendEvent_args(const TalkService_sendEvent_args&);
  TalkService_sendEvent_args& operator=(const TalkService_sendEvent_args&);
  TalkService_sendEvent_args() : seq(0) {
  }

  virtual ~TalkService_sendEvent_args() throw();
  int32_t seq;
  Message message;

  _TalkService_sendEvent_args__isset __isset;

  void __set_seq(const int32_t val);

  void __set_message(const Message& val);

  bool operator == (const TalkService_sendEvent_args & rhs) const
  {
    if (!(seq == rhs.seq))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const TalkService_sendEvent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_sendEvent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_sendEvent_pargs {
 public:


  virtual ~TalkService_sendEvent_pargs() throw();
  const int32_t* seq;
  const Message* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_sendEvent_result__isset {
  _TalkService_sendEvent_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_sendEvent_result__isset;

class TalkService_sendEvent_result {
 public:

  TalkService_sendEvent_result(const TalkService_sendEvent_result&);
  TalkService_sendEvent_result& operator=(const TalkService_sendEvent_result&);
  TalkService_sendEvent_result() {
  }

  virtual ~TalkService_sendEvent_result() throw();
  Message success;
  TalkException e;

  _TalkService_sendEvent_result__isset __isset;

  void __set_success(const Message& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_sendEvent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_sendEvent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_sendEvent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_sendEvent_presult__isset {
  _TalkService_sendEvent_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_sendEvent_presult__isset;

class TalkService_sendEvent_presult {
 public:


  virtual ~TalkService_sendEvent_presult() throw();
  Message* success;
  TalkException e;

  _TalkService_sendEvent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_sendMessage_args__isset {
  _TalkService_sendMessage_args__isset() : seq(false), message(false) {}
  bool seq :1;
  bool message :1;
} _TalkService_sendMessage_args__isset;

class TalkService_sendMessage_args {
 public:

  TalkService_sendMessage_args(const TalkService_sendMessage_args&);
  TalkService_sendMessage_args& operator=(const TalkService_sendMessage_args&);
  TalkService_sendMessage_args() : seq(0) {
  }

  virtual ~TalkService_sendMessage_args() throw();
  int32_t seq;
  Message message;

  _TalkService_sendMessage_args__isset __isset;

  void __set_seq(const int32_t val);

  void __set_message(const Message& val);

  bool operator == (const TalkService_sendMessage_args & rhs) const
  {
    if (!(seq == rhs.seq))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const TalkService_sendMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_sendMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_sendMessage_pargs {
 public:


  virtual ~TalkService_sendMessage_pargs() throw();
  const int32_t* seq;
  const Message* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_sendMessage_result__isset {
  _TalkService_sendMessage_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_sendMessage_result__isset;

class TalkService_sendMessage_result {
 public:

  TalkService_sendMessage_result(const TalkService_sendMessage_result&);
  TalkService_sendMessage_result& operator=(const TalkService_sendMessage_result&);
  TalkService_sendMessage_result() {
  }

  virtual ~TalkService_sendMessage_result() throw();
  Message success;
  TalkException e;

  _TalkService_sendMessage_result__isset __isset;

  void __set_success(const Message& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_sendMessage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_sendMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_sendMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_sendMessage_presult__isset {
  _TalkService_sendMessage_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_sendMessage_presult__isset;

class TalkService_sendMessage_presult {
 public:


  virtual ~TalkService_sendMessage_presult() throw();
  Message* success;
  TalkException e;

  _TalkService_sendMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_sendMessageIgnored_args__isset {
  _TalkService_sendMessageIgnored_args__isset() : seq(false), consumer(false), messageIds(false) {}
  bool seq :1;
  bool consumer :1;
  bool messageIds :1;
} _TalkService_sendMessageIgnored_args__isset;

class TalkService_sendMessageIgnored_args {
 public:

  TalkService_sendMessageIgnored_args(const TalkService_sendMessageIgnored_args&);
  TalkService_sendMessageIgnored_args& operator=(const TalkService_sendMessageIgnored_args&);
  TalkService_sendMessageIgnored_args() : seq(0), consumer() {
  }

  virtual ~TalkService_sendMessageIgnored_args() throw();
  int32_t seq;
  std::string consumer;
  std::vector<std::string>  messageIds;

  _TalkService_sendMessageIgnored_args__isset __isset;

  void __set_seq(const int32_t val);

  void __set_consumer(const std::string& val);

  void __set_messageIds(const std::vector<std::string> & val);

  bool operator == (const TalkService_sendMessageIgnored_args & rhs) const
  {
    if (!(seq == rhs.seq))
      return false;
    if (!(consumer == rhs.consumer))
      return false;
    if (!(messageIds == rhs.messageIds))
      return false;
    return true;
  }
  bool operator != (const TalkService_sendMessageIgnored_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_sendMessageIgnored_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_sendMessageIgnored_pargs {
 public:


  virtual ~TalkService_sendMessageIgnored_pargs() throw();
  const int32_t* seq;
  const std::string* consumer;
  const std::vector<std::string> * messageIds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_sendMessageIgnored_result__isset {
  _TalkService_sendMessageIgnored_result__isset() : e(false) {}
  bool e :1;
} _TalkService_sendMessageIgnored_result__isset;

class TalkService_sendMessageIgnored_result {
 public:

  TalkService_sendMessageIgnored_result(const TalkService_sendMessageIgnored_result&);
  TalkService_sendMessageIgnored_result& operator=(const TalkService_sendMessageIgnored_result&);
  TalkService_sendMessageIgnored_result() {
  }

  virtual ~TalkService_sendMessageIgnored_result() throw();
  TalkException e;

  _TalkService_sendMessageIgnored_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_sendMessageIgnored_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_sendMessageIgnored_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_sendMessageIgnored_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_sendMessageIgnored_presult__isset {
  _TalkService_sendMessageIgnored_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_sendMessageIgnored_presult__isset;

class TalkService_sendMessageIgnored_presult {
 public:


  virtual ~TalkService_sendMessageIgnored_presult() throw();
  TalkException e;

  _TalkService_sendMessageIgnored_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_sendMessageReceipt_args__isset {
  _TalkService_sendMessageReceipt_args__isset() : seq(false), consumer(false), messageIds(false) {}
  bool seq :1;
  bool consumer :1;
  bool messageIds :1;
} _TalkService_sendMessageReceipt_args__isset;

class TalkService_sendMessageReceipt_args {
 public:

  TalkService_sendMessageReceipt_args(const TalkService_sendMessageReceipt_args&);
  TalkService_sendMessageReceipt_args& operator=(const TalkService_sendMessageReceipt_args&);
  TalkService_sendMessageReceipt_args() : seq(0), consumer() {
  }

  virtual ~TalkService_sendMessageReceipt_args() throw();
  int32_t seq;
  std::string consumer;
  std::vector<std::string>  messageIds;

  _TalkService_sendMessageReceipt_args__isset __isset;

  void __set_seq(const int32_t val);

  void __set_consumer(const std::string& val);

  void __set_messageIds(const std::vector<std::string> & val);

  bool operator == (const TalkService_sendMessageReceipt_args & rhs) const
  {
    if (!(seq == rhs.seq))
      return false;
    if (!(consumer == rhs.consumer))
      return false;
    if (!(messageIds == rhs.messageIds))
      return false;
    return true;
  }
  bool operator != (const TalkService_sendMessageReceipt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_sendMessageReceipt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_sendMessageReceipt_pargs {
 public:


  virtual ~TalkService_sendMessageReceipt_pargs() throw();
  const int32_t* seq;
  const std::string* consumer;
  const std::vector<std::string> * messageIds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_sendMessageReceipt_result__isset {
  _TalkService_sendMessageReceipt_result__isset() : e(false) {}
  bool e :1;
} _TalkService_sendMessageReceipt_result__isset;

class TalkService_sendMessageReceipt_result {
 public:

  TalkService_sendMessageReceipt_result(const TalkService_sendMessageReceipt_result&);
  TalkService_sendMessageReceipt_result& operator=(const TalkService_sendMessageReceipt_result&);
  TalkService_sendMessageReceipt_result() {
  }

  virtual ~TalkService_sendMessageReceipt_result() throw();
  TalkException e;

  _TalkService_sendMessageReceipt_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_sendMessageReceipt_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_sendMessageReceipt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_sendMessageReceipt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_sendMessageReceipt_presult__isset {
  _TalkService_sendMessageReceipt_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_sendMessageReceipt_presult__isset;

class TalkService_sendMessageReceipt_presult {
 public:


  virtual ~TalkService_sendMessageReceipt_presult() throw();
  TalkException e;

  _TalkService_sendMessageReceipt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_findContactByMetaTag_args__isset {
  _TalkService_findContactByMetaTag_args__isset() : userid(false), reference(false) {}
  bool userid :1;
  bool reference :1;
} _TalkService_findContactByMetaTag_args__isset;

class TalkService_findContactByMetaTag_args {
 public:

  TalkService_findContactByMetaTag_args(const TalkService_findContactByMetaTag_args&);
  TalkService_findContactByMetaTag_args& operator=(const TalkService_findContactByMetaTag_args&);
  TalkService_findContactByMetaTag_args() : userid(), reference() {
  }

  virtual ~TalkService_findContactByMetaTag_args() throw();
  std::string userid;
  std::string reference;

  _TalkService_findContactByMetaTag_args__isset __isset;

  void __set_userid(const std::string& val);

  void __set_reference(const std::string& val);

  bool operator == (const TalkService_findContactByMetaTag_args & rhs) const
  {
    if (!(userid == rhs.userid))
      return false;
    if (!(reference == rhs.reference))
      return false;
    return true;
  }
  bool operator != (const TalkService_findContactByMetaTag_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_findContactByMetaTag_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_findContactByMetaTag_pargs {
 public:


  virtual ~TalkService_findContactByMetaTag_pargs() throw();
  const std::string* userid;
  const std::string* reference;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_findContactByMetaTag_result__isset {
  _TalkService_findContactByMetaTag_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_findContactByMetaTag_result__isset;

class TalkService_findContactByMetaTag_result {
 public:

  TalkService_findContactByMetaTag_result(const TalkService_findContactByMetaTag_result&);
  TalkService_findContactByMetaTag_result& operator=(const TalkService_findContactByMetaTag_result&);
  TalkService_findContactByMetaTag_result() {
  }

  virtual ~TalkService_findContactByMetaTag_result() throw();
  Contact success;
  TalkException e;

  _TalkService_findContactByMetaTag_result__isset __isset;

  void __set_success(const Contact& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_findContactByMetaTag_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_findContactByMetaTag_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_findContactByMetaTag_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_findContactByMetaTag_presult__isset {
  _TalkService_findContactByMetaTag_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_findContactByMetaTag_presult__isset;

class TalkService_findContactByMetaTag_presult {
 public:


  virtual ~TalkService_findContactByMetaTag_presult() throw();
  Contact* success;
  TalkException e;

  _TalkService_findContactByMetaTag_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_sendMessageToMyHome_args__isset {
  _TalkService_sendMessageToMyHome_args__isset() : seq(false), message(false) {}
  bool seq :1;
  bool message :1;
} _TalkService_sendMessageToMyHome_args__isset;

class TalkService_sendMessageToMyHome_args {
 public:

  TalkService_sendMessageToMyHome_args(const TalkService_sendMessageToMyHome_args&);
  TalkService_sendMessageToMyHome_args& operator=(const TalkService_sendMessageToMyHome_args&);
  TalkService_sendMessageToMyHome_args() : seq(0) {
  }

  virtual ~TalkService_sendMessageToMyHome_args() throw();
  int32_t seq;
  Message message;

  _TalkService_sendMessageToMyHome_args__isset __isset;

  void __set_seq(const int32_t val);

  void __set_message(const Message& val);

  bool operator == (const TalkService_sendMessageToMyHome_args & rhs) const
  {
    if (!(seq == rhs.seq))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const TalkService_sendMessageToMyHome_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_sendMessageToMyHome_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_sendMessageToMyHome_pargs {
 public:


  virtual ~TalkService_sendMessageToMyHome_pargs() throw();
  const int32_t* seq;
  const Message* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_sendMessageToMyHome_result__isset {
  _TalkService_sendMessageToMyHome_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_sendMessageToMyHome_result__isset;

class TalkService_sendMessageToMyHome_result {
 public:

  TalkService_sendMessageToMyHome_result(const TalkService_sendMessageToMyHome_result&);
  TalkService_sendMessageToMyHome_result& operator=(const TalkService_sendMessageToMyHome_result&);
  TalkService_sendMessageToMyHome_result() {
  }

  virtual ~TalkService_sendMessageToMyHome_result() throw();
  Message success;
  TalkException e;

  _TalkService_sendMessageToMyHome_result__isset __isset;

  void __set_success(const Message& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_sendMessageToMyHome_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_sendMessageToMyHome_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_sendMessageToMyHome_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_sendMessageToMyHome_presult__isset {
  _TalkService_sendMessageToMyHome_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_sendMessageToMyHome_presult__isset;

class TalkService_sendMessageToMyHome_presult {
 public:


  virtual ~TalkService_sendMessageToMyHome_presult() throw();
  Message* success;
  TalkException e;

  _TalkService_sendMessageToMyHome_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_setBuddyLocation_args__isset {
  _TalkService_setBuddyLocation_args__isset() : mid(false), index(false), location(false) {}
  bool mid :1;
  bool index :1;
  bool location :1;
} _TalkService_setBuddyLocation_args__isset;

class TalkService_setBuddyLocation_args {
 public:

  TalkService_setBuddyLocation_args(const TalkService_setBuddyLocation_args&);
  TalkService_setBuddyLocation_args& operator=(const TalkService_setBuddyLocation_args&);
  TalkService_setBuddyLocation_args() : mid(), index(0) {
  }

  virtual ~TalkService_setBuddyLocation_args() throw();
  std::string mid;
  int32_t index;
  Geolocation location;

  _TalkService_setBuddyLocation_args__isset __isset;

  void __set_mid(const std::string& val);

  void __set_index(const int32_t val);

  void __set_location(const Geolocation& val);

  bool operator == (const TalkService_setBuddyLocation_args & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    if (!(index == rhs.index))
      return false;
    if (!(location == rhs.location))
      return false;
    return true;
  }
  bool operator != (const TalkService_setBuddyLocation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_setBuddyLocation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_setBuddyLocation_pargs {
 public:


  virtual ~TalkService_setBuddyLocation_pargs() throw();
  const std::string* mid;
  const int32_t* index;
  const Geolocation* location;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_setBuddyLocation_result__isset {
  _TalkService_setBuddyLocation_result__isset() : e(false) {}
  bool e :1;
} _TalkService_setBuddyLocation_result__isset;

class TalkService_setBuddyLocation_result {
 public:

  TalkService_setBuddyLocation_result(const TalkService_setBuddyLocation_result&);
  TalkService_setBuddyLocation_result& operator=(const TalkService_setBuddyLocation_result&);
  TalkService_setBuddyLocation_result() {
  }

  virtual ~TalkService_setBuddyLocation_result() throw();
  TalkException e;

  _TalkService_setBuddyLocation_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_setBuddyLocation_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_setBuddyLocation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_setBuddyLocation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_setBuddyLocation_presult__isset {
  _TalkService_setBuddyLocation_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_setBuddyLocation_presult__isset;

class TalkService_setBuddyLocation_presult {
 public:


  virtual ~TalkService_setBuddyLocation_presult() throw();
  TalkException e;

  _TalkService_setBuddyLocation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_setIdentityCredential_args__isset {
  _TalkService_setIdentityCredential_args__isset() : identifier(false), verifier(false), provider(false) {}
  bool identifier :1;
  bool verifier :1;
  bool provider :1;
} _TalkService_setIdentityCredential_args__isset;

class TalkService_setIdentityCredential_args {
 public:

  TalkService_setIdentityCredential_args(const TalkService_setIdentityCredential_args&);
  TalkService_setIdentityCredential_args& operator=(const TalkService_setIdentityCredential_args&);
  TalkService_setIdentityCredential_args() : identifier(), verifier(), provider((IdentityProvider::type)0) {
  }

  virtual ~TalkService_setIdentityCredential_args() throw();
  std::string identifier;
  std::string verifier;
  IdentityProvider::type provider;

  _TalkService_setIdentityCredential_args__isset __isset;

  void __set_identifier(const std::string& val);

  void __set_verifier(const std::string& val);

  void __set_provider(const IdentityProvider::type val);

  bool operator == (const TalkService_setIdentityCredential_args & rhs) const
  {
    if (!(identifier == rhs.identifier))
      return false;
    if (!(verifier == rhs.verifier))
      return false;
    if (!(provider == rhs.provider))
      return false;
    return true;
  }
  bool operator != (const TalkService_setIdentityCredential_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_setIdentityCredential_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_setIdentityCredential_pargs {
 public:


  virtual ~TalkService_setIdentityCredential_pargs() throw();
  const std::string* identifier;
  const std::string* verifier;
  const IdentityProvider::type* provider;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_setIdentityCredential_result__isset {
  _TalkService_setIdentityCredential_result__isset() : e(false) {}
  bool e :1;
} _TalkService_setIdentityCredential_result__isset;

class TalkService_setIdentityCredential_result {
 public:

  TalkService_setIdentityCredential_result(const TalkService_setIdentityCredential_result&);
  TalkService_setIdentityCredential_result& operator=(const TalkService_setIdentityCredential_result&);
  TalkService_setIdentityCredential_result() {
  }

  virtual ~TalkService_setIdentityCredential_result() throw();
  TalkException e;

  _TalkService_setIdentityCredential_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_setIdentityCredential_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_setIdentityCredential_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_setIdentityCredential_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_setIdentityCredential_presult__isset {
  _TalkService_setIdentityCredential_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_setIdentityCredential_presult__isset;

class TalkService_setIdentityCredential_presult {
 public:


  virtual ~TalkService_setIdentityCredential_presult() throw();
  TalkException e;

  _TalkService_setIdentityCredential_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_setNotificationsEnabled_args__isset {
  _TalkService_setNotificationsEnabled_args__isset() : reqSeq(false), type(false), target(false), enablement(false) {}
  bool reqSeq :1;
  bool type :1;
  bool target :1;
  bool enablement :1;
} _TalkService_setNotificationsEnabled_args__isset;

class TalkService_setNotificationsEnabled_args {
 public:

  TalkService_setNotificationsEnabled_args(const TalkService_setNotificationsEnabled_args&);
  TalkService_setNotificationsEnabled_args& operator=(const TalkService_setNotificationsEnabled_args&);
  TalkService_setNotificationsEnabled_args() : reqSeq(0), type((MIDType::type)0), target(), enablement(0) {
  }

  virtual ~TalkService_setNotificationsEnabled_args() throw();
  int32_t reqSeq;
  MIDType::type type;
  std::string target;
  bool enablement;

  _TalkService_setNotificationsEnabled_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_type(const MIDType::type val);

  void __set_target(const std::string& val);

  void __set_enablement(const bool val);

  bool operator == (const TalkService_setNotificationsEnabled_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(target == rhs.target))
      return false;
    if (!(enablement == rhs.enablement))
      return false;
    return true;
  }
  bool operator != (const TalkService_setNotificationsEnabled_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_setNotificationsEnabled_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_setNotificationsEnabled_pargs {
 public:


  virtual ~TalkService_setNotificationsEnabled_pargs() throw();
  const int32_t* reqSeq;
  const MIDType::type* type;
  const std::string* target;
  const bool* enablement;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_setNotificationsEnabled_result__isset {
  _TalkService_setNotificationsEnabled_result__isset() : e(false) {}
  bool e :1;
} _TalkService_setNotificationsEnabled_result__isset;

class TalkService_setNotificationsEnabled_result {
 public:

  TalkService_setNotificationsEnabled_result(const TalkService_setNotificationsEnabled_result&);
  TalkService_setNotificationsEnabled_result& operator=(const TalkService_setNotificationsEnabled_result&);
  TalkService_setNotificationsEnabled_result() {
  }

  virtual ~TalkService_setNotificationsEnabled_result() throw();
  TalkException e;

  _TalkService_setNotificationsEnabled_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_setNotificationsEnabled_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_setNotificationsEnabled_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_setNotificationsEnabled_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_setNotificationsEnabled_presult__isset {
  _TalkService_setNotificationsEnabled_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_setNotificationsEnabled_presult__isset;

class TalkService_setNotificationsEnabled_presult {
 public:


  virtual ~TalkService_setNotificationsEnabled_presult() throw();
  TalkException e;

  _TalkService_setNotificationsEnabled_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_startUpdateVerification_args__isset {
  _TalkService_startUpdateVerification_args__isset() : region(false), carrier(false), phone(false), udidHash(false), deviceInfo(false), networkCode(false), locale(false) {}
  bool region :1;
  bool carrier :1;
  bool phone :1;
  bool udidHash :1;
  bool deviceInfo :1;
  bool networkCode :1;
  bool locale :1;
} _TalkService_startUpdateVerification_args__isset;

class TalkService_startUpdateVerification_args {
 public:

  TalkService_startUpdateVerification_args(const TalkService_startUpdateVerification_args&);
  TalkService_startUpdateVerification_args& operator=(const TalkService_startUpdateVerification_args&);
  TalkService_startUpdateVerification_args() : region(), carrier((CarrierCode::type)0), phone(), udidHash(), networkCode(), locale() {
  }

  virtual ~TalkService_startUpdateVerification_args() throw();
  std::string region;
  CarrierCode::type carrier;
  std::string phone;
  std::string udidHash;
  DeviceInfo deviceInfo;
  std::string networkCode;
  std::string locale;

  _TalkService_startUpdateVerification_args__isset __isset;

  void __set_region(const std::string& val);

  void __set_carrier(const CarrierCode::type val);

  void __set_phone(const std::string& val);

  void __set_udidHash(const std::string& val);

  void __set_deviceInfo(const DeviceInfo& val);

  void __set_networkCode(const std::string& val);

  void __set_locale(const std::string& val);

  bool operator == (const TalkService_startUpdateVerification_args & rhs) const
  {
    if (!(region == rhs.region))
      return false;
    if (!(carrier == rhs.carrier))
      return false;
    if (!(phone == rhs.phone))
      return false;
    if (!(udidHash == rhs.udidHash))
      return false;
    if (!(deviceInfo == rhs.deviceInfo))
      return false;
    if (!(networkCode == rhs.networkCode))
      return false;
    if (!(locale == rhs.locale))
      return false;
    return true;
  }
  bool operator != (const TalkService_startUpdateVerification_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_startUpdateVerification_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_startUpdateVerification_pargs {
 public:


  virtual ~TalkService_startUpdateVerification_pargs() throw();
  const std::string* region;
  const CarrierCode::type* carrier;
  const std::string* phone;
  const std::string* udidHash;
  const DeviceInfo* deviceInfo;
  const std::string* networkCode;
  const std::string* locale;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_startUpdateVerification_result__isset {
  _TalkService_startUpdateVerification_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_startUpdateVerification_result__isset;

class TalkService_startUpdateVerification_result {
 public:

  TalkService_startUpdateVerification_result(const TalkService_startUpdateVerification_result&);
  TalkService_startUpdateVerification_result& operator=(const TalkService_startUpdateVerification_result&);
  TalkService_startUpdateVerification_result() {
  }

  virtual ~TalkService_startUpdateVerification_result() throw();
  VerificationSessionData success;
  TalkException e;

  _TalkService_startUpdateVerification_result__isset __isset;

  void __set_success(const VerificationSessionData& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_startUpdateVerification_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_startUpdateVerification_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_startUpdateVerification_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_startUpdateVerification_presult__isset {
  _TalkService_startUpdateVerification_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_startUpdateVerification_presult__isset;

class TalkService_startUpdateVerification_presult {
 public:


  virtual ~TalkService_startUpdateVerification_presult() throw();
  VerificationSessionData* success;
  TalkException e;

  _TalkService_startUpdateVerification_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_startVerification_args__isset {
  _TalkService_startVerification_args__isset() : region(false), carrier(false), phone(false), udidHash(false), deviceInfo(false), networkCode(false), mid(false), locale(false), simInfo(false), oldUdidHash(false) {}
  bool region :1;
  bool carrier :1;
  bool phone :1;
  bool udidHash :1;
  bool deviceInfo :1;
  bool networkCode :1;
  bool mid :1;
  bool locale :1;
  bool simInfo :1;
  bool oldUdidHash :1;
} _TalkService_startVerification_args__isset;

class TalkService_startVerification_args {
 public:

  TalkService_startVerification_args(const TalkService_startVerification_args&);
  TalkService_startVerification_args& operator=(const TalkService_startVerification_args&);
  TalkService_startVerification_args() : region(), carrier((CarrierCode::type)0), phone(), udidHash(), networkCode(), mid(), locale(), oldUdidHash() {
  }

  virtual ~TalkService_startVerification_args() throw();
  std::string region;
  CarrierCode::type carrier;
  std::string phone;
  std::string udidHash;
  DeviceInfo deviceInfo;
  std::string networkCode;
  std::string mid;
  std::string locale;
  SIMInfo simInfo;
  std::string oldUdidHash;

  _TalkService_startVerification_args__isset __isset;

  void __set_region(const std::string& val);

  void __set_carrier(const CarrierCode::type val);

  void __set_phone(const std::string& val);

  void __set_udidHash(const std::string& val);

  void __set_deviceInfo(const DeviceInfo& val);

  void __set_networkCode(const std::string& val);

  void __set_mid(const std::string& val);

  void __set_locale(const std::string& val);

  void __set_simInfo(const SIMInfo& val);

  void __set_oldUdidHash(const std::string& val);

  bool operator == (const TalkService_startVerification_args & rhs) const
  {
    if (!(region == rhs.region))
      return false;
    if (!(carrier == rhs.carrier))
      return false;
    if (!(phone == rhs.phone))
      return false;
    if (!(udidHash == rhs.udidHash))
      return false;
    if (!(deviceInfo == rhs.deviceInfo))
      return false;
    if (!(networkCode == rhs.networkCode))
      return false;
    if (!(mid == rhs.mid))
      return false;
    if (!(locale == rhs.locale))
      return false;
    if (!(simInfo == rhs.simInfo))
      return false;
    if (!(oldUdidHash == rhs.oldUdidHash))
      return false;
    return true;
  }
  bool operator != (const TalkService_startVerification_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_startVerification_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_startVerification_pargs {
 public:


  virtual ~TalkService_startVerification_pargs() throw();
  const std::string* region;
  const CarrierCode::type* carrier;
  const std::string* phone;
  const std::string* udidHash;
  const DeviceInfo* deviceInfo;
  const std::string* networkCode;
  const std::string* mid;
  const std::string* locale;
  const SIMInfo* simInfo;
  const std::string* oldUdidHash;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_startVerification_result__isset {
  _TalkService_startVerification_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_startVerification_result__isset;

class TalkService_startVerification_result {
 public:

  TalkService_startVerification_result(const TalkService_startVerification_result&);
  TalkService_startVerification_result& operator=(const TalkService_startVerification_result&);
  TalkService_startVerification_result() {
  }

  virtual ~TalkService_startVerification_result() throw();
  VerificationSessionData success;
  TalkException e;

  _TalkService_startVerification_result__isset __isset;

  void __set_success(const VerificationSessionData& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_startVerification_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_startVerification_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_startVerification_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_startVerification_presult__isset {
  _TalkService_startVerification_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_startVerification_presult__isset;

class TalkService_startVerification_presult {
 public:


  virtual ~TalkService_startVerification_presult() throw();
  VerificationSessionData* success;
  TalkException e;

  _TalkService_startVerification_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_updateGroupPreferenceAttribute_args__isset {
  _TalkService_updateGroupPreferenceAttribute_args__isset() : reqSeq(false), groupMid(false), updatedAttrs(false) {}
  bool reqSeq :1;
  bool groupMid :1;
  bool updatedAttrs :1;
} _TalkService_updateGroupPreferenceAttribute_args__isset;

class TalkService_updateGroupPreferenceAttribute_args {
 public:

  TalkService_updateGroupPreferenceAttribute_args(const TalkService_updateGroupPreferenceAttribute_args&);
  TalkService_updateGroupPreferenceAttribute_args& operator=(const TalkService_updateGroupPreferenceAttribute_args&);
  TalkService_updateGroupPreferenceAttribute_args() : reqSeq(0), groupMid() {
  }

  virtual ~TalkService_updateGroupPreferenceAttribute_args() throw();
  int32_t reqSeq;
  std::string groupMid;
  std::map<GroupPreferenceAttribute::type, std::string>  updatedAttrs;

  _TalkService_updateGroupPreferenceAttribute_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_groupMid(const std::string& val);

  void __set_updatedAttrs(const std::map<GroupPreferenceAttribute::type, std::string> & val);

  bool operator == (const TalkService_updateGroupPreferenceAttribute_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(groupMid == rhs.groupMid))
      return false;
    if (!(updatedAttrs == rhs.updatedAttrs))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateGroupPreferenceAttribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateGroupPreferenceAttribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_updateGroupPreferenceAttribute_pargs {
 public:


  virtual ~TalkService_updateGroupPreferenceAttribute_pargs() throw();
  const int32_t* reqSeq;
  const std::string* groupMid;
  const std::map<GroupPreferenceAttribute::type, std::string> * updatedAttrs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateGroupPreferenceAttribute_result__isset {
  _TalkService_updateGroupPreferenceAttribute_result__isset() : e(false) {}
  bool e :1;
} _TalkService_updateGroupPreferenceAttribute_result__isset;

class TalkService_updateGroupPreferenceAttribute_result {
 public:

  TalkService_updateGroupPreferenceAttribute_result(const TalkService_updateGroupPreferenceAttribute_result&);
  TalkService_updateGroupPreferenceAttribute_result& operator=(const TalkService_updateGroupPreferenceAttribute_result&);
  TalkService_updateGroupPreferenceAttribute_result() {
  }

  virtual ~TalkService_updateGroupPreferenceAttribute_result() throw();
  TalkException e;

  _TalkService_updateGroupPreferenceAttribute_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_updateGroupPreferenceAttribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateGroupPreferenceAttribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateGroupPreferenceAttribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateGroupPreferenceAttribute_presult__isset {
  _TalkService_updateGroupPreferenceAttribute_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_updateGroupPreferenceAttribute_presult__isset;

class TalkService_updateGroupPreferenceAttribute_presult {
 public:


  virtual ~TalkService_updateGroupPreferenceAttribute_presult() throw();
  TalkException e;

  _TalkService_updateGroupPreferenceAttribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_createRoomV2_args__isset {
  _TalkService_createRoomV2_args__isset() : reqSeq(false), contactIds(false) {}
  bool reqSeq :1;
  bool contactIds :1;
} _TalkService_createRoomV2_args__isset;

class TalkService_createRoomV2_args {
 public:

  TalkService_createRoomV2_args(const TalkService_createRoomV2_args&);
  TalkService_createRoomV2_args& operator=(const TalkService_createRoomV2_args&);
  TalkService_createRoomV2_args() : reqSeq(0) {
  }

  virtual ~TalkService_createRoomV2_args() throw();
  int32_t reqSeq;
  std::vector<std::string>  contactIds;

  _TalkService_createRoomV2_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_contactIds(const std::vector<std::string> & val);

  bool operator == (const TalkService_createRoomV2_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(contactIds == rhs.contactIds))
      return false;
    return true;
  }
  bool operator != (const TalkService_createRoomV2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_createRoomV2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_createRoomV2_pargs {
 public:


  virtual ~TalkService_createRoomV2_pargs() throw();
  const int32_t* reqSeq;
  const std::vector<std::string> * contactIds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_createRoomV2_result__isset {
  _TalkService_createRoomV2_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_createRoomV2_result__isset;

class TalkService_createRoomV2_result {
 public:

  TalkService_createRoomV2_result(const TalkService_createRoomV2_result&);
  TalkService_createRoomV2_result& operator=(const TalkService_createRoomV2_result&);
  TalkService_createRoomV2_result() {
  }

  virtual ~TalkService_createRoomV2_result() throw();
  Room success;
  TalkException e;

  _TalkService_createRoomV2_result__isset __isset;

  void __set_success(const Room& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_createRoomV2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_createRoomV2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_createRoomV2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_createRoomV2_presult__isset {
  _TalkService_createRoomV2_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_createRoomV2_presult__isset;

class TalkService_createRoomV2_presult {
 public:


  virtual ~TalkService_createRoomV2_presult() throw();
  Room* success;
  TalkException e;

  _TalkService_createRoomV2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_storeUpdateProfileAttribute_args__isset {
  _TalkService_storeUpdateProfileAttribute_args__isset() : seq(false), profileAttribute(false), value(false) {}
  bool seq :1;
  bool profileAttribute :1;
  bool value :1;
} _TalkService_storeUpdateProfileAttribute_args__isset;

class TalkService_storeUpdateProfileAttribute_args {
 public:

  TalkService_storeUpdateProfileAttribute_args(const TalkService_storeUpdateProfileAttribute_args&);
  TalkService_storeUpdateProfileAttribute_args& operator=(const TalkService_storeUpdateProfileAttribute_args&);
  TalkService_storeUpdateProfileAttribute_args() : seq(0), profileAttribute((ProfileAttribute::type)0), value() {
  }

  virtual ~TalkService_storeUpdateProfileAttribute_args() throw();
  int32_t seq;
  ProfileAttribute::type profileAttribute;
  std::string value;

  _TalkService_storeUpdateProfileAttribute_args__isset __isset;

  void __set_seq(const int32_t val);

  void __set_profileAttribute(const ProfileAttribute::type val);

  void __set_value(const std::string& val);

  bool operator == (const TalkService_storeUpdateProfileAttribute_args & rhs) const
  {
    if (!(seq == rhs.seq))
      return false;
    if (!(profileAttribute == rhs.profileAttribute))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const TalkService_storeUpdateProfileAttribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_storeUpdateProfileAttribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_storeUpdateProfileAttribute_pargs {
 public:


  virtual ~TalkService_storeUpdateProfileAttribute_pargs() throw();
  const int32_t* seq;
  const ProfileAttribute::type* profileAttribute;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_storeUpdateProfileAttribute_result__isset {
  _TalkService_storeUpdateProfileAttribute_result__isset() : e(false) {}
  bool e :1;
} _TalkService_storeUpdateProfileAttribute_result__isset;

class TalkService_storeUpdateProfileAttribute_result {
 public:

  TalkService_storeUpdateProfileAttribute_result(const TalkService_storeUpdateProfileAttribute_result&);
  TalkService_storeUpdateProfileAttribute_result& operator=(const TalkService_storeUpdateProfileAttribute_result&);
  TalkService_storeUpdateProfileAttribute_result() {
  }

  virtual ~TalkService_storeUpdateProfileAttribute_result() throw();
  TalkException e;

  _TalkService_storeUpdateProfileAttribute_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_storeUpdateProfileAttribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_storeUpdateProfileAttribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_storeUpdateProfileAttribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_storeUpdateProfileAttribute_presult__isset {
  _TalkService_storeUpdateProfileAttribute_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_storeUpdateProfileAttribute_presult__isset;

class TalkService_storeUpdateProfileAttribute_presult {
 public:


  virtual ~TalkService_storeUpdateProfileAttribute_presult() throw();
  TalkException e;

  _TalkService_storeUpdateProfileAttribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_syncContactBySnsIds_args__isset {
  _TalkService_syncContactBySnsIds_args__isset() : reqSeq(false), modifications(false) {}
  bool reqSeq :1;
  bool modifications :1;
} _TalkService_syncContactBySnsIds_args__isset;

class TalkService_syncContactBySnsIds_args {
 public:

  TalkService_syncContactBySnsIds_args(const TalkService_syncContactBySnsIds_args&);
  TalkService_syncContactBySnsIds_args& operator=(const TalkService_syncContactBySnsIds_args&);
  TalkService_syncContactBySnsIds_args() : reqSeq(0) {
  }

  virtual ~TalkService_syncContactBySnsIds_args() throw();
  int32_t reqSeq;
  std::vector<SnsFriendModification>  modifications;

  _TalkService_syncContactBySnsIds_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_modifications(const std::vector<SnsFriendModification> & val);

  bool operator == (const TalkService_syncContactBySnsIds_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(modifications == rhs.modifications))
      return false;
    return true;
  }
  bool operator != (const TalkService_syncContactBySnsIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_syncContactBySnsIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_syncContactBySnsIds_pargs {
 public:


  virtual ~TalkService_syncContactBySnsIds_pargs() throw();
  const int32_t* reqSeq;
  const std::vector<SnsFriendModification> * modifications;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_syncContactBySnsIds_result__isset {
  _TalkService_syncContactBySnsIds_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_syncContactBySnsIds_result__isset;

class TalkService_syncContactBySnsIds_result {
 public:

  TalkService_syncContactBySnsIds_result(const TalkService_syncContactBySnsIds_result&);
  TalkService_syncContactBySnsIds_result& operator=(const TalkService_syncContactBySnsIds_result&);
  TalkService_syncContactBySnsIds_result() {
  }

  virtual ~TalkService_syncContactBySnsIds_result() throw();
  std::vector<SnsFriendContactRegistration>  success;
  TalkException e;

  _TalkService_syncContactBySnsIds_result__isset __isset;

  void __set_success(const std::vector<SnsFriendContactRegistration> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_syncContactBySnsIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_syncContactBySnsIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_syncContactBySnsIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_syncContactBySnsIds_presult__isset {
  _TalkService_syncContactBySnsIds_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_syncContactBySnsIds_presult__isset;

class TalkService_syncContactBySnsIds_presult {
 public:


  virtual ~TalkService_syncContactBySnsIds_presult() throw();
  std::vector<SnsFriendContactRegistration> * success;
  TalkException e;

  _TalkService_syncContactBySnsIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_syncContacts_args__isset {
  _TalkService_syncContacts_args__isset() : reqSeq(false), localContacts(false) {}
  bool reqSeq :1;
  bool localContacts :1;
} _TalkService_syncContacts_args__isset;

class TalkService_syncContacts_args {
 public:

  TalkService_syncContacts_args(const TalkService_syncContacts_args&);
  TalkService_syncContacts_args& operator=(const TalkService_syncContacts_args&);
  TalkService_syncContacts_args() : reqSeq(0) {
  }

  virtual ~TalkService_syncContacts_args() throw();
  int32_t reqSeq;
  std::vector<ContactModification>  localContacts;

  _TalkService_syncContacts_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_localContacts(const std::vector<ContactModification> & val);

  bool operator == (const TalkService_syncContacts_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(localContacts == rhs.localContacts))
      return false;
    return true;
  }
  bool operator != (const TalkService_syncContacts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_syncContacts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_syncContacts_pargs {
 public:


  virtual ~TalkService_syncContacts_pargs() throw();
  const int32_t* reqSeq;
  const std::vector<ContactModification> * localContacts;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_syncContacts_result__isset {
  _TalkService_syncContacts_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_syncContacts_result__isset;

class TalkService_syncContacts_result {
 public:

  TalkService_syncContacts_result(const TalkService_syncContacts_result&);
  TalkService_syncContacts_result& operator=(const TalkService_syncContacts_result&);
  TalkService_syncContacts_result() {
  }

  virtual ~TalkService_syncContacts_result() throw();
  std::map<std::string, ContactRegistration>  success;
  TalkException e;

  _TalkService_syncContacts_result__isset __isset;

  void __set_success(const std::map<std::string, ContactRegistration> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_syncContacts_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_syncContacts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_syncContacts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_syncContacts_presult__isset {
  _TalkService_syncContacts_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_syncContacts_presult__isset;

class TalkService_syncContacts_presult {
 public:


  virtual ~TalkService_syncContacts_presult() throw();
  std::map<std::string, ContactRegistration> * success;
  TalkException e;

  _TalkService_syncContacts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_trySendMessage_args__isset {
  _TalkService_trySendMessage_args__isset() : seq(false), message(false) {}
  bool seq :1;
  bool message :1;
} _TalkService_trySendMessage_args__isset;

class TalkService_trySendMessage_args {
 public:

  TalkService_trySendMessage_args(const TalkService_trySendMessage_args&);
  TalkService_trySendMessage_args& operator=(const TalkService_trySendMessage_args&);
  TalkService_trySendMessage_args() : seq(0) {
  }

  virtual ~TalkService_trySendMessage_args() throw();
  int32_t seq;
  Message message;

  _TalkService_trySendMessage_args__isset __isset;

  void __set_seq(const int32_t val);

  void __set_message(const Message& val);

  bool operator == (const TalkService_trySendMessage_args & rhs) const
  {
    if (!(seq == rhs.seq))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const TalkService_trySendMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_trySendMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_trySendMessage_pargs {
 public:


  virtual ~TalkService_trySendMessage_pargs() throw();
  const int32_t* seq;
  const Message* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_trySendMessage_result__isset {
  _TalkService_trySendMessage_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_trySendMessage_result__isset;

class TalkService_trySendMessage_result {
 public:

  TalkService_trySendMessage_result(const TalkService_trySendMessage_result&);
  TalkService_trySendMessage_result& operator=(const TalkService_trySendMessage_result&);
  TalkService_trySendMessage_result() {
  }

  virtual ~TalkService_trySendMessage_result() throw();
  Message success;
  TalkException e;

  _TalkService_trySendMessage_result__isset __isset;

  void __set_success(const Message& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_trySendMessage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_trySendMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_trySendMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_trySendMessage_presult__isset {
  _TalkService_trySendMessage_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_trySendMessage_presult__isset;

class TalkService_trySendMessage_presult {
 public:


  virtual ~TalkService_trySendMessage_presult() throw();
  Message* success;
  TalkException e;

  _TalkService_trySendMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getNextMessagesV2_args__isset {
  _TalkService_getNextMessagesV2_args__isset() : messageBoxId(false), startMessageId(false), messagesCount(false) {}
  bool messageBoxId :1;
  bool startMessageId :1;
  bool messagesCount :1;
} _TalkService_getNextMessagesV2_args__isset;

class TalkService_getNextMessagesV2_args {
 public:

  TalkService_getNextMessagesV2_args(const TalkService_getNextMessagesV2_args&);
  TalkService_getNextMessagesV2_args& operator=(const TalkService_getNextMessagesV2_args&);
  TalkService_getNextMessagesV2_args() : messageBoxId(), messagesCount(0) {
  }

  virtual ~TalkService_getNextMessagesV2_args() throw();
  std::string messageBoxId;
  MessageBoxV2MessageId startMessageId;
  int32_t messagesCount;

  _TalkService_getNextMessagesV2_args__isset __isset;

  void __set_messageBoxId(const std::string& val);

  void __set_startMessageId(const MessageBoxV2MessageId& val);

  void __set_messagesCount(const int32_t val);

  bool operator == (const TalkService_getNextMessagesV2_args & rhs) const
  {
    if (!(messageBoxId == rhs.messageBoxId))
      return false;
    if (!(startMessageId == rhs.startMessageId))
      return false;
    if (!(messagesCount == rhs.messagesCount))
      return false;
    return true;
  }
  bool operator != (const TalkService_getNextMessagesV2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getNextMessagesV2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getNextMessagesV2_pargs {
 public:


  virtual ~TalkService_getNextMessagesV2_pargs() throw();
  const std::string* messageBoxId;
  const MessageBoxV2MessageId* startMessageId;
  const int32_t* messagesCount;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getNextMessagesV2_result__isset {
  _TalkService_getNextMessagesV2_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getNextMessagesV2_result__isset;

class TalkService_getNextMessagesV2_result {
 public:

  TalkService_getNextMessagesV2_result(const TalkService_getNextMessagesV2_result&);
  TalkService_getNextMessagesV2_result& operator=(const TalkService_getNextMessagesV2_result&);
  TalkService_getNextMessagesV2_result() {
  }

  virtual ~TalkService_getNextMessagesV2_result() throw();
  std::vector<Message>  success;
  TalkException e;

  _TalkService_getNextMessagesV2_result__isset __isset;

  void __set_success(const std::vector<Message> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getNextMessagesV2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getNextMessagesV2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getNextMessagesV2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getNextMessagesV2_presult__isset {
  _TalkService_getNextMessagesV2_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getNextMessagesV2_presult__isset;

class TalkService_getNextMessagesV2_presult {
 public:


  virtual ~TalkService_getNextMessagesV2_presult() throw();
  std::vector<Message> * success;
  TalkException e;

  _TalkService_getNextMessagesV2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getMessageBoxCompactWrapUpV2_args__isset {
  _TalkService_getMessageBoxCompactWrapUpV2_args__isset() : messageBoxId(false) {}
  bool messageBoxId :1;
} _TalkService_getMessageBoxCompactWrapUpV2_args__isset;

class TalkService_getMessageBoxCompactWrapUpV2_args {
 public:

  TalkService_getMessageBoxCompactWrapUpV2_args(const TalkService_getMessageBoxCompactWrapUpV2_args&);
  TalkService_getMessageBoxCompactWrapUpV2_args& operator=(const TalkService_getMessageBoxCompactWrapUpV2_args&);
  TalkService_getMessageBoxCompactWrapUpV2_args() : messageBoxId() {
  }

  virtual ~TalkService_getMessageBoxCompactWrapUpV2_args() throw();
  std::string messageBoxId;

  _TalkService_getMessageBoxCompactWrapUpV2_args__isset __isset;

  void __set_messageBoxId(const std::string& val);

  bool operator == (const TalkService_getMessageBoxCompactWrapUpV2_args & rhs) const
  {
    if (!(messageBoxId == rhs.messageBoxId))
      return false;
    return true;
  }
  bool operator != (const TalkService_getMessageBoxCompactWrapUpV2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getMessageBoxCompactWrapUpV2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getMessageBoxCompactWrapUpV2_pargs {
 public:


  virtual ~TalkService_getMessageBoxCompactWrapUpV2_pargs() throw();
  const std::string* messageBoxId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getMessageBoxCompactWrapUpV2_result__isset {
  _TalkService_getMessageBoxCompactWrapUpV2_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getMessageBoxCompactWrapUpV2_result__isset;

class TalkService_getMessageBoxCompactWrapUpV2_result {
 public:

  TalkService_getMessageBoxCompactWrapUpV2_result(const TalkService_getMessageBoxCompactWrapUpV2_result&);
  TalkService_getMessageBoxCompactWrapUpV2_result& operator=(const TalkService_getMessageBoxCompactWrapUpV2_result&);
  TalkService_getMessageBoxCompactWrapUpV2_result() {
  }

  virtual ~TalkService_getMessageBoxCompactWrapUpV2_result() throw();
  TMessageBoxWrapUp success;
  TalkException e;

  _TalkService_getMessageBoxCompactWrapUpV2_result__isset __isset;

  void __set_success(const TMessageBoxWrapUp& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getMessageBoxCompactWrapUpV2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getMessageBoxCompactWrapUpV2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getMessageBoxCompactWrapUpV2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getMessageBoxCompactWrapUpV2_presult__isset {
  _TalkService_getMessageBoxCompactWrapUpV2_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getMessageBoxCompactWrapUpV2_presult__isset;

class TalkService_getMessageBoxCompactWrapUpV2_presult {
 public:


  virtual ~TalkService_getMessageBoxCompactWrapUpV2_presult() throw();
  TMessageBoxWrapUp* success;
  TalkException e;

  _TalkService_getMessageBoxCompactWrapUpV2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_getRecentMessagesV2_args__isset {
  _TalkService_getRecentMessagesV2_args__isset() : messageBoxId(false), messagesCount(false) {}
  bool messageBoxId :1;
  bool messagesCount :1;
} _TalkService_getRecentMessagesV2_args__isset;

class TalkService_getRecentMessagesV2_args {
 public:

  TalkService_getRecentMessagesV2_args(const TalkService_getRecentMessagesV2_args&);
  TalkService_getRecentMessagesV2_args& operator=(const TalkService_getRecentMessagesV2_args&);
  TalkService_getRecentMessagesV2_args() : messageBoxId(), messagesCount(0) {
  }

  virtual ~TalkService_getRecentMessagesV2_args() throw();
  std::string messageBoxId;
  int32_t messagesCount;

  _TalkService_getRecentMessagesV2_args__isset __isset;

  void __set_messageBoxId(const std::string& val);

  void __set_messagesCount(const int32_t val);

  bool operator == (const TalkService_getRecentMessagesV2_args & rhs) const
  {
    if (!(messageBoxId == rhs.messageBoxId))
      return false;
    if (!(messagesCount == rhs.messagesCount))
      return false;
    return true;
  }
  bool operator != (const TalkService_getRecentMessagesV2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getRecentMessagesV2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_getRecentMessagesV2_pargs {
 public:


  virtual ~TalkService_getRecentMessagesV2_pargs() throw();
  const std::string* messageBoxId;
  const int32_t* messagesCount;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getRecentMessagesV2_result__isset {
  _TalkService_getRecentMessagesV2_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getRecentMessagesV2_result__isset;

class TalkService_getRecentMessagesV2_result {
 public:

  TalkService_getRecentMessagesV2_result(const TalkService_getRecentMessagesV2_result&);
  TalkService_getRecentMessagesV2_result& operator=(const TalkService_getRecentMessagesV2_result&);
  TalkService_getRecentMessagesV2_result() {
  }

  virtual ~TalkService_getRecentMessagesV2_result() throw();
  std::vector<Message>  success;
  TalkException e;

  _TalkService_getRecentMessagesV2_result__isset __isset;

  void __set_success(const std::vector<Message> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_getRecentMessagesV2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_getRecentMessagesV2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_getRecentMessagesV2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_getRecentMessagesV2_presult__isset {
  _TalkService_getRecentMessagesV2_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_getRecentMessagesV2_presult__isset;

class TalkService_getRecentMessagesV2_presult {
 public:


  virtual ~TalkService_getRecentMessagesV2_presult() throw();
  std::vector<Message> * success;
  TalkException e;

  _TalkService_getRecentMessagesV2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_validateContactsOnBot_args__isset {
  _TalkService_validateContactsOnBot_args__isset() : contacts(false) {}
  bool contacts :1;
} _TalkService_validateContactsOnBot_args__isset;

class TalkService_validateContactsOnBot_args {
 public:

  TalkService_validateContactsOnBot_args(const TalkService_validateContactsOnBot_args&);
  TalkService_validateContactsOnBot_args& operator=(const TalkService_validateContactsOnBot_args&);
  TalkService_validateContactsOnBot_args() {
  }

  virtual ~TalkService_validateContactsOnBot_args() throw();
  std::vector<std::string>  contacts;

  _TalkService_validateContactsOnBot_args__isset __isset;

  void __set_contacts(const std::vector<std::string> & val);

  bool operator == (const TalkService_validateContactsOnBot_args & rhs) const
  {
    if (!(contacts == rhs.contacts))
      return false;
    return true;
  }
  bool operator != (const TalkService_validateContactsOnBot_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_validateContactsOnBot_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_validateContactsOnBot_pargs {
 public:


  virtual ~TalkService_validateContactsOnBot_pargs() throw();
  const std::vector<std::string> * contacts;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_validateContactsOnBot_result__isset {
  _TalkService_validateContactsOnBot_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_validateContactsOnBot_result__isset;

class TalkService_validateContactsOnBot_result {
 public:

  TalkService_validateContactsOnBot_result(const TalkService_validateContactsOnBot_result&);
  TalkService_validateContactsOnBot_result& operator=(const TalkService_validateContactsOnBot_result&);
  TalkService_validateContactsOnBot_result() {
  }

  virtual ~TalkService_validateContactsOnBot_result() throw();
  std::map<std::string, std::string>  success;
  TalkException e;

  _TalkService_validateContactsOnBot_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_validateContactsOnBot_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_validateContactsOnBot_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_validateContactsOnBot_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_validateContactsOnBot_presult__isset {
  _TalkService_validateContactsOnBot_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_validateContactsOnBot_presult__isset;

class TalkService_validateContactsOnBot_presult {
 public:


  virtual ~TalkService_validateContactsOnBot_presult() throw();
  std::map<std::string, std::string> * success;
  TalkException e;

  _TalkService_validateContactsOnBot_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_tryFriendRequest_args__isset {
  _TalkService_tryFriendRequest_args__isset() : midOrEMid(false), method(false), friendRequestParams(false) {}
  bool midOrEMid :1;
  bool method :1;
  bool friendRequestParams :1;
} _TalkService_tryFriendRequest_args__isset;

class TalkService_tryFriendRequest_args {
 public:

  TalkService_tryFriendRequest_args(const TalkService_tryFriendRequest_args&);
  TalkService_tryFriendRequest_args& operator=(const TalkService_tryFriendRequest_args&);
  TalkService_tryFriendRequest_args() : midOrEMid(), method((FriendRequestMethod::type)0), friendRequestParams() {
  }

  virtual ~TalkService_tryFriendRequest_args() throw();
  std::string midOrEMid;
  FriendRequestMethod::type method;
  std::string friendRequestParams;

  _TalkService_tryFriendRequest_args__isset __isset;

  void __set_midOrEMid(const std::string& val);

  void __set_method(const FriendRequestMethod::type val);

  void __set_friendRequestParams(const std::string& val);

  bool operator == (const TalkService_tryFriendRequest_args & rhs) const
  {
    if (!(midOrEMid == rhs.midOrEMid))
      return false;
    if (!(method == rhs.method))
      return false;
    if (!(friendRequestParams == rhs.friendRequestParams))
      return false;
    return true;
  }
  bool operator != (const TalkService_tryFriendRequest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_tryFriendRequest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_tryFriendRequest_pargs {
 public:


  virtual ~TalkService_tryFriendRequest_pargs() throw();
  const std::string* midOrEMid;
  const FriendRequestMethod::type* method;
  const std::string* friendRequestParams;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_tryFriendRequest_result__isset {
  _TalkService_tryFriendRequest_result__isset() : e(false) {}
  bool e :1;
} _TalkService_tryFriendRequest_result__isset;

class TalkService_tryFriendRequest_result {
 public:

  TalkService_tryFriendRequest_result(const TalkService_tryFriendRequest_result&);
  TalkService_tryFriendRequest_result& operator=(const TalkService_tryFriendRequest_result&);
  TalkService_tryFriendRequest_result() {
  }

  virtual ~TalkService_tryFriendRequest_result() throw();
  TalkException e;

  _TalkService_tryFriendRequest_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_tryFriendRequest_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_tryFriendRequest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_tryFriendRequest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_tryFriendRequest_presult__isset {
  _TalkService_tryFriendRequest_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_tryFriendRequest_presult__isset;

class TalkService_tryFriendRequest_presult {
 public:


  virtual ~TalkService_tryFriendRequest_presult() throw();
  TalkException e;

  _TalkService_tryFriendRequest_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_unblockContact_args__isset {
  _TalkService_unblockContact_args__isset() : reqSeq(false), id(false) {}
  bool reqSeq :1;
  bool id :1;
} _TalkService_unblockContact_args__isset;

class TalkService_unblockContact_args {
 public:

  TalkService_unblockContact_args(const TalkService_unblockContact_args&);
  TalkService_unblockContact_args& operator=(const TalkService_unblockContact_args&);
  TalkService_unblockContact_args() : reqSeq(0), id() {
  }

  virtual ~TalkService_unblockContact_args() throw();
  int32_t reqSeq;
  std::string id;

  _TalkService_unblockContact_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_id(const std::string& val);

  bool operator == (const TalkService_unblockContact_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const TalkService_unblockContact_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_unblockContact_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_unblockContact_pargs {
 public:


  virtual ~TalkService_unblockContact_pargs() throw();
  const int32_t* reqSeq;
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_unblockContact_result__isset {
  _TalkService_unblockContact_result__isset() : e(false) {}
  bool e :1;
} _TalkService_unblockContact_result__isset;

class TalkService_unblockContact_result {
 public:

  TalkService_unblockContact_result(const TalkService_unblockContact_result&);
  TalkService_unblockContact_result& operator=(const TalkService_unblockContact_result&);
  TalkService_unblockContact_result() {
  }

  virtual ~TalkService_unblockContact_result() throw();
  TalkException e;

  _TalkService_unblockContact_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_unblockContact_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_unblockContact_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_unblockContact_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_unblockContact_presult__isset {
  _TalkService_unblockContact_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_unblockContact_presult__isset;

class TalkService_unblockContact_presult {
 public:


  virtual ~TalkService_unblockContact_presult() throw();
  TalkException e;

  _TalkService_unblockContact_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_unblockRecommendation_args__isset {
  _TalkService_unblockRecommendation_args__isset() : reqSeq(false), id(false) {}
  bool reqSeq :1;
  bool id :1;
} _TalkService_unblockRecommendation_args__isset;

class TalkService_unblockRecommendation_args {
 public:

  TalkService_unblockRecommendation_args(const TalkService_unblockRecommendation_args&);
  TalkService_unblockRecommendation_args& operator=(const TalkService_unblockRecommendation_args&);
  TalkService_unblockRecommendation_args() : reqSeq(0), id() {
  }

  virtual ~TalkService_unblockRecommendation_args() throw();
  int32_t reqSeq;
  std::string id;

  _TalkService_unblockRecommendation_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_id(const std::string& val);

  bool operator == (const TalkService_unblockRecommendation_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const TalkService_unblockRecommendation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_unblockRecommendation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_unblockRecommendation_pargs {
 public:


  virtual ~TalkService_unblockRecommendation_pargs() throw();
  const int32_t* reqSeq;
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_unblockRecommendation_result__isset {
  _TalkService_unblockRecommendation_result__isset() : e(false) {}
  bool e :1;
} _TalkService_unblockRecommendation_result__isset;

class TalkService_unblockRecommendation_result {
 public:

  TalkService_unblockRecommendation_result(const TalkService_unblockRecommendation_result&);
  TalkService_unblockRecommendation_result& operator=(const TalkService_unblockRecommendation_result&);
  TalkService_unblockRecommendation_result() {
  }

  virtual ~TalkService_unblockRecommendation_result() throw();
  TalkException e;

  _TalkService_unblockRecommendation_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_unblockRecommendation_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_unblockRecommendation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_unblockRecommendation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_unblockRecommendation_presult__isset {
  _TalkService_unblockRecommendation_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_unblockRecommendation_presult__isset;

class TalkService_unblockRecommendation_presult {
 public:


  virtual ~TalkService_unblockRecommendation_presult() throw();
  TalkException e;

  _TalkService_unblockRecommendation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TalkService_unregisterUserAndDevice_args {
 public:

  TalkService_unregisterUserAndDevice_args(const TalkService_unregisterUserAndDevice_args&);
  TalkService_unregisterUserAndDevice_args& operator=(const TalkService_unregisterUserAndDevice_args&);
  TalkService_unregisterUserAndDevice_args() {
  }

  virtual ~TalkService_unregisterUserAndDevice_args() throw();

  bool operator == (const TalkService_unregisterUserAndDevice_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TalkService_unregisterUserAndDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_unregisterUserAndDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_unregisterUserAndDevice_pargs {
 public:


  virtual ~TalkService_unregisterUserAndDevice_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_unregisterUserAndDevice_result__isset {
  _TalkService_unregisterUserAndDevice_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_unregisterUserAndDevice_result__isset;

class TalkService_unregisterUserAndDevice_result {
 public:

  TalkService_unregisterUserAndDevice_result(const TalkService_unregisterUserAndDevice_result&);
  TalkService_unregisterUserAndDevice_result& operator=(const TalkService_unregisterUserAndDevice_result&);
  TalkService_unregisterUserAndDevice_result() : success() {
  }

  virtual ~TalkService_unregisterUserAndDevice_result() throw();
  std::string success;
  TalkException e;

  _TalkService_unregisterUserAndDevice_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_unregisterUserAndDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_unregisterUserAndDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_unregisterUserAndDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_unregisterUserAndDevice_presult__isset {
  _TalkService_unregisterUserAndDevice_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_unregisterUserAndDevice_presult__isset;

class TalkService_unregisterUserAndDevice_presult {
 public:


  virtual ~TalkService_unregisterUserAndDevice_presult() throw();
  std::string* success;
  TalkException e;

  _TalkService_unregisterUserAndDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_updateApnsDeviceToken_args__isset {
  _TalkService_updateApnsDeviceToken_args__isset() : apnsDeviceToken(false) {}
  bool apnsDeviceToken :1;
} _TalkService_updateApnsDeviceToken_args__isset;

class TalkService_updateApnsDeviceToken_args {
 public:

  TalkService_updateApnsDeviceToken_args(const TalkService_updateApnsDeviceToken_args&);
  TalkService_updateApnsDeviceToken_args& operator=(const TalkService_updateApnsDeviceToken_args&);
  TalkService_updateApnsDeviceToken_args() : apnsDeviceToken() {
  }

  virtual ~TalkService_updateApnsDeviceToken_args() throw();
  std::string apnsDeviceToken;

  _TalkService_updateApnsDeviceToken_args__isset __isset;

  void __set_apnsDeviceToken(const std::string& val);

  bool operator == (const TalkService_updateApnsDeviceToken_args & rhs) const
  {
    if (!(apnsDeviceToken == rhs.apnsDeviceToken))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateApnsDeviceToken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateApnsDeviceToken_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_updateApnsDeviceToken_pargs {
 public:


  virtual ~TalkService_updateApnsDeviceToken_pargs() throw();
  const std::string* apnsDeviceToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateApnsDeviceToken_result__isset {
  _TalkService_updateApnsDeviceToken_result__isset() : e(false) {}
  bool e :1;
} _TalkService_updateApnsDeviceToken_result__isset;

class TalkService_updateApnsDeviceToken_result {
 public:

  TalkService_updateApnsDeviceToken_result(const TalkService_updateApnsDeviceToken_result&);
  TalkService_updateApnsDeviceToken_result& operator=(const TalkService_updateApnsDeviceToken_result&);
  TalkService_updateApnsDeviceToken_result() {
  }

  virtual ~TalkService_updateApnsDeviceToken_result() throw();
  TalkException e;

  _TalkService_updateApnsDeviceToken_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_updateApnsDeviceToken_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateApnsDeviceToken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateApnsDeviceToken_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateApnsDeviceToken_presult__isset {
  _TalkService_updateApnsDeviceToken_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_updateApnsDeviceToken_presult__isset;

class TalkService_updateApnsDeviceToken_presult {
 public:


  virtual ~TalkService_updateApnsDeviceToken_presult() throw();
  TalkException e;

  _TalkService_updateApnsDeviceToken_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_updateBuddySetting_args__isset {
  _TalkService_updateBuddySetting_args__isset() : key(false), value(false) {}
  bool key :1;
  bool value :1;
} _TalkService_updateBuddySetting_args__isset;

class TalkService_updateBuddySetting_args {
 public:

  TalkService_updateBuddySetting_args(const TalkService_updateBuddySetting_args&);
  TalkService_updateBuddySetting_args& operator=(const TalkService_updateBuddySetting_args&);
  TalkService_updateBuddySetting_args() : key(), value() {
  }

  virtual ~TalkService_updateBuddySetting_args() throw();
  std::string key;
  std::string value;

  _TalkService_updateBuddySetting_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const TalkService_updateBuddySetting_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateBuddySetting_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateBuddySetting_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_updateBuddySetting_pargs {
 public:


  virtual ~TalkService_updateBuddySetting_pargs() throw();
  const std::string* key;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateBuddySetting_result__isset {
  _TalkService_updateBuddySetting_result__isset() : e(false) {}
  bool e :1;
} _TalkService_updateBuddySetting_result__isset;

class TalkService_updateBuddySetting_result {
 public:

  TalkService_updateBuddySetting_result(const TalkService_updateBuddySetting_result&);
  TalkService_updateBuddySetting_result& operator=(const TalkService_updateBuddySetting_result&);
  TalkService_updateBuddySetting_result() {
  }

  virtual ~TalkService_updateBuddySetting_result() throw();
  TalkException e;

  _TalkService_updateBuddySetting_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_updateBuddySetting_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateBuddySetting_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateBuddySetting_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateBuddySetting_presult__isset {
  _TalkService_updateBuddySetting_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_updateBuddySetting_presult__isset;

class TalkService_updateBuddySetting_presult {
 public:


  virtual ~TalkService_updateBuddySetting_presult() throw();
  TalkException e;

  _TalkService_updateBuddySetting_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_updateC2DMRegistrationId_args__isset {
  _TalkService_updateC2DMRegistrationId_args__isset() : registrationId(false) {}
  bool registrationId :1;
} _TalkService_updateC2DMRegistrationId_args__isset;

class TalkService_updateC2DMRegistrationId_args {
 public:

  TalkService_updateC2DMRegistrationId_args(const TalkService_updateC2DMRegistrationId_args&);
  TalkService_updateC2DMRegistrationId_args& operator=(const TalkService_updateC2DMRegistrationId_args&);
  TalkService_updateC2DMRegistrationId_args() : registrationId() {
  }

  virtual ~TalkService_updateC2DMRegistrationId_args() throw();
  std::string registrationId;

  _TalkService_updateC2DMRegistrationId_args__isset __isset;

  void __set_registrationId(const std::string& val);

  bool operator == (const TalkService_updateC2DMRegistrationId_args & rhs) const
  {
    if (!(registrationId == rhs.registrationId))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateC2DMRegistrationId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateC2DMRegistrationId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_updateC2DMRegistrationId_pargs {
 public:


  virtual ~TalkService_updateC2DMRegistrationId_pargs() throw();
  const std::string* registrationId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateC2DMRegistrationId_result__isset {
  _TalkService_updateC2DMRegistrationId_result__isset() : e(false) {}
  bool e :1;
} _TalkService_updateC2DMRegistrationId_result__isset;

class TalkService_updateC2DMRegistrationId_result {
 public:

  TalkService_updateC2DMRegistrationId_result(const TalkService_updateC2DMRegistrationId_result&);
  TalkService_updateC2DMRegistrationId_result& operator=(const TalkService_updateC2DMRegistrationId_result&);
  TalkService_updateC2DMRegistrationId_result() {
  }

  virtual ~TalkService_updateC2DMRegistrationId_result() throw();
  TalkException e;

  _TalkService_updateC2DMRegistrationId_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_updateC2DMRegistrationId_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateC2DMRegistrationId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateC2DMRegistrationId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateC2DMRegistrationId_presult__isset {
  _TalkService_updateC2DMRegistrationId_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_updateC2DMRegistrationId_presult__isset;

class TalkService_updateC2DMRegistrationId_presult {
 public:


  virtual ~TalkService_updateC2DMRegistrationId_presult() throw();
  TalkException e;

  _TalkService_updateC2DMRegistrationId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_updateContactSetting_args__isset {
  _TalkService_updateContactSetting_args__isset() : reqSeq(false), mid(false), flag(false), value(false) {}
  bool reqSeq :1;
  bool mid :1;
  bool flag :1;
  bool value :1;
} _TalkService_updateContactSetting_args__isset;

class TalkService_updateContactSetting_args {
 public:

  TalkService_updateContactSetting_args(const TalkService_updateContactSetting_args&);
  TalkService_updateContactSetting_args& operator=(const TalkService_updateContactSetting_args&);
  TalkService_updateContactSetting_args() : reqSeq(0), mid(), flag((ContactSetting::type)0), value() {
  }

  virtual ~TalkService_updateContactSetting_args() throw();
  int32_t reqSeq;
  std::string mid;
  ContactSetting::type flag;
  std::string value;

  _TalkService_updateContactSetting_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_mid(const std::string& val);

  void __set_flag(const ContactSetting::type val);

  void __set_value(const std::string& val);

  bool operator == (const TalkService_updateContactSetting_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(mid == rhs.mid))
      return false;
    if (!(flag == rhs.flag))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateContactSetting_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateContactSetting_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_updateContactSetting_pargs {
 public:


  virtual ~TalkService_updateContactSetting_pargs() throw();
  const int32_t* reqSeq;
  const std::string* mid;
  const ContactSetting::type* flag;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateContactSetting_result__isset {
  _TalkService_updateContactSetting_result__isset() : e(false) {}
  bool e :1;
} _TalkService_updateContactSetting_result__isset;

class TalkService_updateContactSetting_result {
 public:

  TalkService_updateContactSetting_result(const TalkService_updateContactSetting_result&);
  TalkService_updateContactSetting_result& operator=(const TalkService_updateContactSetting_result&);
  TalkService_updateContactSetting_result() {
  }

  virtual ~TalkService_updateContactSetting_result() throw();
  TalkException e;

  _TalkService_updateContactSetting_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_updateContactSetting_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateContactSetting_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateContactSetting_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateContactSetting_presult__isset {
  _TalkService_updateContactSetting_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_updateContactSetting_presult__isset;

class TalkService_updateContactSetting_presult {
 public:


  virtual ~TalkService_updateContactSetting_presult() throw();
  TalkException e;

  _TalkService_updateContactSetting_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_updateCustomModeSettings_args__isset {
  _TalkService_updateCustomModeSettings_args__isset() : customMode(false), paramMap(false) {}
  bool customMode :1;
  bool paramMap :1;
} _TalkService_updateCustomModeSettings_args__isset;

class TalkService_updateCustomModeSettings_args {
 public:

  TalkService_updateCustomModeSettings_args(const TalkService_updateCustomModeSettings_args&);
  TalkService_updateCustomModeSettings_args& operator=(const TalkService_updateCustomModeSettings_args&);
  TalkService_updateCustomModeSettings_args() : customMode((CustomMode::type)0) {
  }

  virtual ~TalkService_updateCustomModeSettings_args() throw();
  CustomMode::type customMode;
  std::map<std::string, std::string>  paramMap;

  _TalkService_updateCustomModeSettings_args__isset __isset;

  void __set_customMode(const CustomMode::type val);

  void __set_paramMap(const std::map<std::string, std::string> & val);

  bool operator == (const TalkService_updateCustomModeSettings_args & rhs) const
  {
    if (!(customMode == rhs.customMode))
      return false;
    if (!(paramMap == rhs.paramMap))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateCustomModeSettings_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateCustomModeSettings_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_updateCustomModeSettings_pargs {
 public:


  virtual ~TalkService_updateCustomModeSettings_pargs() throw();
  const CustomMode::type* customMode;
  const std::map<std::string, std::string> * paramMap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateCustomModeSettings_result__isset {
  _TalkService_updateCustomModeSettings_result__isset() : e(false) {}
  bool e :1;
} _TalkService_updateCustomModeSettings_result__isset;

class TalkService_updateCustomModeSettings_result {
 public:

  TalkService_updateCustomModeSettings_result(const TalkService_updateCustomModeSettings_result&);
  TalkService_updateCustomModeSettings_result& operator=(const TalkService_updateCustomModeSettings_result&);
  TalkService_updateCustomModeSettings_result() {
  }

  virtual ~TalkService_updateCustomModeSettings_result() throw();
  TalkException e;

  _TalkService_updateCustomModeSettings_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_updateCustomModeSettings_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateCustomModeSettings_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateCustomModeSettings_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateCustomModeSettings_presult__isset {
  _TalkService_updateCustomModeSettings_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_updateCustomModeSettings_presult__isset;

class TalkService_updateCustomModeSettings_presult {
 public:


  virtual ~TalkService_updateCustomModeSettings_presult() throw();
  TalkException e;

  _TalkService_updateCustomModeSettings_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_updateDeviceInfo_args__isset {
  _TalkService_updateDeviceInfo_args__isset() : deviceUid(false), deviceInfo(false) {}
  bool deviceUid :1;
  bool deviceInfo :1;
} _TalkService_updateDeviceInfo_args__isset;

class TalkService_updateDeviceInfo_args {
 public:

  TalkService_updateDeviceInfo_args(const TalkService_updateDeviceInfo_args&);
  TalkService_updateDeviceInfo_args& operator=(const TalkService_updateDeviceInfo_args&);
  TalkService_updateDeviceInfo_args() : deviceUid() {
  }

  virtual ~TalkService_updateDeviceInfo_args() throw();
  std::string deviceUid;
  DeviceInfo deviceInfo;

  _TalkService_updateDeviceInfo_args__isset __isset;

  void __set_deviceUid(const std::string& val);

  void __set_deviceInfo(const DeviceInfo& val);

  bool operator == (const TalkService_updateDeviceInfo_args & rhs) const
  {
    if (!(deviceUid == rhs.deviceUid))
      return false;
    if (!(deviceInfo == rhs.deviceInfo))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateDeviceInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateDeviceInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_updateDeviceInfo_pargs {
 public:


  virtual ~TalkService_updateDeviceInfo_pargs() throw();
  const std::string* deviceUid;
  const DeviceInfo* deviceInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateDeviceInfo_result__isset {
  _TalkService_updateDeviceInfo_result__isset() : e(false) {}
  bool e :1;
} _TalkService_updateDeviceInfo_result__isset;

class TalkService_updateDeviceInfo_result {
 public:

  TalkService_updateDeviceInfo_result(const TalkService_updateDeviceInfo_result&);
  TalkService_updateDeviceInfo_result& operator=(const TalkService_updateDeviceInfo_result&);
  TalkService_updateDeviceInfo_result() {
  }

  virtual ~TalkService_updateDeviceInfo_result() throw();
  TalkException e;

  _TalkService_updateDeviceInfo_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_updateDeviceInfo_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateDeviceInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateDeviceInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateDeviceInfo_presult__isset {
  _TalkService_updateDeviceInfo_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_updateDeviceInfo_presult__isset;

class TalkService_updateDeviceInfo_presult {
 public:


  virtual ~TalkService_updateDeviceInfo_presult() throw();
  TalkException e;

  _TalkService_updateDeviceInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_updateGroup_args__isset {
  _TalkService_updateGroup_args__isset() : reqSeq(false), group(false) {}
  bool reqSeq :1;
  bool group :1;
} _TalkService_updateGroup_args__isset;

class TalkService_updateGroup_args {
 public:

  TalkService_updateGroup_args(const TalkService_updateGroup_args&);
  TalkService_updateGroup_args& operator=(const TalkService_updateGroup_args&);
  TalkService_updateGroup_args() : reqSeq(0) {
  }

  virtual ~TalkService_updateGroup_args() throw();
  int32_t reqSeq;
  Group group;

  _TalkService_updateGroup_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_group(const Group& val);

  bool operator == (const TalkService_updateGroup_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(group == rhs.group))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_updateGroup_pargs {
 public:


  virtual ~TalkService_updateGroup_pargs() throw();
  const int32_t* reqSeq;
  const Group* group;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateGroup_result__isset {
  _TalkService_updateGroup_result__isset() : e(false) {}
  bool e :1;
} _TalkService_updateGroup_result__isset;

class TalkService_updateGroup_result {
 public:

  TalkService_updateGroup_result(const TalkService_updateGroup_result&);
  TalkService_updateGroup_result& operator=(const TalkService_updateGroup_result&);
  TalkService_updateGroup_result() {
  }

  virtual ~TalkService_updateGroup_result() throw();
  TalkException e;

  _TalkService_updateGroup_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_updateGroup_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateGroup_presult__isset {
  _TalkService_updateGroup_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_updateGroup_presult__isset;

class TalkService_updateGroup_presult {
 public:


  virtual ~TalkService_updateGroup_presult() throw();
  TalkException e;

  _TalkService_updateGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_updateNotificationToken_args__isset {
  _TalkService_updateNotificationToken_args__isset() : type(false), token(false) {}
  bool type :1;
  bool token :1;
} _TalkService_updateNotificationToken_args__isset;

class TalkService_updateNotificationToken_args {
 public:

  TalkService_updateNotificationToken_args(const TalkService_updateNotificationToken_args&);
  TalkService_updateNotificationToken_args& operator=(const TalkService_updateNotificationToken_args&);
  TalkService_updateNotificationToken_args() : type((NotificationType::type)0), token() {
  }

  virtual ~TalkService_updateNotificationToken_args() throw();
  NotificationType::type type;
  std::string token;

  _TalkService_updateNotificationToken_args__isset __isset;

  void __set_type(const NotificationType::type val);

  void __set_token(const std::string& val);

  bool operator == (const TalkService_updateNotificationToken_args & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateNotificationToken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateNotificationToken_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_updateNotificationToken_pargs {
 public:


  virtual ~TalkService_updateNotificationToken_pargs() throw();
  const NotificationType::type* type;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateNotificationToken_result__isset {
  _TalkService_updateNotificationToken_result__isset() : e(false) {}
  bool e :1;
} _TalkService_updateNotificationToken_result__isset;

class TalkService_updateNotificationToken_result {
 public:

  TalkService_updateNotificationToken_result(const TalkService_updateNotificationToken_result&);
  TalkService_updateNotificationToken_result& operator=(const TalkService_updateNotificationToken_result&);
  TalkService_updateNotificationToken_result() {
  }

  virtual ~TalkService_updateNotificationToken_result() throw();
  TalkException e;

  _TalkService_updateNotificationToken_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_updateNotificationToken_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateNotificationToken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateNotificationToken_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateNotificationToken_presult__isset {
  _TalkService_updateNotificationToken_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_updateNotificationToken_presult__isset;

class TalkService_updateNotificationToken_presult {
 public:


  virtual ~TalkService_updateNotificationToken_presult() throw();
  TalkException e;

  _TalkService_updateNotificationToken_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_updateNotificationTokenWithBytes_args__isset {
  _TalkService_updateNotificationTokenWithBytes_args__isset() : type(false), token(false) {}
  bool type :1;
  bool token :1;
} _TalkService_updateNotificationTokenWithBytes_args__isset;

class TalkService_updateNotificationTokenWithBytes_args {
 public:

  TalkService_updateNotificationTokenWithBytes_args(const TalkService_updateNotificationTokenWithBytes_args&);
  TalkService_updateNotificationTokenWithBytes_args& operator=(const TalkService_updateNotificationTokenWithBytes_args&);
  TalkService_updateNotificationTokenWithBytes_args() : type((NotificationType::type)0), token() {
  }

  virtual ~TalkService_updateNotificationTokenWithBytes_args() throw();
  NotificationType::type type;
  std::string token;

  _TalkService_updateNotificationTokenWithBytes_args__isset __isset;

  void __set_type(const NotificationType::type val);

  void __set_token(const std::string& val);

  bool operator == (const TalkService_updateNotificationTokenWithBytes_args & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateNotificationTokenWithBytes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateNotificationTokenWithBytes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_updateNotificationTokenWithBytes_pargs {
 public:


  virtual ~TalkService_updateNotificationTokenWithBytes_pargs() throw();
  const NotificationType::type* type;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateNotificationTokenWithBytes_result__isset {
  _TalkService_updateNotificationTokenWithBytes_result__isset() : e(false) {}
  bool e :1;
} _TalkService_updateNotificationTokenWithBytes_result__isset;

class TalkService_updateNotificationTokenWithBytes_result {
 public:

  TalkService_updateNotificationTokenWithBytes_result(const TalkService_updateNotificationTokenWithBytes_result&);
  TalkService_updateNotificationTokenWithBytes_result& operator=(const TalkService_updateNotificationTokenWithBytes_result&);
  TalkService_updateNotificationTokenWithBytes_result() {
  }

  virtual ~TalkService_updateNotificationTokenWithBytes_result() throw();
  TalkException e;

  _TalkService_updateNotificationTokenWithBytes_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_updateNotificationTokenWithBytes_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateNotificationTokenWithBytes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateNotificationTokenWithBytes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateNotificationTokenWithBytes_presult__isset {
  _TalkService_updateNotificationTokenWithBytes_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_updateNotificationTokenWithBytes_presult__isset;

class TalkService_updateNotificationTokenWithBytes_presult {
 public:


  virtual ~TalkService_updateNotificationTokenWithBytes_presult() throw();
  TalkException e;

  _TalkService_updateNotificationTokenWithBytes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_updateProfile_args__isset {
  _TalkService_updateProfile_args__isset() : reqSeq(false), profile(false) {}
  bool reqSeq :1;
  bool profile :1;
} _TalkService_updateProfile_args__isset;

class TalkService_updateProfile_args {
 public:

  TalkService_updateProfile_args(const TalkService_updateProfile_args&);
  TalkService_updateProfile_args& operator=(const TalkService_updateProfile_args&);
  TalkService_updateProfile_args() : reqSeq(0) {
  }

  virtual ~TalkService_updateProfile_args() throw();
  int32_t reqSeq;
  Profile profile;

  _TalkService_updateProfile_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_profile(const Profile& val);

  bool operator == (const TalkService_updateProfile_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(profile == rhs.profile))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_updateProfile_pargs {
 public:


  virtual ~TalkService_updateProfile_pargs() throw();
  const int32_t* reqSeq;
  const Profile* profile;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateProfile_result__isset {
  _TalkService_updateProfile_result__isset() : e(false) {}
  bool e :1;
} _TalkService_updateProfile_result__isset;

class TalkService_updateProfile_result {
 public:

  TalkService_updateProfile_result(const TalkService_updateProfile_result&);
  TalkService_updateProfile_result& operator=(const TalkService_updateProfile_result&);
  TalkService_updateProfile_result() {
  }

  virtual ~TalkService_updateProfile_result() throw();
  TalkException e;

  _TalkService_updateProfile_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_updateProfile_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateProfile_presult__isset {
  _TalkService_updateProfile_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_updateProfile_presult__isset;

class TalkService_updateProfile_presult {
 public:


  virtual ~TalkService_updateProfile_presult() throw();
  TalkException e;

  _TalkService_updateProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_updateProfileAttribute_args__isset {
  _TalkService_updateProfileAttribute_args__isset() : reqSeq(false), attr(false), value(false) {}
  bool reqSeq :1;
  bool attr :1;
  bool value :1;
} _TalkService_updateProfileAttribute_args__isset;

class TalkService_updateProfileAttribute_args {
 public:

  TalkService_updateProfileAttribute_args(const TalkService_updateProfileAttribute_args&);
  TalkService_updateProfileAttribute_args& operator=(const TalkService_updateProfileAttribute_args&);
  TalkService_updateProfileAttribute_args() : reqSeq(0), attr((ProfileAttribute::type)0), value() {
  }

  virtual ~TalkService_updateProfileAttribute_args() throw();
  int32_t reqSeq;
  ProfileAttribute::type attr;
  std::string value;

  _TalkService_updateProfileAttribute_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_attr(const ProfileAttribute::type val);

  void __set_value(const std::string& val);

  bool operator == (const TalkService_updateProfileAttribute_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(attr == rhs.attr))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateProfileAttribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateProfileAttribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_updateProfileAttribute_pargs {
 public:


  virtual ~TalkService_updateProfileAttribute_pargs() throw();
  const int32_t* reqSeq;
  const ProfileAttribute::type* attr;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateProfileAttribute_result__isset {
  _TalkService_updateProfileAttribute_result__isset() : e(false) {}
  bool e :1;
} _TalkService_updateProfileAttribute_result__isset;

class TalkService_updateProfileAttribute_result {
 public:

  TalkService_updateProfileAttribute_result(const TalkService_updateProfileAttribute_result&);
  TalkService_updateProfileAttribute_result& operator=(const TalkService_updateProfileAttribute_result&);
  TalkService_updateProfileAttribute_result() {
  }

  virtual ~TalkService_updateProfileAttribute_result() throw();
  TalkException e;

  _TalkService_updateProfileAttribute_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_updateProfileAttribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateProfileAttribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateProfileAttribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateProfileAttribute_presult__isset {
  _TalkService_updateProfileAttribute_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_updateProfileAttribute_presult__isset;

class TalkService_updateProfileAttribute_presult {
 public:


  virtual ~TalkService_updateProfileAttribute_presult() throw();
  TalkException e;

  _TalkService_updateProfileAttribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_updateProfileAttributes_args__isset {
  _TalkService_updateProfileAttributes_args__isset() : reqSeq(false), request(false) {}
  bool reqSeq :1;
  bool request :1;
} _TalkService_updateProfileAttributes_args__isset;

class TalkService_updateProfileAttributes_args {
 public:

  TalkService_updateProfileAttributes_args(const TalkService_updateProfileAttributes_args&);
  TalkService_updateProfileAttributes_args& operator=(const TalkService_updateProfileAttributes_args&);
  TalkService_updateProfileAttributes_args() : reqSeq(0) {
  }

  virtual ~TalkService_updateProfileAttributes_args() throw();
  int32_t reqSeq;
  UpdateProfileAttributesRequest request;

  _TalkService_updateProfileAttributes_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_request(const UpdateProfileAttributesRequest& val);

  bool operator == (const TalkService_updateProfileAttributes_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateProfileAttributes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateProfileAttributes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_updateProfileAttributes_pargs {
 public:


  virtual ~TalkService_updateProfileAttributes_pargs() throw();
  const int32_t* reqSeq;
  const UpdateProfileAttributesRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_updateProfileAttributes_result {
 public:

  TalkService_updateProfileAttributes_result(const TalkService_updateProfileAttributes_result&);
  TalkService_updateProfileAttributes_result& operator=(const TalkService_updateProfileAttributes_result&);
  TalkService_updateProfileAttributes_result() {
  }

  virtual ~TalkService_updateProfileAttributes_result() throw();

  bool operator == (const TalkService_updateProfileAttributes_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TalkService_updateProfileAttributes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateProfileAttributes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_updateProfileAttributes_presult {
 public:


  virtual ~TalkService_updateProfileAttributes_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_updateRegion_args__isset {
  _TalkService_updateRegion_args__isset() : region(false) {}
  bool region :1;
} _TalkService_updateRegion_args__isset;

class TalkService_updateRegion_args {
 public:

  TalkService_updateRegion_args(const TalkService_updateRegion_args&);
  TalkService_updateRegion_args& operator=(const TalkService_updateRegion_args&);
  TalkService_updateRegion_args() : region() {
  }

  virtual ~TalkService_updateRegion_args() throw();
  std::string region;

  _TalkService_updateRegion_args__isset __isset;

  void __set_region(const std::string& val);

  bool operator == (const TalkService_updateRegion_args & rhs) const
  {
    if (!(region == rhs.region))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateRegion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateRegion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_updateRegion_pargs {
 public:


  virtual ~TalkService_updateRegion_pargs() throw();
  const std::string* region;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateRegion_result__isset {
  _TalkService_updateRegion_result__isset() : e(false) {}
  bool e :1;
} _TalkService_updateRegion_result__isset;

class TalkService_updateRegion_result {
 public:

  TalkService_updateRegion_result(const TalkService_updateRegion_result&);
  TalkService_updateRegion_result& operator=(const TalkService_updateRegion_result&);
  TalkService_updateRegion_result() {
  }

  virtual ~TalkService_updateRegion_result() throw();
  TalkException e;

  _TalkService_updateRegion_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_updateRegion_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateRegion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateRegion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateRegion_presult__isset {
  _TalkService_updateRegion_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_updateRegion_presult__isset;

class TalkService_updateRegion_presult {
 public:


  virtual ~TalkService_updateRegion_presult() throw();
  TalkException e;

  _TalkService_updateRegion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_updateSettings_args__isset {
  _TalkService_updateSettings_args__isset() : reqSeq(false), settings(false) {}
  bool reqSeq :1;
  bool settings :1;
} _TalkService_updateSettings_args__isset;

class TalkService_updateSettings_args {
 public:

  TalkService_updateSettings_args(const TalkService_updateSettings_args&);
  TalkService_updateSettings_args& operator=(const TalkService_updateSettings_args&);
  TalkService_updateSettings_args() : reqSeq(0) {
  }

  virtual ~TalkService_updateSettings_args() throw();
  int32_t reqSeq;
  Settings settings;

  _TalkService_updateSettings_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_settings(const Settings& val);

  bool operator == (const TalkService_updateSettings_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(settings == rhs.settings))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateSettings_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateSettings_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_updateSettings_pargs {
 public:


  virtual ~TalkService_updateSettings_pargs() throw();
  const int32_t* reqSeq;
  const Settings* settings;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateSettings_result__isset {
  _TalkService_updateSettings_result__isset() : e(false) {}
  bool e :1;
} _TalkService_updateSettings_result__isset;

class TalkService_updateSettings_result {
 public:

  TalkService_updateSettings_result(const TalkService_updateSettings_result&);
  TalkService_updateSettings_result& operator=(const TalkService_updateSettings_result&);
  TalkService_updateSettings_result() {
  }

  virtual ~TalkService_updateSettings_result() throw();
  TalkException e;

  _TalkService_updateSettings_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_updateSettings_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateSettings_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateSettings_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateSettings_presult__isset {
  _TalkService_updateSettings_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_updateSettings_presult__isset;

class TalkService_updateSettings_presult {
 public:


  virtual ~TalkService_updateSettings_presult() throw();
  TalkException e;

  _TalkService_updateSettings_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_updateSettings2_args__isset {
  _TalkService_updateSettings2_args__isset() : reqSeq(false), settings(false) {}
  bool reqSeq :1;
  bool settings :1;
} _TalkService_updateSettings2_args__isset;

class TalkService_updateSettings2_args {
 public:

  TalkService_updateSettings2_args(const TalkService_updateSettings2_args&);
  TalkService_updateSettings2_args& operator=(const TalkService_updateSettings2_args&);
  TalkService_updateSettings2_args() : reqSeq(0) {
  }

  virtual ~TalkService_updateSettings2_args() throw();
  int32_t reqSeq;
  Settings settings;

  _TalkService_updateSettings2_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_settings(const Settings& val);

  bool operator == (const TalkService_updateSettings2_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(settings == rhs.settings))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateSettings2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateSettings2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_updateSettings2_pargs {
 public:


  virtual ~TalkService_updateSettings2_pargs() throw();
  const int32_t* reqSeq;
  const Settings* settings;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateSettings2_result__isset {
  _TalkService_updateSettings2_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_updateSettings2_result__isset;

class TalkService_updateSettings2_result {
 public:

  TalkService_updateSettings2_result(const TalkService_updateSettings2_result&);
  TalkService_updateSettings2_result& operator=(const TalkService_updateSettings2_result&);
  TalkService_updateSettings2_result() : success(0) {
  }

  virtual ~TalkService_updateSettings2_result() throw();
  int32_t success;
  TalkException e;

  _TalkService_updateSettings2_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_updateSettings2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateSettings2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateSettings2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateSettings2_presult__isset {
  _TalkService_updateSettings2_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_updateSettings2_presult__isset;

class TalkService_updateSettings2_presult {
 public:


  virtual ~TalkService_updateSettings2_presult() throw();
  int32_t* success;
  TalkException e;

  _TalkService_updateSettings2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_updateSettingsAttribute_args__isset {
  _TalkService_updateSettingsAttribute_args__isset() : reqSeq(false), attr(false), value(false) {}
  bool reqSeq :1;
  bool attr :1;
  bool value :1;
} _TalkService_updateSettingsAttribute_args__isset;

class TalkService_updateSettingsAttribute_args {
 public:

  TalkService_updateSettingsAttribute_args(const TalkService_updateSettingsAttribute_args&);
  TalkService_updateSettingsAttribute_args& operator=(const TalkService_updateSettingsAttribute_args&);
  TalkService_updateSettingsAttribute_args() : reqSeq(0), attr((SettingsAttribute::type)0), value() {
  }

  virtual ~TalkService_updateSettingsAttribute_args() throw();
  int32_t reqSeq;
  SettingsAttribute::type attr;
  std::string value;

  _TalkService_updateSettingsAttribute_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_attr(const SettingsAttribute::type val);

  void __set_value(const std::string& val);

  bool operator == (const TalkService_updateSettingsAttribute_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(attr == rhs.attr))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateSettingsAttribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateSettingsAttribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_updateSettingsAttribute_pargs {
 public:


  virtual ~TalkService_updateSettingsAttribute_pargs() throw();
  const int32_t* reqSeq;
  const SettingsAttribute::type* attr;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateSettingsAttribute_result__isset {
  _TalkService_updateSettingsAttribute_result__isset() : e(false) {}
  bool e :1;
} _TalkService_updateSettingsAttribute_result__isset;

class TalkService_updateSettingsAttribute_result {
 public:

  TalkService_updateSettingsAttribute_result(const TalkService_updateSettingsAttribute_result&);
  TalkService_updateSettingsAttribute_result& operator=(const TalkService_updateSettingsAttribute_result&);
  TalkService_updateSettingsAttribute_result() {
  }

  virtual ~TalkService_updateSettingsAttribute_result() throw();
  TalkException e;

  _TalkService_updateSettingsAttribute_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_updateSettingsAttribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateSettingsAttribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateSettingsAttribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateSettingsAttribute_presult__isset {
  _TalkService_updateSettingsAttribute_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_updateSettingsAttribute_presult__isset;

class TalkService_updateSettingsAttribute_presult {
 public:


  virtual ~TalkService_updateSettingsAttribute_presult() throw();
  TalkException e;

  _TalkService_updateSettingsAttribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_updateSettingsAttributes_args__isset {
  _TalkService_updateSettingsAttributes_args__isset() : reqSeq(false), attrBitset(false), settings(false) {}
  bool reqSeq :1;
  bool attrBitset :1;
  bool settings :1;
} _TalkService_updateSettingsAttributes_args__isset;

class TalkService_updateSettingsAttributes_args {
 public:

  TalkService_updateSettingsAttributes_args(const TalkService_updateSettingsAttributes_args&);
  TalkService_updateSettingsAttributes_args& operator=(const TalkService_updateSettingsAttributes_args&);
  TalkService_updateSettingsAttributes_args() : reqSeq(0), attrBitset(0) {
  }

  virtual ~TalkService_updateSettingsAttributes_args() throw();
  int32_t reqSeq;
  int32_t attrBitset;
  Settings settings;

  _TalkService_updateSettingsAttributes_args__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_attrBitset(const int32_t val);

  void __set_settings(const Settings& val);

  bool operator == (const TalkService_updateSettingsAttributes_args & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(attrBitset == rhs.attrBitset))
      return false;
    if (!(settings == rhs.settings))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateSettingsAttributes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateSettingsAttributes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_updateSettingsAttributes_pargs {
 public:


  virtual ~TalkService_updateSettingsAttributes_pargs() throw();
  const int32_t* reqSeq;
  const int32_t* attrBitset;
  const Settings* settings;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateSettingsAttributes_result__isset {
  _TalkService_updateSettingsAttributes_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_updateSettingsAttributes_result__isset;

class TalkService_updateSettingsAttributes_result {
 public:

  TalkService_updateSettingsAttributes_result(const TalkService_updateSettingsAttributes_result&);
  TalkService_updateSettingsAttributes_result& operator=(const TalkService_updateSettingsAttributes_result&);
  TalkService_updateSettingsAttributes_result() : success(0) {
  }

  virtual ~TalkService_updateSettingsAttributes_result() throw();
  int32_t success;
  TalkException e;

  _TalkService_updateSettingsAttributes_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_updateSettingsAttributes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_updateSettingsAttributes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_updateSettingsAttributes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_updateSettingsAttributes_presult__isset {
  _TalkService_updateSettingsAttributes_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_updateSettingsAttributes_presult__isset;

class TalkService_updateSettingsAttributes_presult {
 public:


  virtual ~TalkService_updateSettingsAttributes_presult() throw();
  int32_t* success;
  TalkException e;

  _TalkService_updateSettingsAttributes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_verifyIdentityCredential_args__isset {
  _TalkService_verifyIdentityCredential_args__isset() : identityProvider(false), identifier(false), password(false) {}
  bool identityProvider :1;
  bool identifier :1;
  bool password :1;
} _TalkService_verifyIdentityCredential_args__isset;

class TalkService_verifyIdentityCredential_args {
 public:

  TalkService_verifyIdentityCredential_args(const TalkService_verifyIdentityCredential_args&);
  TalkService_verifyIdentityCredential_args& operator=(const TalkService_verifyIdentityCredential_args&);
  TalkService_verifyIdentityCredential_args() : identityProvider((IdentityProvider::type)0), identifier(), password() {
  }

  virtual ~TalkService_verifyIdentityCredential_args() throw();
  IdentityProvider::type identityProvider;
  std::string identifier;
  std::string password;

  _TalkService_verifyIdentityCredential_args__isset __isset;

  void __set_identityProvider(const IdentityProvider::type val);

  void __set_identifier(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const TalkService_verifyIdentityCredential_args & rhs) const
  {
    if (!(identityProvider == rhs.identityProvider))
      return false;
    if (!(identifier == rhs.identifier))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const TalkService_verifyIdentityCredential_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_verifyIdentityCredential_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_verifyIdentityCredential_pargs {
 public:


  virtual ~TalkService_verifyIdentityCredential_pargs() throw();
  const IdentityProvider::type* identityProvider;
  const std::string* identifier;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_verifyIdentityCredential_result__isset {
  _TalkService_verifyIdentityCredential_result__isset() : e(false) {}
  bool e :1;
} _TalkService_verifyIdentityCredential_result__isset;

class TalkService_verifyIdentityCredential_result {
 public:

  TalkService_verifyIdentityCredential_result(const TalkService_verifyIdentityCredential_result&);
  TalkService_verifyIdentityCredential_result& operator=(const TalkService_verifyIdentityCredential_result&);
  TalkService_verifyIdentityCredential_result() {
  }

  virtual ~TalkService_verifyIdentityCredential_result() throw();
  TalkException e;

  _TalkService_verifyIdentityCredential_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_verifyIdentityCredential_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_verifyIdentityCredential_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_verifyIdentityCredential_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_verifyIdentityCredential_presult__isset {
  _TalkService_verifyIdentityCredential_presult__isset() : e(false) {}
  bool e :1;
} _TalkService_verifyIdentityCredential_presult__isset;

class TalkService_verifyIdentityCredential_presult {
 public:


  virtual ~TalkService_verifyIdentityCredential_presult() throw();
  TalkException e;

  _TalkService_verifyIdentityCredential_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_verifyIdentityCredentialWithResult_args__isset {
  _TalkService_verifyIdentityCredentialWithResult_args__isset() : identityCredential(false) {}
  bool identityCredential :1;
} _TalkService_verifyIdentityCredentialWithResult_args__isset;

class TalkService_verifyIdentityCredentialWithResult_args {
 public:

  TalkService_verifyIdentityCredentialWithResult_args(const TalkService_verifyIdentityCredentialWithResult_args&);
  TalkService_verifyIdentityCredentialWithResult_args& operator=(const TalkService_verifyIdentityCredentialWithResult_args&);
  TalkService_verifyIdentityCredentialWithResult_args() {
  }

  virtual ~TalkService_verifyIdentityCredentialWithResult_args() throw();
  IdentityCredential identityCredential;

  _TalkService_verifyIdentityCredentialWithResult_args__isset __isset;

  void __set_identityCredential(const IdentityCredential& val);

  bool operator == (const TalkService_verifyIdentityCredentialWithResult_args & rhs) const
  {
    if (!(identityCredential == rhs.identityCredential))
      return false;
    return true;
  }
  bool operator != (const TalkService_verifyIdentityCredentialWithResult_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_verifyIdentityCredentialWithResult_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_verifyIdentityCredentialWithResult_pargs {
 public:


  virtual ~TalkService_verifyIdentityCredentialWithResult_pargs() throw();
  const IdentityCredential* identityCredential;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_verifyIdentityCredentialWithResult_result__isset {
  _TalkService_verifyIdentityCredentialWithResult_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_verifyIdentityCredentialWithResult_result__isset;

class TalkService_verifyIdentityCredentialWithResult_result {
 public:

  TalkService_verifyIdentityCredentialWithResult_result(const TalkService_verifyIdentityCredentialWithResult_result&);
  TalkService_verifyIdentityCredentialWithResult_result& operator=(const TalkService_verifyIdentityCredentialWithResult_result&);
  TalkService_verifyIdentityCredentialWithResult_result() {
  }

  virtual ~TalkService_verifyIdentityCredentialWithResult_result() throw();
  UserAuthStatus success;
  TalkException e;

  _TalkService_verifyIdentityCredentialWithResult_result__isset __isset;

  void __set_success(const UserAuthStatus& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_verifyIdentityCredentialWithResult_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_verifyIdentityCredentialWithResult_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_verifyIdentityCredentialWithResult_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_verifyIdentityCredentialWithResult_presult__isset {
  _TalkService_verifyIdentityCredentialWithResult_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_verifyIdentityCredentialWithResult_presult__isset;

class TalkService_verifyIdentityCredentialWithResult_presult {
 public:


  virtual ~TalkService_verifyIdentityCredentialWithResult_presult() throw();
  UserAuthStatus* success;
  TalkException e;

  _TalkService_verifyIdentityCredentialWithResult_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_verifyPhone_args__isset {
  _TalkService_verifyPhone_args__isset() : sessionId(false), pinCode(false), udidHash(false) {}
  bool sessionId :1;
  bool pinCode :1;
  bool udidHash :1;
} _TalkService_verifyPhone_args__isset;

class TalkService_verifyPhone_args {
 public:

  TalkService_verifyPhone_args(const TalkService_verifyPhone_args&);
  TalkService_verifyPhone_args& operator=(const TalkService_verifyPhone_args&);
  TalkService_verifyPhone_args() : sessionId(), pinCode(), udidHash() {
  }

  virtual ~TalkService_verifyPhone_args() throw();
  std::string sessionId;
  std::string pinCode;
  std::string udidHash;

  _TalkService_verifyPhone_args__isset __isset;

  void __set_sessionId(const std::string& val);

  void __set_pinCode(const std::string& val);

  void __set_udidHash(const std::string& val);

  bool operator == (const TalkService_verifyPhone_args & rhs) const
  {
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(pinCode == rhs.pinCode))
      return false;
    if (!(udidHash == rhs.udidHash))
      return false;
    return true;
  }
  bool operator != (const TalkService_verifyPhone_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_verifyPhone_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_verifyPhone_pargs {
 public:


  virtual ~TalkService_verifyPhone_pargs() throw();
  const std::string* sessionId;
  const std::string* pinCode;
  const std::string* udidHash;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_verifyPhone_result__isset {
  _TalkService_verifyPhone_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_verifyPhone_result__isset;

class TalkService_verifyPhone_result {
 public:

  TalkService_verifyPhone_result(const TalkService_verifyPhone_result&);
  TalkService_verifyPhone_result& operator=(const TalkService_verifyPhone_result&);
  TalkService_verifyPhone_result() : success((VerificationResult::type)0) {
  }

  virtual ~TalkService_verifyPhone_result() throw();
  VerificationResult::type success;
  TalkException e;

  _TalkService_verifyPhone_result__isset __isset;

  void __set_success(const VerificationResult::type val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_verifyPhone_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_verifyPhone_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_verifyPhone_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_verifyPhone_presult__isset {
  _TalkService_verifyPhone_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_verifyPhone_presult__isset;

class TalkService_verifyPhone_presult {
 public:


  virtual ~TalkService_verifyPhone_presult() throw();
  VerificationResult::type* success;
  TalkException e;

  _TalkService_verifyPhone_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TalkService_verifyQrcode_args__isset {
  _TalkService_verifyQrcode_args__isset() : verifier(false), pinCode(false) {}
  bool verifier :1;
  bool pinCode :1;
} _TalkService_verifyQrcode_args__isset;

class TalkService_verifyQrcode_args {
 public:

  TalkService_verifyQrcode_args(const TalkService_verifyQrcode_args&);
  TalkService_verifyQrcode_args& operator=(const TalkService_verifyQrcode_args&);
  TalkService_verifyQrcode_args() : verifier(), pinCode() {
  }

  virtual ~TalkService_verifyQrcode_args() throw();
  std::string verifier;
  std::string pinCode;

  _TalkService_verifyQrcode_args__isset __isset;

  void __set_verifier(const std::string& val);

  void __set_pinCode(const std::string& val);

  bool operator == (const TalkService_verifyQrcode_args & rhs) const
  {
    if (!(verifier == rhs.verifier))
      return false;
    if (!(pinCode == rhs.pinCode))
      return false;
    return true;
  }
  bool operator != (const TalkService_verifyQrcode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_verifyQrcode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TalkService_verifyQrcode_pargs {
 public:


  virtual ~TalkService_verifyQrcode_pargs() throw();
  const std::string* verifier;
  const std::string* pinCode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_verifyQrcode_result__isset {
  _TalkService_verifyQrcode_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_verifyQrcode_result__isset;

class TalkService_verifyQrcode_result {
 public:

  TalkService_verifyQrcode_result(const TalkService_verifyQrcode_result&);
  TalkService_verifyQrcode_result& operator=(const TalkService_verifyQrcode_result&);
  TalkService_verifyQrcode_result() : success() {
  }

  virtual ~TalkService_verifyQrcode_result() throw();
  std::string success;
  TalkException e;

  _TalkService_verifyQrcode_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TalkException& val);

  bool operator == (const TalkService_verifyQrcode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const TalkService_verifyQrcode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkService_verifyQrcode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TalkService_verifyQrcode_presult__isset {
  _TalkService_verifyQrcode_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _TalkService_verifyQrcode_presult__isset;

class TalkService_verifyQrcode_presult {
 public:


  virtual ~TalkService_verifyQrcode_presult() throw();
  std::string* success;
  TalkException e;

  _TalkService_verifyQrcode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TalkServiceClient : virtual public TalkServiceIf {
 public:
  TalkServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TalkServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void searchCollection(SearchResult& _return, const std::string& query, const SearchPagingParameter& param);
  void send_searchCollection(const std::string& query, const SearchPagingParameter& param);
  void recv_searchCollection(SearchResult& _return);
  void getChatRoomAnnouncementsBulk(std::map<std::string, std::vector<ChatRoomAnnouncement> > & _return, const std::vector<std::string> & chatRoomMids);
  void send_getChatRoomAnnouncementsBulk(const std::vector<std::string> & chatRoomMids);
  void recv_getChatRoomAnnouncementsBulk(std::map<std::string, std::vector<ChatRoomAnnouncement> > & _return);
  void getChatRoomAnnouncements(std::vector<ChatRoomAnnouncement> & _return, const std::string& chatRoomMid);
  void send_getChatRoomAnnouncements(const std::string& chatRoomMid);
  void recv_getChatRoomAnnouncements(std::vector<ChatRoomAnnouncement> & _return);
  void createChatRoomAnnouncement(ChatRoomAnnouncement& _return, const int32_t reqSeq, const std::string& chatRoomMid, const ChatRoomAnnouncementType::type type, const ChatRoomAnnouncementContents& contents);
  void send_createChatRoomAnnouncement(const int32_t reqSeq, const std::string& chatRoomMid, const ChatRoomAnnouncementType::type type, const ChatRoomAnnouncementContents& contents);
  void recv_createChatRoomAnnouncement(ChatRoomAnnouncement& _return);
  void removeChatRoomAnnouncement(const int32_t reqSeq, const std::string& chatRoomMid, const int64_t announcementSeq);
  void send_removeChatRoomAnnouncement(const int32_t reqSeq, const std::string& chatRoomMid, const int64_t announcementSeq);
  void recv_removeChatRoomAnnouncement();
  void unsendMessage(const int32_t seq, const std::string& messageId);
  void send_unsendMessage(const int32_t seq, const std::string& messageId);
  void recv_unsendMessage();
  void getGroupWithoutMembers(Group& _return, const std::string& groupId);
  void send_getGroupWithoutMembers(const std::string& groupId);
  void recv_getGroupWithoutMembers(Group& _return);
  void requestResendMessage(const int32_t reqSeq, const std::string& senderMid, const std::string& messageId);
  void send_requestResendMessage(const int32_t reqSeq, const std::string& senderMid, const std::string& messageId);
  void recv_requestResendMessage();
  void respondResendMessage(const int32_t reqSeq, const std::string& receiverMid, const std::string& originalMessageId, const Message& resendMessage, const ErrorCode::type errorCode);
  void send_respondResendMessage(const int32_t reqSeq, const std::string& receiverMid, const std::string& originalMessageId, const Message& resendMessage, const ErrorCode::type errorCode);
  void recv_respondResendMessage();
  void acceptGroupInvitation(const int32_t reqSeq, const std::string& groupId);
  void send_acceptGroupInvitation(const int32_t reqSeq, const std::string& groupId);
  void recv_acceptGroupInvitation();
  void acceptGroupInvitationByTicket(const int32_t reqSeq, const std::string& GroupMid, const std::string& ticketId);
  void send_acceptGroupInvitationByTicket(const int32_t reqSeq, const std::string& GroupMid, const std::string& ticketId);
  void recv_acceptGroupInvitationByTicket();
  void acceptProximityMatches(const std::string& sessionId, const std::set<std::string> & ids);
  void send_acceptProximityMatches(const std::string& sessionId, const std::set<std::string> & ids);
  void recv_acceptProximityMatches();
  void acquireCallRoute(std::vector<std::string> & _return, const std::string& to);
  void send_acquireCallRoute(const std::string& to);
  void recv_acquireCallRoute(std::vector<std::string> & _return);
  void acquireCallTicket(std::string& _return, const std::string& to);
  void send_acquireCallTicket(const std::string& to);
  void recv_acquireCallTicket(std::string& _return);
  void acquireEncryptedAccessToken(std::string& _return, const FeatureType::type featureType);
  void send_acquireEncryptedAccessToken(const FeatureType::type featureType);
  void recv_acquireEncryptedAccessToken(std::string& _return);
  void addSnsId(std::string& _return, const SnsIdType::type snsIdType, const std::string& snsAccessToken);
  void send_addSnsId(const SnsIdType::type snsIdType, const std::string& snsAccessToken);
  void recv_addSnsId(std::string& _return);
  void blockContact(const int32_t reqSeq, const std::string& id);
  void send_blockContact(const int32_t reqSeq, const std::string& id);
  void recv_blockContact();
  void blockRecommendation(const int32_t reqSeq, const std::string& id);
  void send_blockRecommendation(const int32_t reqSeq, const std::string& id);
  void recv_blockRecommendation();
  void cancelGroupInvitation(const int32_t reqSeq, const std::string& groupId, const std::vector<std::string> & contactIds);
  void send_cancelGroupInvitation(const int32_t reqSeq, const std::string& groupId, const std::vector<std::string> & contactIds);
  void recv_cancelGroupInvitation();
  void changeVerificationMethod(VerificationSessionData& _return, const std::string& sessionId, const VerificationMethod::type method);
  void send_changeVerificationMethod(const std::string& sessionId, const VerificationMethod::type method);
  void recv_changeVerificationMethod(VerificationSessionData& _return);
  void clearIdentityCredential();
  void send_clearIdentityCredential();
  void recv_clearIdentityCredential();
  void clearMessageBox(const std::string& channelId, const std::string& messageBoxId);
  void send_clearMessageBox(const std::string& channelId, const std::string& messageBoxId);
  void recv_clearMessageBox();
  void closeProximityMatch(const std::string& sessionId);
  void send_closeProximityMatch(const std::string& sessionId);
  void recv_closeProximityMatch();
  void commitSendMessage(std::map<std::string, std::string> & _return, const int32_t seq, const std::string& messageId, const std::vector<std::string> & receiverMids);
  void send_commitSendMessage(const int32_t seq, const std::string& messageId, const std::vector<std::string> & receiverMids);
  void recv_commitSendMessage(std::map<std::string, std::string> & _return);
  void commitSendMessages(std::map<std::string, std::string> & _return, const int32_t seq, const std::vector<std::string> & messageIds, const std::vector<std::string> & receiverMids);
  void send_commitSendMessages(const int32_t seq, const std::vector<std::string> & messageIds, const std::vector<std::string> & receiverMids);
  void recv_commitSendMessages(std::map<std::string, std::string> & _return);
  void commitUpdateProfile(std::map<std::string, std::string> & _return, const int32_t seq, const std::vector<ProfileAttribute::type> & attrs, const std::vector<std::string> & receiverMids);
  void send_commitUpdateProfile(const int32_t seq, const std::vector<ProfileAttribute::type> & attrs, const std::vector<std::string> & receiverMids);
  void recv_commitUpdateProfile(std::map<std::string, std::string> & _return);
  void confirmEmail(const std::string& verifier, const std::string& pinCode);
  void send_confirmEmail(const std::string& verifier, const std::string& pinCode);
  void recv_confirmEmail();
  void createGroup(Group& _return, const int32_t seq, const std::string& name, const std::vector<std::string> & contactIds);
  void send_createGroup(const int32_t seq, const std::string& name, const std::vector<std::string> & contactIds);
  void recv_createGroup(Group& _return);
  void createQrcodeBase64Image(std::string& _return, const std::string& url, const std::string& characterSet, const int32_t imageSize, const int32_t x, const int32_t y, const int32_t width, const int32_t height);
  void send_createQrcodeBase64Image(const std::string& url, const std::string& characterSet, const int32_t imageSize, const int32_t x, const int32_t y, const int32_t width, const int32_t height);
  void recv_createQrcodeBase64Image(std::string& _return);
  void createRoom(Room& _return, const int32_t reqSeq, const std::vector<std::string> & contactIds);
  void send_createRoom(const int32_t reqSeq, const std::vector<std::string> & contactIds);
  void recv_createRoom(Room& _return);
  void createSession(std::string& _return);
  void send_createSession();
  void recv_createSession(std::string& _return);
  void fetchAnnouncements(std::vector<Announcement> & _return, const int32_t lastFetchedIndex);
  void send_fetchAnnouncements(const int32_t lastFetchedIndex);
  void recv_fetchAnnouncements(std::vector<Announcement> & _return);
  void fetchMessages(std::vector<Message> & _return, const int64_t localTs, const int32_t count);
  void send_fetchMessages(const int64_t localTs, const int32_t count);
  void recv_fetchMessages(std::vector<Message> & _return);
  void fetchOperations(std::vector<Operation> & _return, const int64_t localRev, const int32_t count);
  void send_fetchOperations(const int64_t localRev, const int32_t count);
  void recv_fetchOperations(std::vector<Operation> & _return);
  void fetchOps(std::vector<Operation> & _return, const int64_t localRev, const int32_t count, const int64_t globalRev, const int64_t individualRev);
  void send_fetchOps(const int64_t localRev, const int32_t count, const int64_t globalRev, const int64_t individualRev);
  void recv_fetchOps(std::vector<Operation> & _return);
  void findAndAddContactsByEmail(std::map<std::string, Contact> & _return, const int32_t reqSeq, const std::set<std::string> & emails);
  void send_findAndAddContactsByEmail(const int32_t reqSeq, const std::set<std::string> & emails);
  void recv_findAndAddContactsByEmail(std::map<std::string, Contact> & _return);
  void findAndAddContactsByMid(std::map<std::string, Contact> & _return, const int32_t reqSeq, const std::string& mid, const ContactType::type type, const std::string& reference);
  void send_findAndAddContactsByMid(const int32_t reqSeq, const std::string& mid, const ContactType::type type, const std::string& reference);
  void recv_findAndAddContactsByMid(std::map<std::string, Contact> & _return);
  void findGroupByTicketV2(Group& _return, const std::string& ticketId);
  void send_findGroupByTicketV2(const std::string& ticketId);
  void recv_findGroupByTicketV2(Group& _return);
  void findAndAddContactsByPhone(std::map<std::string, Contact> & _return, const int32_t reqSeq, const std::set<std::string> & phones);
  void send_findAndAddContactsByPhone(const int32_t reqSeq, const std::set<std::string> & phones);
  void recv_findAndAddContactsByPhone(std::map<std::string, Contact> & _return);
  void getFriendRequests(std::vector<FriendRequest> & _return, const FriendRequestDirection::type direction, const int64_t lastSeenSeqId);
  void send_getFriendRequests(const FriendRequestDirection::type direction, const int64_t lastSeenSeqId);
  void recv_getFriendRequests(std::vector<FriendRequest> & _return);
  void removeFriendRequest(const FriendRequestDirection::type direction, const std::string& midOrEMid);
  void send_removeFriendRequest(const FriendRequestDirection::type direction, const std::string& midOrEMid);
  void recv_removeFriendRequest();
  void findAndAddContactsByUserid(std::map<std::string, Contact> & _return, const int32_t reqSeq, const std::string& userid);
  void send_findAndAddContactsByUserid(const int32_t reqSeq, const std::string& userid);
  void recv_findAndAddContactsByUserid(std::map<std::string, Contact> & _return);
  void findContactByUserid(Contact& _return, const std::string& userid);
  void send_findContactByUserid(const std::string& userid);
  void recv_findContactByUserid(Contact& _return);
  void findContactByUserTicket(Contact& _return, const std::string& ticketIdWithTag);
  void send_findContactByUserTicket(const std::string& ticketIdWithTag);
  void recv_findContactByUserTicket(Contact& _return);
  void findContactsByEmail(std::map<std::string, Contact> & _return, const std::set<std::string> & emails);
  void send_findContactsByEmail(const std::set<std::string> & emails);
  void recv_findContactsByEmail(std::map<std::string, Contact> & _return);
  void findContactsByPhone(std::map<std::string, Contact> & _return, const std::set<std::string> & phones);
  void send_findContactsByPhone(const std::set<std::string> & phones);
  void recv_findContactsByPhone(std::map<std::string, Contact> & _return);
  void findSnsIdUserStatus(SnsIdUserStatus& _return, const SnsIdType::type snsIdType, const std::string& snsAccessToken, const std::string& udidHash);
  void send_findSnsIdUserStatus(const SnsIdType::type snsIdType, const std::string& snsAccessToken, const std::string& udidHash);
  void recv_findSnsIdUserStatus(SnsIdUserStatus& _return);
  void finishUpdateVerification(const std::string& sessionId);
  void send_finishUpdateVerification(const std::string& sessionId);
  void recv_finishUpdateVerification();
  void generateUserTicket(Ticket& _return, const int64_t expirationTime, const int32_t maxUseCount);
  void send_generateUserTicket(const int64_t expirationTime, const int32_t maxUseCount);
  void recv_generateUserTicket(Ticket& _return);
  void destroyMessage(const int32_t seq, const std::string& chatId, const std::string& messageId, const int32_t sessionId);
  void send_destroyMessage(const int32_t seq, const std::string& chatId, const std::string& messageId, const int32_t sessionId);
  void recv_destroyMessage();
  void getAcceptedProximityMatches(std::set<std::string> & _return, const std::string& sessionId);
  void send_getAcceptedProximityMatches(const std::string& sessionId);
  void recv_getAcceptedProximityMatches(std::set<std::string> & _return);
  void getActiveBuddySubscriberIds(std::vector<std::string> & _return);
  void send_getActiveBuddySubscriberIds();
  void recv_getActiveBuddySubscriberIds(std::vector<std::string> & _return);
  void getAllContactIds(std::vector<std::string> & _return);
  void send_getAllContactIds();
  void recv_getAllContactIds(std::vector<std::string> & _return);
  void getAuthQrcode(AuthQrcode& _return, const bool keepLoggedIn, const std::string& systemName);
  void send_getAuthQrcode(const bool keepLoggedIn, const std::string& systemName);
  void recv_getAuthQrcode(AuthQrcode& _return);
  void getBlockedContactIds(std::vector<std::string> & _return);
  void send_getBlockedContactIds();
  void recv_getBlockedContactIds(std::vector<std::string> & _return);
  void registerWithPhoneNumber(RegisterWithPhoneNumberResult& _return, const std::string& sessionId, const std::string& migrationPincodeSessionId);
  void send_registerWithPhoneNumber(const std::string& sessionId, const std::string& migrationPincodeSessionId);
  void recv_registerWithPhoneNumber(RegisterWithPhoneNumberResult& _return);
  void registerWithPhoneNumberAndPassword(RegisterWithPhoneNumberResult& _return, const std::string& sessionId, const std::string& keynm, const std::string& encrypted);
  void send_registerWithPhoneNumberAndPassword(const std::string& sessionId, const std::string& keynm, const std::string& encrypted);
  void recv_registerWithPhoneNumberAndPassword(RegisterWithPhoneNumberResult& _return);
  void getAnalyticsInfo(AnalyticsInfo& _return);
  void send_getAnalyticsInfo();
  void recv_getAnalyticsInfo(AnalyticsInfo& _return);
  void reportClientStatistics(const int32_t reqSeq, const ReportCategory::type category, const int32_t count);
  void send_reportClientStatistics(const int32_t reqSeq, const ReportCategory::type category, const int32_t count);
  void recv_reportClientStatistics();
  void verifyPhoneNumberForLogin(std::string& _return, const std::string& verifierFromPhone, const std::string& pinCodeForPhone, const std::string& verifierFromLogin);
  void send_verifyPhoneNumberForLogin(const std::string& verifierFromPhone, const std::string& pinCodeForPhone, const std::string& verifierFromLogin);
  void recv_verifyPhoneNumberForLogin(std::string& _return);
  void verifyPhoneNumber(PhoneVerificationResult& _return, const std::string& sessionId, const std::string& pinCode, const std::string& udidHash, const std::string& migrationPincodeSessionId, const std::string& oldUdidHash);
  void send_verifyPhoneNumber(const std::string& sessionId, const std::string& pinCode, const std::string& udidHash, const std::string& migrationPincodeSessionId, const std::string& oldUdidHash);
  void recv_verifyPhoneNumber(PhoneVerificationResult& _return);
  void getBlockedContactIdsByRange(std::vector<std::string> & _return, const int32_t start, const int32_t count);
  void send_getBlockedContactIdsByRange(const int32_t start, const int32_t count);
  void recv_getBlockedContactIdsByRange(std::vector<std::string> & _return);
  void getBlockedRecommendationIds(std::vector<std::string> & _return);
  void send_getBlockedRecommendationIds();
  void recv_getBlockedRecommendationIds(std::vector<std::string> & _return);
  void getBuddyBlockerIds(std::vector<std::string> & _return);
  void send_getBuddyBlockerIds();
  void recv_getBuddyBlockerIds(std::vector<std::string> & _return);
  void getBuddyLocation(Geolocation& _return, const std::string& mid, const int32_t index);
  void send_getBuddyLocation(const std::string& mid, const int32_t index);
  void recv_getBuddyLocation(Geolocation& _return);
  void getCompactContactsModifiedSince(std::vector<CompactContact> & _return, const int64_t timestamp);
  void send_getCompactContactsModifiedSince(const int64_t timestamp);
  void recv_getCompactContactsModifiedSince(std::vector<CompactContact> & _return);
  void getCompactGroup(Group& _return, const std::string& groupId);
  void send_getCompactGroup(const std::string& groupId);
  void recv_getCompactGroup(Group& _return);
  void getCompactRoom(Room& _return, const std::string& roomId);
  void send_getCompactRoom(const std::string& roomId);
  void recv_getCompactRoom(Room& _return);
  void getContact(Contact& _return, const std::string& id);
  void send_getContact(const std::string& id);
  void recv_getContact(Contact& _return);
  void getContacts(std::vector<Contact> & _return, const std::vector<std::string> & ids);
  void send_getContacts(const std::vector<std::string> & ids);
  void recv_getContacts(std::vector<Contact> & _return);
  void getContactWithFriendRequestStatus(Contact& _return, const std::string& id);
  void send_getContactWithFriendRequestStatus(const std::string& id);
  void recv_getContactWithFriendRequestStatus(Contact& _return);
  void getCountryWithRequestIp(std::string& _return);
  void send_getCountryWithRequestIp();
  void recv_getCountryWithRequestIp(std::string& _return);
  void getFavoriteMids(std::vector<std::string> & _return);
  void send_getFavoriteMids();
  void recv_getFavoriteMids(std::vector<std::string> & _return);
  void getGroup(Group& _return, const std::string& groupId);
  void send_getGroup(const std::string& groupId);
  void recv_getGroup(Group& _return);
  void getGroupIdsInvited(std::vector<std::string> & _return);
  void send_getGroupIdsInvited();
  void recv_getGroupIdsInvited(std::vector<std::string> & _return);
  void getGroupIdsJoined(std::vector<std::string> & _return);
  void send_getGroupIdsJoined();
  void recv_getGroupIdsJoined(std::vector<std::string> & _return);
  void getGroups(std::vector<Group> & _return, const std::vector<std::string> & groupIds);
  void send_getGroups(const std::vector<std::string> & groupIds);
  void recv_getGroups(std::vector<Group> & _return);
  void getHiddenContactMids(std::vector<std::string> & _return);
  void send_getHiddenContactMids();
  void recv_getHiddenContactMids(std::vector<std::string> & _return);
  void getIdentityIdentifier(std::string& _return);
  void send_getIdentityIdentifier();
  void recv_getIdentityIdentifier(std::string& _return);
  int32_t getLastAnnouncementIndex();
  void send_getLastAnnouncementIndex();
  int32_t recv_getLastAnnouncementIndex();
  int64_t getLastOpRevision();
  void send_getLastOpRevision();
  int64_t recv_getLastOpRevision();
  void getSuggestRevisions(SuggestDictionaryRevisions& _return);
  void send_getSuggestRevisions();
  void recv_getSuggestRevisions(SuggestDictionaryRevisions& _return);
  void getPreviousMessagesV2WithReadCount(std::vector<Message> & _return, const std::string& messageBoxId, const MessageBoxV2MessageId& endMessageId, const int32_t messagesCount);
  void send_getPreviousMessagesV2WithReadCount(const std::string& messageBoxId, const MessageBoxV2MessageId& endMessageId, const int32_t messagesCount);
  void recv_getPreviousMessagesV2WithReadCount(std::vector<Message> & _return);
  void getMessageBox(TMessageBox& _return, const std::string& channelId, const std::string& messageBoxId, const int32_t lastMessagesCount);
  void send_getMessageBox(const std::string& channelId, const std::string& messageBoxId, const int32_t lastMessagesCount);
  void recv_getMessageBox(TMessageBox& _return);
  void getMessageBoxCompactWrapUp(TMessageBoxWrapUp& _return, const std::string& mid);
  void send_getMessageBoxCompactWrapUp(const std::string& mid);
  void recv_getMessageBoxCompactWrapUp(TMessageBoxWrapUp& _return);
  void getMessageBoxCompactWrapUpList(TMessageBoxWrapUpResponse& _return, const int32_t start, const int32_t messageBoxCount);
  void send_getMessageBoxCompactWrapUpList(const int32_t start, const int32_t messageBoxCount);
  void recv_getMessageBoxCompactWrapUpList(TMessageBoxWrapUpResponse& _return);
  void getMessageBoxList(std::vector<TMessageBox> & _return, const std::string& channelId, const int32_t lastMessagesCount);
  void send_getMessageBoxList(const std::string& channelId, const int32_t lastMessagesCount);
  void recv_getMessageBoxList(std::vector<TMessageBox> & _return);
  void getMessageBoxListByStatus(std::vector<TMessageBox> & _return, const std::string& channelId, const int32_t lastMessagesCount, const int32_t status);
  void send_getMessageBoxListByStatus(const std::string& channelId, const int32_t lastMessagesCount, const int32_t status);
  void recv_getMessageBoxListByStatus(std::vector<TMessageBox> & _return);
  void getMessageBoxWrapUp(TMessageBoxWrapUp& _return, const std::string& mid);
  void send_getMessageBoxWrapUp(const std::string& mid);
  void recv_getMessageBoxWrapUp(TMessageBoxWrapUp& _return);
  void getMessageBoxWrapUpList(TMessageBoxWrapUpResponse& _return, const int32_t start, const int32_t messageBoxCount);
  void send_getMessageBoxWrapUpList(const int32_t start, const int32_t messageBoxCount);
  void recv_getMessageBoxWrapUpList(TMessageBoxWrapUpResponse& _return);
  void getMessagesBySequenceNumber(std::vector<Message> & _return, const std::string& channelId, const std::string& messageBoxId, const int64_t startSeq, const int64_t endSeq);
  void send_getMessagesBySequenceNumber(const std::string& channelId, const std::string& messageBoxId, const int64_t startSeq, const int64_t endSeq);
  void recv_getMessagesBySequenceNumber(std::vector<Message> & _return);
  void getNextMessages(std::vector<Message> & _return, const std::string& messageBoxId, const int64_t startSeq, const int32_t messagesCount);
  void send_getNextMessages(const std::string& messageBoxId, const int64_t startSeq, const int32_t messagesCount);
  void recv_getNextMessages(std::vector<Message> & _return);
  void getNotificationPolicy(std::vector<NotificationType::type> & _return, const CarrierCode::type carrier);
  void send_getNotificationPolicy(const CarrierCode::type carrier);
  void recv_getNotificationPolicy(std::vector<NotificationType::type> & _return);
  void getPreviousMessages(std::vector<Message> & _return, const std::string& messageBoxId, const int64_t endSeq, const int32_t messagesCount);
  void send_getPreviousMessages(const std::string& messageBoxId, const int64_t endSeq, const int32_t messagesCount);
  void recv_getPreviousMessages(std::vector<Message> & _return);
  void getProfile(Profile& _return);
  void send_getProfile();
  void recv_getProfile(Profile& _return);
  void getProximityMatchCandidateList(ProximityMatchCandidateResult& _return, const std::string& sessionId);
  void send_getProximityMatchCandidateList(const std::string& sessionId);
  void recv_getProximityMatchCandidateList(ProximityMatchCandidateResult& _return);
  void getProximityMatchCandidates(std::set<Contact> & _return, const std::string& sessionId);
  void send_getProximityMatchCandidates(const std::string& sessionId);
  void recv_getProximityMatchCandidates(std::set<Contact> & _return);
  void getRecentMessages(std::vector<Message> & _return, const std::string& messageBoxId, const int32_t messagesCount);
  void send_getRecentMessages(const std::string& messageBoxId, const int32_t messagesCount);
  void recv_getRecentMessages(std::vector<Message> & _return);
  void getRecommendationIds(std::vector<std::string> & _return);
  void send_getRecommendationIds();
  void recv_getRecommendationIds(std::vector<std::string> & _return);
  void getRoom(Room& _return, const std::string& roomId);
  void send_getRoom(const std::string& roomId);
  void recv_getRoom(Room& _return);
  void getRSAKeyInfo(RSAKey& _return, const IdentityProvider::type provider);
  void send_getRSAKeyInfo(const IdentityProvider::type provider);
  void recv_getRSAKeyInfo(RSAKey& _return);
  int64_t getServerTime();
  void send_getServerTime();
  int64_t recv_getServerTime();
  void getSessions(std::vector<LoginSession> & _return);
  void send_getSessions();
  void recv_getSessions(std::vector<LoginSession> & _return);
  void getSettings(Settings& _return);
  void send_getSettings();
  void recv_getSettings(Settings& _return);
  void getGroupsV2(std::vector<Group> & _return, const std::vector<std::string> & groupIds);
  void send_getGroupsV2(const std::vector<std::string> & groupIds);
  void recv_getGroupsV2(std::vector<Group> & _return);
  void getSettingsAttributes(Settings& _return, const int32_t attrBitset);
  void send_getSettingsAttributes(const int32_t attrBitset);
  void recv_getSettingsAttributes(Settings& _return);
  void getSystemConfiguration(SystemConfiguration& _return);
  void send_getSystemConfiguration();
  void recv_getSystemConfiguration(SystemConfiguration& _return);
  void getUserTicket(Ticket& _return);
  void send_getUserTicket();
  void recv_getUserTicket(Ticket& _return);
  void getWapInvitation(WapInvitation& _return, const std::string& invitationHash);
  void send_getWapInvitation(const std::string& invitationHash);
  void recv_getWapInvitation(WapInvitation& _return);
  void invalidateUserTicket();
  void send_invalidateUserTicket();
  void recv_invalidateUserTicket();
  void inviteFriendsBySms(const std::vector<std::string> & phoneNumberList);
  void send_inviteFriendsBySms(const std::vector<std::string> & phoneNumberList);
  void recv_inviteFriendsBySms();
  void inviteIntoGroup(const int32_t reqSeq, const std::string& groupId, const std::vector<std::string> & contactIds);
  void send_inviteIntoGroup(const int32_t reqSeq, const std::string& groupId, const std::vector<std::string> & contactIds);
  void recv_inviteIntoGroup();
  void inviteIntoRoom(const int32_t reqSeq, const std::string& roomId, const std::vector<std::string> & contactIds);
  void send_inviteIntoRoom(const int32_t reqSeq, const std::string& roomId, const std::vector<std::string> & contactIds);
  void recv_inviteIntoRoom();
  void inviteViaEmail(const int32_t reqSeq, const std::string& email, const std::string& name);
  void send_inviteViaEmail(const int32_t reqSeq, const std::string& email, const std::string& name);
  void recv_inviteViaEmail();
  bool isIdentityIdentifierAvailable(const IdentityProvider::type provider, const std::string& identifier);
  void send_isIdentityIdentifierAvailable(const IdentityProvider::type provider, const std::string& identifier);
  bool recv_isIdentityIdentifierAvailable();
  bool isUseridAvailable(const std::string& userid);
  void send_isUseridAvailable(const std::string& userid);
  bool recv_isUseridAvailable();
  void kickoutFromGroup(const int32_t reqSeq, const std::string& groupId, const std::vector<std::string> & contactIds);
  void send_kickoutFromGroup(const int32_t reqSeq, const std::string& groupId, const std::vector<std::string> & contactIds);
  void recv_kickoutFromGroup();
  void reissueGroupTicket(std::string& _return, const std::string& groupMid);
  void send_reissueGroupTicket(const std::string& groupMid);
  void recv_reissueGroupTicket(std::string& _return);
  void findGroupByTicket(Group& _return, const std::string& ticketId);
  void send_findGroupByTicket(const std::string& ticketId);
  void recv_findGroupByTicket(Group& _return);
  void leaveGroup(const int32_t reqSeq, const std::string& groupId);
  void send_leaveGroup(const int32_t reqSeq, const std::string& groupId);
  void recv_leaveGroup();
  void leaveRoom(const int32_t reqSeq, const std::string& roomId);
  void send_leaveRoom(const int32_t reqSeq, const std::string& roomId);
  void recv_leaveRoom();
  void loginWithIdentityCredential(std::string& _return, const IdentityProvider::type identityProvider, const std::string& identifier, const std::string& password, const bool keepLoggedIn, const std::string& accessLocation, const std::string& systemName, const std::string& certificate);
  void send_loginWithIdentityCredential(const IdentityProvider::type identityProvider, const std::string& identifier, const std::string& password, const bool keepLoggedIn, const std::string& accessLocation, const std::string& systemName, const std::string& certificate);
  void recv_loginWithIdentityCredential(std::string& _return);
  void loginWithIdentityCredentialForCertificate(LoginResult& _return, const IdentityProvider::type identityProvider, const std::string& identifier, const std::string& password, const bool keepLoggedIn, const std::string& accessLocation, const std::string& systemName, const std::string& certificate);
  void send_loginWithIdentityCredentialForCertificate(const IdentityProvider::type identityProvider, const std::string& identifier, const std::string& password, const bool keepLoggedIn, const std::string& accessLocation, const std::string& systemName, const std::string& certificate);
  void recv_loginWithIdentityCredentialForCertificate(LoginResult& _return);
  void loginWithVerifier(std::string& _return, const std::string& verifier);
  void send_loginWithVerifier(const std::string& verifier);
  void recv_loginWithVerifier(std::string& _return);
  void loginWithVerifierForCerificate(LoginResult& _return, const std::string& verifier);
  void send_loginWithVerifierForCerificate(const std::string& verifier);
  void recv_loginWithVerifierForCerificate(LoginResult& _return);
  void loginWithVerifierForCertificate(LoginResult& _return, const std::string& verifier);
  void send_loginWithVerifierForCertificate(const std::string& verifier);
  void recv_loginWithVerifierForCertificate(LoginResult& _return);
  void logout();
  void send_logout();
  void recv_logout();
  void logoutSession(const std::string& tokenKey);
  void send_logoutSession(const std::string& tokenKey);
  void recv_logoutSession();
  void noop();
  void send_noop();
  void recv_noop();
  void notifiedRedirect(const std::map<std::string, std::string> & paramMap);
  void send_notifiedRedirect(const std::map<std::string, std::string> & paramMap);
  void recv_notifiedRedirect();
  void notifyBuddyOnAir(std::map<std::string, std::string> & _return, const int32_t seq, const std::vector<std::string> & receiverMids);
  void send_notifyBuddyOnAir(const int32_t seq, const std::vector<std::string> & receiverMids);
  void recv_notifyBuddyOnAir(std::map<std::string, std::string> & _return);
  void notifyIndividualEvent(const NotificationStatus::type notificationStatus, const std::vector<std::string> & receiverMids);
  void send_notifyIndividualEvent(const NotificationStatus::type notificationStatus, const std::vector<std::string> & receiverMids);
  void recv_notifyIndividualEvent();
  void notifyInstalled(const std::string& udidHash, const std::string& applicationTypeWithExtensions);
  void send_notifyInstalled(const std::string& udidHash, const std::string& applicationTypeWithExtensions);
  void recv_notifyInstalled();
  void notifyRegistrationComplete(const std::string& udidHash, const std::string& applicationTypeWithExtensions);
  void send_notifyRegistrationComplete(const std::string& udidHash, const std::string& applicationTypeWithExtensions);
  void recv_notifyRegistrationComplete();
  void notifySleep(const int64_t lastRev, const int32_t badge);
  void send_notifySleep(const int64_t lastRev, const int32_t badge);
  void recv_notifySleep();
  void notifyUpdated(const int64_t lastRev, const DeviceInfo& deviceInfo);
  void send_notifyUpdated(const int64_t lastRev, const DeviceInfo& deviceInfo);
  void recv_notifyUpdated();
  void openProximityMatch(std::string& _return, const Location& location);
  void send_openProximityMatch(const Location& location);
  void recv_openProximityMatch(std::string& _return);
  void registerBuddyUser(std::string& _return, const std::string& buddyId, const std::string& registrarPassword);
  void send_registerBuddyUser(const std::string& buddyId, const std::string& registrarPassword);
  void recv_registerBuddyUser(std::string& _return);
  void registerBuddyUserid(const int32_t seq, const std::string& userid);
  void send_registerBuddyUserid(const int32_t seq, const std::string& userid);
  void recv_registerBuddyUserid();
  void registerDevice(std::string& _return, const std::string& sessionId);
  void send_registerDevice(const std::string& sessionId);
  void recv_registerDevice(std::string& _return);
  void registerDeviceWithIdentityCredential(std::string& _return, const std::string& sessionId, const IdentityProvider::type provider, const std::string& identifier, const std::string& verifier);
  void send_registerDeviceWithIdentityCredential(const std::string& sessionId, const IdentityProvider::type provider, const std::string& identifier, const std::string& verifier);
  void recv_registerDeviceWithIdentityCredential(std::string& _return);
  void registerDeviceWithoutPhoneNumber(std::string& _return, const std::string& region, const std::string& udidHash, const DeviceInfo& deviceInfo);
  void send_registerDeviceWithoutPhoneNumber(const std::string& region, const std::string& udidHash, const DeviceInfo& deviceInfo);
  void recv_registerDeviceWithoutPhoneNumber(std::string& _return);
  void registerDeviceWithoutPhoneNumberWithIdentityCredential(std::string& _return, const std::string& region, const std::string& udidHash, const DeviceInfo& deviceInfo, const IdentityProvider::type provider, const std::string& identifier, const std::string& verifier, const std::string& mid, const std::string& migrationPincodeSessionId);
  void send_registerDeviceWithoutPhoneNumberWithIdentityCredential(const std::string& region, const std::string& udidHash, const DeviceInfo& deviceInfo, const IdentityProvider::type provider, const std::string& identifier, const std::string& verifier, const std::string& mid, const std::string& migrationPincodeSessionId);
  void recv_registerDeviceWithoutPhoneNumberWithIdentityCredential(std::string& _return);
  bool registerUserid(const int32_t reqSeq, const std::string& userid);
  void send_registerUserid(const int32_t reqSeq, const std::string& userid);
  bool recv_registerUserid();
  void registerWapDevice(std::string& _return, const std::string& invitationHash, const std::string& guidHash, const std::string& email, const DeviceInfo& deviceInfo);
  void send_registerWapDevice(const std::string& invitationHash, const std::string& guidHash, const std::string& email, const DeviceInfo& deviceInfo);
  void recv_registerWapDevice(std::string& _return);
  void registerWithExistingSnsIdAndIdentityCredential(std::string& _return, const IdentityCredential& identityCredential, const std::string& region, const std::string& udidHash, const DeviceInfo& deviceInfo);
  void send_registerWithExistingSnsIdAndIdentityCredential(const IdentityCredential& identityCredential, const std::string& region, const std::string& udidHash, const DeviceInfo& deviceInfo);
  void recv_registerWithExistingSnsIdAndIdentityCredential(std::string& _return);
  void registerWithSnsId(RegisterWithSnsIdResult& _return, const SnsIdType::type snsIdType, const std::string& snsAccessToken, const std::string& region, const std::string& udidHash, const DeviceInfo& deviceInfo, const std::string& mid);
  void send_registerWithSnsId(const SnsIdType::type snsIdType, const std::string& snsAccessToken, const std::string& region, const std::string& udidHash, const DeviceInfo& deviceInfo, const std::string& mid);
  void recv_registerWithSnsId(RegisterWithSnsIdResult& _return);
  void registerWithSnsIdAndIdentityCredential(std::string& _return, const SnsIdType::type snsIdType, const std::string& snsAccessToken, const IdentityCredential& identityCredential, const std::string& region, const std::string& udidHash, const DeviceInfo& deviceInfo);
  void send_registerWithSnsIdAndIdentityCredential(const SnsIdType::type snsIdType, const std::string& snsAccessToken, const IdentityCredential& identityCredential, const std::string& region, const std::string& udidHash, const DeviceInfo& deviceInfo);
  void recv_registerWithSnsIdAndIdentityCredential(std::string& _return);
  void reissueDeviceCredential(std::string& _return);
  void send_reissueDeviceCredential();
  void recv_reissueDeviceCredential(std::string& _return);
  void reissueUserTicket(std::string& _return, const int64_t expirationTime, const int32_t maxUseCount);
  void send_reissueUserTicket(const int64_t expirationTime, const int32_t maxUseCount);
  void recv_reissueUserTicket(std::string& _return);
  void getMessageReadRange(std::vector<TMessageReadRange> & _return, const std::vector<std::string> & chatIds);
  void send_getMessageReadRange(const std::vector<std::string> & chatIds);
  void recv_getMessageReadRange(std::vector<TMessageReadRange> & _return);
  void rejectGroupInvitation(const int32_t reqSeq, const std::string& groupId);
  void send_rejectGroupInvitation(const int32_t reqSeq, const std::string& groupId);
  void recv_rejectGroupInvitation();
  void releaseSession();
  void send_releaseSession();
  void recv_releaseSession();
  void removeAllMessages(const int32_t seq, const std::string& lastMessageId);
  void send_removeAllMessages(const int32_t seq, const std::string& lastMessageId);
  void recv_removeAllMessages();
  void removeBuddyLocation(const std::string& mid, const int32_t index);
  void send_removeBuddyLocation(const std::string& mid, const int32_t index);
  void recv_removeBuddyLocation();
  bool removeMessage(const std::string& messageId);
  void send_removeMessage(const std::string& messageId);
  bool recv_removeMessage();
  void makeUserAddMyselfAsContact(ContactTransition& _return, const std::string& contactOwnerMid);
  void send_makeUserAddMyselfAsContact(const std::string& contactOwnerMid);
  void recv_makeUserAddMyselfAsContact(ContactTransition& _return);
  bool removeMessageFromMyHome(const std::string& messageId);
  void send_removeMessageFromMyHome(const std::string& messageId);
  bool recv_removeMessageFromMyHome();
  void removeSnsId(std::string& _return, const SnsIdType::type snsIdType);
  void send_removeSnsId(const SnsIdType::type snsIdType);
  void recv_removeSnsId(std::string& _return);
  void report(const int64_t syncOpRevision, const SyncCategory::type category, const std::string& report);
  void send_report(const int64_t syncOpRevision, const SyncCategory::type category, const std::string& report);
  void recv_report();
  void reportContacts(std::vector<ContactReportResult> & _return, const int64_t syncOpRevision, const SyncCategory::type category, const std::vector<ContactReport> & contactReports, const SyncActionType::type actionType);
  void send_reportContacts(const int64_t syncOpRevision, const SyncCategory::type category, const std::vector<ContactReport> & contactReports, const SyncActionType::type actionType);
  void recv_reportContacts(std::vector<ContactReportResult> & _return);
  void reportGroups(const int64_t syncOpRevision, const std::vector<Group> & groups);
  void send_reportGroups(const int64_t syncOpRevision, const std::vector<Group> & groups);
  void recv_reportGroups();
  void reportProfile(const int64_t syncOpRevision, const Profile& profile);
  void send_reportProfile(const int64_t syncOpRevision, const Profile& profile);
  void recv_reportProfile();
  void reportRooms(const int64_t syncOpRevision, const std::vector<Room> & rooms);
  void send_reportRooms(const int64_t syncOpRevision, const std::vector<Room> & rooms);
  void recv_reportRooms();
  void findAndAddContactByMetaTag(Contact& _return, const int32_t reqSeq, const std::string& userid, const std::string& reference);
  void send_findAndAddContactByMetaTag(const int32_t reqSeq, const std::string& userid, const std::string& reference);
  void recv_findAndAddContactByMetaTag(Contact& _return);
  void reportSettings(const int64_t syncOpRevision, const Settings& settings);
  void send_reportSettings(const int64_t syncOpRevision, const Settings& settings);
  void recv_reportSettings();
  void reportSpam(const std::string& chatMid, const std::vector<std::string> & memberMids, const std::vector<SpammerReason::type> & spammerReasons, const std::vector<std::string> & senderMids, const std::vector<std::string> & spamMessageIds, const std::vector<std::string> & spamMessages);
  void send_reportSpam(const std::string& chatMid, const std::vector<std::string> & memberMids, const std::vector<SpammerReason::type> & spammerReasons, const std::vector<std::string> & senderMids, const std::vector<std::string> & spamMessageIds, const std::vector<std::string> & spamMessages);
  void recv_reportSpam();
  void reportSpammer(const std::string& spammerMid, const std::vector<SpammerReason::type> & spammerReasons, const std::vector<std::string> & spamMessageIds);
  void send_reportSpammer(const std::string& spammerMid, const std::vector<SpammerReason::type> & spammerReasons, const std::vector<std::string> & spamMessageIds);
  void recv_reportSpammer();
  void requestAccountPasswordReset(const IdentityProvider::type provider, const std::string& identifier, const std::string& locale);
  void send_requestAccountPasswordReset(const IdentityProvider::type provider, const std::string& identifier, const std::string& locale);
  void recv_requestAccountPasswordReset();
  void requestEmailConfirmation(EmailConfirmationSession& _return, const EmailConfirmation& emailConfirmation);
  void send_requestEmailConfirmation(const EmailConfirmation& emailConfirmation);
  void recv_requestEmailConfirmation(EmailConfirmationSession& _return);
  void requestIdentityUnbind(const IdentityProvider::type provider, const std::string& identifier);
  void send_requestIdentityUnbind(const IdentityProvider::type provider, const std::string& identifier);
  void recv_requestIdentityUnbind();
  void resendEmailConfirmation(EmailConfirmationSession& _return, const std::string& verifier);
  void send_resendEmailConfirmation(const std::string& verifier);
  void recv_resendEmailConfirmation(EmailConfirmationSession& _return);
  void resendPinCode(const std::string& sessionId);
  void send_resendPinCode(const std::string& sessionId);
  void recv_resendPinCode();
  void resendPinCodeBySMS(const std::string& sessionId);
  void send_resendPinCodeBySMS(const std::string& sessionId);
  void recv_resendPinCodeBySMS();
  void sendChatChecked(const int32_t seq, const std::string& consumer, const std::string& lastMessageId);
  void send_sendChatChecked(const int32_t seq, const std::string& consumer, const std::string& lastMessageId);
  void recv_sendChatChecked();
  void sendMessageAwaitCommit(CommitMessageResult& _return, const int32_t seq, const Message& message);
  void send_sendMessageAwaitCommit(const int32_t seq, const Message& message);
  void recv_sendMessageAwaitCommit(CommitMessageResult& _return);
  void sendChatRemoved(const int32_t seq, const std::string& consumer, const std::string& lastMessageId);
  void send_sendChatRemoved(const int32_t seq, const std::string& consumer, const std::string& lastMessageId);
  void recv_sendChatRemoved();
  void sendContentPreviewUpdated(std::map<std::string, std::string> & _return, const int32_t esq, const std::string& messageId, const std::vector<std::string> & receiverMids);
  void send_sendContentPreviewUpdated(const int32_t esq, const std::string& messageId, const std::vector<std::string> & receiverMids);
  void recv_sendContentPreviewUpdated(std::map<std::string, std::string> & _return);
  void sendContentReceipt(const int32_t seq, const std::string& consumer, const std::string& messageId);
  void send_sendContentReceipt(const int32_t seq, const std::string& consumer, const std::string& messageId);
  void recv_sendContentReceipt();
  void sendDummyPush();
  void send_sendDummyPush();
  void recv_sendDummyPush();
  void removeE2EEPublicKey(const E2EEPublicKey& publicKey);
  void send_removeE2EEPublicKey(const E2EEPublicKey& publicKey);
  void recv_removeE2EEPublicKey();
  void negotiateE2EEPublicKey(E2EENegotiationResult& _return, const std::string& mid);
  void send_negotiateE2EEPublicKey(const std::string& mid);
  void recv_negotiateE2EEPublicKey(E2EENegotiationResult& _return);
  void getE2EEPublicKey(E2EEPublicKey& _return, const std::string& mid, const int32_t version, const int32_t keyId);
  void send_getE2EEPublicKey(const std::string& mid, const int32_t version, const int32_t keyId);
  void recv_getE2EEPublicKey(E2EEPublicKey& _return);
  void requestE2EEKeyExchange(const int32_t reqSeq, const std::string& temporalPublicKey, const E2EEPublicKey& publicKey, const std::string& verifier);
  void send_requestE2EEKeyExchange(const int32_t reqSeq, const std::string& temporalPublicKey, const E2EEPublicKey& publicKey, const std::string& verifier);
  void recv_requestE2EEKeyExchange();
  void getLastE2EEPublicKeys(std::map<std::string, E2EEPublicKey> & _return, const std::string& chatMid);
  void send_getLastE2EEPublicKeys(const std::string& chatMid);
  void recv_getLastE2EEPublicKeys(std::map<std::string, E2EEPublicKey> & _return);
  void registerE2EEPublicKey(E2EEPublicKey& _return, const int32_t reqSeq, const E2EEPublicKey& publicKey);
  void send_registerE2EEPublicKey(const int32_t reqSeq, const E2EEPublicKey& publicKey);
  void recv_registerE2EEPublicKey(E2EEPublicKey& _return);
  void getE2EEPublicKeys(std::vector<E2EEPublicKey> & _return);
  void send_getE2EEPublicKeys();
  void recv_getE2EEPublicKeys(std::vector<E2EEPublicKey> & _return);
  void getE2EEPublicKeysEx(std::vector<E2EEPublicKey> & _return, const bool ignoreE2EEStatus);
  void send_getE2EEPublicKeysEx(const bool ignoreE2EEStatus);
  void recv_getE2EEPublicKeysEx(std::vector<E2EEPublicKey> & _return);
  void getReadMessageOpsInBulk(std::vector<Operation> & _return, const std::vector<std::string> & chatIds);
  void send_getReadMessageOpsInBulk(const std::vector<std::string> & chatIds);
  void recv_getReadMessageOpsInBulk(std::vector<Operation> & _return);
  void sendEvent(Message& _return, const int32_t seq, const Message& message);
  void send_sendEvent(const int32_t seq, const Message& message);
  void recv_sendEvent(Message& _return);
  void sendMessage(Message& _return, const int32_t seq, const Message& message);
  void send_sendMessage(const int32_t seq, const Message& message);
  void recv_sendMessage(Message& _return);
  void sendMessageIgnored(const int32_t seq, const std::string& consumer, const std::vector<std::string> & messageIds);
  void send_sendMessageIgnored(const int32_t seq, const std::string& consumer, const std::vector<std::string> & messageIds);
  void recv_sendMessageIgnored();
  void sendMessageReceipt(const int32_t seq, const std::string& consumer, const std::vector<std::string> & messageIds);
  void send_sendMessageReceipt(const int32_t seq, const std::string& consumer, const std::vector<std::string> & messageIds);
  void recv_sendMessageReceipt();
  void findContactByMetaTag(Contact& _return, const std::string& userid, const std::string& reference);
  void send_findContactByMetaTag(const std::string& userid, const std::string& reference);
  void recv_findContactByMetaTag(Contact& _return);
  void sendMessageToMyHome(Message& _return, const int32_t seq, const Message& message);
  void send_sendMessageToMyHome(const int32_t seq, const Message& message);
  void recv_sendMessageToMyHome(Message& _return);
  void setBuddyLocation(const std::string& mid, const int32_t index, const Geolocation& location);
  void send_setBuddyLocation(const std::string& mid, const int32_t index, const Geolocation& location);
  void recv_setBuddyLocation();
  void setIdentityCredential(const std::string& identifier, const std::string& verifier, const IdentityProvider::type provider);
  void send_setIdentityCredential(const std::string& identifier, const std::string& verifier, const IdentityProvider::type provider);
  void recv_setIdentityCredential();
  void setNotificationsEnabled(const int32_t reqSeq, const MIDType::type type, const std::string& target, const bool enablement);
  void send_setNotificationsEnabled(const int32_t reqSeq, const MIDType::type type, const std::string& target, const bool enablement);
  void recv_setNotificationsEnabled();
  void startUpdateVerification(VerificationSessionData& _return, const std::string& region, const CarrierCode::type carrier, const std::string& phone, const std::string& udidHash, const DeviceInfo& deviceInfo, const std::string& networkCode, const std::string& locale);
  void send_startUpdateVerification(const std::string& region, const CarrierCode::type carrier, const std::string& phone, const std::string& udidHash, const DeviceInfo& deviceInfo, const std::string& networkCode, const std::string& locale);
  void recv_startUpdateVerification(VerificationSessionData& _return);
  void startVerification(VerificationSessionData& _return, const std::string& region, const CarrierCode::type carrier, const std::string& phone, const std::string& udidHash, const DeviceInfo& deviceInfo, const std::string& networkCode, const std::string& mid, const std::string& locale, const SIMInfo& simInfo, const std::string& oldUdidHash);
  void send_startVerification(const std::string& region, const CarrierCode::type carrier, const std::string& phone, const std::string& udidHash, const DeviceInfo& deviceInfo, const std::string& networkCode, const std::string& mid, const std::string& locale, const SIMInfo& simInfo, const std::string& oldUdidHash);
  void recv_startVerification(VerificationSessionData& _return);
  void updateGroupPreferenceAttribute(const int32_t reqSeq, const std::string& groupMid, const std::map<GroupPreferenceAttribute::type, std::string> & updatedAttrs);
  void send_updateGroupPreferenceAttribute(const int32_t reqSeq, const std::string& groupMid, const std::map<GroupPreferenceAttribute::type, std::string> & updatedAttrs);
  void recv_updateGroupPreferenceAttribute();
  void createRoomV2(Room& _return, const int32_t reqSeq, const std::vector<std::string> & contactIds);
  void send_createRoomV2(const int32_t reqSeq, const std::vector<std::string> & contactIds);
  void recv_createRoomV2(Room& _return);
  void storeUpdateProfileAttribute(const int32_t seq, const ProfileAttribute::type profileAttribute, const std::string& value);
  void send_storeUpdateProfileAttribute(const int32_t seq, const ProfileAttribute::type profileAttribute, const std::string& value);
  void recv_storeUpdateProfileAttribute();
  void syncContactBySnsIds(std::vector<SnsFriendContactRegistration> & _return, const int32_t reqSeq, const std::vector<SnsFriendModification> & modifications);
  void send_syncContactBySnsIds(const int32_t reqSeq, const std::vector<SnsFriendModification> & modifications);
  void recv_syncContactBySnsIds(std::vector<SnsFriendContactRegistration> & _return);
  void syncContacts(std::map<std::string, ContactRegistration> & _return, const int32_t reqSeq, const std::vector<ContactModification> & localContacts);
  void send_syncContacts(const int32_t reqSeq, const std::vector<ContactModification> & localContacts);
  void recv_syncContacts(std::map<std::string, ContactRegistration> & _return);
  void trySendMessage(Message& _return, const int32_t seq, const Message& message);
  void send_trySendMessage(const int32_t seq, const Message& message);
  void recv_trySendMessage(Message& _return);
  void getNextMessagesV2(std::vector<Message> & _return, const std::string& messageBoxId, const MessageBoxV2MessageId& startMessageId, const int32_t messagesCount);
  void send_getNextMessagesV2(const std::string& messageBoxId, const MessageBoxV2MessageId& startMessageId, const int32_t messagesCount);
  void recv_getNextMessagesV2(std::vector<Message> & _return);
  void getMessageBoxCompactWrapUpV2(TMessageBoxWrapUp& _return, const std::string& messageBoxId);
  void send_getMessageBoxCompactWrapUpV2(const std::string& messageBoxId);
  void recv_getMessageBoxCompactWrapUpV2(TMessageBoxWrapUp& _return);
  void getRecentMessagesV2(std::vector<Message> & _return, const std::string& messageBoxId, const int32_t messagesCount);
  void send_getRecentMessagesV2(const std::string& messageBoxId, const int32_t messagesCount);
  void recv_getRecentMessagesV2(std::vector<Message> & _return);
  void validateContactsOnBot(std::map<std::string, std::string> & _return, const std::vector<std::string> & contacts);
  void send_validateContactsOnBot(const std::vector<std::string> & contacts);
  void recv_validateContactsOnBot(std::map<std::string, std::string> & _return);
  void tryFriendRequest(const std::string& midOrEMid, const FriendRequestMethod::type method, const std::string& friendRequestParams);
  void send_tryFriendRequest(const std::string& midOrEMid, const FriendRequestMethod::type method, const std::string& friendRequestParams);
  void recv_tryFriendRequest();
  void unblockContact(const int32_t reqSeq, const std::string& id);
  void send_unblockContact(const int32_t reqSeq, const std::string& id);
  void recv_unblockContact();
  void unblockRecommendation(const int32_t reqSeq, const std::string& id);
  void send_unblockRecommendation(const int32_t reqSeq, const std::string& id);
  void recv_unblockRecommendation();
  void unregisterUserAndDevice(std::string& _return);
  void send_unregisterUserAndDevice();
  void recv_unregisterUserAndDevice(std::string& _return);
  void updateApnsDeviceToken(const std::string& apnsDeviceToken);
  void send_updateApnsDeviceToken(const std::string& apnsDeviceToken);
  void recv_updateApnsDeviceToken();
  void updateBuddySetting(const std::string& key, const std::string& value);
  void send_updateBuddySetting(const std::string& key, const std::string& value);
  void recv_updateBuddySetting();
  void updateC2DMRegistrationId(const std::string& registrationId);
  void send_updateC2DMRegistrationId(const std::string& registrationId);
  void recv_updateC2DMRegistrationId();
  void updateContactSetting(const int32_t reqSeq, const std::string& mid, const ContactSetting::type flag, const std::string& value);
  void send_updateContactSetting(const int32_t reqSeq, const std::string& mid, const ContactSetting::type flag, const std::string& value);
  void recv_updateContactSetting();
  void updateCustomModeSettings(const CustomMode::type customMode, const std::map<std::string, std::string> & paramMap);
  void send_updateCustomModeSettings(const CustomMode::type customMode, const std::map<std::string, std::string> & paramMap);
  void recv_updateCustomModeSettings();
  void updateDeviceInfo(const std::string& deviceUid, const DeviceInfo& deviceInfo);
  void send_updateDeviceInfo(const std::string& deviceUid, const DeviceInfo& deviceInfo);
  void recv_updateDeviceInfo();
  void updateGroup(const int32_t reqSeq, const Group& group);
  void send_updateGroup(const int32_t reqSeq, const Group& group);
  void recv_updateGroup();
  void updateNotificationToken(const NotificationType::type type, const std::string& token);
  void send_updateNotificationToken(const NotificationType::type type, const std::string& token);
  void recv_updateNotificationToken();
  void updateNotificationTokenWithBytes(const NotificationType::type type, const std::string& token);
  void send_updateNotificationTokenWithBytes(const NotificationType::type type, const std::string& token);
  void recv_updateNotificationTokenWithBytes();
  void updateProfile(const int32_t reqSeq, const Profile& profile);
  void send_updateProfile(const int32_t reqSeq, const Profile& profile);
  void recv_updateProfile();
  void updateProfileAttribute(const int32_t reqSeq, const ProfileAttribute::type attr, const std::string& value);
  void send_updateProfileAttribute(const int32_t reqSeq, const ProfileAttribute::type attr, const std::string& value);
  void recv_updateProfileAttribute();
  void updateProfileAttributes(const int32_t reqSeq, const UpdateProfileAttributesRequest& request);
  void send_updateProfileAttributes(const int32_t reqSeq, const UpdateProfileAttributesRequest& request);
  void recv_updateProfileAttributes();
  void updateRegion(const std::string& region);
  void send_updateRegion(const std::string& region);
  void recv_updateRegion();
  void updateSettings(const int32_t reqSeq, const Settings& settings);
  void send_updateSettings(const int32_t reqSeq, const Settings& settings);
  void recv_updateSettings();
  int32_t updateSettings2(const int32_t reqSeq, const Settings& settings);
  void send_updateSettings2(const int32_t reqSeq, const Settings& settings);
  int32_t recv_updateSettings2();
  void updateSettingsAttribute(const int32_t reqSeq, const SettingsAttribute::type attr, const std::string& value);
  void send_updateSettingsAttribute(const int32_t reqSeq, const SettingsAttribute::type attr, const std::string& value);
  void recv_updateSettingsAttribute();
  int32_t updateSettingsAttributes(const int32_t reqSeq, const int32_t attrBitset, const Settings& settings);
  void send_updateSettingsAttributes(const int32_t reqSeq, const int32_t attrBitset, const Settings& settings);
  int32_t recv_updateSettingsAttributes();
  void verifyIdentityCredential(const IdentityProvider::type identityProvider, const std::string& identifier, const std::string& password);
  void send_verifyIdentityCredential(const IdentityProvider::type identityProvider, const std::string& identifier, const std::string& password);
  void recv_verifyIdentityCredential();
  void verifyIdentityCredentialWithResult(UserAuthStatus& _return, const IdentityCredential& identityCredential);
  void send_verifyIdentityCredentialWithResult(const IdentityCredential& identityCredential);
  void recv_verifyIdentityCredentialWithResult(UserAuthStatus& _return);
  VerificationResult::type verifyPhone(const std::string& sessionId, const std::string& pinCode, const std::string& udidHash);
  void send_verifyPhone(const std::string& sessionId, const std::string& pinCode, const std::string& udidHash);
  VerificationResult::type recv_verifyPhone();
  void verifyQrcode(std::string& _return, const std::string& verifier, const std::string& pinCode);
  void send_verifyQrcode(const std::string& verifier, const std::string& pinCode);
  void recv_verifyQrcode(std::string& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TalkServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<TalkServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TalkServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_searchCollection(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getChatRoomAnnouncementsBulk(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getChatRoomAnnouncements(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createChatRoomAnnouncement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeChatRoomAnnouncement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unsendMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGroupWithoutMembers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_requestResendMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_respondResendMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_acceptGroupInvitation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_acceptGroupInvitationByTicket(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_acceptProximityMatches(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_acquireCallRoute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_acquireCallTicket(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_acquireEncryptedAccessToken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addSnsId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_blockContact(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_blockRecommendation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cancelGroupInvitation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_changeVerificationMethod(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clearIdentityCredential(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clearMessageBox(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_closeProximityMatch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commitSendMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commitSendMessages(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commitUpdateProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_confirmEmail(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createQrcodeBase64Image(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createRoom(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createSession(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchAnnouncements(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchMessages(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchOperations(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchOps(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findAndAddContactsByEmail(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findAndAddContactsByMid(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findGroupByTicketV2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findAndAddContactsByPhone(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFriendRequests(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeFriendRequest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findAndAddContactsByUserid(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findContactByUserid(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findContactByUserTicket(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findContactsByEmail(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findContactsByPhone(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findSnsIdUserStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_finishUpdateVerification(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_generateUserTicket(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_destroyMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAcceptedProximityMatches(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getActiveBuddySubscriberIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllContactIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAuthQrcode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getBlockedContactIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerWithPhoneNumber(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerWithPhoneNumberAndPassword(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAnalyticsInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reportClientStatistics(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_verifyPhoneNumberForLogin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_verifyPhoneNumber(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getBlockedContactIdsByRange(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getBlockedRecommendationIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getBuddyBlockerIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getBuddyLocation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCompactContactsModifiedSince(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCompactGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCompactRoom(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getContact(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getContacts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getContactWithFriendRequestStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCountryWithRequestIp(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFavoriteMids(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGroupIdsInvited(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGroupIdsJoined(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGroups(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHiddenContactMids(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getIdentityIdentifier(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getLastAnnouncementIndex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getLastOpRevision(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSuggestRevisions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPreviousMessagesV2WithReadCount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMessageBox(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMessageBoxCompactWrapUp(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMessageBoxCompactWrapUpList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMessageBoxList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMessageBoxListByStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMessageBoxWrapUp(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMessageBoxWrapUpList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMessagesBySequenceNumber(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getNextMessages(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getNotificationPolicy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPreviousMessages(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getProximityMatchCandidateList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getProximityMatchCandidates(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRecentMessages(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRecommendationIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRoom(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRSAKeyInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getServerTime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSessions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSettings(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getGroupsV2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSettingsAttributes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSystemConfiguration(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUserTicket(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getWapInvitation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_invalidateUserTicket(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_inviteFriendsBySms(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_inviteIntoGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_inviteIntoRoom(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_inviteViaEmail(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isIdentityIdentifierAvailable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isUseridAvailable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_kickoutFromGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reissueGroupTicket(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findGroupByTicket(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_leaveGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_leaveRoom(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loginWithIdentityCredential(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loginWithIdentityCredentialForCertificate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loginWithVerifier(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loginWithVerifierForCerificate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loginWithVerifierForCertificate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_logout(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_logoutSession(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_noop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_notifiedRedirect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_notifyBuddyOnAir(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_notifyIndividualEvent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_notifyInstalled(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_notifyRegistrationComplete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_notifySleep(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_notifyUpdated(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_openProximityMatch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerBuddyUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerBuddyUserid(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerDeviceWithIdentityCredential(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerDeviceWithoutPhoneNumber(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerDeviceWithoutPhoneNumberWithIdentityCredential(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerUserid(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerWapDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerWithExistingSnsIdAndIdentityCredential(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerWithSnsId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerWithSnsIdAndIdentityCredential(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reissueDeviceCredential(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reissueUserTicket(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMessageReadRange(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rejectGroupInvitation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_releaseSession(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeAllMessages(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeBuddyLocation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_makeUserAddMyselfAsContact(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeMessageFromMyHome(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeSnsId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_report(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reportContacts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reportGroups(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reportProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reportRooms(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findAndAddContactByMetaTag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reportSettings(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reportSpam(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reportSpammer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_requestAccountPasswordReset(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_requestEmailConfirmation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_requestIdentityUnbind(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_resendEmailConfirmation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_resendPinCode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_resendPinCodeBySMS(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendChatChecked(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendMessageAwaitCommit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendChatRemoved(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendContentPreviewUpdated(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendContentReceipt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendDummyPush(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeE2EEPublicKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_negotiateE2EEPublicKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getE2EEPublicKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_requestE2EEKeyExchange(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getLastE2EEPublicKeys(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerE2EEPublicKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getE2EEPublicKeys(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getE2EEPublicKeysEx(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getReadMessageOpsInBulk(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendEvent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendMessageIgnored(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendMessageReceipt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findContactByMetaTag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendMessageToMyHome(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setBuddyLocation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setIdentityCredential(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setNotificationsEnabled(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startUpdateVerification(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startVerification(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateGroupPreferenceAttribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createRoomV2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_storeUpdateProfileAttribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_syncContactBySnsIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_syncContacts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_trySendMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getNextMessagesV2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMessageBoxCompactWrapUpV2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRecentMessagesV2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_validateContactsOnBot(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_tryFriendRequest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unblockContact(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unblockRecommendation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unregisterUserAndDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateApnsDeviceToken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateBuddySetting(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateC2DMRegistrationId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateContactSetting(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateCustomModeSettings(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateDeviceInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateNotificationToken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateNotificationTokenWithBytes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateProfileAttribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateProfileAttributes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateRegion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateSettings(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateSettings2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateSettingsAttribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateSettingsAttributes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_verifyIdentityCredential(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_verifyIdentityCredentialWithResult(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_verifyPhone(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_verifyQrcode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TalkServiceProcessor(::apache::thrift::stdcxx::shared_ptr<TalkServiceIf> iface) :
    iface_(iface) {
    processMap_["searchCollection"] = &TalkServiceProcessor::process_searchCollection;
    processMap_["getChatRoomAnnouncementsBulk"] = &TalkServiceProcessor::process_getChatRoomAnnouncementsBulk;
    processMap_["getChatRoomAnnouncements"] = &TalkServiceProcessor::process_getChatRoomAnnouncements;
    processMap_["createChatRoomAnnouncement"] = &TalkServiceProcessor::process_createChatRoomAnnouncement;
    processMap_["removeChatRoomAnnouncement"] = &TalkServiceProcessor::process_removeChatRoomAnnouncement;
    processMap_["unsendMessage"] = &TalkServiceProcessor::process_unsendMessage;
    processMap_["getGroupWithoutMembers"] = &TalkServiceProcessor::process_getGroupWithoutMembers;
    processMap_["requestResendMessage"] = &TalkServiceProcessor::process_requestResendMessage;
    processMap_["respondResendMessage"] = &TalkServiceProcessor::process_respondResendMessage;
    processMap_["acceptGroupInvitation"] = &TalkServiceProcessor::process_acceptGroupInvitation;
    processMap_["acceptGroupInvitationByTicket"] = &TalkServiceProcessor::process_acceptGroupInvitationByTicket;
    processMap_["acceptProximityMatches"] = &TalkServiceProcessor::process_acceptProximityMatches;
    processMap_["acquireCallRoute"] = &TalkServiceProcessor::process_acquireCallRoute;
    processMap_["acquireCallTicket"] = &TalkServiceProcessor::process_acquireCallTicket;
    processMap_["acquireEncryptedAccessToken"] = &TalkServiceProcessor::process_acquireEncryptedAccessToken;
    processMap_["addSnsId"] = &TalkServiceProcessor::process_addSnsId;
    processMap_["blockContact"] = &TalkServiceProcessor::process_blockContact;
    processMap_["blockRecommendation"] = &TalkServiceProcessor::process_blockRecommendation;
    processMap_["cancelGroupInvitation"] = &TalkServiceProcessor::process_cancelGroupInvitation;
    processMap_["changeVerificationMethod"] = &TalkServiceProcessor::process_changeVerificationMethod;
    processMap_["clearIdentityCredential"] = &TalkServiceProcessor::process_clearIdentityCredential;
    processMap_["clearMessageBox"] = &TalkServiceProcessor::process_clearMessageBox;
    processMap_["closeProximityMatch"] = &TalkServiceProcessor::process_closeProximityMatch;
    processMap_["commitSendMessage"] = &TalkServiceProcessor::process_commitSendMessage;
    processMap_["commitSendMessages"] = &TalkServiceProcessor::process_commitSendMessages;
    processMap_["commitUpdateProfile"] = &TalkServiceProcessor::process_commitUpdateProfile;
    processMap_["confirmEmail"] = &TalkServiceProcessor::process_confirmEmail;
    processMap_["createGroup"] = &TalkServiceProcessor::process_createGroup;
    processMap_["createQrcodeBase64Image"] = &TalkServiceProcessor::process_createQrcodeBase64Image;
    processMap_["createRoom"] = &TalkServiceProcessor::process_createRoom;
    processMap_["createSession"] = &TalkServiceProcessor::process_createSession;
    processMap_["fetchAnnouncements"] = &TalkServiceProcessor::process_fetchAnnouncements;
    processMap_["fetchMessages"] = &TalkServiceProcessor::process_fetchMessages;
    processMap_["fetchOperations"] = &TalkServiceProcessor::process_fetchOperations;
    processMap_["fetchOps"] = &TalkServiceProcessor::process_fetchOps;
    processMap_["findAndAddContactsByEmail"] = &TalkServiceProcessor::process_findAndAddContactsByEmail;
    processMap_["findAndAddContactsByMid"] = &TalkServiceProcessor::process_findAndAddContactsByMid;
    processMap_["findGroupByTicketV2"] = &TalkServiceProcessor::process_findGroupByTicketV2;
    processMap_["findAndAddContactsByPhone"] = &TalkServiceProcessor::process_findAndAddContactsByPhone;
    processMap_["getFriendRequests"] = &TalkServiceProcessor::process_getFriendRequests;
    processMap_["removeFriendRequest"] = &TalkServiceProcessor::process_removeFriendRequest;
    processMap_["findAndAddContactsByUserid"] = &TalkServiceProcessor::process_findAndAddContactsByUserid;
    processMap_["findContactByUserid"] = &TalkServiceProcessor::process_findContactByUserid;
    processMap_["findContactByUserTicket"] = &TalkServiceProcessor::process_findContactByUserTicket;
    processMap_["findContactsByEmail"] = &TalkServiceProcessor::process_findContactsByEmail;
    processMap_["findContactsByPhone"] = &TalkServiceProcessor::process_findContactsByPhone;
    processMap_["findSnsIdUserStatus"] = &TalkServiceProcessor::process_findSnsIdUserStatus;
    processMap_["finishUpdateVerification"] = &TalkServiceProcessor::process_finishUpdateVerification;
    processMap_["generateUserTicket"] = &TalkServiceProcessor::process_generateUserTicket;
    processMap_["destroyMessage"] = &TalkServiceProcessor::process_destroyMessage;
    processMap_["getAcceptedProximityMatches"] = &TalkServiceProcessor::process_getAcceptedProximityMatches;
    processMap_["getActiveBuddySubscriberIds"] = &TalkServiceProcessor::process_getActiveBuddySubscriberIds;
    processMap_["getAllContactIds"] = &TalkServiceProcessor::process_getAllContactIds;
    processMap_["getAuthQrcode"] = &TalkServiceProcessor::process_getAuthQrcode;
    processMap_["getBlockedContactIds"] = &TalkServiceProcessor::process_getBlockedContactIds;
    processMap_["registerWithPhoneNumber"] = &TalkServiceProcessor::process_registerWithPhoneNumber;
    processMap_["registerWithPhoneNumberAndPassword"] = &TalkServiceProcessor::process_registerWithPhoneNumberAndPassword;
    processMap_["getAnalyticsInfo"] = &TalkServiceProcessor::process_getAnalyticsInfo;
    processMap_["reportClientStatistics"] = &TalkServiceProcessor::process_reportClientStatistics;
    processMap_["verifyPhoneNumberForLogin"] = &TalkServiceProcessor::process_verifyPhoneNumberForLogin;
    processMap_["verifyPhoneNumber"] = &TalkServiceProcessor::process_verifyPhoneNumber;
    processMap_["getBlockedContactIdsByRange"] = &TalkServiceProcessor::process_getBlockedContactIdsByRange;
    processMap_["getBlockedRecommendationIds"] = &TalkServiceProcessor::process_getBlockedRecommendationIds;
    processMap_["getBuddyBlockerIds"] = &TalkServiceProcessor::process_getBuddyBlockerIds;
    processMap_["getBuddyLocation"] = &TalkServiceProcessor::process_getBuddyLocation;
    processMap_["getCompactContactsModifiedSince"] = &TalkServiceProcessor::process_getCompactContactsModifiedSince;
    processMap_["getCompactGroup"] = &TalkServiceProcessor::process_getCompactGroup;
    processMap_["getCompactRoom"] = &TalkServiceProcessor::process_getCompactRoom;
    processMap_["getContact"] = &TalkServiceProcessor::process_getContact;
    processMap_["getContacts"] = &TalkServiceProcessor::process_getContacts;
    processMap_["getContactWithFriendRequestStatus"] = &TalkServiceProcessor::process_getContactWithFriendRequestStatus;
    processMap_["getCountryWithRequestIp"] = &TalkServiceProcessor::process_getCountryWithRequestIp;
    processMap_["getFavoriteMids"] = &TalkServiceProcessor::process_getFavoriteMids;
    processMap_["getGroup"] = &TalkServiceProcessor::process_getGroup;
    processMap_["getGroupIdsInvited"] = &TalkServiceProcessor::process_getGroupIdsInvited;
    processMap_["getGroupIdsJoined"] = &TalkServiceProcessor::process_getGroupIdsJoined;
    processMap_["getGroups"] = &TalkServiceProcessor::process_getGroups;
    processMap_["getHiddenContactMids"] = &TalkServiceProcessor::process_getHiddenContactMids;
    processMap_["getIdentityIdentifier"] = &TalkServiceProcessor::process_getIdentityIdentifier;
    processMap_["getLastAnnouncementIndex"] = &TalkServiceProcessor::process_getLastAnnouncementIndex;
    processMap_["getLastOpRevision"] = &TalkServiceProcessor::process_getLastOpRevision;
    processMap_["getSuggestRevisions"] = &TalkServiceProcessor::process_getSuggestRevisions;
    processMap_["getPreviousMessagesV2WithReadCount"] = &TalkServiceProcessor::process_getPreviousMessagesV2WithReadCount;
    processMap_["getMessageBox"] = &TalkServiceProcessor::process_getMessageBox;
    processMap_["getMessageBoxCompactWrapUp"] = &TalkServiceProcessor::process_getMessageBoxCompactWrapUp;
    processMap_["getMessageBoxCompactWrapUpList"] = &TalkServiceProcessor::process_getMessageBoxCompactWrapUpList;
    processMap_["getMessageBoxList"] = &TalkServiceProcessor::process_getMessageBoxList;
    processMap_["getMessageBoxListByStatus"] = &TalkServiceProcessor::process_getMessageBoxListByStatus;
    processMap_["getMessageBoxWrapUp"] = &TalkServiceProcessor::process_getMessageBoxWrapUp;
    processMap_["getMessageBoxWrapUpList"] = &TalkServiceProcessor::process_getMessageBoxWrapUpList;
    processMap_["getMessagesBySequenceNumber"] = &TalkServiceProcessor::process_getMessagesBySequenceNumber;
    processMap_["getNextMessages"] = &TalkServiceProcessor::process_getNextMessages;
    processMap_["getNotificationPolicy"] = &TalkServiceProcessor::process_getNotificationPolicy;
    processMap_["getPreviousMessages"] = &TalkServiceProcessor::process_getPreviousMessages;
    processMap_["getProfile"] = &TalkServiceProcessor::process_getProfile;
    processMap_["getProximityMatchCandidateList"] = &TalkServiceProcessor::process_getProximityMatchCandidateList;
    processMap_["getProximityMatchCandidates"] = &TalkServiceProcessor::process_getProximityMatchCandidates;
    processMap_["getRecentMessages"] = &TalkServiceProcessor::process_getRecentMessages;
    processMap_["getRecommendationIds"] = &TalkServiceProcessor::process_getRecommendationIds;
    processMap_["getRoom"] = &TalkServiceProcessor::process_getRoom;
    processMap_["getRSAKeyInfo"] = &TalkServiceProcessor::process_getRSAKeyInfo;
    processMap_["getServerTime"] = &TalkServiceProcessor::process_getServerTime;
    processMap_["getSessions"] = &TalkServiceProcessor::process_getSessions;
    processMap_["getSettings"] = &TalkServiceProcessor::process_getSettings;
    processMap_["getGroupsV2"] = &TalkServiceProcessor::process_getGroupsV2;
    processMap_["getSettingsAttributes"] = &TalkServiceProcessor::process_getSettingsAttributes;
    processMap_["getSystemConfiguration"] = &TalkServiceProcessor::process_getSystemConfiguration;
    processMap_["getUserTicket"] = &TalkServiceProcessor::process_getUserTicket;
    processMap_["getWapInvitation"] = &TalkServiceProcessor::process_getWapInvitation;
    processMap_["invalidateUserTicket"] = &TalkServiceProcessor::process_invalidateUserTicket;
    processMap_["inviteFriendsBySms"] = &TalkServiceProcessor::process_inviteFriendsBySms;
    processMap_["inviteIntoGroup"] = &TalkServiceProcessor::process_inviteIntoGroup;
    processMap_["inviteIntoRoom"] = &TalkServiceProcessor::process_inviteIntoRoom;
    processMap_["inviteViaEmail"] = &TalkServiceProcessor::process_inviteViaEmail;
    processMap_["isIdentityIdentifierAvailable"] = &TalkServiceProcessor::process_isIdentityIdentifierAvailable;
    processMap_["isUseridAvailable"] = &TalkServiceProcessor::process_isUseridAvailable;
    processMap_["kickoutFromGroup"] = &TalkServiceProcessor::process_kickoutFromGroup;
    processMap_["reissueGroupTicket"] = &TalkServiceProcessor::process_reissueGroupTicket;
    processMap_["findGroupByTicket"] = &TalkServiceProcessor::process_findGroupByTicket;
    processMap_["leaveGroup"] = &TalkServiceProcessor::process_leaveGroup;
    processMap_["leaveRoom"] = &TalkServiceProcessor::process_leaveRoom;
    processMap_["loginWithIdentityCredential"] = &TalkServiceProcessor::process_loginWithIdentityCredential;
    processMap_["loginWithIdentityCredentialForCertificate"] = &TalkServiceProcessor::process_loginWithIdentityCredentialForCertificate;
    processMap_["loginWithVerifier"] = &TalkServiceProcessor::process_loginWithVerifier;
    processMap_["loginWithVerifierForCerificate"] = &TalkServiceProcessor::process_loginWithVerifierForCerificate;
    processMap_["loginWithVerifierForCertificate"] = &TalkServiceProcessor::process_loginWithVerifierForCertificate;
    processMap_["logout"] = &TalkServiceProcessor::process_logout;
    processMap_["logoutSession"] = &TalkServiceProcessor::process_logoutSession;
    processMap_["noop"] = &TalkServiceProcessor::process_noop;
    processMap_["notifiedRedirect"] = &TalkServiceProcessor::process_notifiedRedirect;
    processMap_["notifyBuddyOnAir"] = &TalkServiceProcessor::process_notifyBuddyOnAir;
    processMap_["notifyIndividualEvent"] = &TalkServiceProcessor::process_notifyIndividualEvent;
    processMap_["notifyInstalled"] = &TalkServiceProcessor::process_notifyInstalled;
    processMap_["notifyRegistrationComplete"] = &TalkServiceProcessor::process_notifyRegistrationComplete;
    processMap_["notifySleep"] = &TalkServiceProcessor::process_notifySleep;
    processMap_["notifyUpdated"] = &TalkServiceProcessor::process_notifyUpdated;
    processMap_["openProximityMatch"] = &TalkServiceProcessor::process_openProximityMatch;
    processMap_["registerBuddyUser"] = &TalkServiceProcessor::process_registerBuddyUser;
    processMap_["registerBuddyUserid"] = &TalkServiceProcessor::process_registerBuddyUserid;
    processMap_["registerDevice"] = &TalkServiceProcessor::process_registerDevice;
    processMap_["registerDeviceWithIdentityCredential"] = &TalkServiceProcessor::process_registerDeviceWithIdentityCredential;
    processMap_["registerDeviceWithoutPhoneNumber"] = &TalkServiceProcessor::process_registerDeviceWithoutPhoneNumber;
    processMap_["registerDeviceWithoutPhoneNumberWithIdentityCredential"] = &TalkServiceProcessor::process_registerDeviceWithoutPhoneNumberWithIdentityCredential;
    processMap_["registerUserid"] = &TalkServiceProcessor::process_registerUserid;
    processMap_["registerWapDevice"] = &TalkServiceProcessor::process_registerWapDevice;
    processMap_["registerWithExistingSnsIdAndIdentityCredential"] = &TalkServiceProcessor::process_registerWithExistingSnsIdAndIdentityCredential;
    processMap_["registerWithSnsId"] = &TalkServiceProcessor::process_registerWithSnsId;
    processMap_["registerWithSnsIdAndIdentityCredential"] = &TalkServiceProcessor::process_registerWithSnsIdAndIdentityCredential;
    processMap_["reissueDeviceCredential"] = &TalkServiceProcessor::process_reissueDeviceCredential;
    processMap_["reissueUserTicket"] = &TalkServiceProcessor::process_reissueUserTicket;
    processMap_["getMessageReadRange"] = &TalkServiceProcessor::process_getMessageReadRange;
    processMap_["rejectGroupInvitation"] = &TalkServiceProcessor::process_rejectGroupInvitation;
    processMap_["releaseSession"] = &TalkServiceProcessor::process_releaseSession;
    processMap_["removeAllMessages"] = &TalkServiceProcessor::process_removeAllMessages;
    processMap_["removeBuddyLocation"] = &TalkServiceProcessor::process_removeBuddyLocation;
    processMap_["removeMessage"] = &TalkServiceProcessor::process_removeMessage;
    processMap_["makeUserAddMyselfAsContact"] = &TalkServiceProcessor::process_makeUserAddMyselfAsContact;
    processMap_["removeMessageFromMyHome"] = &TalkServiceProcessor::process_removeMessageFromMyHome;
    processMap_["removeSnsId"] = &TalkServiceProcessor::process_removeSnsId;
    processMap_["report"] = &TalkServiceProcessor::process_report;
    processMap_["reportContacts"] = &TalkServiceProcessor::process_reportContacts;
    processMap_["reportGroups"] = &TalkServiceProcessor::process_reportGroups;
    processMap_["reportProfile"] = &TalkServiceProcessor::process_reportProfile;
    processMap_["reportRooms"] = &TalkServiceProcessor::process_reportRooms;
    processMap_["findAndAddContactByMetaTag"] = &TalkServiceProcessor::process_findAndAddContactByMetaTag;
    processMap_["reportSettings"] = &TalkServiceProcessor::process_reportSettings;
    processMap_["reportSpam"] = &TalkServiceProcessor::process_reportSpam;
    processMap_["reportSpammer"] = &TalkServiceProcessor::process_reportSpammer;
    processMap_["requestAccountPasswordReset"] = &TalkServiceProcessor::process_requestAccountPasswordReset;
    processMap_["requestEmailConfirmation"] = &TalkServiceProcessor::process_requestEmailConfirmation;
    processMap_["requestIdentityUnbind"] = &TalkServiceProcessor::process_requestIdentityUnbind;
    processMap_["resendEmailConfirmation"] = &TalkServiceProcessor::process_resendEmailConfirmation;
    processMap_["resendPinCode"] = &TalkServiceProcessor::process_resendPinCode;
    processMap_["resendPinCodeBySMS"] = &TalkServiceProcessor::process_resendPinCodeBySMS;
    processMap_["sendChatChecked"] = &TalkServiceProcessor::process_sendChatChecked;
    processMap_["sendMessageAwaitCommit"] = &TalkServiceProcessor::process_sendMessageAwaitCommit;
    processMap_["sendChatRemoved"] = &TalkServiceProcessor::process_sendChatRemoved;
    processMap_["sendContentPreviewUpdated"] = &TalkServiceProcessor::process_sendContentPreviewUpdated;
    processMap_["sendContentReceipt"] = &TalkServiceProcessor::process_sendContentReceipt;
    processMap_["sendDummyPush"] = &TalkServiceProcessor::process_sendDummyPush;
    processMap_["removeE2EEPublicKey"] = &TalkServiceProcessor::process_removeE2EEPublicKey;
    processMap_["negotiateE2EEPublicKey"] = &TalkServiceProcessor::process_negotiateE2EEPublicKey;
    processMap_["getE2EEPublicKey"] = &TalkServiceProcessor::process_getE2EEPublicKey;
    processMap_["requestE2EEKeyExchange"] = &TalkServiceProcessor::process_requestE2EEKeyExchange;
    processMap_["getLastE2EEPublicKeys"] = &TalkServiceProcessor::process_getLastE2EEPublicKeys;
    processMap_["registerE2EEPublicKey"] = &TalkServiceProcessor::process_registerE2EEPublicKey;
    processMap_["getE2EEPublicKeys"] = &TalkServiceProcessor::process_getE2EEPublicKeys;
    processMap_["getE2EEPublicKeysEx"] = &TalkServiceProcessor::process_getE2EEPublicKeysEx;
    processMap_["getReadMessageOpsInBulk"] = &TalkServiceProcessor::process_getReadMessageOpsInBulk;
    processMap_["sendEvent"] = &TalkServiceProcessor::process_sendEvent;
    processMap_["sendMessage"] = &TalkServiceProcessor::process_sendMessage;
    processMap_["sendMessageIgnored"] = &TalkServiceProcessor::process_sendMessageIgnored;
    processMap_["sendMessageReceipt"] = &TalkServiceProcessor::process_sendMessageReceipt;
    processMap_["findContactByMetaTag"] = &TalkServiceProcessor::process_findContactByMetaTag;
    processMap_["sendMessageToMyHome"] = &TalkServiceProcessor::process_sendMessageToMyHome;
    processMap_["setBuddyLocation"] = &TalkServiceProcessor::process_setBuddyLocation;
    processMap_["setIdentityCredential"] = &TalkServiceProcessor::process_setIdentityCredential;
    processMap_["setNotificationsEnabled"] = &TalkServiceProcessor::process_setNotificationsEnabled;
    processMap_["startUpdateVerification"] = &TalkServiceProcessor::process_startUpdateVerification;
    processMap_["startVerification"] = &TalkServiceProcessor::process_startVerification;
    processMap_["updateGroupPreferenceAttribute"] = &TalkServiceProcessor::process_updateGroupPreferenceAttribute;
    processMap_["createRoomV2"] = &TalkServiceProcessor::process_createRoomV2;
    processMap_["storeUpdateProfileAttribute"] = &TalkServiceProcessor::process_storeUpdateProfileAttribute;
    processMap_["syncContactBySnsIds"] = &TalkServiceProcessor::process_syncContactBySnsIds;
    processMap_["syncContacts"] = &TalkServiceProcessor::process_syncContacts;
    processMap_["trySendMessage"] = &TalkServiceProcessor::process_trySendMessage;
    processMap_["getNextMessagesV2"] = &TalkServiceProcessor::process_getNextMessagesV2;
    processMap_["getMessageBoxCompactWrapUpV2"] = &TalkServiceProcessor::process_getMessageBoxCompactWrapUpV2;
    processMap_["getRecentMessagesV2"] = &TalkServiceProcessor::process_getRecentMessagesV2;
    processMap_["validateContactsOnBot"] = &TalkServiceProcessor::process_validateContactsOnBot;
    processMap_["tryFriendRequest"] = &TalkServiceProcessor::process_tryFriendRequest;
    processMap_["unblockContact"] = &TalkServiceProcessor::process_unblockContact;
    processMap_["unblockRecommendation"] = &TalkServiceProcessor::process_unblockRecommendation;
    processMap_["unregisterUserAndDevice"] = &TalkServiceProcessor::process_unregisterUserAndDevice;
    processMap_["updateApnsDeviceToken"] = &TalkServiceProcessor::process_updateApnsDeviceToken;
    processMap_["updateBuddySetting"] = &TalkServiceProcessor::process_updateBuddySetting;
    processMap_["updateC2DMRegistrationId"] = &TalkServiceProcessor::process_updateC2DMRegistrationId;
    processMap_["updateContactSetting"] = &TalkServiceProcessor::process_updateContactSetting;
    processMap_["updateCustomModeSettings"] = &TalkServiceProcessor::process_updateCustomModeSettings;
    processMap_["updateDeviceInfo"] = &TalkServiceProcessor::process_updateDeviceInfo;
    processMap_["updateGroup"] = &TalkServiceProcessor::process_updateGroup;
    processMap_["updateNotificationToken"] = &TalkServiceProcessor::process_updateNotificationToken;
    processMap_["updateNotificationTokenWithBytes"] = &TalkServiceProcessor::process_updateNotificationTokenWithBytes;
    processMap_["updateProfile"] = &TalkServiceProcessor::process_updateProfile;
    processMap_["updateProfileAttribute"] = &TalkServiceProcessor::process_updateProfileAttribute;
    processMap_["updateProfileAttributes"] = &TalkServiceProcessor::process_updateProfileAttributes;
    processMap_["updateRegion"] = &TalkServiceProcessor::process_updateRegion;
    processMap_["updateSettings"] = &TalkServiceProcessor::process_updateSettings;
    processMap_["updateSettings2"] = &TalkServiceProcessor::process_updateSettings2;
    processMap_["updateSettingsAttribute"] = &TalkServiceProcessor::process_updateSettingsAttribute;
    processMap_["updateSettingsAttributes"] = &TalkServiceProcessor::process_updateSettingsAttributes;
    processMap_["verifyIdentityCredential"] = &TalkServiceProcessor::process_verifyIdentityCredential;
    processMap_["verifyIdentityCredentialWithResult"] = &TalkServiceProcessor::process_verifyIdentityCredentialWithResult;
    processMap_["verifyPhone"] = &TalkServiceProcessor::process_verifyPhone;
    processMap_["verifyQrcode"] = &TalkServiceProcessor::process_verifyQrcode;
  }

  virtual ~TalkServiceProcessor() {}
};

class TalkServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TalkServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< TalkServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< TalkServiceIfFactory > handlerFactory_;
};

class TalkServiceMultiface : virtual public TalkServiceIf {
 public:
  TalkServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<TalkServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TalkServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<TalkServiceIf> > ifaces_;
  TalkServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<TalkServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void searchCollection(SearchResult& _return, const std::string& query, const SearchPagingParameter& param) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->searchCollection(_return, query, param);
    }
    ifaces_[i]->searchCollection(_return, query, param);
    return;
  }

  void getChatRoomAnnouncementsBulk(std::map<std::string, std::vector<ChatRoomAnnouncement> > & _return, const std::vector<std::string> & chatRoomMids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getChatRoomAnnouncementsBulk(_return, chatRoomMids);
    }
    ifaces_[i]->getChatRoomAnnouncementsBulk(_return, chatRoomMids);
    return;
  }

  void getChatRoomAnnouncements(std::vector<ChatRoomAnnouncement> & _return, const std::string& chatRoomMid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getChatRoomAnnouncements(_return, chatRoomMid);
    }
    ifaces_[i]->getChatRoomAnnouncements(_return, chatRoomMid);
    return;
  }

  void createChatRoomAnnouncement(ChatRoomAnnouncement& _return, const int32_t reqSeq, const std::string& chatRoomMid, const ChatRoomAnnouncementType::type type, const ChatRoomAnnouncementContents& contents) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createChatRoomAnnouncement(_return, reqSeq, chatRoomMid, type, contents);
    }
    ifaces_[i]->createChatRoomAnnouncement(_return, reqSeq, chatRoomMid, type, contents);
    return;
  }

  void removeChatRoomAnnouncement(const int32_t reqSeq, const std::string& chatRoomMid, const int64_t announcementSeq) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeChatRoomAnnouncement(reqSeq, chatRoomMid, announcementSeq);
    }
    ifaces_[i]->removeChatRoomAnnouncement(reqSeq, chatRoomMid, announcementSeq);
  }

  void unsendMessage(const int32_t seq, const std::string& messageId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unsendMessage(seq, messageId);
    }
    ifaces_[i]->unsendMessage(seq, messageId);
  }

  void getGroupWithoutMembers(Group& _return, const std::string& groupId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getGroupWithoutMembers(_return, groupId);
    }
    ifaces_[i]->getGroupWithoutMembers(_return, groupId);
    return;
  }

  void requestResendMessage(const int32_t reqSeq, const std::string& senderMid, const std::string& messageId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->requestResendMessage(reqSeq, senderMid, messageId);
    }
    ifaces_[i]->requestResendMessage(reqSeq, senderMid, messageId);
  }

  void respondResendMessage(const int32_t reqSeq, const std::string& receiverMid, const std::string& originalMessageId, const Message& resendMessage, const ErrorCode::type errorCode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->respondResendMessage(reqSeq, receiverMid, originalMessageId, resendMessage, errorCode);
    }
    ifaces_[i]->respondResendMessage(reqSeq, receiverMid, originalMessageId, resendMessage, errorCode);
  }

  void acceptGroupInvitation(const int32_t reqSeq, const std::string& groupId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->acceptGroupInvitation(reqSeq, groupId);
    }
    ifaces_[i]->acceptGroupInvitation(reqSeq, groupId);
  }

  void acceptGroupInvitationByTicket(const int32_t reqSeq, const std::string& GroupMid, const std::string& ticketId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->acceptGroupInvitationByTicket(reqSeq, GroupMid, ticketId);
    }
    ifaces_[i]->acceptGroupInvitationByTicket(reqSeq, GroupMid, ticketId);
  }

  void acceptProximityMatches(const std::string& sessionId, const std::set<std::string> & ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->acceptProximityMatches(sessionId, ids);
    }
    ifaces_[i]->acceptProximityMatches(sessionId, ids);
  }

  void acquireCallRoute(std::vector<std::string> & _return, const std::string& to) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->acquireCallRoute(_return, to);
    }
    ifaces_[i]->acquireCallRoute(_return, to);
    return;
  }

  void acquireCallTicket(std::string& _return, const std::string& to) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->acquireCallTicket(_return, to);
    }
    ifaces_[i]->acquireCallTicket(_return, to);
    return;
  }

  void acquireEncryptedAccessToken(std::string& _return, const FeatureType::type featureType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->acquireEncryptedAccessToken(_return, featureType);
    }
    ifaces_[i]->acquireEncryptedAccessToken(_return, featureType);
    return;
  }

  void addSnsId(std::string& _return, const SnsIdType::type snsIdType, const std::string& snsAccessToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addSnsId(_return, snsIdType, snsAccessToken);
    }
    ifaces_[i]->addSnsId(_return, snsIdType, snsAccessToken);
    return;
  }

  void blockContact(const int32_t reqSeq, const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->blockContact(reqSeq, id);
    }
    ifaces_[i]->blockContact(reqSeq, id);
  }

  void blockRecommendation(const int32_t reqSeq, const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->blockRecommendation(reqSeq, id);
    }
    ifaces_[i]->blockRecommendation(reqSeq, id);
  }

  void cancelGroupInvitation(const int32_t reqSeq, const std::string& groupId, const std::vector<std::string> & contactIds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cancelGroupInvitation(reqSeq, groupId, contactIds);
    }
    ifaces_[i]->cancelGroupInvitation(reqSeq, groupId, contactIds);
  }

  void changeVerificationMethod(VerificationSessionData& _return, const std::string& sessionId, const VerificationMethod::type method) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->changeVerificationMethod(_return, sessionId, method);
    }
    ifaces_[i]->changeVerificationMethod(_return, sessionId, method);
    return;
  }

  void clearIdentityCredential() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clearIdentityCredential();
    }
    ifaces_[i]->clearIdentityCredential();
  }

  void clearMessageBox(const std::string& channelId, const std::string& messageBoxId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clearMessageBox(channelId, messageBoxId);
    }
    ifaces_[i]->clearMessageBox(channelId, messageBoxId);
  }

  void closeProximityMatch(const std::string& sessionId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->closeProximityMatch(sessionId);
    }
    ifaces_[i]->closeProximityMatch(sessionId);
  }

  void commitSendMessage(std::map<std::string, std::string> & _return, const int32_t seq, const std::string& messageId, const std::vector<std::string> & receiverMids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commitSendMessage(_return, seq, messageId, receiverMids);
    }
    ifaces_[i]->commitSendMessage(_return, seq, messageId, receiverMids);
    return;
  }

  void commitSendMessages(std::map<std::string, std::string> & _return, const int32_t seq, const std::vector<std::string> & messageIds, const std::vector<std::string> & receiverMids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commitSendMessages(_return, seq, messageIds, receiverMids);
    }
    ifaces_[i]->commitSendMessages(_return, seq, messageIds, receiverMids);
    return;
  }

  void commitUpdateProfile(std::map<std::string, std::string> & _return, const int32_t seq, const std::vector<ProfileAttribute::type> & attrs, const std::vector<std::string> & receiverMids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commitUpdateProfile(_return, seq, attrs, receiverMids);
    }
    ifaces_[i]->commitUpdateProfile(_return, seq, attrs, receiverMids);
    return;
  }

  void confirmEmail(const std::string& verifier, const std::string& pinCode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->confirmEmail(verifier, pinCode);
    }
    ifaces_[i]->confirmEmail(verifier, pinCode);
  }

  void createGroup(Group& _return, const int32_t seq, const std::string& name, const std::vector<std::string> & contactIds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createGroup(_return, seq, name, contactIds);
    }
    ifaces_[i]->createGroup(_return, seq, name, contactIds);
    return;
  }

  void createQrcodeBase64Image(std::string& _return, const std::string& url, const std::string& characterSet, const int32_t imageSize, const int32_t x, const int32_t y, const int32_t width, const int32_t height) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createQrcodeBase64Image(_return, url, characterSet, imageSize, x, y, width, height);
    }
    ifaces_[i]->createQrcodeBase64Image(_return, url, characterSet, imageSize, x, y, width, height);
    return;
  }

  void createRoom(Room& _return, const int32_t reqSeq, const std::vector<std::string> & contactIds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createRoom(_return, reqSeq, contactIds);
    }
    ifaces_[i]->createRoom(_return, reqSeq, contactIds);
    return;
  }

  void createSession(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createSession(_return);
    }
    ifaces_[i]->createSession(_return);
    return;
  }

  void fetchAnnouncements(std::vector<Announcement> & _return, const int32_t lastFetchedIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchAnnouncements(_return, lastFetchedIndex);
    }
    ifaces_[i]->fetchAnnouncements(_return, lastFetchedIndex);
    return;
  }

  void fetchMessages(std::vector<Message> & _return, const int64_t localTs, const int32_t count) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchMessages(_return, localTs, count);
    }
    ifaces_[i]->fetchMessages(_return, localTs, count);
    return;
  }

  void fetchOperations(std::vector<Operation> & _return, const int64_t localRev, const int32_t count) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchOperations(_return, localRev, count);
    }
    ifaces_[i]->fetchOperations(_return, localRev, count);
    return;
  }

  void fetchOps(std::vector<Operation> & _return, const int64_t localRev, const int32_t count, const int64_t globalRev, const int64_t individualRev) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchOps(_return, localRev, count, globalRev, individualRev);
    }
    ifaces_[i]->fetchOps(_return, localRev, count, globalRev, individualRev);
    return;
  }

  void findAndAddContactsByEmail(std::map<std::string, Contact> & _return, const int32_t reqSeq, const std::set<std::string> & emails) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findAndAddContactsByEmail(_return, reqSeq, emails);
    }
    ifaces_[i]->findAndAddContactsByEmail(_return, reqSeq, emails);
    return;
  }

  void findAndAddContactsByMid(std::map<std::string, Contact> & _return, const int32_t reqSeq, const std::string& mid, const ContactType::type type, const std::string& reference) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findAndAddContactsByMid(_return, reqSeq, mid, type, reference);
    }
    ifaces_[i]->findAndAddContactsByMid(_return, reqSeq, mid, type, reference);
    return;
  }

  void findGroupByTicketV2(Group& _return, const std::string& ticketId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findGroupByTicketV2(_return, ticketId);
    }
    ifaces_[i]->findGroupByTicketV2(_return, ticketId);
    return;
  }

  void findAndAddContactsByPhone(std::map<std::string, Contact> & _return, const int32_t reqSeq, const std::set<std::string> & phones) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findAndAddContactsByPhone(_return, reqSeq, phones);
    }
    ifaces_[i]->findAndAddContactsByPhone(_return, reqSeq, phones);
    return;
  }

  void getFriendRequests(std::vector<FriendRequest> & _return, const FriendRequestDirection::type direction, const int64_t lastSeenSeqId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFriendRequests(_return, direction, lastSeenSeqId);
    }
    ifaces_[i]->getFriendRequests(_return, direction, lastSeenSeqId);
    return;
  }

  void removeFriendRequest(const FriendRequestDirection::type direction, const std::string& midOrEMid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeFriendRequest(direction, midOrEMid);
    }
    ifaces_[i]->removeFriendRequest(direction, midOrEMid);
  }

  void findAndAddContactsByUserid(std::map<std::string, Contact> & _return, const int32_t reqSeq, const std::string& userid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findAndAddContactsByUserid(_return, reqSeq, userid);
    }
    ifaces_[i]->findAndAddContactsByUserid(_return, reqSeq, userid);
    return;
  }

  void findContactByUserid(Contact& _return, const std::string& userid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findContactByUserid(_return, userid);
    }
    ifaces_[i]->findContactByUserid(_return, userid);
    return;
  }

  void findContactByUserTicket(Contact& _return, const std::string& ticketIdWithTag) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findContactByUserTicket(_return, ticketIdWithTag);
    }
    ifaces_[i]->findContactByUserTicket(_return, ticketIdWithTag);
    return;
  }

  void findContactsByEmail(std::map<std::string, Contact> & _return, const std::set<std::string> & emails) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findContactsByEmail(_return, emails);
    }
    ifaces_[i]->findContactsByEmail(_return, emails);
    return;
  }

  void findContactsByPhone(std::map<std::string, Contact> & _return, const std::set<std::string> & phones) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findContactsByPhone(_return, phones);
    }
    ifaces_[i]->findContactsByPhone(_return, phones);
    return;
  }

  void findSnsIdUserStatus(SnsIdUserStatus& _return, const SnsIdType::type snsIdType, const std::string& snsAccessToken, const std::string& udidHash) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findSnsIdUserStatus(_return, snsIdType, snsAccessToken, udidHash);
    }
    ifaces_[i]->findSnsIdUserStatus(_return, snsIdType, snsAccessToken, udidHash);
    return;
  }

  void finishUpdateVerification(const std::string& sessionId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->finishUpdateVerification(sessionId);
    }
    ifaces_[i]->finishUpdateVerification(sessionId);
  }

  void generateUserTicket(Ticket& _return, const int64_t expirationTime, const int32_t maxUseCount) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->generateUserTicket(_return, expirationTime, maxUseCount);
    }
    ifaces_[i]->generateUserTicket(_return, expirationTime, maxUseCount);
    return;
  }

  void destroyMessage(const int32_t seq, const std::string& chatId, const std::string& messageId, const int32_t sessionId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->destroyMessage(seq, chatId, messageId, sessionId);
    }
    ifaces_[i]->destroyMessage(seq, chatId, messageId, sessionId);
  }

  void getAcceptedProximityMatches(std::set<std::string> & _return, const std::string& sessionId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAcceptedProximityMatches(_return, sessionId);
    }
    ifaces_[i]->getAcceptedProximityMatches(_return, sessionId);
    return;
  }

  void getActiveBuddySubscriberIds(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getActiveBuddySubscriberIds(_return);
    }
    ifaces_[i]->getActiveBuddySubscriberIds(_return);
    return;
  }

  void getAllContactIds(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllContactIds(_return);
    }
    ifaces_[i]->getAllContactIds(_return);
    return;
  }

  void getAuthQrcode(AuthQrcode& _return, const bool keepLoggedIn, const std::string& systemName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAuthQrcode(_return, keepLoggedIn, systemName);
    }
    ifaces_[i]->getAuthQrcode(_return, keepLoggedIn, systemName);
    return;
  }

  void getBlockedContactIds(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getBlockedContactIds(_return);
    }
    ifaces_[i]->getBlockedContactIds(_return);
    return;
  }

  void registerWithPhoneNumber(RegisterWithPhoneNumberResult& _return, const std::string& sessionId, const std::string& migrationPincodeSessionId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerWithPhoneNumber(_return, sessionId, migrationPincodeSessionId);
    }
    ifaces_[i]->registerWithPhoneNumber(_return, sessionId, migrationPincodeSessionId);
    return;
  }

  void registerWithPhoneNumberAndPassword(RegisterWithPhoneNumberResult& _return, const std::string& sessionId, const std::string& keynm, const std::string& encrypted) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerWithPhoneNumberAndPassword(_return, sessionId, keynm, encrypted);
    }
    ifaces_[i]->registerWithPhoneNumberAndPassword(_return, sessionId, keynm, encrypted);
    return;
  }

  void getAnalyticsInfo(AnalyticsInfo& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAnalyticsInfo(_return);
    }
    ifaces_[i]->getAnalyticsInfo(_return);
    return;
  }

  void reportClientStatistics(const int32_t reqSeq, const ReportCategory::type category, const int32_t count) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reportClientStatistics(reqSeq, category, count);
    }
    ifaces_[i]->reportClientStatistics(reqSeq, category, count);
  }

  void verifyPhoneNumberForLogin(std::string& _return, const std::string& verifierFromPhone, const std::string& pinCodeForPhone, const std::string& verifierFromLogin) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->verifyPhoneNumberForLogin(_return, verifierFromPhone, pinCodeForPhone, verifierFromLogin);
    }
    ifaces_[i]->verifyPhoneNumberForLogin(_return, verifierFromPhone, pinCodeForPhone, verifierFromLogin);
    return;
  }

  void verifyPhoneNumber(PhoneVerificationResult& _return, const std::string& sessionId, const std::string& pinCode, const std::string& udidHash, const std::string& migrationPincodeSessionId, const std::string& oldUdidHash) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->verifyPhoneNumber(_return, sessionId, pinCode, udidHash, migrationPincodeSessionId, oldUdidHash);
    }
    ifaces_[i]->verifyPhoneNumber(_return, sessionId, pinCode, udidHash, migrationPincodeSessionId, oldUdidHash);
    return;
  }

  void getBlockedContactIdsByRange(std::vector<std::string> & _return, const int32_t start, const int32_t count) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getBlockedContactIdsByRange(_return, start, count);
    }
    ifaces_[i]->getBlockedContactIdsByRange(_return, start, count);
    return;
  }

  void getBlockedRecommendationIds(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getBlockedRecommendationIds(_return);
    }
    ifaces_[i]->getBlockedRecommendationIds(_return);
    return;
  }

  void getBuddyBlockerIds(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getBuddyBlockerIds(_return);
    }
    ifaces_[i]->getBuddyBlockerIds(_return);
    return;
  }

  void getBuddyLocation(Geolocation& _return, const std::string& mid, const int32_t index) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getBuddyLocation(_return, mid, index);
    }
    ifaces_[i]->getBuddyLocation(_return, mid, index);
    return;
  }

  void getCompactContactsModifiedSince(std::vector<CompactContact> & _return, const int64_t timestamp) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCompactContactsModifiedSince(_return, timestamp);
    }
    ifaces_[i]->getCompactContactsModifiedSince(_return, timestamp);
    return;
  }

  void getCompactGroup(Group& _return, const std::string& groupId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCompactGroup(_return, groupId);
    }
    ifaces_[i]->getCompactGroup(_return, groupId);
    return;
  }

  void getCompactRoom(Room& _return, const std::string& roomId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCompactRoom(_return, roomId);
    }
    ifaces_[i]->getCompactRoom(_return, roomId);
    return;
  }

  void getContact(Contact& _return, const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getContact(_return, id);
    }
    ifaces_[i]->getContact(_return, id);
    return;
  }

  void getContacts(std::vector<Contact> & _return, const std::vector<std::string> & ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getContacts(_return, ids);
    }
    ifaces_[i]->getContacts(_return, ids);
    return;
  }

  void getContactWithFriendRequestStatus(Contact& _return, const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getContactWithFriendRequestStatus(_return, id);
    }
    ifaces_[i]->getContactWithFriendRequestStatus(_return, id);
    return;
  }

  void getCountryWithRequestIp(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCountryWithRequestIp(_return);
    }
    ifaces_[i]->getCountryWithRequestIp(_return);
    return;
  }

  void getFavoriteMids(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFavoriteMids(_return);
    }
    ifaces_[i]->getFavoriteMids(_return);
    return;
  }

  void getGroup(Group& _return, const std::string& groupId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getGroup(_return, groupId);
    }
    ifaces_[i]->getGroup(_return, groupId);
    return;
  }

  void getGroupIdsInvited(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getGroupIdsInvited(_return);
    }
    ifaces_[i]->getGroupIdsInvited(_return);
    return;
  }

  void getGroupIdsJoined(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getGroupIdsJoined(_return);
    }
    ifaces_[i]->getGroupIdsJoined(_return);
    return;
  }

  void getGroups(std::vector<Group> & _return, const std::vector<std::string> & groupIds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getGroups(_return, groupIds);
    }
    ifaces_[i]->getGroups(_return, groupIds);
    return;
  }

  void getHiddenContactMids(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getHiddenContactMids(_return);
    }
    ifaces_[i]->getHiddenContactMids(_return);
    return;
  }

  void getIdentityIdentifier(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getIdentityIdentifier(_return);
    }
    ifaces_[i]->getIdentityIdentifier(_return);
    return;
  }

  int32_t getLastAnnouncementIndex() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getLastAnnouncementIndex();
    }
    return ifaces_[i]->getLastAnnouncementIndex();
  }

  int64_t getLastOpRevision() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getLastOpRevision();
    }
    return ifaces_[i]->getLastOpRevision();
  }

  void getSuggestRevisions(SuggestDictionaryRevisions& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSuggestRevisions(_return);
    }
    ifaces_[i]->getSuggestRevisions(_return);
    return;
  }

  void getPreviousMessagesV2WithReadCount(std::vector<Message> & _return, const std::string& messageBoxId, const MessageBoxV2MessageId& endMessageId, const int32_t messagesCount) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPreviousMessagesV2WithReadCount(_return, messageBoxId, endMessageId, messagesCount);
    }
    ifaces_[i]->getPreviousMessagesV2WithReadCount(_return, messageBoxId, endMessageId, messagesCount);
    return;
  }

  void getMessageBox(TMessageBox& _return, const std::string& channelId, const std::string& messageBoxId, const int32_t lastMessagesCount) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMessageBox(_return, channelId, messageBoxId, lastMessagesCount);
    }
    ifaces_[i]->getMessageBox(_return, channelId, messageBoxId, lastMessagesCount);
    return;
  }

  void getMessageBoxCompactWrapUp(TMessageBoxWrapUp& _return, const std::string& mid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMessageBoxCompactWrapUp(_return, mid);
    }
    ifaces_[i]->getMessageBoxCompactWrapUp(_return, mid);
    return;
  }

  void getMessageBoxCompactWrapUpList(TMessageBoxWrapUpResponse& _return, const int32_t start, const int32_t messageBoxCount) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMessageBoxCompactWrapUpList(_return, start, messageBoxCount);
    }
    ifaces_[i]->getMessageBoxCompactWrapUpList(_return, start, messageBoxCount);
    return;
  }

  void getMessageBoxList(std::vector<TMessageBox> & _return, const std::string& channelId, const int32_t lastMessagesCount) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMessageBoxList(_return, channelId, lastMessagesCount);
    }
    ifaces_[i]->getMessageBoxList(_return, channelId, lastMessagesCount);
    return;
  }

  void getMessageBoxListByStatus(std::vector<TMessageBox> & _return, const std::string& channelId, const int32_t lastMessagesCount, const int32_t status) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMessageBoxListByStatus(_return, channelId, lastMessagesCount, status);
    }
    ifaces_[i]->getMessageBoxListByStatus(_return, channelId, lastMessagesCount, status);
    return;
  }

  void getMessageBoxWrapUp(TMessageBoxWrapUp& _return, const std::string& mid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMessageBoxWrapUp(_return, mid);
    }
    ifaces_[i]->getMessageBoxWrapUp(_return, mid);
    return;
  }

  void getMessageBoxWrapUpList(TMessageBoxWrapUpResponse& _return, const int32_t start, const int32_t messageBoxCount) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMessageBoxWrapUpList(_return, start, messageBoxCount);
    }
    ifaces_[i]->getMessageBoxWrapUpList(_return, start, messageBoxCount);
    return;
  }

  void getMessagesBySequenceNumber(std::vector<Message> & _return, const std::string& channelId, const std::string& messageBoxId, const int64_t startSeq, const int64_t endSeq) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMessagesBySequenceNumber(_return, channelId, messageBoxId, startSeq, endSeq);
    }
    ifaces_[i]->getMessagesBySequenceNumber(_return, channelId, messageBoxId, startSeq, endSeq);
    return;
  }

  void getNextMessages(std::vector<Message> & _return, const std::string& messageBoxId, const int64_t startSeq, const int32_t messagesCount) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getNextMessages(_return, messageBoxId, startSeq, messagesCount);
    }
    ifaces_[i]->getNextMessages(_return, messageBoxId, startSeq, messagesCount);
    return;
  }

  void getNotificationPolicy(std::vector<NotificationType::type> & _return, const CarrierCode::type carrier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getNotificationPolicy(_return, carrier);
    }
    ifaces_[i]->getNotificationPolicy(_return, carrier);
    return;
  }

  void getPreviousMessages(std::vector<Message> & _return, const std::string& messageBoxId, const int64_t endSeq, const int32_t messagesCount) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPreviousMessages(_return, messageBoxId, endSeq, messagesCount);
    }
    ifaces_[i]->getPreviousMessages(_return, messageBoxId, endSeq, messagesCount);
    return;
  }

  void getProfile(Profile& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getProfile(_return);
    }
    ifaces_[i]->getProfile(_return);
    return;
  }

  void getProximityMatchCandidateList(ProximityMatchCandidateResult& _return, const std::string& sessionId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getProximityMatchCandidateList(_return, sessionId);
    }
    ifaces_[i]->getProximityMatchCandidateList(_return, sessionId);
    return;
  }

  void getProximityMatchCandidates(std::set<Contact> & _return, const std::string& sessionId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getProximityMatchCandidates(_return, sessionId);
    }
    ifaces_[i]->getProximityMatchCandidates(_return, sessionId);
    return;
  }

  void getRecentMessages(std::vector<Message> & _return, const std::string& messageBoxId, const int32_t messagesCount) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRecentMessages(_return, messageBoxId, messagesCount);
    }
    ifaces_[i]->getRecentMessages(_return, messageBoxId, messagesCount);
    return;
  }

  void getRecommendationIds(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRecommendationIds(_return);
    }
    ifaces_[i]->getRecommendationIds(_return);
    return;
  }

  void getRoom(Room& _return, const std::string& roomId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRoom(_return, roomId);
    }
    ifaces_[i]->getRoom(_return, roomId);
    return;
  }

  void getRSAKeyInfo(RSAKey& _return, const IdentityProvider::type provider) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRSAKeyInfo(_return, provider);
    }
    ifaces_[i]->getRSAKeyInfo(_return, provider);
    return;
  }

  int64_t getServerTime() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getServerTime();
    }
    return ifaces_[i]->getServerTime();
  }

  void getSessions(std::vector<LoginSession> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSessions(_return);
    }
    ifaces_[i]->getSessions(_return);
    return;
  }

  void getSettings(Settings& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSettings(_return);
    }
    ifaces_[i]->getSettings(_return);
    return;
  }

  void getGroupsV2(std::vector<Group> & _return, const std::vector<std::string> & groupIds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getGroupsV2(_return, groupIds);
    }
    ifaces_[i]->getGroupsV2(_return, groupIds);
    return;
  }

  void getSettingsAttributes(Settings& _return, const int32_t attrBitset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSettingsAttributes(_return, attrBitset);
    }
    ifaces_[i]->getSettingsAttributes(_return, attrBitset);
    return;
  }

  void getSystemConfiguration(SystemConfiguration& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSystemConfiguration(_return);
    }
    ifaces_[i]->getSystemConfiguration(_return);
    return;
  }

  void getUserTicket(Ticket& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUserTicket(_return);
    }
    ifaces_[i]->getUserTicket(_return);
    return;
  }

  void getWapInvitation(WapInvitation& _return, const std::string& invitationHash) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getWapInvitation(_return, invitationHash);
    }
    ifaces_[i]->getWapInvitation(_return, invitationHash);
    return;
  }

  void invalidateUserTicket() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->invalidateUserTicket();
    }
    ifaces_[i]->invalidateUserTicket();
  }

  void inviteFriendsBySms(const std::vector<std::string> & phoneNumberList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->inviteFriendsBySms(phoneNumberList);
    }
    ifaces_[i]->inviteFriendsBySms(phoneNumberList);
  }

  void inviteIntoGroup(const int32_t reqSeq, const std::string& groupId, const std::vector<std::string> & contactIds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->inviteIntoGroup(reqSeq, groupId, contactIds);
    }
    ifaces_[i]->inviteIntoGroup(reqSeq, groupId, contactIds);
  }

  void inviteIntoRoom(const int32_t reqSeq, const std::string& roomId, const std::vector<std::string> & contactIds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->inviteIntoRoom(reqSeq, roomId, contactIds);
    }
    ifaces_[i]->inviteIntoRoom(reqSeq, roomId, contactIds);
  }

  void inviteViaEmail(const int32_t reqSeq, const std::string& email, const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->inviteViaEmail(reqSeq, email, name);
    }
    ifaces_[i]->inviteViaEmail(reqSeq, email, name);
  }

  bool isIdentityIdentifierAvailable(const IdentityProvider::type provider, const std::string& identifier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isIdentityIdentifierAvailable(provider, identifier);
    }
    return ifaces_[i]->isIdentityIdentifierAvailable(provider, identifier);
  }

  bool isUseridAvailable(const std::string& userid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isUseridAvailable(userid);
    }
    return ifaces_[i]->isUseridAvailable(userid);
  }

  void kickoutFromGroup(const int32_t reqSeq, const std::string& groupId, const std::vector<std::string> & contactIds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->kickoutFromGroup(reqSeq, groupId, contactIds);
    }
    ifaces_[i]->kickoutFromGroup(reqSeq, groupId, contactIds);
  }

  void reissueGroupTicket(std::string& _return, const std::string& groupMid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reissueGroupTicket(_return, groupMid);
    }
    ifaces_[i]->reissueGroupTicket(_return, groupMid);
    return;
  }

  void findGroupByTicket(Group& _return, const std::string& ticketId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findGroupByTicket(_return, ticketId);
    }
    ifaces_[i]->findGroupByTicket(_return, ticketId);
    return;
  }

  void leaveGroup(const int32_t reqSeq, const std::string& groupId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->leaveGroup(reqSeq, groupId);
    }
    ifaces_[i]->leaveGroup(reqSeq, groupId);
  }

  void leaveRoom(const int32_t reqSeq, const std::string& roomId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->leaveRoom(reqSeq, roomId);
    }
    ifaces_[i]->leaveRoom(reqSeq, roomId);
  }

  void loginWithIdentityCredential(std::string& _return, const IdentityProvider::type identityProvider, const std::string& identifier, const std::string& password, const bool keepLoggedIn, const std::string& accessLocation, const std::string& systemName, const std::string& certificate) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loginWithIdentityCredential(_return, identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate);
    }
    ifaces_[i]->loginWithIdentityCredential(_return, identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate);
    return;
  }

  void loginWithIdentityCredentialForCertificate(LoginResult& _return, const IdentityProvider::type identityProvider, const std::string& identifier, const std::string& password, const bool keepLoggedIn, const std::string& accessLocation, const std::string& systemName, const std::string& certificate) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loginWithIdentityCredentialForCertificate(_return, identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate);
    }
    ifaces_[i]->loginWithIdentityCredentialForCertificate(_return, identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate);
    return;
  }

  void loginWithVerifier(std::string& _return, const std::string& verifier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loginWithVerifier(_return, verifier);
    }
    ifaces_[i]->loginWithVerifier(_return, verifier);
    return;
  }

  void loginWithVerifierForCerificate(LoginResult& _return, const std::string& verifier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loginWithVerifierForCerificate(_return, verifier);
    }
    ifaces_[i]->loginWithVerifierForCerificate(_return, verifier);
    return;
  }

  void loginWithVerifierForCertificate(LoginResult& _return, const std::string& verifier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loginWithVerifierForCertificate(_return, verifier);
    }
    ifaces_[i]->loginWithVerifierForCertificate(_return, verifier);
    return;
  }

  void logout() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->logout();
    }
    ifaces_[i]->logout();
  }

  void logoutSession(const std::string& tokenKey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->logoutSession(tokenKey);
    }
    ifaces_[i]->logoutSession(tokenKey);
  }

  void noop() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->noop();
    }
    ifaces_[i]->noop();
  }

  void notifiedRedirect(const std::map<std::string, std::string> & paramMap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->notifiedRedirect(paramMap);
    }
    ifaces_[i]->notifiedRedirect(paramMap);
  }

  void notifyBuddyOnAir(std::map<std::string, std::string> & _return, const int32_t seq, const std::vector<std::string> & receiverMids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->notifyBuddyOnAir(_return, seq, receiverMids);
    }
    ifaces_[i]->notifyBuddyOnAir(_return, seq, receiverMids);
    return;
  }

  void notifyIndividualEvent(const NotificationStatus::type notificationStatus, const std::vector<std::string> & receiverMids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->notifyIndividualEvent(notificationStatus, receiverMids);
    }
    ifaces_[i]->notifyIndividualEvent(notificationStatus, receiverMids);
  }

  void notifyInstalled(const std::string& udidHash, const std::string& applicationTypeWithExtensions) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->notifyInstalled(udidHash, applicationTypeWithExtensions);
    }
    ifaces_[i]->notifyInstalled(udidHash, applicationTypeWithExtensions);
  }

  void notifyRegistrationComplete(const std::string& udidHash, const std::string& applicationTypeWithExtensions) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->notifyRegistrationComplete(udidHash, applicationTypeWithExtensions);
    }
    ifaces_[i]->notifyRegistrationComplete(udidHash, applicationTypeWithExtensions);
  }

  void notifySleep(const int64_t lastRev, const int32_t badge) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->notifySleep(lastRev, badge);
    }
    ifaces_[i]->notifySleep(lastRev, badge);
  }

  void notifyUpdated(const int64_t lastRev, const DeviceInfo& deviceInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->notifyUpdated(lastRev, deviceInfo);
    }
    ifaces_[i]->notifyUpdated(lastRev, deviceInfo);
  }

  void openProximityMatch(std::string& _return, const Location& location) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->openProximityMatch(_return, location);
    }
    ifaces_[i]->openProximityMatch(_return, location);
    return;
  }

  void registerBuddyUser(std::string& _return, const std::string& buddyId, const std::string& registrarPassword) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerBuddyUser(_return, buddyId, registrarPassword);
    }
    ifaces_[i]->registerBuddyUser(_return, buddyId, registrarPassword);
    return;
  }

  void registerBuddyUserid(const int32_t seq, const std::string& userid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerBuddyUserid(seq, userid);
    }
    ifaces_[i]->registerBuddyUserid(seq, userid);
  }

  void registerDevice(std::string& _return, const std::string& sessionId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerDevice(_return, sessionId);
    }
    ifaces_[i]->registerDevice(_return, sessionId);
    return;
  }

  void registerDeviceWithIdentityCredential(std::string& _return, const std::string& sessionId, const IdentityProvider::type provider, const std::string& identifier, const std::string& verifier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerDeviceWithIdentityCredential(_return, sessionId, provider, identifier, verifier);
    }
    ifaces_[i]->registerDeviceWithIdentityCredential(_return, sessionId, provider, identifier, verifier);
    return;
  }

  void registerDeviceWithoutPhoneNumber(std::string& _return, const std::string& region, const std::string& udidHash, const DeviceInfo& deviceInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerDeviceWithoutPhoneNumber(_return, region, udidHash, deviceInfo);
    }
    ifaces_[i]->registerDeviceWithoutPhoneNumber(_return, region, udidHash, deviceInfo);
    return;
  }

  void registerDeviceWithoutPhoneNumberWithIdentityCredential(std::string& _return, const std::string& region, const std::string& udidHash, const DeviceInfo& deviceInfo, const IdentityProvider::type provider, const std::string& identifier, const std::string& verifier, const std::string& mid, const std::string& migrationPincodeSessionId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerDeviceWithoutPhoneNumberWithIdentityCredential(_return, region, udidHash, deviceInfo, provider, identifier, verifier, mid, migrationPincodeSessionId);
    }
    ifaces_[i]->registerDeviceWithoutPhoneNumberWithIdentityCredential(_return, region, udidHash, deviceInfo, provider, identifier, verifier, mid, migrationPincodeSessionId);
    return;
  }

  bool registerUserid(const int32_t reqSeq, const std::string& userid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerUserid(reqSeq, userid);
    }
    return ifaces_[i]->registerUserid(reqSeq, userid);
  }

  void registerWapDevice(std::string& _return, const std::string& invitationHash, const std::string& guidHash, const std::string& email, const DeviceInfo& deviceInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerWapDevice(_return, invitationHash, guidHash, email, deviceInfo);
    }
    ifaces_[i]->registerWapDevice(_return, invitationHash, guidHash, email, deviceInfo);
    return;
  }

  void registerWithExistingSnsIdAndIdentityCredential(std::string& _return, const IdentityCredential& identityCredential, const std::string& region, const std::string& udidHash, const DeviceInfo& deviceInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerWithExistingSnsIdAndIdentityCredential(_return, identityCredential, region, udidHash, deviceInfo);
    }
    ifaces_[i]->registerWithExistingSnsIdAndIdentityCredential(_return, identityCredential, region, udidHash, deviceInfo);
    return;
  }

  void registerWithSnsId(RegisterWithSnsIdResult& _return, const SnsIdType::type snsIdType, const std::string& snsAccessToken, const std::string& region, const std::string& udidHash, const DeviceInfo& deviceInfo, const std::string& mid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerWithSnsId(_return, snsIdType, snsAccessToken, region, udidHash, deviceInfo, mid);
    }
    ifaces_[i]->registerWithSnsId(_return, snsIdType, snsAccessToken, region, udidHash, deviceInfo, mid);
    return;
  }

  void registerWithSnsIdAndIdentityCredential(std::string& _return, const SnsIdType::type snsIdType, const std::string& snsAccessToken, const IdentityCredential& identityCredential, const std::string& region, const std::string& udidHash, const DeviceInfo& deviceInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerWithSnsIdAndIdentityCredential(_return, snsIdType, snsAccessToken, identityCredential, region, udidHash, deviceInfo);
    }
    ifaces_[i]->registerWithSnsIdAndIdentityCredential(_return, snsIdType, snsAccessToken, identityCredential, region, udidHash, deviceInfo);
    return;
  }

  void reissueDeviceCredential(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reissueDeviceCredential(_return);
    }
    ifaces_[i]->reissueDeviceCredential(_return);
    return;
  }

  void reissueUserTicket(std::string& _return, const int64_t expirationTime, const int32_t maxUseCount) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reissueUserTicket(_return, expirationTime, maxUseCount);
    }
    ifaces_[i]->reissueUserTicket(_return, expirationTime, maxUseCount);
    return;
  }

  void getMessageReadRange(std::vector<TMessageReadRange> & _return, const std::vector<std::string> & chatIds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMessageReadRange(_return, chatIds);
    }
    ifaces_[i]->getMessageReadRange(_return, chatIds);
    return;
  }

  void rejectGroupInvitation(const int32_t reqSeq, const std::string& groupId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rejectGroupInvitation(reqSeq, groupId);
    }
    ifaces_[i]->rejectGroupInvitation(reqSeq, groupId);
  }

  void releaseSession() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->releaseSession();
    }
    ifaces_[i]->releaseSession();
  }

  void removeAllMessages(const int32_t seq, const std::string& lastMessageId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeAllMessages(seq, lastMessageId);
    }
    ifaces_[i]->removeAllMessages(seq, lastMessageId);
  }

  void removeBuddyLocation(const std::string& mid, const int32_t index) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeBuddyLocation(mid, index);
    }
    ifaces_[i]->removeBuddyLocation(mid, index);
  }

  bool removeMessage(const std::string& messageId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeMessage(messageId);
    }
    return ifaces_[i]->removeMessage(messageId);
  }

  void makeUserAddMyselfAsContact(ContactTransition& _return, const std::string& contactOwnerMid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->makeUserAddMyselfAsContact(_return, contactOwnerMid);
    }
    ifaces_[i]->makeUserAddMyselfAsContact(_return, contactOwnerMid);
    return;
  }

  bool removeMessageFromMyHome(const std::string& messageId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeMessageFromMyHome(messageId);
    }
    return ifaces_[i]->removeMessageFromMyHome(messageId);
  }

  void removeSnsId(std::string& _return, const SnsIdType::type snsIdType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeSnsId(_return, snsIdType);
    }
    ifaces_[i]->removeSnsId(_return, snsIdType);
    return;
  }

  void report(const int64_t syncOpRevision, const SyncCategory::type category, const std::string& report) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->report(syncOpRevision, category, report);
    }
    ifaces_[i]->report(syncOpRevision, category, report);
  }

  void reportContacts(std::vector<ContactReportResult> & _return, const int64_t syncOpRevision, const SyncCategory::type category, const std::vector<ContactReport> & contactReports, const SyncActionType::type actionType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reportContacts(_return, syncOpRevision, category, contactReports, actionType);
    }
    ifaces_[i]->reportContacts(_return, syncOpRevision, category, contactReports, actionType);
    return;
  }

  void reportGroups(const int64_t syncOpRevision, const std::vector<Group> & groups) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reportGroups(syncOpRevision, groups);
    }
    ifaces_[i]->reportGroups(syncOpRevision, groups);
  }

  void reportProfile(const int64_t syncOpRevision, const Profile& profile) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reportProfile(syncOpRevision, profile);
    }
    ifaces_[i]->reportProfile(syncOpRevision, profile);
  }

  void reportRooms(const int64_t syncOpRevision, const std::vector<Room> & rooms) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reportRooms(syncOpRevision, rooms);
    }
    ifaces_[i]->reportRooms(syncOpRevision, rooms);
  }

  void findAndAddContactByMetaTag(Contact& _return, const int32_t reqSeq, const std::string& userid, const std::string& reference) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findAndAddContactByMetaTag(_return, reqSeq, userid, reference);
    }
    ifaces_[i]->findAndAddContactByMetaTag(_return, reqSeq, userid, reference);
    return;
  }

  void reportSettings(const int64_t syncOpRevision, const Settings& settings) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reportSettings(syncOpRevision, settings);
    }
    ifaces_[i]->reportSettings(syncOpRevision, settings);
  }

  void reportSpam(const std::string& chatMid, const std::vector<std::string> & memberMids, const std::vector<SpammerReason::type> & spammerReasons, const std::vector<std::string> & senderMids, const std::vector<std::string> & spamMessageIds, const std::vector<std::string> & spamMessages) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reportSpam(chatMid, memberMids, spammerReasons, senderMids, spamMessageIds, spamMessages);
    }
    ifaces_[i]->reportSpam(chatMid, memberMids, spammerReasons, senderMids, spamMessageIds, spamMessages);
  }

  void reportSpammer(const std::string& spammerMid, const std::vector<SpammerReason::type> & spammerReasons, const std::vector<std::string> & spamMessageIds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reportSpammer(spammerMid, spammerReasons, spamMessageIds);
    }
    ifaces_[i]->reportSpammer(spammerMid, spammerReasons, spamMessageIds);
  }

  void requestAccountPasswordReset(const IdentityProvider::type provider, const std::string& identifier, const std::string& locale) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->requestAccountPasswordReset(provider, identifier, locale);
    }
    ifaces_[i]->requestAccountPasswordReset(provider, identifier, locale);
  }

  void requestEmailConfirmation(EmailConfirmationSession& _return, const EmailConfirmation& emailConfirmation) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->requestEmailConfirmation(_return, emailConfirmation);
    }
    ifaces_[i]->requestEmailConfirmation(_return, emailConfirmation);
    return;
  }

  void requestIdentityUnbind(const IdentityProvider::type provider, const std::string& identifier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->requestIdentityUnbind(provider, identifier);
    }
    ifaces_[i]->requestIdentityUnbind(provider, identifier);
  }

  void resendEmailConfirmation(EmailConfirmationSession& _return, const std::string& verifier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->resendEmailConfirmation(_return, verifier);
    }
    ifaces_[i]->resendEmailConfirmation(_return, verifier);
    return;
  }

  void resendPinCode(const std::string& sessionId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->resendPinCode(sessionId);
    }
    ifaces_[i]->resendPinCode(sessionId);
  }

  void resendPinCodeBySMS(const std::string& sessionId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->resendPinCodeBySMS(sessionId);
    }
    ifaces_[i]->resendPinCodeBySMS(sessionId);
  }

  void sendChatChecked(const int32_t seq, const std::string& consumer, const std::string& lastMessageId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendChatChecked(seq, consumer, lastMessageId);
    }
    ifaces_[i]->sendChatChecked(seq, consumer, lastMessageId);
  }

  void sendMessageAwaitCommit(CommitMessageResult& _return, const int32_t seq, const Message& message) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendMessageAwaitCommit(_return, seq, message);
    }
    ifaces_[i]->sendMessageAwaitCommit(_return, seq, message);
    return;
  }

  void sendChatRemoved(const int32_t seq, const std::string& consumer, const std::string& lastMessageId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendChatRemoved(seq, consumer, lastMessageId);
    }
    ifaces_[i]->sendChatRemoved(seq, consumer, lastMessageId);
  }

  void sendContentPreviewUpdated(std::map<std::string, std::string> & _return, const int32_t esq, const std::string& messageId, const std::vector<std::string> & receiverMids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendContentPreviewUpdated(_return, esq, messageId, receiverMids);
    }
    ifaces_[i]->sendContentPreviewUpdated(_return, esq, messageId, receiverMids);
    return;
  }

  void sendContentReceipt(const int32_t seq, const std::string& consumer, const std::string& messageId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendContentReceipt(seq, consumer, messageId);
    }
    ifaces_[i]->sendContentReceipt(seq, consumer, messageId);
  }

  void sendDummyPush() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendDummyPush();
    }
    ifaces_[i]->sendDummyPush();
  }

  void removeE2EEPublicKey(const E2EEPublicKey& publicKey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeE2EEPublicKey(publicKey);
    }
    ifaces_[i]->removeE2EEPublicKey(publicKey);
  }

  void negotiateE2EEPublicKey(E2EENegotiationResult& _return, const std::string& mid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->negotiateE2EEPublicKey(_return, mid);
    }
    ifaces_[i]->negotiateE2EEPublicKey(_return, mid);
    return;
  }

  void getE2EEPublicKey(E2EEPublicKey& _return, const std::string& mid, const int32_t version, const int32_t keyId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getE2EEPublicKey(_return, mid, version, keyId);
    }
    ifaces_[i]->getE2EEPublicKey(_return, mid, version, keyId);
    return;
  }

  void requestE2EEKeyExchange(const int32_t reqSeq, const std::string& temporalPublicKey, const E2EEPublicKey& publicKey, const std::string& verifier) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->requestE2EEKeyExchange(reqSeq, temporalPublicKey, publicKey, verifier);
    }
    ifaces_[i]->requestE2EEKeyExchange(reqSeq, temporalPublicKey, publicKey, verifier);
  }

  void getLastE2EEPublicKeys(std::map<std::string, E2EEPublicKey> & _return, const std::string& chatMid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getLastE2EEPublicKeys(_return, chatMid);
    }
    ifaces_[i]->getLastE2EEPublicKeys(_return, chatMid);
    return;
  }

  void registerE2EEPublicKey(E2EEPublicKey& _return, const int32_t reqSeq, const E2EEPublicKey& publicKey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerE2EEPublicKey(_return, reqSeq, publicKey);
    }
    ifaces_[i]->registerE2EEPublicKey(_return, reqSeq, publicKey);
    return;
  }

  void getE2EEPublicKeys(std::vector<E2EEPublicKey> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getE2EEPublicKeys(_return);
    }
    ifaces_[i]->getE2EEPublicKeys(_return);
    return;
  }

  void getE2EEPublicKeysEx(std::vector<E2EEPublicKey> & _return, const bool ignoreE2EEStatus) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getE2EEPublicKeysEx(_return, ignoreE2EEStatus);
    }
    ifaces_[i]->getE2EEPublicKeysEx(_return, ignoreE2EEStatus);
    return;
  }

  void getReadMessageOpsInBulk(std::vector<Operation> & _return, const std::vector<std::string> & chatIds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getReadMessageOpsInBulk(_return, chatIds);
    }
    ifaces_[i]->getReadMessageOpsInBulk(_return, chatIds);
    return;
  }

  void sendEvent(Message& _return, const int32_t seq, const Message& message) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendEvent(_return, seq, message);
    }
    ifaces_[i]->sendEvent(_return, seq, message);
    return;
  }

  void sendMessage(Message& _return, const int32_t seq, const Message& message) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendMessage(_return, seq, message);
    }
    ifaces_[i]->sendMessage(_return, seq, message);
    return;
  }

  void sendMessageIgnored(const int32_t seq, const std::string& consumer, const std::vector<std::string> & messageIds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendMessageIgnored(seq, consumer, messageIds);
    }
    ifaces_[i]->sendMessageIgnored(seq, consumer, messageIds);
  }

  void sendMessageReceipt(const int32_t seq, const std::string& consumer, const std::vector<std::string> & messageIds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendMessageReceipt(seq, consumer, messageIds);
    }
    ifaces_[i]->sendMessageReceipt(seq, consumer, messageIds);
  }

  void findContactByMetaTag(Contact& _return, const std::string& userid, const std::string& reference) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findContactByMetaTag(_return, userid, reference);
    }
    ifaces_[i]->findContactByMetaTag(_return, userid, reference);
    return;
  }

  void sendMessageToMyHome(Message& _return, const int32_t seq, const Message& message) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendMessageToMyHome(_return, seq, message);
    }
    ifaces_[i]->sendMessageToMyHome(_return, seq, message);
    return;
  }

  void setBuddyLocation(const std::string& mid, const int32_t index, const Geolocation& location) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setBuddyLocation(mid, index, location);
    }
    ifaces_[i]->setBuddyLocation(mid, index, location);
  }

  void setIdentityCredential(const std::string& identifier, const std::string& verifier, const IdentityProvider::type provider) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setIdentityCredential(identifier, verifier, provider);
    }
    ifaces_[i]->setIdentityCredential(identifier, verifier, provider);
  }

  void setNotificationsEnabled(const int32_t reqSeq, const MIDType::type type, const std::string& target, const bool enablement) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setNotificationsEnabled(reqSeq, type, target, enablement);
    }
    ifaces_[i]->setNotificationsEnabled(reqSeq, type, target, enablement);
  }

  void startUpdateVerification(VerificationSessionData& _return, const std::string& region, const CarrierCode::type carrier, const std::string& phone, const std::string& udidHash, const DeviceInfo& deviceInfo, const std::string& networkCode, const std::string& locale) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->startUpdateVerification(_return, region, carrier, phone, udidHash, deviceInfo, networkCode, locale);
    }
    ifaces_[i]->startUpdateVerification(_return, region, carrier, phone, udidHash, deviceInfo, networkCode, locale);
    return;
  }

  void startVerification(VerificationSessionData& _return, const std::string& region, const CarrierCode::type carrier, const std::string& phone, const std::string& udidHash, const DeviceInfo& deviceInfo, const std::string& networkCode, const std::string& mid, const std::string& locale, const SIMInfo& simInfo, const std::string& oldUdidHash) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->startVerification(_return, region, carrier, phone, udidHash, deviceInfo, networkCode, mid, locale, simInfo, oldUdidHash);
    }
    ifaces_[i]->startVerification(_return, region, carrier, phone, udidHash, deviceInfo, networkCode, mid, locale, simInfo, oldUdidHash);
    return;
  }

  void updateGroupPreferenceAttribute(const int32_t reqSeq, const std::string& groupMid, const std::map<GroupPreferenceAttribute::type, std::string> & updatedAttrs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateGroupPreferenceAttribute(reqSeq, groupMid, updatedAttrs);
    }
    ifaces_[i]->updateGroupPreferenceAttribute(reqSeq, groupMid, updatedAttrs);
  }

  void createRoomV2(Room& _return, const int32_t reqSeq, const std::vector<std::string> & contactIds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createRoomV2(_return, reqSeq, contactIds);
    }
    ifaces_[i]->createRoomV2(_return, reqSeq, contactIds);
    return;
  }

  void storeUpdateProfileAttribute(const int32_t seq, const ProfileAttribute::type profileAttribute, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->storeUpdateProfileAttribute(seq, profileAttribute, value);
    }
    ifaces_[i]->storeUpdateProfileAttribute(seq, profileAttribute, value);
  }

  void syncContactBySnsIds(std::vector<SnsFriendContactRegistration> & _return, const int32_t reqSeq, const std::vector<SnsFriendModification> & modifications) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->syncContactBySnsIds(_return, reqSeq, modifications);
    }
    ifaces_[i]->syncContactBySnsIds(_return, reqSeq, modifications);
    return;
  }

  void syncContacts(std::map<std::string, ContactRegistration> & _return, const int32_t reqSeq, const std::vector<ContactModification> & localContacts) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->syncContacts(_return, reqSeq, localContacts);
    }
    ifaces_[i]->syncContacts(_return, reqSeq, localContacts);
    return;
  }

  void trySendMessage(Message& _return, const int32_t seq, const Message& message) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->trySendMessage(_return, seq, message);
    }
    ifaces_[i]->trySendMessage(_return, seq, message);
    return;
  }

  void getNextMessagesV2(std::vector<Message> & _return, const std::string& messageBoxId, const MessageBoxV2MessageId& startMessageId, const int32_t messagesCount) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getNextMessagesV2(_return, messageBoxId, startMessageId, messagesCount);
    }
    ifaces_[i]->getNextMessagesV2(_return, messageBoxId, startMessageId, messagesCount);
    return;
  }

  void getMessageBoxCompactWrapUpV2(TMessageBoxWrapUp& _return, const std::string& messageBoxId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMessageBoxCompactWrapUpV2(_return, messageBoxId);
    }
    ifaces_[i]->getMessageBoxCompactWrapUpV2(_return, messageBoxId);
    return;
  }

  void getRecentMessagesV2(std::vector<Message> & _return, const std::string& messageBoxId, const int32_t messagesCount) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRecentMessagesV2(_return, messageBoxId, messagesCount);
    }
    ifaces_[i]->getRecentMessagesV2(_return, messageBoxId, messagesCount);
    return;
  }

  void validateContactsOnBot(std::map<std::string, std::string> & _return, const std::vector<std::string> & contacts) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->validateContactsOnBot(_return, contacts);
    }
    ifaces_[i]->validateContactsOnBot(_return, contacts);
    return;
  }

  void tryFriendRequest(const std::string& midOrEMid, const FriendRequestMethod::type method, const std::string& friendRequestParams) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->tryFriendRequest(midOrEMid, method, friendRequestParams);
    }
    ifaces_[i]->tryFriendRequest(midOrEMid, method, friendRequestParams);
  }

  void unblockContact(const int32_t reqSeq, const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unblockContact(reqSeq, id);
    }
    ifaces_[i]->unblockContact(reqSeq, id);
  }

  void unblockRecommendation(const int32_t reqSeq, const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unblockRecommendation(reqSeq, id);
    }
    ifaces_[i]->unblockRecommendation(reqSeq, id);
  }

  void unregisterUserAndDevice(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unregisterUserAndDevice(_return);
    }
    ifaces_[i]->unregisterUserAndDevice(_return);
    return;
  }

  void updateApnsDeviceToken(const std::string& apnsDeviceToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateApnsDeviceToken(apnsDeviceToken);
    }
    ifaces_[i]->updateApnsDeviceToken(apnsDeviceToken);
  }

  void updateBuddySetting(const std::string& key, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateBuddySetting(key, value);
    }
    ifaces_[i]->updateBuddySetting(key, value);
  }

  void updateC2DMRegistrationId(const std::string& registrationId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateC2DMRegistrationId(registrationId);
    }
    ifaces_[i]->updateC2DMRegistrationId(registrationId);
  }

  void updateContactSetting(const int32_t reqSeq, const std::string& mid, const ContactSetting::type flag, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateContactSetting(reqSeq, mid, flag, value);
    }
    ifaces_[i]->updateContactSetting(reqSeq, mid, flag, value);
  }

  void updateCustomModeSettings(const CustomMode::type customMode, const std::map<std::string, std::string> & paramMap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateCustomModeSettings(customMode, paramMap);
    }
    ifaces_[i]->updateCustomModeSettings(customMode, paramMap);
  }

  void updateDeviceInfo(const std::string& deviceUid, const DeviceInfo& deviceInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateDeviceInfo(deviceUid, deviceInfo);
    }
    ifaces_[i]->updateDeviceInfo(deviceUid, deviceInfo);
  }

  void updateGroup(const int32_t reqSeq, const Group& group) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateGroup(reqSeq, group);
    }
    ifaces_[i]->updateGroup(reqSeq, group);
  }

  void updateNotificationToken(const NotificationType::type type, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateNotificationToken(type, token);
    }
    ifaces_[i]->updateNotificationToken(type, token);
  }

  void updateNotificationTokenWithBytes(const NotificationType::type type, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateNotificationTokenWithBytes(type, token);
    }
    ifaces_[i]->updateNotificationTokenWithBytes(type, token);
  }

  void updateProfile(const int32_t reqSeq, const Profile& profile) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateProfile(reqSeq, profile);
    }
    ifaces_[i]->updateProfile(reqSeq, profile);
  }

  void updateProfileAttribute(const int32_t reqSeq, const ProfileAttribute::type attr, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateProfileAttribute(reqSeq, attr, value);
    }
    ifaces_[i]->updateProfileAttribute(reqSeq, attr, value);
  }

  void updateProfileAttributes(const int32_t reqSeq, const UpdateProfileAttributesRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateProfileAttributes(reqSeq, request);
    }
    ifaces_[i]->updateProfileAttributes(reqSeq, request);
  }

  void updateRegion(const std::string& region) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateRegion(region);
    }
    ifaces_[i]->updateRegion(region);
  }

  void updateSettings(const int32_t reqSeq, const Settings& settings) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateSettings(reqSeq, settings);
    }
    ifaces_[i]->updateSettings(reqSeq, settings);
  }

  int32_t updateSettings2(const int32_t reqSeq, const Settings& settings) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateSettings2(reqSeq, settings);
    }
    return ifaces_[i]->updateSettings2(reqSeq, settings);
  }

  void updateSettingsAttribute(const int32_t reqSeq, const SettingsAttribute::type attr, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateSettingsAttribute(reqSeq, attr, value);
    }
    ifaces_[i]->updateSettingsAttribute(reqSeq, attr, value);
  }

  int32_t updateSettingsAttributes(const int32_t reqSeq, const int32_t attrBitset, const Settings& settings) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateSettingsAttributes(reqSeq, attrBitset, settings);
    }
    return ifaces_[i]->updateSettingsAttributes(reqSeq, attrBitset, settings);
  }

  void verifyIdentityCredential(const IdentityProvider::type identityProvider, const std::string& identifier, const std::string& password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->verifyIdentityCredential(identityProvider, identifier, password);
    }
    ifaces_[i]->verifyIdentityCredential(identityProvider, identifier, password);
  }

  void verifyIdentityCredentialWithResult(UserAuthStatus& _return, const IdentityCredential& identityCredential) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->verifyIdentityCredentialWithResult(_return, identityCredential);
    }
    ifaces_[i]->verifyIdentityCredentialWithResult(_return, identityCredential);
    return;
  }

  VerificationResult::type verifyPhone(const std::string& sessionId, const std::string& pinCode, const std::string& udidHash) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->verifyPhone(sessionId, pinCode, udidHash);
    }
    return ifaces_[i]->verifyPhone(sessionId, pinCode, udidHash);
  }

  void verifyQrcode(std::string& _return, const std::string& verifier, const std::string& pinCode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->verifyQrcode(_return, verifier, pinCode);
    }
    ifaces_[i]->verifyQrcode(_return, verifier, pinCode);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class TalkServiceConcurrentClient : virtual public TalkServiceIf {
 public:
  TalkServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TalkServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void searchCollection(SearchResult& _return, const std::string& query, const SearchPagingParameter& param);
  int32_t send_searchCollection(const std::string& query, const SearchPagingParameter& param);
  void recv_searchCollection(SearchResult& _return, const int32_t seqid);
  void getChatRoomAnnouncementsBulk(std::map<std::string, std::vector<ChatRoomAnnouncement> > & _return, const std::vector<std::string> & chatRoomMids);
  int32_t send_getChatRoomAnnouncementsBulk(const std::vector<std::string> & chatRoomMids);
  void recv_getChatRoomAnnouncementsBulk(std::map<std::string, std::vector<ChatRoomAnnouncement> > & _return, const int32_t seqid);
  void getChatRoomAnnouncements(std::vector<ChatRoomAnnouncement> & _return, const std::string& chatRoomMid);
  int32_t send_getChatRoomAnnouncements(const std::string& chatRoomMid);
  void recv_getChatRoomAnnouncements(std::vector<ChatRoomAnnouncement> & _return, const int32_t seqid);
  void createChatRoomAnnouncement(ChatRoomAnnouncement& _return, const int32_t reqSeq, const std::string& chatRoomMid, const ChatRoomAnnouncementType::type type, const ChatRoomAnnouncementContents& contents);
  int32_t send_createChatRoomAnnouncement(const int32_t reqSeq, const std::string& chatRoomMid, const ChatRoomAnnouncementType::type type, const ChatRoomAnnouncementContents& contents);
  void recv_createChatRoomAnnouncement(ChatRoomAnnouncement& _return, const int32_t seqid);
  void removeChatRoomAnnouncement(const int32_t reqSeq, const std::string& chatRoomMid, const int64_t announcementSeq);
  int32_t send_removeChatRoomAnnouncement(const int32_t reqSeq, const std::string& chatRoomMid, const int64_t announcementSeq);
  void recv_removeChatRoomAnnouncement(const int32_t seqid);
  void unsendMessage(const int32_t seq, const std::string& messageId);
  int32_t send_unsendMessage(const int32_t seq, const std::string& messageId);
  void recv_unsendMessage(const int32_t seqid);
  void getGroupWithoutMembers(Group& _return, const std::string& groupId);
  int32_t send_getGroupWithoutMembers(const std::string& groupId);
  void recv_getGroupWithoutMembers(Group& _return, const int32_t seqid);
  void requestResendMessage(const int32_t reqSeq, const std::string& senderMid, const std::string& messageId);
  int32_t send_requestResendMessage(const int32_t reqSeq, const std::string& senderMid, const std::string& messageId);
  void recv_requestResendMessage(const int32_t seqid);
  void respondResendMessage(const int32_t reqSeq, const std::string& receiverMid, const std::string& originalMessageId, const Message& resendMessage, const ErrorCode::type errorCode);
  int32_t send_respondResendMessage(const int32_t reqSeq, const std::string& receiverMid, const std::string& originalMessageId, const Message& resendMessage, const ErrorCode::type errorCode);
  void recv_respondResendMessage(const int32_t seqid);
  void acceptGroupInvitation(const int32_t reqSeq, const std::string& groupId);
  int32_t send_acceptGroupInvitation(const int32_t reqSeq, const std::string& groupId);
  void recv_acceptGroupInvitation(const int32_t seqid);
  void acceptGroupInvitationByTicket(const int32_t reqSeq, const std::string& GroupMid, const std::string& ticketId);
  int32_t send_acceptGroupInvitationByTicket(const int32_t reqSeq, const std::string& GroupMid, const std::string& ticketId);
  void recv_acceptGroupInvitationByTicket(const int32_t seqid);
  void acceptProximityMatches(const std::string& sessionId, const std::set<std::string> & ids);
  int32_t send_acceptProximityMatches(const std::string& sessionId, const std::set<std::string> & ids);
  void recv_acceptProximityMatches(const int32_t seqid);
  void acquireCallRoute(std::vector<std::string> & _return, const std::string& to);
  int32_t send_acquireCallRoute(const std::string& to);
  void recv_acquireCallRoute(std::vector<std::string> & _return, const int32_t seqid);
  void acquireCallTicket(std::string& _return, const std::string& to);
  int32_t send_acquireCallTicket(const std::string& to);
  void recv_acquireCallTicket(std::string& _return, const int32_t seqid);
  void acquireEncryptedAccessToken(std::string& _return, const FeatureType::type featureType);
  int32_t send_acquireEncryptedAccessToken(const FeatureType::type featureType);
  void recv_acquireEncryptedAccessToken(std::string& _return, const int32_t seqid);
  void addSnsId(std::string& _return, const SnsIdType::type snsIdType, const std::string& snsAccessToken);
  int32_t send_addSnsId(const SnsIdType::type snsIdType, const std::string& snsAccessToken);
  void recv_addSnsId(std::string& _return, const int32_t seqid);
  void blockContact(const int32_t reqSeq, const std::string& id);
  int32_t send_blockContact(const int32_t reqSeq, const std::string& id);
  void recv_blockContact(const int32_t seqid);
  void blockRecommendation(const int32_t reqSeq, const std::string& id);
  int32_t send_blockRecommendation(const int32_t reqSeq, const std::string& id);
  void recv_blockRecommendation(const int32_t seqid);
  void cancelGroupInvitation(const int32_t reqSeq, const std::string& groupId, const std::vector<std::string> & contactIds);
  int32_t send_cancelGroupInvitation(const int32_t reqSeq, const std::string& groupId, const std::vector<std::string> & contactIds);
  void recv_cancelGroupInvitation(const int32_t seqid);
  void changeVerificationMethod(VerificationSessionData& _return, const std::string& sessionId, const VerificationMethod::type method);
  int32_t send_changeVerificationMethod(const std::string& sessionId, const VerificationMethod::type method);
  void recv_changeVerificationMethod(VerificationSessionData& _return, const int32_t seqid);
  void clearIdentityCredential();
  int32_t send_clearIdentityCredential();
  void recv_clearIdentityCredential(const int32_t seqid);
  void clearMessageBox(const std::string& channelId, const std::string& messageBoxId);
  int32_t send_clearMessageBox(const std::string& channelId, const std::string& messageBoxId);
  void recv_clearMessageBox(const int32_t seqid);
  void closeProximityMatch(const std::string& sessionId);
  int32_t send_closeProximityMatch(const std::string& sessionId);
  void recv_closeProximityMatch(const int32_t seqid);
  void commitSendMessage(std::map<std::string, std::string> & _return, const int32_t seq, const std::string& messageId, const std::vector<std::string> & receiverMids);
  int32_t send_commitSendMessage(const int32_t seq, const std::string& messageId, const std::vector<std::string> & receiverMids);
  void recv_commitSendMessage(std::map<std::string, std::string> & _return, const int32_t seqid);
  void commitSendMessages(std::map<std::string, std::string> & _return, const int32_t seq, const std::vector<std::string> & messageIds, const std::vector<std::string> & receiverMids);
  int32_t send_commitSendMessages(const int32_t seq, const std::vector<std::string> & messageIds, const std::vector<std::string> & receiverMids);
  void recv_commitSendMessages(std::map<std::string, std::string> & _return, const int32_t seqid);
  void commitUpdateProfile(std::map<std::string, std::string> & _return, const int32_t seq, const std::vector<ProfileAttribute::type> & attrs, const std::vector<std::string> & receiverMids);
  int32_t send_commitUpdateProfile(const int32_t seq, const std::vector<ProfileAttribute::type> & attrs, const std::vector<std::string> & receiverMids);
  void recv_commitUpdateProfile(std::map<std::string, std::string> & _return, const int32_t seqid);
  void confirmEmail(const std::string& verifier, const std::string& pinCode);
  int32_t send_confirmEmail(const std::string& verifier, const std::string& pinCode);
  void recv_confirmEmail(const int32_t seqid);
  void createGroup(Group& _return, const int32_t seq, const std::string& name, const std::vector<std::string> & contactIds);
  int32_t send_createGroup(const int32_t seq, const std::string& name, const std::vector<std::string> & contactIds);
  void recv_createGroup(Group& _return, const int32_t seqid);
  void createQrcodeBase64Image(std::string& _return, const std::string& url, const std::string& characterSet, const int32_t imageSize, const int32_t x, const int32_t y, const int32_t width, const int32_t height);
  int32_t send_createQrcodeBase64Image(const std::string& url, const std::string& characterSet, const int32_t imageSize, const int32_t x, const int32_t y, const int32_t width, const int32_t height);
  void recv_createQrcodeBase64Image(std::string& _return, const int32_t seqid);
  void createRoom(Room& _return, const int32_t reqSeq, const std::vector<std::string> & contactIds);
  int32_t send_createRoom(const int32_t reqSeq, const std::vector<std::string> & contactIds);
  void recv_createRoom(Room& _return, const int32_t seqid);
  void createSession(std::string& _return);
  int32_t send_createSession();
  void recv_createSession(std::string& _return, const int32_t seqid);
  void fetchAnnouncements(std::vector<Announcement> & _return, const int32_t lastFetchedIndex);
  int32_t send_fetchAnnouncements(const int32_t lastFetchedIndex);
  void recv_fetchAnnouncements(std::vector<Announcement> & _return, const int32_t seqid);
  void fetchMessages(std::vector<Message> & _return, const int64_t localTs, const int32_t count);
  int32_t send_fetchMessages(const int64_t localTs, const int32_t count);
  void recv_fetchMessages(std::vector<Message> & _return, const int32_t seqid);
  void fetchOperations(std::vector<Operation> & _return, const int64_t localRev, const int32_t count);
  int32_t send_fetchOperations(const int64_t localRev, const int32_t count);
  void recv_fetchOperations(std::vector<Operation> & _return, const int32_t seqid);
  void fetchOps(std::vector<Operation> & _return, const int64_t localRev, const int32_t count, const int64_t globalRev, const int64_t individualRev);
  int32_t send_fetchOps(const int64_t localRev, const int32_t count, const int64_t globalRev, const int64_t individualRev);
  void recv_fetchOps(std::vector<Operation> & _return, const int32_t seqid);
  void findAndAddContactsByEmail(std::map<std::string, Contact> & _return, const int32_t reqSeq, const std::set<std::string> & emails);
  int32_t send_findAndAddContactsByEmail(const int32_t reqSeq, const std::set<std::string> & emails);
  void recv_findAndAddContactsByEmail(std::map<std::string, Contact> & _return, const int32_t seqid);
  void findAndAddContactsByMid(std::map<std::string, Contact> & _return, const int32_t reqSeq, const std::string& mid, const ContactType::type type, const std::string& reference);
  int32_t send_findAndAddContactsByMid(const int32_t reqSeq, const std::string& mid, const ContactType::type type, const std::string& reference);
  void recv_findAndAddContactsByMid(std::map<std::string, Contact> & _return, const int32_t seqid);
  void findGroupByTicketV2(Group& _return, const std::string& ticketId);
  int32_t send_findGroupByTicketV2(const std::string& ticketId);
  void recv_findGroupByTicketV2(Group& _return, const int32_t seqid);
  void findAndAddContactsByPhone(std::map<std::string, Contact> & _return, const int32_t reqSeq, const std::set<std::string> & phones);
  int32_t send_findAndAddContactsByPhone(const int32_t reqSeq, const std::set<std::string> & phones);
  void recv_findAndAddContactsByPhone(std::map<std::string, Contact> & _return, const int32_t seqid);
  void getFriendRequests(std::vector<FriendRequest> & _return, const FriendRequestDirection::type direction, const int64_t lastSeenSeqId);
  int32_t send_getFriendRequests(const FriendRequestDirection::type direction, const int64_t lastSeenSeqId);
  void recv_getFriendRequests(std::vector<FriendRequest> & _return, const int32_t seqid);
  void removeFriendRequest(const FriendRequestDirection::type direction, const std::string& midOrEMid);
  int32_t send_removeFriendRequest(const FriendRequestDirection::type direction, const std::string& midOrEMid);
  void recv_removeFriendRequest(const int32_t seqid);
  void findAndAddContactsByUserid(std::map<std::string, Contact> & _return, const int32_t reqSeq, const std::string& userid);
  int32_t send_findAndAddContactsByUserid(const int32_t reqSeq, const std::string& userid);
  void recv_findAndAddContactsByUserid(std::map<std::string, Contact> & _return, const int32_t seqid);
  void findContactByUserid(Contact& _return, const std::string& userid);
  int32_t send_findContactByUserid(const std::string& userid);
  void recv_findContactByUserid(Contact& _return, const int32_t seqid);
  void findContactByUserTicket(Contact& _return, const std::string& ticketIdWithTag);
  int32_t send_findContactByUserTicket(const std::string& ticketIdWithTag);
  void recv_findContactByUserTicket(Contact& _return, const int32_t seqid);
  void findContactsByEmail(std::map<std::string, Contact> & _return, const std::set<std::string> & emails);
  int32_t send_findContactsByEmail(const std::set<std::string> & emails);
  void recv_findContactsByEmail(std::map<std::string, Contact> & _return, const int32_t seqid);
  void findContactsByPhone(std::map<std::string, Contact> & _return, const std::set<std::string> & phones);
  int32_t send_findContactsByPhone(const std::set<std::string> & phones);
  void recv_findContactsByPhone(std::map<std::string, Contact> & _return, const int32_t seqid);
  void findSnsIdUserStatus(SnsIdUserStatus& _return, const SnsIdType::type snsIdType, const std::string& snsAccessToken, const std::string& udidHash);
  int32_t send_findSnsIdUserStatus(const SnsIdType::type snsIdType, const std::string& snsAccessToken, const std::string& udidHash);
  void recv_findSnsIdUserStatus(SnsIdUserStatus& _return, const int32_t seqid);
  void finishUpdateVerification(const std::string& sessionId);
  int32_t send_finishUpdateVerification(const std::string& sessionId);
  void recv_finishUpdateVerification(const int32_t seqid);
  void generateUserTicket(Ticket& _return, const int64_t expirationTime, const int32_t maxUseCount);
  int32_t send_generateUserTicket(const int64_t expirationTime, const int32_t maxUseCount);
  void recv_generateUserTicket(Ticket& _return, const int32_t seqid);
  void destroyMessage(const int32_t seq, const std::string& chatId, const std::string& messageId, const int32_t sessionId);
  int32_t send_destroyMessage(const int32_t seq, const std::string& chatId, const std::string& messageId, const int32_t sessionId);
  void recv_destroyMessage(const int32_t seqid);
  void getAcceptedProximityMatches(std::set<std::string> & _return, const std::string& sessionId);
  int32_t send_getAcceptedProximityMatches(const std::string& sessionId);
  void recv_getAcceptedProximityMatches(std::set<std::string> & _return, const int32_t seqid);
  void getActiveBuddySubscriberIds(std::vector<std::string> & _return);
  int32_t send_getActiveBuddySubscriberIds();
  void recv_getActiveBuddySubscriberIds(std::vector<std::string> & _return, const int32_t seqid);
  void getAllContactIds(std::vector<std::string> & _return);
  int32_t send_getAllContactIds();
  void recv_getAllContactIds(std::vector<std::string> & _return, const int32_t seqid);
  void getAuthQrcode(AuthQrcode& _return, const bool keepLoggedIn, const std::string& systemName);
  int32_t send_getAuthQrcode(const bool keepLoggedIn, const std::string& systemName);
  void recv_getAuthQrcode(AuthQrcode& _return, const int32_t seqid);
  void getBlockedContactIds(std::vector<std::string> & _return);
  int32_t send_getBlockedContactIds();
  void recv_getBlockedContactIds(std::vector<std::string> & _return, const int32_t seqid);
  void registerWithPhoneNumber(RegisterWithPhoneNumberResult& _return, const std::string& sessionId, const std::string& migrationPincodeSessionId);
  int32_t send_registerWithPhoneNumber(const std::string& sessionId, const std::string& migrationPincodeSessionId);
  void recv_registerWithPhoneNumber(RegisterWithPhoneNumberResult& _return, const int32_t seqid);
  void registerWithPhoneNumberAndPassword(RegisterWithPhoneNumberResult& _return, const std::string& sessionId, const std::string& keynm, const std::string& encrypted);
  int32_t send_registerWithPhoneNumberAndPassword(const std::string& sessionId, const std::string& keynm, const std::string& encrypted);
  void recv_registerWithPhoneNumberAndPassword(RegisterWithPhoneNumberResult& _return, const int32_t seqid);
  void getAnalyticsInfo(AnalyticsInfo& _return);
  int32_t send_getAnalyticsInfo();
  void recv_getAnalyticsInfo(AnalyticsInfo& _return, const int32_t seqid);
  void reportClientStatistics(const int32_t reqSeq, const ReportCategory::type category, const int32_t count);
  int32_t send_reportClientStatistics(const int32_t reqSeq, const ReportCategory::type category, const int32_t count);
  void recv_reportClientStatistics(const int32_t seqid);
  void verifyPhoneNumberForLogin(std::string& _return, const std::string& verifierFromPhone, const std::string& pinCodeForPhone, const std::string& verifierFromLogin);
  int32_t send_verifyPhoneNumberForLogin(const std::string& verifierFromPhone, const std::string& pinCodeForPhone, const std::string& verifierFromLogin);
  void recv_verifyPhoneNumberForLogin(std::string& _return, const int32_t seqid);
  void verifyPhoneNumber(PhoneVerificationResult& _return, const std::string& sessionId, const std::string& pinCode, const std::string& udidHash, const std::string& migrationPincodeSessionId, const std::string& oldUdidHash);
  int32_t send_verifyPhoneNumber(const std::string& sessionId, const std::string& pinCode, const std::string& udidHash, const std::string& migrationPincodeSessionId, const std::string& oldUdidHash);
  void recv_verifyPhoneNumber(PhoneVerificationResult& _return, const int32_t seqid);
  void getBlockedContactIdsByRange(std::vector<std::string> & _return, const int32_t start, const int32_t count);
  int32_t send_getBlockedContactIdsByRange(const int32_t start, const int32_t count);
  void recv_getBlockedContactIdsByRange(std::vector<std::string> & _return, const int32_t seqid);
  void getBlockedRecommendationIds(std::vector<std::string> & _return);
  int32_t send_getBlockedRecommendationIds();
  void recv_getBlockedRecommendationIds(std::vector<std::string> & _return, const int32_t seqid);
  void getBuddyBlockerIds(std::vector<std::string> & _return);
  int32_t send_getBuddyBlockerIds();
  void recv_getBuddyBlockerIds(std::vector<std::string> & _return, const int32_t seqid);
  void getBuddyLocation(Geolocation& _return, const std::string& mid, const int32_t index);
  int32_t send_getBuddyLocation(const std::string& mid, const int32_t index);
  void recv_getBuddyLocation(Geolocation& _return, const int32_t seqid);
  void getCompactContactsModifiedSince(std::vector<CompactContact> & _return, const int64_t timestamp);
  int32_t send_getCompactContactsModifiedSince(const int64_t timestamp);
  void recv_getCompactContactsModifiedSince(std::vector<CompactContact> & _return, const int32_t seqid);
  void getCompactGroup(Group& _return, const std::string& groupId);
  int32_t send_getCompactGroup(const std::string& groupId);
  void recv_getCompactGroup(Group& _return, const int32_t seqid);
  void getCompactRoom(Room& _return, const std::string& roomId);
  int32_t send_getCompactRoom(const std::string& roomId);
  void recv_getCompactRoom(Room& _return, const int32_t seqid);
  void getContact(Contact& _return, const std::string& id);
  int32_t send_getContact(const std::string& id);
  void recv_getContact(Contact& _return, const int32_t seqid);
  void getContacts(std::vector<Contact> & _return, const std::vector<std::string> & ids);
  int32_t send_getContacts(const std::vector<std::string> & ids);
  void recv_getContacts(std::vector<Contact> & _return, const int32_t seqid);
  void getContactWithFriendRequestStatus(Contact& _return, const std::string& id);
  int32_t send_getContactWithFriendRequestStatus(const std::string& id);
  void recv_getContactWithFriendRequestStatus(Contact& _return, const int32_t seqid);
  void getCountryWithRequestIp(std::string& _return);
  int32_t send_getCountryWithRequestIp();
  void recv_getCountryWithRequestIp(std::string& _return, const int32_t seqid);
  void getFavoriteMids(std::vector<std::string> & _return);
  int32_t send_getFavoriteMids();
  void recv_getFavoriteMids(std::vector<std::string> & _return, const int32_t seqid);
  void getGroup(Group& _return, const std::string& groupId);
  int32_t send_getGroup(const std::string& groupId);
  void recv_getGroup(Group& _return, const int32_t seqid);
  void getGroupIdsInvited(std::vector<std::string> & _return);
  int32_t send_getGroupIdsInvited();
  void recv_getGroupIdsInvited(std::vector<std::string> & _return, const int32_t seqid);
  void getGroupIdsJoined(std::vector<std::string> & _return);
  int32_t send_getGroupIdsJoined();
  void recv_getGroupIdsJoined(std::vector<std::string> & _return, const int32_t seqid);
  void getGroups(std::vector<Group> & _return, const std::vector<std::string> & groupIds);
  int32_t send_getGroups(const std::vector<std::string> & groupIds);
  void recv_getGroups(std::vector<Group> & _return, const int32_t seqid);
  void getHiddenContactMids(std::vector<std::string> & _return);
  int32_t send_getHiddenContactMids();
  void recv_getHiddenContactMids(std::vector<std::string> & _return, const int32_t seqid);
  void getIdentityIdentifier(std::string& _return);
  int32_t send_getIdentityIdentifier();
  void recv_getIdentityIdentifier(std::string& _return, const int32_t seqid);
  int32_t getLastAnnouncementIndex();
  int32_t send_getLastAnnouncementIndex();
  int32_t recv_getLastAnnouncementIndex(const int32_t seqid);
  int64_t getLastOpRevision();
  int32_t send_getLastOpRevision();
  int64_t recv_getLastOpRevision(const int32_t seqid);
  void getSuggestRevisions(SuggestDictionaryRevisions& _return);
  int32_t send_getSuggestRevisions();
  void recv_getSuggestRevisions(SuggestDictionaryRevisions& _return, const int32_t seqid);
  void getPreviousMessagesV2WithReadCount(std::vector<Message> & _return, const std::string& messageBoxId, const MessageBoxV2MessageId& endMessageId, const int32_t messagesCount);
  int32_t send_getPreviousMessagesV2WithReadCount(const std::string& messageBoxId, const MessageBoxV2MessageId& endMessageId, const int32_t messagesCount);
  void recv_getPreviousMessagesV2WithReadCount(std::vector<Message> & _return, const int32_t seqid);
  void getMessageBox(TMessageBox& _return, const std::string& channelId, const std::string& messageBoxId, const int32_t lastMessagesCount);
  int32_t send_getMessageBox(const std::string& channelId, const std::string& messageBoxId, const int32_t lastMessagesCount);
  void recv_getMessageBox(TMessageBox& _return, const int32_t seqid);
  void getMessageBoxCompactWrapUp(TMessageBoxWrapUp& _return, const std::string& mid);
  int32_t send_getMessageBoxCompactWrapUp(const std::string& mid);
  void recv_getMessageBoxCompactWrapUp(TMessageBoxWrapUp& _return, const int32_t seqid);
  void getMessageBoxCompactWrapUpList(TMessageBoxWrapUpResponse& _return, const int32_t start, const int32_t messageBoxCount);
  int32_t send_getMessageBoxCompactWrapUpList(const int32_t start, const int32_t messageBoxCount);
  void recv_getMessageBoxCompactWrapUpList(TMessageBoxWrapUpResponse& _return, const int32_t seqid);
  void getMessageBoxList(std::vector<TMessageBox> & _return, const std::string& channelId, const int32_t lastMessagesCount);
  int32_t send_getMessageBoxList(const std::string& channelId, const int32_t lastMessagesCount);
  void recv_getMessageBoxList(std::vector<TMessageBox> & _return, const int32_t seqid);
  void getMessageBoxListByStatus(std::vector<TMessageBox> & _return, const std::string& channelId, const int32_t lastMessagesCount, const int32_t status);
  int32_t send_getMessageBoxListByStatus(const std::string& channelId, const int32_t lastMessagesCount, const int32_t status);
  void recv_getMessageBoxListByStatus(std::vector<TMessageBox> & _return, const int32_t seqid);
  void getMessageBoxWrapUp(TMessageBoxWrapUp& _return, const std::string& mid);
  int32_t send_getMessageBoxWrapUp(const std::string& mid);
  void recv_getMessageBoxWrapUp(TMessageBoxWrapUp& _return, const int32_t seqid);
  void getMessageBoxWrapUpList(TMessageBoxWrapUpResponse& _return, const int32_t start, const int32_t messageBoxCount);
  int32_t send_getMessageBoxWrapUpList(const int32_t start, const int32_t messageBoxCount);
  void recv_getMessageBoxWrapUpList(TMessageBoxWrapUpResponse& _return, const int32_t seqid);
  void getMessagesBySequenceNumber(std::vector<Message> & _return, const std::string& channelId, const std::string& messageBoxId, const int64_t startSeq, const int64_t endSeq);
  int32_t send_getMessagesBySequenceNumber(const std::string& channelId, const std::string& messageBoxId, const int64_t startSeq, const int64_t endSeq);
  void recv_getMessagesBySequenceNumber(std::vector<Message> & _return, const int32_t seqid);
  void getNextMessages(std::vector<Message> & _return, const std::string& messageBoxId, const int64_t startSeq, const int32_t messagesCount);
  int32_t send_getNextMessages(const std::string& messageBoxId, const int64_t startSeq, const int32_t messagesCount);
  void recv_getNextMessages(std::vector<Message> & _return, const int32_t seqid);
  void getNotificationPolicy(std::vector<NotificationType::type> & _return, const CarrierCode::type carrier);
  int32_t send_getNotificationPolicy(const CarrierCode::type carrier);
  void recv_getNotificationPolicy(std::vector<NotificationType::type> & _return, const int32_t seqid);
  void getPreviousMessages(std::vector<Message> & _return, const std::string& messageBoxId, const int64_t endSeq, const int32_t messagesCount);
  int32_t send_getPreviousMessages(const std::string& messageBoxId, const int64_t endSeq, const int32_t messagesCount);
  void recv_getPreviousMessages(std::vector<Message> & _return, const int32_t seqid);
  void getProfile(Profile& _return);
  int32_t send_getProfile();
  void recv_getProfile(Profile& _return, const int32_t seqid);
  void getProximityMatchCandidateList(ProximityMatchCandidateResult& _return, const std::string& sessionId);
  int32_t send_getProximityMatchCandidateList(const std::string& sessionId);
  void recv_getProximityMatchCandidateList(ProximityMatchCandidateResult& _return, const int32_t seqid);
  void getProximityMatchCandidates(std::set<Contact> & _return, const std::string& sessionId);
  int32_t send_getProximityMatchCandidates(const std::string& sessionId);
  void recv_getProximityMatchCandidates(std::set<Contact> & _return, const int32_t seqid);
  void getRecentMessages(std::vector<Message> & _return, const std::string& messageBoxId, const int32_t messagesCount);
  int32_t send_getRecentMessages(const std::string& messageBoxId, const int32_t messagesCount);
  void recv_getRecentMessages(std::vector<Message> & _return, const int32_t seqid);
  void getRecommendationIds(std::vector<std::string> & _return);
  int32_t send_getRecommendationIds();
  void recv_getRecommendationIds(std::vector<std::string> & _return, const int32_t seqid);
  void getRoom(Room& _return, const std::string& roomId);
  int32_t send_getRoom(const std::string& roomId);
  void recv_getRoom(Room& _return, const int32_t seqid);
  void getRSAKeyInfo(RSAKey& _return, const IdentityProvider::type provider);
  int32_t send_getRSAKeyInfo(const IdentityProvider::type provider);
  void recv_getRSAKeyInfo(RSAKey& _return, const int32_t seqid);
  int64_t getServerTime();
  int32_t send_getServerTime();
  int64_t recv_getServerTime(const int32_t seqid);
  void getSessions(std::vector<LoginSession> & _return);
  int32_t send_getSessions();
  void recv_getSessions(std::vector<LoginSession> & _return, const int32_t seqid);
  void getSettings(Settings& _return);
  int32_t send_getSettings();
  void recv_getSettings(Settings& _return, const int32_t seqid);
  void getGroupsV2(std::vector<Group> & _return, const std::vector<std::string> & groupIds);
  int32_t send_getGroupsV2(const std::vector<std::string> & groupIds);
  void recv_getGroupsV2(std::vector<Group> & _return, const int32_t seqid);
  void getSettingsAttributes(Settings& _return, const int32_t attrBitset);
  int32_t send_getSettingsAttributes(const int32_t attrBitset);
  void recv_getSettingsAttributes(Settings& _return, const int32_t seqid);
  void getSystemConfiguration(SystemConfiguration& _return);
  int32_t send_getSystemConfiguration();
  void recv_getSystemConfiguration(SystemConfiguration& _return, const int32_t seqid);
  void getUserTicket(Ticket& _return);
  int32_t send_getUserTicket();
  void recv_getUserTicket(Ticket& _return, const int32_t seqid);
  void getWapInvitation(WapInvitation& _return, const std::string& invitationHash);
  int32_t send_getWapInvitation(const std::string& invitationHash);
  void recv_getWapInvitation(WapInvitation& _return, const int32_t seqid);
  void invalidateUserTicket();
  int32_t send_invalidateUserTicket();
  void recv_invalidateUserTicket(const int32_t seqid);
  void inviteFriendsBySms(const std::vector<std::string> & phoneNumberList);
  int32_t send_inviteFriendsBySms(const std::vector<std::string> & phoneNumberList);
  void recv_inviteFriendsBySms(const int32_t seqid);
  void inviteIntoGroup(const int32_t reqSeq, const std::string& groupId, const std::vector<std::string> & contactIds);
  int32_t send_inviteIntoGroup(const int32_t reqSeq, const std::string& groupId, const std::vector<std::string> & contactIds);
  void recv_inviteIntoGroup(const int32_t seqid);
  void inviteIntoRoom(const int32_t reqSeq, const std::string& roomId, const std::vector<std::string> & contactIds);
  int32_t send_inviteIntoRoom(const int32_t reqSeq, const std::string& roomId, const std::vector<std::string> & contactIds);
  void recv_inviteIntoRoom(const int32_t seqid);
  void inviteViaEmail(const int32_t reqSeq, const std::string& email, const std::string& name);
  int32_t send_inviteViaEmail(const int32_t reqSeq, const std::string& email, const std::string& name);
  void recv_inviteViaEmail(const int32_t seqid);
  bool isIdentityIdentifierAvailable(const IdentityProvider::type provider, const std::string& identifier);
  int32_t send_isIdentityIdentifierAvailable(const IdentityProvider::type provider, const std::string& identifier);
  bool recv_isIdentityIdentifierAvailable(const int32_t seqid);
  bool isUseridAvailable(const std::string& userid);
  int32_t send_isUseridAvailable(const std::string& userid);
  bool recv_isUseridAvailable(const int32_t seqid);
  void kickoutFromGroup(const int32_t reqSeq, const std::string& groupId, const std::vector<std::string> & contactIds);
  int32_t send_kickoutFromGroup(const int32_t reqSeq, const std::string& groupId, const std::vector<std::string> & contactIds);
  void recv_kickoutFromGroup(const int32_t seqid);
  void reissueGroupTicket(std::string& _return, const std::string& groupMid);
  int32_t send_reissueGroupTicket(const std::string& groupMid);
  void recv_reissueGroupTicket(std::string& _return, const int32_t seqid);
  void findGroupByTicket(Group& _return, const std::string& ticketId);
  int32_t send_findGroupByTicket(const std::string& ticketId);
  void recv_findGroupByTicket(Group& _return, const int32_t seqid);
  void leaveGroup(const int32_t reqSeq, const std::string& groupId);
  int32_t send_leaveGroup(const int32_t reqSeq, const std::string& groupId);
  void recv_leaveGroup(const int32_t seqid);
  void leaveRoom(const int32_t reqSeq, const std::string& roomId);
  int32_t send_leaveRoom(const int32_t reqSeq, const std::string& roomId);
  void recv_leaveRoom(const int32_t seqid);
  void loginWithIdentityCredential(std::string& _return, const IdentityProvider::type identityProvider, const std::string& identifier, const std::string& password, const bool keepLoggedIn, const std::string& accessLocation, const std::string& systemName, const std::string& certificate);
  int32_t send_loginWithIdentityCredential(const IdentityProvider::type identityProvider, const std::string& identifier, const std::string& password, const bool keepLoggedIn, const std::string& accessLocation, const std::string& systemName, const std::string& certificate);
  void recv_loginWithIdentityCredential(std::string& _return, const int32_t seqid);
  void loginWithIdentityCredentialForCertificate(LoginResult& _return, const IdentityProvider::type identityProvider, const std::string& identifier, const std::string& password, const bool keepLoggedIn, const std::string& accessLocation, const std::string& systemName, const std::string& certificate);
  int32_t send_loginWithIdentityCredentialForCertificate(const IdentityProvider::type identityProvider, const std::string& identifier, const std::string& password, const bool keepLoggedIn, const std::string& accessLocation, const std::string& systemName, const std::string& certificate);
  void recv_loginWithIdentityCredentialForCertificate(LoginResult& _return, const int32_t seqid);
  void loginWithVerifier(std::string& _return, const std::string& verifier);
  int32_t send_loginWithVerifier(const std::string& verifier);
  void recv_loginWithVerifier(std::string& _return, const int32_t seqid);
  void loginWithVerifierForCerificate(LoginResult& _return, const std::string& verifier);
  int32_t send_loginWithVerifierForCerificate(const std::string& verifier);
  void recv_loginWithVerifierForCerificate(LoginResult& _return, const int32_t seqid);
  void loginWithVerifierForCertificate(LoginResult& _return, const std::string& verifier);
  int32_t send_loginWithVerifierForCertificate(const std::string& verifier);
  void recv_loginWithVerifierForCertificate(LoginResult& _return, const int32_t seqid);
  void logout();
  int32_t send_logout();
  void recv_logout(const int32_t seqid);
  void logoutSession(const std::string& tokenKey);
  int32_t send_logoutSession(const std::string& tokenKey);
  void recv_logoutSession(const int32_t seqid);
  void noop();
  int32_t send_noop();
  void recv_noop(const int32_t seqid);
  void notifiedRedirect(const std::map<std::string, std::string> & paramMap);
  int32_t send_notifiedRedirect(const std::map<std::string, std::string> & paramMap);
  void recv_notifiedRedirect(const int32_t seqid);
  void notifyBuddyOnAir(std::map<std::string, std::string> & _return, const int32_t seq, const std::vector<std::string> & receiverMids);
  int32_t send_notifyBuddyOnAir(const int32_t seq, const std::vector<std::string> & receiverMids);
  void recv_notifyBuddyOnAir(std::map<std::string, std::string> & _return, const int32_t seqid);
  void notifyIndividualEvent(const NotificationStatus::type notificationStatus, const std::vector<std::string> & receiverMids);
  int32_t send_notifyIndividualEvent(const NotificationStatus::type notificationStatus, const std::vector<std::string> & receiverMids);
  void recv_notifyIndividualEvent(const int32_t seqid);
  void notifyInstalled(const std::string& udidHash, const std::string& applicationTypeWithExtensions);
  int32_t send_notifyInstalled(const std::string& udidHash, const std::string& applicationTypeWithExtensions);
  void recv_notifyInstalled(const int32_t seqid);
  void notifyRegistrationComplete(const std::string& udidHash, const std::string& applicationTypeWithExtensions);
  int32_t send_notifyRegistrationComplete(const std::string& udidHash, const std::string& applicationTypeWithExtensions);
  void recv_notifyRegistrationComplete(const int32_t seqid);
  void notifySleep(const int64_t lastRev, const int32_t badge);
  int32_t send_notifySleep(const int64_t lastRev, const int32_t badge);
  void recv_notifySleep(const int32_t seqid);
  void notifyUpdated(const int64_t lastRev, const DeviceInfo& deviceInfo);
  int32_t send_notifyUpdated(const int64_t lastRev, const DeviceInfo& deviceInfo);
  void recv_notifyUpdated(const int32_t seqid);
  void openProximityMatch(std::string& _return, const Location& location);
  int32_t send_openProximityMatch(const Location& location);
  void recv_openProximityMatch(std::string& _return, const int32_t seqid);
  void registerBuddyUser(std::string& _return, const std::string& buddyId, const std::string& registrarPassword);
  int32_t send_registerBuddyUser(const std::string& buddyId, const std::string& registrarPassword);
  void recv_registerBuddyUser(std::string& _return, const int32_t seqid);
  void registerBuddyUserid(const int32_t seq, const std::string& userid);
  int32_t send_registerBuddyUserid(const int32_t seq, const std::string& userid);
  void recv_registerBuddyUserid(const int32_t seqid);
  void registerDevice(std::string& _return, const std::string& sessionId);
  int32_t send_registerDevice(const std::string& sessionId);
  void recv_registerDevice(std::string& _return, const int32_t seqid);
  void registerDeviceWithIdentityCredential(std::string& _return, const std::string& sessionId, const IdentityProvider::type provider, const std::string& identifier, const std::string& verifier);
  int32_t send_registerDeviceWithIdentityCredential(const std::string& sessionId, const IdentityProvider::type provider, const std::string& identifier, const std::string& verifier);
  void recv_registerDeviceWithIdentityCredential(std::string& _return, const int32_t seqid);
  void registerDeviceWithoutPhoneNumber(std::string& _return, const std::string& region, const std::string& udidHash, const DeviceInfo& deviceInfo);
  int32_t send_registerDeviceWithoutPhoneNumber(const std::string& region, const std::string& udidHash, const DeviceInfo& deviceInfo);
  void recv_registerDeviceWithoutPhoneNumber(std::string& _return, const int32_t seqid);
  void registerDeviceWithoutPhoneNumberWithIdentityCredential(std::string& _return, const std::string& region, const std::string& udidHash, const DeviceInfo& deviceInfo, const IdentityProvider::type provider, const std::string& identifier, const std::string& verifier, const std::string& mid, const std::string& migrationPincodeSessionId);
  int32_t send_registerDeviceWithoutPhoneNumberWithIdentityCredential(const std::string& region, const std::string& udidHash, const DeviceInfo& deviceInfo, const IdentityProvider::type provider, const std::string& identifier, const std::string& verifier, const std::string& mid, const std::string& migrationPincodeSessionId);
  void recv_registerDeviceWithoutPhoneNumberWithIdentityCredential(std::string& _return, const int32_t seqid);
  bool registerUserid(const int32_t reqSeq, const std::string& userid);
  int32_t send_registerUserid(const int32_t reqSeq, const std::string& userid);
  bool recv_registerUserid(const int32_t seqid);
  void registerWapDevice(std::string& _return, const std::string& invitationHash, const std::string& guidHash, const std::string& email, const DeviceInfo& deviceInfo);
  int32_t send_registerWapDevice(const std::string& invitationHash, const std::string& guidHash, const std::string& email, const DeviceInfo& deviceInfo);
  void recv_registerWapDevice(std::string& _return, const int32_t seqid);
  void registerWithExistingSnsIdAndIdentityCredential(std::string& _return, const IdentityCredential& identityCredential, const std::string& region, const std::string& udidHash, const DeviceInfo& deviceInfo);
  int32_t send_registerWithExistingSnsIdAndIdentityCredential(const IdentityCredential& identityCredential, const std::string& region, const std::string& udidHash, const DeviceInfo& deviceInfo);
  void recv_registerWithExistingSnsIdAndIdentityCredential(std::string& _return, const int32_t seqid);
  void registerWithSnsId(RegisterWithSnsIdResult& _return, const SnsIdType::type snsIdType, const std::string& snsAccessToken, const std::string& region, const std::string& udidHash, const DeviceInfo& deviceInfo, const std::string& mid);
  int32_t send_registerWithSnsId(const SnsIdType::type snsIdType, const std::string& snsAccessToken, const std::string& region, const std::string& udidHash, const DeviceInfo& deviceInfo, const std::string& mid);
  void recv_registerWithSnsId(RegisterWithSnsIdResult& _return, const int32_t seqid);
  void registerWithSnsIdAndIdentityCredential(std::string& _return, const SnsIdType::type snsIdType, const std::string& snsAccessToken, const IdentityCredential& identityCredential, const std::string& region, const std::string& udidHash, const DeviceInfo& deviceInfo);
  int32_t send_registerWithSnsIdAndIdentityCredential(const SnsIdType::type snsIdType, const std::string& snsAccessToken, const IdentityCredential& identityCredential, const std::string& region, const std::string& udidHash, const DeviceInfo& deviceInfo);
  void recv_registerWithSnsIdAndIdentityCredential(std::string& _return, const int32_t seqid);
  void reissueDeviceCredential(std::string& _return);
  int32_t send_reissueDeviceCredential();
  void recv_reissueDeviceCredential(std::string& _return, const int32_t seqid);
  void reissueUserTicket(std::string& _return, const int64_t expirationTime, const int32_t maxUseCount);
  int32_t send_reissueUserTicket(const int64_t expirationTime, const int32_t maxUseCount);
  void recv_reissueUserTicket(std::string& _return, const int32_t seqid);
  void getMessageReadRange(std::vector<TMessageReadRange> & _return, const std::vector<std::string> & chatIds);
  int32_t send_getMessageReadRange(const std::vector<std::string> & chatIds);
  void recv_getMessageReadRange(std::vector<TMessageReadRange> & _return, const int32_t seqid);
  void rejectGroupInvitation(const int32_t reqSeq, const std::string& groupId);
  int32_t send_rejectGroupInvitation(const int32_t reqSeq, const std::string& groupId);
  void recv_rejectGroupInvitation(const int32_t seqid);
  void releaseSession();
  int32_t send_releaseSession();
  void recv_releaseSession(const int32_t seqid);
  void removeAllMessages(const int32_t seq, const std::string& lastMessageId);
  int32_t send_removeAllMessages(const int32_t seq, const std::string& lastMessageId);
  void recv_removeAllMessages(const int32_t seqid);
  void removeBuddyLocation(const std::string& mid, const int32_t index);
  int32_t send_removeBuddyLocation(const std::string& mid, const int32_t index);
  void recv_removeBuddyLocation(const int32_t seqid);
  bool removeMessage(const std::string& messageId);
  int32_t send_removeMessage(const std::string& messageId);
  bool recv_removeMessage(const int32_t seqid);
  void makeUserAddMyselfAsContact(ContactTransition& _return, const std::string& contactOwnerMid);
  int32_t send_makeUserAddMyselfAsContact(const std::string& contactOwnerMid);
  void recv_makeUserAddMyselfAsContact(ContactTransition& _return, const int32_t seqid);
  bool removeMessageFromMyHome(const std::string& messageId);
  int32_t send_removeMessageFromMyHome(const std::string& messageId);
  bool recv_removeMessageFromMyHome(const int32_t seqid);
  void removeSnsId(std::string& _return, const SnsIdType::type snsIdType);
  int32_t send_removeSnsId(const SnsIdType::type snsIdType);
  void recv_removeSnsId(std::string& _return, const int32_t seqid);
  void report(const int64_t syncOpRevision, const SyncCategory::type category, const std::string& report);
  int32_t send_report(const int64_t syncOpRevision, const SyncCategory::type category, const std::string& report);
  void recv_report(const int32_t seqid);
  void reportContacts(std::vector<ContactReportResult> & _return, const int64_t syncOpRevision, const SyncCategory::type category, const std::vector<ContactReport> & contactReports, const SyncActionType::type actionType);
  int32_t send_reportContacts(const int64_t syncOpRevision, const SyncCategory::type category, const std::vector<ContactReport> & contactReports, const SyncActionType::type actionType);
  void recv_reportContacts(std::vector<ContactReportResult> & _return, const int32_t seqid);
  void reportGroups(const int64_t syncOpRevision, const std::vector<Group> & groups);
  int32_t send_reportGroups(const int64_t syncOpRevision, const std::vector<Group> & groups);
  void recv_reportGroups(const int32_t seqid);
  void reportProfile(const int64_t syncOpRevision, const Profile& profile);
  int32_t send_reportProfile(const int64_t syncOpRevision, const Profile& profile);
  void recv_reportProfile(const int32_t seqid);
  void reportRooms(const int64_t syncOpRevision, const std::vector<Room> & rooms);
  int32_t send_reportRooms(const int64_t syncOpRevision, const std::vector<Room> & rooms);
  void recv_reportRooms(const int32_t seqid);
  void findAndAddContactByMetaTag(Contact& _return, const int32_t reqSeq, const std::string& userid, const std::string& reference);
  int32_t send_findAndAddContactByMetaTag(const int32_t reqSeq, const std::string& userid, const std::string& reference);
  void recv_findAndAddContactByMetaTag(Contact& _return, const int32_t seqid);
  void reportSettings(const int64_t syncOpRevision, const Settings& settings);
  int32_t send_reportSettings(const int64_t syncOpRevision, const Settings& settings);
  void recv_reportSettings(const int32_t seqid);
  void reportSpam(const std::string& chatMid, const std::vector<std::string> & memberMids, const std::vector<SpammerReason::type> & spammerReasons, const std::vector<std::string> & senderMids, const std::vector<std::string> & spamMessageIds, const std::vector<std::string> & spamMessages);
  int32_t send_reportSpam(const std::string& chatMid, const std::vector<std::string> & memberMids, const std::vector<SpammerReason::type> & spammerReasons, const std::vector<std::string> & senderMids, const std::vector<std::string> & spamMessageIds, const std::vector<std::string> & spamMessages);
  void recv_reportSpam(const int32_t seqid);
  void reportSpammer(const std::string& spammerMid, const std::vector<SpammerReason::type> & spammerReasons, const std::vector<std::string> & spamMessageIds);
  int32_t send_reportSpammer(const std::string& spammerMid, const std::vector<SpammerReason::type> & spammerReasons, const std::vector<std::string> & spamMessageIds);
  void recv_reportSpammer(const int32_t seqid);
  void requestAccountPasswordReset(const IdentityProvider::type provider, const std::string& identifier, const std::string& locale);
  int32_t send_requestAccountPasswordReset(const IdentityProvider::type provider, const std::string& identifier, const std::string& locale);
  void recv_requestAccountPasswordReset(const int32_t seqid);
  void requestEmailConfirmation(EmailConfirmationSession& _return, const EmailConfirmation& emailConfirmation);
  int32_t send_requestEmailConfirmation(const EmailConfirmation& emailConfirmation);
  void recv_requestEmailConfirmation(EmailConfirmationSession& _return, const int32_t seqid);
  void requestIdentityUnbind(const IdentityProvider::type provider, const std::string& identifier);
  int32_t send_requestIdentityUnbind(const IdentityProvider::type provider, const std::string& identifier);
  void recv_requestIdentityUnbind(const int32_t seqid);
  void resendEmailConfirmation(EmailConfirmationSession& _return, const std::string& verifier);
  int32_t send_resendEmailConfirmation(const std::string& verifier);
  void recv_resendEmailConfirmation(EmailConfirmationSession& _return, const int32_t seqid);
  void resendPinCode(const std::string& sessionId);
  int32_t send_resendPinCode(const std::string& sessionId);
  void recv_resendPinCode(const int32_t seqid);
  void resendPinCodeBySMS(const std::string& sessionId);
  int32_t send_resendPinCodeBySMS(const std::string& sessionId);
  void recv_resendPinCodeBySMS(const int32_t seqid);
  void sendChatChecked(const int32_t seq, const std::string& consumer, const std::string& lastMessageId);
  int32_t send_sendChatChecked(const int32_t seq, const std::string& consumer, const std::string& lastMessageId);
  void recv_sendChatChecked(const int32_t seqid);
  void sendMessageAwaitCommit(CommitMessageResult& _return, const int32_t seq, const Message& message);
  int32_t send_sendMessageAwaitCommit(const int32_t seq, const Message& message);
  void recv_sendMessageAwaitCommit(CommitMessageResult& _return, const int32_t seqid);
  void sendChatRemoved(const int32_t seq, const std::string& consumer, const std::string& lastMessageId);
  int32_t send_sendChatRemoved(const int32_t seq, const std::string& consumer, const std::string& lastMessageId);
  void recv_sendChatRemoved(const int32_t seqid);
  void sendContentPreviewUpdated(std::map<std::string, std::string> & _return, const int32_t esq, const std::string& messageId, const std::vector<std::string> & receiverMids);
  int32_t send_sendContentPreviewUpdated(const int32_t esq, const std::string& messageId, const std::vector<std::string> & receiverMids);
  void recv_sendContentPreviewUpdated(std::map<std::string, std::string> & _return, const int32_t seqid);
  void sendContentReceipt(const int32_t seq, const std::string& consumer, const std::string& messageId);
  int32_t send_sendContentReceipt(const int32_t seq, const std::string& consumer, const std::string& messageId);
  void recv_sendContentReceipt(const int32_t seqid);
  void sendDummyPush();
  int32_t send_sendDummyPush();
  void recv_sendDummyPush(const int32_t seqid);
  void removeE2EEPublicKey(const E2EEPublicKey& publicKey);
  int32_t send_removeE2EEPublicKey(const E2EEPublicKey& publicKey);
  void recv_removeE2EEPublicKey(const int32_t seqid);
  void negotiateE2EEPublicKey(E2EENegotiationResult& _return, const std::string& mid);
  int32_t send_negotiateE2EEPublicKey(const std::string& mid);
  void recv_negotiateE2EEPublicKey(E2EENegotiationResult& _return, const int32_t seqid);
  void getE2EEPublicKey(E2EEPublicKey& _return, const std::string& mid, const int32_t version, const int32_t keyId);
  int32_t send_getE2EEPublicKey(const std::string& mid, const int32_t version, const int32_t keyId);
  void recv_getE2EEPublicKey(E2EEPublicKey& _return, const int32_t seqid);
  void requestE2EEKeyExchange(const int32_t reqSeq, const std::string& temporalPublicKey, const E2EEPublicKey& publicKey, const std::string& verifier);
  int32_t send_requestE2EEKeyExchange(const int32_t reqSeq, const std::string& temporalPublicKey, const E2EEPublicKey& publicKey, const std::string& verifier);
  void recv_requestE2EEKeyExchange(const int32_t seqid);
  void getLastE2EEPublicKeys(std::map<std::string, E2EEPublicKey> & _return, const std::string& chatMid);
  int32_t send_getLastE2EEPublicKeys(const std::string& chatMid);
  void recv_getLastE2EEPublicKeys(std::map<std::string, E2EEPublicKey> & _return, const int32_t seqid);
  void registerE2EEPublicKey(E2EEPublicKey& _return, const int32_t reqSeq, const E2EEPublicKey& publicKey);
  int32_t send_registerE2EEPublicKey(const int32_t reqSeq, const E2EEPublicKey& publicKey);
  void recv_registerE2EEPublicKey(E2EEPublicKey& _return, const int32_t seqid);
  void getE2EEPublicKeys(std::vector<E2EEPublicKey> & _return);
  int32_t send_getE2EEPublicKeys();
  void recv_getE2EEPublicKeys(std::vector<E2EEPublicKey> & _return, const int32_t seqid);
  void getE2EEPublicKeysEx(std::vector<E2EEPublicKey> & _return, const bool ignoreE2EEStatus);
  int32_t send_getE2EEPublicKeysEx(const bool ignoreE2EEStatus);
  void recv_getE2EEPublicKeysEx(std::vector<E2EEPublicKey> & _return, const int32_t seqid);
  void getReadMessageOpsInBulk(std::vector<Operation> & _return, const std::vector<std::string> & chatIds);
  int32_t send_getReadMessageOpsInBulk(const std::vector<std::string> & chatIds);
  void recv_getReadMessageOpsInBulk(std::vector<Operation> & _return, const int32_t seqid);
  void sendEvent(Message& _return, const int32_t seq, const Message& message);
  int32_t send_sendEvent(const int32_t seq, const Message& message);
  void recv_sendEvent(Message& _return, const int32_t seqid);
  void sendMessage(Message& _return, const int32_t seq, const Message& message);
  int32_t send_sendMessage(const int32_t seq, const Message& message);
  void recv_sendMessage(Message& _return, const int32_t seqid);
  void sendMessageIgnored(const int32_t seq, const std::string& consumer, const std::vector<std::string> & messageIds);
  int32_t send_sendMessageIgnored(const int32_t seq, const std::string& consumer, const std::vector<std::string> & messageIds);
  void recv_sendMessageIgnored(const int32_t seqid);
  void sendMessageReceipt(const int32_t seq, const std::string& consumer, const std::vector<std::string> & messageIds);
  int32_t send_sendMessageReceipt(const int32_t seq, const std::string& consumer, const std::vector<std::string> & messageIds);
  void recv_sendMessageReceipt(const int32_t seqid);
  void findContactByMetaTag(Contact& _return, const std::string& userid, const std::string& reference);
  int32_t send_findContactByMetaTag(const std::string& userid, const std::string& reference);
  void recv_findContactByMetaTag(Contact& _return, const int32_t seqid);
  void sendMessageToMyHome(Message& _return, const int32_t seq, const Message& message);
  int32_t send_sendMessageToMyHome(const int32_t seq, const Message& message);
  void recv_sendMessageToMyHome(Message& _return, const int32_t seqid);
  void setBuddyLocation(const std::string& mid, const int32_t index, const Geolocation& location);
  int32_t send_setBuddyLocation(const std::string& mid, const int32_t index, const Geolocation& location);
  void recv_setBuddyLocation(const int32_t seqid);
  void setIdentityCredential(const std::string& identifier, const std::string& verifier, const IdentityProvider::type provider);
  int32_t send_setIdentityCredential(const std::string& identifier, const std::string& verifier, const IdentityProvider::type provider);
  void recv_setIdentityCredential(const int32_t seqid);
  void setNotificationsEnabled(const int32_t reqSeq, const MIDType::type type, const std::string& target, const bool enablement);
  int32_t send_setNotificationsEnabled(const int32_t reqSeq, const MIDType::type type, const std::string& target, const bool enablement);
  void recv_setNotificationsEnabled(const int32_t seqid);
  void startUpdateVerification(VerificationSessionData& _return, const std::string& region, const CarrierCode::type carrier, const std::string& phone, const std::string& udidHash, const DeviceInfo& deviceInfo, const std::string& networkCode, const std::string& locale);
  int32_t send_startUpdateVerification(const std::string& region, const CarrierCode::type carrier, const std::string& phone, const std::string& udidHash, const DeviceInfo& deviceInfo, const std::string& networkCode, const std::string& locale);
  void recv_startUpdateVerification(VerificationSessionData& _return, const int32_t seqid);
  void startVerification(VerificationSessionData& _return, const std::string& region, const CarrierCode::type carrier, const std::string& phone, const std::string& udidHash, const DeviceInfo& deviceInfo, const std::string& networkCode, const std::string& mid, const std::string& locale, const SIMInfo& simInfo, const std::string& oldUdidHash);
  int32_t send_startVerification(const std::string& region, const CarrierCode::type carrier, const std::string& phone, const std::string& udidHash, const DeviceInfo& deviceInfo, const std::string& networkCode, const std::string& mid, const std::string& locale, const SIMInfo& simInfo, const std::string& oldUdidHash);
  void recv_startVerification(VerificationSessionData& _return, const int32_t seqid);
  void updateGroupPreferenceAttribute(const int32_t reqSeq, const std::string& groupMid, const std::map<GroupPreferenceAttribute::type, std::string> & updatedAttrs);
  int32_t send_updateGroupPreferenceAttribute(const int32_t reqSeq, const std::string& groupMid, const std::map<GroupPreferenceAttribute::type, std::string> & updatedAttrs);
  void recv_updateGroupPreferenceAttribute(const int32_t seqid);
  void createRoomV2(Room& _return, const int32_t reqSeq, const std::vector<std::string> & contactIds);
  int32_t send_createRoomV2(const int32_t reqSeq, const std::vector<std::string> & contactIds);
  void recv_createRoomV2(Room& _return, const int32_t seqid);
  void storeUpdateProfileAttribute(const int32_t seq, const ProfileAttribute::type profileAttribute, const std::string& value);
  int32_t send_storeUpdateProfileAttribute(const int32_t seq, const ProfileAttribute::type profileAttribute, const std::string& value);
  void recv_storeUpdateProfileAttribute(const int32_t seqid);
  void syncContactBySnsIds(std::vector<SnsFriendContactRegistration> & _return, const int32_t reqSeq, const std::vector<SnsFriendModification> & modifications);
  int32_t send_syncContactBySnsIds(const int32_t reqSeq, const std::vector<SnsFriendModification> & modifications);
  void recv_syncContactBySnsIds(std::vector<SnsFriendContactRegistration> & _return, const int32_t seqid);
  void syncContacts(std::map<std::string, ContactRegistration> & _return, const int32_t reqSeq, const std::vector<ContactModification> & localContacts);
  int32_t send_syncContacts(const int32_t reqSeq, const std::vector<ContactModification> & localContacts);
  void recv_syncContacts(std::map<std::string, ContactRegistration> & _return, const int32_t seqid);
  void trySendMessage(Message& _return, const int32_t seq, const Message& message);
  int32_t send_trySendMessage(const int32_t seq, const Message& message);
  void recv_trySendMessage(Message& _return, const int32_t seqid);
  void getNextMessagesV2(std::vector<Message> & _return, const std::string& messageBoxId, const MessageBoxV2MessageId& startMessageId, const int32_t messagesCount);
  int32_t send_getNextMessagesV2(const std::string& messageBoxId, const MessageBoxV2MessageId& startMessageId, const int32_t messagesCount);
  void recv_getNextMessagesV2(std::vector<Message> & _return, const int32_t seqid);
  void getMessageBoxCompactWrapUpV2(TMessageBoxWrapUp& _return, const std::string& messageBoxId);
  int32_t send_getMessageBoxCompactWrapUpV2(const std::string& messageBoxId);
  void recv_getMessageBoxCompactWrapUpV2(TMessageBoxWrapUp& _return, const int32_t seqid);
  void getRecentMessagesV2(std::vector<Message> & _return, const std::string& messageBoxId, const int32_t messagesCount);
  int32_t send_getRecentMessagesV2(const std::string& messageBoxId, const int32_t messagesCount);
  void recv_getRecentMessagesV2(std::vector<Message> & _return, const int32_t seqid);
  void validateContactsOnBot(std::map<std::string, std::string> & _return, const std::vector<std::string> & contacts);
  int32_t send_validateContactsOnBot(const std::vector<std::string> & contacts);
  void recv_validateContactsOnBot(std::map<std::string, std::string> & _return, const int32_t seqid);
  void tryFriendRequest(const std::string& midOrEMid, const FriendRequestMethod::type method, const std::string& friendRequestParams);
  int32_t send_tryFriendRequest(const std::string& midOrEMid, const FriendRequestMethod::type method, const std::string& friendRequestParams);
  void recv_tryFriendRequest(const int32_t seqid);
  void unblockContact(const int32_t reqSeq, const std::string& id);
  int32_t send_unblockContact(const int32_t reqSeq, const std::string& id);
  void recv_unblockContact(const int32_t seqid);
  void unblockRecommendation(const int32_t reqSeq, const std::string& id);
  int32_t send_unblockRecommendation(const int32_t reqSeq, const std::string& id);
  void recv_unblockRecommendation(const int32_t seqid);
  void unregisterUserAndDevice(std::string& _return);
  int32_t send_unregisterUserAndDevice();
  void recv_unregisterUserAndDevice(std::string& _return, const int32_t seqid);
  void updateApnsDeviceToken(const std::string& apnsDeviceToken);
  int32_t send_updateApnsDeviceToken(const std::string& apnsDeviceToken);
  void recv_updateApnsDeviceToken(const int32_t seqid);
  void updateBuddySetting(const std::string& key, const std::string& value);
  int32_t send_updateBuddySetting(const std::string& key, const std::string& value);
  void recv_updateBuddySetting(const int32_t seqid);
  void updateC2DMRegistrationId(const std::string& registrationId);
  int32_t send_updateC2DMRegistrationId(const std::string& registrationId);
  void recv_updateC2DMRegistrationId(const int32_t seqid);
  void updateContactSetting(const int32_t reqSeq, const std::string& mid, const ContactSetting::type flag, const std::string& value);
  int32_t send_updateContactSetting(const int32_t reqSeq, const std::string& mid, const ContactSetting::type flag, const std::string& value);
  void recv_updateContactSetting(const int32_t seqid);
  void updateCustomModeSettings(const CustomMode::type customMode, const std::map<std::string, std::string> & paramMap);
  int32_t send_updateCustomModeSettings(const CustomMode::type customMode, const std::map<std::string, std::string> & paramMap);
  void recv_updateCustomModeSettings(const int32_t seqid);
  void updateDeviceInfo(const std::string& deviceUid, const DeviceInfo& deviceInfo);
  int32_t send_updateDeviceInfo(const std::string& deviceUid, const DeviceInfo& deviceInfo);
  void recv_updateDeviceInfo(const int32_t seqid);
  void updateGroup(const int32_t reqSeq, const Group& group);
  int32_t send_updateGroup(const int32_t reqSeq, const Group& group);
  void recv_updateGroup(const int32_t seqid);
  void updateNotificationToken(const NotificationType::type type, const std::string& token);
  int32_t send_updateNotificationToken(const NotificationType::type type, const std::string& token);
  void recv_updateNotificationToken(const int32_t seqid);
  void updateNotificationTokenWithBytes(const NotificationType::type type, const std::string& token);
  int32_t send_updateNotificationTokenWithBytes(const NotificationType::type type, const std::string& token);
  void recv_updateNotificationTokenWithBytes(const int32_t seqid);
  void updateProfile(const int32_t reqSeq, const Profile& profile);
  int32_t send_updateProfile(const int32_t reqSeq, const Profile& profile);
  void recv_updateProfile(const int32_t seqid);
  void updateProfileAttribute(const int32_t reqSeq, const ProfileAttribute::type attr, const std::string& value);
  int32_t send_updateProfileAttribute(const int32_t reqSeq, const ProfileAttribute::type attr, const std::string& value);
  void recv_updateProfileAttribute(const int32_t seqid);
  void updateProfileAttributes(const int32_t reqSeq, const UpdateProfileAttributesRequest& request);
  int32_t send_updateProfileAttributes(const int32_t reqSeq, const UpdateProfileAttributesRequest& request);
  void recv_updateProfileAttributes(const int32_t seqid);
  void updateRegion(const std::string& region);
  int32_t send_updateRegion(const std::string& region);
  void recv_updateRegion(const int32_t seqid);
  void updateSettings(const int32_t reqSeq, const Settings& settings);
  int32_t send_updateSettings(const int32_t reqSeq, const Settings& settings);
  void recv_updateSettings(const int32_t seqid);
  int32_t updateSettings2(const int32_t reqSeq, const Settings& settings);
  int32_t send_updateSettings2(const int32_t reqSeq, const Settings& settings);
  int32_t recv_updateSettings2(const int32_t seqid);
  void updateSettingsAttribute(const int32_t reqSeq, const SettingsAttribute::type attr, const std::string& value);
  int32_t send_updateSettingsAttribute(const int32_t reqSeq, const SettingsAttribute::type attr, const std::string& value);
  void recv_updateSettingsAttribute(const int32_t seqid);
  int32_t updateSettingsAttributes(const int32_t reqSeq, const int32_t attrBitset, const Settings& settings);
  int32_t send_updateSettingsAttributes(const int32_t reqSeq, const int32_t attrBitset, const Settings& settings);
  int32_t recv_updateSettingsAttributes(const int32_t seqid);
  void verifyIdentityCredential(const IdentityProvider::type identityProvider, const std::string& identifier, const std::string& password);
  int32_t send_verifyIdentityCredential(const IdentityProvider::type identityProvider, const std::string& identifier, const std::string& password);
  void recv_verifyIdentityCredential(const int32_t seqid);
  void verifyIdentityCredentialWithResult(UserAuthStatus& _return, const IdentityCredential& identityCredential);
  int32_t send_verifyIdentityCredentialWithResult(const IdentityCredential& identityCredential);
  void recv_verifyIdentityCredentialWithResult(UserAuthStatus& _return, const int32_t seqid);
  VerificationResult::type verifyPhone(const std::string& sessionId, const std::string& pinCode, const std::string& udidHash);
  int32_t send_verifyPhone(const std::string& sessionId, const std::string& pinCode, const std::string& udidHash);
  VerificationResult::type recv_verifyPhone(const int32_t seqid);
  void verifyQrcode(std::string& _return, const std::string& verifier, const std::string& pinCode);
  int32_t send_verifyQrcode(const std::string& verifier, const std::string& pinCode);
  void recv_verifyQrcode(std::string& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
