/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "line_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>



int _kApplicationTypeValues[] = {
  ApplicationType::IOS,
  ApplicationType::IOS_RC,
  ApplicationType::IOS_BETA,
  ApplicationType::IOS_ALPHA,
  ApplicationType::ANDROID,
  ApplicationType::ANDROID_RC,
  ApplicationType::ANDROID_BETA,
  ApplicationType::ANDROID_ALPHA,
  ApplicationType::WAP,
  ApplicationType::WAP_RC,
  ApplicationType::WAP_BETA,
  ApplicationType::WAP_ALPHA,
  ApplicationType::BOT,
  ApplicationType::BOT_RC,
  ApplicationType::BOT_BETA,
  ApplicationType::BOT_ALPHA,
  ApplicationType::WEB,
  ApplicationType::WEB_RC,
  ApplicationType::WEB_BETA,
  ApplicationType::WEB_ALPHA,
  ApplicationType::DESKTOPWIN,
  ApplicationType::DESKTOPWIN_RC,
  ApplicationType::DESKTOPWIN_BETA,
  ApplicationType::DESKTOPWIN_ALPHA,
  ApplicationType::DESKTOPMAC,
  ApplicationType::DESKTOPMAC_RC,
  ApplicationType::DESKTOPMAC_BETA,
  ApplicationType::DESKTOPMAC_ALPHA,
  ApplicationType::CHANNELGW,
  ApplicationType::CHANNELGW_RC,
  ApplicationType::CHANNELGW_BETA,
  ApplicationType::CHANNELGW_ALPHA,
  ApplicationType::CHANNELCP,
  ApplicationType::CHANNELCP_RC,
  ApplicationType::CHANNELCP_BETA,
  ApplicationType::CHANNELCP_ALPHA,
  ApplicationType::WINPHONE,
  ApplicationType::WINPHONE_RC,
  ApplicationType::WINPHONE_BETA,
  ApplicationType::WINPHONE_ALPHA,
  ApplicationType::BLACKBERRY,
  ApplicationType::BLACKBERRY_RC,
  ApplicationType::BLACKBERRY_BETA,
  ApplicationType::BLACKBERRY_ALPHA,
  ApplicationType::WINMETRO,
  ApplicationType::WINMETRO_RC,
  ApplicationType::WINMETRO_BETA,
  ApplicationType::WINMETRO_ALPHA,
  ApplicationType::S40,
  ApplicationType::S40_RC,
  ApplicationType::S40_BETA,
  ApplicationType::S40_ALPHA,
  ApplicationType::CHRONO,
  ApplicationType::CHRONO_RC,
  ApplicationType::CHRONO_BETA,
  ApplicationType::CHRONO_ALPHA,
  ApplicationType::TIZEN,
  ApplicationType::TIZEN_RC,
  ApplicationType::TIZEN_BETA,
  ApplicationType::TIZEN_ALPHA,
  ApplicationType::VIRTUAL,
  ApplicationType::FIREFOXOS,
  ApplicationType::FIREFOXOS_RC,
  ApplicationType::FIREFOXOS_BETA,
  ApplicationType::FIREFOXOS_ALPHA,
  ApplicationType::IOSIPAD,
  ApplicationType::IOSIPAD_RC,
  ApplicationType::IOSIPAD_BETA,
  ApplicationType::IOSIPAD_ALPHA,
  ApplicationType::BIZIOS,
  ApplicationType::BIZIOS_RC,
  ApplicationType::BIZIOS_BETA,
  ApplicationType::BIZIOS_ALPHA,
  ApplicationType::BIZANDROID,
  ApplicationType::BIZANDROID_RC,
  ApplicationType::BIZANDROID_BETA,
  ApplicationType::BIZANDROID_ALPHA,
  ApplicationType::BIZBOT,
  ApplicationType::BIZBOT_RC,
  ApplicationType::BIZBOT_BETA,
  ApplicationType::BIZBOT_ALPHA,
  ApplicationType::CHROMEOS,
  ApplicationType::CHROMEOS_RC,
  ApplicationType::CHROMEOS_BETA,
  ApplicationType::CHROMEOS_ALPHA,
  ApplicationType::ANDROIDLITE,
  ApplicationType::ANDROIDLITE_RC,
  ApplicationType::ANDROIDLITE_BETA,
  ApplicationType::ANDROIDLITE_ALPHA,
  ApplicationType::WIN10,
  ApplicationType::WIN10_RC,
  ApplicationType::WIN10_BETA,
  ApplicationType::WIN10_ALPHA,
  ApplicationType::BIZWEB,
  ApplicationType::BIZWEB_RC,
  ApplicationType::BIZWEB_BETA,
  ApplicationType::BIZWEB_ALPHA,
  ApplicationType::DUMMYPRIMARY,
  ApplicationType::DUMMYPRIMARY_RC,
  ApplicationType::DUMMYPRIMARY_BETA,
  ApplicationType::DUMMYPRIMARY_ALPHA,
  ApplicationType::SQUARE,
  ApplicationType::SQUARE_RC,
  ApplicationType::SQUARE_BETA,
  ApplicationType::SQUARE_ALPHA,
  ApplicationType::INTERNAL,
  ApplicationType::INTERNAL_RC,
  ApplicationType::INTERNAL_BETA,
  ApplicationType::INTERNAL_ALPHA,
  ApplicationType::CLOVAFRIENDS,
  ApplicationType::CLOVAFRIENDS_RC,
  ApplicationType::CLOVAFRIENDS_BETA,
  ApplicationType::CLOVAFRIENDS_ALPHA
};
const char* _kApplicationTypeNames[] = {
  "IOS",
  "IOS_RC",
  "IOS_BETA",
  "IOS_ALPHA",
  "ANDROID",
  "ANDROID_RC",
  "ANDROID_BETA",
  "ANDROID_ALPHA",
  "WAP",
  "WAP_RC",
  "WAP_BETA",
  "WAP_ALPHA",
  "BOT",
  "BOT_RC",
  "BOT_BETA",
  "BOT_ALPHA",
  "WEB",
  "WEB_RC",
  "WEB_BETA",
  "WEB_ALPHA",
  "DESKTOPWIN",
  "DESKTOPWIN_RC",
  "DESKTOPWIN_BETA",
  "DESKTOPWIN_ALPHA",
  "DESKTOPMAC",
  "DESKTOPMAC_RC",
  "DESKTOPMAC_BETA",
  "DESKTOPMAC_ALPHA",
  "CHANNELGW",
  "CHANNELGW_RC",
  "CHANNELGW_BETA",
  "CHANNELGW_ALPHA",
  "CHANNELCP",
  "CHANNELCP_RC",
  "CHANNELCP_BETA",
  "CHANNELCP_ALPHA",
  "WINPHONE",
  "WINPHONE_RC",
  "WINPHONE_BETA",
  "WINPHONE_ALPHA",
  "BLACKBERRY",
  "BLACKBERRY_RC",
  "BLACKBERRY_BETA",
  "BLACKBERRY_ALPHA",
  "WINMETRO",
  "WINMETRO_RC",
  "WINMETRO_BETA",
  "WINMETRO_ALPHA",
  "S40",
  "S40_RC",
  "S40_BETA",
  "S40_ALPHA",
  "CHRONO",
  "CHRONO_RC",
  "CHRONO_BETA",
  "CHRONO_ALPHA",
  "TIZEN",
  "TIZEN_RC",
  "TIZEN_BETA",
  "TIZEN_ALPHA",
  "VIRTUAL",
  "FIREFOXOS",
  "FIREFOXOS_RC",
  "FIREFOXOS_BETA",
  "FIREFOXOS_ALPHA",
  "IOSIPAD",
  "IOSIPAD_RC",
  "IOSIPAD_BETA",
  "IOSIPAD_ALPHA",
  "BIZIOS",
  "BIZIOS_RC",
  "BIZIOS_BETA",
  "BIZIOS_ALPHA",
  "BIZANDROID",
  "BIZANDROID_RC",
  "BIZANDROID_BETA",
  "BIZANDROID_ALPHA",
  "BIZBOT",
  "BIZBOT_RC",
  "BIZBOT_BETA",
  "BIZBOT_ALPHA",
  "CHROMEOS",
  "CHROMEOS_RC",
  "CHROMEOS_BETA",
  "CHROMEOS_ALPHA",
  "ANDROIDLITE",
  "ANDROIDLITE_RC",
  "ANDROIDLITE_BETA",
  "ANDROIDLITE_ALPHA",
  "WIN10",
  "WIN10_RC",
  "WIN10_BETA",
  "WIN10_ALPHA",
  "BIZWEB",
  "BIZWEB_RC",
  "BIZWEB_BETA",
  "BIZWEB_ALPHA",
  "DUMMYPRIMARY",
  "DUMMYPRIMARY_RC",
  "DUMMYPRIMARY_BETA",
  "DUMMYPRIMARY_ALPHA",
  "SQUARE",
  "SQUARE_RC",
  "SQUARE_BETA",
  "SQUARE_ALPHA",
  "INTERNAL",
  "INTERNAL_RC",
  "INTERNAL_BETA",
  "INTERNAL_ALPHA",
  "CLOVAFRIENDS",
  "CLOVAFRIENDS_RC",
  "CLOVAFRIENDS_BETA",
  "CLOVAFRIENDS_ALPHA"
};
const std::map<int, const char*> _ApplicationType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(113, _kApplicationTypeValues, _kApplicationTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ApplicationType::type& val) {
  std::map<int, const char*>::const_iterator it = _ApplicationType_VALUES_TO_NAMES.find(val);
  if (it != _ApplicationType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kExtendedProfileAttributeValues[] = {

};
const char* _kExtendedProfileAttributeNames[] = {

};
const std::map<int, const char*> _ExtendedProfileAttribute_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(0, _kExtendedProfileAttributeValues, _kExtendedProfileAttributeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ExtendedProfileAttribute::type& val) {
  std::map<int, const char*>::const_iterator it = _ExtendedProfileAttribute_VALUES_TO_NAMES.find(val);
  if (it != _ExtendedProfileAttribute_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kPrivacyLevelTypeValues[] = {
  PrivacyLevelType::PUBLIC,
  PrivacyLevelType::PRIVATE
};
const char* _kPrivacyLevelTypeNames[] = {
  "PUBLIC",
  "PRIVATE"
};
const std::map<int, const char*> _PrivacyLevelType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kPrivacyLevelTypeValues, _kPrivacyLevelTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const PrivacyLevelType::type& val) {
  std::map<int, const char*>::const_iterator it = _PrivacyLevelType_VALUES_TO_NAMES.find(val);
  if (it != _PrivacyLevelType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kPaidCallerIdStatusValues[] = {
  PaidCallerIdStatus::NOT_SPECIFIED,
  PaidCallerIdStatus::VALID,
  PaidCallerIdStatus::VERIFICATION_REQUIRED,
  PaidCallerIdStatus::NOT_PERMITTED,
  PaidCallerIdStatus::LIMIT_EXCEEDED,
  PaidCallerIdStatus::LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED
};
const char* _kPaidCallerIdStatusNames[] = {
  "NOT_SPECIFIED",
  "VALID",
  "VERIFICATION_REQUIRED",
  "NOT_PERMITTED",
  "LIMIT_EXCEEDED",
  "LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED"
};
const std::map<int, const char*> _PaidCallerIdStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kPaidCallerIdStatusValues, _kPaidCallerIdStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const PaidCallerIdStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _PaidCallerIdStatus_VALUES_TO_NAMES.find(val);
  if (it != _PaidCallerIdStatus_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kPaidCallProductTypeValues[] = {
  PaidCallProductType::COIN,
  PaidCallProductType::CREDIT,
  PaidCallProductType::MONTHLY
};
const char* _kPaidCallProductTypeNames[] = {
  "COIN",
  "CREDIT",
  "MONTHLY"
};
const std::map<int, const char*> _PaidCallProductType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kPaidCallProductTypeValues, _kPaidCallProductTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const PaidCallProductType::type& val) {
  std::map<int, const char*>::const_iterator it = _PaidCallProductType_VALUES_TO_NAMES.find(val);
  if (it != _PaidCallProductType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kPaidCallTypeValues[] = {
  PaidCallType::OUT,
  PaidCallType::IN,
  PaidCallType::TOLLFREE,
  PaidCallType::RECORD,
  PaidCallType::AD,
  PaidCallType::CS
};
const char* _kPaidCallTypeNames[] = {
  "OUT",
  "IN",
  "TOLLFREE",
  "RECORD",
  "AD",
  "CS"
};
const std::map<int, const char*> _PaidCallType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kPaidCallTypeValues, _kPaidCallTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const PaidCallType::type& val) {
  std::map<int, const char*>::const_iterator it = _PaidCallType_VALUES_TO_NAMES.find(val);
  if (it != _PaidCallType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kBotTypeValues[] = {
  BotType::RESERVED,
  BotType::OFFICIAL,
  BotType::LINE_AT_0,
  BotType::LINE_AT
};
const char* _kBotTypeNames[] = {
  "RESERVED",
  "OFFICIAL",
  "LINE_AT_0",
  "LINE_AT"
};
const std::map<int, const char*> _BotType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kBotTypeValues, _kBotTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const BotType::type& val) {
  std::map<int, const char*>::const_iterator it = _BotType_VALUES_TO_NAMES.find(val);
  if (it != _BotType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kBuddyOnAirLabelValues[] = {
  BuddyOnAirLabel::ON_AIR,
  BuddyOnAirLabel::LIVE
};
const char* _kBuddyOnAirLabelNames[] = {
  "ON_AIR",
  "LIVE"
};
const std::map<int, const char*> _BuddyOnAirLabel_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kBuddyOnAirLabelValues, _kBuddyOnAirLabelNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const BuddyOnAirLabel::type& val) {
  std::map<int, const char*>::const_iterator it = _BuddyOnAirLabel_VALUES_TO_NAMES.find(val);
  if (it != _BuddyOnAirLabel_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kBuddyBannerLinkTypeValues[] = {
  BuddyBannerLinkType::BUDDY_BANNER_LINK_HIDDEN,
  BuddyBannerLinkType::BUDDY_BANNER_LINK_MID,
  BuddyBannerLinkType::BUDDY_BANNER_LINK_URL
};
const char* _kBuddyBannerLinkTypeNames[] = {
  "BUDDY_BANNER_LINK_HIDDEN",
  "BUDDY_BANNER_LINK_MID",
  "BUDDY_BANNER_LINK_URL"
};
const std::map<int, const char*> _BuddyBannerLinkType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kBuddyBannerLinkTypeValues, _kBuddyBannerLinkTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const BuddyBannerLinkType::type& val) {
  std::map<int, const char*>::const_iterator it = _BuddyBannerLinkType_VALUES_TO_NAMES.find(val);
  if (it != _BuddyBannerLinkType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kBuddyOnAirTypeValues[] = {
  BuddyOnAirType::NORMAL,
  BuddyOnAirType::LIVE,
  BuddyOnAirType::VOIP
};
const char* _kBuddyOnAirTypeNames[] = {
  "NORMAL",
  "LIVE",
  "VOIP"
};
const std::map<int, const char*> _BuddyOnAirType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kBuddyOnAirTypeValues, _kBuddyOnAirTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const BuddyOnAirType::type& val) {
  std::map<int, const char*>::const_iterator it = _BuddyOnAirType_VALUES_TO_NAMES.find(val);
  if (it != _BuddyOnAirType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kDiffValues[] = {
  Diff::ADDED,
  Diff::UPDATED,
  Diff::REMOVED
};
const char* _kDiffNames[] = {
  "ADDED",
  "UPDATED",
  "REMOVED"
};
const std::map<int, const char*> _Diff_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kDiffValues, _kDiffNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const Diff::type& val) {
  std::map<int, const char*>::const_iterator it = _Diff_VALUES_TO_NAMES.find(val);
  if (it != _Diff_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kReportTypeValues[] = {
  ReportType::ADVERTISING,
  ReportType::GENDER_HARASSMENT,
  ReportType::HARASSMENT,
  ReportType::OTHER
};
const char* _kReportTypeNames[] = {
  "ADVERTISING",
  "GENDER_HARASSMENT",
  "HARASSMENT",
  "OTHER"
};
const std::map<int, const char*> _ReportType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kReportTypeValues, _kReportTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ReportType::type& val) {
  std::map<int, const char*>::const_iterator it = _ReportType_VALUES_TO_NAMES.find(val);
  if (it != _ReportType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSyncTriggerReasonValues[] = {
  SyncTriggerReason::OTHER,
  SyncTriggerReason::REVISION_GAP_TOO_LARGE,
  SyncTriggerReason::OPERATION_EXPIRED
};
const char* _kSyncTriggerReasonNames[] = {
  "OTHER",
  "REVISION_GAP_TOO_LARGE",
  "OPERATION_EXPIRED"
};
const std::map<int, const char*> _SyncTriggerReason_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kSyncTriggerReasonValues, _kSyncTriggerReasonNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SyncTriggerReason::type& val) {
  std::map<int, const char*>::const_iterator it = _SyncTriggerReason_VALUES_TO_NAMES.find(val);
  if (it != _SyncTriggerReason_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kReportCategoryValues[] = {
  ReportCategory::PUSH_NORMAL_PLAIN,
  ReportCategory::PUSH_NORMAL_E2EE,
  ReportCategory::PUSH_VOIP_PLAIN,
  ReportCategory::PUSH_VOIP_E2EE
};
const char* _kReportCategoryNames[] = {
  "PUSH_NORMAL_PLAIN",
  "PUSH_NORMAL_E2EE",
  "PUSH_VOIP_PLAIN",
  "PUSH_VOIP_E2EE"
};
const std::map<int, const char*> _ReportCategory_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kReportCategoryValues, _kReportCategoryNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ReportCategory::type& val) {
  std::map<int, const char*>::const_iterator it = _ReportCategory_VALUES_TO_NAMES.find(val);
  if (it != _ReportCategory_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kBuddyResultStateValues[] = {
  BuddyResultState::ACCEPTED,
  BuddyResultState::SUCCEEDED,
  BuddyResultState::FAILED,
  BuddyResultState::CANCELLED,
  BuddyResultState::NOTIFY_FAILED,
  BuddyResultState::STORING,
  BuddyResultState::UPLOADING,
  BuddyResultState::NOTIFYING,
  BuddyResultState::REMOVING_SUBSCRIPTION,
  BuddyResultState::UNREGISTERING_ACCOUNT,
  BuddyResultState::NOTIFYING_LEAVE_CHAT
};
const char* _kBuddyResultStateNames[] = {
  "ACCEPTED",
  "SUCCEEDED",
  "FAILED",
  "CANCELLED",
  "NOTIFY_FAILED",
  "STORING",
  "UPLOADING",
  "NOTIFYING",
  "REMOVING_SUBSCRIPTION",
  "UNREGISTERING_ACCOUNT",
  "NOTIFYING_LEAVE_CHAT"
};
const std::map<int, const char*> _BuddyResultState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(11, _kBuddyResultStateValues, _kBuddyResultStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const BuddyResultState::type& val) {
  std::map<int, const char*>::const_iterator it = _BuddyResultState_VALUES_TO_NAMES.find(val);
  if (it != _BuddyResultState_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kBuddySearchRequestSourceValues[] = {
  BuddySearchRequestSource::NA,
  BuddySearchRequestSource::FRIEND_VIEW,
  BuddySearchRequestSource::OFFICIAL_ACCOUNT_VIEW
};
const char* _kBuddySearchRequestSourceNames[] = {
  "NA",
  "FRIEND_VIEW",
  "OFFICIAL_ACCOUNT_VIEW"
};
const std::map<int, const char*> _BuddySearchRequestSource_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kBuddySearchRequestSourceValues, _kBuddySearchRequestSourceNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const BuddySearchRequestSource::type& val) {
  std::map<int, const char*>::const_iterator it = _BuddySearchRequestSource_VALUES_TO_NAMES.find(val);
  if (it != _BuddySearchRequestSource_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kCarrierCodeValues[] = {
  CarrierCode::NOT_SPECIFIED,
  CarrierCode::JP_DOCOMO,
  CarrierCode::JP_AU,
  CarrierCode::JP_SOFTBANK,
  CarrierCode::JP_DOCOMO_LINE,
  CarrierCode::KR_SKT,
  CarrierCode::KR_KT,
  CarrierCode::KR_LGT
};
const char* _kCarrierCodeNames[] = {
  "NOT_SPECIFIED",
  "JP_DOCOMO",
  "JP_AU",
  "JP_SOFTBANK",
  "JP_DOCOMO_LINE",
  "KR_SKT",
  "KR_KT",
  "KR_LGT"
};
const std::map<int, const char*> _CarrierCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kCarrierCodeValues, _kCarrierCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const CarrierCode::type& val) {
  std::map<int, const char*>::const_iterator it = _CarrierCode_VALUES_TO_NAMES.find(val);
  if (it != _CarrierCode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kChannelConfigurationValues[] = {
  ChannelConfiguration::MESSAGE,
  ChannelConfiguration::MESSAGE_NOTIFICATION,
  ChannelConfiguration::NOTIFICATION_CENTER
};
const char* _kChannelConfigurationNames[] = {
  "MESSAGE",
  "MESSAGE_NOTIFICATION",
  "NOTIFICATION_CENTER"
};
const std::map<int, const char*> _ChannelConfiguration_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kChannelConfigurationValues, _kChannelConfigurationNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ChannelConfiguration::type& val) {
  std::map<int, const char*>::const_iterator it = _ChannelConfiguration_VALUES_TO_NAMES.find(val);
  if (it != _ChannelConfiguration_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kChannelPermissionValues[] = {
  ChannelPermission::PROFILE,
  ChannelPermission::FRIENDS,
  ChannelPermission::GROUP
};
const char* _kChannelPermissionNames[] = {
  "PROFILE",
  "FRIENDS",
  "GROUP"
};
const std::map<int, const char*> _ChannelPermission_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kChannelPermissionValues, _kChannelPermissionNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ChannelPermission::type& val) {
  std::map<int, const char*>::const_iterator it = _ChannelPermission_VALUES_TO_NAMES.find(val);
  if (it != _ChannelPermission_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kChannelFeatureLicenseValues[] = {
  ChannelFeatureLicense::BLE_LCS_API_USABLE,
  ChannelFeatureLicense::PROHIBIT_MINIMIZE_CHANNEL_BROWSER,
  ChannelFeatureLicense::ALLOW_IOS_WEBKIT
};
const char* _kChannelFeatureLicenseNames[] = {
  "BLE_LCS_API_USABLE",
  "PROHIBIT_MINIMIZE_CHANNEL_BROWSER",
  "ALLOW_IOS_WEBKIT"
};
const std::map<int, const char*> _ChannelFeatureLicense_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kChannelFeatureLicenseValues, _kChannelFeatureLicenseNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ChannelFeatureLicense::type& val) {
  std::map<int, const char*>::const_iterator it = _ChannelFeatureLicense_VALUES_TO_NAMES.find(val);
  if (it != _ChannelFeatureLicense_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kChannelErrorCodeValues[] = {
  ChannelErrorCode::ILLEGAL_ARGUMENT,
  ChannelErrorCode::INTERNAL_ERROR,
  ChannelErrorCode::CONNECTION_ERROR,
  ChannelErrorCode::AUTHENTICATIONI_FAILED,
  ChannelErrorCode::NEED_PERMISSION_APPROVAL,
  ChannelErrorCode::COIN_NOT_USABLE,
  ChannelErrorCode::WEBVIEW_NOT_ALLOWED
};
const char* _kChannelErrorCodeNames[] = {
  "ILLEGAL_ARGUMENT",
  "INTERNAL_ERROR",
  "CONNECTION_ERROR",
  "AUTHENTICATIONI_FAILED",
  "NEED_PERMISSION_APPROVAL",
  "COIN_NOT_USABLE",
  "WEBVIEW_NOT_ALLOWED"
};
const std::map<int, const char*> _ChannelErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kChannelErrorCodeValues, _kChannelErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ChannelErrorCode::type& val) {
  std::map<int, const char*>::const_iterator it = _ChannelErrorCode_VALUES_TO_NAMES.find(val);
  if (it != _ChannelErrorCode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kChannelSyncTypeValues[] = {
  ChannelSyncType::SYNC,
  ChannelSyncType::REMOVE,
  ChannelSyncType::REMOVE_ALL
};
const char* _kChannelSyncTypeNames[] = {
  "SYNC",
  "REMOVE",
  "REMOVE_ALL"
};
const std::map<int, const char*> _ChannelSyncType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kChannelSyncTypeValues, _kChannelSyncTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ChannelSyncType::type& val) {
  std::map<int, const char*>::const_iterator it = _ChannelSyncType_VALUES_TO_NAMES.find(val);
  if (it != _ChannelSyncType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kLoginTypeValues[] = {
  LoginType::ID_CREDENTIAL,
  LoginType::QRCODE,
  LoginType::ID_CREDENTIAL_WITH_E2EE
};
const char* _kLoginTypeNames[] = {
  "ID_CREDENTIAL",
  "QRCODE",
  "ID_CREDENTIAL_WITH_E2EE"
};
const std::map<int, const char*> _LoginType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kLoginTypeValues, _kLoginTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const LoginType::type& val) {
  std::map<int, const char*>::const_iterator it = _LoginType_VALUES_TO_NAMES.find(val);
  if (it != _LoginType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kContactAttributeValues[] = {
  ContactAttribute::CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL,
  ContactAttribute::CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL,
  ContactAttribute::CONTACT_ATTRIBUTE_CAPABLE_MY_HOME,
  ContactAttribute::CONTACT_ATTRIBUTE_CAPABLE_BUDDY
};
const char* _kContactAttributeNames[] = {
  "CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL",
  "CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL",
  "CONTACT_ATTRIBUTE_CAPABLE_MY_HOME",
  "CONTACT_ATTRIBUTE_CAPABLE_BUDDY"
};
const std::map<int, const char*> _ContactAttribute_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kContactAttributeValues, _kContactAttributeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ContactAttribute::type& val) {
  std::map<int, const char*>::const_iterator it = _ContactAttribute_VALUES_TO_NAMES.find(val);
  if (it != _ContactAttribute_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kContactCategoryValues[] = {
  ContactCategory::NORMAL,
  ContactCategory::RECOMMEND
};
const char* _kContactCategoryNames[] = {
  "NORMAL",
  "RECOMMEND"
};
const std::map<int, const char*> _ContactCategory_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kContactCategoryValues, _kContactCategoryNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ContactCategory::type& val) {
  std::map<int, const char*>::const_iterator it = _ContactCategory_VALUES_TO_NAMES.find(val);
  if (it != _ContactCategory_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kContactRelationValues[] = {
  ContactRelation::ONEWAY,
  ContactRelation::BOTH,
  ContactRelation::NOT_REGISTERED
};
const char* _kContactRelationNames[] = {
  "ONEWAY",
  "BOTH",
  "NOT_REGISTERED"
};
const std::map<int, const char*> _ContactRelation_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kContactRelationValues, _kContactRelationNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ContactRelation::type& val) {
  std::map<int, const char*>::const_iterator it = _ContactRelation_VALUES_TO_NAMES.find(val);
  if (it != _ContactRelation_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kAsymmetricKeyAlgorithmValues[] = {
  AsymmetricKeyAlgorithm::ASYMMETRIC_KEY_ALGORITHM_RSA,
  AsymmetricKeyAlgorithm::ASYMMETRIC_KEY_ALGORITHM_ECDH
};
const char* _kAsymmetricKeyAlgorithmNames[] = {
  "ASYMMETRIC_KEY_ALGORITHM_RSA",
  "ASYMMETRIC_KEY_ALGORITHM_ECDH"
};
const std::map<int, const char*> _AsymmetricKeyAlgorithm_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kAsymmetricKeyAlgorithmValues, _kAsymmetricKeyAlgorithmNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const AsymmetricKeyAlgorithm::type& val) {
  std::map<int, const char*>::const_iterator it = _AsymmetricKeyAlgorithm_VALUES_TO_NAMES.find(val);
  if (it != _AsymmetricKeyAlgorithm_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kContactSettingValues[] = {
  ContactSetting::CONTACT_SETTING_NOTIFICATION_DISABLE,
  ContactSetting::CONTACT_SETTING_DISPLAY_NAME_OVERRIDE,
  ContactSetting::CONTACT_SETTING_CONTACT_HIDE,
  ContactSetting::CONTACT_SETTING_FAVORITE,
  ContactSetting::CONTACT_SETTING_DELETE
};
const char* _kContactSettingNames[] = {
  "CONTACT_SETTING_NOTIFICATION_DISABLE",
  "CONTACT_SETTING_DISPLAY_NAME_OVERRIDE",
  "CONTACT_SETTING_CONTACT_HIDE",
  "CONTACT_SETTING_FAVORITE",
  "CONTACT_SETTING_DELETE"
};
const std::map<int, const char*> _ContactSetting_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kContactSettingValues, _kContactSettingNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ContactSetting::type& val) {
  std::map<int, const char*>::const_iterator it = _ContactSetting_VALUES_TO_NAMES.find(val);
  if (it != _ContactSetting_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kContactStatusValues[] = {
  ContactStatus::UNSPECIFIED,
  ContactStatus::FRIEND,
  ContactStatus::FRIEND_BLOCKED,
  ContactStatus::RECOMMEND,
  ContactStatus::RECOMMEND_BLOCKED,
  ContactStatus::DELETED,
  ContactStatus::DELETED_BLOCKED
};
const char* _kContactStatusNames[] = {
  "UNSPECIFIED",
  "FRIEND",
  "FRIEND_BLOCKED",
  "RECOMMEND",
  "RECOMMEND_BLOCKED",
  "DELETED",
  "DELETED_BLOCKED"
};
const std::map<int, const char*> _ContactStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kContactStatusValues, _kContactStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ContactStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _ContactStatus_VALUES_TO_NAMES.find(val);
  if (it != _ContactStatus_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kContactTypeValues[] = {
  ContactType::MID,
  ContactType::PHONE,
  ContactType::EMAIL,
  ContactType::USERID,
  ContactType::PROXIMITY,
  ContactType::GROUP,
  ContactType::USER,
  ContactType::QRCODE,
  ContactType::PROMOTION_BOT,
  ContactType::CONTACT_MESSAGE,
  ContactType::FRIEND_REQUEST,
  ContactType::REPAIR,
  ContactType::FACEBOOK,
  ContactType::SINA,
  ContactType::RENREN,
  ContactType::FEIXIN,
  ContactType::BBM,
  ContactType::BEACON
};
const char* _kContactTypeNames[] = {
  "MID",
  "PHONE",
  "EMAIL",
  "USERID",
  "PROXIMITY",
  "GROUP",
  "USER",
  "QRCODE",
  "PROMOTION_BOT",
  "CONTACT_MESSAGE",
  "FRIEND_REQUEST",
  "REPAIR",
  "FACEBOOK",
  "SINA",
  "RENREN",
  "FEIXIN",
  "BBM",
  "BEACON"
};
const std::map<int, const char*> _ContactType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(18, _kContactTypeValues, _kContactTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ContactType::type& val) {
  std::map<int, const char*>::const_iterator it = _ContactType_VALUES_TO_NAMES.find(val);
  if (it != _ContactType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kGroupPreferenceAttributeValues[] = {
  GroupPreferenceAttribute::INVITATION_TICKET,
  GroupPreferenceAttribute::FAVORITE_TIMESTAMP
};
const char* _kGroupPreferenceAttributeNames[] = {
  "INVITATION_TICKET",
  "FAVORITE_TIMESTAMP"
};
const std::map<int, const char*> _GroupPreferenceAttribute_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kGroupPreferenceAttributeValues, _kGroupPreferenceAttributeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const GroupPreferenceAttribute::type& val) {
  std::map<int, const char*>::const_iterator it = _GroupPreferenceAttribute_VALUES_TO_NAMES.find(val);
  if (it != _GroupPreferenceAttribute_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kContentTypeValues[] = {
  ContentType::NONE,
  ContentType::IMAGE,
  ContentType::VIDEO,
  ContentType::AUDIO,
  ContentType::HTML,
  ContentType::PDF,
  ContentType::CALL,
  ContentType::STICKER,
  ContentType::PRESENCE,
  ContentType::GIFT,
  ContentType::GROUPBOARD,
  ContentType::APPLINK,
  ContentType::LINK,
  ContentType::CONTACT,
  ContentType::FILE,
  ContentType::LOCATION,
  ContentType::POSTNOTIFICATION,
  ContentType::RICH,
  ContentType::CHATEVENT,
  ContentType::MUSIC,
  ContentType::PAYMENT,
  ContentType::EXTIMAGE
};
const char* _kContentTypeNames[] = {
  "NONE",
  "IMAGE",
  "VIDEO",
  "AUDIO",
  "HTML",
  "PDF",
  "CALL",
  "STICKER",
  "PRESENCE",
  "GIFT",
  "GROUPBOARD",
  "APPLINK",
  "LINK",
  "CONTACT",
  "FILE",
  "LOCATION",
  "POSTNOTIFICATION",
  "RICH",
  "CHATEVENT",
  "MUSIC",
  "PAYMENT",
  "EXTIMAGE"
};
const std::map<int, const char*> _ContentType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(22, _kContentTypeValues, _kContentTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ContentType::type& val) {
  std::map<int, const char*>::const_iterator it = _ContentType_VALUES_TO_NAMES.find(val);
  if (it != _ContentType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kMessageRelationTypeValues[] = {
  MessageRelationType::FORWARD,
  MessageRelationType::AUTO_REPLY,
  MessageRelationType::SUBORDINATE
};
const char* _kMessageRelationTypeNames[] = {
  "FORWARD",
  "AUTO_REPLY",
  "SUBORDINATE"
};
const std::map<int, const char*> _MessageRelationType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kMessageRelationTypeValues, _kMessageRelationTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const MessageRelationType::type& val) {
  std::map<int, const char*>::const_iterator it = _MessageRelationType_VALUES_TO_NAMES.find(val);
  if (it != _MessageRelationType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kCustomModeValues[] = {
  CustomMode::PROMOTION_FRIENDS_INVITE,
  CustomMode::CAPABILITY_SERVER_SIDE_SMS,
  CustomMode::LINE_CLIENT_ANALYTICS_CONFIGURATION
};
const char* _kCustomModeNames[] = {
  "PROMOTION_FRIENDS_INVITE",
  "CAPABILITY_SERVER_SIDE_SMS",
  "LINE_CLIENT_ANALYTICS_CONFIGURATION"
};
const std::map<int, const char*> _CustomMode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kCustomModeValues, _kCustomModeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const CustomMode::type& val) {
  std::map<int, const char*>::const_iterator it = _CustomMode_VALUES_TO_NAMES.find(val);
  if (it != _CustomMode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kRoomAttributeValues[] = {
  RoomAttribute::ALL,
  RoomAttribute::NOTIFICATION_SETTING
};
const char* _kRoomAttributeNames[] = {
  "ALL",
  "NOTIFICATION_SETTING"
};
const std::map<int, const char*> _RoomAttribute_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kRoomAttributeValues, _kRoomAttributeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const RoomAttribute::type& val) {
  std::map<int, const char*>::const_iterator it = _RoomAttribute_VALUES_TO_NAMES.find(val);
  if (it != _RoomAttribute_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kUserStatusValues[] = {
  UserStatus::NORMAL,
  UserStatus::UNBOUND,
  UserStatus::UNREGISTERED
};
const char* _kUserStatusNames[] = {
  "NORMAL",
  "UNBOUND",
  "UNREGISTERED"
};
const std::map<int, const char*> _UserStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kUserStatusValues, _kUserStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const UserStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _UserStatus_VALUES_TO_NAMES.find(val);
  if (it != _UserStatus_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kEmailConfirmationStatusValues[] = {
  EmailConfirmationStatus::NOT_SPECIFIED,
  EmailConfirmationStatus::NOT_YET,
  EmailConfirmationStatus::DONE,
  EmailConfirmationStatus::NEED_ENFORCED_INPUT
};
const char* _kEmailConfirmationStatusNames[] = {
  "NOT_SPECIFIED",
  "NOT_YET",
  "DONE",
  "NEED_ENFORCED_INPUT"
};
const std::map<int, const char*> _EmailConfirmationStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kEmailConfirmationStatusValues, _kEmailConfirmationStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const EmailConfirmationStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _EmailConfirmationStatus_VALUES_TO_NAMES.find(val);
  if (it != _EmailConfirmationStatus_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kAccountMigrationPincodeTypeValues[] = {
  AccountMigrationPincodeType::NOT_APPLICABLE,
  AccountMigrationPincodeType::NOT_SET,
  AccountMigrationPincodeType::SET,
  AccountMigrationPincodeType::NEED_ENFORCED_INPUT
};
const char* _kAccountMigrationPincodeTypeNames[] = {
  "NOT_APPLICABLE",
  "NOT_SET",
  "SET",
  "NEED_ENFORCED_INPUT"
};
const std::map<int, const char*> _AccountMigrationPincodeType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kAccountMigrationPincodeTypeValues, _kAccountMigrationPincodeTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const AccountMigrationPincodeType::type& val) {
  std::map<int, const char*>::const_iterator it = _AccountMigrationPincodeType_VALUES_TO_NAMES.find(val);
  if (it != _AccountMigrationPincodeType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kAccountMigrationCheckTypeValues[] = {
  AccountMigrationCheckType::SKIP,
  AccountMigrationCheckType::PINCODE,
  AccountMigrationCheckType::SECURITY_CENTER
};
const char* _kAccountMigrationCheckTypeNames[] = {
  "SKIP",
  "PINCODE",
  "SECURITY_CENTER"
};
const std::map<int, const char*> _AccountMigrationCheckType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kAccountMigrationCheckTypeValues, _kAccountMigrationCheckTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const AccountMigrationCheckType::type& val) {
  std::map<int, const char*>::const_iterator it = _AccountMigrationCheckType_VALUES_TO_NAMES.find(val);
  if (it != _AccountMigrationCheckType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSecurityCenterSettingsTypeValues[] = {
  SecurityCenterSettingsType::NOT_APPLICABLE,
  SecurityCenterSettingsType::NOT_SET,
  SecurityCenterSettingsType::SET,
  SecurityCenterSettingsType::NEED_ENFORCED_INPUT
};
const char* _kSecurityCenterSettingsTypeNames[] = {
  "NOT_APPLICABLE",
  "NOT_SET",
  "SET",
  "NEED_ENFORCED_INPUT"
};
const std::map<int, const char*> _SecurityCenterSettingsType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kSecurityCenterSettingsTypeValues, _kSecurityCenterSettingsTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SecurityCenterSettingsType::type& val) {
  std::map<int, const char*>::const_iterator it = _SecurityCenterSettingsType_VALUES_TO_NAMES.find(val);
  if (it != _SecurityCenterSettingsType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kEmailConfirmationTypeValues[] = {
  EmailConfirmationType::SERVER_SIDE_EMAIL,
  EmailConfirmationType::CLIENT_SIDE_EMAIL
};
const char* _kEmailConfirmationTypeNames[] = {
  "SERVER_SIDE_EMAIL",
  "CLIENT_SIDE_EMAIL"
};
const std::map<int, const char*> _EmailConfirmationType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kEmailConfirmationTypeValues, _kEmailConfirmationTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const EmailConfirmationType::type& val) {
  std::map<int, const char*>::const_iterator it = _EmailConfirmationType_VALUES_TO_NAMES.find(val);
  if (it != _EmailConfirmationType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSquareChatAnnouncementTypeValues[] = {
  SquareChatAnnouncementType::TEXT_MESSAGE
};
const char* _kSquareChatAnnouncementTypeNames[] = {
  "TEXT_MESSAGE"
};
const std::map<int, const char*> _SquareChatAnnouncementType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kSquareChatAnnouncementTypeValues, _kSquareChatAnnouncementTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SquareChatAnnouncementType::type& val) {
  std::map<int, const char*>::const_iterator it = _SquareChatAnnouncementType_VALUES_TO_NAMES.find(val);
  if (it != _SquareChatAnnouncementType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSquareChatAttributeValues[] = {
  SquareChatAttribute::NAME,
  SquareChatAttribute::SQUARE_CHAT_IMAGE,
  SquareChatAttribute::STATE
};
const char* _kSquareChatAttributeNames[] = {
  "NAME",
  "SQUARE_CHAT_IMAGE",
  "STATE"
};
const std::map<int, const char*> _SquareChatAttribute_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kSquareChatAttributeValues, _kSquareChatAttributeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SquareChatAttribute::type& val) {
  std::map<int, const char*>::const_iterator it = _SquareChatAttribute_VALUES_TO_NAMES.find(val);
  if (it != _SquareChatAttribute_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSquareMemberAttributeValues[] = {
  SquareMemberAttribute::DISPLAY_NAME,
  SquareMemberAttribute::PROFILE_IMAGE,
  SquareMemberAttribute::ABLE_TO_RECEIVE_MESSAGE,
  SquareMemberAttribute::MEMBERSHIP_STATE,
  SquareMemberAttribute::ROLE,
  SquareMemberAttribute::PREFERENCE
};
const char* _kSquareMemberAttributeNames[] = {
  "DISPLAY_NAME",
  "PROFILE_IMAGE",
  "ABLE_TO_RECEIVE_MESSAGE",
  "MEMBERSHIP_STATE",
  "ROLE",
  "PREFERENCE"
};
const std::map<int, const char*> _SquareMemberAttribute_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kSquareMemberAttributeValues, _kSquareMemberAttributeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SquareMemberAttribute::type& val) {
  std::map<int, const char*>::const_iterator it = _SquareMemberAttribute_VALUES_TO_NAMES.find(val);
  if (it != _SquareMemberAttribute_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSquareMemberRelationAttributeValues[] = {
  SquareMemberRelationAttribute::BLOCKED
};
const char* _kSquareMemberRelationAttributeNames[] = {
  "BLOCKED"
};
const std::map<int, const char*> _SquareMemberRelationAttribute_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kSquareMemberRelationAttributeValues, _kSquareMemberRelationAttributeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SquareMemberRelationAttribute::type& val) {
  std::map<int, const char*>::const_iterator it = _SquareMemberRelationAttribute_VALUES_TO_NAMES.find(val);
  if (it != _SquareMemberRelationAttribute_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSquarePreferenceAttributeValues[] = {
  SquarePreferenceAttribute::FAVORITE,
  SquarePreferenceAttribute::NOTI_FOR_NEW_JOIN_REQUEST
};
const char* _kSquarePreferenceAttributeNames[] = {
  "FAVORITE",
  "NOTI_FOR_NEW_JOIN_REQUEST"
};
const std::map<int, const char*> _SquarePreferenceAttribute_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kSquarePreferenceAttributeValues, _kSquarePreferenceAttributeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SquarePreferenceAttribute::type& val) {
  std::map<int, const char*>::const_iterator it = _SquarePreferenceAttribute_VALUES_TO_NAMES.find(val);
  if (it != _SquarePreferenceAttribute_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSquareStateValues[] = {
  SquareState::ALIVE,
  SquareState::DELETED,
  SquareState::SUSPENDED
};
const char* _kSquareStateNames[] = {
  "ALIVE",
  "DELETED",
  "SUSPENDED"
};
const std::map<int, const char*> _SquareState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kSquareStateValues, _kSquareStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SquareState::type& val) {
  std::map<int, const char*>::const_iterator it = _SquareState_VALUES_TO_NAMES.find(val);
  if (it != _SquareState_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kCommitMessageResultCodeValues[] = {
  CommitMessageResultCode::DELIVERED,
  CommitMessageResultCode::DELIVERY_SKIPPED,
  CommitMessageResultCode::DELIVERY_RESTRICTED
};
const char* _kCommitMessageResultCodeNames[] = {
  "DELIVERED",
  "DELIVERY_SKIPPED",
  "DELIVERY_RESTRICTED"
};
const std::map<int, const char*> _CommitMessageResultCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kCommitMessageResultCodeValues, _kCommitMessageResultCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const CommitMessageResultCode::type& val) {
  std::map<int, const char*>::const_iterator it = _CommitMessageResultCode_VALUES_TO_NAMES.find(val);
  if (it != _CommitMessageResultCode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kErrorCodeValues[] = {
  ErrorCode::ILLEGAL_ARGUMENT,
  ErrorCode::AUTHENTICATION_FAILED,
  ErrorCode::DB_FAILED,
  ErrorCode::INVALID_STATE,
  ErrorCode::EXCESSIVE_ACCESS,
  ErrorCode::NOT_FOUND,
  ErrorCode::INVALID_MID,
  ErrorCode::NOT_A_MEMBER,
  ErrorCode::INVALID_LENGTH,
  ErrorCode::NOT_AVAILABLE_USER,
  ErrorCode::NOT_AUTHORIZED_DEVICE,
  ErrorCode::NOT_AUTHORIZED_SESSION,
  ErrorCode::INCOMPATIBLE_APP_VERSION,
  ErrorCode::NOT_READY,
  ErrorCode::NOT_AVAILABLE_SESSION,
  ErrorCode::SYSTEM_ERROR,
  ErrorCode::NO_AVAILABLE_VERIFICATION_METHOD,
  ErrorCode::NOT_AUTHENTICATED,
  ErrorCode::INVALID_IDENTITY_CREDENTIAL,
  ErrorCode::NOT_AVAILABLE_IDENTITY_IDENTIFIER,
  ErrorCode::INTERNAL_ERROR,
  ErrorCode::NO_SUCH_IDENTITY_IDENFIER,
  ErrorCode::DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY,
  ErrorCode::ILLEGAL_IDENTITY_CREDENTIAL,
  ErrorCode::UNKNOWN_CHANNEL,
  ErrorCode::NO_SUCH_MESSAGE_BOX,
  ErrorCode::NOT_AVAILABLE_MESSAGE_BOX,
  ErrorCode::CHANNEL_DOES_NOT_MATCH,
  ErrorCode::NOT_YOUR_MESSAGE,
  ErrorCode::MESSAGE_DEFINED_ERROR,
  ErrorCode::USER_CANNOT_ACCEPT_PRESENTS,
  ErrorCode::USER_NOT_STICKER_OWNER,
  ErrorCode::MAINTENANCE_ERROR,
  ErrorCode::ACCOUNT_NOT_MATCHED,
  ErrorCode::ABUSE_BLOCK,
  ErrorCode::NOT_FRIEND,
  ErrorCode::NOT_ALLOWED_CALL,
  ErrorCode::BLOCK_FRIEND,
  ErrorCode::INCOMPATIBLE_VOIP_VERSION,
  ErrorCode::INVALID_SNS_ACCESS_TOKEN,
  ErrorCode::EXTERNAL_SERVICE_NOT_AVAILABLE,
  ErrorCode::NOT_ALLOWED_ADD_CONTACT,
  ErrorCode::NOT_CERTIFICATED,
  ErrorCode::NOT_ALLOWED_SECONDARY_DEVICE,
  ErrorCode::INVALID_PIN_CODE,
  ErrorCode::NOT_FOUND_IDENTITY_CREDENTIAL,
  ErrorCode::EXCEED_FILE_MAX_SIZE,
  ErrorCode::EXCEED_DAILY_QUOTA,
  ErrorCode::NOT_SUPPORT_SEND_FILE,
  ErrorCode::MUST_UPGRADE,
  ErrorCode::NOT_AVAILABLE_PIN_CODE_SESSION,
  ErrorCode::EXPIRED_REVISION,
  ErrorCode::NOT_YET_PHONE_NUMBER,
  ErrorCode::BAD_CALL_NUMBER,
  ErrorCode::UNAVAILABLE_CALL_NUMBER,
  ErrorCode::NOT_SUPPORT_CALL_SERVICE,
  ErrorCode::CONGESTION_CONTROL,
  ErrorCode::NO_BALANCE,
  ErrorCode::NOT_PERMITTED_CALLER_ID,
  ErrorCode::NO_CALLER_ID_LIMIT_EXCEEDED,
  ErrorCode::CALLER_ID_VERIFICATION_REQUIRED,
  ErrorCode::NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED,
  ErrorCode::MESSAGE_NOT_FOUND,
  ErrorCode::INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT,
  ErrorCode::ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED,
  ErrorCode::ACCOUNT_MIGRATION_PINCODE_BLOCKED,
  ErrorCode::INVALID_PASSWORD_FORMAT,
  ErrorCode::FEATURE_RESTRICTED,
  ErrorCode::MESSAGE_NOT_DESTRUCTIBLE,
  ErrorCode::PAID_CALL_REDEEM_FAILED,
  ErrorCode::PREVENTED_JOIN_BY_TICKET,
  ErrorCode::SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT,
  ErrorCode::SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY,
  ErrorCode::SECURITY_CENTER_NOT_VERIFIED,
  ErrorCode::SECURITY_CENTER_BLOCKED_BY_SETTING,
  ErrorCode::SECURITY_CENTER_BLOCKED,
  ErrorCode::TALK_PROXY_EXCEPTION,
  ErrorCode::E2EE_INVALID_PROTOCOL,
  ErrorCode::E2EE_RETRY_ENCRYPT,
  ErrorCode::E2EE_UPDATE_SENDER_KEY,
  ErrorCode::E2EE_UPDATE_RECEIVER_KEY,
  ErrorCode::E2EE_INVALID_ARGUMENT,
  ErrorCode::E2EE_INVALID_VERSION,
  ErrorCode::E2EE_SENDER_DISABLED,
  ErrorCode::E2EE_RECEIVER_DISABLED,
  ErrorCode::E2EE_SENDER_NOT_ALLOWED,
  ErrorCode::E2EE_RECEIVER_NOT_ALLOWED,
  ErrorCode::E2EE_RESEND_FAIL,
  ErrorCode::E2EE_RESEND_OK,
  ErrorCode::HITOKOTO_BACKUP_NO_AVAILABLE_DATA,
  ErrorCode::E2EE_UPDATE_PRIMARY_DEVICE,
  ErrorCode::SUCCESS,
  ErrorCode::CANCEL,
  ErrorCode::E2EE_PRIMARY_NOT_SUPPORT,
  ErrorCode::E2EE_RETRY_PLAIN,
  ErrorCode::E2EE_RECREATE_GROUP_KEY,
  ErrorCode::E2EE_GROUP_TOO_MANY_MEMBERS,
  ErrorCode::SERVER_BUSY,
  ErrorCode::NOT_ALLOWED_ADD_FOLLOW,
  ErrorCode::INCOMING_FRIEND_REQUEST_LIMIT,
  ErrorCode::OUTGOING_FRIEND_REQUEST_LIMIT,
  ErrorCode::OUTGOING_FRIEND_REQUEST_QUOTA,
  ErrorCode::DUPLICATED,
  ErrorCode::BANNED
};
const char* _kErrorCodeNames[] = {
  "ILLEGAL_ARGUMENT",
  "AUTHENTICATION_FAILED",
  "DB_FAILED",
  "INVALID_STATE",
  "EXCESSIVE_ACCESS",
  "NOT_FOUND",
  "INVALID_MID",
  "NOT_A_MEMBER",
  "INVALID_LENGTH",
  "NOT_AVAILABLE_USER",
  "NOT_AUTHORIZED_DEVICE",
  "NOT_AUTHORIZED_SESSION",
  "INCOMPATIBLE_APP_VERSION",
  "NOT_READY",
  "NOT_AVAILABLE_SESSION",
  "SYSTEM_ERROR",
  "NO_AVAILABLE_VERIFICATION_METHOD",
  "NOT_AUTHENTICATED",
  "INVALID_IDENTITY_CREDENTIAL",
  "NOT_AVAILABLE_IDENTITY_IDENTIFIER",
  "INTERNAL_ERROR",
  "NO_SUCH_IDENTITY_IDENFIER",
  "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY",
  "ILLEGAL_IDENTITY_CREDENTIAL",
  "UNKNOWN_CHANNEL",
  "NO_SUCH_MESSAGE_BOX",
  "NOT_AVAILABLE_MESSAGE_BOX",
  "CHANNEL_DOES_NOT_MATCH",
  "NOT_YOUR_MESSAGE",
  "MESSAGE_DEFINED_ERROR",
  "USER_CANNOT_ACCEPT_PRESENTS",
  "USER_NOT_STICKER_OWNER",
  "MAINTENANCE_ERROR",
  "ACCOUNT_NOT_MATCHED",
  "ABUSE_BLOCK",
  "NOT_FRIEND",
  "NOT_ALLOWED_CALL",
  "BLOCK_FRIEND",
  "INCOMPATIBLE_VOIP_VERSION",
  "INVALID_SNS_ACCESS_TOKEN",
  "EXTERNAL_SERVICE_NOT_AVAILABLE",
  "NOT_ALLOWED_ADD_CONTACT",
  "NOT_CERTIFICATED",
  "NOT_ALLOWED_SECONDARY_DEVICE",
  "INVALID_PIN_CODE",
  "NOT_FOUND_IDENTITY_CREDENTIAL",
  "EXCEED_FILE_MAX_SIZE",
  "EXCEED_DAILY_QUOTA",
  "NOT_SUPPORT_SEND_FILE",
  "MUST_UPGRADE",
  "NOT_AVAILABLE_PIN_CODE_SESSION",
  "EXPIRED_REVISION",
  "NOT_YET_PHONE_NUMBER",
  "BAD_CALL_NUMBER",
  "UNAVAILABLE_CALL_NUMBER",
  "NOT_SUPPORT_CALL_SERVICE",
  "CONGESTION_CONTROL",
  "NO_BALANCE",
  "NOT_PERMITTED_CALLER_ID",
  "NO_CALLER_ID_LIMIT_EXCEEDED",
  "CALLER_ID_VERIFICATION_REQUIRED",
  "NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED",
  "MESSAGE_NOT_FOUND",
  "INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT",
  "ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED",
  "ACCOUNT_MIGRATION_PINCODE_BLOCKED",
  "INVALID_PASSWORD_FORMAT",
  "FEATURE_RESTRICTED",
  "MESSAGE_NOT_DESTRUCTIBLE",
  "PAID_CALL_REDEEM_FAILED",
  "PREVENTED_JOIN_BY_TICKET",
  "SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT",
  "SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY",
  "SECURITY_CENTER_NOT_VERIFIED",
  "SECURITY_CENTER_BLOCKED_BY_SETTING",
  "SECURITY_CENTER_BLOCKED",
  "TALK_PROXY_EXCEPTION",
  "E2EE_INVALID_PROTOCOL",
  "E2EE_RETRY_ENCRYPT",
  "E2EE_UPDATE_SENDER_KEY",
  "E2EE_UPDATE_RECEIVER_KEY",
  "E2EE_INVALID_ARGUMENT",
  "E2EE_INVALID_VERSION",
  "E2EE_SENDER_DISABLED",
  "E2EE_RECEIVER_DISABLED",
  "E2EE_SENDER_NOT_ALLOWED",
  "E2EE_RECEIVER_NOT_ALLOWED",
  "E2EE_RESEND_FAIL",
  "E2EE_RESEND_OK",
  "HITOKOTO_BACKUP_NO_AVAILABLE_DATA",
  "E2EE_UPDATE_PRIMARY_DEVICE",
  "SUCCESS",
  "CANCEL",
  "E2EE_PRIMARY_NOT_SUPPORT",
  "E2EE_RETRY_PLAIN",
  "E2EE_RECREATE_GROUP_KEY",
  "E2EE_GROUP_TOO_MANY_MEMBERS",
  "SERVER_BUSY",
  "NOT_ALLOWED_ADD_FOLLOW",
  "INCOMING_FRIEND_REQUEST_LIMIT",
  "OUTGOING_FRIEND_REQUEST_LIMIT",
  "OUTGOING_FRIEND_REQUEST_QUOTA",
  "DUPLICATED",
  "BANNED"
};
const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(104, _kErrorCodeValues, _kErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ErrorCode::type& val) {
  std::map<int, const char*>::const_iterator it = _ErrorCode_VALUES_TO_NAMES.find(val);
  if (it != _ErrorCode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kFeatureTypeValues[] = {
  FeatureType::OBS_VIDEO,
  FeatureType::OBS_GENERAL
};
const char* _kFeatureTypeNames[] = {
  "OBS_VIDEO",
  "OBS_GENERAL"
};
const std::map<int, const char*> _FeatureType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kFeatureTypeValues, _kFeatureTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const FeatureType::type& val) {
  std::map<int, const char*>::const_iterator it = _FeatureType_VALUES_TO_NAMES.find(val);
  if (it != _FeatureType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kGroupAttributeValues[] = {
  GroupAttribute::NAME,
  GroupAttribute::PICTURE_STATUS,
  GroupAttribute::ALL,
  GroupAttribute::PREVENTED_JOIN_BY_TICKET,
  GroupAttribute::NOTIFICATION_SETTING
};
const char* _kGroupAttributeNames[] = {
  "NAME",
  "PICTURE_STATUS",
  "ALL",
  "PREVENTED_JOIN_BY_TICKET",
  "NOTIFICATION_SETTING"
};
const std::map<int, const char*> _GroupAttribute_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kGroupAttributeValues, _kGroupAttributeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const GroupAttribute::type& val) {
  std::map<int, const char*>::const_iterator it = _GroupAttribute_VALUES_TO_NAMES.find(val);
  if (it != _GroupAttribute_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kIdentityProviderValues[] = {
  IdentityProvider::UNKNOWN,
  IdentityProvider::LINE,
  IdentityProvider::NAVER_KR,
  IdentityProvider::LINE_PHONE
};
const char* _kIdentityProviderNames[] = {
  "UNKNOWN",
  "LINE",
  "NAVER_KR",
  "LINE_PHONE"
};
const std::map<int, const char*> _IdentityProvider_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kIdentityProviderValues, _kIdentityProviderNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const IdentityProvider::type& val) {
  std::map<int, const char*>::const_iterator it = _IdentityProvider_VALUES_TO_NAMES.find(val);
  if (it != _IdentityProvider_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kLoginResultTypeValues[] = {
  LoginResultType::SUCCESS,
  LoginResultType::REQUIRE_QRCODE,
  LoginResultType::REQUIRE_DEVICE_CONFIRM,
  LoginResultType::REQUIRE_SMS_CONFIRM
};
const char* _kLoginResultTypeNames[] = {
  "SUCCESS",
  "REQUIRE_QRCODE",
  "REQUIRE_DEVICE_CONFIRM",
  "REQUIRE_SMS_CONFIRM"
};
const std::map<int, const char*> _LoginResultType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kLoginResultTypeValues, _kLoginResultTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const LoginResultType::type& val) {
  std::map<int, const char*>::const_iterator it = _LoginResultType_VALUES_TO_NAMES.find(val);
  if (it != _LoginResultType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kMessageOperationTypeValues[] = {
  MessageOperationType::SEND_MESSAGE,
  MessageOperationType::RECEIVE_MESSAGE,
  MessageOperationType::READ_MESSAGE,
  MessageOperationType::NOTIFIED_READ_MESSAGE,
  MessageOperationType::NOTIFIED_JOIN_CHAT,
  MessageOperationType::FAILED_SEND_MESSAGE,
  MessageOperationType::SEND_CONTENT,
  MessageOperationType::SEND_CONTENT_RECEIPT,
  MessageOperationType::SEND_CHAT_REMOVED,
  MessageOperationType::REMOVE_ALL_MESSAGES
};
const char* _kMessageOperationTypeNames[] = {
  "SEND_MESSAGE",
  "RECEIVE_MESSAGE",
  "READ_MESSAGE",
  "NOTIFIED_READ_MESSAGE",
  "NOTIFIED_JOIN_CHAT",
  "FAILED_SEND_MESSAGE",
  "SEND_CONTENT",
  "SEND_CONTENT_RECEIPT",
  "SEND_CHAT_REMOVED",
  "REMOVE_ALL_MESSAGES"
};
const std::map<int, const char*> _MessageOperationType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(10, _kMessageOperationTypeValues, _kMessageOperationTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const MessageOperationType::type& val) {
  std::map<int, const char*>::const_iterator it = _MessageOperationType_VALUES_TO_NAMES.find(val);
  if (it != _MessageOperationType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kMIDTypeValues[] = {
  MIDType::USER,
  MIDType::ROOM,
  MIDType::GROUP,
  MIDType::SQUARE,
  MIDType::SQUARE_CHAT,
  MIDType::SQUARE_MEMBER,
  MIDType::BOT
};
const char* _kMIDTypeNames[] = {
  "USER",
  "ROOM",
  "GROUP",
  "SQUARE",
  "SQUARE_CHAT",
  "SQUARE_MEMBER",
  "BOT"
};
const std::map<int, const char*> _MIDType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kMIDTypeValues, _kMIDTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const MIDType::type& val) {
  std::map<int, const char*>::const_iterator it = _MIDType_VALUES_TO_NAMES.find(val);
  if (it != _MIDType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kServiceCodeValues[] = {
  ServiceCode::UNKNOWN,
  ServiceCode::TALK,
  ServiceCode::SQUARE
};
const char* _kServiceCodeNames[] = {
  "UNKNOWN",
  "TALK",
  "SQUARE"
};
const std::map<int, const char*> _ServiceCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kServiceCodeValues, _kServiceCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ServiceCode::type& val) {
  std::map<int, const char*>::const_iterator it = _ServiceCode_VALUES_TO_NAMES.find(val);
  if (it != _ServiceCode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kFriendRequestDirectionValues[] = {
  FriendRequestDirection::INCOMING,
  FriendRequestDirection::OUTGOING
};
const char* _kFriendRequestDirectionNames[] = {
  "INCOMING",
  "OUTGOING"
};
const std::map<int, const char*> _FriendRequestDirection_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kFriendRequestDirectionValues, _kFriendRequestDirectionNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const FriendRequestDirection::type& val) {
  std::map<int, const char*>::const_iterator it = _FriendRequestDirection_VALUES_TO_NAMES.find(val);
  if (it != _FriendRequestDirection_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kFriendRequestMethodValues[] = {
  FriendRequestMethod::TIMELINE,
  FriendRequestMethod::NEARBY,
  FriendRequestMethod::SQUARE
};
const char* _kFriendRequestMethodNames[] = {
  "TIMELINE",
  "NEARBY",
  "SQUARE"
};
const std::map<int, const char*> _FriendRequestMethod_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kFriendRequestMethodValues, _kFriendRequestMethodNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const FriendRequestMethod::type& val) {
  std::map<int, const char*>::const_iterator it = _FriendRequestMethod_VALUES_TO_NAMES.find(val);
  if (it != _FriendRequestMethod_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kFriendRequestStatusValues[] = {
  FriendRequestStatus::NONE,
  FriendRequestStatus::AVAILABLE,
  FriendRequestStatus::ALREADY_REQUESTED,
  FriendRequestStatus::UNAVAILABLE
};
const char* _kFriendRequestStatusNames[] = {
  "NONE",
  "AVAILABLE",
  "ALREADY_REQUESTED",
  "UNAVAILABLE"
};
const std::map<int, const char*> _FriendRequestStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kFriendRequestStatusValues, _kFriendRequestStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const FriendRequestStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _FriendRequestStatus_VALUES_TO_NAMES.find(val);
  if (it != _FriendRequestStatus_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kModificationTypeValues[] = {
  ModificationType::ADD,
  ModificationType::REMOVE,
  ModificationType::MODIFY
};
const char* _kModificationTypeNames[] = {
  "ADD",
  "REMOVE",
  "MODIFY"
};
const std::map<int, const char*> _ModificationType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kModificationTypeValues, _kModificationTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ModificationType::type& val) {
  std::map<int, const char*>::const_iterator it = _ModificationType_VALUES_TO_NAMES.find(val);
  if (it != _ModificationType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kNotificationItemFetchModeValues[] = {
  NotificationItemFetchMode::ALL,
  NotificationItemFetchMode::APPEND
};
const char* _kNotificationItemFetchModeNames[] = {
  "ALL",
  "APPEND"
};
const std::map<int, const char*> _NotificationItemFetchMode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kNotificationItemFetchModeValues, _kNotificationItemFetchModeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const NotificationItemFetchMode::type& val) {
  std::map<int, const char*>::const_iterator it = _NotificationItemFetchMode_VALUES_TO_NAMES.find(val);
  if (it != _NotificationItemFetchMode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kNotificationQueueTypeValues[] = {
  NotificationQueueType::GLOBAL,
  NotificationQueueType::MESSAGE,
  NotificationQueueType::PRIMARY
};
const char* _kNotificationQueueTypeNames[] = {
  "GLOBAL",
  "MESSAGE",
  "PRIMARY"
};
const std::map<int, const char*> _NotificationQueueType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kNotificationQueueTypeValues, _kNotificationQueueTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const NotificationQueueType::type& val) {
  std::map<int, const char*>::const_iterator it = _NotificationQueueType_VALUES_TO_NAMES.find(val);
  if (it != _NotificationQueueType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kGroupCallMediaTypeValues[] = {
  GroupCallMediaType::AUDIO,
  GroupCallMediaType::VIDEO
};
const char* _kGroupCallMediaTypeNames[] = {
  "AUDIO",
  "VIDEO"
};
const std::map<int, const char*> _GroupCallMediaType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kGroupCallMediaTypeValues, _kGroupCallMediaTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const GroupCallMediaType::type& val) {
  std::map<int, const char*>::const_iterator it = _GroupCallMediaType_VALUES_TO_NAMES.find(val);
  if (it != _GroupCallMediaType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kPersonalInfoValues[] = {
  PersonalInfo::EMAIL,
  PersonalInfo::PHONE,
  PersonalInfo::BIRTHDAY,
  PersonalInfo::RAW_BIRTHDAY
};
const char* _kPersonalInfoNames[] = {
  "EMAIL",
  "PHONE",
  "BIRTHDAY",
  "RAW_BIRTHDAY"
};
const std::map<int, const char*> _PersonalInfo_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kPersonalInfoValues, _kPersonalInfoNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const PersonalInfo::type& val) {
  std::map<int, const char*>::const_iterator it = _PersonalInfo_VALUES_TO_NAMES.find(val);
  if (it != _PersonalInfo_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kNotificationStatusValues[] = {
  NotificationStatus::NOTIFICATION_ITEM_EXIST,
  NotificationStatus::TIMELINE_ITEM_EXIST,
  NotificationStatus::NOTE_GROUP_NEW_ITEM_EXIST,
  NotificationStatus::TIMELINE_BUDDYGROUP_CHANGED,
  NotificationStatus::NOTE_ONE_TO_ONE_NEW_ITEM_EXIST,
  NotificationStatus::ALBUM_ITEM_EXIST,
  NotificationStatus::TIMELINE_ITEM_DELETED,
  NotificationStatus::OTOGROUP_ITEM_EXIST,
  NotificationStatus::GROUPHOME_NEW_ITEM_EXIST,
  NotificationStatus::GROUPHOME_HIDDEN_ITEM_CHANGED,
  NotificationStatus::NOTIFICATION_ITEM_CHANGED,
  NotificationStatus::BEAD_ITEM_HIDE,
  NotificationStatus::BEAD_ITEM_SHOW
};
const char* _kNotificationStatusNames[] = {
  "NOTIFICATION_ITEM_EXIST",
  "TIMELINE_ITEM_EXIST",
  "NOTE_GROUP_NEW_ITEM_EXIST",
  "TIMELINE_BUDDYGROUP_CHANGED",
  "NOTE_ONE_TO_ONE_NEW_ITEM_EXIST",
  "ALBUM_ITEM_EXIST",
  "TIMELINE_ITEM_DELETED",
  "OTOGROUP_ITEM_EXIST",
  "GROUPHOME_NEW_ITEM_EXIST",
  "GROUPHOME_HIDDEN_ITEM_CHANGED",
  "NOTIFICATION_ITEM_CHANGED",
  "BEAD_ITEM_HIDE",
  "BEAD_ITEM_SHOW"
};
const std::map<int, const char*> _NotificationStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(13, _kNotificationStatusValues, _kNotificationStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const NotificationStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _NotificationStatus_VALUES_TO_NAMES.find(val);
  if (it != _NotificationStatus_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kNotificationTypeValues[] = {
  NotificationType::APPLE_APNS,
  NotificationType::GOOGLE_C2DM,
  NotificationType::NHN_NNI,
  NotificationType::SKT_AOM,
  NotificationType::MS_MPNS,
  NotificationType::RIM_BIS,
  NotificationType::GOOGLE_GCM,
  NotificationType::NOKIA_NNAPI,
  NotificationType::TIZEN,
  NotificationType::LINE_BOT,
  NotificationType::LINE_WAP,
  NotificationType::APPLE_APNS_VOIP,
  NotificationType::MS_WNS,
  NotificationType::GOOGLE_FCM
};
const char* _kNotificationTypeNames[] = {
  "APPLE_APNS",
  "GOOGLE_C2DM",
  "NHN_NNI",
  "SKT_AOM",
  "MS_MPNS",
  "RIM_BIS",
  "GOOGLE_GCM",
  "NOKIA_NNAPI",
  "TIZEN",
  "LINE_BOT",
  "LINE_WAP",
  "APPLE_APNS_VOIP",
  "MS_WNS",
  "GOOGLE_FCM"
};
const std::map<int, const char*> _NotificationType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(14, _kNotificationTypeValues, _kNotificationTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const NotificationType::type& val) {
  std::map<int, const char*>::const_iterator it = _NotificationType_VALUES_TO_NAMES.find(val);
  if (it != _NotificationType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kOpStatusValues[] = {
  OpStatus::NORMAL,
  OpStatus::ALERT_DISABLED,
  OpStatus::ALWAYS
};
const char* _kOpStatusNames[] = {
  "NORMAL",
  "ALERT_DISABLED",
  "ALWAYS"
};
const std::map<int, const char*> _OpStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kOpStatusValues, _kOpStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const OpStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _OpStatus_VALUES_TO_NAMES.find(val);
  if (it != _OpStatus_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kOpTypeValues[] = {
  OpType::END_OF_OPERATION,
  OpType::UPDATE_PROFILE,
  OpType::UPDATE_SETTINGS,
  OpType::NOTIFIED_UPDATE_PROFILE,
  OpType::REGISTER_USERID,
  OpType::ADD_CONTACT,
  OpType::NOTIFIED_ADD_CONTACT,
  OpType::BLOCK_CONTACT,
  OpType::UNBLOCK_CONTACT,
  OpType::NOTIFIED_RECOMMEND_CONTACT,
  OpType::CREATE_GROUP,
  OpType::UPDATE_GROUP,
  OpType::NOTIFIED_UPDATE_GROUP,
  OpType::INVITE_INTO_GROUP,
  OpType::NOTIFIED_INVITE_INTO_GROUP,
  OpType::CANCEL_INVITATION_GROUP,
  OpType::NOTIFIED_CANCEL_INVITATION_GROUP,
  OpType::LEAVE_GROUP,
  OpType::NOTIFIED_LEAVE_GROUP,
  OpType::ACCEPT_GROUP_INVITATION,
  OpType::NOTIFIED_ACCEPT_GROUP_INVITATION,
  OpType::REJECT_GROUP_INVITATION,
  OpType::NOTIFIED_REJECT_GROUP_INVITATION,
  OpType::KICKOUT_FROM_GROUP,
  OpType::NOTIFIED_KICKOUT_FROM_GROUP,
  OpType::CREATE_ROOM,
  OpType::INVITE_INTO_ROOM,
  OpType::NOTIFIED_INVITE_INTO_ROOM,
  OpType::LEAVE_ROOM,
  OpType::NOTIFIED_LEAVE_ROOM,
  OpType::SEND_MESSAGE,
  OpType::RECEIVE_MESSAGE,
  OpType::SEND_MESSAGE_RECEIPT,
  OpType::RECEIVE_MESSAGE_RECEIPT,
  OpType::SEND_CONTENT_RECEIPT,
  OpType::RECEIVE_ANNOUNCEMENT,
  OpType::NOTIFIED_UNREGISTER_USER,
  OpType::INVITE_VIA_EMAIL,
  OpType::NOTIFIED_REGISTER_USER,
  OpType::NOTIFIED_REQUEST_RECOVERY,
  OpType::SEND_CHAT_CHECKED,
  OpType::SEND_CHAT_REMOVED,
  OpType::NOTIFIED_FORCE_SYNC,
  OpType::SEND_CONTENT,
  OpType::SEND_MESSAGE_MYHOME,
  OpType::NOTIFIED_UPDATE_CONTENT_PREVIEW,
  OpType::REMOVE_ALL_MESSAGES,
  OpType::NOTIFIED_UPDATE_PURCHASES,
  OpType::DUMMY,
  OpType::UPDATE_CONTACT,
  OpType::NOTIFIED_RECEIVED_CALL,
  OpType::CANCEL_CALL,
  OpType::NOTIFIED_REDIRECT,
  OpType::NOTIFIED_CHANNEL_SYNC,
  OpType::FAILED_SEND_MESSAGE,
  OpType::NOTIFIED_READ_MESSAGE,
  OpType::FAILED_EMAIL_CONFIRMATION,
  OpType::NOTIFIED_CHAT_CONTENT,
  OpType::NOTIFIED_PUSH_NOTICENTER_ITEM,
  OpType::NOTIFIED_JOIN_CHAT,
  OpType::NOTIFIED_LEAVE_CHAT,
  OpType::NOTIFIED_TYPING,
  OpType::FRIEND_REQUEST_ACCEPTED,
  OpType::DESTROY_MESSAGE,
  OpType::NOTIFIED_DESTROY_MESSAGE,
  OpType::UPDATE_PUBLICKEYCHAIN,
  OpType::NOTIFIED_UPDATE_PUBLICKEYCHAIN,
  OpType::NOTIFIED_BLOCK_CONTACT,
  OpType::NOTIFIED_UNBLOCK_CONTACT,
  OpType::UPDATE_GROUPPREFERENCE,
  OpType::NOTIFIED_PAYMENT_EVENT,
  OpType::REGISTER_E2EE_PUBLICKEY,
  OpType::NOTIFIED_E2EE_KEY_EXCHANGE_REQ,
  OpType::NOTIFIED_E2EE_KEY_EXCHANGE_RESP,
  OpType::NOTIFIED_E2EE_MESSAGE_RESEND_REQ,
  OpType::NOTIFIED_E2EE_MESSAGE_RESEND_RESP,
  OpType::NOTIFIED_E2EE_KEY_UPDATE,
  OpType::NOTIFIED_BUDDY_UPDATE_PROFILE,
  OpType::NOTIFIED_UPDATE_LINEAT_TABS,
  OpType::UPDATE_ROOM,
  OpType::NOTIFIED_BEACON_DETECTED,
  OpType::UPDATE_EXTENDED_PROFILE,
  OpType::ADD_FOLLOW,
  OpType::NOTIFIED_ADD_FOLLOW,
  OpType::DELETE_FOLLOW,
  OpType::NOTIFIED_DELETE_FOLLOW,
  OpType::UPDATE_TIMELINE_SETTINGS,
  OpType::NOTIFIED_FRIEND_REQUEST,
  OpType::UPDATE_RINGBACK_TONE,
  OpType::NOTIFIED_POSTBACK,
  OpType::RECEIVE_READ_WATERMARK,
  OpType::NOTIFIED_MESSAGE_DELIVERED,
  OpType::NOTIFIED_UPDATE_CHAT_BAR,
  OpType::NOTIFIED_CHATAPP_INSTALLED,
  OpType::NOTIFIED_CHATAPP_UPDATED,
  OpType::NOTIFIED_CHATAPP_NEW_MARK,
  OpType::NOTIFIED_CHATAPP_DELETED,
  OpType::NOTIFIED_CHATAPP_SYNC,
  OpType::NOTIFIED_UPDATE_MESSAGE
};
const char* _kOpTypeNames[] = {
  "END_OF_OPERATION",
  "UPDATE_PROFILE",
  "UPDATE_SETTINGS",
  "NOTIFIED_UPDATE_PROFILE",
  "REGISTER_USERID",
  "ADD_CONTACT",
  "NOTIFIED_ADD_CONTACT",
  "BLOCK_CONTACT",
  "UNBLOCK_CONTACT",
  "NOTIFIED_RECOMMEND_CONTACT",
  "CREATE_GROUP",
  "UPDATE_GROUP",
  "NOTIFIED_UPDATE_GROUP",
  "INVITE_INTO_GROUP",
  "NOTIFIED_INVITE_INTO_GROUP",
  "CANCEL_INVITATION_GROUP",
  "NOTIFIED_CANCEL_INVITATION_GROUP",
  "LEAVE_GROUP",
  "NOTIFIED_LEAVE_GROUP",
  "ACCEPT_GROUP_INVITATION",
  "NOTIFIED_ACCEPT_GROUP_INVITATION",
  "REJECT_GROUP_INVITATION",
  "NOTIFIED_REJECT_GROUP_INVITATION",
  "KICKOUT_FROM_GROUP",
  "NOTIFIED_KICKOUT_FROM_GROUP",
  "CREATE_ROOM",
  "INVITE_INTO_ROOM",
  "NOTIFIED_INVITE_INTO_ROOM",
  "LEAVE_ROOM",
  "NOTIFIED_LEAVE_ROOM",
  "SEND_MESSAGE",
  "RECEIVE_MESSAGE",
  "SEND_MESSAGE_RECEIPT",
  "RECEIVE_MESSAGE_RECEIPT",
  "SEND_CONTENT_RECEIPT",
  "RECEIVE_ANNOUNCEMENT",
  "NOTIFIED_UNREGISTER_USER",
  "INVITE_VIA_EMAIL",
  "NOTIFIED_REGISTER_USER",
  "NOTIFIED_REQUEST_RECOVERY",
  "SEND_CHAT_CHECKED",
  "SEND_CHAT_REMOVED",
  "NOTIFIED_FORCE_SYNC",
  "SEND_CONTENT",
  "SEND_MESSAGE_MYHOME",
  "NOTIFIED_UPDATE_CONTENT_PREVIEW",
  "REMOVE_ALL_MESSAGES",
  "NOTIFIED_UPDATE_PURCHASES",
  "DUMMY",
  "UPDATE_CONTACT",
  "NOTIFIED_RECEIVED_CALL",
  "CANCEL_CALL",
  "NOTIFIED_REDIRECT",
  "NOTIFIED_CHANNEL_SYNC",
  "FAILED_SEND_MESSAGE",
  "NOTIFIED_READ_MESSAGE",
  "FAILED_EMAIL_CONFIRMATION",
  "NOTIFIED_CHAT_CONTENT",
  "NOTIFIED_PUSH_NOTICENTER_ITEM",
  "NOTIFIED_JOIN_CHAT",
  "NOTIFIED_LEAVE_CHAT",
  "NOTIFIED_TYPING",
  "FRIEND_REQUEST_ACCEPTED",
  "DESTROY_MESSAGE",
  "NOTIFIED_DESTROY_MESSAGE",
  "UPDATE_PUBLICKEYCHAIN",
  "NOTIFIED_UPDATE_PUBLICKEYCHAIN",
  "NOTIFIED_BLOCK_CONTACT",
  "NOTIFIED_UNBLOCK_CONTACT",
  "UPDATE_GROUPPREFERENCE",
  "NOTIFIED_PAYMENT_EVENT",
  "REGISTER_E2EE_PUBLICKEY",
  "NOTIFIED_E2EE_KEY_EXCHANGE_REQ",
  "NOTIFIED_E2EE_KEY_EXCHANGE_RESP",
  "NOTIFIED_E2EE_MESSAGE_RESEND_REQ",
  "NOTIFIED_E2EE_MESSAGE_RESEND_RESP",
  "NOTIFIED_E2EE_KEY_UPDATE",
  "NOTIFIED_BUDDY_UPDATE_PROFILE",
  "NOTIFIED_UPDATE_LINEAT_TABS",
  "UPDATE_ROOM",
  "NOTIFIED_BEACON_DETECTED",
  "UPDATE_EXTENDED_PROFILE",
  "ADD_FOLLOW",
  "NOTIFIED_ADD_FOLLOW",
  "DELETE_FOLLOW",
  "NOTIFIED_DELETE_FOLLOW",
  "UPDATE_TIMELINE_SETTINGS",
  "NOTIFIED_FRIEND_REQUEST",
  "UPDATE_RINGBACK_TONE",
  "NOTIFIED_POSTBACK",
  "RECEIVE_READ_WATERMARK",
  "NOTIFIED_MESSAGE_DELIVERED",
  "NOTIFIED_UPDATE_CHAT_BAR",
  "NOTIFIED_CHATAPP_INSTALLED",
  "NOTIFIED_CHATAPP_UPDATED",
  "NOTIFIED_CHATAPP_NEW_MARK",
  "NOTIFIED_CHATAPP_DELETED",
  "NOTIFIED_CHATAPP_SYNC",
  "NOTIFIED_UPDATE_MESSAGE"
};
const std::map<int, const char*> _OpType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(99, _kOpTypeValues, _kOpTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const OpType::type& val) {
  std::map<int, const char*>::const_iterator it = _OpType_VALUES_TO_NAMES.find(val);
  if (it != _OpType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kPayloadTypeValues[] = {
  PayloadType::PAYLOAD_BUY,
  PayloadType::PAYLOAD_CS,
  PayloadType::PAYLOAD_BONUS,
  PayloadType::PAYLOAD_EVENT
};
const char* _kPayloadTypeNames[] = {
  "PAYLOAD_BUY",
  "PAYLOAD_CS",
  "PAYLOAD_BONUS",
  "PAYLOAD_EVENT"
};
const std::map<int, const char*> _PayloadType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kPayloadTypeValues, _kPayloadTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const PayloadType::type& val) {
  std::map<int, const char*>::const_iterator it = _PayloadType_VALUES_TO_NAMES.find(val);
  if (it != _PayloadType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kPaymentPgTypeValues[] = {
  PaymentPgType::PAYMENT_PG_NONE,
  PaymentPgType::PAYMENT_PG_AU,
  PaymentPgType::PAYMENT_PG_AL
};
const char* _kPaymentPgTypeNames[] = {
  "PAYMENT_PG_NONE",
  "PAYMENT_PG_AU",
  "PAYMENT_PG_AL"
};
const std::map<int, const char*> _PaymentPgType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kPaymentPgTypeValues, _kPaymentPgTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const PaymentPgType::type& val) {
  std::map<int, const char*>::const_iterator it = _PaymentPgType_VALUES_TO_NAMES.find(val);
  if (it != _PaymentPgType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kPaymentTypeValues[] = {
  PaymentType::PAYMENT_APPLE,
  PaymentType::PAYMENT_GOOGLE
};
const char* _kPaymentTypeNames[] = {
  "PAYMENT_APPLE",
  "PAYMENT_GOOGLE"
};
const std::map<int, const char*> _PaymentType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kPaymentTypeValues, _kPaymentTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const PaymentType::type& val) {
  std::map<int, const char*>::const_iterator it = _PaymentType_VALUES_TO_NAMES.find(val);
  if (it != _PaymentType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kProductBannerLinkTypeValues[] = {
  ProductBannerLinkType::BANNER_LINK_NONE,
  ProductBannerLinkType::BANNER_LINK_ITEM,
  ProductBannerLinkType::BANNER_LINK_URL,
  ProductBannerLinkType::BANNER_LINK_CATEGORY
};
const char* _kProductBannerLinkTypeNames[] = {
  "BANNER_LINK_NONE",
  "BANNER_LINK_ITEM",
  "BANNER_LINK_URL",
  "BANNER_LINK_CATEGORY"
};
const std::map<int, const char*> _ProductBannerLinkType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kProductBannerLinkTypeValues, _kProductBannerLinkTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ProductBannerLinkType::type& val) {
  std::map<int, const char*>::const_iterator it = _ProductBannerLinkType_VALUES_TO_NAMES.find(val);
  if (it != _ProductBannerLinkType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kProductEventTypeValues[] = {
  ProductEventType::NO_EVENT,
  ProductEventType::CARRIER_ANY,
  ProductEventType::BUDDY_ANY,
  ProductEventType::INSTALL_IOS,
  ProductEventType::INSTALL_ANDROID,
  ProductEventType::MISSION_ANY,
  ProductEventType::MUSTBUY_ANY
};
const char* _kProductEventTypeNames[] = {
  "NO_EVENT",
  "CARRIER_ANY",
  "BUDDY_ANY",
  "INSTALL_IOS",
  "INSTALL_ANDROID",
  "MISSION_ANY",
  "MUSTBUY_ANY"
};
const std::map<int, const char*> _ProductEventType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kProductEventTypeValues, _kProductEventTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ProductEventType::type& val) {
  std::map<int, const char*>::const_iterator it = _ProductEventType_VALUES_TO_NAMES.find(val);
  if (it != _ProductEventType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kStickerResourceTypeValues[] = {
  StickerResourceType::STATIC,
  StickerResourceType::ANIMATION,
  StickerResourceType::SOUND,
  StickerResourceType::ANIMATION_SOUND,
  StickerResourceType::POPUP,
  StickerResourceType::POPUP_SOUND
};
const char* _kStickerResourceTypeNames[] = {
  "STATIC",
  "ANIMATION",
  "SOUND",
  "ANIMATION_SOUND",
  "POPUP",
  "POPUP_SOUND"
};
const std::map<int, const char*> _StickerResourceType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kStickerResourceTypeValues, _kStickerResourceTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const StickerResourceType::type& val) {
  std::map<int, const char*>::const_iterator it = _StickerResourceType_VALUES_TO_NAMES.find(val);
  if (it != _StickerResourceType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kPlaceSearchProviderValues[] = {
  PlaceSearchProvider::GOOGLE,
  PlaceSearchProvider::BAIDU
};
const char* _kPlaceSearchProviderNames[] = {
  "GOOGLE",
  "BAIDU"
};
const std::map<int, const char*> _PlaceSearchProvider_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kPlaceSearchProviderValues, _kPlaceSearchProviderNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const PlaceSearchProvider::type& val) {
  std::map<int, const char*>::const_iterator it = _PlaceSearchProvider_VALUES_TO_NAMES.find(val);
  if (it != _PlaceSearchProvider_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kPointErrorCodeValues[] = {
  PointErrorCode::REQUEST_DUPLICATION,
  PointErrorCode::INVALID_PARAMETER,
  PointErrorCode::NOT_ENOUGH_BALANCE,
  PointErrorCode::AUTHENTICATION_FAIL,
  PointErrorCode::API_ACCESS_FORBIDDEN,
  PointErrorCode::MEMBER_ACCOUNT_NOT_FOUND,
  PointErrorCode::SERVICE_ACCOUNT_NOT_FOUND,
  PointErrorCode::TRANSACTION_NOT_FOUND,
  PointErrorCode::ALREADY_REVERSED_TRANSACTION,
  PointErrorCode::MESSAGE_NOT_READABLE,
  PointErrorCode::HTTP_REQUEST_METHOD_NOT_SUPPORTED,
  PointErrorCode::HTTP_MEDIA_TYPE_NOT_SUPPORTED,
  PointErrorCode::NOT_ALLOWED_TO_DEPOSIT,
  PointErrorCode::NOT_ALLOWED_TO_PAY,
  PointErrorCode::TRANSACTION_ACCESS_FORBIDDEN,
  PointErrorCode::INVALID_SERVICE_CONFIGURATION,
  PointErrorCode::DCS_COMMUNICATION_FAIL,
  PointErrorCode::UPDATE_BALANCE_FAIL,
  PointErrorCode::SYSTEM_ERROR,
  PointErrorCode::SYSTEM_MAINTENANCE
};
const char* _kPointErrorCodeNames[] = {
  "REQUEST_DUPLICATION",
  "INVALID_PARAMETER",
  "NOT_ENOUGH_BALANCE",
  "AUTHENTICATION_FAIL",
  "API_ACCESS_FORBIDDEN",
  "MEMBER_ACCOUNT_NOT_FOUND",
  "SERVICE_ACCOUNT_NOT_FOUND",
  "TRANSACTION_NOT_FOUND",
  "ALREADY_REVERSED_TRANSACTION",
  "MESSAGE_NOT_READABLE",
  "HTTP_REQUEST_METHOD_NOT_SUPPORTED",
  "HTTP_MEDIA_TYPE_NOT_SUPPORTED",
  "NOT_ALLOWED_TO_DEPOSIT",
  "NOT_ALLOWED_TO_PAY",
  "TRANSACTION_ACCESS_FORBIDDEN",
  "INVALID_SERVICE_CONFIGURATION",
  "DCS_COMMUNICATION_FAIL",
  "UPDATE_BALANCE_FAIL",
  "SYSTEM_ERROR",
  "SYSTEM_MAINTENANCE"
};
const std::map<int, const char*> _PointErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(20, _kPointErrorCodeValues, _kPointErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const PointErrorCode::type& val) {
  std::map<int, const char*>::const_iterator it = _PointErrorCode_VALUES_TO_NAMES.find(val);
  if (it != _PointErrorCode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kProfileAttributeValues[] = {
  ProfileAttribute::ALL,
  ProfileAttribute::EMAIL,
  ProfileAttribute::DISPLAY_NAME,
  ProfileAttribute::PHONETIC_NAME,
  ProfileAttribute::PICTURE,
  ProfileAttribute::STATUS_MESSAGE,
  ProfileAttribute::ALLOW_SEARCH_BY_USERID,
  ProfileAttribute::ALLOW_SEARCH_BY_EMAIL,
  ProfileAttribute::BUDDY_STATUS,
  ProfileAttribute::MUSIC_PROFILE
};
const char* _kProfileAttributeNames[] = {
  "ALL",
  "EMAIL",
  "DISPLAY_NAME",
  "PHONETIC_NAME",
  "PICTURE",
  "STATUS_MESSAGE",
  "ALLOW_SEARCH_BY_USERID",
  "ALLOW_SEARCH_BY_EMAIL",
  "BUDDY_STATUS",
  "MUSIC_PROFILE"
};
const std::map<int, const char*> _ProfileAttribute_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(10, _kProfileAttributeValues, _kProfileAttributeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ProfileAttribute::type& val) {
  std::map<int, const char*>::const_iterator it = _ProfileAttribute_VALUES_TO_NAMES.find(val);
  if (it != _ProfileAttribute_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kPublicTypeValues[] = {
  PublicType::HIDDEN,
  PublicType::PUBLIC
};
const char* _kPublicTypeNames[] = {
  "HIDDEN",
  "PUBLIC"
};
const std::map<int, const char*> _PublicType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kPublicTypeValues, _kPublicTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const PublicType::type& val) {
  std::map<int, const char*>::const_iterator it = _PublicType_VALUES_TO_NAMES.find(val);
  if (it != _PublicType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kRedirectTypeValues[] = {
  RedirectType::NONE,
  RedirectType::EXPIRE_SECOND
};
const char* _kRedirectTypeNames[] = {
  "NONE",
  "EXPIRE_SECOND"
};
const std::map<int, const char*> _RedirectType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kRedirectTypeValues, _kRedirectTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const RedirectType::type& val) {
  std::map<int, const char*>::const_iterator it = _RedirectType_VALUES_TO_NAMES.find(val);
  if (it != _RedirectType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kRegistrationTypeValues[] = {
  RegistrationType::PHONE,
  RegistrationType::EMAIL_WAP,
  RegistrationType::FACEBOOK,
  RegistrationType::SINA,
  RegistrationType::RENREN,
  RegistrationType::FEIXIN
};
const char* _kRegistrationTypeNames[] = {
  "PHONE",
  "EMAIL_WAP",
  "FACEBOOK",
  "SINA",
  "RENREN",
  "FEIXIN"
};
const std::map<int, const char*> _RegistrationType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kRegistrationTypeValues, _kRegistrationTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const RegistrationType::type& val) {
  std::map<int, const char*>::const_iterator it = _RegistrationType_VALUES_TO_NAMES.find(val);
  if (it != _RegistrationType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kChatRoomAnnouncementTypeValues[] = {
  ChatRoomAnnouncementType::MESSAGE,
  ChatRoomAnnouncementType::NOTE
};
const char* _kChatRoomAnnouncementTypeNames[] = {
  "MESSAGE",
  "NOTE"
};
const std::map<int, const char*> _ChatRoomAnnouncementType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kChatRoomAnnouncementTypeValues, _kChatRoomAnnouncementTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ChatRoomAnnouncementType::type& val) {
  std::map<int, const char*>::const_iterator it = _ChatRoomAnnouncementType_VALUES_TO_NAMES.find(val);
  if (it != _ChatRoomAnnouncementType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSettingsAttributeValues[] = {
  SettingsAttribute::ALL,
  SettingsAttribute::NOTIFICATION_ENABLE,
  SettingsAttribute::NOTIFICATION_MUTE_EXPIRATION,
  SettingsAttribute::NOTIFICATION_NEW_MESSAGE,
  SettingsAttribute::NOTIFICATION_GROUP_INVITATION,
  SettingsAttribute::NOTIFICATION_SHOW_MESSAGE,
  SettingsAttribute::NOTIFICATION_INCOMING_CALL,
  SettingsAttribute::NOTIFICATION_SOUND_MESSAGE,
  SettingsAttribute::NOTIFICATION_SOUND_GROUP,
  SettingsAttribute::NOTIFICATION_DISABLED_WITH_SUB,
  SettingsAttribute::NOTIFICATION_PAYMENT,
  SettingsAttribute::PRIVACY_SYNC_CONTACTS,
  SettingsAttribute::PRIVACY_SEARCH_BY_PHONE_NUMBER,
  SettingsAttribute::PRIVACY_SEARCH_BY_USERID,
  SettingsAttribute::PRIVACY_SEARCH_BY_EMAIL,
  SettingsAttribute::PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN,
  SettingsAttribute::PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME,
  SettingsAttribute::PRIVACY_ALLOW_FRIEND_REQUEST,
  SettingsAttribute::PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND,
  SettingsAttribute::PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL,
  SettingsAttribute::PRIVACY_AGREE_USE_PAIDCALL,
  SettingsAttribute::CONTACT_MY_TICKET,
  SettingsAttribute::IDENTITY_PROVIDER,
  SettingsAttribute::IDENTITY_IDENTIFIER,
  SettingsAttribute::SNS_ACCOUNT,
  SettingsAttribute::PHONE_REGISTRATION,
  SettingsAttribute::PREFERENCE_LOCALE,
  SettingsAttribute::CUSTOM_MODE,
  SettingsAttribute::EMAIL_CONFIRMATION_STATUS,
  SettingsAttribute::ACCOUNT_MIGRATION_PINCODE,
  SettingsAttribute::ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE,
  SettingsAttribute::SECURITY_CENTER_SETTINGS
};
const char* _kSettingsAttributeNames[] = {
  "ALL",
  "NOTIFICATION_ENABLE",
  "NOTIFICATION_MUTE_EXPIRATION",
  "NOTIFICATION_NEW_MESSAGE",
  "NOTIFICATION_GROUP_INVITATION",
  "NOTIFICATION_SHOW_MESSAGE",
  "NOTIFICATION_INCOMING_CALL",
  "NOTIFICATION_SOUND_MESSAGE",
  "NOTIFICATION_SOUND_GROUP",
  "NOTIFICATION_DISABLED_WITH_SUB",
  "NOTIFICATION_PAYMENT",
  "PRIVACY_SYNC_CONTACTS",
  "PRIVACY_SEARCH_BY_PHONE_NUMBER",
  "PRIVACY_SEARCH_BY_USERID",
  "PRIVACY_SEARCH_BY_EMAIL",
  "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN",
  "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME",
  "PRIVACY_ALLOW_FRIEND_REQUEST",
  "PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND",
  "PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL",
  "PRIVACY_AGREE_USE_PAIDCALL",
  "CONTACT_MY_TICKET",
  "IDENTITY_PROVIDER",
  "IDENTITY_IDENTIFIER",
  "SNS_ACCOUNT",
  "PHONE_REGISTRATION",
  "PREFERENCE_LOCALE",
  "CUSTOM_MODE",
  "EMAIL_CONFIRMATION_STATUS",
  "ACCOUNT_MIGRATION_PINCODE",
  "ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE",
  "SECURITY_CENTER_SETTINGS"
};
const std::map<int, const char*> _SettingsAttribute_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(32, _kSettingsAttributeValues, _kSettingsAttributeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SettingsAttribute::type& val) {
  std::map<int, const char*>::const_iterator it = _SettingsAttribute_VALUES_TO_NAMES.find(val);
  if (it != _SettingsAttribute_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSettingsAttributeExValues[] = {
  SettingsAttributeEx::NOTIFICATION_ENABLE,
  SettingsAttributeEx::NOTIFICATION_MUTE_EXPIRATION,
  SettingsAttributeEx::NOTIFICATION_NEW_MESSAGE,
  SettingsAttributeEx::NOTIFICATION_GROUP_INVITATION,
  SettingsAttributeEx::NOTIFICATION_SHOW_MESSAGE,
  SettingsAttributeEx::NOTIFICATION_INCOMING_CALL,
  SettingsAttributeEx::NOTIFICATION_SOUND_MESSAGE,
  SettingsAttributeEx::NOTIFICATION_SOUND_GROUP,
  SettingsAttributeEx::NOTIFICATION_DISABLED_WITH_SUB,
  SettingsAttributeEx::NOTIFICATION_PAYMENT,
  SettingsAttributeEx::NOTIFICATION_MENTION,
  SettingsAttributeEx::NOTIFICATION_THUMBNAIL,
  SettingsAttributeEx::PRIVACY_SYNC_CONTACTS,
  SettingsAttributeEx::PRIVACY_SEARCH_BY_PHONE_NUMBER,
  SettingsAttributeEx::PRIVACY_SEARCH_BY_USERID,
  SettingsAttributeEx::PRIVACY_SEARCH_BY_EMAIL,
  SettingsAttributeEx::PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN,
  SettingsAttributeEx::PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME,
  SettingsAttributeEx::PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME,
  SettingsAttributeEx::PRIVACY_ALLOW_FRIEND_REQUEST,
  SettingsAttributeEx::PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND,
  SettingsAttributeEx::PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL,
  SettingsAttributeEx::PRIVACY_AGREE_USE_PAIDCALL,
  SettingsAttributeEx::CONTACT_MY_TICKET,
  SettingsAttributeEx::IDENTITY_PROVIDER,
  SettingsAttributeEx::IDENTITY_IDENTIFIER,
  SettingsAttributeEx::SNS_ACCOUNT,
  SettingsAttributeEx::PHONE_REGISTRATION,
  SettingsAttributeEx::PREFERENCE_LOCALE,
  SettingsAttributeEx::CUSTOM_MODE,
  SettingsAttributeEx::EMAIL_CONFIRMATION_STATUS,
  SettingsAttributeEx::ACCOUNT_MIGRATION_PINCODE,
  SettingsAttributeEx::ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE,
  SettingsAttributeEx::SECURITY_CENTER_SETTINGS,
  SettingsAttributeEx::E2EE_ENABLE,
  SettingsAttributeEx::ENABLE_SOUND_TO_TEXT,
  SettingsAttributeEx::HITOKOTO_BACKUP_REQUESTED,
  SettingsAttributeEx::CONTACT_ALLOW_FOLLOWING,
  SettingsAttributeEx::PRIVACY_ALLOW_NEARBY,
  SettingsAttributeEx::AGREEMENT_NEARBY,
  SettingsAttributeEx::AGREEMENT_SQUARE,
  SettingsAttributeEx::ALLOW_UNREGISTRATION_SECONDARY_DEVICE,
  SettingsAttributeEx::AGREEMENT_BOT_USE,
  SettingsAttributeEx::AGREEMENT_SHAKE_FUNCTION,
  SettingsAttributeEx::AGREEMENT_MOBILE_CONTACT_NAME,
  SettingsAttributeEx::AGREEMENT_SOUND_TO_TEXT
};
const char* _kSettingsAttributeExNames[] = {
  "NOTIFICATION_ENABLE",
  "NOTIFICATION_MUTE_EXPIRATION",
  "NOTIFICATION_NEW_MESSAGE",
  "NOTIFICATION_GROUP_INVITATION",
  "NOTIFICATION_SHOW_MESSAGE",
  "NOTIFICATION_INCOMING_CALL",
  "NOTIFICATION_SOUND_MESSAGE",
  "NOTIFICATION_SOUND_GROUP",
  "NOTIFICATION_DISABLED_WITH_SUB",
  "NOTIFICATION_PAYMENT",
  "NOTIFICATION_MENTION",
  "NOTIFICATION_THUMBNAIL",
  "PRIVACY_SYNC_CONTACTS",
  "PRIVACY_SEARCH_BY_PHONE_NUMBER",
  "PRIVACY_SEARCH_BY_USERID",
  "PRIVACY_SEARCH_BY_EMAIL",
  "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN",
  "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME",
  "PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME",
  "PRIVACY_ALLOW_FRIEND_REQUEST",
  "PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND",
  "PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL",
  "PRIVACY_AGREE_USE_PAIDCALL",
  "CONTACT_MY_TICKET",
  "IDENTITY_PROVIDER",
  "IDENTITY_IDENTIFIER",
  "SNS_ACCOUNT",
  "PHONE_REGISTRATION",
  "PREFERENCE_LOCALE",
  "CUSTOM_MODE",
  "EMAIL_CONFIRMATION_STATUS",
  "ACCOUNT_MIGRATION_PINCODE",
  "ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE",
  "SECURITY_CENTER_SETTINGS",
  "E2EE_ENABLE",
  "ENABLE_SOUND_TO_TEXT",
  "HITOKOTO_BACKUP_REQUESTED",
  "CONTACT_ALLOW_FOLLOWING",
  "PRIVACY_ALLOW_NEARBY",
  "AGREEMENT_NEARBY",
  "AGREEMENT_SQUARE",
  "ALLOW_UNREGISTRATION_SECONDARY_DEVICE",
  "AGREEMENT_BOT_USE",
  "AGREEMENT_SHAKE_FUNCTION",
  "AGREEMENT_MOBILE_CONTACT_NAME",
  "AGREEMENT_SOUND_TO_TEXT"
};
const std::map<int, const char*> _SettingsAttributeEx_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(46, _kSettingsAttributeExValues, _kSettingsAttributeExNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SettingsAttributeEx::type& val) {
  std::map<int, const char*>::const_iterator it = _SettingsAttributeEx_VALUES_TO_NAMES.find(val);
  if (it != _SettingsAttributeEx_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSnsIdTypeValues[] = {
  SnsIdType::FACEBOOK,
  SnsIdType::SINA,
  SnsIdType::RENREN,
  SnsIdType::FEIXIN,
  SnsIdType::BBM
};
const char* _kSnsIdTypeNames[] = {
  "FACEBOOK",
  "SINA",
  "RENREN",
  "FEIXIN",
  "BBM"
};
const std::map<int, const char*> _SnsIdType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kSnsIdTypeValues, _kSnsIdTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SnsIdType::type& val) {
  std::map<int, const char*>::const_iterator it = _SnsIdType_VALUES_TO_NAMES.find(val);
  if (it != _SnsIdType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSpammerReasonValues[] = {
  SpammerReason::OTHER,
  SpammerReason::ADVERTISING,
  SpammerReason::GENDER_HARASSMENT,
  SpammerReason::HARASSMENT
};
const char* _kSpammerReasonNames[] = {
  "OTHER",
  "ADVERTISING",
  "GENDER_HARASSMENT",
  "HARASSMENT"
};
const std::map<int, const char*> _SpammerReason_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kSpammerReasonValues, _kSpammerReasonNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SpammerReason::type& val) {
  std::map<int, const char*>::const_iterator it = _SpammerReason_VALUES_TO_NAMES.find(val);
  if (it != _SpammerReason_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSyncActionTypeValues[] = {
  SyncActionType::SYNC,
  SyncActionType::REPORT
};
const char* _kSyncActionTypeNames[] = {
  "SYNC",
  "REPORT"
};
const std::map<int, const char*> _SyncActionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kSyncActionTypeValues, _kSyncActionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SyncActionType::type& val) {
  std::map<int, const char*>::const_iterator it = _SyncActionType_VALUES_TO_NAMES.find(val);
  if (it != _SyncActionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSpotCategoryValues[] = {
  SpotCategory::UNKNOWN,
  SpotCategory::GOURMET,
  SpotCategory::BEAUTY,
  SpotCategory::TRAVEL,
  SpotCategory::SHOPPING,
  SpotCategory::ENTERTAINMENT,
  SpotCategory::SPORTS,
  SpotCategory::TRANSPORT,
  SpotCategory::LIFE,
  SpotCategory::HOSPITAL,
  SpotCategory::FINANCE,
  SpotCategory::EDUCATION,
  SpotCategory::OTHER,
  SpotCategory::ALL
};
const char* _kSpotCategoryNames[] = {
  "UNKNOWN",
  "GOURMET",
  "BEAUTY",
  "TRAVEL",
  "SHOPPING",
  "ENTERTAINMENT",
  "SPORTS",
  "TRANSPORT",
  "LIFE",
  "HOSPITAL",
  "FINANCE",
  "EDUCATION",
  "OTHER",
  "ALL"
};
const std::map<int, const char*> _SpotCategory_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(14, _kSpotCategoryValues, _kSpotCategoryNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SpotCategory::type& val) {
  std::map<int, const char*>::const_iterator it = _SpotCategory_VALUES_TO_NAMES.find(val);
  if (it != _SpotCategory_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSyncCategoryValues[] = {
  SyncCategory::PROFILE,
  SyncCategory::SETTINGS,
  SyncCategory::OPS,
  SyncCategory::CONTACT,
  SyncCategory::RECOMMEND,
  SyncCategory::BLOCK,
  SyncCategory::GROUP,
  SyncCategory::ROOM,
  SyncCategory::NOTIFICATION,
  SyncCategory::ADDRESS_BOOK
};
const char* _kSyncCategoryNames[] = {
  "PROFILE",
  "SETTINGS",
  "OPS",
  "CONTACT",
  "RECOMMEND",
  "BLOCK",
  "GROUP",
  "ROOM",
  "NOTIFICATION",
  "ADDRESS_BOOK"
};
const std::map<int, const char*> _SyncCategory_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(10, _kSyncCategoryValues, _kSyncCategoryNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SyncCategory::type& val) {
  std::map<int, const char*>::const_iterator it = _SyncCategory_VALUES_TO_NAMES.find(val);
  if (it != _SyncCategory_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTMessageBoxStatusValues[] = {
  TMessageBoxStatus::ACTIVATED,
  TMessageBoxStatus::UNREAD
};
const char* _kTMessageBoxStatusNames[] = {
  "ACTIVATED",
  "UNREAD"
};
const std::map<int, const char*> _TMessageBoxStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTMessageBoxStatusValues, _kTMessageBoxStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TMessageBoxStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _TMessageBoxStatus_VALUES_TO_NAMES.find(val);
  if (it != _TMessageBoxStatus_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kUniversalNotificationServiceErrorCodeValues[] = {
  UniversalNotificationServiceErrorCode::INTERNAL_ERROR,
  UniversalNotificationServiceErrorCode::INVALID_KEY,
  UniversalNotificationServiceErrorCode::ILLEGAL_ARGUMENT,
  UniversalNotificationServiceErrorCode::TOO_MANY_REQUEST,
  UniversalNotificationServiceErrorCode::AUTHENTICATION_FAILED,
  UniversalNotificationServiceErrorCode::NO_WRITE_PERMISSION
};
const char* _kUniversalNotificationServiceErrorCodeNames[] = {
  "INTERNAL_ERROR",
  "INVALID_KEY",
  "ILLEGAL_ARGUMENT",
  "TOO_MANY_REQUEST",
  "AUTHENTICATION_FAILED",
  "NO_WRITE_PERMISSION"
};
const std::map<int, const char*> _UniversalNotificationServiceErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kUniversalNotificationServiceErrorCodeValues, _kUniversalNotificationServiceErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const UniversalNotificationServiceErrorCode::type& val) {
  std::map<int, const char*>::const_iterator it = _UniversalNotificationServiceErrorCode_VALUES_TO_NAMES.find(val);
  if (it != _UniversalNotificationServiceErrorCode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kUnregistrationReasonValues[] = {
  UnregistrationReason::UNREGISTRATION_REASON_UNREGISTER_USER,
  UnregistrationReason::UNREGISTRATION_REASON_UNBIND_DEVICE
};
const char* _kUnregistrationReasonNames[] = {
  "UNREGISTRATION_REASON_UNREGISTER_USER",
  "UNREGISTRATION_REASON_UNBIND_DEVICE"
};
const std::map<int, const char*> _UnregistrationReason_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kUnregistrationReasonValues, _kUnregistrationReasonNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const UnregistrationReason::type& val) {
  std::map<int, const char*>::const_iterator it = _UnregistrationReason_VALUES_TO_NAMES.find(val);
  if (it != _UnregistrationReason_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kUserAgeTypeValues[] = {
  UserAgeType::OVER,
  UserAgeType::UNDER,
  UserAgeType::UNDEFINED
};
const char* _kUserAgeTypeNames[] = {
  "OVER",
  "UNDER",
  "UNDEFINED"
};
const std::map<int, const char*> _UserAgeType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kUserAgeTypeValues, _kUserAgeTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const UserAgeType::type& val) {
  std::map<int, const char*>::const_iterator it = _UserAgeType_VALUES_TO_NAMES.find(val);
  if (it != _UserAgeType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kVerificationMethodValues[] = {
  VerificationMethod::NO_AVAILABLE,
  VerificationMethod::PIN_VIA_SMS,
  VerificationMethod::CALLERID_INDIGO,
  VerificationMethod::PIN_VIA_TTS,
  VerificationMethod::SKIP
};
const char* _kVerificationMethodNames[] = {
  "NO_AVAILABLE",
  "PIN_VIA_SMS",
  "CALLERID_INDIGO",
  "PIN_VIA_TTS",
  "SKIP"
};
const std::map<int, const char*> _VerificationMethod_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kVerificationMethodValues, _kVerificationMethodNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const VerificationMethod::type& val) {
  std::map<int, const char*>::const_iterator it = _VerificationMethod_VALUES_TO_NAMES.find(val);
  if (it != _VerificationMethod_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kVerificationResultValues[] = {
  VerificationResult::FAILED,
  VerificationResult::OK_NOT_REGISTERED_YET,
  VerificationResult::OK_REGISTERED_WITH_SAME_DEVICE,
  VerificationResult::OK_REGISTERED_WITH_ANOTHER_DEVICE
};
const char* _kVerificationResultNames[] = {
  "FAILED",
  "OK_NOT_REGISTERED_YET",
  "OK_REGISTERED_WITH_SAME_DEVICE",
  "OK_REGISTERED_WITH_ANOTHER_DEVICE"
};
const std::map<int, const char*> _VerificationResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kVerificationResultValues, _kVerificationResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const VerificationResult::type& val) {
  std::map<int, const char*>::const_iterator it = _VerificationResult_VALUES_TO_NAMES.find(val);
  if (it != _VerificationResult_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kWapInvitationTypeValues[] = {
  WapInvitationType::REGISTRATION,
  WapInvitationType::CHAT
};
const char* _kWapInvitationTypeNames[] = {
  "REGISTRATION",
  "CHAT"
};
const std::map<int, const char*> _WapInvitationType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kWapInvitationTypeValues, _kWapInvitationTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const WapInvitationType::type& val) {
  std::map<int, const char*>::const_iterator it = _WapInvitationType_VALUES_TO_NAMES.find(val);
  if (it != _WapInvitationType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kMediaTypeValues[] = {
  MediaType::AUDIO,
  MediaType::VIDEO
};
const char* _kMediaTypeNames[] = {
  "AUDIO",
  "VIDEO"
};
const std::map<int, const char*> _MediaType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kMediaTypeValues, _kMediaTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const MediaType::type& val) {
  std::map<int, const char*>::const_iterator it = _MediaType_VALUES_TO_NAMES.find(val);
  if (it != _MediaType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSQErrorCodeValues[] = {
  SQErrorCode::UNKNOWN,
  SQErrorCode::ILLEGAL_ARGUMENT,
  SQErrorCode::AUTHENTICATION_FAILURE,
  SQErrorCode::FORBIDDEN,
  SQErrorCode::NOT_FOUND,
  SQErrorCode::REVISION_MISMATCH,
  SQErrorCode::PRECONDITION_FAILED,
  SQErrorCode::INTERNAL_ERROR,
  SQErrorCode::NOT_IMPLEMENTED,
  SQErrorCode::TRY_AGAIN_LATER
};
const char* _kSQErrorCodeNames[] = {
  "UNKNOWN",
  "ILLEGAL_ARGUMENT",
  "AUTHENTICATION_FAILURE",
  "FORBIDDEN",
  "NOT_FOUND",
  "REVISION_MISMATCH",
  "PRECONDITION_FAILED",
  "INTERNAL_ERROR",
  "NOT_IMPLEMENTED",
  "TRY_AGAIN_LATER"
};
const std::map<int, const char*> _SQErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(10, _kSQErrorCodeValues, _kSQErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SQErrorCode::type& val) {
  std::map<int, const char*>::const_iterator it = _SQErrorCode_VALUES_TO_NAMES.find(val);
  if (it != _SQErrorCode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSquareEventTypeValues[] = {
  SquareEventType::RECEIVE_MESSAGE,
  SquareEventType::SEND_MESSAGE,
  SquareEventType::NOTIFIED_JOIN_SQUARE_CHAT,
  SquareEventType::NOTIFIED_INVITE_INTO_SQUARE_CHAT,
  SquareEventType::NOTIFIED_LEAVE_SQUARE_CHAT,
  SquareEventType::NOTIFIED_DESTROY_MESSAGE,
  SquareEventType::NOTIFIED_MARK_AS_READ,
  SquareEventType::NOTIFIED_UPDATE_SQUARE_MEMBER_PROFILE,
  SquareEventType::NOTIFIED_KICKOUT_FROM_SQUARE,
  SquareEventType::NOTIFIED_SHUTDOWN_SQUARE,
  SquareEventType::NOTIFIED_DELETE_SQUARE_CHAT,
  SquareEventType::NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_NAME,
  SquareEventType::NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_IMAGE,
  SquareEventType::NOTIFIED_UPDATE_SQUARE_CHAT_ANNOUNCEMENT,
  SquareEventType::NOTIFIED_ADD_BOT,
  SquareEventType::NOTIFIED_REMOVE_BOT,
  SquareEventType::NOTIFIED_UPDATE_SQUARE,
  SquareEventType::NOTIFIED_UPDATE_SQUARE_STATUS,
  SquareEventType::NOTIFIED_UPDATE_SQUARE_AUTHORITY,
  SquareEventType::NOTIFIED_UPDATE_SQUARE_MEMBER,
  SquareEventType::NOTIFIED_UPDATE_SQUARE_CHAT,
  SquareEventType::NOTIFIED_UPDATE_SQUARE_CHAT_STATUS,
  SquareEventType::NOTIFIED_UPDATE_SQUARE_CHAT_MEMBER,
  SquareEventType::NOTIFIED_CREATE_SQUARE_MEMBER,
  SquareEventType::NOTIFIED_CREATE_SQUARE_CHAT_MEMBER,
  SquareEventType::NOTIFIED_UPDATE_SQUARE_MEMBER_RELATION,
  SquareEventType::NOTIFIED_UPDATE_SQUARE_FEATURE_SET,
  SquareEventType::NOTIFIED_UPDATE_SQUARE_NOTE_STATUS,
  SquareEventType::NOTIFICATION_JOIN_REQUEST,
  SquareEventType::NOTIFICATION_JOINED,
  SquareEventType::NOTIFICATION_PROMOTED_COADMIN,
  SquareEventType::NOTIFICATION_PROMOTED_ADMIN,
  SquareEventType::NOTIFICATION_DEMOTED_MEMBER,
  SquareEventType::NOTIFICATION_KICKED_OUT,
  SquareEventType::NOTIFICATION_SQUARE_DELETE,
  SquareEventType::NOTIFICATION_SQUARE_CHAT_DELETE,
  SquareEventType::NOTIFICATION_MESSAGE
};
const char* _kSquareEventTypeNames[] = {
  "RECEIVE_MESSAGE",
  "SEND_MESSAGE",
  "NOTIFIED_JOIN_SQUARE_CHAT",
  "NOTIFIED_INVITE_INTO_SQUARE_CHAT",
  "NOTIFIED_LEAVE_SQUARE_CHAT",
  "NOTIFIED_DESTROY_MESSAGE",
  "NOTIFIED_MARK_AS_READ",
  "NOTIFIED_UPDATE_SQUARE_MEMBER_PROFILE",
  "NOTIFIED_KICKOUT_FROM_SQUARE",
  "NOTIFIED_SHUTDOWN_SQUARE",
  "NOTIFIED_DELETE_SQUARE_CHAT",
  "NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_NAME",
  "NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_IMAGE",
  "NOTIFIED_UPDATE_SQUARE_CHAT_ANNOUNCEMENT",
  "NOTIFIED_ADD_BOT",
  "NOTIFIED_REMOVE_BOT",
  "NOTIFIED_UPDATE_SQUARE",
  "NOTIFIED_UPDATE_SQUARE_STATUS",
  "NOTIFIED_UPDATE_SQUARE_AUTHORITY",
  "NOTIFIED_UPDATE_SQUARE_MEMBER",
  "NOTIFIED_UPDATE_SQUARE_CHAT",
  "NOTIFIED_UPDATE_SQUARE_CHAT_STATUS",
  "NOTIFIED_UPDATE_SQUARE_CHAT_MEMBER",
  "NOTIFIED_CREATE_SQUARE_MEMBER",
  "NOTIFIED_CREATE_SQUARE_CHAT_MEMBER",
  "NOTIFIED_UPDATE_SQUARE_MEMBER_RELATION",
  "NOTIFIED_UPDATE_SQUARE_FEATURE_SET",
  "NOTIFIED_UPDATE_SQUARE_NOTE_STATUS",
  "NOTIFICATION_JOIN_REQUEST",
  "NOTIFICATION_JOINED",
  "NOTIFICATION_PROMOTED_COADMIN",
  "NOTIFICATION_PROMOTED_ADMIN",
  "NOTIFICATION_DEMOTED_MEMBER",
  "NOTIFICATION_KICKED_OUT",
  "NOTIFICATION_SQUARE_DELETE",
  "NOTIFICATION_SQUARE_CHAT_DELETE",
  "NOTIFICATION_MESSAGE"
};
const std::map<int, const char*> _SquareEventType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(37, _kSquareEventTypeValues, _kSquareEventTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SquareEventType::type& val) {
  std::map<int, const char*>::const_iterator it = _SquareEventType_VALUES_TO_NAMES.find(val);
  if (it != _SquareEventType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSquareMemberRelationStateValues[] = {
  SquareMemberRelationState::NONE,
  SquareMemberRelationState::BLOCKED
};
const char* _kSquareMemberRelationStateNames[] = {
  "NONE",
  "BLOCKED"
};
const std::map<int, const char*> _SquareMemberRelationState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kSquareMemberRelationStateValues, _kSquareMemberRelationStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SquareMemberRelationState::type& val) {
  std::map<int, const char*>::const_iterator it = _SquareMemberRelationState_VALUES_TO_NAMES.find(val);
  if (it != _SquareMemberRelationState_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSquareFeatureControlStateValues[] = {
  SquareFeatureControlState::DISABLED,
  SquareFeatureControlState::ENABLED
};
const char* _kSquareFeatureControlStateNames[] = {
  "DISABLED",
  "ENABLED"
};
const std::map<int, const char*> _SquareFeatureControlState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kSquareFeatureControlStateValues, _kSquareFeatureControlStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SquareFeatureControlState::type& val) {
  std::map<int, const char*>::const_iterator it = _SquareFeatureControlState_VALUES_TO_NAMES.find(val);
  if (it != _SquareFeatureControlState_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kBooleanStateValues[] = {
  BooleanState::NONE,
  BooleanState::OFF,
  BooleanState::ON
};
const char* _kBooleanStateNames[] = {
  "NONE",
  "OFF",
  "ON"
};
const std::map<int, const char*> _BooleanState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kBooleanStateValues, _kBooleanStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const BooleanState::type& val) {
  std::map<int, const char*>::const_iterator it = _BooleanState_VALUES_TO_NAMES.find(val);
  if (it != _BooleanState_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSquareTypeValues[] = {
  SquareType::CLOSED,
  SquareType::OPEN
};
const char* _kSquareTypeNames[] = {
  "CLOSED",
  "OPEN"
};
const std::map<int, const char*> _SquareType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kSquareTypeValues, _kSquareTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SquareType::type& val) {
  std::map<int, const char*>::const_iterator it = _SquareType_VALUES_TO_NAMES.find(val);
  if (it != _SquareType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSquareChatTypeValues[] = {
  SquareChatType::OPEN,
  SquareChatType::SECRET,
  SquareChatType::ONE_ON_ONE,
  SquareChatType::SQUARE_DEFAULT
};
const char* _kSquareChatTypeNames[] = {
  "OPEN",
  "SECRET",
  "ONE_ON_ONE",
  "SQUARE_DEFAULT"
};
const std::map<int, const char*> _SquareChatType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kSquareChatTypeValues, _kSquareChatTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SquareChatType::type& val) {
  std::map<int, const char*>::const_iterator it = _SquareChatType_VALUES_TO_NAMES.find(val);
  if (it != _SquareChatType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSquareErrorCodeValues[] = {
  SquareErrorCode::UNKNOWN,
  SquareErrorCode::INTERNAL_ERROR,
  SquareErrorCode::NOT_IMPLEMENTED,
  SquareErrorCode::TRY_AGAIN_LATER,
  SquareErrorCode::MAINTENANCE,
  SquareErrorCode::ILLEGAL_ARGUMENT,
  SquareErrorCode::AUTHENTICATION_FAILURE,
  SquareErrorCode::FORBIDDEN,
  SquareErrorCode::NOT_FOUND,
  SquareErrorCode::REVISION_MISMATCH,
  SquareErrorCode::PRECONDITION_FAILED
};
const char* _kSquareErrorCodeNames[] = {
  "UNKNOWN",
  "INTERNAL_ERROR",
  "NOT_IMPLEMENTED",
  "TRY_AGAIN_LATER",
  "MAINTENANCE",
  "ILLEGAL_ARGUMENT",
  "AUTHENTICATION_FAILURE",
  "FORBIDDEN",
  "NOT_FOUND",
  "REVISION_MISMATCH",
  "PRECONDITION_FAILED"
};
const std::map<int, const char*> _SquareErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(11, _kSquareErrorCodeValues, _kSquareErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SquareErrorCode::type& val) {
  std::map<int, const char*>::const_iterator it = _SquareErrorCode_VALUES_TO_NAMES.find(val);
  if (it != _SquareErrorCode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSquareChatStateValues[] = {
  SquareChatState::ALIVE,
  SquareChatState::DELETED,
  SquareChatState::SUSPENDED
};
const char* _kSquareChatStateNames[] = {
  "ALIVE",
  "DELETED",
  "SUSPENDED"
};
const std::map<int, const char*> _SquareChatState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kSquareChatStateValues, _kSquareChatStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SquareChatState::type& val) {
  std::map<int, const char*>::const_iterator it = _SquareChatState_VALUES_TO_NAMES.find(val);
  if (it != _SquareChatState_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSquareFeatureSetAttributeValues[] = {
  SquareFeatureSetAttribute::CREATING_SECRET_SQUARE_CHAT,
  SquareFeatureSetAttribute::INVITING_INTO_OPEN_SQUARE_CHAT
};
const char* _kSquareFeatureSetAttributeNames[] = {
  "CREATING_SECRET_SQUARE_CHAT",
  "INVITING_INTO_OPEN_SQUARE_CHAT"
};
const std::map<int, const char*> _SquareFeatureSetAttribute_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kSquareFeatureSetAttributeValues, _kSquareFeatureSetAttributeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SquareFeatureSetAttribute::type& val) {
  std::map<int, const char*>::const_iterator it = _SquareFeatureSetAttribute_VALUES_TO_NAMES.find(val);
  if (it != _SquareFeatureSetAttribute_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSquareMembershipStateValues[] = {
  SquareMembershipState::JOIN_REQUESTED,
  SquareMembershipState::JOINED,
  SquareMembershipState::REJECTED,
  SquareMembershipState::LEFT,
  SquareMembershipState::KICK_OUT,
  SquareMembershipState::BANNED,
  SquareMembershipState::DELETED
};
const char* _kSquareMembershipStateNames[] = {
  "JOIN_REQUESTED",
  "JOINED",
  "REJECTED",
  "LEFT",
  "KICK_OUT",
  "BANNED",
  "DELETED"
};
const std::map<int, const char*> _SquareMembershipState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kSquareMembershipStateValues, _kSquareMembershipStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SquareMembershipState::type& val) {
  std::map<int, const char*>::const_iterator it = _SquareMembershipState_VALUES_TO_NAMES.find(val);
  if (it != _SquareMembershipState_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSquareChatMemberAttributeValues[] = {
  SquareChatMemberAttribute::MEMBERSHIP_STATE,
  SquareChatMemberAttribute::NOTIFICATION_MESSAGE
};
const char* _kSquareChatMemberAttributeNames[] = {
  "MEMBERSHIP_STATE",
  "NOTIFICATION_MESSAGE"
};
const std::map<int, const char*> _SquareChatMemberAttribute_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kSquareChatMemberAttributeValues, _kSquareChatMemberAttributeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SquareChatMemberAttribute::type& val) {
  std::map<int, const char*>::const_iterator it = _SquareChatMemberAttribute_VALUES_TO_NAMES.find(val);
  if (it != _SquareChatMemberAttribute_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSquareMemberRoleValues[] = {
  SquareMemberRole::ADMIN,
  SquareMemberRole::CO_ADMIN,
  SquareMemberRole::MEMBER
};
const char* _kSquareMemberRoleNames[] = {
  "ADMIN",
  "CO_ADMIN",
  "MEMBER"
};
const std::map<int, const char*> _SquareMemberRole_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kSquareMemberRoleValues, _kSquareMemberRoleNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SquareMemberRole::type& val) {
  std::map<int, const char*>::const_iterator it = _SquareMemberRole_VALUES_TO_NAMES.find(val);
  if (it != _SquareMemberRole_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kPreconditionFailedExtraInfoValues[] = {
  PreconditionFailedExtraInfo::DUPLICATED_DISPLAY_NAME
};
const char* _kPreconditionFailedExtraInfoNames[] = {
  "DUPLICATED_DISPLAY_NAME"
};
const std::map<int, const char*> _PreconditionFailedExtraInfo_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kPreconditionFailedExtraInfoValues, _kPreconditionFailedExtraInfoNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const PreconditionFailedExtraInfo::type& val) {
  std::map<int, const char*>::const_iterator it = _PreconditionFailedExtraInfo_VALUES_TO_NAMES.find(val);
  if (it != _PreconditionFailedExtraInfo_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSquareChatMembershipStateValues[] = {
  SquareChatMembershipState::JOINED,
  SquareChatMembershipState::LEFT
};
const char* _kSquareChatMembershipStateNames[] = {
  "JOINED",
  "LEFT"
};
const std::map<int, const char*> _SquareChatMembershipState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kSquareChatMembershipStateValues, _kSquareChatMembershipStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SquareChatMembershipState::type& val) {
  std::map<int, const char*>::const_iterator it = _SquareChatMembershipState_VALUES_TO_NAMES.find(val);
  if (it != _SquareChatMembershipState_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kFetchDirectionValues[] = {
  FetchDirection::FORWARD,
  FetchDirection::BACKWARD
};
const char* _kFetchDirectionNames[] = {
  "FORWARD",
  "BACKWARD"
};
const std::map<int, const char*> _FetchDirection_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kFetchDirectionValues, _kFetchDirectionNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const FetchDirection::type& val) {
  std::map<int, const char*>::const_iterator it = _FetchDirection_VALUES_TO_NAMES.find(val);
  if (it != _FetchDirection_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSquareAttributeValues[] = {
  SquareAttribute::NAME,
  SquareAttribute::WELCOME_MESSAGE,
  SquareAttribute::PROFILE_IMAGE,
  SquareAttribute::DESCRIPTION,
  SquareAttribute::SEARCHABLE,
  SquareAttribute::CATEGORY,
  SquareAttribute::INVITATION_URL,
  SquareAttribute::ABLE_TO_USE_INVITATION_URL,
  SquareAttribute::STATE
};
const char* _kSquareAttributeNames[] = {
  "NAME",
  "WELCOME_MESSAGE",
  "PROFILE_IMAGE",
  "DESCRIPTION",
  "SEARCHABLE",
  "CATEGORY",
  "INVITATION_URL",
  "ABLE_TO_USE_INVITATION_URL",
  "STATE"
};
const std::map<int, const char*> _SquareAttribute_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(9, _kSquareAttributeValues, _kSquareAttributeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SquareAttribute::type& val) {
  std::map<int, const char*>::const_iterator it = _SquareAttribute_VALUES_TO_NAMES.find(val);
  if (it != _SquareAttribute_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSquareAuthorityAttributeValues[] = {
  SquareAuthorityAttribute::UPDATE_SQUARE_PROFILE,
  SquareAuthorityAttribute::INVITE_NEW_MEMBER,
  SquareAuthorityAttribute::APPROVE_JOIN_REQUEST,
  SquareAuthorityAttribute::CREATE_POST,
  SquareAuthorityAttribute::CREATE_OPEN_SQUARE_CHAT,
  SquareAuthorityAttribute::DELETE_SQUARE_CHAT_OR_POST,
  SquareAuthorityAttribute::REMOVE_SQUARE_MEMBER,
  SquareAuthorityAttribute::GRANT_ROLE,
  SquareAuthorityAttribute::ENABLE_INVITATION_TICKET,
  SquareAuthorityAttribute::CREATE_CHAT_ANNOUNCEMENT
};
const char* _kSquareAuthorityAttributeNames[] = {
  "UPDATE_SQUARE_PROFILE",
  "INVITE_NEW_MEMBER",
  "APPROVE_JOIN_REQUEST",
  "CREATE_POST",
  "CREATE_OPEN_SQUARE_CHAT",
  "DELETE_SQUARE_CHAT_OR_POST",
  "REMOVE_SQUARE_MEMBER",
  "GRANT_ROLE",
  "ENABLE_INVITATION_TICKET",
  "CREATE_CHAT_ANNOUNCEMENT"
};
const std::map<int, const char*> _SquareAuthorityAttribute_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(10, _kSquareAuthorityAttributeValues, _kSquareAuthorityAttributeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SquareAuthorityAttribute::type& val) {
  std::map<int, const char*>::const_iterator it = _SquareAuthorityAttribute_VALUES_TO_NAMES.find(val);
  if (it != _SquareAuthorityAttribute_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSquareEventStatusValues[] = {
  SquareEventStatus::NORMAL,
  SquareEventStatus::ALERT_DISABLED
};
const char* _kSquareEventStatusNames[] = {
  "NORMAL",
  "ALERT_DISABLED"
};
const std::map<int, const char*> _SquareEventStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kSquareEventStatusValues, _kSquareEventStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SquareEventStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _SquareEventStatus_VALUES_TO_NAMES.find(val);
  if (it != _SquareEventStatus_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kPTypeValues[] = {
  PType::STICKER,
  PType::THEME,
  PType::STICON
};
const char* _kPTypeNames[] = {
  "STICKER",
  "THEME",
  "STICON"
};
const std::map<int, const char*> _PType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kPTypeValues, _kPTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const PType::type& val) {
  std::map<int, const char*>::const_iterator it = _PType_VALUES_TO_NAMES.find(val);
  if (it != _PType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kPromotionTypeValues[] = {
  PromotionType::NONE,
  PromotionType::CARRIER,
  PromotionType::BUDDY,
  PromotionType::INSTALL,
  PromotionType::MISSION,
  PromotionType::MUSTBUY
};
const char* _kPromotionTypeNames[] = {
  "NONE",
  "CARRIER",
  "BUDDY",
  "INSTALL",
  "MISSION",
  "MUSTBUY"
};
const std::map<int, const char*> _PromotionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kPromotionTypeValues, _kPromotionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const PromotionType::type& val) {
  std::map<int, const char*>::const_iterator it = _PromotionType_VALUES_TO_NAMES.find(val);
  if (it != _PromotionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kPMTypeValues[] = {
  PMType::DEFAULT,
  PMType::VIEW_VIDEO
};
const char* _kPMTypeNames[] = {
  "DEFAULT",
  "VIEW_VIDEO"
};
const std::map<int, const char*> _PMType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kPMTypeValues, _kPMTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const PMType::type& val) {
  std::map<int, const char*>::const_iterator it = _PMType_VALUES_TO_NAMES.find(val);
  if (it != _PMType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSRTypeValues[] = {
  SRType::STATIC,
  SRType::ANIMATION,
  SRType::SOUND,
  SRType::ANIMATION_SOUND,
  SRType::POPUP,
  SRType::l,
  SRType::POPUP_SOUND
};
const char* _kSRTypeNames[] = {
  "STATIC",
  "ANIMATION",
  "SOUND",
  "ANIMATION_SOUND",
  "POPUP",
  "l",
  "POPUP_SOUND"
};
const std::map<int, const char*> _SRType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kSRTypeValues, _kSRTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SRType::type& val) {
  std::map<int, const char*>::const_iterator it = _SRType_VALUES_TO_NAMES.find(val);
  if (it != _SRType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTRTypeValues[] = {
  TRType::STATIC,
  TRType::ANIMATION
};
const char* _kTRTypeNames[] = {
  "STATIC",
  "ANIMATION"
};
const std::map<int, const char*> _TRType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTRTypeValues, _kTRTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TRType::type& val) {
  std::map<int, const char*>::const_iterator it = _TRType_VALUES_TO_NAMES.find(val);
  if (it != _TRType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSubTypeValues[] = {
  SubType::GENERAL,
  SubType::CREATORS
};
const char* _kSubTypeNames[] = {
  "GENERAL",
  "CREATORS"
};
const std::map<int, const char*> _SubType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kSubTypeValues, _kSubTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SubType::type& val) {
  std::map<int, const char*>::const_iterator it = _SubType_VALUES_TO_NAMES.find(val);
  if (it != _SubType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kIdentityResponseTypeValues[] = {
  IdentityResponseType::UNKNOWN,
  IdentityResponseType::SUCCESS,
  IdentityResponseType::REQUIRE_SERVER_SIDE_EMAIL,
  IdentityResponseType::REQUIRE_CLIENT_SIDE_EMAIL
};
const char* _kIdentityResponseTypeNames[] = {
  "UNKNOWN",
  "SUCCESS",
  "REQUIRE_SERVER_SIDE_EMAIL",
  "REQUIRE_CLIENT_SIDE_EMAIL"
};
const std::map<int, const char*> _IdentityResponseType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kIdentityResponseTypeValues, _kIdentityResponseTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const IdentityResponseType::type& val) {
  std::map<int, const char*>::const_iterator it = _IdentityResponseType_VALUES_TO_NAMES.find(val);
  if (it != _IdentityResponseType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kAvailableChatTypesValues[] = {
  AvailableChatTypes::PERSONAL,
  AvailableChatTypes::ROOM,
  AvailableChatTypes::GROUP,
  AvailableChatTypes::SQUARE_CHAT
};
const char* _kAvailableChatTypesNames[] = {
  "PERSONAL",
  "ROOM",
  "GROUP",
  "SQUARE_CHAT"
};
const std::map<int, const char*> _AvailableChatTypes_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kAvailableChatTypesValues, _kAvailableChatTypesNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const AvailableChatTypes::type& val) {
  std::map<int, const char*>::const_iterator it = _AvailableChatTypes_VALUES_TO_NAMES.find(val);
  if (it != _AvailableChatTypes_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kChatAppExceptionCodeValues[] = {
  ChatAppExceptionCode::INVALID_REQUEST,
  ChatAppExceptionCode::UNAUTHORIZED,
  ChatAppExceptionCode::SERVER_ERROR
};
const char* _kChatAppExceptionCodeNames[] = {
  "INVALID_REQUEST",
  "UNAUTHORIZED",
  "SERVER_ERROR"
};
const std::map<int, const char*> _ChatAppExceptionCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kChatAppExceptionCodeValues, _kChatAppExceptionCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ChatAppExceptionCode::type& val) {
  std::map<int, const char*>::const_iterator it = _ChatAppExceptionCode_VALUES_TO_NAMES.find(val);
  if (it != _ChatAppExceptionCode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kChatappCategoryValues[] = {
  ChatappCategory::PRIORITY,
  ChatappCategory::REGULAR,
  ChatappCategory::MORE
};
const char* _kChatappCategoryNames[] = {
  "PRIORITY",
  "REGULAR",
  "MORE"
};
const std::map<int, const char*> _ChatappCategory_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kChatappCategoryValues, _kChatappCategoryNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ChatappCategory::type& val) {
  std::map<int, const char*>::const_iterator it = _ChatappCategory_VALUES_TO_NAMES.find(val);
  if (it != _ChatappCategory_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSuggestDictionaryIncrementStatusValues[] = {
  SuggestDictionaryIncrementStatus::SUCCESS,
  SuggestDictionaryIncrementStatus::INVALID_REVISION,
  SuggestDictionaryIncrementStatus::TOO_LARGE_DATA,
  SuggestDictionaryIncrementStatus::SCHEME_CHANGED,
  SuggestDictionaryIncrementStatus::RETRY,
  SuggestDictionaryIncrementStatus::FAIL,
  SuggestDictionaryIncrementStatus::TOO_OLD_DATA
};
const char* _kSuggestDictionaryIncrementStatusNames[] = {
  "SUCCESS",
  "INVALID_REVISION",
  "TOO_LARGE_DATA",
  "SCHEME_CHANGED",
  "RETRY",
  "FAIL",
  "TOO_OLD_DATA"
};
const std::map<int, const char*> _SuggestDictionaryIncrementStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kSuggestDictionaryIncrementStatusValues, _kSuggestDictionaryIncrementStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SuggestDictionaryIncrementStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _SuggestDictionaryIncrementStatus_VALUES_TO_NAMES.find(val);
  if (it != _SuggestDictionaryIncrementStatus_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


Chatapp::~Chatapp() throw() {
}


void Chatapp::__set_chatappId(const std::string& val) {
  this->chatappId = val;
}

void Chatapp::__set_name(const std::string& val) {
  this->name = val;
}

void Chatapp::__set_icon(const std::string& val) {
  this->icon = val;
}

void Chatapp::__set_url(const std::string& val) {
  this->url = val;
}

void Chatapp::__set_availableChatTypes(const std::vector<AvailableChatTypes::type> & val) {
  this->availableChatTypes = val;
}
std::ostream& operator<<(std::ostream& out, const Chatapp& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Chatapp::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->chatappId);
          this->__isset.chatappId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->icon);
          this->__isset.icon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          this->__isset.url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->availableChatTypes.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->availableChatTypes.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              int32_t ecast5;
              xfer += iprot->readI32(ecast5);
              this->availableChatTypes[_i4] = (AvailableChatTypes::type)ecast5;
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.availableChatTypes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Chatapp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Chatapp");

  xfer += oprot->writeFieldBegin("chatappId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->chatappId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("icon", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->icon);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("availableChatTypes", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->availableChatTypes.size()));
    std::vector<AvailableChatTypes::type> ::const_iterator _iter6;
    for (_iter6 = this->availableChatTypes.begin(); _iter6 != this->availableChatTypes.end(); ++_iter6)
    {
      xfer += oprot->writeI32((int32_t)(*_iter6));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Chatapp &a, Chatapp &b) {
  using ::std::swap;
  swap(a.chatappId, b.chatappId);
  swap(a.name, b.name);
  swap(a.icon, b.icon);
  swap(a.url, b.url);
  swap(a.availableChatTypes, b.availableChatTypes);
  swap(a.__isset, b.__isset);
}

Chatapp::Chatapp(const Chatapp& other7) {
  chatappId = other7.chatappId;
  name = other7.name;
  icon = other7.icon;
  url = other7.url;
  availableChatTypes = other7.availableChatTypes;
  __isset = other7.__isset;
}
Chatapp& Chatapp::operator=(const Chatapp& other8) {
  chatappId = other8.chatappId;
  name = other8.name;
  icon = other8.icon;
  url = other8.url;
  availableChatTypes = other8.availableChatTypes;
  __isset = other8.__isset;
  return *this;
}
void Chatapp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Chatapp(";
  out << "chatappId=" << to_string(chatappId);
  out << ", " << "name=" << to_string(name);
  out << ", " << "icon=" << to_string(icon);
  out << ", " << "url=" << to_string(url);
  out << ", " << "availableChatTypes=" << to_string(availableChatTypes);
  out << ")";
}


MyChatapp::~MyChatapp() throw() {
}


void MyChatapp::__set_app(const Chatapp& val) {
  this->app = val;
}

void MyChatapp::__set_category(const ChatappCategory::type val) {
  this->category = val;
}

void MyChatapp::__set_priority(const int64_t val) {
  this->priority = val;
}
std::ostream& operator<<(std::ostream& out, const MyChatapp& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t MyChatapp::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->app.read(iprot);
          this->__isset.app = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast9;
          xfer += iprot->readI32(ecast9);
          this->category = (ChatappCategory::type)ecast9;
          this->__isset.category = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->priority);
          this->__isset.priority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MyChatapp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MyChatapp");

  xfer += oprot->writeFieldBegin("app", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->app.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("category", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->category);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("priority", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->priority);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MyChatapp &a, MyChatapp &b) {
  using ::std::swap;
  swap(a.app, b.app);
  swap(a.category, b.category);
  swap(a.priority, b.priority);
  swap(a.__isset, b.__isset);
}

MyChatapp::MyChatapp(const MyChatapp& other10) {
  app = other10.app;
  category = other10.category;
  priority = other10.priority;
  __isset = other10.__isset;
}
MyChatapp& MyChatapp::operator=(const MyChatapp& other11) {
  app = other11.app;
  category = other11.category;
  priority = other11.priority;
  __isset = other11.__isset;
  return *this;
}
void MyChatapp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MyChatapp(";
  out << "app=" << to_string(app);
  out << ", " << "category=" << to_string(category);
  out << ", " << "priority=" << to_string(priority);
  out << ")";
}


GetMyChatappsResponse::~GetMyChatappsResponse() throw() {
}


void GetMyChatappsResponse::__set_apps(const std::vector<MyChatapp> & val) {
  this->apps = val;
}

void GetMyChatappsResponse::__set_continuationToken(const std::string& val) {
  this->continuationToken = val;
}
std::ostream& operator<<(std::ostream& out, const GetMyChatappsResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetMyChatappsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->apps.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->apps.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += this->apps[_i16].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.apps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->continuationToken);
          this->__isset.continuationToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetMyChatappsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetMyChatappsResponse");

  xfer += oprot->writeFieldBegin("apps", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->apps.size()));
    std::vector<MyChatapp> ::const_iterator _iter17;
    for (_iter17 = this->apps.begin(); _iter17 != this->apps.end(); ++_iter17)
    {
      xfer += (*_iter17).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("continuationToken", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->continuationToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetMyChatappsResponse &a, GetMyChatappsResponse &b) {
  using ::std::swap;
  swap(a.apps, b.apps);
  swap(a.continuationToken, b.continuationToken);
  swap(a.__isset, b.__isset);
}

GetMyChatappsResponse::GetMyChatappsResponse(const GetMyChatappsResponse& other18) {
  apps = other18.apps;
  continuationToken = other18.continuationToken;
  __isset = other18.__isset;
}
GetMyChatappsResponse& GetMyChatappsResponse::operator=(const GetMyChatappsResponse& other19) {
  apps = other19.apps;
  continuationToken = other19.continuationToken;
  __isset = other19.__isset;
  return *this;
}
void GetMyChatappsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetMyChatappsResponse(";
  out << "apps=" << to_string(apps);
  out << ", " << "continuationToken=" << to_string(continuationToken);
  out << ")";
}


GetMyChatappsRequest::~GetMyChatappsRequest() throw() {
}


void GetMyChatappsRequest::__set_language(const std::string& val) {
  this->language = val;
}

void GetMyChatappsRequest::__set_continuationToken(const std::string& val) {
  this->continuationToken = val;
}
std::ostream& operator<<(std::ostream& out, const GetMyChatappsRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetMyChatappsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->language);
          this->__isset.language = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->continuationToken);
          this->__isset.continuationToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetMyChatappsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetMyChatappsRequest");

  xfer += oprot->writeFieldBegin("language", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->language);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("continuationToken", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->continuationToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetMyChatappsRequest &a, GetMyChatappsRequest &b) {
  using ::std::swap;
  swap(a.language, b.language);
  swap(a.continuationToken, b.continuationToken);
  swap(a.__isset, b.__isset);
}

GetMyChatappsRequest::GetMyChatappsRequest(const GetMyChatappsRequest& other20) {
  language = other20.language;
  continuationToken = other20.continuationToken;
  __isset = other20.__isset;
}
GetMyChatappsRequest& GetMyChatappsRequest::operator=(const GetMyChatappsRequest& other21) {
  language = other21.language;
  continuationToken = other21.continuationToken;
  __isset = other21.__isset;
  return *this;
}
void GetMyChatappsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetMyChatappsRequest(";
  out << "language=" << to_string(language);
  out << ", " << "continuationToken=" << to_string(continuationToken);
  out << ")";
}


GetChatappRequest::~GetChatappRequest() throw() {
}


void GetChatappRequest::__set_chatappId(const std::string& val) {
  this->chatappId = val;
}

void GetChatappRequest::__set_language(const std::string& val) {
  this->language = val;
}
std::ostream& operator<<(std::ostream& out, const GetChatappRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetChatappRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->chatappId);
          this->__isset.chatappId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->language);
          this->__isset.language = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetChatappRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetChatappRequest");

  xfer += oprot->writeFieldBegin("chatappId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->chatappId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("language", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->language);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetChatappRequest &a, GetChatappRequest &b) {
  using ::std::swap;
  swap(a.chatappId, b.chatappId);
  swap(a.language, b.language);
  swap(a.__isset, b.__isset);
}

GetChatappRequest::GetChatappRequest(const GetChatappRequest& other22) {
  chatappId = other22.chatappId;
  language = other22.language;
  __isset = other22.__isset;
}
GetChatappRequest& GetChatappRequest::operator=(const GetChatappRequest& other23) {
  chatappId = other23.chatappId;
  language = other23.language;
  __isset = other23.__isset;
  return *this;
}
void GetChatappRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetChatappRequest(";
  out << "chatappId=" << to_string(chatappId);
  out << ", " << "language=" << to_string(language);
  out << ")";
}


ChatappException::~ChatappException() throw() {
}


void ChatappException::__set_code(const ChatAppExceptionCode::type val) {
  this->code = val;
}

void ChatappException::__set_reason(const std::string& val) {
  this->reason = val;
}
std::ostream& operator<<(std::ostream& out, const ChatappException& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ChatappException::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast24;
          xfer += iprot->readI32(ecast24);
          this->code = (ChatAppExceptionCode::type)ecast24;
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->reason);
          this->__isset.reason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ChatappException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ChatappException");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reason", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->reason);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ChatappException &a, ChatappException &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.reason, b.reason);
  swap(a.__isset, b.__isset);
}

ChatappException::ChatappException(const ChatappException& other25) {
  code = other25.code;
  reason = other25.reason;
  __isset = other25.__isset;
}
ChatappException& ChatappException::operator=(const ChatappException& other26) {
  code = other26.code;
  reason = other26.reason;
  __isset = other26.__isset;
  return *this;
}
void ChatappException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ChatappException(";
  out << "code=" << to_string(code);
  out << ", " << "reason=" << to_string(reason);
  out << ")";
}


GetChatappResponse::~GetChatappResponse() throw() {
}


void GetChatappResponse::__set_app(const Chatapp& val) {
  this->app = val;
}
std::ostream& operator<<(std::ostream& out, const GetChatappResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetChatappResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->app.read(iprot);
          this->__isset.app = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetChatappResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetChatappResponse");

  xfer += oprot->writeFieldBegin("app", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->app.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetChatappResponse &a, GetChatappResponse &b) {
  using ::std::swap;
  swap(a.app, b.app);
  swap(a.__isset, b.__isset);
}

GetChatappResponse::GetChatappResponse(const GetChatappResponse& other27) {
  app = other27.app;
  __isset = other27.__isset;
}
GetChatappResponse& GetChatappResponse::operator=(const GetChatappResponse& other28) {
  app = other28.app;
  __isset = other28.__isset;
  return *this;
}
void GetChatappResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetChatappResponse(";
  out << "app=" << to_string(app);
  out << ")";
}


WebLoginResponse::~WebLoginResponse() throw() {
}


void WebLoginResponse::__set_returnUrl(const std::string& val) {
  this->returnUrl = val;
}
std::ostream& operator<<(std::ostream& out, const WebLoginResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t WebLoginResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->returnUrl);
          this->__isset.returnUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WebLoginResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WebLoginResponse");

  xfer += oprot->writeFieldBegin("returnUrl", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->returnUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WebLoginResponse &a, WebLoginResponse &b) {
  using ::std::swap;
  swap(a.returnUrl, b.returnUrl);
  swap(a.__isset, b.__isset);
}

WebLoginResponse::WebLoginResponse(const WebLoginResponse& other29) {
  returnUrl = other29.returnUrl;
  __isset = other29.__isset;
}
WebLoginResponse& WebLoginResponse::operator=(const WebLoginResponse& other30) {
  returnUrl = other30.returnUrl;
  __isset = other30.__isset;
  return *this;
}
void WebLoginResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WebLoginResponse(";
  out << "returnUrl=" << to_string(returnUrl);
  out << ")";
}


WebLoginRequest::~WebLoginRequest() throw() {
}


void WebLoginRequest::__set_hookedFullUrl(const std::string& val) {
  this->hookedFullUrl = val;
}

void WebLoginRequest::__set_sessionString(const std::string& val) {
  this->sessionString = val;
}

void WebLoginRequest::__set_fromIAB(const bool val) {
  this->fromIAB = val;
}
std::ostream& operator<<(std::ostream& out, const WebLoginRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t WebLoginRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->hookedFullUrl);
          this->__isset.hookedFullUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sessionString);
          this->__isset.sessionString = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->fromIAB);
          this->__isset.fromIAB = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WebLoginRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WebLoginRequest");

  xfer += oprot->writeFieldBegin("hookedFullUrl", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->hookedFullUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sessionString", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->sessionString);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fromIAB", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->fromIAB);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WebLoginRequest &a, WebLoginRequest &b) {
  using ::std::swap;
  swap(a.hookedFullUrl, b.hookedFullUrl);
  swap(a.sessionString, b.sessionString);
  swap(a.fromIAB, b.fromIAB);
  swap(a.__isset, b.__isset);
}

WebLoginRequest::WebLoginRequest(const WebLoginRequest& other31) {
  hookedFullUrl = other31.hookedFullUrl;
  sessionString = other31.sessionString;
  fromIAB = other31.fromIAB;
  __isset = other31.__isset;
}
WebLoginRequest& WebLoginRequest::operator=(const WebLoginRequest& other32) {
  hookedFullUrl = other32.hookedFullUrl;
  sessionString = other32.sessionString;
  fromIAB = other32.fromIAB;
  __isset = other32.__isset;
  return *this;
}
void WebLoginRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WebLoginRequest(";
  out << "hookedFullUrl=" << to_string(hookedFullUrl);
  out << ", " << "sessionString=" << to_string(sessionString);
  out << ", " << "fromIAB=" << to_string(fromIAB);
  out << ")";
}


TestCallRoute::~TestCallRoute() throw() {
}


void TestCallRoute::__set_token(const std::string& val) {
  this->token = val;
}

void TestCallRoute::__set_voipServer(const CallHost& val) {
  this->voipServer = val;
}
std::ostream& operator<<(std::ostream& out, const TestCallRoute& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TestCallRoute::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->token);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->voipServer.read(iprot);
          this->__isset.voipServer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TestCallRoute::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TestCallRoute");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("voipServer", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->voipServer.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TestCallRoute &a, TestCallRoute &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.voipServer, b.voipServer);
  swap(a.__isset, b.__isset);
}

TestCallRoute::TestCallRoute(const TestCallRoute& other33) {
  token = other33.token;
  voipServer = other33.voipServer;
  __isset = other33.__isset;
}
TestCallRoute& TestCallRoute::operator=(const TestCallRoute& other34) {
  token = other34.token;
  voipServer = other34.voipServer;
  __isset = other34.__isset;
  return *this;
}
void TestCallRoute::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TestCallRoute(";
  out << "token=" << to_string(token);
  out << ", " << "voipServer=" << to_string(voipServer);
  out << ")";
}


ProfileContent::~ProfileContent() throw() {
}


void ProfileContent::__set_value(const std::string& val) {
  this->value = val;
}

void ProfileContent::__set_meta(const std::map<std::string, std::string> & val) {
  this->meta = val;
}
std::ostream& operator<<(std::ostream& out, const ProfileContent& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ProfileContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->meta.clear();
            uint32_t _size35;
            ::apache::thrift::protocol::TType _ktype36;
            ::apache::thrift::protocol::TType _vtype37;
            xfer += iprot->readMapBegin(_ktype36, _vtype37, _size35);
            uint32_t _i39;
            for (_i39 = 0; _i39 < _size35; ++_i39)
            {
              std::string _key40;
              xfer += iprot->readString(_key40);
              std::string& _val41 = this->meta[_key40];
              xfer += iprot->readString(_val41);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.meta = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProfileContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ProfileContent");

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meta", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->meta.size()));
    std::map<std::string, std::string> ::const_iterator _iter42;
    for (_iter42 = this->meta.begin(); _iter42 != this->meta.end(); ++_iter42)
    {
      xfer += oprot->writeString(_iter42->first);
      xfer += oprot->writeString(_iter42->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProfileContent &a, ProfileContent &b) {
  using ::std::swap;
  swap(a.value, b.value);
  swap(a.meta, b.meta);
  swap(a.__isset, b.__isset);
}

ProfileContent::ProfileContent(const ProfileContent& other43) {
  value = other43.value;
  meta = other43.meta;
  __isset = other43.__isset;
}
ProfileContent& ProfileContent::operator=(const ProfileContent& other44) {
  value = other44.value;
  meta = other44.meta;
  __isset = other44.__isset;
  return *this;
}
void ProfileContent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ProfileContent(";
  out << "value=" << to_string(value);
  out << ", " << "meta=" << to_string(meta);
  out << ")";
}


UpdateProfileAttributesRequest::~UpdateProfileAttributesRequest() throw() {
}


void UpdateProfileAttributesRequest::__set_profileAttributes(const std::map<ProfileAttribute::type, ProfileContent> & val) {
  this->profileAttributes = val;
}
std::ostream& operator<<(std::ostream& out, const UpdateProfileAttributesRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UpdateProfileAttributesRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->profileAttributes.clear();
            uint32_t _size45;
            ::apache::thrift::protocol::TType _ktype46;
            ::apache::thrift::protocol::TType _vtype47;
            xfer += iprot->readMapBegin(_ktype46, _vtype47, _size45);
            uint32_t _i49;
            for (_i49 = 0; _i49 < _size45; ++_i49)
            {
              ProfileAttribute::type _key50;
              int32_t ecast52;
              xfer += iprot->readI32(ecast52);
              _key50 = (ProfileAttribute::type)ecast52;
              ProfileContent& _val51 = this->profileAttributes[_key50];
              xfer += _val51.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.profileAttributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateProfileAttributesRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UpdateProfileAttributesRequest");

  xfer += oprot->writeFieldBegin("profileAttributes", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->profileAttributes.size()));
    std::map<ProfileAttribute::type, ProfileContent> ::const_iterator _iter53;
    for (_iter53 = this->profileAttributes.begin(); _iter53 != this->profileAttributes.end(); ++_iter53)
    {
      xfer += oprot->writeI32((int32_t)_iter53->first);
      xfer += _iter53->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateProfileAttributesRequest &a, UpdateProfileAttributesRequest &b) {
  using ::std::swap;
  swap(a.profileAttributes, b.profileAttributes);
  swap(a.__isset, b.__isset);
}

UpdateProfileAttributesRequest::UpdateProfileAttributesRequest(const UpdateProfileAttributesRequest& other54) {
  profileAttributes = other54.profileAttributes;
  __isset = other54.__isset;
}
UpdateProfileAttributesRequest& UpdateProfileAttributesRequest::operator=(const UpdateProfileAttributesRequest& other55) {
  profileAttributes = other55.profileAttributes;
  __isset = other55.__isset;
  return *this;
}
void UpdateProfileAttributesRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UpdateProfileAttributesRequest(";
  out << "profileAttributes=" << to_string(profileAttributes);
  out << ")";
}


IdentityCredentialResponse::~IdentityCredentialResponse() throw() {
}


void IdentityCredentialResponse::__set_metaData(const std::map<std::string, std::string> & val) {
  this->metaData = val;
}

void IdentityCredentialResponse::__set_responseType(const IdentityResponseType::type val) {
  this->responseType = val;
}

void IdentityCredentialResponse::__set_confirmationVerifier(const std::string& val) {
  this->confirmationVerifier = val;
}

void IdentityCredentialResponse::__set_timeoutInSeconds(const int64_t val) {
  this->timeoutInSeconds = val;
}
std::ostream& operator<<(std::ostream& out, const IdentityCredentialResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t IdentityCredentialResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->metaData.clear();
            uint32_t _size56;
            ::apache::thrift::protocol::TType _ktype57;
            ::apache::thrift::protocol::TType _vtype58;
            xfer += iprot->readMapBegin(_ktype57, _vtype58, _size56);
            uint32_t _i60;
            for (_i60 = 0; _i60 < _size56; ++_i60)
            {
              std::string _key61;
              xfer += iprot->readString(_key61);
              std::string& _val62 = this->metaData[_key61];
              xfer += iprot->readString(_val62);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.metaData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast63;
          xfer += iprot->readI32(ecast63);
          this->responseType = (IdentityResponseType::type)ecast63;
          this->__isset.responseType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->confirmationVerifier);
          this->__isset.confirmationVerifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timeoutInSeconds);
          this->__isset.timeoutInSeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t IdentityCredentialResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("IdentityCredentialResponse");

  xfer += oprot->writeFieldBegin("metaData", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->metaData.size()));
    std::map<std::string, std::string> ::const_iterator _iter64;
    for (_iter64 = this->metaData.begin(); _iter64 != this->metaData.end(); ++_iter64)
    {
      xfer += oprot->writeString(_iter64->first);
      xfer += oprot->writeString(_iter64->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("responseType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->responseType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("confirmationVerifier", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->confirmationVerifier);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeoutInSeconds", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->timeoutInSeconds);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(IdentityCredentialResponse &a, IdentityCredentialResponse &b) {
  using ::std::swap;
  swap(a.metaData, b.metaData);
  swap(a.responseType, b.responseType);
  swap(a.confirmationVerifier, b.confirmationVerifier);
  swap(a.timeoutInSeconds, b.timeoutInSeconds);
  swap(a.__isset, b.__isset);
}

IdentityCredentialResponse::IdentityCredentialResponse(const IdentityCredentialResponse& other65) {
  metaData = other65.metaData;
  responseType = other65.responseType;
  confirmationVerifier = other65.confirmationVerifier;
  timeoutInSeconds = other65.timeoutInSeconds;
  __isset = other65.__isset;
}
IdentityCredentialResponse& IdentityCredentialResponse::operator=(const IdentityCredentialResponse& other66) {
  metaData = other66.metaData;
  responseType = other66.responseType;
  confirmationVerifier = other66.confirmationVerifier;
  timeoutInSeconds = other66.timeoutInSeconds;
  __isset = other66.__isset;
  return *this;
}
void IdentityCredentialResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "IdentityCredentialResponse(";
  out << "metaData=" << to_string(metaData);
  out << ", " << "responseType=" << to_string(responseType);
  out << ", " << "confirmationVerifier=" << to_string(confirmationVerifier);
  out << ", " << "timeoutInSeconds=" << to_string(timeoutInSeconds);
  out << ")";
}


IdentifierConfirmationRequest::~IdentifierConfirmationRequest() throw() {
}


void IdentifierConfirmationRequest::__set_metaData(const std::map<std::string, std::string> & val) {
  this->metaData = val;
}

void IdentifierConfirmationRequest::__set_forceRegistration(const bool val) {
  this->forceRegistration = val;
}

void IdentifierConfirmationRequest::__set_verificationCode(const std::string& val) {
  this->verificationCode = val;
}
std::ostream& operator<<(std::ostream& out, const IdentifierConfirmationRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t IdentifierConfirmationRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->metaData.clear();
            uint32_t _size67;
            ::apache::thrift::protocol::TType _ktype68;
            ::apache::thrift::protocol::TType _vtype69;
            xfer += iprot->readMapBegin(_ktype68, _vtype69, _size67);
            uint32_t _i71;
            for (_i71 = 0; _i71 < _size67; ++_i71)
            {
              std::string _key72;
              xfer += iprot->readString(_key72);
              std::string& _val73 = this->metaData[_key72];
              xfer += iprot->readString(_val73);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.metaData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->forceRegistration);
          this->__isset.forceRegistration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->verificationCode);
          this->__isset.verificationCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t IdentifierConfirmationRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("IdentifierConfirmationRequest");

  xfer += oprot->writeFieldBegin("metaData", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->metaData.size()));
    std::map<std::string, std::string> ::const_iterator _iter74;
    for (_iter74 = this->metaData.begin(); _iter74 != this->metaData.end(); ++_iter74)
    {
      xfer += oprot->writeString(_iter74->first);
      xfer += oprot->writeString(_iter74->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("forceRegistration", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->forceRegistration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("verificationCode", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->verificationCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(IdentifierConfirmationRequest &a, IdentifierConfirmationRequest &b) {
  using ::std::swap;
  swap(a.metaData, b.metaData);
  swap(a.forceRegistration, b.forceRegistration);
  swap(a.verificationCode, b.verificationCode);
  swap(a.__isset, b.__isset);
}

IdentifierConfirmationRequest::IdentifierConfirmationRequest(const IdentifierConfirmationRequest& other75) {
  metaData = other75.metaData;
  forceRegistration = other75.forceRegistration;
  verificationCode = other75.verificationCode;
  __isset = other75.__isset;
}
IdentifierConfirmationRequest& IdentifierConfirmationRequest::operator=(const IdentifierConfirmationRequest& other76) {
  metaData = other76.metaData;
  forceRegistration = other76.forceRegistration;
  verificationCode = other76.verificationCode;
  __isset = other76.__isset;
  return *this;
}
void IdentifierConfirmationRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "IdentifierConfirmationRequest(";
  out << "metaData=" << to_string(metaData);
  out << ", " << "forceRegistration=" << to_string(forceRegistration);
  out << ", " << "verificationCode=" << to_string(verificationCode);
  out << ")";
}


IdentityCredentialRequest::~IdentityCredentialRequest() throw() {
}


void IdentityCredentialRequest::__set_metaData(const std::map<std::string, std::string> & val) {
  this->metaData = val;
}

void IdentityCredentialRequest::__set_identityProvider(const IdentityProvider::type val) {
  this->identityProvider = val;
}

void IdentityCredentialRequest::__set_cipherKeyId(const std::string& val) {
  this->cipherKeyId = val;
}

void IdentityCredentialRequest::__set_cipherText(const std::string& val) {
  this->cipherText = val;
}

void IdentityCredentialRequest::__set_confirmationRequest(const IdentifierConfirmationRequest& val) {
  this->confirmationRequest = val;
}
std::ostream& operator<<(std::ostream& out, const IdentityCredentialRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t IdentityCredentialRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->metaData.clear();
            uint32_t _size77;
            ::apache::thrift::protocol::TType _ktype78;
            ::apache::thrift::protocol::TType _vtype79;
            xfer += iprot->readMapBegin(_ktype78, _vtype79, _size77);
            uint32_t _i81;
            for (_i81 = 0; _i81 < _size77; ++_i81)
            {
              std::string _key82;
              xfer += iprot->readString(_key82);
              std::string& _val83 = this->metaData[_key82];
              xfer += iprot->readString(_val83);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.metaData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast84;
          xfer += iprot->readI32(ecast84);
          this->identityProvider = (IdentityProvider::type)ecast84;
          this->__isset.identityProvider = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cipherKeyId);
          this->__isset.cipherKeyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cipherText);
          this->__isset.cipherText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->confirmationRequest.read(iprot);
          this->__isset.confirmationRequest = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t IdentityCredentialRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("IdentityCredentialRequest");

  xfer += oprot->writeFieldBegin("metaData", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->metaData.size()));
    std::map<std::string, std::string> ::const_iterator _iter85;
    for (_iter85 = this->metaData.begin(); _iter85 != this->metaData.end(); ++_iter85)
    {
      xfer += oprot->writeString(_iter85->first);
      xfer += oprot->writeString(_iter85->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("identityProvider", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->identityProvider);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cipherKeyId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->cipherKeyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cipherText", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->cipherText);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("confirmationRequest", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->confirmationRequest.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(IdentityCredentialRequest &a, IdentityCredentialRequest &b) {
  using ::std::swap;
  swap(a.metaData, b.metaData);
  swap(a.identityProvider, b.identityProvider);
  swap(a.cipherKeyId, b.cipherKeyId);
  swap(a.cipherText, b.cipherText);
  swap(a.confirmationRequest, b.confirmationRequest);
  swap(a.__isset, b.__isset);
}

IdentityCredentialRequest::IdentityCredentialRequest(const IdentityCredentialRequest& other86) {
  metaData = other86.metaData;
  identityProvider = other86.identityProvider;
  cipherKeyId = other86.cipherKeyId;
  cipherText = other86.cipherText;
  confirmationRequest = other86.confirmationRequest;
  __isset = other86.__isset;
}
IdentityCredentialRequest& IdentityCredentialRequest::operator=(const IdentityCredentialRequest& other87) {
  metaData = other87.metaData;
  identityProvider = other87.identityProvider;
  cipherKeyId = other87.cipherKeyId;
  cipherText = other87.cipherText;
  confirmationRequest = other87.confirmationRequest;
  __isset = other87.__isset;
  return *this;
}
void IdentityCredentialRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "IdentityCredentialRequest(";
  out << "metaData=" << to_string(metaData);
  out << ", " << "identityProvider=" << to_string(identityProvider);
  out << ", " << "cipherKeyId=" << to_string(cipherKeyId);
  out << ", " << "cipherText=" << to_string(cipherText);
  out << ", " << "confirmationRequest=" << to_string(confirmationRequest);
  out << ")";
}


AuthSessionRequest::~AuthSessionRequest() throw() {
}


void AuthSessionRequest::__set_metaData(const std::map<std::string, std::string> & val) {
  this->metaData = val;
}
std::ostream& operator<<(std::ostream& out, const AuthSessionRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AuthSessionRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->metaData.clear();
            uint32_t _size88;
            ::apache::thrift::protocol::TType _ktype89;
            ::apache::thrift::protocol::TType _vtype90;
            xfer += iprot->readMapBegin(_ktype89, _vtype90, _size88);
            uint32_t _i92;
            for (_i92 = 0; _i92 < _size88; ++_i92)
            {
              std::string _key93;
              xfer += iprot->readString(_key93);
              std::string& _val94 = this->metaData[_key93];
              xfer += iprot->readString(_val94);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.metaData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AuthSessionRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AuthSessionRequest");

  xfer += oprot->writeFieldBegin("metaData", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->metaData.size()));
    std::map<std::string, std::string> ::const_iterator _iter95;
    for (_iter95 = this->metaData.begin(); _iter95 != this->metaData.end(); ++_iter95)
    {
      xfer += oprot->writeString(_iter95->first);
      xfer += oprot->writeString(_iter95->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AuthSessionRequest &a, AuthSessionRequest &b) {
  using ::std::swap;
  swap(a.metaData, b.metaData);
  swap(a.__isset, b.__isset);
}

AuthSessionRequest::AuthSessionRequest(const AuthSessionRequest& other96) {
  metaData = other96.metaData;
  __isset = other96.__isset;
}
AuthSessionRequest& AuthSessionRequest::operator=(const AuthSessionRequest& other97) {
  metaData = other97.metaData;
  __isset = other97.__isset;
  return *this;
}
void AuthSessionRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AuthSessionRequest(";
  out << "metaData=" << to_string(metaData);
  out << ")";
}


CategoryItem::~CategoryItem() throw() {
}


void CategoryItem::__set_collection(const int32_t val) {
  this->collection = val;
}

void CategoryItem::__set_cat(const int32_t val) {
  this->cat = val;
}

void CategoryItem::__set_name(const std::string& val) {
  this->name = val;
}
std::ostream& operator<<(std::ostream& out, const CategoryItem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CategoryItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->collection);
          this->__isset.collection = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cat);
          this->__isset.cat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CategoryItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CategoryItem");

  xfer += oprot->writeFieldBegin("collection", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->collection);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cat", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->cat);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CategoryItem &a, CategoryItem &b) {
  using ::std::swap;
  swap(a.collection, b.collection);
  swap(a.cat, b.cat);
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

CategoryItem::CategoryItem(const CategoryItem& other98) {
  collection = other98.collection;
  cat = other98.cat;
  name = other98.name;
  __isset = other98.__isset;
}
CategoryItem& CategoryItem::operator=(const CategoryItem& other99) {
  collection = other99.collection;
  cat = other99.cat;
  name = other99.name;
  __isset = other99.__isset;
  return *this;
}
void CategoryItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CategoryItem(";
  out << "collection=" << to_string(collection);
  out << ", " << "cat=" << to_string(cat);
  out << ", " << "name=" << to_string(name);
  out << ")";
}


PromotionBuddyInfo::~PromotionBuddyInfo() throw() {
}


void PromotionBuddyInfo::__set_buddyMid(const std::string& val) {
  this->buddyMid = val;
}
std::ostream& operator<<(std::ostream& out, const PromotionBuddyInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PromotionBuddyInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->buddyMid);
          this->__isset.buddyMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PromotionBuddyInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PromotionBuddyInfo");

  xfer += oprot->writeFieldBegin("buddyMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->buddyMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PromotionBuddyInfo &a, PromotionBuddyInfo &b) {
  using ::std::swap;
  swap(a.buddyMid, b.buddyMid);
  swap(a.__isset, b.__isset);
}

PromotionBuddyInfo::PromotionBuddyInfo(const PromotionBuddyInfo& other100) {
  buddyMid = other100.buddyMid;
  __isset = other100.__isset;
}
PromotionBuddyInfo& PromotionBuddyInfo::operator=(const PromotionBuddyInfo& other101) {
  buddyMid = other101.buddyMid;
  __isset = other101.__isset;
  return *this;
}
void PromotionBuddyInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PromotionBuddyInfo(";
  out << "buddyMid=" << to_string(buddyMid);
  out << ")";
}


PromotionInstallInfo::~PromotionInstallInfo() throw() {
}


void PromotionInstallInfo::__set_downloadUrl(const std::string& val) {
  this->downloadUrl = val;
}

void PromotionInstallInfo::__set_customUrlSchema(const std::string& val) {
  this->customUrlSchema = val;
}
std::ostream& operator<<(std::ostream& out, const PromotionInstallInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PromotionInstallInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->downloadUrl);
          this->__isset.downloadUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->customUrlSchema);
          this->__isset.customUrlSchema = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PromotionInstallInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PromotionInstallInfo");

  xfer += oprot->writeFieldBegin("downloadUrl", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->downloadUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("customUrlSchema", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->customUrlSchema);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PromotionInstallInfo &a, PromotionInstallInfo &b) {
  using ::std::swap;
  swap(a.downloadUrl, b.downloadUrl);
  swap(a.customUrlSchema, b.customUrlSchema);
  swap(a.__isset, b.__isset);
}

PromotionInstallInfo::PromotionInstallInfo(const PromotionInstallInfo& other102) {
  downloadUrl = other102.downloadUrl;
  customUrlSchema = other102.customUrlSchema;
  __isset = other102.__isset;
}
PromotionInstallInfo& PromotionInstallInfo::operator=(const PromotionInstallInfo& other103) {
  downloadUrl = other103.downloadUrl;
  customUrlSchema = other103.customUrlSchema;
  __isset = other103.__isset;
  return *this;
}
void PromotionInstallInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PromotionInstallInfo(";
  out << "downloadUrl=" << to_string(downloadUrl);
  out << ", " << "customUrlSchema=" << to_string(customUrlSchema);
  out << ")";
}


PromotionMissionInfo::~PromotionMissionInfo() throw() {
}


void PromotionMissionInfo::__set_promotionMissionType(const PMType::type val) {
  this->promotionMissionType = val;
}

void PromotionMissionInfo::__set_missionCompleted(const bool val) {
  this->missionCompleted = val;
}

void PromotionMissionInfo::__set_downloadUrl(const std::string& val) {
  this->downloadUrl = val;
}

void PromotionMissionInfo::__set_customUrlSchema(const std::string& val) {
  this->customUrlSchema = val;
}
std::ostream& operator<<(std::ostream& out, const PromotionMissionInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PromotionMissionInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast104;
          xfer += iprot->readI32(ecast104);
          this->promotionMissionType = (PMType::type)ecast104;
          this->__isset.promotionMissionType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->missionCompleted);
          this->__isset.missionCompleted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->downloadUrl);
          this->__isset.downloadUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->customUrlSchema);
          this->__isset.customUrlSchema = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PromotionMissionInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PromotionMissionInfo");

  xfer += oprot->writeFieldBegin("promotionMissionType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->promotionMissionType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("missionCompleted", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->missionCompleted);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("downloadUrl", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->downloadUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("customUrlSchema", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->customUrlSchema);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PromotionMissionInfo &a, PromotionMissionInfo &b) {
  using ::std::swap;
  swap(a.promotionMissionType, b.promotionMissionType);
  swap(a.missionCompleted, b.missionCompleted);
  swap(a.downloadUrl, b.downloadUrl);
  swap(a.customUrlSchema, b.customUrlSchema);
  swap(a.__isset, b.__isset);
}

PromotionMissionInfo::PromotionMissionInfo(const PromotionMissionInfo& other105) {
  promotionMissionType = other105.promotionMissionType;
  missionCompleted = other105.missionCompleted;
  downloadUrl = other105.downloadUrl;
  customUrlSchema = other105.customUrlSchema;
  __isset = other105.__isset;
}
PromotionMissionInfo& PromotionMissionInfo::operator=(const PromotionMissionInfo& other106) {
  promotionMissionType = other106.promotionMissionType;
  missionCompleted = other106.missionCompleted;
  downloadUrl = other106.downloadUrl;
  customUrlSchema = other106.customUrlSchema;
  __isset = other106.__isset;
  return *this;
}
void PromotionMissionInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PromotionMissionInfo(";
  out << "promotionMissionType=" << to_string(promotionMissionType);
  out << ", " << "missionCompleted=" << to_string(missionCompleted);
  out << ", " << "downloadUrl=" << to_string(downloadUrl);
  out << ", " << "customUrlSchema=" << to_string(customUrlSchema);
  out << ")";
}


PromotionDetail::~PromotionDetail() throw() {
}


void PromotionDetail::__set_promotionBuddyInfo(const PromotionBuddyInfo& val) {
  this->promotionBuddyInfo = val;
}

void PromotionDetail::__set_promotionInstallInfo(const PromotionInstallInfo& val) {
  this->promotionInstallInfo = val;
}

void PromotionDetail::__set_promotionMissionInfo(const PromotionMissionInfo& val) {
  this->promotionMissionInfo = val;
}
std::ostream& operator<<(std::ostream& out, const PromotionDetail& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PromotionDetail::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->promotionBuddyInfo.read(iprot);
          this->__isset.promotionBuddyInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->promotionInstallInfo.read(iprot);
          this->__isset.promotionInstallInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->promotionMissionInfo.read(iprot);
          this->__isset.promotionMissionInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PromotionDetail::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PromotionDetail");

  xfer += oprot->writeFieldBegin("promotionBuddyInfo", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->promotionBuddyInfo.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("promotionInstallInfo", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->promotionInstallInfo.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("promotionMissionInfo", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->promotionMissionInfo.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PromotionDetail &a, PromotionDetail &b) {
  using ::std::swap;
  swap(a.promotionBuddyInfo, b.promotionBuddyInfo);
  swap(a.promotionInstallInfo, b.promotionInstallInfo);
  swap(a.promotionMissionInfo, b.promotionMissionInfo);
  swap(a.__isset, b.__isset);
}

PromotionDetail::PromotionDetail(const PromotionDetail& other107) {
  promotionBuddyInfo = other107.promotionBuddyInfo;
  promotionInstallInfo = other107.promotionInstallInfo;
  promotionMissionInfo = other107.promotionMissionInfo;
  __isset = other107.__isset;
}
PromotionDetail& PromotionDetail::operator=(const PromotionDetail& other108) {
  promotionBuddyInfo = other108.promotionBuddyInfo;
  promotionInstallInfo = other108.promotionInstallInfo;
  promotionMissionInfo = other108.promotionMissionInfo;
  __isset = other108.__isset;
  return *this;
}
void PromotionDetail::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PromotionDetail(";
  out << "promotionBuddyInfo=" << to_string(promotionBuddyInfo);
  out << ", " << "promotionInstallInfo=" << to_string(promotionInstallInfo);
  out << ", " << "promotionMissionInfo=" << to_string(promotionMissionInfo);
  out << ")";
}


PromotionInfo::~PromotionInfo() throw() {
}


void PromotionInfo::__set_promotionType(const PromotionType::type val) {
  this->promotionType = val;
}

void PromotionInfo::__set_buddyInfo(const PromotionBuddyInfo& val) {
  this->buddyInfo = val;
}

void PromotionInfo::__set_promotionDetail(const PromotionDetail& val) {
  this->promotionDetail = val;
}
std::ostream& operator<<(std::ostream& out, const PromotionInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PromotionInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast109;
          xfer += iprot->readI32(ecast109);
          this->promotionType = (PromotionType::type)ecast109;
          this->__isset.promotionType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 51:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->buddyInfo.read(iprot);
          this->__isset.buddyInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->promotionDetail.read(iprot);
          this->__isset.promotionDetail = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PromotionInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PromotionInfo");

  xfer += oprot->writeFieldBegin("promotionType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->promotionType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("promotionDetail", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->promotionDetail.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buddyInfo", ::apache::thrift::protocol::T_STRUCT, 51);
  xfer += this->buddyInfo.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PromotionInfo &a, PromotionInfo &b) {
  using ::std::swap;
  swap(a.promotionType, b.promotionType);
  swap(a.buddyInfo, b.buddyInfo);
  swap(a.promotionDetail, b.promotionDetail);
  swap(a.__isset, b.__isset);
}

PromotionInfo::PromotionInfo(const PromotionInfo& other110) {
  promotionType = other110.promotionType;
  buddyInfo = other110.buddyInfo;
  promotionDetail = other110.promotionDetail;
  __isset = other110.__isset;
}
PromotionInfo& PromotionInfo::operator=(const PromotionInfo& other111) {
  promotionType = other111.promotionType;
  buddyInfo = other111.buddyInfo;
  promotionDetail = other111.promotionDetail;
  __isset = other111.__isset;
  return *this;
}
void PromotionInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PromotionInfo(";
  out << "promotionType=" << to_string(promotionType);
  out << ", " << "buddyInfo=" << to_string(buddyInfo);
  out << ", " << "promotionDetail=" << to_string(promotionDetail);
  out << ")";
}


StickerProperty::~StickerProperty() throw() {
}


void StickerProperty::__set_hasAnimation(const bool val) {
  this->hasAnimation = val;
}

void StickerProperty::__set_hasSound(const bool val) {
  this->hasSound = val;
}

void StickerProperty::__set_hasPopup(const bool val) {
  this->hasPopup = val;
}

void StickerProperty::__set_stickerResourceType(const SRType::type val) {
  this->stickerResourceType = val;
}

void StickerProperty::__set_stickerOptions(const std::string& val) {
  this->stickerOptions = val;
}

void StickerProperty::__set_compactStickerOptions(const int32_t val) {
  this->compactStickerOptions = val;
}

void StickerProperty::__set_stickerHash(const std::string& val) {
  this->stickerHash = val;
}

void StickerProperty::__set_stickerIds(const std::set<std::string> & val) {
  this->stickerIds = val;
}
std::ostream& operator<<(std::ostream& out, const StickerProperty& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t StickerProperty::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasAnimation);
          this->__isset.hasAnimation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasSound);
          this->__isset.hasSound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasPopup);
          this->__isset.hasPopup = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast112;
          xfer += iprot->readI32(ecast112);
          this->stickerResourceType = (SRType::type)ecast112;
          this->__isset.stickerResourceType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stickerOptions);
          this->__isset.stickerOptions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->compactStickerOptions);
          this->__isset.compactStickerOptions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stickerHash);
          this->__isset.stickerHash = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->stickerIds.clear();
            uint32_t _size113;
            ::apache::thrift::protocol::TType _etype116;
            xfer += iprot->readSetBegin(_etype116, _size113);
            uint32_t _i117;
            for (_i117 = 0; _i117 < _size113; ++_i117)
            {
              std::string _elem118;
              xfer += iprot->readString(_elem118);
              this->stickerIds.insert(_elem118);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.stickerIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t StickerProperty::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("StickerProperty");

  xfer += oprot->writeFieldBegin("hasAnimation", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->hasAnimation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hasSound", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->hasSound);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hasPopup", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->hasPopup);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stickerResourceType", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->stickerResourceType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stickerOptions", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->stickerOptions);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("compactStickerOptions", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->compactStickerOptions);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stickerHash", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->stickerHash);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stickerIds", ::apache::thrift::protocol::T_SET, 8);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->stickerIds.size()));
    std::set<std::string> ::const_iterator _iter119;
    for (_iter119 = this->stickerIds.begin(); _iter119 != this->stickerIds.end(); ++_iter119)
    {
      xfer += oprot->writeString((*_iter119));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StickerProperty &a, StickerProperty &b) {
  using ::std::swap;
  swap(a.hasAnimation, b.hasAnimation);
  swap(a.hasSound, b.hasSound);
  swap(a.hasPopup, b.hasPopup);
  swap(a.stickerResourceType, b.stickerResourceType);
  swap(a.stickerOptions, b.stickerOptions);
  swap(a.compactStickerOptions, b.compactStickerOptions);
  swap(a.stickerHash, b.stickerHash);
  swap(a.stickerIds, b.stickerIds);
  swap(a.__isset, b.__isset);
}

StickerProperty::StickerProperty(const StickerProperty& other120) {
  hasAnimation = other120.hasAnimation;
  hasSound = other120.hasSound;
  hasPopup = other120.hasPopup;
  stickerResourceType = other120.stickerResourceType;
  stickerOptions = other120.stickerOptions;
  compactStickerOptions = other120.compactStickerOptions;
  stickerHash = other120.stickerHash;
  stickerIds = other120.stickerIds;
  __isset = other120.__isset;
}
StickerProperty& StickerProperty::operator=(const StickerProperty& other121) {
  hasAnimation = other121.hasAnimation;
  hasSound = other121.hasSound;
  hasPopup = other121.hasPopup;
  stickerResourceType = other121.stickerResourceType;
  stickerOptions = other121.stickerOptions;
  compactStickerOptions = other121.compactStickerOptions;
  stickerHash = other121.stickerHash;
  stickerIds = other121.stickerIds;
  __isset = other121.__isset;
  return *this;
}
void StickerProperty::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "StickerProperty(";
  out << "hasAnimation=" << to_string(hasAnimation);
  out << ", " << "hasSound=" << to_string(hasSound);
  out << ", " << "hasPopup=" << to_string(hasPopup);
  out << ", " << "stickerResourceType=" << to_string(stickerResourceType);
  out << ", " << "stickerOptions=" << to_string(stickerOptions);
  out << ", " << "compactStickerOptions=" << to_string(compactStickerOptions);
  out << ", " << "stickerHash=" << to_string(stickerHash);
  out << ", " << "stickerIds=" << to_string(stickerIds);
  out << ")";
}


ThemeProperty::~ThemeProperty() throw() {
}


void ThemeProperty::__set_thumbnailUrl(const std::string& val) {
  this->thumbnailUrl = val;
}

void ThemeProperty::__set_themeResourceType(const TRType::type val) {
  this->themeResourceType = val;
}
std::ostream& operator<<(std::ostream& out, const ThemeProperty& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ThemeProperty::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->thumbnailUrl);
          this->__isset.thumbnailUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast122;
          xfer += iprot->readI32(ecast122);
          this->themeResourceType = (TRType::type)ecast122;
          this->__isset.themeResourceType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThemeProperty::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ThemeProperty");

  xfer += oprot->writeFieldBegin("thumbnailUrl", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->thumbnailUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("themeResourceType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->themeResourceType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThemeProperty &a, ThemeProperty &b) {
  using ::std::swap;
  swap(a.thumbnailUrl, b.thumbnailUrl);
  swap(a.themeResourceType, b.themeResourceType);
  swap(a.__isset, b.__isset);
}

ThemeProperty::ThemeProperty(const ThemeProperty& other123) {
  thumbnailUrl = other123.thumbnailUrl;
  themeResourceType = other123.themeResourceType;
  __isset = other123.__isset;
}
ThemeProperty& ThemeProperty::operator=(const ThemeProperty& other124) {
  thumbnailUrl = other124.thumbnailUrl;
  themeResourceType = other124.themeResourceType;
  __isset = other124.__isset;
  return *this;
}
void ThemeProperty::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ThemeProperty(";
  out << "thumbnailUrl=" << to_string(thumbnailUrl);
  out << ", " << "themeResourceType=" << to_string(themeResourceType);
  out << ")";
}


SticonProperty::~SticonProperty() throw() {
}


void SticonProperty::__set_sticonIds(const std::set<std::string> & val) {
  this->sticonIds = val;
}
std::ostream& operator<<(std::ostream& out, const SticonProperty& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SticonProperty::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->sticonIds.clear();
            uint32_t _size125;
            ::apache::thrift::protocol::TType _etype128;
            xfer += iprot->readSetBegin(_etype128, _size125);
            uint32_t _i129;
            for (_i129 = 0; _i129 < _size125; ++_i129)
            {
              std::string _elem130;
              xfer += iprot->readString(_elem130);
              this->sticonIds.insert(_elem130);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.sticonIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SticonProperty::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SticonProperty");

  xfer += oprot->writeFieldBegin("sticonIds", ::apache::thrift::protocol::T_SET, 1);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->sticonIds.size()));
    std::set<std::string> ::const_iterator _iter131;
    for (_iter131 = this->sticonIds.begin(); _iter131 != this->sticonIds.end(); ++_iter131)
    {
      xfer += oprot->writeString((*_iter131));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SticonProperty &a, SticonProperty &b) {
  using ::std::swap;
  swap(a.sticonIds, b.sticonIds);
  swap(a.__isset, b.__isset);
}

SticonProperty::SticonProperty(const SticonProperty& other132) {
  sticonIds = other132.sticonIds;
  __isset = other132.__isset;
}
SticonProperty& SticonProperty::operator=(const SticonProperty& other133) {
  sticonIds = other133.sticonIds;
  __isset = other133.__isset;
  return *this;
}
void SticonProperty::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SticonProperty(";
  out << "sticonIds=" << to_string(sticonIds);
  out << ")";
}


ProductProperty::~ProductProperty() throw() {
}


void ProductProperty::__set_stickerProperty(const StickerProperty& val) {
  this->stickerProperty = val;
}

void ProductProperty::__set_sticonProperty(const SticonProperty& val) {
  this->sticonProperty = val;
}

void ProductProperty::__set_themeProperty(const ThemeProperty& val) {
  this->themeProperty = val;
}
std::ostream& operator<<(std::ostream& out, const ProductProperty& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ProductProperty::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->stickerProperty.read(iprot);
          this->__isset.stickerProperty = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sticonProperty.read(iprot);
          this->__isset.sticonProperty = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->themeProperty.read(iprot);
          this->__isset.themeProperty = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProductProperty::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ProductProperty");

  xfer += oprot->writeFieldBegin("stickerProperty", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->stickerProperty.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("themeProperty", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->themeProperty.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sticonProperty", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->sticonProperty.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProductProperty &a, ProductProperty &b) {
  using ::std::swap;
  swap(a.stickerProperty, b.stickerProperty);
  swap(a.sticonProperty, b.sticonProperty);
  swap(a.themeProperty, b.themeProperty);
  swap(a.__isset, b.__isset);
}

ProductProperty::ProductProperty(const ProductProperty& other134) {
  stickerProperty = other134.stickerProperty;
  sticonProperty = other134.sticonProperty;
  themeProperty = other134.themeProperty;
  __isset = other134.__isset;
}
ProductProperty& ProductProperty::operator=(const ProductProperty& other135) {
  stickerProperty = other135.stickerProperty;
  sticonProperty = other135.sticonProperty;
  themeProperty = other135.themeProperty;
  __isset = other135.__isset;
  return *this;
}
void ProductProperty::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ProductProperty(";
  out << "stickerProperty=" << to_string(stickerProperty);
  out << ", " << "sticonProperty=" << to_string(sticonProperty);
  out << ", " << "themeProperty=" << to_string(themeProperty);
  out << ")";
}


ProductSearchSummary::~ProductSearchSummary() throw() {
}


void ProductSearchSummary::__set_id(const std::string& val) {
  this->id = val;
}

void ProductSearchSummary::__set_type(const PType::type val) {
  this->type = val;
}

void ProductSearchSummary::__set_name(const std::string& val) {
  this->name = val;
}

void ProductSearchSummary::__set_author(const std::string& val) {
  this->author = val;
}

void ProductSearchSummary::__set_promotionInfo(const PromotionInfo& val) {
  this->promotionInfo = val;
}

void ProductSearchSummary::__set_version(const int64_t val) {
  this->version = val;
}

void ProductSearchSummary::__set_newFlag(const bool val) {
  this->newFlag = val;
}

void ProductSearchSummary::__set_priceTier(const int32_t val) {
  this->priceTier = val;
}

void ProductSearchSummary::__set_priceInLineCoin(const std::string& val) {
  this->priceInLineCoin = val;
}

void ProductSearchSummary::__set_property(const ProductProperty& val) {
  this->property = val;
}

void ProductSearchSummary::__set_subType(const SubType::type val) {
  this->subType = val;
}

void ProductSearchSummary::__set_onSale(const bool val) {
  this->onSale = val;
}

void ProductSearchSummary::__set_availableForPresent(const bool val) {
  this->availableForPresent = val;
}

void ProductSearchSummary::__set_availableForPurchase(const bool val) {
  this->availableForPurchase = val;
}

void ProductSearchSummary::__set_validDays(const int32_t val) {
  this->validDays = val;
}

void ProductSearchSummary::__set_authorId(const std::string& val) {
  this->authorId = val;
}

void ProductSearchSummary::__set_saleFlag(const bool val) {
  this->saleFlag = val;
}
std::ostream& operator<<(std::ostream& out, const ProductSearchSummary& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ProductSearchSummary::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast136;
          xfer += iprot->readI32(ecast136);
          this->type = (PType::type)ecast136;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->author);
          this->__isset.author = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->promotionInfo.read(iprot);
          this->__isset.promotionInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->newFlag);
          this->__isset.newFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->priceTier);
          this->__isset.priceTier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->priceInLineCoin);
          this->__isset.priceInLineCoin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->property.read(iprot);
          this->__isset.property = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast137;
          xfer += iprot->readI32(ecast137);
          this->subType = (SubType::type)ecast137;
          this->__isset.subType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->onSale);
          this->__isset.onSale = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->availableForPresent);
          this->__isset.availableForPresent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->availableForPurchase);
          this->__isset.availableForPurchase = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->validDays);
          this->__isset.validDays = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->authorId);
          this->__isset.authorId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->saleFlag);
          this->__isset.saleFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProductSearchSummary::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ProductSearchSummary");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("author", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->author);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("promotionInfo", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->promotionInfo.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("newFlag", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->newFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("priceTier", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->priceTier);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("priceInLineCoin", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->priceInLineCoin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("property", ::apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->property.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("subType", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32((int32_t)this->subType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("onSale", ::apache::thrift::protocol::T_BOOL, 12);
  xfer += oprot->writeBool(this->onSale);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("availableForPresent", ::apache::thrift::protocol::T_BOOL, 13);
  xfer += oprot->writeBool(this->availableForPresent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("availableForPurchase", ::apache::thrift::protocol::T_BOOL, 14);
  xfer += oprot->writeBool(this->availableForPurchase);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("validDays", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->validDays);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("authorId", ::apache::thrift::protocol::T_STRING, 16);
  xfer += oprot->writeString(this->authorId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("saleFlag", ::apache::thrift::protocol::T_BOOL, 17);
  xfer += oprot->writeBool(this->saleFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProductSearchSummary &a, ProductSearchSummary &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.type, b.type);
  swap(a.name, b.name);
  swap(a.author, b.author);
  swap(a.promotionInfo, b.promotionInfo);
  swap(a.version, b.version);
  swap(a.newFlag, b.newFlag);
  swap(a.priceTier, b.priceTier);
  swap(a.priceInLineCoin, b.priceInLineCoin);
  swap(a.property, b.property);
  swap(a.subType, b.subType);
  swap(a.onSale, b.onSale);
  swap(a.availableForPresent, b.availableForPresent);
  swap(a.availableForPurchase, b.availableForPurchase);
  swap(a.validDays, b.validDays);
  swap(a.authorId, b.authorId);
  swap(a.saleFlag, b.saleFlag);
  swap(a.__isset, b.__isset);
}

ProductSearchSummary::ProductSearchSummary(const ProductSearchSummary& other138) {
  id = other138.id;
  type = other138.type;
  name = other138.name;
  author = other138.author;
  promotionInfo = other138.promotionInfo;
  version = other138.version;
  newFlag = other138.newFlag;
  priceTier = other138.priceTier;
  priceInLineCoin = other138.priceInLineCoin;
  property = other138.property;
  subType = other138.subType;
  onSale = other138.onSale;
  availableForPresent = other138.availableForPresent;
  availableForPurchase = other138.availableForPurchase;
  validDays = other138.validDays;
  authorId = other138.authorId;
  saleFlag = other138.saleFlag;
  __isset = other138.__isset;
}
ProductSearchSummary& ProductSearchSummary::operator=(const ProductSearchSummary& other139) {
  id = other139.id;
  type = other139.type;
  name = other139.name;
  author = other139.author;
  promotionInfo = other139.promotionInfo;
  version = other139.version;
  newFlag = other139.newFlag;
  priceTier = other139.priceTier;
  priceInLineCoin = other139.priceInLineCoin;
  property = other139.property;
  subType = other139.subType;
  onSale = other139.onSale;
  availableForPresent = other139.availableForPresent;
  availableForPurchase = other139.availableForPurchase;
  validDays = other139.validDays;
  authorId = other139.authorId;
  saleFlag = other139.saleFlag;
  __isset = other139.__isset;
  return *this;
}
void ProductSearchSummary::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ProductSearchSummary(";
  out << "id=" << to_string(id);
  out << ", " << "type=" << to_string(type);
  out << ", " << "name=" << to_string(name);
  out << ", " << "author=" << to_string(author);
  out << ", " << "promotionInfo=" << to_string(promotionInfo);
  out << ", " << "version=" << to_string(version);
  out << ", " << "newFlag=" << to_string(newFlag);
  out << ", " << "priceTier=" << to_string(priceTier);
  out << ", " << "priceInLineCoin=" << to_string(priceInLineCoin);
  out << ", " << "property=" << to_string(property);
  out << ", " << "subType=" << to_string(subType);
  out << ", " << "onSale=" << to_string(onSale);
  out << ", " << "availableForPresent=" << to_string(availableForPresent);
  out << ", " << "availableForPurchase=" << to_string(availableForPurchase);
  out << ", " << "validDays=" << to_string(validDays);
  out << ", " << "authorId=" << to_string(authorId);
  out << ", " << "saleFlag=" << to_string(saleFlag);
  out << ")";
}


ServiceItem::~ServiceItem() throw() {
}


void ServiceItem::__set_id(const std::string& val) {
  this->id = val;
}

void ServiceItem::__set_title(const std::string& val) {
  this->title = val;
}

void ServiceItem::__set_g(const int32_t val) {
  this->g = val;
}

void ServiceItem::__set_subType(const SubType::type val) {
  this->subType = val;
}

void ServiceItem::__set_appId(const std::string& val) {
  this->appId = val;
}

void ServiceItem::__set_channelId(const std::string& val) {
  this->channelId = val;
}

void ServiceItem::__set_badge(const std::string& val) {
  this->badge = val;
}

void ServiceItem::__set_iconUrl(const std::string& val) {
  this->iconUrl = val;
}

void ServiceItem::__set_downloadUrl(const std::string& val) {
  this->downloadUrl = val;
}

void ServiceItem::__set_launchScheme(const std::string& val) {
  this->launchScheme = val;
}

void ServiceItem::__set_iconTint(const bool val) {
  this->iconTint = val;
}
std::ostream& operator<<(std::ostream& out, const ServiceItem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ServiceItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          this->__isset.title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->g);
          this->__isset.g = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast140;
          xfer += iprot->readI32(ecast140);
          this->subType = (SubType::type)ecast140;
          this->__isset.subType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->appId);
          this->__isset.appId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->channelId);
          this->__isset.channelId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->badge);
          this->__isset.badge = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->iconUrl);
          this->__isset.iconUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->downloadUrl);
          this->__isset.downloadUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->launchScheme);
          this->__isset.launchScheme = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->iconTint);
          this->__isset.iconTint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ServiceItem");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("g", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->g);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("subType", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->subType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("appId", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->appId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channelId", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->channelId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("badge", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->badge);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("iconUrl", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->iconUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("downloadUrl", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->downloadUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("launchScheme", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->launchScheme);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("iconTint", ::apache::thrift::protocol::T_BOOL, 11);
  xfer += oprot->writeBool(this->iconTint);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServiceItem &a, ServiceItem &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.title, b.title);
  swap(a.g, b.g);
  swap(a.subType, b.subType);
  swap(a.appId, b.appId);
  swap(a.channelId, b.channelId);
  swap(a.badge, b.badge);
  swap(a.iconUrl, b.iconUrl);
  swap(a.downloadUrl, b.downloadUrl);
  swap(a.launchScheme, b.launchScheme);
  swap(a.iconTint, b.iconTint);
  swap(a.__isset, b.__isset);
}

ServiceItem::ServiceItem(const ServiceItem& other141) {
  id = other141.id;
  title = other141.title;
  g = other141.g;
  subType = other141.subType;
  appId = other141.appId;
  channelId = other141.channelId;
  badge = other141.badge;
  iconUrl = other141.iconUrl;
  downloadUrl = other141.downloadUrl;
  launchScheme = other141.launchScheme;
  iconTint = other141.iconTint;
  __isset = other141.__isset;
}
ServiceItem& ServiceItem::operator=(const ServiceItem& other142) {
  id = other142.id;
  title = other142.title;
  g = other142.g;
  subType = other142.subType;
  appId = other142.appId;
  channelId = other142.channelId;
  badge = other142.badge;
  iconUrl = other142.iconUrl;
  downloadUrl = other142.downloadUrl;
  launchScheme = other142.launchScheme;
  iconTint = other142.iconTint;
  __isset = other142.__isset;
  return *this;
}
void ServiceItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ServiceItem(";
  out << "id=" << to_string(id);
  out << ", " << "title=" << to_string(title);
  out << ", " << "g=" << to_string(g);
  out << ", " << "subType=" << to_string(subType);
  out << ", " << "appId=" << to_string(appId);
  out << ", " << "channelId=" << to_string(channelId);
  out << ", " << "badge=" << to_string(badge);
  out << ", " << "iconUrl=" << to_string(iconUrl);
  out << ", " << "downloadUrl=" << to_string(downloadUrl);
  out << ", " << "launchScheme=" << to_string(launchScheme);
  out << ", " << "iconTint=" << to_string(iconTint);
  out << ")";
}


AdditionalInfoItem::~AdditionalInfoItem() throw() {
}


void AdditionalInfoItem::__set_id(const std::string& val) {
  this->id = val;
}

void AdditionalInfoItem::__set_g(const int32_t val) {
  this->g = val;
}

void AdditionalInfoItem::__set_title(const std::string& val) {
  this->title = val;
}

void AdditionalInfoItem::__set_descr(const std::string& val) {
  this->descr = val;
}

void AdditionalInfoItem::__set_iconUrl(const std::string& val) {
  this->iconUrl = val;
}

void AdditionalInfoItem::__set_link(const std::string& val) {
  this->link = val;
}
std::ostream& operator<<(std::ostream& out, const AdditionalInfoItem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AdditionalInfoItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->g);
          this->__isset.g = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          this->__isset.title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->descr);
          this->__isset.descr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->iconUrl);
          this->__isset.iconUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->link);
          this->__isset.link = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AdditionalInfoItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AdditionalInfoItem");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("g", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->g);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("descr", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->descr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("iconUrl", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->iconUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("link", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->link);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AdditionalInfoItem &a, AdditionalInfoItem &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.g, b.g);
  swap(a.title, b.title);
  swap(a.descr, b.descr);
  swap(a.iconUrl, b.iconUrl);
  swap(a.link, b.link);
  swap(a.__isset, b.__isset);
}

AdditionalInfoItem::AdditionalInfoItem(const AdditionalInfoItem& other143) {
  id = other143.id;
  g = other143.g;
  title = other143.title;
  descr = other143.descr;
  iconUrl = other143.iconUrl;
  link = other143.link;
  __isset = other143.__isset;
}
AdditionalInfoItem& AdditionalInfoItem::operator=(const AdditionalInfoItem& other144) {
  id = other144.id;
  g = other144.g;
  title = other144.title;
  descr = other144.descr;
  iconUrl = other144.iconUrl;
  link = other144.link;
  __isset = other144.__isset;
  return *this;
}
void AdditionalInfoItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AdditionalInfoItem(";
  out << "id=" << to_string(id);
  out << ", " << "g=" << to_string(g);
  out << ", " << "title=" << to_string(title);
  out << ", " << "descr=" << to_string(descr);
  out << ", " << "iconUrl=" << to_string(iconUrl);
  out << ", " << "link=" << to_string(link);
  out << ")";
}


YellowpageItem::~YellowpageItem() throw() {
}


void YellowpageItem::__set_id(const std::string& val) {
  this->id = val;
}

void YellowpageItem::__set_mid(const std::string& val) {
  this->mid = val;
}

void YellowpageItem::__set_name(const std::string& val) {
  this->name = val;
}

void YellowpageItem::__set_address(const std::string& val) {
  this->address = val;
}

void YellowpageItem::__set_latitude(const double val) {
  this->latitude = val;
}

void YellowpageItem::__set_longitude(const double val) {
  this->longitude = val;
}

void YellowpageItem::__set_distance(const double val) {
  this->distance = val;
}

void YellowpageItem::__set_canFreeCall(const bool val) {
  this->canFreeCall = val;
}

void YellowpageItem::__set_k(const int32_t val) {
  this->k = val;
}

void YellowpageItem::__set_phoneNumber(const std::string& val) {
  this->phoneNumber = val;
}

void YellowpageItem::__set_cat(const int32_t val) {
  this->cat = val;
}

void YellowpageItem::__set_categoryIcon(const int32_t val) {
  this->categoryIcon = val;
}

void YellowpageItem::__set_additionalInfo(const std::vector<AdditionalInfoItem> & val) {
  this->additionalInfo = val;
}
std::ostream& operator<<(std::ostream& out, const YellowpageItem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t YellowpageItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mid);
          this->__isset.mid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->address);
          this->__isset.address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->latitude);
          this->__isset.latitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->longitude);
          this->__isset.longitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->distance);
          this->__isset.distance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->canFreeCall);
          this->__isset.canFreeCall = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->k);
          this->__isset.k = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phoneNumber);
          this->__isset.phoneNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cat);
          this->__isset.cat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->categoryIcon);
          this->__isset.categoryIcon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->additionalInfo.clear();
            uint32_t _size145;
            ::apache::thrift::protocol::TType _etype148;
            xfer += iprot->readListBegin(_etype148, _size145);
            this->additionalInfo.resize(_size145);
            uint32_t _i149;
            for (_i149 = 0; _i149 < _size145; ++_i149)
            {
              xfer += this->additionalInfo[_i149].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.additionalInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t YellowpageItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("YellowpageItem");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->mid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("address", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->address);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("latitude", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->latitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("longitude", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->longitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("distance", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->distance);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("canFreeCall", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->canFreeCall);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("k", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->k);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phoneNumber", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->phoneNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cat", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->cat);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("categoryIcon", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->categoryIcon);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("additionalInfo", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->additionalInfo.size()));
    std::vector<AdditionalInfoItem> ::const_iterator _iter150;
    for (_iter150 = this->additionalInfo.begin(); _iter150 != this->additionalInfo.end(); ++_iter150)
    {
      xfer += (*_iter150).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(YellowpageItem &a, YellowpageItem &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.mid, b.mid);
  swap(a.name, b.name);
  swap(a.address, b.address);
  swap(a.latitude, b.latitude);
  swap(a.longitude, b.longitude);
  swap(a.distance, b.distance);
  swap(a.canFreeCall, b.canFreeCall);
  swap(a.k, b.k);
  swap(a.phoneNumber, b.phoneNumber);
  swap(a.cat, b.cat);
  swap(a.categoryIcon, b.categoryIcon);
  swap(a.additionalInfo, b.additionalInfo);
  swap(a.__isset, b.__isset);
}

YellowpageItem::YellowpageItem(const YellowpageItem& other151) {
  id = other151.id;
  mid = other151.mid;
  name = other151.name;
  address = other151.address;
  latitude = other151.latitude;
  longitude = other151.longitude;
  distance = other151.distance;
  canFreeCall = other151.canFreeCall;
  k = other151.k;
  phoneNumber = other151.phoneNumber;
  cat = other151.cat;
  categoryIcon = other151.categoryIcon;
  additionalInfo = other151.additionalInfo;
  __isset = other151.__isset;
}
YellowpageItem& YellowpageItem::operator=(const YellowpageItem& other152) {
  id = other152.id;
  mid = other152.mid;
  name = other152.name;
  address = other152.address;
  latitude = other152.latitude;
  longitude = other152.longitude;
  distance = other152.distance;
  canFreeCall = other152.canFreeCall;
  k = other152.k;
  phoneNumber = other152.phoneNumber;
  cat = other152.cat;
  categoryIcon = other152.categoryIcon;
  additionalInfo = other152.additionalInfo;
  __isset = other152.__isset;
  return *this;
}
void YellowpageItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "YellowpageItem(";
  out << "id=" << to_string(id);
  out << ", " << "mid=" << to_string(mid);
  out << ", " << "name=" << to_string(name);
  out << ", " << "address=" << to_string(address);
  out << ", " << "latitude=" << to_string(latitude);
  out << ", " << "longitude=" << to_string(longitude);
  out << ", " << "distance=" << to_string(distance);
  out << ", " << "canFreeCall=" << to_string(canFreeCall);
  out << ", " << "k=" << to_string(k);
  out << ", " << "phoneNumber=" << to_string(phoneNumber);
  out << ", " << "cat=" << to_string(cat);
  out << ", " << "categoryIcon=" << to_string(categoryIcon);
  out << ", " << "additionalInfo=" << to_string(additionalInfo);
  out << ")";
}


BuddySearchResult::~BuddySearchResult() throw() {
}


void BuddySearchResult::__set_mid(const std::string& val) {
  this->mid = val;
}

void BuddySearchResult::__set_displayName(const std::string& val) {
  this->displayName = val;
}

void BuddySearchResult::__set_pictureStatus(const std::string& val) {
  this->pictureStatus = val;
}

void BuddySearchResult::__set_picturePath(const std::string& val) {
  this->picturePath = val;
}

void BuddySearchResult::__set_statusMessage(const std::string& val) {
  this->statusMessage = val;
}

void BuddySearchResult::__set_businessAccount(const bool val) {
  this->businessAccount = val;
}

void BuddySearchResult::__set_iconType(const int32_t val) {
  this->iconType = val;
}

void BuddySearchResult::__set_botType(const BotType::type val) {
  this->botType = val;
}
std::ostream& operator<<(std::ostream& out, const BuddySearchResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BuddySearchResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mid);
          this->__isset.mid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->displayName);
          this->__isset.displayName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pictureStatus);
          this->__isset.pictureStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->picturePath);
          this->__isset.picturePath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->statusMessage);
          this->__isset.statusMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->businessAccount);
          this->__isset.businessAccount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->iconType);
          this->__isset.iconType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast153;
          xfer += iprot->readI32(ecast153);
          this->botType = (BotType::type)ecast153;
          this->__isset.botType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BuddySearchResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BuddySearchResult");

  xfer += oprot->writeFieldBegin("mid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->mid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->displayName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pictureStatus", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->pictureStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("picturePath", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->picturePath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("statusMessage", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->statusMessage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("businessAccount", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->businessAccount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("iconType", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->iconType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("botType", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32((int32_t)this->botType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BuddySearchResult &a, BuddySearchResult &b) {
  using ::std::swap;
  swap(a.mid, b.mid);
  swap(a.displayName, b.displayName);
  swap(a.pictureStatus, b.pictureStatus);
  swap(a.picturePath, b.picturePath);
  swap(a.statusMessage, b.statusMessage);
  swap(a.businessAccount, b.businessAccount);
  swap(a.iconType, b.iconType);
  swap(a.botType, b.botType);
  swap(a.__isset, b.__isset);
}

BuddySearchResult::BuddySearchResult(const BuddySearchResult& other154) {
  mid = other154.mid;
  displayName = other154.displayName;
  pictureStatus = other154.pictureStatus;
  picturePath = other154.picturePath;
  statusMessage = other154.statusMessage;
  businessAccount = other154.businessAccount;
  iconType = other154.iconType;
  botType = other154.botType;
  __isset = other154.__isset;
}
BuddySearchResult& BuddySearchResult::operator=(const BuddySearchResult& other155) {
  mid = other155.mid;
  displayName = other155.displayName;
  pictureStatus = other155.pictureStatus;
  picturePath = other155.picturePath;
  statusMessage = other155.statusMessage;
  businessAccount = other155.businessAccount;
  iconType = other155.iconType;
  botType = other155.botType;
  __isset = other155.__isset;
  return *this;
}
void BuddySearchResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BuddySearchResult(";
  out << "mid=" << to_string(mid);
  out << ", " << "displayName=" << to_string(displayName);
  out << ", " << "pictureStatus=" << to_string(pictureStatus);
  out << ", " << "picturePath=" << to_string(picturePath);
  out << ", " << "statusMessage=" << to_string(statusMessage);
  out << ", " << "businessAccount=" << to_string(businessAccount);
  out << ", " << "iconType=" << to_string(iconType);
  out << ", " << "botType=" << to_string(botType);
  out << ")";
}


GeoAddressItem::~GeoAddressItem() throw() {
}


void GeoAddressItem::__set_latitude(const double val) {
  this->latitude = val;
}

void GeoAddressItem::__set_longitude(const double val) {
  this->longitude = val;
}

void GeoAddressItem::__set_displayAddress(const std::string& val) {
  this->displayAddress = val;
}
std::ostream& operator<<(std::ostream& out, const GeoAddressItem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GeoAddressItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->latitude);
          this->__isset.latitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->longitude);
          this->__isset.longitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->displayAddress);
          this->__isset.displayAddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GeoAddressItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GeoAddressItem");

  xfer += oprot->writeFieldBegin("latitude", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->latitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("longitude", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->longitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayAddress", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->displayAddress);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GeoAddressItem &a, GeoAddressItem &b) {
  using ::std::swap;
  swap(a.latitude, b.latitude);
  swap(a.longitude, b.longitude);
  swap(a.displayAddress, b.displayAddress);
  swap(a.__isset, b.__isset);
}

GeoAddressItem::GeoAddressItem(const GeoAddressItem& other156) {
  latitude = other156.latitude;
  longitude = other156.longitude;
  displayAddress = other156.displayAddress;
  __isset = other156.__isset;
}
GeoAddressItem& GeoAddressItem::operator=(const GeoAddressItem& other157) {
  latitude = other157.latitude;
  longitude = other157.longitude;
  displayAddress = other157.displayAddress;
  __isset = other157.__isset;
  return *this;
}
void GeoAddressItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GeoAddressItem(";
  out << "latitude=" << to_string(latitude);
  out << ", " << "longitude=" << to_string(longitude);
  out << ", " << "displayAddress=" << to_string(displayAddress);
  out << ")";
}


AddFriendData::~AddFriendData() throw() {
}


void AddFriendData::__set_mid(const std::string& val) {
  this->mid = val;
}
std::ostream& operator<<(std::ostream& out, const AddFriendData& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AddFriendData::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mid);
          this->__isset.mid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AddFriendData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AddFriendData");

  xfer += oprot->writeFieldBegin("mid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->mid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AddFriendData &a, AddFriendData &b) {
  using ::std::swap;
  swap(a.mid, b.mid);
  swap(a.__isset, b.__isset);
}

AddFriendData::AddFriendData(const AddFriendData& other158) {
  mid = other158.mid;
  __isset = other158.__isset;
}
AddFriendData& AddFriendData::operator=(const AddFriendData& other159) {
  mid = other159.mid;
  __isset = other159.__isset;
  return *this;
}
void AddFriendData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddFriendData(";
  out << "mid=" << to_string(mid);
  out << ")";
}


InstallAppData::~InstallAppData() throw() {
}


void InstallAppData::__set_installData(const std::map<std::string, std::string> & val) {
  this->installData = val;
}
std::ostream& operator<<(std::ostream& out, const InstallAppData& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t InstallAppData::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->installData.clear();
            uint32_t _size160;
            ::apache::thrift::protocol::TType _ktype161;
            ::apache::thrift::protocol::TType _vtype162;
            xfer += iprot->readMapBegin(_ktype161, _vtype162, _size160);
            uint32_t _i164;
            for (_i164 = 0; _i164 < _size160; ++_i164)
            {
              std::string _key165;
              xfer += iprot->readString(_key165);
              std::string& _val166 = this->installData[_key165];
              xfer += iprot->readString(_val166);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.installData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InstallAppData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InstallAppData");

  xfer += oprot->writeFieldBegin("installData", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->installData.size()));
    std::map<std::string, std::string> ::const_iterator _iter167;
    for (_iter167 = this->installData.begin(); _iter167 != this->installData.end(); ++_iter167)
    {
      xfer += oprot->writeString(_iter167->first);
      xfer += oprot->writeString(_iter167->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InstallAppData &a, InstallAppData &b) {
  using ::std::swap;
  swap(a.installData, b.installData);
  swap(a.__isset, b.__isset);
}

InstallAppData::InstallAppData(const InstallAppData& other168) {
  installData = other168.installData;
  __isset = other168.__isset;
}
InstallAppData& InstallAppData::operator=(const InstallAppData& other169) {
  installData = other169.installData;
  __isset = other169.__isset;
  return *this;
}
void InstallAppData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InstallAppData(";
  out << "installData=" << to_string(installData);
  out << ")";
}


JumpUrlData::~JumpUrlData() throw() {
}

std::ostream& operator<<(std::ostream& out, const JumpUrlData& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t JumpUrlData::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t JumpUrlData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("JumpUrlData");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(JumpUrlData &a, JumpUrlData &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

JumpUrlData::JumpUrlData(const JumpUrlData& other170) {
  (void) other170;
}
JumpUrlData& JumpUrlData::operator=(const JumpUrlData& other171) {
  (void) other171;
  return *this;
}
void JumpUrlData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "JumpUrlData(";
  out << ")";
}


ButtonActionData::~ButtonActionData() throw() {
}


void ButtonActionData::__set_addFriendData(const AddFriendData& val) {
  this->addFriendData = val;
}

void ButtonActionData::__set_installAppData(const InstallAppData& val) {
  this->installAppData = val;
}

void ButtonActionData::__set_jumpUrlData(const JumpUrlData& val) {
  this->jumpUrlData = val;
}
std::ostream& operator<<(std::ostream& out, const ButtonActionData& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ButtonActionData::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->addFriendData.read(iprot);
          this->__isset.addFriendData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->installAppData.read(iprot);
          this->__isset.installAppData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->jumpUrlData.read(iprot);
          this->__isset.jumpUrlData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ButtonActionData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ButtonActionData");

  xfer += oprot->writeFieldBegin("addFriendData", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->addFriendData.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("installAppData", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->installAppData.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jumpUrlData", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->jumpUrlData.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ButtonActionData &a, ButtonActionData &b) {
  using ::std::swap;
  swap(a.addFriendData, b.addFriendData);
  swap(a.installAppData, b.installAppData);
  swap(a.jumpUrlData, b.jumpUrlData);
  swap(a.__isset, b.__isset);
}

ButtonActionData::ButtonActionData(const ButtonActionData& other172) {
  addFriendData = other172.addFriendData;
  installAppData = other172.installAppData;
  jumpUrlData = other172.jumpUrlData;
  __isset = other172.__isset;
}
ButtonActionData& ButtonActionData::operator=(const ButtonActionData& other173) {
  addFriendData = other173.addFriendData;
  installAppData = other173.installAppData;
  jumpUrlData = other173.jumpUrlData;
  __isset = other173.__isset;
  return *this;
}
void ButtonActionData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ButtonActionData(";
  out << "addFriendData=" << to_string(addFriendData);
  out << ", " << "installAppData=" << to_string(installAppData);
  out << ", " << "jumpUrlData=" << to_string(jumpUrlData);
  out << ")";
}


ShortcutButtonAction::~ShortcutButtonAction() throw() {
}


void ShortcutButtonAction::__set_actionType(const int32_t val) {
  this->actionType = val;
}

void ShortcutButtonAction::__set_actionData(const ButtonActionData& val) {
  this->actionData = val;
}
std::ostream& operator<<(std::ostream& out, const ShortcutButtonAction& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShortcutButtonAction::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->actionType);
          this->__isset.actionType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->actionData.read(iprot);
          this->__isset.actionData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShortcutButtonAction::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShortcutButtonAction");

  xfer += oprot->writeFieldBegin("actionType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->actionType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("actionData", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->actionData.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShortcutButtonAction &a, ShortcutButtonAction &b) {
  using ::std::swap;
  swap(a.actionType, b.actionType);
  swap(a.actionData, b.actionData);
  swap(a.__isset, b.__isset);
}

ShortcutButtonAction::ShortcutButtonAction(const ShortcutButtonAction& other174) {
  actionType = other174.actionType;
  actionData = other174.actionData;
  __isset = other174.__isset;
}
ShortcutButtonAction& ShortcutButtonAction::operator=(const ShortcutButtonAction& other175) {
  actionType = other175.actionType;
  actionData = other175.actionData;
  __isset = other175.__isset;
  return *this;
}
void ShortcutButtonAction::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShortcutButtonAction(";
  out << "actionType=" << to_string(actionType);
  out << ", " << "actionData=" << to_string(actionData);
  out << ")";
}


ShortcutButton::~ShortcutButton() throw() {
}


void ShortcutButton::__set_id(const std::string& val) {
  this->id = val;
}

void ShortcutButton::__set_title(const std::string& val) {
  this->title = val;
}

void ShortcutButton::__set_url(const std::string& val) {
  this->url = val;
}

void ShortcutButton::__set_iconPath(const std::string& val) {
  this->iconPath = val;
}

void ShortcutButton::__set_action(const ShortcutButtonAction& val) {
  this->action = val;
}
std::ostream& operator<<(std::ostream& out, const ShortcutButton& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShortcutButton::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          this->__isset.title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          this->__isset.url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->iconPath);
          this->__isset.iconPath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action.read(iprot);
          this->__isset.action = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShortcutButton::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShortcutButton");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("iconPath", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->iconPath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->action.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShortcutButton &a, ShortcutButton &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.title, b.title);
  swap(a.url, b.url);
  swap(a.iconPath, b.iconPath);
  swap(a.action, b.action);
  swap(a.__isset, b.__isset);
}

ShortcutButton::ShortcutButton(const ShortcutButton& other176) {
  id = other176.id;
  title = other176.title;
  url = other176.url;
  iconPath = other176.iconPath;
  action = other176.action;
  __isset = other176.__isset;
}
ShortcutButton& ShortcutButton::operator=(const ShortcutButton& other177) {
  id = other177.id;
  title = other177.title;
  url = other177.url;
  iconPath = other177.iconPath;
  action = other177.action;
  __isset = other177.__isset;
  return *this;
}
void ShortcutButton::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShortcutButton(";
  out << "id=" << to_string(id);
  out << ", " << "title=" << to_string(title);
  out << ", " << "url=" << to_string(url);
  out << ", " << "iconPath=" << to_string(iconPath);
  out << ", " << "action=" << to_string(action);
  out << ")";
}


ShortcutItem::~ShortcutItem() throw() {
}


void ShortcutItem::__set_id(const std::string& val) {
  this->id = val;
}

void ShortcutItem::__set_title(const std::string& val) {
  this->title = val;
}

void ShortcutItem::__set_descr(const std::string& val) {
  this->descr = val;
}

void ShortcutItem::__set_iconPath(const std::string& val) {
  this->iconPath = val;
}

void ShortcutItem::__set_url(const std::string& val) {
  this->url = val;
}

void ShortcutItem::__set_buttons(const std::vector<ShortcutButton> & val) {
  this->buttons = val;
}

void ShortcutItem::__set_action(const ShortcutButtonAction& val) {
  this->action = val;
}
std::ostream& operator<<(std::ostream& out, const ShortcutItem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShortcutItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          this->__isset.title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->descr);
          this->__isset.descr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->iconPath);
          this->__isset.iconPath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          this->__isset.url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->buttons.clear();
            uint32_t _size178;
            ::apache::thrift::protocol::TType _etype181;
            xfer += iprot->readListBegin(_etype181, _size178);
            this->buttons.resize(_size178);
            uint32_t _i182;
            for (_i182 = 0; _i182 < _size178; ++_i182)
            {
              xfer += this->buttons[_i182].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.buttons = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action.read(iprot);
          this->__isset.action = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShortcutItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShortcutItem");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("descr", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->descr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("iconPath", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->iconPath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buttons", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->buttons.size()));
    std::vector<ShortcutButton> ::const_iterator _iter183;
    for (_iter183 = this->buttons.begin(); _iter183 != this->buttons.end(); ++_iter183)
    {
      xfer += (*_iter183).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->action.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShortcutItem &a, ShortcutItem &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.title, b.title);
  swap(a.descr, b.descr);
  swap(a.iconPath, b.iconPath);
  swap(a.url, b.url);
  swap(a.buttons, b.buttons);
  swap(a.action, b.action);
  swap(a.__isset, b.__isset);
}

ShortcutItem::ShortcutItem(const ShortcutItem& other184) {
  id = other184.id;
  title = other184.title;
  descr = other184.descr;
  iconPath = other184.iconPath;
  url = other184.url;
  buttons = other184.buttons;
  action = other184.action;
  __isset = other184.__isset;
}
ShortcutItem& ShortcutItem::operator=(const ShortcutItem& other185) {
  id = other185.id;
  title = other185.title;
  descr = other185.descr;
  iconPath = other185.iconPath;
  url = other185.url;
  buttons = other185.buttons;
  action = other185.action;
  __isset = other185.__isset;
  return *this;
}
void ShortcutItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShortcutItem(";
  out << "id=" << to_string(id);
  out << ", " << "title=" << to_string(title);
  out << ", " << "descr=" << to_string(descr);
  out << ", " << "iconPath=" << to_string(iconPath);
  out << ", " << "url=" << to_string(url);
  out << ", " << "buttons=" << to_string(buttons);
  out << ", " << "action=" << to_string(action);
  out << ")";
}


SQCat::~SQCat() throw() {
}


void SQCat::__set_id(const int32_t val) {
  this->id = val;
}

void SQCat::__set_name(const std::string& val) {
  this->name = val;
}
std::ostream& operator<<(std::ostream& out, const SQCat& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SQCat::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SQCat::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SQCat");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SQCat &a, SQCat &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

SQCat::SQCat(const SQCat& other186) {
  id = other186.id;
  name = other186.name;
  __isset = other186.__isset;
}
SQCat& SQCat::operator=(const SQCat& other187) {
  id = other187.id;
  name = other187.name;
  __isset = other187.__isset;
  return *this;
}
void SQCat::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SQCat(";
  out << "id=" << to_string(id);
  out << ", " << "name=" << to_string(name);
  out << ")";
}


SearchItemUnion::~SearchItemUnion() throw() {
}


void SearchItemUnion::__set_categoryItem(const CategoryItem& val) {
  this->categoryItem = val;
}

void SearchItemUnion::__set_spotItem(const SpotItem& val) {
  this->spotItem = val;
}

void SearchItemUnion::__set_productItem(const ProductSearchSummary& val) {
  this->productItem = val;
}

void SearchItemUnion::__set_serviceItem(const ServiceItem& val) {
  this->serviceItem = val;
}

void SearchItemUnion::__set_yellowpageItem(const YellowpageItem& val) {
  this->yellowpageItem = val;
}

void SearchItemUnion::__set_oaItem(const BuddySearchResult& val) {
  this->oaItem = val;
}

void SearchItemUnion::__set_geoAddressItem(const GeoAddressItem& val) {
  this->geoAddressItem = val;
}

void SearchItemUnion::__set_shortcutItem(const ShortcutItem& val) {
  this->shortcutItem = val;
}

void SearchItemUnion::__set_squareItem(const SquareInfo& val) {
  this->squareItem = val;
}

void SearchItemUnion::__set_squareCategoryItem(const SQCat& val) {
  this->squareCategoryItem = val;
}
std::ostream& operator<<(std::ostream& out, const SearchItemUnion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SearchItemUnion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->categoryItem.read(iprot);
          this->__isset.categoryItem = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->spotItem.read(iprot);
          this->__isset.spotItem = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->productItem.read(iprot);
          this->__isset.productItem = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->serviceItem.read(iprot);
          this->__isset.serviceItem = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->yellowpageItem.read(iprot);
          this->__isset.yellowpageItem = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->oaItem.read(iprot);
          this->__isset.oaItem = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->geoAddressItem.read(iprot);
          this->__isset.geoAddressItem = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->shortcutItem.read(iprot);
          this->__isset.shortcutItem = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareItem.read(iprot);
          this->__isset.squareItem = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareCategoryItem.read(iprot);
          this->__isset.squareCategoryItem = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SearchItemUnion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SearchItemUnion");

  xfer += oprot->writeFieldBegin("categoryItem", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->categoryItem.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("spotItem", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->spotItem.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("productItem", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->productItem.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceItem", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->serviceItem.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yellowpageItem", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->yellowpageItem.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("oaItem", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->oaItem.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("geoAddressItem", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->geoAddressItem.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("shortcutItem", ::apache::thrift::protocol::T_STRUCT, 8);
  xfer += this->shortcutItem.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareItem", ::apache::thrift::protocol::T_STRUCT, 9);
  xfer += this->squareItem.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareCategoryItem", ::apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->squareCategoryItem.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SearchItemUnion &a, SearchItemUnion &b) {
  using ::std::swap;
  swap(a.categoryItem, b.categoryItem);
  swap(a.spotItem, b.spotItem);
  swap(a.productItem, b.productItem);
  swap(a.serviceItem, b.serviceItem);
  swap(a.yellowpageItem, b.yellowpageItem);
  swap(a.oaItem, b.oaItem);
  swap(a.geoAddressItem, b.geoAddressItem);
  swap(a.shortcutItem, b.shortcutItem);
  swap(a.squareItem, b.squareItem);
  swap(a.squareCategoryItem, b.squareCategoryItem);
  swap(a.__isset, b.__isset);
}

SearchItemUnion::SearchItemUnion(const SearchItemUnion& other188) {
  categoryItem = other188.categoryItem;
  spotItem = other188.spotItem;
  productItem = other188.productItem;
  serviceItem = other188.serviceItem;
  yellowpageItem = other188.yellowpageItem;
  oaItem = other188.oaItem;
  geoAddressItem = other188.geoAddressItem;
  shortcutItem = other188.shortcutItem;
  squareItem = other188.squareItem;
  squareCategoryItem = other188.squareCategoryItem;
  __isset = other188.__isset;
}
SearchItemUnion& SearchItemUnion::operator=(const SearchItemUnion& other189) {
  categoryItem = other189.categoryItem;
  spotItem = other189.spotItem;
  productItem = other189.productItem;
  serviceItem = other189.serviceItem;
  yellowpageItem = other189.yellowpageItem;
  oaItem = other189.oaItem;
  geoAddressItem = other189.geoAddressItem;
  shortcutItem = other189.shortcutItem;
  squareItem = other189.squareItem;
  squareCategoryItem = other189.squareCategoryItem;
  __isset = other189.__isset;
  return *this;
}
void SearchItemUnion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SearchItemUnion(";
  out << "categoryItem=" << to_string(categoryItem);
  out << ", " << "spotItem=" << to_string(spotItem);
  out << ", " << "productItem=" << to_string(productItem);
  out << ", " << "serviceItem=" << to_string(serviceItem);
  out << ", " << "yellowpageItem=" << to_string(yellowpageItem);
  out << ", " << "oaItem=" << to_string(oaItem);
  out << ", " << "geoAddressItem=" << to_string(geoAddressItem);
  out << ", " << "shortcutItem=" << to_string(shortcutItem);
  out << ", " << "squareItem=" << to_string(squareItem);
  out << ", " << "squareCategoryItem=" << to_string(squareCategoryItem);
  out << ")";
}


SearchResultItem::~SearchResultItem() throw() {
}


void SearchResultItem::__set_id(const std::string& val) {
  this->id = val;
}

void SearchResultItem::__set_ItemType(const int32_t val) {
  this->ItemType = val;
}

void SearchResultItem::__set_item(const SearchItemUnion& val) {
  this->item = val;
}

void SearchResultItem::__set_title(const std::string& val) {
  this->title = val;
}

void SearchResultItem::__set_sub1(const std::string& val) {
  this->sub1 = val;
}

void SearchResultItem::__set_sub2(const std::string& val) {
  this->sub2 = val;
}

void SearchResultItem::__set_iconUrl(const std::string& val) {
  this->iconUrl = val;
}

void SearchResultItem::__set_titleLink(const std::string& val) {
  this->titleLink = val;
}

void SearchResultItem::__set_iconLink(const std::string& val) {
  this->iconLink = val;
}

void SearchResultItem::__set_displayTemplate(const std::string& val) {
  this->displayTemplate = val;
}

void SearchResultItem::__set_additionalInfo(const std::vector<AdditionalInfoItem> & val) {
  this->additionalInfo = val;
}
std::ostream& operator<<(std::ostream& out, const SearchResultItem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SearchResultItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ItemType);
          this->__isset.ItemType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->item.read(iprot);
          this->__isset.item = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          this->__isset.title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sub1);
          this->__isset.sub1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sub2);
          this->__isset.sub2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->iconUrl);
          this->__isset.iconUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->titleLink);
          this->__isset.titleLink = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->iconLink);
          this->__isset.iconLink = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->displayTemplate);
          this->__isset.displayTemplate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->additionalInfo.clear();
            uint32_t _size190;
            ::apache::thrift::protocol::TType _etype193;
            xfer += iprot->readListBegin(_etype193, _size190);
            this->additionalInfo.resize(_size190);
            uint32_t _i194;
            for (_i194 = 0; _i194 < _size190; ++_i194)
            {
              xfer += this->additionalInfo[_i194].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.additionalInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SearchResultItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SearchResultItem");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ItemType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->ItemType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("item", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->item.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sub1", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->sub1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sub2", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->sub2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("iconUrl", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->iconUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("titleLink", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->titleLink);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("iconLink", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->iconLink);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayTemplate", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->displayTemplate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("additionalInfo", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->additionalInfo.size()));
    std::vector<AdditionalInfoItem> ::const_iterator _iter195;
    for (_iter195 = this->additionalInfo.begin(); _iter195 != this->additionalInfo.end(); ++_iter195)
    {
      xfer += (*_iter195).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SearchResultItem &a, SearchResultItem &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.ItemType, b.ItemType);
  swap(a.item, b.item);
  swap(a.title, b.title);
  swap(a.sub1, b.sub1);
  swap(a.sub2, b.sub2);
  swap(a.iconUrl, b.iconUrl);
  swap(a.titleLink, b.titleLink);
  swap(a.iconLink, b.iconLink);
  swap(a.displayTemplate, b.displayTemplate);
  swap(a.additionalInfo, b.additionalInfo);
  swap(a.__isset, b.__isset);
}

SearchResultItem::SearchResultItem(const SearchResultItem& other196) {
  id = other196.id;
  ItemType = other196.ItemType;
  item = other196.item;
  title = other196.title;
  sub1 = other196.sub1;
  sub2 = other196.sub2;
  iconUrl = other196.iconUrl;
  titleLink = other196.titleLink;
  iconLink = other196.iconLink;
  displayTemplate = other196.displayTemplate;
  additionalInfo = other196.additionalInfo;
  __isset = other196.__isset;
}
SearchResultItem& SearchResultItem::operator=(const SearchResultItem& other197) {
  id = other197.id;
  ItemType = other197.ItemType;
  item = other197.item;
  title = other197.title;
  sub1 = other197.sub1;
  sub2 = other197.sub2;
  iconUrl = other197.iconUrl;
  titleLink = other197.titleLink;
  iconLink = other197.iconLink;
  displayTemplate = other197.displayTemplate;
  additionalInfo = other197.additionalInfo;
  __isset = other197.__isset;
  return *this;
}
void SearchResultItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SearchResultItem(";
  out << "id=" << to_string(id);
  out << ", " << "ItemType=" << to_string(ItemType);
  out << ", " << "item=" << to_string(item);
  out << ", " << "title=" << to_string(title);
  out << ", " << "sub1=" << to_string(sub1);
  out << ", " << "sub2=" << to_string(sub2);
  out << ", " << "iconUrl=" << to_string(iconUrl);
  out << ", " << "titleLink=" << to_string(titleLink);
  out << ", " << "iconLink=" << to_string(iconLink);
  out << ", " << "displayTemplate=" << to_string(displayTemplate);
  out << ", " << "additionalInfo=" << to_string(additionalInfo);
  out << ")";
}


SearchResultCollection::~SearchResultCollection() throw() {
}


void SearchResultCollection::__set_collection(const int32_t val) {
  this->collection = val;
}

void SearchResultCollection::__set_title(const std::string& val) {
  this->title = val;
}

void SearchResultCollection::__set_rank(const int32_t val) {
  this->rank = val;
}

void SearchResultCollection::__set_hits(const int32_t val) {
  this->hits = val;
}

void SearchResultCollection::__set_items(const std::vector<SearchResultItem> & val) {
  this->items = val;
}

void SearchResultCollection::__set_hasNext(const bool val) {
  this->hasNext = val;
}

void SearchResultCollection::__set_cat(const std::vector<int32_t> & val) {
  this->cat = val;
}

void SearchResultCollection::__set_error(const std::string& val) {
  this->error = val;
}

void SearchResultCollection::__set_tabTitle(const std::string& val) {
  this->tabTitle = val;
}

void SearchResultCollection::__set_start(const int32_t val) {
  this->start = val;
}

void SearchResultCollection::__set_length(const int32_t val) {
  this->length = val;
}

void SearchResultCollection::__set_squareCategoryId(const int32_t val) {
  this->squareCategoryId = val;
}
std::ostream& operator<<(std::ostream& out, const SearchResultCollection& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SearchResultCollection::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->collection);
          this->__isset.collection = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          this->__isset.title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rank);
          this->__isset.rank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hits);
          this->__isset.hits = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->items.clear();
            uint32_t _size198;
            ::apache::thrift::protocol::TType _etype201;
            xfer += iprot->readListBegin(_etype201, _size198);
            this->items.resize(_size198);
            uint32_t _i202;
            for (_i202 = 0; _i202 < _size198; ++_i202)
            {
              xfer += this->items[_i202].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.items = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasNext);
          this->__isset.hasNext = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->cat.clear();
            uint32_t _size203;
            ::apache::thrift::protocol::TType _etype206;
            xfer += iprot->readListBegin(_etype206, _size203);
            this->cat.resize(_size203);
            uint32_t _i207;
            for (_i207 = 0; _i207 < _size203; ++_i207)
            {
              xfer += iprot->readI32(this->cat[_i207]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.cat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tabTitle);
          this->__isset.tabTitle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->start);
          this->__isset.start = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->length);
          this->__isset.length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->squareCategoryId);
          this->__isset.squareCategoryId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SearchResultCollection::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SearchResultCollection");

  xfer += oprot->writeFieldBegin("collection", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->collection);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rank", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->rank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hits", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->hits);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("items", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->items.size()));
    std::vector<SearchResultItem> ::const_iterator _iter208;
    for (_iter208 = this->items.begin(); _iter208 != this->items.end(); ++_iter208)
    {
      xfer += (*_iter208).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hasNext", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->hasNext);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cat", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->cat.size()));
    std::vector<int32_t> ::const_iterator _iter209;
    for (_iter209 = this->cat.begin(); _iter209 != this->cat.end(); ++_iter209)
    {
      xfer += oprot->writeI32((*_iter209));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tabTitle", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->tabTitle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->start);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("length", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->length);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareCategoryId", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->squareCategoryId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SearchResultCollection &a, SearchResultCollection &b) {
  using ::std::swap;
  swap(a.collection, b.collection);
  swap(a.title, b.title);
  swap(a.rank, b.rank);
  swap(a.hits, b.hits);
  swap(a.items, b.items);
  swap(a.hasNext, b.hasNext);
  swap(a.cat, b.cat);
  swap(a.error, b.error);
  swap(a.tabTitle, b.tabTitle);
  swap(a.start, b.start);
  swap(a.length, b.length);
  swap(a.squareCategoryId, b.squareCategoryId);
  swap(a.__isset, b.__isset);
}

SearchResultCollection::SearchResultCollection(const SearchResultCollection& other210) {
  collection = other210.collection;
  title = other210.title;
  rank = other210.rank;
  hits = other210.hits;
  items = other210.items;
  hasNext = other210.hasNext;
  cat = other210.cat;
  error = other210.error;
  tabTitle = other210.tabTitle;
  start = other210.start;
  length = other210.length;
  squareCategoryId = other210.squareCategoryId;
  __isset = other210.__isset;
}
SearchResultCollection& SearchResultCollection::operator=(const SearchResultCollection& other211) {
  collection = other211.collection;
  title = other211.title;
  rank = other211.rank;
  hits = other211.hits;
  items = other211.items;
  hasNext = other211.hasNext;
  cat = other211.cat;
  error = other211.error;
  tabTitle = other211.tabTitle;
  start = other211.start;
  length = other211.length;
  squareCategoryId = other211.squareCategoryId;
  __isset = other211.__isset;
  return *this;
}
void SearchResultCollection::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SearchResultCollection(";
  out << "collection=" << to_string(collection);
  out << ", " << "title=" << to_string(title);
  out << ", " << "rank=" << to_string(rank);
  out << ", " << "hits=" << to_string(hits);
  out << ", " << "items=" << to_string(items);
  out << ", " << "hasNext=" << to_string(hasNext);
  out << ", " << "cat=" << to_string(cat);
  out << ", " << "error=" << to_string(error);
  out << ", " << "tabTitle=" << to_string(tabTitle);
  out << ", " << "start=" << to_string(start);
  out << ", " << "length=" << to_string(length);
  out << ", " << "squareCategoryId=" << to_string(squareCategoryId);
  out << ")";
}


SearchResult::~SearchResult() throw() {
}


void SearchResult::__set_sid(const std::string& val) {
  this->sid = val;
}

void SearchResult::__set_collections(const std::vector<SearchResultCollection> & val) {
  this->collections = val;
}

void SearchResult::__set_start(const int32_t val) {
  this->start = val;
}

void SearchResult::__set_length(const int32_t val) {
  this->length = val;
}
std::ostream& operator<<(std::ostream& out, const SearchResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SearchResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sid);
          this->__isset.sid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->collections.clear();
            uint32_t _size212;
            ::apache::thrift::protocol::TType _etype215;
            xfer += iprot->readListBegin(_etype215, _size212);
            this->collections.resize(_size212);
            uint32_t _i216;
            for (_i216 = 0; _i216 < _size212; ++_i216)
            {
              xfer += this->collections[_i216].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.collections = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->start);
          this->__isset.start = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->length);
          this->__isset.length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SearchResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SearchResult");

  xfer += oprot->writeFieldBegin("sid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->sid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("collections", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->collections.size()));
    std::vector<SearchResultCollection> ::const_iterator _iter217;
    for (_iter217 = this->collections.begin(); _iter217 != this->collections.end(); ++_iter217)
    {
      xfer += (*_iter217).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->start);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("length", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->length);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SearchResult &a, SearchResult &b) {
  using ::std::swap;
  swap(a.sid, b.sid);
  swap(a.collections, b.collections);
  swap(a.start, b.start);
  swap(a.length, b.length);
  swap(a.__isset, b.__isset);
}

SearchResult::SearchResult(const SearchResult& other218) {
  sid = other218.sid;
  collections = other218.collections;
  start = other218.start;
  length = other218.length;
  __isset = other218.__isset;
}
SearchResult& SearchResult::operator=(const SearchResult& other219) {
  sid = other219.sid;
  collections = other219.collections;
  start = other219.start;
  length = other219.length;
  __isset = other219.__isset;
  return *this;
}
void SearchResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SearchResult(";
  out << "sid=" << to_string(sid);
  out << ", " << "collections=" << to_string(collections);
  out << ", " << "start=" << to_string(start);
  out << ", " << "length=" << to_string(length);
  out << ")";
}


SearchCommonParameter::~SearchCommonParameter() throw() {
}


void SearchCommonParameter::__set_latitude(const double val) {
  this->latitude = val;
}

void SearchCommonParameter::__set_longitude(const double val) {
  this->longitude = val;
}

void SearchCommonParameter::__set_source(const std::string& val) {
  this->source = val;
}

void SearchCommonParameter::__set_region(const std::string& val) {
  this->region = val;
}

void SearchCommonParameter::__set_sid(const std::string& val) {
  this->sid = val;
}

void SearchCommonParameter::__set_queryType(const int32_t val) {
  this->queryType = val;
}
std::ostream& operator<<(std::ostream& out, const SearchCommonParameter& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SearchCommonParameter::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->latitude);
          this->__isset.latitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->longitude);
          this->__isset.longitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->source);
          this->__isset.source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->region);
          this->__isset.region = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sid);
          this->__isset.sid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->queryType);
          this->__isset.queryType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SearchCommonParameter::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SearchCommonParameter");

  xfer += oprot->writeFieldBegin("latitude", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->latitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("longitude", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->longitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("source", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->source);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("region", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->region);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sid", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->sid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("queryType", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->queryType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SearchCommonParameter &a, SearchCommonParameter &b) {
  using ::std::swap;
  swap(a.latitude, b.latitude);
  swap(a.longitude, b.longitude);
  swap(a.source, b.source);
  swap(a.region, b.region);
  swap(a.sid, b.sid);
  swap(a.queryType, b.queryType);
  swap(a.__isset, b.__isset);
}

SearchCommonParameter::SearchCommonParameter(const SearchCommonParameter& other220) {
  latitude = other220.latitude;
  longitude = other220.longitude;
  source = other220.source;
  region = other220.region;
  sid = other220.sid;
  queryType = other220.queryType;
  __isset = other220.__isset;
}
SearchCommonParameter& SearchCommonParameter::operator=(const SearchCommonParameter& other221) {
  latitude = other221.latitude;
  longitude = other221.longitude;
  source = other221.source;
  region = other221.region;
  sid = other221.sid;
  queryType = other221.queryType;
  __isset = other221.__isset;
  return *this;
}
void SearchCommonParameter::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SearchCommonParameter(";
  out << "latitude=" << to_string(latitude);
  out << ", " << "longitude=" << to_string(longitude);
  out << ", " << "source=" << to_string(source);
  out << ", " << "region=" << to_string(region);
  out << ", " << "sid=" << to_string(sid);
  out << ", " << "queryType=" << to_string(queryType);
  out << ")";
}


SearchPagingParameter::~SearchPagingParameter() throw() {
}


void SearchPagingParameter::__set_collection(const int32_t val) {
  this->collection = val;
}

void SearchPagingParameter::__set_start(const int32_t val) {
  this->start = val;
}

void SearchPagingParameter::__set_length(const int32_t val) {
  this->length = val;
}

void SearchPagingParameter::__set_commonParam(const SearchCommonParameter& val) {
  this->commonParam = val;
}
std::ostream& operator<<(std::ostream& out, const SearchPagingParameter& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SearchPagingParameter::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->collection);
          this->__isset.collection = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->start);
          this->__isset.start = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->length);
          this->__isset.length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->commonParam.read(iprot);
          this->__isset.commonParam = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SearchPagingParameter::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SearchPagingParameter");

  xfer += oprot->writeFieldBegin("collection", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->collection);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->start);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("length", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->length);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("commonParam", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->commonParam.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SearchPagingParameter &a, SearchPagingParameter &b) {
  using ::std::swap;
  swap(a.collection, b.collection);
  swap(a.start, b.start);
  swap(a.length, b.length);
  swap(a.commonParam, b.commonParam);
  swap(a.__isset, b.__isset);
}

SearchPagingParameter::SearchPagingParameter(const SearchPagingParameter& other222) {
  collection = other222.collection;
  start = other222.start;
  length = other222.length;
  commonParam = other222.commonParam;
  __isset = other222.__isset;
}
SearchPagingParameter& SearchPagingParameter::operator=(const SearchPagingParameter& other223) {
  collection = other223.collection;
  start = other223.start;
  length = other223.length;
  commonParam = other223.commonParam;
  __isset = other223.__isset;
  return *this;
}
void SearchPagingParameter::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SearchPagingParameter(";
  out << "collection=" << to_string(collection);
  out << ", " << "start=" << to_string(start);
  out << ", " << "length=" << to_string(length);
  out << ", " << "commonParam=" << to_string(commonParam);
  out << ")";
}


Location::~Location() throw() {
}


void Location::__set_title(const std::string& val) {
  this->title = val;
}

void Location::__set_address(const std::string& val) {
  this->address = val;
}

void Location::__set_latitude(const double val) {
  this->latitude = val;
}

void Location::__set_longitude(const double val) {
  this->longitude = val;
}

void Location::__set_phone(const std::string& val) {
  this->phone = val;
}
std::ostream& operator<<(std::ostream& out, const Location& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Location::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          this->__isset.title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->address);
          this->__isset.address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->latitude);
          this->__isset.latitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->longitude);
          this->__isset.longitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone);
          this->__isset.phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Location::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Location");

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("address", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->address);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("latitude", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->latitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("longitude", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->longitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phone", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Location &a, Location &b) {
  using ::std::swap;
  swap(a.title, b.title);
  swap(a.address, b.address);
  swap(a.latitude, b.latitude);
  swap(a.longitude, b.longitude);
  swap(a.phone, b.phone);
  swap(a.__isset, b.__isset);
}

Location::Location(const Location& other224) {
  title = other224.title;
  address = other224.address;
  latitude = other224.latitude;
  longitude = other224.longitude;
  phone = other224.phone;
  __isset = other224.__isset;
}
Location& Location::operator=(const Location& other225) {
  title = other225.title;
  address = other225.address;
  latitude = other225.latitude;
  longitude = other225.longitude;
  phone = other225.phone;
  __isset = other225.__isset;
  return *this;
}
void Location::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Location(";
  out << "title=" << to_string(title);
  out << ", " << "address=" << to_string(address);
  out << ", " << "latitude=" << to_string(latitude);
  out << ", " << "longitude=" << to_string(longitude);
  out << ", " << "phone=" << to_string(phone);
  out << ")";
}


MessageBoxV2MessageId::~MessageBoxV2MessageId() throw() {
}


void MessageBoxV2MessageId::__set_deliveredTime(const int64_t val) {
  this->deliveredTime = val;
}

void MessageBoxV2MessageId::__set_messageId(const int64_t val) {
  this->messageId = val;
}
std::ostream& operator<<(std::ostream& out, const MessageBoxV2MessageId& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t MessageBoxV2MessageId::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->deliveredTime);
          this->__isset.deliveredTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->messageId);
          this->__isset.messageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageBoxV2MessageId::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MessageBoxV2MessageId");

  xfer += oprot->writeFieldBegin("deliveredTime", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->deliveredTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->messageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageBoxV2MessageId &a, MessageBoxV2MessageId &b) {
  using ::std::swap;
  swap(a.deliveredTime, b.deliveredTime);
  swap(a.messageId, b.messageId);
  swap(a.__isset, b.__isset);
}

MessageBoxV2MessageId::MessageBoxV2MessageId(const MessageBoxV2MessageId& other226) {
  deliveredTime = other226.deliveredTime;
  messageId = other226.messageId;
  __isset = other226.__isset;
}
MessageBoxV2MessageId& MessageBoxV2MessageId::operator=(const MessageBoxV2MessageId& other227) {
  deliveredTime = other227.deliveredTime;
  messageId = other227.messageId;
  __isset = other227.__isset;
  return *this;
}
void MessageBoxV2MessageId::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MessageBoxV2MessageId(";
  out << "deliveredTime=" << to_string(deliveredTime);
  out << ", " << "messageId=" << to_string(messageId);
  out << ")";
}


MessageCommitResult::~MessageCommitResult() throw() {
}


void MessageCommitResult::__set_requestId(const std::string& val) {
  this->requestId = val;
}

void MessageCommitResult::__set_state(const BuddyResultState::type val) {
  this->state = val;
}

void MessageCommitResult::__set_messageStoreRequestId(const std::string& val) {
  this->messageStoreRequestId = val;
}

void MessageCommitResult::__set_messageIds(const std::vector<std::string> & val) {
  this->messageIds = val;
}

void MessageCommitResult::__set_receiverCount(const int64_t val) {
  this->receiverCount = val;
}

void MessageCommitResult::__set_successCount(const int64_t val) {
  this->successCount = val;
}

void MessageCommitResult::__set_failCount(const int64_t val) {
  this->failCount = val;
}

void MessageCommitResult::__set_blockCount(const int64_t val) {
  this->blockCount = val;
}

void MessageCommitResult::__set_unregisteredCount(const int64_t val) {
  this->unregisteredCount = val;
}

void MessageCommitResult::__set_unrelatedCount(const int64_t val) {
  this->unrelatedCount = val;
}

void MessageCommitResult::__set_errorDescription(const std::string& val) {
  this->errorDescription = val;
}
std::ostream& operator<<(std::ostream& out, const MessageCommitResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t MessageCommitResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->requestId);
          this->__isset.requestId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast228;
          xfer += iprot->readI32(ecast228);
          this->state = (BuddyResultState::type)ecast228;
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageStoreRequestId);
          this->__isset.messageStoreRequestId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->messageIds.clear();
            uint32_t _size229;
            ::apache::thrift::protocol::TType _etype232;
            xfer += iprot->readListBegin(_etype232, _size229);
            this->messageIds.resize(_size229);
            uint32_t _i233;
            for (_i233 = 0; _i233 < _size229; ++_i233)
            {
              xfer += iprot->readString(this->messageIds[_i233]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.messageIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->receiverCount);
          this->__isset.receiverCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->successCount);
          this->__isset.successCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->failCount);
          this->__isset.failCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->blockCount);
          this->__isset.blockCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->unregisteredCount);
          this->__isset.unregisteredCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->unrelatedCount);
          this->__isset.unrelatedCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errorDescription);
          this->__isset.errorDescription = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageCommitResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MessageCommitResult");

  xfer += oprot->writeFieldBegin("requestId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->requestId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageStoreRequestId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->messageStoreRequestId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageIds", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->messageIds.size()));
    std::vector<std::string> ::const_iterator _iter234;
    for (_iter234 = this->messageIds.begin(); _iter234 != this->messageIds.end(); ++_iter234)
    {
      xfer += oprot->writeString((*_iter234));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("receiverCount", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->receiverCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("successCount", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->successCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("failCount", ::apache::thrift::protocol::T_I64, 13);
  xfer += oprot->writeI64(this->failCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("blockCount", ::apache::thrift::protocol::T_I64, 14);
  xfer += oprot->writeI64(this->blockCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unregisteredCount", ::apache::thrift::protocol::T_I64, 15);
  xfer += oprot->writeI64(this->unregisteredCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unrelatedCount", ::apache::thrift::protocol::T_I64, 16);
  xfer += oprot->writeI64(this->unrelatedCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errorDescription", ::apache::thrift::protocol::T_STRING, 21);
  xfer += oprot->writeString(this->errorDescription);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageCommitResult &a, MessageCommitResult &b) {
  using ::std::swap;
  swap(a.requestId, b.requestId);
  swap(a.state, b.state);
  swap(a.messageStoreRequestId, b.messageStoreRequestId);
  swap(a.messageIds, b.messageIds);
  swap(a.receiverCount, b.receiverCount);
  swap(a.successCount, b.successCount);
  swap(a.failCount, b.failCount);
  swap(a.blockCount, b.blockCount);
  swap(a.unregisteredCount, b.unregisteredCount);
  swap(a.unrelatedCount, b.unrelatedCount);
  swap(a.errorDescription, b.errorDescription);
  swap(a.__isset, b.__isset);
}

MessageCommitResult::MessageCommitResult(const MessageCommitResult& other235) {
  requestId = other235.requestId;
  state = other235.state;
  messageStoreRequestId = other235.messageStoreRequestId;
  messageIds = other235.messageIds;
  receiverCount = other235.receiverCount;
  successCount = other235.successCount;
  failCount = other235.failCount;
  blockCount = other235.blockCount;
  unregisteredCount = other235.unregisteredCount;
  unrelatedCount = other235.unrelatedCount;
  errorDescription = other235.errorDescription;
  __isset = other235.__isset;
}
MessageCommitResult& MessageCommitResult::operator=(const MessageCommitResult& other236) {
  requestId = other236.requestId;
  state = other236.state;
  messageStoreRequestId = other236.messageStoreRequestId;
  messageIds = other236.messageIds;
  receiverCount = other236.receiverCount;
  successCount = other236.successCount;
  failCount = other236.failCount;
  blockCount = other236.blockCount;
  unregisteredCount = other236.unregisteredCount;
  unrelatedCount = other236.unrelatedCount;
  errorDescription = other236.errorDescription;
  __isset = other236.__isset;
  return *this;
}
void MessageCommitResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MessageCommitResult(";
  out << "requestId=" << to_string(requestId);
  out << ", " << "state=" << to_string(state);
  out << ", " << "messageStoreRequestId=" << to_string(messageStoreRequestId);
  out << ", " << "messageIds=" << to_string(messageIds);
  out << ", " << "receiverCount=" << to_string(receiverCount);
  out << ", " << "successCount=" << to_string(successCount);
  out << ", " << "failCount=" << to_string(failCount);
  out << ", " << "blockCount=" << to_string(blockCount);
  out << ", " << "unregisteredCount=" << to_string(unregisteredCount);
  out << ", " << "unrelatedCount=" << to_string(unrelatedCount);
  out << ", " << "errorDescription=" << to_string(errorDescription);
  out << ")";
}


CallHost::~CallHost() throw() {
}


void CallHost::__set_host(const std::string& val) {
  this->host = val;
}

void CallHost::__set_port(const int32_t val) {
  this->port = val;
}

void CallHost::__set_zone(const std::string& val) {
  this->zone = val;
}
std::ostream& operator<<(std::ostream& out, const CallHost& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CallHost::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->host);
          this->__isset.host = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->port);
          this->__isset.port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->zone);
          this->__isset.zone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CallHost::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CallHost");

  xfer += oprot->writeFieldBegin("host", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->host);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("port", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("zone", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->zone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CallHost &a, CallHost &b) {
  using ::std::swap;
  swap(a.host, b.host);
  swap(a.port, b.port);
  swap(a.zone, b.zone);
  swap(a.__isset, b.__isset);
}

CallHost::CallHost(const CallHost& other237) {
  host = other237.host;
  port = other237.port;
  zone = other237.zone;
  __isset = other237.__isset;
}
CallHost& CallHost::operator=(const CallHost& other238) {
  host = other238.host;
  port = other238.port;
  zone = other238.zone;
  __isset = other238.__isset;
  return *this;
}
void CallHost::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CallHost(";
  out << "host=" << to_string(host);
  out << ", " << "port=" << to_string(port);
  out << ", " << "zone=" << to_string(zone);
  out << ")";
}


AgeCheckDocomoResult::~AgeCheckDocomoResult() throw() {
}


void AgeCheckDocomoResult::__set_authUrl(const std::string& val) {
  this->authUrl = val;
}

void AgeCheckDocomoResult::__set_userAgeType(const UserAgeType::type val) {
  this->userAgeType = val;
}
std::ostream& operator<<(std::ostream& out, const AgeCheckDocomoResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AgeCheckDocomoResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->authUrl);
          this->__isset.authUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast239;
          xfer += iprot->readI32(ecast239);
          this->userAgeType = (UserAgeType::type)ecast239;
          this->__isset.userAgeType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AgeCheckDocomoResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AgeCheckDocomoResult");

  xfer += oprot->writeFieldBegin("authUrl", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->authUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userAgeType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->userAgeType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AgeCheckDocomoResult &a, AgeCheckDocomoResult &b) {
  using ::std::swap;
  swap(a.authUrl, b.authUrl);
  swap(a.userAgeType, b.userAgeType);
  swap(a.__isset, b.__isset);
}

AgeCheckDocomoResult::AgeCheckDocomoResult(const AgeCheckDocomoResult& other240) {
  authUrl = other240.authUrl;
  userAgeType = other240.userAgeType;
  __isset = other240.__isset;
}
AgeCheckDocomoResult& AgeCheckDocomoResult::operator=(const AgeCheckDocomoResult& other241) {
  authUrl = other241.authUrl;
  userAgeType = other241.userAgeType;
  __isset = other241.__isset;
  return *this;
}
void AgeCheckDocomoResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AgeCheckDocomoResult(";
  out << "authUrl=" << to_string(authUrl);
  out << ", " << "userAgeType=" << to_string(userAgeType);
  out << ")";
}


AgeCheckRequestResult::~AgeCheckRequestResult() throw() {
}


void AgeCheckRequestResult::__set_authUrl(const std::string& val) {
  this->authUrl = val;
}

void AgeCheckRequestResult::__set_sessionId(const std::string& val) {
  this->sessionId = val;
}
std::ostream& operator<<(std::ostream& out, const AgeCheckRequestResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AgeCheckRequestResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->authUrl);
          this->__isset.authUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sessionId);
          this->__isset.sessionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AgeCheckRequestResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AgeCheckRequestResult");

  xfer += oprot->writeFieldBegin("authUrl", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->authUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sessionId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->sessionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AgeCheckRequestResult &a, AgeCheckRequestResult &b) {
  using ::std::swap;
  swap(a.authUrl, b.authUrl);
  swap(a.sessionId, b.sessionId);
  swap(a.__isset, b.__isset);
}

AgeCheckRequestResult::AgeCheckRequestResult(const AgeCheckRequestResult& other242) {
  authUrl = other242.authUrl;
  sessionId = other242.sessionId;
  __isset = other242.__isset;
}
AgeCheckRequestResult& AgeCheckRequestResult::operator=(const AgeCheckRequestResult& other243) {
  authUrl = other243.authUrl;
  sessionId = other243.sessionId;
  __isset = other243.__isset;
  return *this;
}
void AgeCheckRequestResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AgeCheckRequestResult(";
  out << "authUrl=" << to_string(authUrl);
  out << ", " << "sessionId=" << to_string(sessionId);
  out << ")";
}


TextMessageAnnouncementContents::~TextMessageAnnouncementContents() throw() {
}


void TextMessageAnnouncementContents::__set_messageId(const std::string& val) {
  this->messageId = val;
}

void TextMessageAnnouncementContents::__set_text(const std::string& val) {
  this->text = val;
}

void TextMessageAnnouncementContents::__set_senderSquareMemberMid(const std::string& val) {
  this->senderSquareMemberMid = val;
}

void TextMessageAnnouncementContents::__set_createdAt(const int64_t val) {
  this->createdAt = val;
}
std::ostream& operator<<(std::ostream& out, const TextMessageAnnouncementContents& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TextMessageAnnouncementContents::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageId);
          this->__isset.messageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->text);
          this->__isset.text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->senderSquareMemberMid);
          this->__isset.senderSquareMemberMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createdAt);
          this->__isset.createdAt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TextMessageAnnouncementContents::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TextMessageAnnouncementContents");

  xfer += oprot->writeFieldBegin("messageId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->messageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("senderSquareMemberMid", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->senderSquareMemberMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createdAt", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->createdAt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TextMessageAnnouncementContents &a, TextMessageAnnouncementContents &b) {
  using ::std::swap;
  swap(a.messageId, b.messageId);
  swap(a.text, b.text);
  swap(a.senderSquareMemberMid, b.senderSquareMemberMid);
  swap(a.createdAt, b.createdAt);
  swap(a.__isset, b.__isset);
}

TextMessageAnnouncementContents::TextMessageAnnouncementContents(const TextMessageAnnouncementContents& other244) {
  messageId = other244.messageId;
  text = other244.text;
  senderSquareMemberMid = other244.senderSquareMemberMid;
  createdAt = other244.createdAt;
  __isset = other244.__isset;
}
TextMessageAnnouncementContents& TextMessageAnnouncementContents::operator=(const TextMessageAnnouncementContents& other245) {
  messageId = other245.messageId;
  text = other245.text;
  senderSquareMemberMid = other245.senderSquareMemberMid;
  createdAt = other245.createdAt;
  __isset = other245.__isset;
  return *this;
}
void TextMessageAnnouncementContents::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TextMessageAnnouncementContents(";
  out << "messageId=" << to_string(messageId);
  out << ", " << "text=" << to_string(text);
  out << ", " << "senderSquareMemberMid=" << to_string(senderSquareMemberMid);
  out << ", " << "createdAt=" << to_string(createdAt);
  out << ")";
}


SquareChatAnnouncementContents::~SquareChatAnnouncementContents() throw() {
}


void SquareChatAnnouncementContents::__set_textMessageAnnouncementContents(const TextMessageAnnouncementContents& val) {
  this->textMessageAnnouncementContents = val;
}
std::ostream& operator<<(std::ostream& out, const SquareChatAnnouncementContents& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareChatAnnouncementContents::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->textMessageAnnouncementContents.read(iprot);
          this->__isset.textMessageAnnouncementContents = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareChatAnnouncementContents::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareChatAnnouncementContents");

  xfer += oprot->writeFieldBegin("textMessageAnnouncementContents", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->textMessageAnnouncementContents.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareChatAnnouncementContents &a, SquareChatAnnouncementContents &b) {
  using ::std::swap;
  swap(a.textMessageAnnouncementContents, b.textMessageAnnouncementContents);
  swap(a.__isset, b.__isset);
}

SquareChatAnnouncementContents::SquareChatAnnouncementContents(const SquareChatAnnouncementContents& other246) {
  textMessageAnnouncementContents = other246.textMessageAnnouncementContents;
  __isset = other246.__isset;
}
SquareChatAnnouncementContents& SquareChatAnnouncementContents::operator=(const SquareChatAnnouncementContents& other247) {
  textMessageAnnouncementContents = other247.textMessageAnnouncementContents;
  __isset = other247.__isset;
  return *this;
}
void SquareChatAnnouncementContents::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareChatAnnouncementContents(";
  out << "textMessageAnnouncementContents=" << to_string(textMessageAnnouncementContents);
  out << ")";
}


SquareChatAnnouncement::~SquareChatAnnouncement() throw() {
}


void SquareChatAnnouncement::__set_announcementSeq(const int64_t val) {
  this->announcementSeq = val;
}

void SquareChatAnnouncement::__set_type(const SquareChatAnnouncementType::type val) {
  this->type = val;
}

void SquareChatAnnouncement::__set_contents(const SquareChatAnnouncementContents& val) {
  this->contents = val;
}
std::ostream& operator<<(std::ostream& out, const SquareChatAnnouncement& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareChatAnnouncement::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->announcementSeq);
          this->__isset.announcementSeq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast248;
          xfer += iprot->readI32(ecast248);
          this->type = (SquareChatAnnouncementType::type)ecast248;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->contents.read(iprot);
          this->__isset.contents = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareChatAnnouncement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareChatAnnouncement");

  xfer += oprot->writeFieldBegin("announcementSeq", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->announcementSeq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contents", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->contents.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareChatAnnouncement &a, SquareChatAnnouncement &b) {
  using ::std::swap;
  swap(a.announcementSeq, b.announcementSeq);
  swap(a.type, b.type);
  swap(a.contents, b.contents);
  swap(a.__isset, b.__isset);
}

SquareChatAnnouncement::SquareChatAnnouncement(const SquareChatAnnouncement& other249) {
  announcementSeq = other249.announcementSeq;
  type = other249.type;
  contents = other249.contents;
  __isset = other249.__isset;
}
SquareChatAnnouncement& SquareChatAnnouncement::operator=(const SquareChatAnnouncement& other250) {
  announcementSeq = other250.announcementSeq;
  type = other250.type;
  contents = other250.contents;
  __isset = other250.__isset;
  return *this;
}
void SquareChatAnnouncement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareChatAnnouncement(";
  out << "announcementSeq=" << to_string(announcementSeq);
  out << ", " << "type=" << to_string(type);
  out << ", " << "contents=" << to_string(contents);
  out << ")";
}


Announcement::~Announcement() throw() {
}


void Announcement::__set_index(const int32_t val) {
  this->index = val;
}

void Announcement::__set_forceUpdate(const bool val) {
  this->forceUpdate = val;
}

void Announcement::__set_title(const std::string& val) {
  this->title = val;
}

void Announcement::__set_text(const std::string& val) {
  this->text = val;
}

void Announcement::__set_createdTime(const int64_t val) {
  this->createdTime = val;
}

void Announcement::__set_pictureUrl(const std::string& val) {
  this->pictureUrl = val;
}

void Announcement::__set_thumbnailUrl(const std::string& val) {
  this->thumbnailUrl = val;
}
std::ostream& operator<<(std::ostream& out, const Announcement& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Announcement::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->forceUpdate);
          this->__isset.forceUpdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          this->__isset.title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->text);
          this->__isset.text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createdTime);
          this->__isset.createdTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pictureUrl);
          this->__isset.pictureUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->thumbnailUrl);
          this->__isset.thumbnailUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Announcement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Announcement");

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("forceUpdate", ::apache::thrift::protocol::T_BOOL, 10);
  xfer += oprot->writeBool(this->forceUpdate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("text", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createdTime", ::apache::thrift::protocol::T_I64, 13);
  xfer += oprot->writeI64(this->createdTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pictureUrl", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->pictureUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thumbnailUrl", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->thumbnailUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Announcement &a, Announcement &b) {
  using ::std::swap;
  swap(a.index, b.index);
  swap(a.forceUpdate, b.forceUpdate);
  swap(a.title, b.title);
  swap(a.text, b.text);
  swap(a.createdTime, b.createdTime);
  swap(a.pictureUrl, b.pictureUrl);
  swap(a.thumbnailUrl, b.thumbnailUrl);
  swap(a.__isset, b.__isset);
}

Announcement::Announcement(const Announcement& other251) {
  index = other251.index;
  forceUpdate = other251.forceUpdate;
  title = other251.title;
  text = other251.text;
  createdTime = other251.createdTime;
  pictureUrl = other251.pictureUrl;
  thumbnailUrl = other251.thumbnailUrl;
  __isset = other251.__isset;
}
Announcement& Announcement::operator=(const Announcement& other252) {
  index = other252.index;
  forceUpdate = other252.forceUpdate;
  title = other252.title;
  text = other252.text;
  createdTime = other252.createdTime;
  pictureUrl = other252.pictureUrl;
  thumbnailUrl = other252.thumbnailUrl;
  __isset = other252.__isset;
  return *this;
}
void Announcement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Announcement(";
  out << "index=" << to_string(index);
  out << ", " << "forceUpdate=" << to_string(forceUpdate);
  out << ", " << "title=" << to_string(title);
  out << ", " << "text=" << to_string(text);
  out << ", " << "createdTime=" << to_string(createdTime);
  out << ", " << "pictureUrl=" << to_string(pictureUrl);
  out << ", " << "thumbnailUrl=" << to_string(thumbnailUrl);
  out << ")";
}


ChannelProvider::~ChannelProvider() throw() {
}


void ChannelProvider::__set_name(const std::string& val) {
  this->name = val;
}
std::ostream& operator<<(std::ostream& out, const ChannelProvider& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ChannelProvider::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ChannelProvider::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ChannelProvider");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ChannelProvider &a, ChannelProvider &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

ChannelProvider::ChannelProvider(const ChannelProvider& other253) {
  name = other253.name;
  __isset = other253.__isset;
}
ChannelProvider& ChannelProvider::operator=(const ChannelProvider& other254) {
  name = other254.name;
  __isset = other254.__isset;
  return *this;
}
void ChannelProvider::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ChannelProvider(";
  out << "name=" << to_string(name);
  out << ")";
}


E2EEPublicKey::~E2EEPublicKey() throw() {
}


void E2EEPublicKey::__set_version(const int32_t val) {
  this->version = val;
}

void E2EEPublicKey::__set_keyId(const int32_t val) {
  this->keyId = val;
}

void E2EEPublicKey::__set_keyData(const std::string& val) {
  this->keyData = val;
}

void E2EEPublicKey::__set_createdTime(const int64_t val) {
  this->createdTime = val;
}
std::ostream& operator<<(std::ostream& out, const E2EEPublicKey& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t E2EEPublicKey::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->keyId);
          this->__isset.keyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->keyData);
          this->__isset.keyData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createdTime);
          this->__isset.createdTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t E2EEPublicKey::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("E2EEPublicKey");

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("keyId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->keyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("keyData", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeBinary(this->keyData);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createdTime", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->createdTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(E2EEPublicKey &a, E2EEPublicKey &b) {
  using ::std::swap;
  swap(a.version, b.version);
  swap(a.keyId, b.keyId);
  swap(a.keyData, b.keyData);
  swap(a.createdTime, b.createdTime);
  swap(a.__isset, b.__isset);
}

E2EEPublicKey::E2EEPublicKey(const E2EEPublicKey& other255) {
  version = other255.version;
  keyId = other255.keyId;
  keyData = other255.keyData;
  createdTime = other255.createdTime;
  __isset = other255.__isset;
}
E2EEPublicKey& E2EEPublicKey::operator=(const E2EEPublicKey& other256) {
  version = other256.version;
  keyId = other256.keyId;
  keyData = other256.keyData;
  createdTime = other256.createdTime;
  __isset = other256.__isset;
  return *this;
}
void E2EEPublicKey::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "E2EEPublicKey(";
  out << "version=" << to_string(version);
  out << ", " << "keyId=" << to_string(keyId);
  out << ", " << "keyData=" << to_string(keyData);
  out << ", " << "createdTime=" << to_string(createdTime);
  out << ")";
}


ChannelDomain::~ChannelDomain() throw() {
}


void ChannelDomain::__set_host(const std::string& val) {
  this->host = val;
}

void ChannelDomain::__set_removed(const bool val) {
  this->removed = val;
}
std::ostream& operator<<(std::ostream& out, const ChannelDomain& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ChannelDomain::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->host);
          this->__isset.host = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->removed);
          this->__isset.removed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ChannelDomain::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ChannelDomain");

  xfer += oprot->writeFieldBegin("host", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->host);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("removed", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->removed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ChannelDomain &a, ChannelDomain &b) {
  using ::std::swap;
  swap(a.host, b.host);
  swap(a.removed, b.removed);
  swap(a.__isset, b.__isset);
}

ChannelDomain::ChannelDomain(const ChannelDomain& other257) {
  host = other257.host;
  removed = other257.removed;
  __isset = other257.__isset;
}
ChannelDomain& ChannelDomain::operator=(const ChannelDomain& other258) {
  host = other258.host;
  removed = other258.removed;
  __isset = other258.__isset;
  return *this;
}
void ChannelDomain::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ChannelDomain(";
  out << "host=" << to_string(host);
  out << ", " << "removed=" << to_string(removed);
  out << ")";
}


E2EENegotiationResult::~E2EENegotiationResult() throw() {
}


void E2EENegotiationResult::__set_allowedTypes(const std::set<ContentType::type> & val) {
  this->allowedTypes = val;
}

void E2EENegotiationResult::__set_publicKey(const E2EEPublicKey& val) {
  this->publicKey = val;
}
std::ostream& operator<<(std::ostream& out, const E2EENegotiationResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t E2EENegotiationResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->allowedTypes.clear();
            uint32_t _size259;
            ::apache::thrift::protocol::TType _etype262;
            xfer += iprot->readSetBegin(_etype262, _size259);
            uint32_t _i263;
            for (_i263 = 0; _i263 < _size259; ++_i263)
            {
              ContentType::type _elem264;
              int32_t ecast265;
              xfer += iprot->readI32(ecast265);
              _elem264 = (ContentType::type)ecast265;
              this->allowedTypes.insert(_elem264);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.allowedTypes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->publicKey.read(iprot);
          this->__isset.publicKey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t E2EENegotiationResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("E2EENegotiationResult");

  xfer += oprot->writeFieldBegin("allowedTypes", ::apache::thrift::protocol::T_SET, 1);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->allowedTypes.size()));
    std::set<ContentType::type> ::const_iterator _iter266;
    for (_iter266 = this->allowedTypes.begin(); _iter266 != this->allowedTypes.end(); ++_iter266)
    {
      xfer += oprot->writeI32((int32_t)(*_iter266));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("publicKey", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->publicKey.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(E2EENegotiationResult &a, E2EENegotiationResult &b) {
  using ::std::swap;
  swap(a.allowedTypes, b.allowedTypes);
  swap(a.publicKey, b.publicKey);
  swap(a.__isset, b.__isset);
}

E2EENegotiationResult::E2EENegotiationResult(const E2EENegotiationResult& other267) {
  allowedTypes = other267.allowedTypes;
  publicKey = other267.publicKey;
  __isset = other267.__isset;
}
E2EENegotiationResult& E2EENegotiationResult::operator=(const E2EENegotiationResult& other268) {
  allowedTypes = other268.allowedTypes;
  publicKey = other268.publicKey;
  __isset = other268.__isset;
  return *this;
}
void E2EENegotiationResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "E2EENegotiationResult(";
  out << "allowedTypes=" << to_string(allowedTypes);
  out << ", " << "publicKey=" << to_string(publicKey);
  out << ")";
}


OTPResult::~OTPResult() throw() {
}


void OTPResult::__set_otpId(const std::string& val) {
  this->otpId = val;
}

void OTPResult::__set_otp(const std::string& val) {
  this->otp = val;
}
std::ostream& operator<<(std::ostream& out, const OTPResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t OTPResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->otpId);
          this->__isset.otpId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->otp);
          this->__isset.otp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OTPResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("OTPResult");

  xfer += oprot->writeFieldBegin("otpId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->otpId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("otp", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->otp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(OTPResult &a, OTPResult &b) {
  using ::std::swap;
  swap(a.otpId, b.otpId);
  swap(a.otp, b.otp);
  swap(a.__isset, b.__isset);
}

OTPResult::OTPResult(const OTPResult& other269) {
  otpId = other269.otpId;
  otp = other269.otp;
  __isset = other269.__isset;
}
OTPResult& OTPResult::operator=(const OTPResult& other270) {
  otpId = other270.otpId;
  otp = other270.otp;
  __isset = other270.__isset;
  return *this;
}
void OTPResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "OTPResult(";
  out << "otpId=" << to_string(otpId);
  out << ", " << "otp=" << to_string(otp);
  out << ")";
}


Square::~Square() throw() {
}


void Square::__set_mid(const std::string& val) {
  this->mid = val;
}

void Square::__set_name(const std::string& val) {
  this->name = val;
}

void Square::__set_welcomeMessage(const std::string& val) {
  this->welcomeMessage = val;
}

void Square::__set_profileImageObsHash(const std::string& val) {
  this->profileImageObsHash = val;
}

void Square::__set_desc(const std::string& val) {
  this->desc = val;
}

void Square::__set_searchable(const bool val) {
  this->searchable = val;
}

void Square::__set_type(const SquareType::type val) {
  this->type = val;
}

void Square::__set_categoryID(const int32_t val) {
  this->categoryID = val;
}

void Square::__set_invitationURL(const std::string& val) {
  this->invitationURL = val;
}

void Square::__set_revision(const int64_t val) {
  this->revision = val;
}

void Square::__set_ableToUseInvitationTicket(const bool val) {
  this->ableToUseInvitationTicket = val;
}

void Square::__set_state(const SquareState::type val) {
  this->state = val;
}
std::ostream& operator<<(std::ostream& out, const Square& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Square::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mid);
          this->__isset.mid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->welcomeMessage);
          this->__isset.welcomeMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->profileImageObsHash);
          this->__isset.profileImageObsHash = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->desc);
          this->__isset.desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->searchable);
          this->__isset.searchable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast271;
          xfer += iprot->readI32(ecast271);
          this->type = (SquareType::type)ecast271;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->categoryID);
          this->__isset.categoryID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->invitationURL);
          this->__isset.invitationURL = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->revision);
          this->__isset.revision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ableToUseInvitationTicket);
          this->__isset.ableToUseInvitationTicket = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast272;
          xfer += iprot->readI32(ecast272);
          this->state = (SquareState::type)ecast272;
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Square::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Square");

  xfer += oprot->writeFieldBegin("mid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->mid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("welcomeMessage", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->welcomeMessage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("profileImageObsHash", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->profileImageObsHash);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("desc", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->desc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("searchable", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->searchable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("categoryID", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->categoryID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("invitationURL", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->invitationURL);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("revision", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->revision);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ableToUseInvitationTicket", ::apache::thrift::protocol::T_BOOL, 11);
  xfer += oprot->writeBool(this->ableToUseInvitationTicket);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Square &a, Square &b) {
  using ::std::swap;
  swap(a.mid, b.mid);
  swap(a.name, b.name);
  swap(a.welcomeMessage, b.welcomeMessage);
  swap(a.profileImageObsHash, b.profileImageObsHash);
  swap(a.desc, b.desc);
  swap(a.searchable, b.searchable);
  swap(a.type, b.type);
  swap(a.categoryID, b.categoryID);
  swap(a.invitationURL, b.invitationURL);
  swap(a.revision, b.revision);
  swap(a.ableToUseInvitationTicket, b.ableToUseInvitationTicket);
  swap(a.state, b.state);
  swap(a.__isset, b.__isset);
}

Square::Square(const Square& other273) {
  mid = other273.mid;
  name = other273.name;
  welcomeMessage = other273.welcomeMessage;
  profileImageObsHash = other273.profileImageObsHash;
  desc = other273.desc;
  searchable = other273.searchable;
  type = other273.type;
  categoryID = other273.categoryID;
  invitationURL = other273.invitationURL;
  revision = other273.revision;
  ableToUseInvitationTicket = other273.ableToUseInvitationTicket;
  state = other273.state;
  __isset = other273.__isset;
}
Square& Square::operator=(const Square& other274) {
  mid = other274.mid;
  name = other274.name;
  welcomeMessage = other274.welcomeMessage;
  profileImageObsHash = other274.profileImageObsHash;
  desc = other274.desc;
  searchable = other274.searchable;
  type = other274.type;
  categoryID = other274.categoryID;
  invitationURL = other274.invitationURL;
  revision = other274.revision;
  ableToUseInvitationTicket = other274.ableToUseInvitationTicket;
  state = other274.state;
  __isset = other274.__isset;
  return *this;
}
void Square::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Square(";
  out << "mid=" << to_string(mid);
  out << ", " << "name=" << to_string(name);
  out << ", " << "welcomeMessage=" << to_string(welcomeMessage);
  out << ", " << "profileImageObsHash=" << to_string(profileImageObsHash);
  out << ", " << "desc=" << to_string(desc);
  out << ", " << "searchable=" << to_string(searchable);
  out << ", " << "type=" << to_string(type);
  out << ", " << "categoryID=" << to_string(categoryID);
  out << ", " << "invitationURL=" << to_string(invitationURL);
  out << ", " << "revision=" << to_string(revision);
  out << ", " << "ableToUseInvitationTicket=" << to_string(ableToUseInvitationTicket);
  out << ", " << "state=" << to_string(state);
  out << ")";
}


SquareAuthority::~SquareAuthority() throw() {
}


void SquareAuthority::__set_squareMid(const std::string& val) {
  this->squareMid = val;
}

void SquareAuthority::__set_updateSquareProfile(const SquareMemberRole::type val) {
  this->updateSquareProfile = val;
}

void SquareAuthority::__set_inviteNewMember(const SquareMemberRole::type val) {
  this->inviteNewMember = val;
}

void SquareAuthority::__set_approveJoinRequest(const SquareMemberRole::type val) {
  this->approveJoinRequest = val;
}

void SquareAuthority::__set_createPost(const SquareMemberRole::type val) {
  this->createPost = val;
}

void SquareAuthority::__set_createOpenSquareChat(const SquareMemberRole::type val) {
  this->createOpenSquareChat = val;
}

void SquareAuthority::__set_deleteSquareChatOrPost(const SquareMemberRole::type val) {
  this->deleteSquareChatOrPost = val;
}

void SquareAuthority::__set_removeSquareMember(const SquareMemberRole::type val) {
  this->removeSquareMember = val;
}

void SquareAuthority::__set_grantRole(const SquareMemberRole::type val) {
  this->grantRole = val;
}

void SquareAuthority::__set_enableInvitationTicket(const SquareMemberRole::type val) {
  this->enableInvitationTicket = val;
}

void SquareAuthority::__set_revision(const int64_t val) {
  this->revision = val;
}
std::ostream& operator<<(std::ostream& out, const SquareAuthority& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareAuthority::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMid);
          this->__isset.squareMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast275;
          xfer += iprot->readI32(ecast275);
          this->updateSquareProfile = (SquareMemberRole::type)ecast275;
          this->__isset.updateSquareProfile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast276;
          xfer += iprot->readI32(ecast276);
          this->inviteNewMember = (SquareMemberRole::type)ecast276;
          this->__isset.inviteNewMember = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast277;
          xfer += iprot->readI32(ecast277);
          this->approveJoinRequest = (SquareMemberRole::type)ecast277;
          this->__isset.approveJoinRequest = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast278;
          xfer += iprot->readI32(ecast278);
          this->createPost = (SquareMemberRole::type)ecast278;
          this->__isset.createPost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast279;
          xfer += iprot->readI32(ecast279);
          this->createOpenSquareChat = (SquareMemberRole::type)ecast279;
          this->__isset.createOpenSquareChat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast280;
          xfer += iprot->readI32(ecast280);
          this->deleteSquareChatOrPost = (SquareMemberRole::type)ecast280;
          this->__isset.deleteSquareChatOrPost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast281;
          xfer += iprot->readI32(ecast281);
          this->removeSquareMember = (SquareMemberRole::type)ecast281;
          this->__isset.removeSquareMember = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast282;
          xfer += iprot->readI32(ecast282);
          this->grantRole = (SquareMemberRole::type)ecast282;
          this->__isset.grantRole = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast283;
          xfer += iprot->readI32(ecast283);
          this->enableInvitationTicket = (SquareMemberRole::type)ecast283;
          this->__isset.enableInvitationTicket = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->revision);
          this->__isset.revision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareAuthority::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareAuthority");

  xfer += oprot->writeFieldBegin("squareMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("updateSquareProfile", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->updateSquareProfile);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inviteNewMember", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->inviteNewMember);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("approveJoinRequest", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->approveJoinRequest);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createPost", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->createPost);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createOpenSquareChat", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->createOpenSquareChat);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("deleteSquareChatOrPost", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->deleteSquareChatOrPost);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("removeSquareMember", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32((int32_t)this->removeSquareMember);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("grantRole", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32((int32_t)this->grantRole);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enableInvitationTicket", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32((int32_t)this->enableInvitationTicket);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("revision", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->revision);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareAuthority &a, SquareAuthority &b) {
  using ::std::swap;
  swap(a.squareMid, b.squareMid);
  swap(a.updateSquareProfile, b.updateSquareProfile);
  swap(a.inviteNewMember, b.inviteNewMember);
  swap(a.approveJoinRequest, b.approveJoinRequest);
  swap(a.createPost, b.createPost);
  swap(a.createOpenSquareChat, b.createOpenSquareChat);
  swap(a.deleteSquareChatOrPost, b.deleteSquareChatOrPost);
  swap(a.removeSquareMember, b.removeSquareMember);
  swap(a.grantRole, b.grantRole);
  swap(a.enableInvitationTicket, b.enableInvitationTicket);
  swap(a.revision, b.revision);
  swap(a.__isset, b.__isset);
}

SquareAuthority::SquareAuthority(const SquareAuthority& other284) {
  squareMid = other284.squareMid;
  updateSquareProfile = other284.updateSquareProfile;
  inviteNewMember = other284.inviteNewMember;
  approveJoinRequest = other284.approveJoinRequest;
  createPost = other284.createPost;
  createOpenSquareChat = other284.createOpenSquareChat;
  deleteSquareChatOrPost = other284.deleteSquareChatOrPost;
  removeSquareMember = other284.removeSquareMember;
  grantRole = other284.grantRole;
  enableInvitationTicket = other284.enableInvitationTicket;
  revision = other284.revision;
  __isset = other284.__isset;
}
SquareAuthority& SquareAuthority::operator=(const SquareAuthority& other285) {
  squareMid = other285.squareMid;
  updateSquareProfile = other285.updateSquareProfile;
  inviteNewMember = other285.inviteNewMember;
  approveJoinRequest = other285.approveJoinRequest;
  createPost = other285.createPost;
  createOpenSquareChat = other285.createOpenSquareChat;
  deleteSquareChatOrPost = other285.deleteSquareChatOrPost;
  removeSquareMember = other285.removeSquareMember;
  grantRole = other285.grantRole;
  enableInvitationTicket = other285.enableInvitationTicket;
  revision = other285.revision;
  __isset = other285.__isset;
  return *this;
}
void SquareAuthority::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareAuthority(";
  out << "squareMid=" << to_string(squareMid);
  out << ", " << "updateSquareProfile=" << to_string(updateSquareProfile);
  out << ", " << "inviteNewMember=" << to_string(inviteNewMember);
  out << ", " << "approveJoinRequest=" << to_string(approveJoinRequest);
  out << ", " << "createPost=" << to_string(createPost);
  out << ", " << "createOpenSquareChat=" << to_string(createOpenSquareChat);
  out << ", " << "deleteSquareChatOrPost=" << to_string(deleteSquareChatOrPost);
  out << ", " << "removeSquareMember=" << to_string(removeSquareMember);
  out << ", " << "grantRole=" << to_string(grantRole);
  out << ", " << "enableInvitationTicket=" << to_string(enableInvitationTicket);
  out << ", " << "revision=" << to_string(revision);
  out << ")";
}


SquarePreference::~SquarePreference() throw() {
}


void SquarePreference::__set_favoriteTimestamp(const int64_t val) {
  this->favoriteTimestamp = val;
}

void SquarePreference::__set_notiForNewJoinRequest(const bool val) {
  this->notiForNewJoinRequest = val;
}
std::ostream& operator<<(std::ostream& out, const SquarePreference& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquarePreference::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->favoriteTimestamp);
          this->__isset.favoriteTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->notiForNewJoinRequest);
          this->__isset.notiForNewJoinRequest = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquarePreference::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquarePreference");

  xfer += oprot->writeFieldBegin("favoriteTimestamp", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->favoriteTimestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notiForNewJoinRequest", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->notiForNewJoinRequest);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquarePreference &a, SquarePreference &b) {
  using ::std::swap;
  swap(a.favoriteTimestamp, b.favoriteTimestamp);
  swap(a.notiForNewJoinRequest, b.notiForNewJoinRequest);
  swap(a.__isset, b.__isset);
}

SquarePreference::SquarePreference(const SquarePreference& other286) {
  favoriteTimestamp = other286.favoriteTimestamp;
  notiForNewJoinRequest = other286.notiForNewJoinRequest;
  __isset = other286.__isset;
}
SquarePreference& SquarePreference::operator=(const SquarePreference& other287) {
  favoriteTimestamp = other287.favoriteTimestamp;
  notiForNewJoinRequest = other287.notiForNewJoinRequest;
  __isset = other287.__isset;
  return *this;
}
void SquarePreference::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquarePreference(";
  out << "favoriteTimestamp=" << to_string(favoriteTimestamp);
  out << ", " << "notiForNewJoinRequest=" << to_string(notiForNewJoinRequest);
  out << ")";
}


SquareMember::~SquareMember() throw() {
}


void SquareMember::__set_squareMemberMid(const std::string& val) {
  this->squareMemberMid = val;
}

void SquareMember::__set_squareMid(const std::string& val) {
  this->squareMid = val;
}

void SquareMember::__set_displayName(const std::string& val) {
  this->displayName = val;
}

void SquareMember::__set_profileImageObsHash(const std::string& val) {
  this->profileImageObsHash = val;
}

void SquareMember::__set_ableToReceiveMessage(const bool val) {
  this->ableToReceiveMessage = val;
}

void SquareMember::__set_membershipState(const SquareMembershipState::type val) {
  this->membershipState = val;
}

void SquareMember::__set_role(const SquareMemberRole::type val) {
  this->role = val;
}

void SquareMember::__set_revision(const int64_t val) {
  this->revision = val;
}

void SquareMember::__set_preference(const SquarePreference& val) {
  this->preference = val;
}

void SquareMember::__set_joinMessage(const std::string& val) {
  this->joinMessage = val;
}
std::ostream& operator<<(std::ostream& out, const SquareMember& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareMember::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMemberMid);
          this->__isset.squareMemberMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMid);
          this->__isset.squareMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->displayName);
          this->__isset.displayName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->profileImageObsHash);
          this->__isset.profileImageObsHash = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ableToReceiveMessage);
          this->__isset.ableToReceiveMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast288;
          xfer += iprot->readI32(ecast288);
          this->membershipState = (SquareMembershipState::type)ecast288;
          this->__isset.membershipState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast289;
          xfer += iprot->readI32(ecast289);
          this->role = (SquareMemberRole::type)ecast289;
          this->__isset.role = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->revision);
          this->__isset.revision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->preference.read(iprot);
          this->__isset.preference = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->joinMessage);
          this->__isset.joinMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareMember::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareMember");

  xfer += oprot->writeFieldBegin("squareMemberMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareMemberMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->displayName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("profileImageObsHash", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->profileImageObsHash);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ableToReceiveMessage", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->ableToReceiveMessage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("membershipState", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->membershipState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("role", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32((int32_t)this->role);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("revision", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->revision);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("preference", ::apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->preference.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("joinMessage", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->joinMessage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareMember &a, SquareMember &b) {
  using ::std::swap;
  swap(a.squareMemberMid, b.squareMemberMid);
  swap(a.squareMid, b.squareMid);
  swap(a.displayName, b.displayName);
  swap(a.profileImageObsHash, b.profileImageObsHash);
  swap(a.ableToReceiveMessage, b.ableToReceiveMessage);
  swap(a.membershipState, b.membershipState);
  swap(a.role, b.role);
  swap(a.revision, b.revision);
  swap(a.preference, b.preference);
  swap(a.joinMessage, b.joinMessage);
  swap(a.__isset, b.__isset);
}

SquareMember::SquareMember(const SquareMember& other290) {
  squareMemberMid = other290.squareMemberMid;
  squareMid = other290.squareMid;
  displayName = other290.displayName;
  profileImageObsHash = other290.profileImageObsHash;
  ableToReceiveMessage = other290.ableToReceiveMessage;
  membershipState = other290.membershipState;
  role = other290.role;
  revision = other290.revision;
  preference = other290.preference;
  joinMessage = other290.joinMessage;
  __isset = other290.__isset;
}
SquareMember& SquareMember::operator=(const SquareMember& other291) {
  squareMemberMid = other291.squareMemberMid;
  squareMid = other291.squareMid;
  displayName = other291.displayName;
  profileImageObsHash = other291.profileImageObsHash;
  ableToReceiveMessage = other291.ableToReceiveMessage;
  membershipState = other291.membershipState;
  role = other291.role;
  revision = other291.revision;
  preference = other291.preference;
  joinMessage = other291.joinMessage;
  __isset = other291.__isset;
  return *this;
}
void SquareMember::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareMember(";
  out << "squareMemberMid=" << to_string(squareMemberMid);
  out << ", " << "squareMid=" << to_string(squareMid);
  out << ", " << "displayName=" << to_string(displayName);
  out << ", " << "profileImageObsHash=" << to_string(profileImageObsHash);
  out << ", " << "ableToReceiveMessage=" << to_string(ableToReceiveMessage);
  out << ", " << "membershipState=" << to_string(membershipState);
  out << ", " << "role=" << to_string(role);
  out << ", " << "revision=" << to_string(revision);
  out << ", " << "preference=" << to_string(preference);
  out << ", " << "joinMessage=" << to_string(joinMessage);
  out << ")";
}


SquareMemberRelation::~SquareMemberRelation() throw() {
}


void SquareMemberRelation::__set_state(const SquareMemberRelationState::type val) {
  this->state = val;
}

void SquareMemberRelation::__set_revision(const int64_t val) {
  this->revision = val;
}
std::ostream& operator<<(std::ostream& out, const SquareMemberRelation& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareMemberRelation::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast292;
          xfer += iprot->readI32(ecast292);
          this->state = (SquareMemberRelationState::type)ecast292;
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->revision);
          this->__isset.revision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareMemberRelation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareMemberRelation");

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("revision", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->revision);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareMemberRelation &a, SquareMemberRelation &b) {
  using ::std::swap;
  swap(a.state, b.state);
  swap(a.revision, b.revision);
  swap(a.__isset, b.__isset);
}

SquareMemberRelation::SquareMemberRelation(const SquareMemberRelation& other293) {
  state = other293.state;
  revision = other293.revision;
  __isset = other293.__isset;
}
SquareMemberRelation& SquareMemberRelation::operator=(const SquareMemberRelation& other294) {
  state = other294.state;
  revision = other294.revision;
  __isset = other294.__isset;
  return *this;
}
void SquareMemberRelation::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareMemberRelation(";
  out << "state=" << to_string(state);
  out << ", " << "revision=" << to_string(revision);
  out << ")";
}


SquareFeature::~SquareFeature() throw() {
}


void SquareFeature::__set_controlState(const SquareFeatureControlState::type val) {
  this->controlState = val;
}

void SquareFeature::__set_booleanValue(const BooleanState::type val) {
  this->booleanValue = val;
}
std::ostream& operator<<(std::ostream& out, const SquareFeature& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareFeature::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast295;
          xfer += iprot->readI32(ecast295);
          this->controlState = (SquareFeatureControlState::type)ecast295;
          this->__isset.controlState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast296;
          xfer += iprot->readI32(ecast296);
          this->booleanValue = (BooleanState::type)ecast296;
          this->__isset.booleanValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareFeature::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareFeature");

  xfer += oprot->writeFieldBegin("controlState", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->controlState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("booleanValue", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->booleanValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareFeature &a, SquareFeature &b) {
  using ::std::swap;
  swap(a.controlState, b.controlState);
  swap(a.booleanValue, b.booleanValue);
  swap(a.__isset, b.__isset);
}

SquareFeature::SquareFeature(const SquareFeature& other297) {
  controlState = other297.controlState;
  booleanValue = other297.booleanValue;
  __isset = other297.__isset;
}
SquareFeature& SquareFeature::operator=(const SquareFeature& other298) {
  controlState = other298.controlState;
  booleanValue = other298.booleanValue;
  __isset = other298.__isset;
  return *this;
}
void SquareFeature::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareFeature(";
  out << "controlState=" << to_string(controlState);
  out << ", " << "booleanValue=" << to_string(booleanValue);
  out << ")";
}


SquareFeatureSet::~SquareFeatureSet() throw() {
}


void SquareFeatureSet::__set_squareMid(const std::string& val) {
  this->squareMid = val;
}

void SquareFeatureSet::__set_revision(const int64_t val) {
  this->revision = val;
}

void SquareFeatureSet::__set_creatingSecretSquareChat(const SquareFeature& val) {
  this->creatingSecretSquareChat = val;
}

void SquareFeatureSet::__set_invitingIntoOpenSquareChat(const SquareFeature& val) {
  this->invitingIntoOpenSquareChat = val;
}
std::ostream& operator<<(std::ostream& out, const SquareFeatureSet& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareFeatureSet::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMid);
          this->__isset.squareMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->revision);
          this->__isset.revision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->creatingSecretSquareChat.read(iprot);
          this->__isset.creatingSecretSquareChat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->invitingIntoOpenSquareChat.read(iprot);
          this->__isset.invitingIntoOpenSquareChat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareFeatureSet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareFeatureSet");

  xfer += oprot->writeFieldBegin("squareMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("revision", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->revision);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("creatingSecretSquareChat", ::apache::thrift::protocol::T_STRUCT, 11);
  xfer += this->creatingSecretSquareChat.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("invitingIntoOpenSquareChat", ::apache::thrift::protocol::T_STRUCT, 12);
  xfer += this->invitingIntoOpenSquareChat.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareFeatureSet &a, SquareFeatureSet &b) {
  using ::std::swap;
  swap(a.squareMid, b.squareMid);
  swap(a.revision, b.revision);
  swap(a.creatingSecretSquareChat, b.creatingSecretSquareChat);
  swap(a.invitingIntoOpenSquareChat, b.invitingIntoOpenSquareChat);
  swap(a.__isset, b.__isset);
}

SquareFeatureSet::SquareFeatureSet(const SquareFeatureSet& other299) {
  squareMid = other299.squareMid;
  revision = other299.revision;
  creatingSecretSquareChat = other299.creatingSecretSquareChat;
  invitingIntoOpenSquareChat = other299.invitingIntoOpenSquareChat;
  __isset = other299.__isset;
}
SquareFeatureSet& SquareFeatureSet::operator=(const SquareFeatureSet& other300) {
  squareMid = other300.squareMid;
  revision = other300.revision;
  creatingSecretSquareChat = other300.creatingSecretSquareChat;
  invitingIntoOpenSquareChat = other300.invitingIntoOpenSquareChat;
  __isset = other300.__isset;
  return *this;
}
void SquareFeatureSet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareFeatureSet(";
  out << "squareMid=" << to_string(squareMid);
  out << ", " << "revision=" << to_string(revision);
  out << ", " << "creatingSecretSquareChat=" << to_string(creatingSecretSquareChat);
  out << ", " << "invitingIntoOpenSquareChat=" << to_string(invitingIntoOpenSquareChat);
  out << ")";
}


SquareStatus::~SquareStatus() throw() {
}


void SquareStatus::__set_memberCount(const int32_t val) {
  this->memberCount = val;
}

void SquareStatus::__set_joinRequestCount(const int32_t val) {
  this->joinRequestCount = val;
}

void SquareStatus::__set_lastJoinRequestAt(const int64_t val) {
  this->lastJoinRequestAt = val;
}

void SquareStatus::__set_openChatCount(const int32_t val) {
  this->openChatCount = val;
}
std::ostream& operator<<(std::ostream& out, const SquareStatus& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->memberCount);
          this->__isset.memberCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->joinRequestCount);
          this->__isset.joinRequestCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastJoinRequestAt);
          this->__isset.lastJoinRequestAt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->openChatCount);
          this->__isset.openChatCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareStatus");

  xfer += oprot->writeFieldBegin("memberCount", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->memberCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("joinRequestCount", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->joinRequestCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastJoinRequestAt", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->lastJoinRequestAt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("openChatCount", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->openChatCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareStatus &a, SquareStatus &b) {
  using ::std::swap;
  swap(a.memberCount, b.memberCount);
  swap(a.joinRequestCount, b.joinRequestCount);
  swap(a.lastJoinRequestAt, b.lastJoinRequestAt);
  swap(a.openChatCount, b.openChatCount);
  swap(a.__isset, b.__isset);
}

SquareStatus::SquareStatus(const SquareStatus& other301) {
  memberCount = other301.memberCount;
  joinRequestCount = other301.joinRequestCount;
  lastJoinRequestAt = other301.lastJoinRequestAt;
  openChatCount = other301.openChatCount;
  __isset = other301.__isset;
}
SquareStatus& SquareStatus::operator=(const SquareStatus& other302) {
  memberCount = other302.memberCount;
  joinRequestCount = other302.joinRequestCount;
  lastJoinRequestAt = other302.lastJoinRequestAt;
  openChatCount = other302.openChatCount;
  __isset = other302.__isset;
  return *this;
}
void SquareStatus::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareStatus(";
  out << "memberCount=" << to_string(memberCount);
  out << ", " << "joinRequestCount=" << to_string(joinRequestCount);
  out << ", " << "lastJoinRequestAt=" << to_string(lastJoinRequestAt);
  out << ", " << "openChatCount=" << to_string(openChatCount);
  out << ")";
}


SquareChat::~SquareChat() throw() {
}


void SquareChat::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}

void SquareChat::__set_squareMid(const std::string& val) {
  this->squareMid = val;
}

void SquareChat::__set_type(const SquareChatType::type val) {
  this->type = val;
}

void SquareChat::__set_name(const std::string& val) {
  this->name = val;
}

void SquareChat::__set_chatImageObsHash(const std::string& val) {
  this->chatImageObsHash = val;
}

void SquareChat::__set_squareChatRevision(const int64_t val) {
  this->squareChatRevision = val;
}

void SquareChat::__set_maxMemberCount(const int32_t val) {
  this->maxMemberCount = val;
}

void SquareChat::__set_state(const SquareChatState::type val) {
  this->state = val;
}
std::ostream& operator<<(std::ostream& out, const SquareChat& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareChat::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMid);
          this->__isset.squareMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast303;
          xfer += iprot->readI32(ecast303);
          this->type = (SquareChatType::type)ecast303;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->chatImageObsHash);
          this->__isset.chatImageObsHash = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->squareChatRevision);
          this->__isset.squareChatRevision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxMemberCount);
          this->__isset.maxMemberCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast304;
          xfer += iprot->readI32(ecast304);
          this->state = (SquareChatState::type)ecast304;
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareChat::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareChat");

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chatImageObsHash", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->chatImageObsHash);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareChatRevision", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->squareChatRevision);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxMemberCount", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->maxMemberCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareChat &a, SquareChat &b) {
  using ::std::swap;
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.squareMid, b.squareMid);
  swap(a.type, b.type);
  swap(a.name, b.name);
  swap(a.chatImageObsHash, b.chatImageObsHash);
  swap(a.squareChatRevision, b.squareChatRevision);
  swap(a.maxMemberCount, b.maxMemberCount);
  swap(a.state, b.state);
  swap(a.__isset, b.__isset);
}

SquareChat::SquareChat(const SquareChat& other305) {
  squareChatMid = other305.squareChatMid;
  squareMid = other305.squareMid;
  type = other305.type;
  name = other305.name;
  chatImageObsHash = other305.chatImageObsHash;
  squareChatRevision = other305.squareChatRevision;
  maxMemberCount = other305.maxMemberCount;
  state = other305.state;
  __isset = other305.__isset;
}
SquareChat& SquareChat::operator=(const SquareChat& other306) {
  squareChatMid = other306.squareChatMid;
  squareMid = other306.squareMid;
  type = other306.type;
  name = other306.name;
  chatImageObsHash = other306.chatImageObsHash;
  squareChatRevision = other306.squareChatRevision;
  maxMemberCount = other306.maxMemberCount;
  state = other306.state;
  __isset = other306.__isset;
  return *this;
}
void SquareChat::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareChat(";
  out << "squareChatMid=" << to_string(squareChatMid);
  out << ", " << "squareMid=" << to_string(squareMid);
  out << ", " << "type=" << to_string(type);
  out << ", " << "name=" << to_string(name);
  out << ", " << "chatImageObsHash=" << to_string(chatImageObsHash);
  out << ", " << "squareChatRevision=" << to_string(squareChatRevision);
  out << ", " << "maxMemberCount=" << to_string(maxMemberCount);
  out << ", " << "state=" << to_string(state);
  out << ")";
}


NoteStatus::~NoteStatus() throw() {
}


void NoteStatus::__set_noteCount(const int32_t val) {
  this->noteCount = val;
}

void NoteStatus::__set_latestCreatedAt(const int64_t val) {
  this->latestCreatedAt = val;
}
std::ostream& operator<<(std::ostream& out, const NoteStatus& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t NoteStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->noteCount);
          this->__isset.noteCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->latestCreatedAt);
          this->__isset.latestCreatedAt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NoteStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NoteStatus");

  xfer += oprot->writeFieldBegin("noteCount", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->noteCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("latestCreatedAt", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->latestCreatedAt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NoteStatus &a, NoteStatus &b) {
  using ::std::swap;
  swap(a.noteCount, b.noteCount);
  swap(a.latestCreatedAt, b.latestCreatedAt);
  swap(a.__isset, b.__isset);
}

NoteStatus::NoteStatus(const NoteStatus& other307) {
  noteCount = other307.noteCount;
  latestCreatedAt = other307.latestCreatedAt;
  __isset = other307.__isset;
}
NoteStatus& NoteStatus::operator=(const NoteStatus& other308) {
  noteCount = other308.noteCount;
  latestCreatedAt = other308.latestCreatedAt;
  __isset = other308.__isset;
  return *this;
}
void NoteStatus::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NoteStatus(";
  out << "noteCount=" << to_string(noteCount);
  out << ", " << "latestCreatedAt=" << to_string(latestCreatedAt);
  out << ")";
}


SquareInfo::~SquareInfo() throw() {
}


void SquareInfo::__set_square(const Square& val) {
  this->square = val;
}

void SquareInfo::__set_squareStatus(const SquareStatus& val) {
  this->squareStatus = val;
}

void SquareInfo::__set_squareNoteStatus(const NoteStatus& val) {
  this->squareNoteStatus = val;
}
std::ostream& operator<<(std::ostream& out, const SquareInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->square.read(iprot);
          this->__isset.square = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareStatus.read(iprot);
          this->__isset.squareStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareNoteStatus.read(iprot);
          this->__isset.squareNoteStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareInfo");

  xfer += oprot->writeFieldBegin("square", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->square.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareStatus", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->squareStatus.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareNoteStatus", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->squareNoteStatus.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareInfo &a, SquareInfo &b) {
  using ::std::swap;
  swap(a.square, b.square);
  swap(a.squareStatus, b.squareStatus);
  swap(a.squareNoteStatus, b.squareNoteStatus);
  swap(a.__isset, b.__isset);
}

SquareInfo::SquareInfo(const SquareInfo& other309) {
  square = other309.square;
  squareStatus = other309.squareStatus;
  squareNoteStatus = other309.squareNoteStatus;
  __isset = other309.__isset;
}
SquareInfo& SquareInfo::operator=(const SquareInfo& other310) {
  square = other310.square;
  squareStatus = other310.squareStatus;
  squareNoteStatus = other310.squareNoteStatus;
  __isset = other310.__isset;
  return *this;
}
void SquareInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareInfo(";
  out << "square=" << to_string(square);
  out << ", " << "squareStatus=" << to_string(squareStatus);
  out << ", " << "squareNoteStatus=" << to_string(squareNoteStatus);
  out << ")";
}


BotUseInfo::~BotUseInfo() throw() {
}


void BotUseInfo::__set_botUseAgreementAccepted(const bool val) {
  this->botUseAgreementAccepted = val;
}

void BotUseInfo::__set_botInFriends(const bool val) {
  this->botInFriends = val;
}

void BotUseInfo::__set_primaryApplication(const std::string& val) {
  this->primaryApplication = val;
}

void BotUseInfo::__set_locale(const std::string& val) {
  this->locale = val;
}
std::ostream& operator<<(std::ostream& out, const BotUseInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BotUseInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->botUseAgreementAccepted);
          this->__isset.botUseAgreementAccepted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->botInFriends);
          this->__isset.botInFriends = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->primaryApplication);
          this->__isset.primaryApplication = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->locale);
          this->__isset.locale = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BotUseInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BotUseInfo");

  xfer += oprot->writeFieldBegin("botUseAgreementAccepted", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->botUseAgreementAccepted);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("botInFriends", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->botInFriends);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("primaryApplication", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->primaryApplication);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("locale", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->locale);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BotUseInfo &a, BotUseInfo &b) {
  using ::std::swap;
  swap(a.botUseAgreementAccepted, b.botUseAgreementAccepted);
  swap(a.botInFriends, b.botInFriends);
  swap(a.primaryApplication, b.primaryApplication);
  swap(a.locale, b.locale);
  swap(a.__isset, b.__isset);
}

BotUseInfo::BotUseInfo(const BotUseInfo& other311) {
  botUseAgreementAccepted = other311.botUseAgreementAccepted;
  botInFriends = other311.botInFriends;
  primaryApplication = other311.primaryApplication;
  locale = other311.locale;
  __isset = other311.__isset;
}
BotUseInfo& BotUseInfo::operator=(const BotUseInfo& other312) {
  botUseAgreementAccepted = other312.botUseAgreementAccepted;
  botInFriends = other312.botInFriends;
  primaryApplication = other312.primaryApplication;
  locale = other312.locale;
  __isset = other312.__isset;
  return *this;
}
void BotUseInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BotUseInfo(";
  out << "botUseAgreementAccepted=" << to_string(botUseAgreementAccepted);
  out << ", " << "botInFriends=" << to_string(botInFriends);
  out << ", " << "primaryApplication=" << to_string(primaryApplication);
  out << ", " << "locale=" << to_string(locale);
  out << ")";
}


PaidCallAdCountry::~PaidCallAdCountry() throw() {
}


void PaidCallAdCountry::__set_countryCode(const std::string& val) {
  this->countryCode = val;
}

void PaidCallAdCountry::__set_rateDivision(const std::string& val) {
  this->rateDivision = val;
}
std::ostream& operator<<(std::ostream& out, const PaidCallAdCountry& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PaidCallAdCountry::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->countryCode);
          this->__isset.countryCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rateDivision);
          this->__isset.rateDivision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PaidCallAdCountry::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PaidCallAdCountry");

  xfer += oprot->writeFieldBegin("countryCode", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->countryCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rateDivision", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->rateDivision);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PaidCallAdCountry &a, PaidCallAdCountry &b) {
  using ::std::swap;
  swap(a.countryCode, b.countryCode);
  swap(a.rateDivision, b.rateDivision);
  swap(a.__isset, b.__isset);
}

PaidCallAdCountry::PaidCallAdCountry(const PaidCallAdCountry& other313) {
  countryCode = other313.countryCode;
  rateDivision = other313.rateDivision;
  __isset = other313.__isset;
}
PaidCallAdCountry& PaidCallAdCountry::operator=(const PaidCallAdCountry& other314) {
  countryCode = other314.countryCode;
  rateDivision = other314.rateDivision;
  __isset = other314.__isset;
  return *this;
}
void PaidCallAdCountry::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PaidCallAdCountry(";
  out << "countryCode=" << to_string(countryCode);
  out << ", " << "rateDivision=" << to_string(rateDivision);
  out << ")";
}


PaidCallAdResult::~PaidCallAdResult() throw() {
}


void PaidCallAdResult::__set_adRemains(const int32_t val) {
  this->adRemains = val;
}
std::ostream& operator<<(std::ostream& out, const PaidCallAdResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PaidCallAdResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->adRemains);
          this->__isset.adRemains = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PaidCallAdResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PaidCallAdResult");

  xfer += oprot->writeFieldBegin("adRemains", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->adRemains);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PaidCallAdResult &a, PaidCallAdResult &b) {
  using ::std::swap;
  swap(a.adRemains, b.adRemains);
  swap(a.__isset, b.__isset);
}

PaidCallAdResult::PaidCallAdResult(const PaidCallAdResult& other315) {
  adRemains = other315.adRemains;
  __isset = other315.__isset;
}
PaidCallAdResult& PaidCallAdResult::operator=(const PaidCallAdResult& other316) {
  adRemains = other316.adRemains;
  __isset = other316.__isset;
  return *this;
}
void PaidCallAdResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PaidCallAdResult(";
  out << "adRemains=" << to_string(adRemains);
  out << ")";
}


PaidCallBalance::~PaidCallBalance() throw() {
}


void PaidCallBalance::__set_productType(const PaidCallProductType::type val) {
  this->productType = val;
}

void PaidCallBalance::__set_productName(const std::string& val) {
  this->productName = val;
}

void PaidCallBalance::__set_unit(const std::string& val) {
  this->unit = val;
}

void PaidCallBalance::__set_limitedPaidBalance(const int32_t val) {
  this->limitedPaidBalance = val;
}

void PaidCallBalance::__set_limitedFreeBalance(const int32_t val) {
  this->limitedFreeBalance = val;
}

void PaidCallBalance::__set_unlimitedPaidBalance(const int32_t val) {
  this->unlimitedPaidBalance = val;
}

void PaidCallBalance::__set_unlimitedFreeBalance(const int32_t val) {
  this->unlimitedFreeBalance = val;
}

void PaidCallBalance::__set_startTime(const int64_t val) {
  this->startTime = val;
}

void PaidCallBalance::__set_endTime(const int64_t val) {
  this->endTime = val;
}

void PaidCallBalance::__set_autopayEnabled(const bool val) {
  this->autopayEnabled = val;
}
std::ostream& operator<<(std::ostream& out, const PaidCallBalance& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PaidCallBalance::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast317;
          xfer += iprot->readI32(ecast317);
          this->productType = (PaidCallProductType::type)ecast317;
          this->__isset.productType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->productName);
          this->__isset.productName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->unit);
          this->__isset.unit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limitedPaidBalance);
          this->__isset.limitedPaidBalance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limitedFreeBalance);
          this->__isset.limitedFreeBalance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unlimitedPaidBalance);
          this->__isset.unlimitedPaidBalance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unlimitedFreeBalance);
          this->__isset.unlimitedFreeBalance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startTime);
          this->__isset.startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->endTime);
          this->__isset.endTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->autopayEnabled);
          this->__isset.autopayEnabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PaidCallBalance::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PaidCallBalance");

  xfer += oprot->writeFieldBegin("productType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->productType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("productName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->productName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unit", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->unit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limitedPaidBalance", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->limitedPaidBalance);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limitedFreeBalance", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->limitedFreeBalance);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unlimitedPaidBalance", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->unlimitedPaidBalance);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unlimitedFreeBalance", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->unlimitedFreeBalance);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->startTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endTime", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->endTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("autopayEnabled", ::apache::thrift::protocol::T_BOOL, 10);
  xfer += oprot->writeBool(this->autopayEnabled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PaidCallBalance &a, PaidCallBalance &b) {
  using ::std::swap;
  swap(a.productType, b.productType);
  swap(a.productName, b.productName);
  swap(a.unit, b.unit);
  swap(a.limitedPaidBalance, b.limitedPaidBalance);
  swap(a.limitedFreeBalance, b.limitedFreeBalance);
  swap(a.unlimitedPaidBalance, b.unlimitedPaidBalance);
  swap(a.unlimitedFreeBalance, b.unlimitedFreeBalance);
  swap(a.startTime, b.startTime);
  swap(a.endTime, b.endTime);
  swap(a.autopayEnabled, b.autopayEnabled);
  swap(a.__isset, b.__isset);
}

PaidCallBalance::PaidCallBalance(const PaidCallBalance& other318) {
  productType = other318.productType;
  productName = other318.productName;
  unit = other318.unit;
  limitedPaidBalance = other318.limitedPaidBalance;
  limitedFreeBalance = other318.limitedFreeBalance;
  unlimitedPaidBalance = other318.unlimitedPaidBalance;
  unlimitedFreeBalance = other318.unlimitedFreeBalance;
  startTime = other318.startTime;
  endTime = other318.endTime;
  autopayEnabled = other318.autopayEnabled;
  __isset = other318.__isset;
}
PaidCallBalance& PaidCallBalance::operator=(const PaidCallBalance& other319) {
  productType = other319.productType;
  productName = other319.productName;
  unit = other319.unit;
  limitedPaidBalance = other319.limitedPaidBalance;
  limitedFreeBalance = other319.limitedFreeBalance;
  unlimitedPaidBalance = other319.unlimitedPaidBalance;
  unlimitedFreeBalance = other319.unlimitedFreeBalance;
  startTime = other319.startTime;
  endTime = other319.endTime;
  autopayEnabled = other319.autopayEnabled;
  __isset = other319.__isset;
  return *this;
}
void PaidCallBalance::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PaidCallBalance(";
  out << "productType=" << to_string(productType);
  out << ", " << "productName=" << to_string(productName);
  out << ", " << "unit=" << to_string(unit);
  out << ", " << "limitedPaidBalance=" << to_string(limitedPaidBalance);
  out << ", " << "limitedFreeBalance=" << to_string(limitedFreeBalance);
  out << ", " << "unlimitedPaidBalance=" << to_string(unlimitedPaidBalance);
  out << ", " << "unlimitedFreeBalance=" << to_string(unlimitedFreeBalance);
  out << ", " << "startTime=" << to_string(startTime);
  out << ", " << "endTime=" << to_string(endTime);
  out << ", " << "autopayEnabled=" << to_string(autopayEnabled);
  out << ")";
}


PaidCallCurrencyExchangeRate::~PaidCallCurrencyExchangeRate() throw() {
}


void PaidCallCurrencyExchangeRate::__set_currencyCode(const std::string& val) {
  this->currencyCode = val;
}

void PaidCallCurrencyExchangeRate::__set_currencyName(const std::string& val) {
  this->currencyName = val;
}

void PaidCallCurrencyExchangeRate::__set_currencySign(const std::string& val) {
  this->currencySign = val;
}

void PaidCallCurrencyExchangeRate::__set_preferred(const bool val) {
  this->preferred = val;
}

void PaidCallCurrencyExchangeRate::__set_coinRate(const std::string& val) {
  this->coinRate = val;
}

void PaidCallCurrencyExchangeRate::__set_creditRate(const std::string& val) {
  this->creditRate = val;
}
std::ostream& operator<<(std::ostream& out, const PaidCallCurrencyExchangeRate& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PaidCallCurrencyExchangeRate::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currencyCode);
          this->__isset.currencyCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currencyName);
          this->__isset.currencyName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currencySign);
          this->__isset.currencySign = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->preferred);
          this->__isset.preferred = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->coinRate);
          this->__isset.coinRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->creditRate);
          this->__isset.creditRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PaidCallCurrencyExchangeRate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PaidCallCurrencyExchangeRate");

  xfer += oprot->writeFieldBegin("currencyCode", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->currencyCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currencyName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->currencyName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currencySign", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->currencySign);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("preferred", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->preferred);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("coinRate", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->coinRate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("creditRate", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->creditRate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PaidCallCurrencyExchangeRate &a, PaidCallCurrencyExchangeRate &b) {
  using ::std::swap;
  swap(a.currencyCode, b.currencyCode);
  swap(a.currencyName, b.currencyName);
  swap(a.currencySign, b.currencySign);
  swap(a.preferred, b.preferred);
  swap(a.coinRate, b.coinRate);
  swap(a.creditRate, b.creditRate);
  swap(a.__isset, b.__isset);
}

PaidCallCurrencyExchangeRate::PaidCallCurrencyExchangeRate(const PaidCallCurrencyExchangeRate& other320) {
  currencyCode = other320.currencyCode;
  currencyName = other320.currencyName;
  currencySign = other320.currencySign;
  preferred = other320.preferred;
  coinRate = other320.coinRate;
  creditRate = other320.creditRate;
  __isset = other320.__isset;
}
PaidCallCurrencyExchangeRate& PaidCallCurrencyExchangeRate::operator=(const PaidCallCurrencyExchangeRate& other321) {
  currencyCode = other321.currencyCode;
  currencyName = other321.currencyName;
  currencySign = other321.currencySign;
  preferred = other321.preferred;
  coinRate = other321.coinRate;
  creditRate = other321.creditRate;
  __isset = other321.__isset;
  return *this;
}
void PaidCallCurrencyExchangeRate::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PaidCallCurrencyExchangeRate(";
  out << "currencyCode=" << to_string(currencyCode);
  out << ", " << "currencyName=" << to_string(currencyName);
  out << ", " << "currencySign=" << to_string(currencySign);
  out << ", " << "preferred=" << to_string(preferred);
  out << ", " << "coinRate=" << to_string(coinRate);
  out << ", " << "creditRate=" << to_string(creditRate);
  out << ")";
}


ExtendedProfileBirthday::~ExtendedProfileBirthday() throw() {
}


void ExtendedProfileBirthday::__set_year(const std::string& val) {
  this->year = val;
}

void ExtendedProfileBirthday::__set_yearPrivacyLevelType(const PrivacyLevelType::type val) {
  this->yearPrivacyLevelType = val;
}

void ExtendedProfileBirthday::__set_yearEnabled(const bool val) {
  this->yearEnabled = val;
}

void ExtendedProfileBirthday::__set_day(const std::string& val) {
  this->day = val;
}

void ExtendedProfileBirthday::__set_dayPrivacyLevelType(const PrivacyLevelType::type val) {
  this->dayPrivacyLevelType = val;
}

void ExtendedProfileBirthday::__set_dayEnabled(const bool val) {
  this->dayEnabled = val;
}
std::ostream& operator<<(std::ostream& out, const ExtendedProfileBirthday& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ExtendedProfileBirthday::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->year);
          this->__isset.year = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast322;
          xfer += iprot->readI32(ecast322);
          this->yearPrivacyLevelType = (PrivacyLevelType::type)ecast322;
          this->__isset.yearPrivacyLevelType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->yearEnabled);
          this->__isset.yearEnabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->day);
          this->__isset.day = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast323;
          xfer += iprot->readI32(ecast323);
          this->dayPrivacyLevelType = (PrivacyLevelType::type)ecast323;
          this->__isset.dayPrivacyLevelType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->dayEnabled);
          this->__isset.dayEnabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ExtendedProfileBirthday::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ExtendedProfileBirthday");

  xfer += oprot->writeFieldBegin("year", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->year);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yearPrivacyLevelType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->yearPrivacyLevelType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yearEnabled", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->yearEnabled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("day", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->day);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dayPrivacyLevelType", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->dayPrivacyLevelType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dayEnabled", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->dayEnabled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ExtendedProfileBirthday &a, ExtendedProfileBirthday &b) {
  using ::std::swap;
  swap(a.year, b.year);
  swap(a.yearPrivacyLevelType, b.yearPrivacyLevelType);
  swap(a.yearEnabled, b.yearEnabled);
  swap(a.day, b.day);
  swap(a.dayPrivacyLevelType, b.dayPrivacyLevelType);
  swap(a.dayEnabled, b.dayEnabled);
  swap(a.__isset, b.__isset);
}

ExtendedProfileBirthday::ExtendedProfileBirthday(const ExtendedProfileBirthday& other324) {
  year = other324.year;
  yearPrivacyLevelType = other324.yearPrivacyLevelType;
  yearEnabled = other324.yearEnabled;
  day = other324.day;
  dayPrivacyLevelType = other324.dayPrivacyLevelType;
  dayEnabled = other324.dayEnabled;
  __isset = other324.__isset;
}
ExtendedProfileBirthday& ExtendedProfileBirthday::operator=(const ExtendedProfileBirthday& other325) {
  year = other325.year;
  yearPrivacyLevelType = other325.yearPrivacyLevelType;
  yearEnabled = other325.yearEnabled;
  day = other325.day;
  dayPrivacyLevelType = other325.dayPrivacyLevelType;
  dayEnabled = other325.dayEnabled;
  __isset = other325.__isset;
  return *this;
}
void ExtendedProfileBirthday::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ExtendedProfileBirthday(";
  out << "year=" << to_string(year);
  out << ", " << "yearPrivacyLevelType=" << to_string(yearPrivacyLevelType);
  out << ", " << "yearEnabled=" << to_string(yearEnabled);
  out << ", " << "day=" << to_string(day);
  out << ", " << "dayPrivacyLevelType=" << to_string(dayPrivacyLevelType);
  out << ", " << "dayEnabled=" << to_string(dayEnabled);
  out << ")";
}


ExtendedProfile::~ExtendedProfile() throw() {
}


void ExtendedProfile::__set_birthday(const ExtendedProfileBirthday& val) {
  this->birthday = val;
}
std::ostream& operator<<(std::ostream& out, const ExtendedProfile& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ExtendedProfile::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->birthday.read(iprot);
          this->__isset.birthday = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ExtendedProfile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ExtendedProfile");

  xfer += oprot->writeFieldBegin("birthday", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->birthday.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ExtendedProfile &a, ExtendedProfile &b) {
  using ::std::swap;
  swap(a.birthday, b.birthday);
  swap(a.__isset, b.__isset);
}

ExtendedProfile::ExtendedProfile(const ExtendedProfile& other326) {
  birthday = other326.birthday;
  __isset = other326.__isset;
}
ExtendedProfile& ExtendedProfile::operator=(const ExtendedProfile& other327) {
  birthday = other327.birthday;
  __isset = other327.__isset;
  return *this;
}
void ExtendedProfile::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ExtendedProfile(";
  out << "birthday=" << to_string(birthday);
  out << ")";
}


PaidCallDialing::~PaidCallDialing() throw() {
}


void PaidCallDialing::__set_type(const PaidCallType::type val) {
  this->type = val;
}

void PaidCallDialing::__set_dialedNumber(const std::string& val) {
  this->dialedNumber = val;
}

void PaidCallDialing::__set_serviceDomain(const std::string& val) {
  this->serviceDomain = val;
}

void PaidCallDialing::__set_productType(const PaidCallProductType::type val) {
  this->productType = val;
}

void PaidCallDialing::__set_productName(const std::string& val) {
  this->productName = val;
}

void PaidCallDialing::__set_multipleProduct(const bool val) {
  this->multipleProduct = val;
}

void PaidCallDialing::__set_callerIdStatus(const PaidCallerIdStatus::type val) {
  this->callerIdStatus = val;
}

void PaidCallDialing::__set_balance(const int32_t val) {
  this->balance = val;
}

void PaidCallDialing::__set_unit(const std::string& val) {
  this->unit = val;
}

void PaidCallDialing::__set_rate(const int32_t val) {
  this->rate = val;
}

void PaidCallDialing::__set_displayCode(const std::string& val) {
  this->displayCode = val;
}

void PaidCallDialing::__set_calledNumber(const std::string& val) {
  this->calledNumber = val;
}

void PaidCallDialing::__set_calleeNationalNumber(const std::string& val) {
  this->calleeNationalNumber = val;
}

void PaidCallDialing::__set_calleeCallingCode(const std::string& val) {
  this->calleeCallingCode = val;
}

void PaidCallDialing::__set_rateDivision(const std::string& val) {
  this->rateDivision = val;
}

void PaidCallDialing::__set_adMaxMin(const int32_t val) {
  this->adMaxMin = val;
}

void PaidCallDialing::__set_adRemains(const int32_t val) {
  this->adRemains = val;
}

void PaidCallDialing::__set_adSessionId(const std::string& val) {
  this->adSessionId = val;
}
std::ostream& operator<<(std::ostream& out, const PaidCallDialing& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PaidCallDialing::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast328;
          xfer += iprot->readI32(ecast328);
          this->type = (PaidCallType::type)ecast328;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dialedNumber);
          this->__isset.dialedNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serviceDomain);
          this->__isset.serviceDomain = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast329;
          xfer += iprot->readI32(ecast329);
          this->productType = (PaidCallProductType::type)ecast329;
          this->__isset.productType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->productName);
          this->__isset.productName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->multipleProduct);
          this->__isset.multipleProduct = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast330;
          xfer += iprot->readI32(ecast330);
          this->callerIdStatus = (PaidCallerIdStatus::type)ecast330;
          this->__isset.callerIdStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->balance);
          this->__isset.balance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->unit);
          this->__isset.unit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rate);
          this->__isset.rate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->displayCode);
          this->__isset.displayCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->calledNumber);
          this->__isset.calledNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->calleeNationalNumber);
          this->__isset.calleeNationalNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->calleeCallingCode);
          this->__isset.calleeCallingCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rateDivision);
          this->__isset.rateDivision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->adMaxMin);
          this->__isset.adMaxMin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->adRemains);
          this->__isset.adRemains = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->adSessionId);
          this->__isset.adSessionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PaidCallDialing::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PaidCallDialing");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dialedNumber", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->dialedNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceDomain", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->serviceDomain);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("productType", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->productType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("productName", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->productName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("multipleProduct", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->multipleProduct);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("callerIdStatus", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->callerIdStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("balance", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->balance);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unit", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->unit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rate", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->rate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayCode", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->displayCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("calledNumber", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->calledNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("calleeNationalNumber", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->calleeNationalNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("calleeCallingCode", ::apache::thrift::protocol::T_STRING, 16);
  xfer += oprot->writeString(this->calleeCallingCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rateDivision", ::apache::thrift::protocol::T_STRING, 17);
  xfer += oprot->writeString(this->rateDivision);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("adMaxMin", ::apache::thrift::protocol::T_I32, 20);
  xfer += oprot->writeI32(this->adMaxMin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("adRemains", ::apache::thrift::protocol::T_I32, 21);
  xfer += oprot->writeI32(this->adRemains);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("adSessionId", ::apache::thrift::protocol::T_STRING, 22);
  xfer += oprot->writeString(this->adSessionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PaidCallDialing &a, PaidCallDialing &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.dialedNumber, b.dialedNumber);
  swap(a.serviceDomain, b.serviceDomain);
  swap(a.productType, b.productType);
  swap(a.productName, b.productName);
  swap(a.multipleProduct, b.multipleProduct);
  swap(a.callerIdStatus, b.callerIdStatus);
  swap(a.balance, b.balance);
  swap(a.unit, b.unit);
  swap(a.rate, b.rate);
  swap(a.displayCode, b.displayCode);
  swap(a.calledNumber, b.calledNumber);
  swap(a.calleeNationalNumber, b.calleeNationalNumber);
  swap(a.calleeCallingCode, b.calleeCallingCode);
  swap(a.rateDivision, b.rateDivision);
  swap(a.adMaxMin, b.adMaxMin);
  swap(a.adRemains, b.adRemains);
  swap(a.adSessionId, b.adSessionId);
  swap(a.__isset, b.__isset);
}

PaidCallDialing::PaidCallDialing(const PaidCallDialing& other331) {
  type = other331.type;
  dialedNumber = other331.dialedNumber;
  serviceDomain = other331.serviceDomain;
  productType = other331.productType;
  productName = other331.productName;
  multipleProduct = other331.multipleProduct;
  callerIdStatus = other331.callerIdStatus;
  balance = other331.balance;
  unit = other331.unit;
  rate = other331.rate;
  displayCode = other331.displayCode;
  calledNumber = other331.calledNumber;
  calleeNationalNumber = other331.calleeNationalNumber;
  calleeCallingCode = other331.calleeCallingCode;
  rateDivision = other331.rateDivision;
  adMaxMin = other331.adMaxMin;
  adRemains = other331.adRemains;
  adSessionId = other331.adSessionId;
  __isset = other331.__isset;
}
PaidCallDialing& PaidCallDialing::operator=(const PaidCallDialing& other332) {
  type = other332.type;
  dialedNumber = other332.dialedNumber;
  serviceDomain = other332.serviceDomain;
  productType = other332.productType;
  productName = other332.productName;
  multipleProduct = other332.multipleProduct;
  callerIdStatus = other332.callerIdStatus;
  balance = other332.balance;
  unit = other332.unit;
  rate = other332.rate;
  displayCode = other332.displayCode;
  calledNumber = other332.calledNumber;
  calleeNationalNumber = other332.calleeNationalNumber;
  calleeCallingCode = other332.calleeCallingCode;
  rateDivision = other332.rateDivision;
  adMaxMin = other332.adMaxMin;
  adRemains = other332.adRemains;
  adSessionId = other332.adSessionId;
  __isset = other332.__isset;
  return *this;
}
void PaidCallDialing::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PaidCallDialing(";
  out << "type=" << to_string(type);
  out << ", " << "dialedNumber=" << to_string(dialedNumber);
  out << ", " << "serviceDomain=" << to_string(serviceDomain);
  out << ", " << "productType=" << to_string(productType);
  out << ", " << "productName=" << to_string(productName);
  out << ", " << "multipleProduct=" << to_string(multipleProduct);
  out << ", " << "callerIdStatus=" << to_string(callerIdStatus);
  out << ", " << "balance=" << to_string(balance);
  out << ", " << "unit=" << to_string(unit);
  out << ", " << "rate=" << to_string(rate);
  out << ", " << "displayCode=" << to_string(displayCode);
  out << ", " << "calledNumber=" << to_string(calledNumber);
  out << ", " << "calleeNationalNumber=" << to_string(calleeNationalNumber);
  out << ", " << "calleeCallingCode=" << to_string(calleeCallingCode);
  out << ", " << "rateDivision=" << to_string(rateDivision);
  out << ", " << "adMaxMin=" << to_string(adMaxMin);
  out << ", " << "adRemains=" << to_string(adRemains);
  out << ", " << "adSessionId=" << to_string(adSessionId);
  out << ")";
}


SpotItem::~SpotItem() throw() {
}


void SpotItem::__set_name(const std::string& val) {
  this->name = val;
}

void SpotItem::__set_phone(const std::string& val) {
  this->phone = val;
}

void SpotItem::__set_category(const SpotCategory::type val) {
  this->category = val;
}

void SpotItem::__set_mid(const std::string& val) {
  this->mid = val;
}

void SpotItem::__set_countryAreaCode(const std::string& val) {
  this->countryAreaCode = val;
}

void SpotItem::__set_freePhoneCallable(const bool val) {
  this->freePhoneCallable = val;
}
std::ostream& operator<<(std::ostream& out, const SpotItem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SpotItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone);
          this->__isset.phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast333;
          xfer += iprot->readI32(ecast333);
          this->category = (SpotCategory::type)ecast333;
          this->__isset.category = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mid);
          this->__isset.mid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->countryAreaCode);
          this->__isset.countryAreaCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->freePhoneCallable);
          this->__isset.freePhoneCallable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SpotItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SpotItem");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phone", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("category", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->category);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mid", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->mid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("countryAreaCode", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->countryAreaCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("freePhoneCallable", ::apache::thrift::protocol::T_BOOL, 10);
  xfer += oprot->writeBool(this->freePhoneCallable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SpotItem &a, SpotItem &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.phone, b.phone);
  swap(a.category, b.category);
  swap(a.mid, b.mid);
  swap(a.countryAreaCode, b.countryAreaCode);
  swap(a.freePhoneCallable, b.freePhoneCallable);
  swap(a.__isset, b.__isset);
}

SpotItem::SpotItem(const SpotItem& other334) {
  name = other334.name;
  phone = other334.phone;
  category = other334.category;
  mid = other334.mid;
  countryAreaCode = other334.countryAreaCode;
  freePhoneCallable = other334.freePhoneCallable;
  __isset = other334.__isset;
}
SpotItem& SpotItem::operator=(const SpotItem& other335) {
  name = other335.name;
  phone = other335.phone;
  category = other335.category;
  mid = other335.mid;
  countryAreaCode = other335.countryAreaCode;
  freePhoneCallable = other335.freePhoneCallable;
  __isset = other335.__isset;
  return *this;
}
void SpotItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SpotItem(";
  out << "name=" << to_string(name);
  out << ", " << "phone=" << to_string(phone);
  out << ", " << "category=" << to_string(category);
  out << ", " << "mid=" << to_string(mid);
  out << ", " << "countryAreaCode=" << to_string(countryAreaCode);
  out << ", " << "freePhoneCallable=" << to_string(freePhoneCallable);
  out << ")";
}


SpotNearbyItem::~SpotNearbyItem() throw() {
}


void SpotNearbyItem::__set_spotItem(const SpotItem& val) {
  this->spotItem = val;
}

void SpotNearbyItem::__set_location(const Location& val) {
  this->location = val;
}
std::ostream& operator<<(std::ostream& out, const SpotNearbyItem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SpotNearbyItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->spotItem.read(iprot);
          this->__isset.spotItem = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->location.read(iprot);
          this->__isset.location = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SpotNearbyItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SpotNearbyItem");

  xfer += oprot->writeFieldBegin("spotItem", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->spotItem.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("location", ::apache::thrift::protocol::T_STRUCT, 11);
  xfer += this->location.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SpotNearbyItem &a, SpotNearbyItem &b) {
  using ::std::swap;
  swap(a.spotItem, b.spotItem);
  swap(a.location, b.location);
  swap(a.__isset, b.__isset);
}

SpotNearbyItem::SpotNearbyItem(const SpotNearbyItem& other336) {
  spotItem = other336.spotItem;
  location = other336.location;
  __isset = other336.__isset;
}
SpotNearbyItem& SpotNearbyItem::operator=(const SpotNearbyItem& other337) {
  spotItem = other337.spotItem;
  location = other337.location;
  __isset = other337.__isset;
  return *this;
}
void SpotNearbyItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SpotNearbyItem(";
  out << "spotItem=" << to_string(spotItem);
  out << ", " << "location=" << to_string(location);
  out << ")";
}


SpotNearbyResponse::~SpotNearbyResponse() throw() {
}


void SpotNearbyResponse::__set_spotNearbyItems(const std::vector<SpotNearbyItem> & val) {
  this->spotNearbyItems = val;
}
std::ostream& operator<<(std::ostream& out, const SpotNearbyResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SpotNearbyResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->spotNearbyItems.clear();
            uint32_t _size338;
            ::apache::thrift::protocol::TType _etype341;
            xfer += iprot->readListBegin(_etype341, _size338);
            this->spotNearbyItems.resize(_size338);
            uint32_t _i342;
            for (_i342 = 0; _i342 < _size338; ++_i342)
            {
              xfer += this->spotNearbyItems[_i342].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.spotNearbyItems = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SpotNearbyResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SpotNearbyResponse");

  xfer += oprot->writeFieldBegin("spotNearbyItems", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->spotNearbyItems.size()));
    std::vector<SpotNearbyItem> ::const_iterator _iter343;
    for (_iter343 = this->spotNearbyItems.begin(); _iter343 != this->spotNearbyItems.end(); ++_iter343)
    {
      xfer += (*_iter343).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SpotNearbyResponse &a, SpotNearbyResponse &b) {
  using ::std::swap;
  swap(a.spotNearbyItems, b.spotNearbyItems);
  swap(a.__isset, b.__isset);
}

SpotNearbyResponse::SpotNearbyResponse(const SpotNearbyResponse& other344) {
  spotNearbyItems = other344.spotNearbyItems;
  __isset = other344.__isset;
}
SpotNearbyResponse& SpotNearbyResponse::operator=(const SpotNearbyResponse& other345) {
  spotNearbyItems = other345.spotNearbyItems;
  __isset = other345.__isset;
  return *this;
}
void SpotNearbyResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SpotNearbyResponse(";
  out << "spotNearbyItems=" << to_string(spotNearbyItems);
  out << ")";
}


SpotPhoneNumberResponse::~SpotPhoneNumberResponse() throw() {
}


void SpotPhoneNumberResponse::__set_spotItems(const std::vector<SpotItem> & val) {
  this->spotItems = val;
}
std::ostream& operator<<(std::ostream& out, const SpotPhoneNumberResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SpotPhoneNumberResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->spotItems.clear();
            uint32_t _size346;
            ::apache::thrift::protocol::TType _etype349;
            xfer += iprot->readListBegin(_etype349, _size346);
            this->spotItems.resize(_size346);
            uint32_t _i350;
            for (_i350 = 0; _i350 < _size346; ++_i350)
            {
              xfer += this->spotItems[_i350].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.spotItems = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SpotPhoneNumberResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SpotPhoneNumberResponse");

  xfer += oprot->writeFieldBegin("spotItems", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->spotItems.size()));
    std::vector<SpotItem> ::const_iterator _iter351;
    for (_iter351 = this->spotItems.begin(); _iter351 != this->spotItems.end(); ++_iter351)
    {
      xfer += (*_iter351).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SpotPhoneNumberResponse &a, SpotPhoneNumberResponse &b) {
  using ::std::swap;
  swap(a.spotItems, b.spotItems);
  swap(a.__isset, b.__isset);
}

SpotPhoneNumberResponse::SpotPhoneNumberResponse(const SpotPhoneNumberResponse& other352) {
  spotItems = other352.spotItems;
  __isset = other352.__isset;
}
SpotPhoneNumberResponse& SpotPhoneNumberResponse::operator=(const SpotPhoneNumberResponse& other353) {
  spotItems = other353.spotItems;
  __isset = other353.__isset;
  return *this;
}
void SpotPhoneNumberResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SpotPhoneNumberResponse(";
  out << "spotItems=" << to_string(spotItems);
  out << ")";
}


PaidCallHistory::~PaidCallHistory() throw() {
}


void PaidCallHistory::__set_seq(const int64_t val) {
  this->seq = val;
}

void PaidCallHistory::__set_type(const PaidCallType::type val) {
  this->type = val;
}

void PaidCallHistory::__set_dialedNumber(const std::string& val) {
  this->dialedNumber = val;
}

void PaidCallHistory::__set_calledNumber(const std::string& val) {
  this->calledNumber = val;
}

void PaidCallHistory::__set_toMid(const std::string& val) {
  this->toMid = val;
}

void PaidCallHistory::__set_toName(const std::string& val) {
  this->toName = val;
}

void PaidCallHistory::__set_setupTime(const int64_t val) {
  this->setupTime = val;
}

void PaidCallHistory::__set_startTime(const int64_t val) {
  this->startTime = val;
}

void PaidCallHistory::__set_endTime(const int64_t val) {
  this->endTime = val;
}

void PaidCallHistory::__set_duration(const int64_t val) {
  this->duration = val;
}

void PaidCallHistory::__set_terminate(const int32_t val) {
  this->terminate = val;
}

void PaidCallHistory::__set_productType(const PaidCallProductType::type val) {
  this->productType = val;
}

void PaidCallHistory::__set_charge(const int32_t val) {
  this->charge = val;
}

void PaidCallHistory::__set_unit(const std::string& val) {
  this->unit = val;
}

void PaidCallHistory::__set_result(const std::string& val) {
  this->result = val;
}
std::ostream& operator<<(std::ostream& out, const PaidCallHistory& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PaidCallHistory::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->seq);
          this->__isset.seq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast354;
          xfer += iprot->readI32(ecast354);
          this->type = (PaidCallType::type)ecast354;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dialedNumber);
          this->__isset.dialedNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->calledNumber);
          this->__isset.calledNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->toMid);
          this->__isset.toMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->toName);
          this->__isset.toName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->setupTime);
          this->__isset.setupTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startTime);
          this->__isset.startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->endTime);
          this->__isset.endTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->duration);
          this->__isset.duration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->terminate);
          this->__isset.terminate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast355;
          xfer += iprot->readI32(ecast355);
          this->productType = (PaidCallProductType::type)ecast355;
          this->__isset.productType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->charge);
          this->__isset.charge = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->unit);
          this->__isset.unit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PaidCallHistory::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PaidCallHistory");

  xfer += oprot->writeFieldBegin("seq", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->seq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dialedNumber", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->dialedNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("calledNumber", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->calledNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("toMid", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->toMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("toName", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->toName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("setupTime", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->setupTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->startTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endTime", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->endTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("duration", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->duration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("terminate", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->terminate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("productType", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32((int32_t)this->productType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("charge", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->charge);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unit", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->unit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->result);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PaidCallHistory &a, PaidCallHistory &b) {
  using ::std::swap;
  swap(a.seq, b.seq);
  swap(a.type, b.type);
  swap(a.dialedNumber, b.dialedNumber);
  swap(a.calledNumber, b.calledNumber);
  swap(a.toMid, b.toMid);
  swap(a.toName, b.toName);
  swap(a.setupTime, b.setupTime);
  swap(a.startTime, b.startTime);
  swap(a.endTime, b.endTime);
  swap(a.duration, b.duration);
  swap(a.terminate, b.terminate);
  swap(a.productType, b.productType);
  swap(a.charge, b.charge);
  swap(a.unit, b.unit);
  swap(a.result, b.result);
  swap(a.__isset, b.__isset);
}

PaidCallHistory::PaidCallHistory(const PaidCallHistory& other356) {
  seq = other356.seq;
  type = other356.type;
  dialedNumber = other356.dialedNumber;
  calledNumber = other356.calledNumber;
  toMid = other356.toMid;
  toName = other356.toName;
  setupTime = other356.setupTime;
  startTime = other356.startTime;
  endTime = other356.endTime;
  duration = other356.duration;
  terminate = other356.terminate;
  productType = other356.productType;
  charge = other356.charge;
  unit = other356.unit;
  result = other356.result;
  __isset = other356.__isset;
}
PaidCallHistory& PaidCallHistory::operator=(const PaidCallHistory& other357) {
  seq = other357.seq;
  type = other357.type;
  dialedNumber = other357.dialedNumber;
  calledNumber = other357.calledNumber;
  toMid = other357.toMid;
  toName = other357.toName;
  setupTime = other357.setupTime;
  startTime = other357.startTime;
  endTime = other357.endTime;
  duration = other357.duration;
  terminate = other357.terminate;
  productType = other357.productType;
  charge = other357.charge;
  unit = other357.unit;
  result = other357.result;
  __isset = other357.__isset;
  return *this;
}
void PaidCallHistory::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PaidCallHistory(";
  out << "seq=" << to_string(seq);
  out << ", " << "type=" << to_string(type);
  out << ", " << "dialedNumber=" << to_string(dialedNumber);
  out << ", " << "calledNumber=" << to_string(calledNumber);
  out << ", " << "toMid=" << to_string(toMid);
  out << ", " << "toName=" << to_string(toName);
  out << ", " << "setupTime=" << to_string(setupTime);
  out << ", " << "startTime=" << to_string(startTime);
  out << ", " << "endTime=" << to_string(endTime);
  out << ", " << "duration=" << to_string(duration);
  out << ", " << "terminate=" << to_string(terminate);
  out << ", " << "productType=" << to_string(productType);
  out << ", " << "charge=" << to_string(charge);
  out << ", " << "unit=" << to_string(unit);
  out << ", " << "result=" << to_string(result);
  out << ")";
}


PaidCallHistoryResult::~PaidCallHistoryResult() throw() {
}


void PaidCallHistoryResult::__set_historys(const std::vector<PaidCallHistory> & val) {
  this->historys = val;
}

void PaidCallHistoryResult::__set_hasNext(const bool val) {
  this->hasNext = val;
}
std::ostream& operator<<(std::ostream& out, const PaidCallHistoryResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PaidCallHistoryResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->historys.clear();
            uint32_t _size358;
            ::apache::thrift::protocol::TType _etype361;
            xfer += iprot->readListBegin(_etype361, _size358);
            this->historys.resize(_size358);
            uint32_t _i362;
            for (_i362 = 0; _i362 < _size358; ++_i362)
            {
              xfer += this->historys[_i362].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.historys = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasNext);
          this->__isset.hasNext = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PaidCallHistoryResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PaidCallHistoryResult");

  xfer += oprot->writeFieldBegin("historys", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->historys.size()));
    std::vector<PaidCallHistory> ::const_iterator _iter363;
    for (_iter363 = this->historys.begin(); _iter363 != this->historys.end(); ++_iter363)
    {
      xfer += (*_iter363).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hasNext", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->hasNext);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PaidCallHistoryResult &a, PaidCallHistoryResult &b) {
  using ::std::swap;
  swap(a.historys, b.historys);
  swap(a.hasNext, b.hasNext);
  swap(a.__isset, b.__isset);
}

PaidCallHistoryResult::PaidCallHistoryResult(const PaidCallHistoryResult& other364) {
  historys = other364.historys;
  hasNext = other364.hasNext;
  __isset = other364.__isset;
}
PaidCallHistoryResult& PaidCallHistoryResult::operator=(const PaidCallHistoryResult& other365) {
  historys = other365.historys;
  hasNext = other365.hasNext;
  __isset = other365.__isset;
  return *this;
}
void PaidCallHistoryResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PaidCallHistoryResult(";
  out << "historys=" << to_string(historys);
  out << ", " << "hasNext=" << to_string(hasNext);
  out << ")";
}


PaidCallMetadataResult::~PaidCallMetadataResult() throw() {
}


void PaidCallMetadataResult::__set_currencyExchangeRates(const std::vector<PaidCallCurrencyExchangeRate> & val) {
  this->currencyExchangeRates = val;
}

void PaidCallMetadataResult::__set_recommendedCountryCodes(const std::vector<std::string> & val) {
  this->recommendedCountryCodes = val;
}

void PaidCallMetadataResult::__set_adCountries(const std::vector<PaidCallAdCountry> & val) {
  this->adCountries = val;
}
std::ostream& operator<<(std::ostream& out, const PaidCallMetadataResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PaidCallMetadataResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->currencyExchangeRates.clear();
            uint32_t _size366;
            ::apache::thrift::protocol::TType _etype369;
            xfer += iprot->readListBegin(_etype369, _size366);
            this->currencyExchangeRates.resize(_size366);
            uint32_t _i370;
            for (_i370 = 0; _i370 < _size366; ++_i370)
            {
              xfer += this->currencyExchangeRates[_i370].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.currencyExchangeRates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->recommendedCountryCodes.clear();
            uint32_t _size371;
            ::apache::thrift::protocol::TType _etype374;
            xfer += iprot->readListBegin(_etype374, _size371);
            this->recommendedCountryCodes.resize(_size371);
            uint32_t _i375;
            for (_i375 = 0; _i375 < _size371; ++_i375)
            {
              xfer += iprot->readString(this->recommendedCountryCodes[_i375]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.recommendedCountryCodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->adCountries.clear();
            uint32_t _size376;
            ::apache::thrift::protocol::TType _etype379;
            xfer += iprot->readListBegin(_etype379, _size376);
            this->adCountries.resize(_size376);
            uint32_t _i380;
            for (_i380 = 0; _i380 < _size376; ++_i380)
            {
              xfer += this->adCountries[_i380].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.adCountries = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PaidCallMetadataResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PaidCallMetadataResult");

  xfer += oprot->writeFieldBegin("currencyExchangeRates", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->currencyExchangeRates.size()));
    std::vector<PaidCallCurrencyExchangeRate> ::const_iterator _iter381;
    for (_iter381 = this->currencyExchangeRates.begin(); _iter381 != this->currencyExchangeRates.end(); ++_iter381)
    {
      xfer += (*_iter381).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recommendedCountryCodes", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->recommendedCountryCodes.size()));
    std::vector<std::string> ::const_iterator _iter382;
    for (_iter382 = this->recommendedCountryCodes.begin(); _iter382 != this->recommendedCountryCodes.end(); ++_iter382)
    {
      xfer += oprot->writeString((*_iter382));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("adCountries", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->adCountries.size()));
    std::vector<PaidCallAdCountry> ::const_iterator _iter383;
    for (_iter383 = this->adCountries.begin(); _iter383 != this->adCountries.end(); ++_iter383)
    {
      xfer += (*_iter383).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PaidCallMetadataResult &a, PaidCallMetadataResult &b) {
  using ::std::swap;
  swap(a.currencyExchangeRates, b.currencyExchangeRates);
  swap(a.recommendedCountryCodes, b.recommendedCountryCodes);
  swap(a.adCountries, b.adCountries);
  swap(a.__isset, b.__isset);
}

PaidCallMetadataResult::PaidCallMetadataResult(const PaidCallMetadataResult& other384) {
  currencyExchangeRates = other384.currencyExchangeRates;
  recommendedCountryCodes = other384.recommendedCountryCodes;
  adCountries = other384.adCountries;
  __isset = other384.__isset;
}
PaidCallMetadataResult& PaidCallMetadataResult::operator=(const PaidCallMetadataResult& other385) {
  currencyExchangeRates = other385.currencyExchangeRates;
  recommendedCountryCodes = other385.recommendedCountryCodes;
  adCountries = other385.adCountries;
  __isset = other385.__isset;
  return *this;
}
void PaidCallMetadataResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PaidCallMetadataResult(";
  out << "currencyExchangeRates=" << to_string(currencyExchangeRates);
  out << ", " << "recommendedCountryCodes=" << to_string(recommendedCountryCodes);
  out << ", " << "adCountries=" << to_string(adCountries);
  out << ")";
}


PaidCallRedeemResult::~PaidCallRedeemResult() throw() {
}


void PaidCallRedeemResult::__set_eventName(const std::string& val) {
  this->eventName = val;
}

void PaidCallRedeemResult::__set_eventAmount(const int32_t val) {
  this->eventAmount = val;
}
std::ostream& operator<<(std::ostream& out, const PaidCallRedeemResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PaidCallRedeemResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventName);
          this->__isset.eventName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eventAmount);
          this->__isset.eventAmount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PaidCallRedeemResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PaidCallRedeemResult");

  xfer += oprot->writeFieldBegin("eventName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->eventName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventAmount", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->eventAmount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PaidCallRedeemResult &a, PaidCallRedeemResult &b) {
  using ::std::swap;
  swap(a.eventName, b.eventName);
  swap(a.eventAmount, b.eventAmount);
  swap(a.__isset, b.__isset);
}

PaidCallRedeemResult::PaidCallRedeemResult(const PaidCallRedeemResult& other386) {
  eventName = other386.eventName;
  eventAmount = other386.eventAmount;
  __isset = other386.__isset;
}
PaidCallRedeemResult& PaidCallRedeemResult::operator=(const PaidCallRedeemResult& other387) {
  eventName = other387.eventName;
  eventAmount = other387.eventAmount;
  __isset = other387.__isset;
  return *this;
}
void PaidCallRedeemResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PaidCallRedeemResult(";
  out << "eventName=" << to_string(eventName);
  out << ", " << "eventAmount=" << to_string(eventAmount);
  out << ")";
}


PaidCallResponse::~PaidCallResponse() throw() {
}


void PaidCallResponse::__set_host(const CallHost& val) {
  this->host = val;
}

void PaidCallResponse::__set_dialing(const PaidCallDialing& val) {
  this->dialing = val;
}

void PaidCallResponse::__set_token(const std::string& val) {
  this->token = val;
}

void PaidCallResponse::__set_spotItems(const std::vector<SpotItem> & val) {
  this->spotItems = val;
}
std::ostream& operator<<(std::ostream& out, const PaidCallResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PaidCallResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->host.read(iprot);
          this->__isset.host = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dialing.read(iprot);
          this->__isset.dialing = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->token);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->spotItems.clear();
            uint32_t _size388;
            ::apache::thrift::protocol::TType _etype391;
            xfer += iprot->readListBegin(_etype391, _size388);
            this->spotItems.resize(_size388);
            uint32_t _i392;
            for (_i392 = 0; _i392 < _size388; ++_i392)
            {
              xfer += this->spotItems[_i392].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.spotItems = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PaidCallResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PaidCallResponse");

  xfer += oprot->writeFieldBegin("host", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->host.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dialing", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dialing.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("spotItems", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->spotItems.size()));
    std::vector<SpotItem> ::const_iterator _iter393;
    for (_iter393 = this->spotItems.begin(); _iter393 != this->spotItems.end(); ++_iter393)
    {
      xfer += (*_iter393).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PaidCallResponse &a, PaidCallResponse &b) {
  using ::std::swap;
  swap(a.host, b.host);
  swap(a.dialing, b.dialing);
  swap(a.token, b.token);
  swap(a.spotItems, b.spotItems);
  swap(a.__isset, b.__isset);
}

PaidCallResponse::PaidCallResponse(const PaidCallResponse& other394) {
  host = other394.host;
  dialing = other394.dialing;
  token = other394.token;
  spotItems = other394.spotItems;
  __isset = other394.__isset;
}
PaidCallResponse& PaidCallResponse::operator=(const PaidCallResponse& other395) {
  host = other395.host;
  dialing = other395.dialing;
  token = other395.token;
  spotItems = other395.spotItems;
  __isset = other395.__isset;
  return *this;
}
void PaidCallResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PaidCallResponse(";
  out << "host=" << to_string(host);
  out << ", " << "dialing=" << to_string(dialing);
  out << ", " << "token=" << to_string(token);
  out << ", " << "spotItems=" << to_string(spotItems);
  out << ")";
}


PaidCallUserRate::~PaidCallUserRate() throw() {
}


void PaidCallUserRate::__set_countryCode(const std::string& val) {
  this->countryCode = val;
}

void PaidCallUserRate::__set_rate(const int32_t val) {
  this->rate = val;
}

void PaidCallUserRate::__set_rateDivision(const std::string& val) {
  this->rateDivision = val;
}

void PaidCallUserRate::__set_rateName(const std::string& val) {
  this->rateName = val;
}
std::ostream& operator<<(std::ostream& out, const PaidCallUserRate& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PaidCallUserRate::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->countryCode);
          this->__isset.countryCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rate);
          this->__isset.rate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rateDivision);
          this->__isset.rateDivision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rateName);
          this->__isset.rateName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PaidCallUserRate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PaidCallUserRate");

  xfer += oprot->writeFieldBegin("countryCode", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->countryCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rate", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->rate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rateDivision", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->rateDivision);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rateName", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->rateName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PaidCallUserRate &a, PaidCallUserRate &b) {
  using ::std::swap;
  swap(a.countryCode, b.countryCode);
  swap(a.rate, b.rate);
  swap(a.rateDivision, b.rateDivision);
  swap(a.rateName, b.rateName);
  swap(a.__isset, b.__isset);
}

PaidCallUserRate::PaidCallUserRate(const PaidCallUserRate& other396) {
  countryCode = other396.countryCode;
  rate = other396.rate;
  rateDivision = other396.rateDivision;
  rateName = other396.rateName;
  __isset = other396.__isset;
}
PaidCallUserRate& PaidCallUserRate::operator=(const PaidCallUserRate& other397) {
  countryCode = other397.countryCode;
  rate = other397.rate;
  rateDivision = other397.rateDivision;
  rateName = other397.rateName;
  __isset = other397.__isset;
  return *this;
}
void PaidCallUserRate::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PaidCallUserRate(";
  out << "countryCode=" << to_string(countryCode);
  out << ", " << "rate=" << to_string(rate);
  out << ", " << "rateDivision=" << to_string(rateDivision);
  out << ", " << "rateName=" << to_string(rateName);
  out << ")";
}


ChannelInfo::~ChannelInfo() throw() {
}


void ChannelInfo::__set_channelId(const std::string& val) {
  this->channelId = val;
}

void ChannelInfo::__set_name(const std::string& val) {
  this->name = val;
}

void ChannelInfo::__set_entryPageUrl(const std::string& val) {
  this->entryPageUrl = val;
}

void ChannelInfo::__set_descriptionText(const std::string& val) {
  this->descriptionText = val;
}

void ChannelInfo::__set_provider(const ChannelProvider& val) {
  this->provider = val;
}

void ChannelInfo::__set_publicType(const PublicType::type val) {
  this->publicType = val;
}

void ChannelInfo::__set_iconImage(const std::string& val) {
  this->iconImage = val;
}

void ChannelInfo::__set_permissions(const std::vector<std::string> & val) {
  this->permissions = val;
}

void ChannelInfo::__set_iconThumbnailImage(const std::string& val) {
  this->iconThumbnailImage = val;
}

void ChannelInfo::__set_channelConfigurations(const std::vector<ChannelConfiguration::type> & val) {
  this->channelConfigurations = val;
}

void ChannelInfo::__set_lcsAllApiUsable(const bool val) {
  this->lcsAllApiUsable = val;
}

void ChannelInfo::__set_allowedPermissions(const std::set<ChannelPermission::type> & val) {
  this->allowedPermissions = val;
}

void ChannelInfo::__set_channelDomains(const std::vector<ChannelDomain> & val) {
  this->channelDomains = val;
}

void ChannelInfo::__set_updatedTimestamp(const int64_t val) {
  this->updatedTimestamp = val;
}
std::ostream& operator<<(std::ostream& out, const ChannelInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ChannelInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->channelId);
          this->__isset.channelId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->entryPageUrl);
          this->__isset.entryPageUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->descriptionText);
          this->__isset.descriptionText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->provider.read(iprot);
          this->__isset.provider = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast398;
          xfer += iprot->readI32(ecast398);
          this->publicType = (PublicType::type)ecast398;
          this->__isset.publicType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->iconImage);
          this->__isset.iconImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->permissions.clear();
            uint32_t _size399;
            ::apache::thrift::protocol::TType _etype402;
            xfer += iprot->readListBegin(_etype402, _size399);
            this->permissions.resize(_size399);
            uint32_t _i403;
            for (_i403 = 0; _i403 < _size399; ++_i403)
            {
              xfer += iprot->readString(this->permissions[_i403]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.permissions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->iconThumbnailImage);
          this->__isset.iconThumbnailImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->channelConfigurations.clear();
            uint32_t _size404;
            ::apache::thrift::protocol::TType _etype407;
            xfer += iprot->readListBegin(_etype407, _size404);
            this->channelConfigurations.resize(_size404);
            uint32_t _i408;
            for (_i408 = 0; _i408 < _size404; ++_i408)
            {
              int32_t ecast409;
              xfer += iprot->readI32(ecast409);
              this->channelConfigurations[_i408] = (ChannelConfiguration::type)ecast409;
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.channelConfigurations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->lcsAllApiUsable);
          this->__isset.lcsAllApiUsable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->allowedPermissions.clear();
            uint32_t _size410;
            ::apache::thrift::protocol::TType _etype413;
            xfer += iprot->readSetBegin(_etype413, _size410);
            uint32_t _i414;
            for (_i414 = 0; _i414 < _size410; ++_i414)
            {
              ChannelPermission::type _elem415;
              int32_t ecast416;
              xfer += iprot->readI32(ecast416);
              _elem415 = (ChannelPermission::type)ecast416;
              this->allowedPermissions.insert(_elem415);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.allowedPermissions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->channelDomains.clear();
            uint32_t _size417;
            ::apache::thrift::protocol::TType _etype420;
            xfer += iprot->readListBegin(_etype420, _size417);
            this->channelDomains.resize(_size417);
            uint32_t _i421;
            for (_i421 = 0; _i421 < _size417; ++_i421)
            {
              xfer += this->channelDomains[_i421].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.channelDomains = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->updatedTimestamp);
          this->__isset.updatedTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ChannelInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ChannelInfo");

  xfer += oprot->writeFieldBegin("channelId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->channelId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("entryPageUrl", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->entryPageUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("descriptionText", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->descriptionText);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("provider", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->provider.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("publicType", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->publicType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("iconImage", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->iconImage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("permissions", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->permissions.size()));
    std::vector<std::string> ::const_iterator _iter422;
    for (_iter422 = this->permissions.begin(); _iter422 != this->permissions.end(); ++_iter422)
    {
      xfer += oprot->writeString((*_iter422));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("iconThumbnailImage", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->iconThumbnailImage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channelConfigurations", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->channelConfigurations.size()));
    std::vector<ChannelConfiguration::type> ::const_iterator _iter423;
    for (_iter423 = this->channelConfigurations.begin(); _iter423 != this->channelConfigurations.end(); ++_iter423)
    {
      xfer += oprot->writeI32((int32_t)(*_iter423));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lcsAllApiUsable", ::apache::thrift::protocol::T_BOOL, 13);
  xfer += oprot->writeBool(this->lcsAllApiUsable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("allowedPermissions", ::apache::thrift::protocol::T_SET, 14);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->allowedPermissions.size()));
    std::set<ChannelPermission::type> ::const_iterator _iter424;
    for (_iter424 = this->allowedPermissions.begin(); _iter424 != this->allowedPermissions.end(); ++_iter424)
    {
      xfer += oprot->writeI32((int32_t)(*_iter424));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channelDomains", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->channelDomains.size()));
    std::vector<ChannelDomain> ::const_iterator _iter425;
    for (_iter425 = this->channelDomains.begin(); _iter425 != this->channelDomains.end(); ++_iter425)
    {
      xfer += (*_iter425).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("updatedTimestamp", ::apache::thrift::protocol::T_I64, 16);
  xfer += oprot->writeI64(this->updatedTimestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ChannelInfo &a, ChannelInfo &b) {
  using ::std::swap;
  swap(a.channelId, b.channelId);
  swap(a.name, b.name);
  swap(a.entryPageUrl, b.entryPageUrl);
  swap(a.descriptionText, b.descriptionText);
  swap(a.provider, b.provider);
  swap(a.publicType, b.publicType);
  swap(a.iconImage, b.iconImage);
  swap(a.permissions, b.permissions);
  swap(a.iconThumbnailImage, b.iconThumbnailImage);
  swap(a.channelConfigurations, b.channelConfigurations);
  swap(a.lcsAllApiUsable, b.lcsAllApiUsable);
  swap(a.allowedPermissions, b.allowedPermissions);
  swap(a.channelDomains, b.channelDomains);
  swap(a.updatedTimestamp, b.updatedTimestamp);
  swap(a.__isset, b.__isset);
}

ChannelInfo::ChannelInfo(const ChannelInfo& other426) {
  channelId = other426.channelId;
  name = other426.name;
  entryPageUrl = other426.entryPageUrl;
  descriptionText = other426.descriptionText;
  provider = other426.provider;
  publicType = other426.publicType;
  iconImage = other426.iconImage;
  permissions = other426.permissions;
  iconThumbnailImage = other426.iconThumbnailImage;
  channelConfigurations = other426.channelConfigurations;
  lcsAllApiUsable = other426.lcsAllApiUsable;
  allowedPermissions = other426.allowedPermissions;
  channelDomains = other426.channelDomains;
  updatedTimestamp = other426.updatedTimestamp;
  __isset = other426.__isset;
}
ChannelInfo& ChannelInfo::operator=(const ChannelInfo& other427) {
  channelId = other427.channelId;
  name = other427.name;
  entryPageUrl = other427.entryPageUrl;
  descriptionText = other427.descriptionText;
  provider = other427.provider;
  publicType = other427.publicType;
  iconImage = other427.iconImage;
  permissions = other427.permissions;
  iconThumbnailImage = other427.iconThumbnailImage;
  channelConfigurations = other427.channelConfigurations;
  lcsAllApiUsable = other427.lcsAllApiUsable;
  allowedPermissions = other427.allowedPermissions;
  channelDomains = other427.channelDomains;
  updatedTimestamp = other427.updatedTimestamp;
  __isset = other427.__isset;
  return *this;
}
void ChannelInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ChannelInfo(";
  out << "channelId=" << to_string(channelId);
  out << ", " << "name=" << to_string(name);
  out << ", " << "entryPageUrl=" << to_string(entryPageUrl);
  out << ", " << "descriptionText=" << to_string(descriptionText);
  out << ", " << "provider=" << to_string(provider);
  out << ", " << "publicType=" << to_string(publicType);
  out << ", " << "iconImage=" << to_string(iconImage);
  out << ", " << "permissions=" << to_string(permissions);
  out << ", " << "iconThumbnailImage=" << to_string(iconThumbnailImage);
  out << ", " << "channelConfigurations=" << to_string(channelConfigurations);
  out << ", " << "lcsAllApiUsable=" << to_string(lcsAllApiUsable);
  out << ", " << "allowedPermissions=" << to_string(allowedPermissions);
  out << ", " << "channelDomains=" << to_string(channelDomains);
  out << ", " << "updatedTimestamp=" << to_string(updatedTimestamp);
  out << ")";
}


ApprovedChannelInfo::~ApprovedChannelInfo() throw() {
}


void ApprovedChannelInfo::__set_channelInfo(const ChannelInfo& val) {
  this->channelInfo = val;
}

void ApprovedChannelInfo::__set_approvedAt(const int64_t val) {
  this->approvedAt = val;
}
std::ostream& operator<<(std::ostream& out, const ApprovedChannelInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ApprovedChannelInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->channelInfo.read(iprot);
          this->__isset.channelInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->approvedAt);
          this->__isset.approvedAt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ApprovedChannelInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ApprovedChannelInfo");

  xfer += oprot->writeFieldBegin("channelInfo", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->channelInfo.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("approvedAt", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->approvedAt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ApprovedChannelInfo &a, ApprovedChannelInfo &b) {
  using ::std::swap;
  swap(a.channelInfo, b.channelInfo);
  swap(a.approvedAt, b.approvedAt);
  swap(a.__isset, b.__isset);
}

ApprovedChannelInfo::ApprovedChannelInfo(const ApprovedChannelInfo& other428) {
  channelInfo = other428.channelInfo;
  approvedAt = other428.approvedAt;
  __isset = other428.__isset;
}
ApprovedChannelInfo& ApprovedChannelInfo::operator=(const ApprovedChannelInfo& other429) {
  channelInfo = other429.channelInfo;
  approvedAt = other429.approvedAt;
  __isset = other429.__isset;
  return *this;
}
void ApprovedChannelInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ApprovedChannelInfo(";
  out << "channelInfo=" << to_string(channelInfo);
  out << ", " << "approvedAt=" << to_string(approvedAt);
  out << ")";
}


ApprovedChannelInfos::~ApprovedChannelInfos() throw() {
}


void ApprovedChannelInfos::__set_approvedChannelInfos(const std::vector<ApprovedChannelInfo> & val) {
  this->approvedChannelInfos = val;
}

void ApprovedChannelInfos::__set_revision(const int64_t val) {
  this->revision = val;
}
std::ostream& operator<<(std::ostream& out, const ApprovedChannelInfos& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ApprovedChannelInfos::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->approvedChannelInfos.clear();
            uint32_t _size430;
            ::apache::thrift::protocol::TType _etype433;
            xfer += iprot->readListBegin(_etype433, _size430);
            this->approvedChannelInfos.resize(_size430);
            uint32_t _i434;
            for (_i434 = 0; _i434 < _size430; ++_i434)
            {
              xfer += this->approvedChannelInfos[_i434].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.approvedChannelInfos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->revision);
          this->__isset.revision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ApprovedChannelInfos::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ApprovedChannelInfos");

  xfer += oprot->writeFieldBegin("approvedChannelInfos", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->approvedChannelInfos.size()));
    std::vector<ApprovedChannelInfo> ::const_iterator _iter435;
    for (_iter435 = this->approvedChannelInfos.begin(); _iter435 != this->approvedChannelInfos.end(); ++_iter435)
    {
      xfer += (*_iter435).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("revision", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->revision);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ApprovedChannelInfos &a, ApprovedChannelInfos &b) {
  using ::std::swap;
  swap(a.approvedChannelInfos, b.approvedChannelInfos);
  swap(a.revision, b.revision);
  swap(a.__isset, b.__isset);
}

ApprovedChannelInfos::ApprovedChannelInfos(const ApprovedChannelInfos& other436) {
  approvedChannelInfos = other436.approvedChannelInfos;
  revision = other436.revision;
  __isset = other436.__isset;
}
ApprovedChannelInfos& ApprovedChannelInfos::operator=(const ApprovedChannelInfos& other437) {
  approvedChannelInfos = other437.approvedChannelInfos;
  revision = other437.revision;
  __isset = other437.__isset;
  return *this;
}
void ApprovedChannelInfos::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ApprovedChannelInfos(";
  out << "approvedChannelInfos=" << to_string(approvedChannelInfos);
  out << ", " << "revision=" << to_string(revision);
  out << ")";
}


AuthQrcode::~AuthQrcode() throw() {
}


void AuthQrcode::__set_qrcode(const std::string& val) {
  this->qrcode = val;
}

void AuthQrcode::__set_verifier(const std::string& val) {
  this->verifier = val;
}

void AuthQrcode::__set_callbackUrl(const std::string& val) {
  this->callbackUrl = val;
}
std::ostream& operator<<(std::ostream& out, const AuthQrcode& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AuthQrcode::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->qrcode);
          this->__isset.qrcode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->verifier);
          this->__isset.verifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->callbackUrl);
          this->__isset.callbackUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AuthQrcode::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AuthQrcode");

  xfer += oprot->writeFieldBegin("qrcode", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->qrcode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("verifier", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->verifier);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("callbackUrl", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->callbackUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AuthQrcode &a, AuthQrcode &b) {
  using ::std::swap;
  swap(a.qrcode, b.qrcode);
  swap(a.verifier, b.verifier);
  swap(a.callbackUrl, b.callbackUrl);
  swap(a.__isset, b.__isset);
}

AuthQrcode::AuthQrcode(const AuthQrcode& other438) {
  qrcode = other438.qrcode;
  verifier = other438.verifier;
  callbackUrl = other438.callbackUrl;
  __isset = other438.__isset;
}
AuthQrcode& AuthQrcode::operator=(const AuthQrcode& other439) {
  qrcode = other439.qrcode;
  verifier = other439.verifier;
  callbackUrl = other439.callbackUrl;
  __isset = other439.__isset;
  return *this;
}
void AuthQrcode::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AuthQrcode(";
  out << "qrcode=" << to_string(qrcode);
  out << ", " << "verifier=" << to_string(verifier);
  out << ", " << "callbackUrl=" << to_string(callbackUrl);
  out << ")";
}


AnalyticsInfo::~AnalyticsInfo() throw() {
}


void AnalyticsInfo::__set_gaSamplingRate(const double val) {
  this->gaSamplingRate = val;
}

void AnalyticsInfo::__set_tmid(const std::string& val) {
  this->tmid = val;
}
std::ostream& operator<<(std::ostream& out, const AnalyticsInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AnalyticsInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->gaSamplingRate);
          this->__isset.gaSamplingRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tmid);
          this->__isset.tmid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AnalyticsInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AnalyticsInfo");

  xfer += oprot->writeFieldBegin("gaSamplingRate", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->gaSamplingRate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tmid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tmid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AnalyticsInfo &a, AnalyticsInfo &b) {
  using ::std::swap;
  swap(a.gaSamplingRate, b.gaSamplingRate);
  swap(a.tmid, b.tmid);
  swap(a.__isset, b.__isset);
}

AnalyticsInfo::AnalyticsInfo(const AnalyticsInfo& other440) {
  gaSamplingRate = other440.gaSamplingRate;
  tmid = other440.tmid;
  __isset = other440.__isset;
}
AnalyticsInfo& AnalyticsInfo::operator=(const AnalyticsInfo& other441) {
  gaSamplingRate = other441.gaSamplingRate;
  tmid = other441.tmid;
  __isset = other441.__isset;
  return *this;
}
void AnalyticsInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AnalyticsInfo(";
  out << "gaSamplingRate=" << to_string(gaSamplingRate);
  out << ", " << "tmid=" << to_string(tmid);
  out << ")";
}


ContactTransition::~ContactTransition() throw() {
}


void ContactTransition::__set_ownerMid(const std::string& val) {
  this->ownerMid = val;
}

void ContactTransition::__set_targetMid(const std::string& val) {
  this->targetMid = val;
}

void ContactTransition::__set_previousStatus(const ContactStatus::type val) {
  this->previousStatus = val;
}

void ContactTransition::__set_resultStatus(const ContactStatus::type val) {
  this->resultStatus = val;
}
std::ostream& operator<<(std::ostream& out, const ContactTransition& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ContactTransition::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ownerMid);
          this->__isset.ownerMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->targetMid);
          this->__isset.targetMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast442;
          xfer += iprot->readI32(ecast442);
          this->previousStatus = (ContactStatus::type)ecast442;
          this->__isset.previousStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast443;
          xfer += iprot->readI32(ecast443);
          this->resultStatus = (ContactStatus::type)ecast443;
          this->__isset.resultStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ContactTransition::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ContactTransition");

  xfer += oprot->writeFieldBegin("ownerMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->ownerMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("targetMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->targetMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("previousStatus", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->previousStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("resultStatus", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->resultStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ContactTransition &a, ContactTransition &b) {
  using ::std::swap;
  swap(a.ownerMid, b.ownerMid);
  swap(a.targetMid, b.targetMid);
  swap(a.previousStatus, b.previousStatus);
  swap(a.resultStatus, b.resultStatus);
  swap(a.__isset, b.__isset);
}

ContactTransition::ContactTransition(const ContactTransition& other444) {
  ownerMid = other444.ownerMid;
  targetMid = other444.targetMid;
  previousStatus = other444.previousStatus;
  resultStatus = other444.resultStatus;
  __isset = other444.__isset;
}
ContactTransition& ContactTransition::operator=(const ContactTransition& other445) {
  ownerMid = other445.ownerMid;
  targetMid = other445.targetMid;
  previousStatus = other445.previousStatus;
  resultStatus = other445.resultStatus;
  __isset = other445.__isset;
  return *this;
}
void ContactTransition::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ContactTransition(";
  out << "ownerMid=" << to_string(ownerMid);
  out << ", " << "targetMid=" << to_string(targetMid);
  out << ", " << "previousStatus=" << to_string(previousStatus);
  out << ", " << "resultStatus=" << to_string(resultStatus);
  out << ")";
}


UserTicketResponse::~UserTicketResponse() throw() {
}


void UserTicketResponse::__set_mid(const std::string& val) {
  this->mid = val;
}

void UserTicketResponse::__set_userTicket(const std::string& val) {
  this->userTicket = val;
}
std::ostream& operator<<(std::ostream& out, const UserTicketResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UserTicketResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mid);
          this->__isset.mid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userTicket);
          this->__isset.userTicket = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserTicketResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UserTicketResponse");

  xfer += oprot->writeFieldBegin("mid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->mid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userTicket", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->userTicket);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserTicketResponse &a, UserTicketResponse &b) {
  using ::std::swap;
  swap(a.mid, b.mid);
  swap(a.userTicket, b.userTicket);
  swap(a.__isset, b.__isset);
}

UserTicketResponse::UserTicketResponse(const UserTicketResponse& other446) {
  mid = other446.mid;
  userTicket = other446.userTicket;
  __isset = other446.__isset;
}
UserTicketResponse& UserTicketResponse::operator=(const UserTicketResponse& other447) {
  mid = other447.mid;
  userTicket = other447.userTicket;
  __isset = other447.__isset;
  return *this;
}
void UserTicketResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UserTicketResponse(";
  out << "mid=" << to_string(mid);
  out << ", " << "userTicket=" << to_string(userTicket);
  out << ")";
}


BuddyBanner::~BuddyBanner() throw() {
}


void BuddyBanner::__set_buddyBannerLinkType(const BuddyBannerLinkType::type val) {
  this->buddyBannerLinkType = val;
}

void BuddyBanner::__set_buddyBannerLink(const std::string& val) {
  this->buddyBannerLink = val;
}

void BuddyBanner::__set_buddyBannerImageUrl(const std::string& val) {
  this->buddyBannerImageUrl = val;
}
std::ostream& operator<<(std::ostream& out, const BuddyBanner& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BuddyBanner::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast448;
          xfer += iprot->readI32(ecast448);
          this->buddyBannerLinkType = (BuddyBannerLinkType::type)ecast448;
          this->__isset.buddyBannerLinkType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->buddyBannerLink);
          this->__isset.buddyBannerLink = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->buddyBannerImageUrl);
          this->__isset.buddyBannerImageUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BuddyBanner::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BuddyBanner");

  xfer += oprot->writeFieldBegin("buddyBannerLinkType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->buddyBannerLinkType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buddyBannerLink", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->buddyBannerLink);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buddyBannerImageUrl", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->buddyBannerImageUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BuddyBanner &a, BuddyBanner &b) {
  using ::std::swap;
  swap(a.buddyBannerLinkType, b.buddyBannerLinkType);
  swap(a.buddyBannerLink, b.buddyBannerLink);
  swap(a.buddyBannerImageUrl, b.buddyBannerImageUrl);
  swap(a.__isset, b.__isset);
}

BuddyBanner::BuddyBanner(const BuddyBanner& other449) {
  buddyBannerLinkType = other449.buddyBannerLinkType;
  buddyBannerLink = other449.buddyBannerLink;
  buddyBannerImageUrl = other449.buddyBannerImageUrl;
  __isset = other449.__isset;
}
BuddyBanner& BuddyBanner::operator=(const BuddyBanner& other450) {
  buddyBannerLinkType = other450.buddyBannerLinkType;
  buddyBannerLink = other450.buddyBannerLink;
  buddyBannerImageUrl = other450.buddyBannerImageUrl;
  __isset = other450.__isset;
  return *this;
}
void BuddyBanner::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BuddyBanner(";
  out << "buddyBannerLinkType=" << to_string(buddyBannerLinkType);
  out << ", " << "buddyBannerLink=" << to_string(buddyBannerLink);
  out << ", " << "buddyBannerImageUrl=" << to_string(buddyBannerImageUrl);
  out << ")";
}


BuddyDetail::~BuddyDetail() throw() {
}


void BuddyDetail::__set_mid(const std::string& val) {
  this->mid = val;
}

void BuddyDetail::__set_memberCount(const int64_t val) {
  this->memberCount = val;
}

void BuddyDetail::__set_onAir(const bool val) {
  this->onAir = val;
}

void BuddyDetail::__set_businessAccount(const bool val) {
  this->businessAccount = val;
}

void BuddyDetail::__set_addable(const bool val) {
  this->addable = val;
}

void BuddyDetail::__set_acceptableContentTypes(const std::set<ContentType::type> & val) {
  this->acceptableContentTypes = val;
}

void BuddyDetail::__set_capableMyhome(const bool val) {
  this->capableMyhome = val;
}
std::ostream& operator<<(std::ostream& out, const BuddyDetail& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BuddyDetail::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mid);
          this->__isset.mid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->memberCount);
          this->__isset.memberCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->onAir);
          this->__isset.onAir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->businessAccount);
          this->__isset.businessAccount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->addable);
          this->__isset.addable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->acceptableContentTypes.clear();
            uint32_t _size451;
            ::apache::thrift::protocol::TType _etype454;
            xfer += iprot->readSetBegin(_etype454, _size451);
            uint32_t _i455;
            for (_i455 = 0; _i455 < _size451; ++_i455)
            {
              ContentType::type _elem456;
              int32_t ecast457;
              xfer += iprot->readI32(ecast457);
              _elem456 = (ContentType::type)ecast457;
              this->acceptableContentTypes.insert(_elem456);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.acceptableContentTypes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->capableMyhome);
          this->__isset.capableMyhome = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BuddyDetail::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BuddyDetail");

  xfer += oprot->writeFieldBegin("mid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->mid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("memberCount", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->memberCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("onAir", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->onAir);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("businessAccount", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->businessAccount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("addable", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->addable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("acceptableContentTypes", ::apache::thrift::protocol::T_SET, 6);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->acceptableContentTypes.size()));
    std::set<ContentType::type> ::const_iterator _iter458;
    for (_iter458 = this->acceptableContentTypes.begin(); _iter458 != this->acceptableContentTypes.end(); ++_iter458)
    {
      xfer += oprot->writeI32((int32_t)(*_iter458));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("capableMyhome", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->capableMyhome);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BuddyDetail &a, BuddyDetail &b) {
  using ::std::swap;
  swap(a.mid, b.mid);
  swap(a.memberCount, b.memberCount);
  swap(a.onAir, b.onAir);
  swap(a.businessAccount, b.businessAccount);
  swap(a.addable, b.addable);
  swap(a.acceptableContentTypes, b.acceptableContentTypes);
  swap(a.capableMyhome, b.capableMyhome);
  swap(a.__isset, b.__isset);
}

BuddyDetail::BuddyDetail(const BuddyDetail& other459) {
  mid = other459.mid;
  memberCount = other459.memberCount;
  onAir = other459.onAir;
  businessAccount = other459.businessAccount;
  addable = other459.addable;
  acceptableContentTypes = other459.acceptableContentTypes;
  capableMyhome = other459.capableMyhome;
  __isset = other459.__isset;
}
BuddyDetail& BuddyDetail::operator=(const BuddyDetail& other460) {
  mid = other460.mid;
  memberCount = other460.memberCount;
  onAir = other460.onAir;
  businessAccount = other460.businessAccount;
  addable = other460.addable;
  acceptableContentTypes = other460.acceptableContentTypes;
  capableMyhome = other460.capableMyhome;
  __isset = other460.__isset;
  return *this;
}
void BuddyDetail::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BuddyDetail(";
  out << "mid=" << to_string(mid);
  out << ", " << "memberCount=" << to_string(memberCount);
  out << ", " << "onAir=" << to_string(onAir);
  out << ", " << "businessAccount=" << to_string(businessAccount);
  out << ", " << "addable=" << to_string(addable);
  out << ", " << "acceptableContentTypes=" << to_string(acceptableContentTypes);
  out << ", " << "capableMyhome=" << to_string(capableMyhome);
  out << ")";
}


Contact::~Contact() throw() {
}


void Contact::__set_mid(const std::string& val) {
  this->mid = val;
}

void Contact::__set_createdTime(const int64_t val) {
  this->createdTime = val;
}

void Contact::__set_type(const ContactType::type val) {
  this->type = val;
}

void Contact::__set_status(const ContactStatus::type val) {
  this->status = val;
}

void Contact::__set_relation(const ContactRelation::type val) {
  this->relation = val;
}

void Contact::__set_displayName(const std::string& val) {
  this->displayName = val;
}

void Contact::__set_phoneticName(const std::string& val) {
  this->phoneticName = val;
}

void Contact::__set_pictureStatus(const std::string& val) {
  this->pictureStatus = val;
}

void Contact::__set_thumbnailUrl(const std::string& val) {
  this->thumbnailUrl = val;
}

void Contact::__set_statusMessage(const std::string& val) {
  this->statusMessage = val;
}

void Contact::__set_displayNameOverridden(const std::string& val) {
  this->displayNameOverridden = val;
}

void Contact::__set_favoriteTime(const int64_t val) {
  this->favoriteTime = val;
}

void Contact::__set_capableVoiceCall(const bool val) {
  this->capableVoiceCall = val;
}

void Contact::__set_capableVideoCall(const bool val) {
  this->capableVideoCall = val;
}

void Contact::__set_capableMyhome(const bool val) {
  this->capableMyhome = val;
}

void Contact::__set_capableBuddy(const bool val) {
  this->capableBuddy = val;
}

void Contact::__set_attributes(const int32_t val) {
  this->attributes = val;
}

void Contact::__set_settings(const int64_t val) {
  this->settings = val;
}

void Contact::__set_picturePath(const std::string& val) {
  this->picturePath = val;
}

void Contact::__set_recommendParams(const std::string& val) {
  this->recommendParams = val;
}

void Contact::__set_friendRequestStatus(const FriendRequestStatus::type val) {
  this->friendRequestStatus = val;
}

void Contact::__set_musicProfile(const std::string& val) {
  this->musicProfile = val;
}

void Contact::__set_videoProfile(const std::string& val) {
  this->videoProfile = val;
}

void Contact::__set_statusMessageContentMetadata(const std::map<std::string, std::string> & val) {
  this->statusMessageContentMetadata = val;
}
std::ostream& operator<<(std::ostream& out, const Contact& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Contact::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mid);
          this->__isset.mid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createdTime);
          this->__isset.createdTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast461;
          xfer += iprot->readI32(ecast461);
          this->type = (ContactType::type)ecast461;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast462;
          xfer += iprot->readI32(ecast462);
          this->status = (ContactStatus::type)ecast462;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast463;
          xfer += iprot->readI32(ecast463);
          this->relation = (ContactRelation::type)ecast463;
          this->__isset.relation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->displayName);
          this->__isset.displayName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phoneticName);
          this->__isset.phoneticName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pictureStatus);
          this->__isset.pictureStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->thumbnailUrl);
          this->__isset.thumbnailUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->statusMessage);
          this->__isset.statusMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->displayNameOverridden);
          this->__isset.displayNameOverridden = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->favoriteTime);
          this->__isset.favoriteTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->capableVoiceCall);
          this->__isset.capableVoiceCall = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->capableVideoCall);
          this->__isset.capableVideoCall = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->capableMyhome);
          this->__isset.capableMyhome = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->capableBuddy);
          this->__isset.capableBuddy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->attributes);
          this->__isset.attributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->settings);
          this->__isset.settings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->picturePath);
          this->__isset.picturePath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 38:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->recommendParams);
          this->__isset.recommendParams = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 39:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast464;
          xfer += iprot->readI32(ecast464);
          this->friendRequestStatus = (FriendRequestStatus::type)ecast464;
          this->__isset.friendRequestStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->musicProfile);
          this->__isset.musicProfile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->videoProfile);
          this->__isset.videoProfile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 43:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->statusMessageContentMetadata.clear();
            uint32_t _size465;
            ::apache::thrift::protocol::TType _ktype466;
            ::apache::thrift::protocol::TType _vtype467;
            xfer += iprot->readMapBegin(_ktype466, _vtype467, _size465);
            uint32_t _i469;
            for (_i469 = 0; _i469 < _size465; ++_i469)
            {
              std::string _key470;
              xfer += iprot->readString(_key470);
              std::string& _val471 = this->statusMessageContentMetadata[_key470];
              xfer += iprot->readString(_val471);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.statusMessageContentMetadata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Contact::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Contact");

  xfer += oprot->writeFieldBegin("mid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->mid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createdTime", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->createdTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("relation", ::apache::thrift::protocol::T_I32, 21);
  xfer += oprot->writeI32((int32_t)this->relation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayName", ::apache::thrift::protocol::T_STRING, 22);
  xfer += oprot->writeString(this->displayName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phoneticName", ::apache::thrift::protocol::T_STRING, 23);
  xfer += oprot->writeString(this->phoneticName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pictureStatus", ::apache::thrift::protocol::T_STRING, 24);
  xfer += oprot->writeString(this->pictureStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thumbnailUrl", ::apache::thrift::protocol::T_STRING, 25);
  xfer += oprot->writeString(this->thumbnailUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("statusMessage", ::apache::thrift::protocol::T_STRING, 26);
  xfer += oprot->writeString(this->statusMessage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayNameOverridden", ::apache::thrift::protocol::T_STRING, 27);
  xfer += oprot->writeString(this->displayNameOverridden);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("favoriteTime", ::apache::thrift::protocol::T_I64, 28);
  xfer += oprot->writeI64(this->favoriteTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("capableVoiceCall", ::apache::thrift::protocol::T_BOOL, 31);
  xfer += oprot->writeBool(this->capableVoiceCall);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("capableVideoCall", ::apache::thrift::protocol::T_BOOL, 32);
  xfer += oprot->writeBool(this->capableVideoCall);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("capableMyhome", ::apache::thrift::protocol::T_BOOL, 33);
  xfer += oprot->writeBool(this->capableMyhome);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("capableBuddy", ::apache::thrift::protocol::T_BOOL, 34);
  xfer += oprot->writeBool(this->capableBuddy);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("attributes", ::apache::thrift::protocol::T_I32, 35);
  xfer += oprot->writeI32(this->attributes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("settings", ::apache::thrift::protocol::T_I64, 36);
  xfer += oprot->writeI64(this->settings);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("picturePath", ::apache::thrift::protocol::T_STRING, 37);
  xfer += oprot->writeString(this->picturePath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recommendParams", ::apache::thrift::protocol::T_STRING, 38);
  xfer += oprot->writeString(this->recommendParams);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("friendRequestStatus", ::apache::thrift::protocol::T_I32, 39);
  xfer += oprot->writeI32((int32_t)this->friendRequestStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("musicProfile", ::apache::thrift::protocol::T_STRING, 40);
  xfer += oprot->writeString(this->musicProfile);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("videoProfile", ::apache::thrift::protocol::T_STRING, 42);
  xfer += oprot->writeString(this->videoProfile);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("statusMessageContentMetadata", ::apache::thrift::protocol::T_MAP, 43);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->statusMessageContentMetadata.size()));
    std::map<std::string, std::string> ::const_iterator _iter472;
    for (_iter472 = this->statusMessageContentMetadata.begin(); _iter472 != this->statusMessageContentMetadata.end(); ++_iter472)
    {
      xfer += oprot->writeString(_iter472->first);
      xfer += oprot->writeString(_iter472->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Contact &a, Contact &b) {
  using ::std::swap;
  swap(a.mid, b.mid);
  swap(a.createdTime, b.createdTime);
  swap(a.type, b.type);
  swap(a.status, b.status);
  swap(a.relation, b.relation);
  swap(a.displayName, b.displayName);
  swap(a.phoneticName, b.phoneticName);
  swap(a.pictureStatus, b.pictureStatus);
  swap(a.thumbnailUrl, b.thumbnailUrl);
  swap(a.statusMessage, b.statusMessage);
  swap(a.displayNameOverridden, b.displayNameOverridden);
  swap(a.favoriteTime, b.favoriteTime);
  swap(a.capableVoiceCall, b.capableVoiceCall);
  swap(a.capableVideoCall, b.capableVideoCall);
  swap(a.capableMyhome, b.capableMyhome);
  swap(a.capableBuddy, b.capableBuddy);
  swap(a.attributes, b.attributes);
  swap(a.settings, b.settings);
  swap(a.picturePath, b.picturePath);
  swap(a.recommendParams, b.recommendParams);
  swap(a.friendRequestStatus, b.friendRequestStatus);
  swap(a.musicProfile, b.musicProfile);
  swap(a.videoProfile, b.videoProfile);
  swap(a.statusMessageContentMetadata, b.statusMessageContentMetadata);
  swap(a.__isset, b.__isset);
}

Contact::Contact(const Contact& other473) {
  mid = other473.mid;
  createdTime = other473.createdTime;
  type = other473.type;
  status = other473.status;
  relation = other473.relation;
  displayName = other473.displayName;
  phoneticName = other473.phoneticName;
  pictureStatus = other473.pictureStatus;
  thumbnailUrl = other473.thumbnailUrl;
  statusMessage = other473.statusMessage;
  displayNameOverridden = other473.displayNameOverridden;
  favoriteTime = other473.favoriteTime;
  capableVoiceCall = other473.capableVoiceCall;
  capableVideoCall = other473.capableVideoCall;
  capableMyhome = other473.capableMyhome;
  capableBuddy = other473.capableBuddy;
  attributes = other473.attributes;
  settings = other473.settings;
  picturePath = other473.picturePath;
  recommendParams = other473.recommendParams;
  friendRequestStatus = other473.friendRequestStatus;
  musicProfile = other473.musicProfile;
  videoProfile = other473.videoProfile;
  statusMessageContentMetadata = other473.statusMessageContentMetadata;
  __isset = other473.__isset;
}
Contact& Contact::operator=(const Contact& other474) {
  mid = other474.mid;
  createdTime = other474.createdTime;
  type = other474.type;
  status = other474.status;
  relation = other474.relation;
  displayName = other474.displayName;
  phoneticName = other474.phoneticName;
  pictureStatus = other474.pictureStatus;
  thumbnailUrl = other474.thumbnailUrl;
  statusMessage = other474.statusMessage;
  displayNameOverridden = other474.displayNameOverridden;
  favoriteTime = other474.favoriteTime;
  capableVoiceCall = other474.capableVoiceCall;
  capableVideoCall = other474.capableVideoCall;
  capableMyhome = other474.capableMyhome;
  capableBuddy = other474.capableBuddy;
  attributes = other474.attributes;
  settings = other474.settings;
  picturePath = other474.picturePath;
  recommendParams = other474.recommendParams;
  friendRequestStatus = other474.friendRequestStatus;
  musicProfile = other474.musicProfile;
  videoProfile = other474.videoProfile;
  statusMessageContentMetadata = other474.statusMessageContentMetadata;
  __isset = other474.__isset;
  return *this;
}
void Contact::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Contact(";
  out << "mid=" << to_string(mid);
  out << ", " << "createdTime=" << to_string(createdTime);
  out << ", " << "type=" << to_string(type);
  out << ", " << "status=" << to_string(status);
  out << ", " << "relation=" << to_string(relation);
  out << ", " << "displayName=" << to_string(displayName);
  out << ", " << "phoneticName=" << to_string(phoneticName);
  out << ", " << "pictureStatus=" << to_string(pictureStatus);
  out << ", " << "thumbnailUrl=" << to_string(thumbnailUrl);
  out << ", " << "statusMessage=" << to_string(statusMessage);
  out << ", " << "displayNameOverridden=" << to_string(displayNameOverridden);
  out << ", " << "favoriteTime=" << to_string(favoriteTime);
  out << ", " << "capableVoiceCall=" << to_string(capableVoiceCall);
  out << ", " << "capableVideoCall=" << to_string(capableVideoCall);
  out << ", " << "capableMyhome=" << to_string(capableMyhome);
  out << ", " << "capableBuddy=" << to_string(capableBuddy);
  out << ", " << "attributes=" << to_string(attributes);
  out << ", " << "settings=" << to_string(settings);
  out << ", " << "picturePath=" << to_string(picturePath);
  out << ", " << "recommendParams=" << to_string(recommendParams);
  out << ", " << "friendRequestStatus=" << to_string(friendRequestStatus);
  out << ", " << "musicProfile=" << to_string(musicProfile);
  out << ", " << "videoProfile=" << to_string(videoProfile);
  out << ", " << "statusMessageContentMetadata=" << to_string(statusMessageContentMetadata);
  out << ")";
}


BuddyList::~BuddyList() throw() {
}


void BuddyList::__set_classification(const std::string& val) {
  this->classification = val;
}

void BuddyList::__set_displayName(const std::string& val) {
  this->displayName = val;
}

void BuddyList::__set_totalBuddyCount(const int32_t val) {
  this->totalBuddyCount = val;
}

void BuddyList::__set_popularContacts(const std::vector<Contact> & val) {
  this->popularContacts = val;
}
std::ostream& operator<<(std::ostream& out, const BuddyList& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BuddyList::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->classification);
          this->__isset.classification = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->displayName);
          this->__isset.displayName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalBuddyCount);
          this->__isset.totalBuddyCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->popularContacts.clear();
            uint32_t _size475;
            ::apache::thrift::protocol::TType _etype478;
            xfer += iprot->readListBegin(_etype478, _size475);
            this->popularContacts.resize(_size475);
            uint32_t _i479;
            for (_i479 = 0; _i479 < _size475; ++_i479)
            {
              xfer += this->popularContacts[_i479].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.popularContacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BuddyList::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BuddyList");

  xfer += oprot->writeFieldBegin("classification", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->classification);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->displayName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalBuddyCount", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->totalBuddyCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("popularContacts", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->popularContacts.size()));
    std::vector<Contact> ::const_iterator _iter480;
    for (_iter480 = this->popularContacts.begin(); _iter480 != this->popularContacts.end(); ++_iter480)
    {
      xfer += (*_iter480).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BuddyList &a, BuddyList &b) {
  using ::std::swap;
  swap(a.classification, b.classification);
  swap(a.displayName, b.displayName);
  swap(a.totalBuddyCount, b.totalBuddyCount);
  swap(a.popularContacts, b.popularContacts);
  swap(a.__isset, b.__isset);
}

BuddyList::BuddyList(const BuddyList& other481) {
  classification = other481.classification;
  displayName = other481.displayName;
  totalBuddyCount = other481.totalBuddyCount;
  popularContacts = other481.popularContacts;
  __isset = other481.__isset;
}
BuddyList& BuddyList::operator=(const BuddyList& other482) {
  classification = other482.classification;
  displayName = other482.displayName;
  totalBuddyCount = other482.totalBuddyCount;
  popularContacts = other482.popularContacts;
  __isset = other482.__isset;
  return *this;
}
void BuddyList::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BuddyList(";
  out << "classification=" << to_string(classification);
  out << ", " << "displayName=" << to_string(displayName);
  out << ", " << "totalBuddyCount=" << to_string(totalBuddyCount);
  out << ", " << "popularContacts=" << to_string(popularContacts);
  out << ")";
}


RegisterWithPhoneNumberResult::~RegisterWithPhoneNumberResult() throw() {
}


void RegisterWithPhoneNumberResult::__set_authToken(const std::string& val) {
  this->authToken = val;
}

void RegisterWithPhoneNumberResult::__set_recommendEmailRegistration(const bool val) {
  this->recommendEmailRegistration = val;
}

void RegisterWithPhoneNumberResult::__set_certificate(const std::string& val) {
  this->certificate = val;
}
std::ostream& operator<<(std::ostream& out, const RegisterWithPhoneNumberResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RegisterWithPhoneNumberResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->authToken);
          this->__isset.authToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->recommendEmailRegistration);
          this->__isset.recommendEmailRegistration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->certificate);
          this->__isset.certificate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RegisterWithPhoneNumberResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RegisterWithPhoneNumberResult");

  xfer += oprot->writeFieldBegin("authToken", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->authToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recommendEmailRegistration", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->recommendEmailRegistration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("certificate", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->certificate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RegisterWithPhoneNumberResult &a, RegisterWithPhoneNumberResult &b) {
  using ::std::swap;
  swap(a.authToken, b.authToken);
  swap(a.recommendEmailRegistration, b.recommendEmailRegistration);
  swap(a.certificate, b.certificate);
  swap(a.__isset, b.__isset);
}

RegisterWithPhoneNumberResult::RegisterWithPhoneNumberResult(const RegisterWithPhoneNumberResult& other483) {
  authToken = other483.authToken;
  recommendEmailRegistration = other483.recommendEmailRegistration;
  certificate = other483.certificate;
  __isset = other483.__isset;
}
RegisterWithPhoneNumberResult& RegisterWithPhoneNumberResult::operator=(const RegisterWithPhoneNumberResult& other484) {
  authToken = other484.authToken;
  recommendEmailRegistration = other484.recommendEmailRegistration;
  certificate = other484.certificate;
  __isset = other484.__isset;
  return *this;
}
void RegisterWithPhoneNumberResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RegisterWithPhoneNumberResult(";
  out << "authToken=" << to_string(authToken);
  out << ", " << "recommendEmailRegistration=" << to_string(recommendEmailRegistration);
  out << ", " << "certificate=" << to_string(certificate);
  out << ")";
}


BuddyMessageRequest::~BuddyMessageRequest() throw() {
}


void BuddyMessageRequest::__set_contentType(const ContentType::type val) {
  this->contentType = val;
}

void BuddyMessageRequest::__set_text(const std::string& val) {
  this->text = val;
}

void BuddyMessageRequest::__set_location(const Location& val) {
  this->location = val;
}

void BuddyMessageRequest::__set_content(const std::string& val) {
  this->content = val;
}

void BuddyMessageRequest::__set_contentMetadata(const std::map<std::string, std::string> & val) {
  this->contentMetadata = val;
}
std::ostream& operator<<(std::ostream& out, const BuddyMessageRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BuddyMessageRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast485;
          xfer += iprot->readI32(ecast485);
          this->contentType = (ContentType::type)ecast485;
          this->__isset.contentType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->text);
          this->__isset.text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->location.read(iprot);
          this->__isset.location = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->content);
          this->__isset.content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->contentMetadata.clear();
            uint32_t _size486;
            ::apache::thrift::protocol::TType _ktype487;
            ::apache::thrift::protocol::TType _vtype488;
            xfer += iprot->readMapBegin(_ktype487, _vtype488, _size486);
            uint32_t _i490;
            for (_i490 = 0; _i490 < _size486; ++_i490)
            {
              std::string _key491;
              xfer += iprot->readString(_key491);
              std::string& _val492 = this->contentMetadata[_key491];
              xfer += iprot->readString(_val492);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.contentMetadata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BuddyMessageRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BuddyMessageRequest");

  xfer += oprot->writeFieldBegin("contentType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->contentType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("location", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->location.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeBinary(this->content);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contentMetadata", ::apache::thrift::protocol::T_MAP, 5);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->contentMetadata.size()));
    std::map<std::string, std::string> ::const_iterator _iter493;
    for (_iter493 = this->contentMetadata.begin(); _iter493 != this->contentMetadata.end(); ++_iter493)
    {
      xfer += oprot->writeString(_iter493->first);
      xfer += oprot->writeString(_iter493->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BuddyMessageRequest &a, BuddyMessageRequest &b) {
  using ::std::swap;
  swap(a.contentType, b.contentType);
  swap(a.text, b.text);
  swap(a.location, b.location);
  swap(a.content, b.content);
  swap(a.contentMetadata, b.contentMetadata);
  swap(a.__isset, b.__isset);
}

BuddyMessageRequest::BuddyMessageRequest(const BuddyMessageRequest& other494) {
  contentType = other494.contentType;
  text = other494.text;
  location = other494.location;
  content = other494.content;
  contentMetadata = other494.contentMetadata;
  __isset = other494.__isset;
}
BuddyMessageRequest& BuddyMessageRequest::operator=(const BuddyMessageRequest& other495) {
  contentType = other495.contentType;
  text = other495.text;
  location = other495.location;
  content = other495.content;
  contentMetadata = other495.contentMetadata;
  __isset = other495.__isset;
  return *this;
}
void BuddyMessageRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BuddyMessageRequest(";
  out << "contentType=" << to_string(contentType);
  out << ", " << "text=" << to_string(text);
  out << ", " << "location=" << to_string(location);
  out << ", " << "content=" << to_string(content);
  out << ", " << "contentMetadata=" << to_string(contentMetadata);
  out << ")";
}


BuddyOnAirUrls::~BuddyOnAirUrls() throw() {
}


void BuddyOnAirUrls::__set_hls(const std::map<std::string, std::string> & val) {
  this->hls = val;
}

void BuddyOnAirUrls::__set_smoothStreaming(const std::map<std::string, std::string> & val) {
  this->smoothStreaming = val;
}
std::ostream& operator<<(std::ostream& out, const BuddyOnAirUrls& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BuddyOnAirUrls::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->hls.clear();
            uint32_t _size496;
            ::apache::thrift::protocol::TType _ktype497;
            ::apache::thrift::protocol::TType _vtype498;
            xfer += iprot->readMapBegin(_ktype497, _vtype498, _size496);
            uint32_t _i500;
            for (_i500 = 0; _i500 < _size496; ++_i500)
            {
              std::string _key501;
              xfer += iprot->readString(_key501);
              std::string& _val502 = this->hls[_key501];
              xfer += iprot->readString(_val502);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.hls = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->smoothStreaming.clear();
            uint32_t _size503;
            ::apache::thrift::protocol::TType _ktype504;
            ::apache::thrift::protocol::TType _vtype505;
            xfer += iprot->readMapBegin(_ktype504, _vtype505, _size503);
            uint32_t _i507;
            for (_i507 = 0; _i507 < _size503; ++_i507)
            {
              std::string _key508;
              xfer += iprot->readString(_key508);
              std::string& _val509 = this->smoothStreaming[_key508];
              xfer += iprot->readString(_val509);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.smoothStreaming = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BuddyOnAirUrls::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BuddyOnAirUrls");

  xfer += oprot->writeFieldBegin("hls", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->hls.size()));
    std::map<std::string, std::string> ::const_iterator _iter510;
    for (_iter510 = this->hls.begin(); _iter510 != this->hls.end(); ++_iter510)
    {
      xfer += oprot->writeString(_iter510->first);
      xfer += oprot->writeString(_iter510->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("smoothStreaming", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->smoothStreaming.size()));
    std::map<std::string, std::string> ::const_iterator _iter511;
    for (_iter511 = this->smoothStreaming.begin(); _iter511 != this->smoothStreaming.end(); ++_iter511)
    {
      xfer += oprot->writeString(_iter511->first);
      xfer += oprot->writeString(_iter511->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BuddyOnAirUrls &a, BuddyOnAirUrls &b) {
  using ::std::swap;
  swap(a.hls, b.hls);
  swap(a.smoothStreaming, b.smoothStreaming);
  swap(a.__isset, b.__isset);
}

BuddyOnAirUrls::BuddyOnAirUrls(const BuddyOnAirUrls& other512) {
  hls = other512.hls;
  smoothStreaming = other512.smoothStreaming;
  __isset = other512.__isset;
}
BuddyOnAirUrls& BuddyOnAirUrls::operator=(const BuddyOnAirUrls& other513) {
  hls = other513.hls;
  smoothStreaming = other513.smoothStreaming;
  __isset = other513.__isset;
  return *this;
}
void BuddyOnAirUrls::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BuddyOnAirUrls(";
  out << "hls=" << to_string(hls);
  out << ", " << "smoothStreaming=" << to_string(smoothStreaming);
  out << ")";
}


BuddyOnAir::~BuddyOnAir() throw() {
}


void BuddyOnAir::__set_mid(const std::string& val) {
  this->mid = val;
}

void BuddyOnAir::__set_freshnessLifetime(const int64_t val) {
  this->freshnessLifetime = val;
}

void BuddyOnAir::__set_onAirId(const std::string& val) {
  this->onAirId = val;
}

void BuddyOnAir::__set_onAir(const bool val) {
  this->onAir = val;
}

void BuddyOnAir::__set_text(const std::string& val) {
  this->text = val;
}

void BuddyOnAir::__set_viewerCount(const int64_t val) {
  this->viewerCount = val;
}

void BuddyOnAir::__set_targetCount(const int64_t val) {
  this->targetCount = val;
}

void BuddyOnAir::__set_onAirType(const BuddyOnAirType::type val) {
  this->onAirType = val;
}

void BuddyOnAir::__set_onAirUrls(const BuddyOnAirUrls& val) {
  this->onAirUrls = val;
}
std::ostream& operator<<(std::ostream& out, const BuddyOnAir& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BuddyOnAir::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mid);
          this->__isset.mid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->freshnessLifetime);
          this->__isset.freshnessLifetime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->onAirId);
          this->__isset.onAirId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->onAir);
          this->__isset.onAir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->text);
          this->__isset.text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->viewerCount);
          this->__isset.viewerCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->targetCount);
          this->__isset.targetCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast514;
          xfer += iprot->readI32(ecast514);
          this->onAirType = (BuddyOnAirType::type)ecast514;
          this->__isset.onAirType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->onAirUrls.read(iprot);
          this->__isset.onAirUrls = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BuddyOnAir::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BuddyOnAir");

  xfer += oprot->writeFieldBegin("mid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->mid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("freshnessLifetime", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->freshnessLifetime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("onAirId", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->onAirId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("onAir", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->onAir);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("text", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("viewerCount", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->viewerCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("targetCount", ::apache::thrift::protocol::T_I64, 13);
  xfer += oprot->writeI64(this->targetCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("onAirType", ::apache::thrift::protocol::T_I32, 31);
  xfer += oprot->writeI32((int32_t)this->onAirType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("onAirUrls", ::apache::thrift::protocol::T_STRUCT, 32);
  xfer += this->onAirUrls.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BuddyOnAir &a, BuddyOnAir &b) {
  using ::std::swap;
  swap(a.mid, b.mid);
  swap(a.freshnessLifetime, b.freshnessLifetime);
  swap(a.onAirId, b.onAirId);
  swap(a.onAir, b.onAir);
  swap(a.text, b.text);
  swap(a.viewerCount, b.viewerCount);
  swap(a.targetCount, b.targetCount);
  swap(a.onAirType, b.onAirType);
  swap(a.onAirUrls, b.onAirUrls);
  swap(a.__isset, b.__isset);
}

BuddyOnAir::BuddyOnAir(const BuddyOnAir& other515) {
  mid = other515.mid;
  freshnessLifetime = other515.freshnessLifetime;
  onAirId = other515.onAirId;
  onAir = other515.onAir;
  text = other515.text;
  viewerCount = other515.viewerCount;
  targetCount = other515.targetCount;
  onAirType = other515.onAirType;
  onAirUrls = other515.onAirUrls;
  __isset = other515.__isset;
}
BuddyOnAir& BuddyOnAir::operator=(const BuddyOnAir& other516) {
  mid = other516.mid;
  freshnessLifetime = other516.freshnessLifetime;
  onAirId = other516.onAirId;
  onAir = other516.onAir;
  text = other516.text;
  viewerCount = other516.viewerCount;
  targetCount = other516.targetCount;
  onAirType = other516.onAirType;
  onAirUrls = other516.onAirUrls;
  __isset = other516.__isset;
  return *this;
}
void BuddyOnAir::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BuddyOnAir(";
  out << "mid=" << to_string(mid);
  out << ", " << "freshnessLifetime=" << to_string(freshnessLifetime);
  out << ", " << "onAirId=" << to_string(onAirId);
  out << ", " << "onAir=" << to_string(onAir);
  out << ", " << "text=" << to_string(text);
  out << ", " << "viewerCount=" << to_string(viewerCount);
  out << ", " << "targetCount=" << to_string(targetCount);
  out << ", " << "onAirType=" << to_string(onAirType);
  out << ", " << "onAirUrls=" << to_string(onAirUrls);
  out << ")";
}


BuddyProfile::~BuddyProfile() throw() {
}


void BuddyProfile::__set_buddyId(const std::string& val) {
  this->buddyId = val;
}

void BuddyProfile::__set_mid(const std::string& val) {
  this->mid = val;
}

void BuddyProfile::__set_searchId(const std::string& val) {
  this->searchId = val;
}

void BuddyProfile::__set_displayName(const std::string& val) {
  this->displayName = val;
}

void BuddyProfile::__set_statusMessage(const std::string& val) {
  this->statusMessage = val;
}

void BuddyProfile::__set_contactCount(const int64_t val) {
  this->contactCount = val;
}
std::ostream& operator<<(std::ostream& out, const BuddyProfile& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BuddyProfile::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->buddyId);
          this->__isset.buddyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mid);
          this->__isset.mid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->searchId);
          this->__isset.searchId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->displayName);
          this->__isset.displayName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->statusMessage);
          this->__isset.statusMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->contactCount);
          this->__isset.contactCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BuddyProfile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BuddyProfile");

  xfer += oprot->writeFieldBegin("buddyId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->buddyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->mid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("searchId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->searchId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayName", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->displayName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("statusMessage", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->statusMessage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contactCount", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->contactCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BuddyProfile &a, BuddyProfile &b) {
  using ::std::swap;
  swap(a.buddyId, b.buddyId);
  swap(a.mid, b.mid);
  swap(a.searchId, b.searchId);
  swap(a.displayName, b.displayName);
  swap(a.statusMessage, b.statusMessage);
  swap(a.contactCount, b.contactCount);
  swap(a.__isset, b.__isset);
}

BuddyProfile::BuddyProfile(const BuddyProfile& other517) {
  buddyId = other517.buddyId;
  mid = other517.mid;
  searchId = other517.searchId;
  displayName = other517.displayName;
  statusMessage = other517.statusMessage;
  contactCount = other517.contactCount;
  __isset = other517.__isset;
}
BuddyProfile& BuddyProfile::operator=(const BuddyProfile& other518) {
  buddyId = other518.buddyId;
  mid = other518.mid;
  searchId = other518.searchId;
  displayName = other518.displayName;
  statusMessage = other518.statusMessage;
  contactCount = other518.contactCount;
  __isset = other518.__isset;
  return *this;
}
void BuddyProfile::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BuddyProfile(";
  out << "buddyId=" << to_string(buddyId);
  out << ", " << "mid=" << to_string(mid);
  out << ", " << "searchId=" << to_string(searchId);
  out << ", " << "displayName=" << to_string(displayName);
  out << ", " << "statusMessage=" << to_string(statusMessage);
  out << ", " << "contactCount=" << to_string(contactCount);
  out << ")";
}


CommitMessageResult::~CommitMessageResult() throw() {
}


void CommitMessageResult::__set_message(const Message& val) {
  this->message = val;
}

void CommitMessageResult::__set_code(const CommitMessageResultCode::type val) {
  this->code = val;
}

void CommitMessageResult::__set_reason(const std::string& val) {
  this->reason = val;
}

void CommitMessageResult::__set_successCount(const int64_t val) {
  this->successCount = val;
}

void CommitMessageResult::__set_failCount(const int64_t val) {
  this->failCount = val;
}

void CommitMessageResult::__set_unregisterCount(const int64_t val) {
  this->unregisterCount = val;
}

void CommitMessageResult::__set_blockCount(const int64_t val) {
  this->blockCount = val;
}
std::ostream& operator<<(std::ostream& out, const CommitMessageResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CommitMessageResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->message.read(iprot);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast519;
          xfer += iprot->readI32(ecast519);
          this->code = (CommitMessageResultCode::type)ecast519;
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->reason);
          this->__isset.reason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->successCount);
          this->__isset.successCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->failCount);
          this->__isset.failCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->unregisterCount);
          this->__isset.unregisterCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->blockCount);
          this->__isset.blockCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CommitMessageResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CommitMessageResult");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->message.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reason", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->reason);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("successCount", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->successCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("failCount", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->failCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unregisterCount", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->unregisterCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("blockCount", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->blockCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CommitMessageResult &a, CommitMessageResult &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.code, b.code);
  swap(a.reason, b.reason);
  swap(a.successCount, b.successCount);
  swap(a.failCount, b.failCount);
  swap(a.unregisterCount, b.unregisterCount);
  swap(a.blockCount, b.blockCount);
  swap(a.__isset, b.__isset);
}

CommitMessageResult::CommitMessageResult(const CommitMessageResult& other520) {
  message = other520.message;
  code = other520.code;
  reason = other520.reason;
  successCount = other520.successCount;
  failCount = other520.failCount;
  unregisterCount = other520.unregisterCount;
  blockCount = other520.blockCount;
  __isset = other520.__isset;
}
CommitMessageResult& CommitMessageResult::operator=(const CommitMessageResult& other521) {
  message = other521.message;
  code = other521.code;
  reason = other521.reason;
  successCount = other521.successCount;
  failCount = other521.failCount;
  unregisterCount = other521.unregisterCount;
  blockCount = other521.blockCount;
  __isset = other521.__isset;
  return *this;
}
void CommitMessageResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CommitMessageResult(";
  out << "message=" << to_string(message);
  out << ", " << "code=" << to_string(code);
  out << ", " << "reason=" << to_string(reason);
  out << ", " << "successCount=" << to_string(successCount);
  out << ", " << "failCount=" << to_string(failCount);
  out << ", " << "unregisterCount=" << to_string(unregisterCount);
  out << ", " << "blockCount=" << to_string(blockCount);
  out << ")";
}


SyncParamMid::~SyncParamMid() throw() {
}


void SyncParamMid::__set_mid(const std::string& val) {
  this->mid = val;
}

void SyncParamMid::__set_diff(const Diff::type val) {
  this->diff = val;
}

void SyncParamMid::__set_revision(const int64_t val) {
  this->revision = val;
}
std::ostream& operator<<(std::ostream& out, const SyncParamMid& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SyncParamMid::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mid);
          this->__isset.mid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast522;
          xfer += iprot->readI32(ecast522);
          this->diff = (Diff::type)ecast522;
          this->__isset.diff = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->revision);
          this->__isset.revision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SyncParamMid::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SyncParamMid");

  xfer += oprot->writeFieldBegin("mid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->mid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("diff", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->diff);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("revision", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->revision);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SyncParamMid &a, SyncParamMid &b) {
  using ::std::swap;
  swap(a.mid, b.mid);
  swap(a.diff, b.diff);
  swap(a.revision, b.revision);
  swap(a.__isset, b.__isset);
}

SyncParamMid::SyncParamMid(const SyncParamMid& other523) {
  mid = other523.mid;
  diff = other523.diff;
  revision = other523.revision;
  __isset = other523.__isset;
}
SyncParamMid& SyncParamMid::operator=(const SyncParamMid& other524) {
  mid = other524.mid;
  diff = other524.diff;
  revision = other524.revision;
  __isset = other524.__isset;
  return *this;
}
void SyncParamMid::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SyncParamMid(";
  out << "mid=" << to_string(mid);
  out << ", " << "diff=" << to_string(diff);
  out << ", " << "revision=" << to_string(revision);
  out << ")";
}


SIMInfo::~SIMInfo() throw() {
}


void SIMInfo::__set_phoneNumber(const std::string& val) {
  this->phoneNumber = val;
}

void SIMInfo::__set_countryCode(const std::string& val) {
  this->countryCode = val;
}
std::ostream& operator<<(std::ostream& out, const SIMInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SIMInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phoneNumber);
          this->__isset.phoneNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->countryCode);
          this->__isset.countryCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SIMInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SIMInfo");

  xfer += oprot->writeFieldBegin("phoneNumber", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->phoneNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("countryCode", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->countryCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SIMInfo &a, SIMInfo &b) {
  using ::std::swap;
  swap(a.phoneNumber, b.phoneNumber);
  swap(a.countryCode, b.countryCode);
  swap(a.__isset, b.__isset);
}

SIMInfo::SIMInfo(const SIMInfo& other525) {
  phoneNumber = other525.phoneNumber;
  countryCode = other525.countryCode;
  __isset = other525.__isset;
}
SIMInfo& SIMInfo::operator=(const SIMInfo& other526) {
  phoneNumber = other526.phoneNumber;
  countryCode = other526.countryCode;
  __isset = other526.__isset;
  return *this;
}
void SIMInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SIMInfo(";
  out << "phoneNumber=" << to_string(phoneNumber);
  out << ", " << "countryCode=" << to_string(countryCode);
  out << ")";
}


SyncParamContact::~SyncParamContact() throw() {
}


void SyncParamContact::__set_syncParamMid(const SyncParamMid& val) {
  this->syncParamMid = val;
}

void SyncParamContact::__set_contactStatus(const ContactStatus::type val) {
  this->contactStatus = val;
}
std::ostream& operator<<(std::ostream& out, const SyncParamContact& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SyncParamContact::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->syncParamMid.read(iprot);
          this->__isset.syncParamMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast527;
          xfer += iprot->readI32(ecast527);
          this->contactStatus = (ContactStatus::type)ecast527;
          this->__isset.contactStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SyncParamContact::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SyncParamContact");

  xfer += oprot->writeFieldBegin("syncParamMid", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->syncParamMid.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contactStatus", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->contactStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SyncParamContact &a, SyncParamContact &b) {
  using ::std::swap;
  swap(a.syncParamMid, b.syncParamMid);
  swap(a.contactStatus, b.contactStatus);
  swap(a.__isset, b.__isset);
}

SyncParamContact::SyncParamContact(const SyncParamContact& other528) {
  syncParamMid = other528.syncParamMid;
  contactStatus = other528.contactStatus;
  __isset = other528.__isset;
}
SyncParamContact& SyncParamContact::operator=(const SyncParamContact& other529) {
  syncParamMid = other529.syncParamMid;
  contactStatus = other529.contactStatus;
  __isset = other529.__isset;
  return *this;
}
void SyncParamContact::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SyncParamContact(";
  out << "syncParamMid=" << to_string(syncParamMid);
  out << ", " << "contactStatus=" << to_string(contactStatus);
  out << ")";
}


ChannelDomains::~ChannelDomains() throw() {
}


void ChannelDomains::__set_channelDomains(const std::vector<ChannelDomain> & val) {
  this->channelDomains = val;
}

void ChannelDomains::__set_revision(const int64_t val) {
  this->revision = val;
}
std::ostream& operator<<(std::ostream& out, const ChannelDomains& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ChannelDomains::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->channelDomains.clear();
            uint32_t _size530;
            ::apache::thrift::protocol::TType _etype533;
            xfer += iprot->readListBegin(_etype533, _size530);
            this->channelDomains.resize(_size530);
            uint32_t _i534;
            for (_i534 = 0; _i534 < _size530; ++_i534)
            {
              xfer += this->channelDomains[_i534].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.channelDomains = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->revision);
          this->__isset.revision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ChannelDomains::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ChannelDomains");

  xfer += oprot->writeFieldBegin("channelDomains", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->channelDomains.size()));
    std::vector<ChannelDomain> ::const_iterator _iter535;
    for (_iter535 = this->channelDomains.begin(); _iter535 != this->channelDomains.end(); ++_iter535)
    {
      xfer += (*_iter535).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("revision", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->revision);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ChannelDomains &a, ChannelDomains &b) {
  using ::std::swap;
  swap(a.channelDomains, b.channelDomains);
  swap(a.revision, b.revision);
  swap(a.__isset, b.__isset);
}

ChannelDomains::ChannelDomains(const ChannelDomains& other536) {
  channelDomains = other536.channelDomains;
  revision = other536.revision;
  __isset = other536.__isset;
}
ChannelDomains& ChannelDomains::operator=(const ChannelDomains& other537) {
  channelDomains = other537.channelDomains;
  revision = other537.revision;
  __isset = other537.__isset;
  return *this;
}
void ChannelDomains::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ChannelDomains(";
  out << "channelDomains=" << to_string(channelDomains);
  out << ", " << "revision=" << to_string(revision);
  out << ")";
}


ProductCategory::~ProductCategory() throw() {
}


void ProductCategory::__set_productCategoryId(const int64_t val) {
  this->productCategoryId = val;
}

void ProductCategory::__set_title(const std::string& val) {
  this->title = val;
}

void ProductCategory::__set_productCount(const int32_t val) {
  this->productCount = val;
}

void ProductCategory::__set_newFlag(const bool val) {
  this->newFlag = val;
}
std::ostream& operator<<(std::ostream& out, const ProductCategory& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ProductCategory::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->productCategoryId);
          this->__isset.productCategoryId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          this->__isset.title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->productCount);
          this->__isset.productCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->newFlag);
          this->__isset.newFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProductCategory::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ProductCategory");

  xfer += oprot->writeFieldBegin("productCategoryId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->productCategoryId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("productCount", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->productCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("newFlag", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->newFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProductCategory &a, ProductCategory &b) {
  using ::std::swap;
  swap(a.productCategoryId, b.productCategoryId);
  swap(a.title, b.title);
  swap(a.productCount, b.productCount);
  swap(a.newFlag, b.newFlag);
  swap(a.__isset, b.__isset);
}

ProductCategory::ProductCategory(const ProductCategory& other538) {
  productCategoryId = other538.productCategoryId;
  title = other538.title;
  productCount = other538.productCount;
  newFlag = other538.newFlag;
  __isset = other538.__isset;
}
ProductCategory& ProductCategory::operator=(const ProductCategory& other539) {
  productCategoryId = other539.productCategoryId;
  title = other539.title;
  productCount = other539.productCount;
  newFlag = other539.newFlag;
  __isset = other539.__isset;
  return *this;
}
void ProductCategory::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ProductCategory(";
  out << "productCategoryId=" << to_string(productCategoryId);
  out << ", " << "title=" << to_string(title);
  out << ", " << "productCount=" << to_string(productCount);
  out << ", " << "newFlag=" << to_string(newFlag);
  out << ")";
}


ChannelInfos::~ChannelInfos() throw() {
}


void ChannelInfos::__set_channelInfos(const std::vector<ChannelInfo> & val) {
  this->channelInfos = val;
}

void ChannelInfos::__set_revision(const int64_t val) {
  this->revision = val;
}
std::ostream& operator<<(std::ostream& out, const ChannelInfos& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ChannelInfos::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->channelInfos.clear();
            uint32_t _size540;
            ::apache::thrift::protocol::TType _etype543;
            xfer += iprot->readListBegin(_etype543, _size540);
            this->channelInfos.resize(_size540);
            uint32_t _i544;
            for (_i544 = 0; _i544 < _size540; ++_i544)
            {
              xfer += this->channelInfos[_i544].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.channelInfos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->revision);
          this->__isset.revision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ChannelInfos::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ChannelInfos");

  xfer += oprot->writeFieldBegin("channelInfos", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->channelInfos.size()));
    std::vector<ChannelInfo> ::const_iterator _iter545;
    for (_iter545 = this->channelInfos.begin(); _iter545 != this->channelInfos.end(); ++_iter545)
    {
      xfer += (*_iter545).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("revision", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->revision);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ChannelInfos &a, ChannelInfos &b) {
  using ::std::swap;
  swap(a.channelInfos, b.channelInfos);
  swap(a.revision, b.revision);
  swap(a.__isset, b.__isset);
}

ChannelInfos::ChannelInfos(const ChannelInfos& other546) {
  channelInfos = other546.channelInfos;
  revision = other546.revision;
  __isset = other546.__isset;
}
ChannelInfos& ChannelInfos::operator=(const ChannelInfos& other547) {
  channelInfos = other547.channelInfos;
  revision = other547.revision;
  __isset = other547.__isset;
  return *this;
}
void ChannelInfos::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ChannelInfos(";
  out << "channelInfos=" << to_string(channelInfos);
  out << ", " << "revision=" << to_string(revision);
  out << ")";
}


ChannelNotificationSetting::~ChannelNotificationSetting() throw() {
}


void ChannelNotificationSetting::__set_channelId(const std::string& val) {
  this->channelId = val;
}

void ChannelNotificationSetting::__set_name(const std::string& val) {
  this->name = val;
}

void ChannelNotificationSetting::__set_notificationReceivable(const bool val) {
  this->notificationReceivable = val;
}

void ChannelNotificationSetting::__set_messageReceivable(const bool val) {
  this->messageReceivable = val;
}

void ChannelNotificationSetting::__set_showDefault(const bool val) {
  this->showDefault = val;
}
std::ostream& operator<<(std::ostream& out, const ChannelNotificationSetting& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ChannelNotificationSetting::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->channelId);
          this->__isset.channelId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->notificationReceivable);
          this->__isset.notificationReceivable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->messageReceivable);
          this->__isset.messageReceivable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->showDefault);
          this->__isset.showDefault = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ChannelNotificationSetting::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ChannelNotificationSetting");

  xfer += oprot->writeFieldBegin("channelId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->channelId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notificationReceivable", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->notificationReceivable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageReceivable", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->messageReceivable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("showDefault", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->showDefault);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ChannelNotificationSetting &a, ChannelNotificationSetting &b) {
  using ::std::swap;
  swap(a.channelId, b.channelId);
  swap(a.name, b.name);
  swap(a.notificationReceivable, b.notificationReceivable);
  swap(a.messageReceivable, b.messageReceivable);
  swap(a.showDefault, b.showDefault);
  swap(a.__isset, b.__isset);
}

ChannelNotificationSetting::ChannelNotificationSetting(const ChannelNotificationSetting& other548) {
  channelId = other548.channelId;
  name = other548.name;
  notificationReceivable = other548.notificationReceivable;
  messageReceivable = other548.messageReceivable;
  showDefault = other548.showDefault;
  __isset = other548.__isset;
}
ChannelNotificationSetting& ChannelNotificationSetting::operator=(const ChannelNotificationSetting& other549) {
  channelId = other549.channelId;
  name = other549.name;
  notificationReceivable = other549.notificationReceivable;
  messageReceivable = other549.messageReceivable;
  showDefault = other549.showDefault;
  __isset = other549.__isset;
  return *this;
}
void ChannelNotificationSetting::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ChannelNotificationSetting(";
  out << "channelId=" << to_string(channelId);
  out << ", " << "name=" << to_string(name);
  out << ", " << "notificationReceivable=" << to_string(notificationReceivable);
  out << ", " << "messageReceivable=" << to_string(messageReceivable);
  out << ", " << "showDefault=" << to_string(showDefault);
  out << ")";
}


ChannelSyncDatas::~ChannelSyncDatas() throw() {
}


void ChannelSyncDatas::__set_channelInfos(const std::vector<ChannelInfo> & val) {
  this->channelInfos = val;
}

void ChannelSyncDatas::__set_channelDomains(const std::vector<ChannelDomain> & val) {
  this->channelDomains = val;
}

void ChannelSyncDatas::__set_revision(const int64_t val) {
  this->revision = val;
}

void ChannelSyncDatas::__set_expires(const int64_t val) {
  this->expires = val;
}
std::ostream& operator<<(std::ostream& out, const ChannelSyncDatas& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ChannelSyncDatas::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->channelInfos.clear();
            uint32_t _size550;
            ::apache::thrift::protocol::TType _etype553;
            xfer += iprot->readListBegin(_etype553, _size550);
            this->channelInfos.resize(_size550);
            uint32_t _i554;
            for (_i554 = 0; _i554 < _size550; ++_i554)
            {
              xfer += this->channelInfos[_i554].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.channelInfos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->channelDomains.clear();
            uint32_t _size555;
            ::apache::thrift::protocol::TType _etype558;
            xfer += iprot->readListBegin(_etype558, _size555);
            this->channelDomains.resize(_size555);
            uint32_t _i559;
            for (_i559 = 0; _i559 < _size555; ++_i559)
            {
              xfer += this->channelDomains[_i559].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.channelDomains = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->revision);
          this->__isset.revision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->expires);
          this->__isset.expires = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ChannelSyncDatas::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ChannelSyncDatas");

  xfer += oprot->writeFieldBegin("channelInfos", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->channelInfos.size()));
    std::vector<ChannelInfo> ::const_iterator _iter560;
    for (_iter560 = this->channelInfos.begin(); _iter560 != this->channelInfos.end(); ++_iter560)
    {
      xfer += (*_iter560).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channelDomains", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->channelDomains.size()));
    std::vector<ChannelDomain> ::const_iterator _iter561;
    for (_iter561 = this->channelDomains.begin(); _iter561 != this->channelDomains.end(); ++_iter561)
    {
      xfer += (*_iter561).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("revision", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->revision);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("expires", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->expires);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ChannelSyncDatas &a, ChannelSyncDatas &b) {
  using ::std::swap;
  swap(a.channelInfos, b.channelInfos);
  swap(a.channelDomains, b.channelDomains);
  swap(a.revision, b.revision);
  swap(a.expires, b.expires);
  swap(a.__isset, b.__isset);
}

ChannelSyncDatas::ChannelSyncDatas(const ChannelSyncDatas& other562) {
  channelInfos = other562.channelInfos;
  channelDomains = other562.channelDomains;
  revision = other562.revision;
  expires = other562.expires;
  __isset = other562.__isset;
}
ChannelSyncDatas& ChannelSyncDatas::operator=(const ChannelSyncDatas& other563) {
  channelInfos = other563.channelInfos;
  channelDomains = other563.channelDomains;
  revision = other563.revision;
  expires = other563.expires;
  __isset = other563.__isset;
  return *this;
}
void ChannelSyncDatas::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ChannelSyncDatas(";
  out << "channelInfos=" << to_string(channelInfos);
  out << ", " << "channelDomains=" << to_string(channelDomains);
  out << ", " << "revision=" << to_string(revision);
  out << ", " << "expires=" << to_string(expires);
  out << ")";
}


NotiCenterEventData::~NotiCenterEventData() throw() {
}


void NotiCenterEventData::__set_id(const std::string& val) {
  this->id = val;
}

void NotiCenterEventData::__set_to(const std::string& val) {
  this->to = val;
}

void NotiCenterEventData::__set_from_(const std::string& val) {
  this->from_ = val;
}

void NotiCenterEventData::__set_toChannel(const std::string& val) {
  this->toChannel = val;
}

void NotiCenterEventData::__set_fromChannel(const std::string& val) {
  this->fromChannel = val;
}

void NotiCenterEventData::__set_eventType(const std::string& val) {
  this->eventType = val;
}

void NotiCenterEventData::__set_createdTime(const int64_t val) {
  this->createdTime = val;
}

void NotiCenterEventData::__set_operationRevision(const int64_t val) {
  this->operationRevision = val;
}

void NotiCenterEventData::__set_content(const std::map<std::string, std::string> & val) {
  this->content = val;
}

void NotiCenterEventData::__set_push(const std::map<std::string, std::string> & val) {
  this->push = val;
}
std::ostream& operator<<(std::ostream& out, const NotiCenterEventData& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t NotiCenterEventData::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->to);
          this->__isset.to = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->from_);
          this->__isset.from_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->toChannel);
          this->__isset.toChannel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fromChannel);
          this->__isset.fromChannel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventType);
          this->__isset.eventType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createdTime);
          this->__isset.createdTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->operationRevision);
          this->__isset.operationRevision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->content.clear();
            uint32_t _size564;
            ::apache::thrift::protocol::TType _ktype565;
            ::apache::thrift::protocol::TType _vtype566;
            xfer += iprot->readMapBegin(_ktype565, _vtype566, _size564);
            uint32_t _i568;
            for (_i568 = 0; _i568 < _size564; ++_i568)
            {
              std::string _key569;
              xfer += iprot->readString(_key569);
              std::string& _val570 = this->content[_key569];
              xfer += iprot->readString(_val570);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->push.clear();
            uint32_t _size571;
            ::apache::thrift::protocol::TType _ktype572;
            ::apache::thrift::protocol::TType _vtype573;
            xfer += iprot->readMapBegin(_ktype572, _vtype573, _size571);
            uint32_t _i575;
            for (_i575 = 0; _i575 < _size571; ++_i575)
            {
              std::string _key576;
              xfer += iprot->readString(_key576);
              std::string& _val577 = this->push[_key576];
              xfer += iprot->readString(_val577);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.push = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NotiCenterEventData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NotiCenterEventData");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->to);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->from_);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("toChannel", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->toChannel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fromChannel", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->fromChannel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventType", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->eventType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createdTime", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->createdTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("operationRevision", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->operationRevision);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_MAP, 9);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->content.size()));
    std::map<std::string, std::string> ::const_iterator _iter578;
    for (_iter578 = this->content.begin(); _iter578 != this->content.end(); ++_iter578)
    {
      xfer += oprot->writeString(_iter578->first);
      xfer += oprot->writeString(_iter578->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("push", ::apache::thrift::protocol::T_MAP, 10);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->push.size()));
    std::map<std::string, std::string> ::const_iterator _iter579;
    for (_iter579 = this->push.begin(); _iter579 != this->push.end(); ++_iter579)
    {
      xfer += oprot->writeString(_iter579->first);
      xfer += oprot->writeString(_iter579->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NotiCenterEventData &a, NotiCenterEventData &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.to, b.to);
  swap(a.from_, b.from_);
  swap(a.toChannel, b.toChannel);
  swap(a.fromChannel, b.fromChannel);
  swap(a.eventType, b.eventType);
  swap(a.createdTime, b.createdTime);
  swap(a.operationRevision, b.operationRevision);
  swap(a.content, b.content);
  swap(a.push, b.push);
  swap(a.__isset, b.__isset);
}

NotiCenterEventData::NotiCenterEventData(const NotiCenterEventData& other580) {
  id = other580.id;
  to = other580.to;
  from_ = other580.from_;
  toChannel = other580.toChannel;
  fromChannel = other580.fromChannel;
  eventType = other580.eventType;
  createdTime = other580.createdTime;
  operationRevision = other580.operationRevision;
  content = other580.content;
  push = other580.push;
  __isset = other580.__isset;
}
NotiCenterEventData& NotiCenterEventData::operator=(const NotiCenterEventData& other581) {
  id = other581.id;
  to = other581.to;
  from_ = other581.from_;
  toChannel = other581.toChannel;
  fromChannel = other581.fromChannel;
  eventType = other581.eventType;
  createdTime = other581.createdTime;
  operationRevision = other581.operationRevision;
  content = other581.content;
  push = other581.push;
  __isset = other581.__isset;
  return *this;
}
void NotiCenterEventData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NotiCenterEventData(";
  out << "id=" << to_string(id);
  out << ", " << "to=" << to_string(to);
  out << ", " << "from_=" << to_string(from_);
  out << ", " << "toChannel=" << to_string(toChannel);
  out << ", " << "fromChannel=" << to_string(fromChannel);
  out << ", " << "eventType=" << to_string(eventType);
  out << ", " << "createdTime=" << to_string(createdTime);
  out << ", " << "operationRevision=" << to_string(operationRevision);
  out << ", " << "content=" << to_string(content);
  out << ", " << "push=" << to_string(push);
  out << ")";
}


ChannelToken::~ChannelToken() throw() {
}


void ChannelToken::__set_token(const std::string& val) {
  this->token = val;
}

void ChannelToken::__set_obsToken(const std::string& val) {
  this->obsToken = val;
}

void ChannelToken::__set_expiration(const int64_t val) {
  this->expiration = val;
}

void ChannelToken::__set_refreshToken(const std::string& val) {
  this->refreshToken = val;
}

void ChannelToken::__set_channelAccessToken(const std::string& val) {
  this->channelAccessToken = val;
}
std::ostream& operator<<(std::ostream& out, const ChannelToken& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ChannelToken::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->token);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->obsToken);
          this->__isset.obsToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->expiration);
          this->__isset.expiration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->refreshToken);
          this->__isset.refreshToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->channelAccessToken);
          this->__isset.channelAccessToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ChannelToken::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ChannelToken");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("obsToken", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->obsToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("expiration", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->expiration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("refreshToken", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->refreshToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channelAccessToken", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->channelAccessToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ChannelToken &a, ChannelToken &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.obsToken, b.obsToken);
  swap(a.expiration, b.expiration);
  swap(a.refreshToken, b.refreshToken);
  swap(a.channelAccessToken, b.channelAccessToken);
  swap(a.__isset, b.__isset);
}

ChannelToken::ChannelToken(const ChannelToken& other582) {
  token = other582.token;
  obsToken = other582.obsToken;
  expiration = other582.expiration;
  refreshToken = other582.refreshToken;
  channelAccessToken = other582.channelAccessToken;
  __isset = other582.__isset;
}
ChannelToken& ChannelToken::operator=(const ChannelToken& other583) {
  token = other583.token;
  obsToken = other583.obsToken;
  expiration = other583.expiration;
  refreshToken = other583.refreshToken;
  channelAccessToken = other583.channelAccessToken;
  __isset = other583.__isset;
  return *this;
}
void ChannelToken::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ChannelToken(";
  out << "token=" << to_string(token);
  out << ", " << "obsToken=" << to_string(obsToken);
  out << ", " << "expiration=" << to_string(expiration);
  out << ", " << "refreshToken=" << to_string(refreshToken);
  out << ", " << "channelAccessToken=" << to_string(channelAccessToken);
  out << ")";
}


ChannelSettings::~ChannelSettings() throw() {
}


void ChannelSettings::__set_unapprovedMessageReceivable(const bool val) {
  this->unapprovedMessageReceivable = val;
}
std::ostream& operator<<(std::ostream& out, const ChannelSettings& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ChannelSettings::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->unapprovedMessageReceivable);
          this->__isset.unapprovedMessageReceivable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ChannelSettings::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ChannelSettings");

  xfer += oprot->writeFieldBegin("unapprovedMessageReceivable", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->unapprovedMessageReceivable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ChannelSettings &a, ChannelSettings &b) {
  using ::std::swap;
  swap(a.unapprovedMessageReceivable, b.unapprovedMessageReceivable);
  swap(a.__isset, b.__isset);
}

ChannelSettings::ChannelSettings(const ChannelSettings& other584) {
  unapprovedMessageReceivable = other584.unapprovedMessageReceivable;
  __isset = other584.__isset;
}
ChannelSettings& ChannelSettings::operator=(const ChannelSettings& other585) {
  unapprovedMessageReceivable = other585.unapprovedMessageReceivable;
  __isset = other585.__isset;
  return *this;
}
void ChannelSettings::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ChannelSettings(";
  out << "unapprovedMessageReceivable=" << to_string(unapprovedMessageReceivable);
  out << ")";
}


ChannelIdWithLastUpdated::~ChannelIdWithLastUpdated() throw() {
}


void ChannelIdWithLastUpdated::__set_channelId(const std::string& val) {
  this->channelId = val;
}

void ChannelIdWithLastUpdated::__set_lastUpdated(const int64_t val) {
  this->lastUpdated = val;
}
std::ostream& operator<<(std::ostream& out, const ChannelIdWithLastUpdated& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ChannelIdWithLastUpdated::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->channelId);
          this->__isset.channelId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastUpdated);
          this->__isset.lastUpdated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ChannelIdWithLastUpdated::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ChannelIdWithLastUpdated");

  xfer += oprot->writeFieldBegin("channelId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->channelId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastUpdated", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->lastUpdated);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ChannelIdWithLastUpdated &a, ChannelIdWithLastUpdated &b) {
  using ::std::swap;
  swap(a.channelId, b.channelId);
  swap(a.lastUpdated, b.lastUpdated);
  swap(a.__isset, b.__isset);
}

ChannelIdWithLastUpdated::ChannelIdWithLastUpdated(const ChannelIdWithLastUpdated& other586) {
  channelId = other586.channelId;
  lastUpdated = other586.lastUpdated;
  __isset = other586.__isset;
}
ChannelIdWithLastUpdated& ChannelIdWithLastUpdated::operator=(const ChannelIdWithLastUpdated& other587) {
  channelId = other587.channelId;
  lastUpdated = other587.lastUpdated;
  __isset = other587.__isset;
  return *this;
}
void ChannelIdWithLastUpdated::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ChannelIdWithLastUpdated(";
  out << "channelId=" << to_string(channelId);
  out << ", " << "lastUpdated=" << to_string(lastUpdated);
  out << ")";
}


Coin::~Coin() throw() {
}


void Coin::__set_freeCoinBalance(const int32_t val) {
  this->freeCoinBalance = val;
}

void Coin::__set_payedCoinBalance(const int32_t val) {
  this->payedCoinBalance = val;
}

void Coin::__set_totalCoinBalance(const int32_t val) {
  this->totalCoinBalance = val;
}

void Coin::__set_rewardCoinBalance(const int32_t val) {
  this->rewardCoinBalance = val;
}
std::ostream& operator<<(std::ostream& out, const Coin& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Coin::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->freeCoinBalance);
          this->__isset.freeCoinBalance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->payedCoinBalance);
          this->__isset.payedCoinBalance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalCoinBalance);
          this->__isset.totalCoinBalance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rewardCoinBalance);
          this->__isset.rewardCoinBalance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Coin::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Coin");

  xfer += oprot->writeFieldBegin("freeCoinBalance", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->freeCoinBalance);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("payedCoinBalance", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->payedCoinBalance);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalCoinBalance", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->totalCoinBalance);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rewardCoinBalance", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->rewardCoinBalance);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Coin &a, Coin &b) {
  using ::std::swap;
  swap(a.freeCoinBalance, b.freeCoinBalance);
  swap(a.payedCoinBalance, b.payedCoinBalance);
  swap(a.totalCoinBalance, b.totalCoinBalance);
  swap(a.rewardCoinBalance, b.rewardCoinBalance);
  swap(a.__isset, b.__isset);
}

Coin::Coin(const Coin& other588) {
  freeCoinBalance = other588.freeCoinBalance;
  payedCoinBalance = other588.payedCoinBalance;
  totalCoinBalance = other588.totalCoinBalance;
  rewardCoinBalance = other588.rewardCoinBalance;
  __isset = other588.__isset;
}
Coin& Coin::operator=(const Coin& other589) {
  freeCoinBalance = other589.freeCoinBalance;
  payedCoinBalance = other589.payedCoinBalance;
  totalCoinBalance = other589.totalCoinBalance;
  rewardCoinBalance = other589.rewardCoinBalance;
  __isset = other589.__isset;
  return *this;
}
void Coin::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Coin(";
  out << "freeCoinBalance=" << to_string(freeCoinBalance);
  out << ", " << "payedCoinBalance=" << to_string(payedCoinBalance);
  out << ", " << "totalCoinBalance=" << to_string(totalCoinBalance);
  out << ", " << "rewardCoinBalance=" << to_string(rewardCoinBalance);
  out << ")";
}


CoinPayLoad::~CoinPayLoad() throw() {
}


void CoinPayLoad::__set_payCoin(const int32_t val) {
  this->payCoin = val;
}

void CoinPayLoad::__set_freeCoin(const int32_t val) {
  this->freeCoin = val;
}

void CoinPayLoad::__set_type(const PayloadType::type val) {
  this->type = val;
}

void CoinPayLoad::__set_rewardCoin(const int32_t val) {
  this->rewardCoin = val;
}
std::ostream& operator<<(std::ostream& out, const CoinPayLoad& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CoinPayLoad::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->payCoin);
          this->__isset.payCoin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->freeCoin);
          this->__isset.freeCoin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast590;
          xfer += iprot->readI32(ecast590);
          this->type = (PayloadType::type)ecast590;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rewardCoin);
          this->__isset.rewardCoin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CoinPayLoad::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CoinPayLoad");

  xfer += oprot->writeFieldBegin("payCoin", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->payCoin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("freeCoin", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->freeCoin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rewardCoin", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->rewardCoin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CoinPayLoad &a, CoinPayLoad &b) {
  using ::std::swap;
  swap(a.payCoin, b.payCoin);
  swap(a.freeCoin, b.freeCoin);
  swap(a.type, b.type);
  swap(a.rewardCoin, b.rewardCoin);
  swap(a.__isset, b.__isset);
}

CoinPayLoad::CoinPayLoad(const CoinPayLoad& other591) {
  payCoin = other591.payCoin;
  freeCoin = other591.freeCoin;
  type = other591.type;
  rewardCoin = other591.rewardCoin;
  __isset = other591.__isset;
}
CoinPayLoad& CoinPayLoad::operator=(const CoinPayLoad& other592) {
  payCoin = other592.payCoin;
  freeCoin = other592.freeCoin;
  type = other592.type;
  rewardCoin = other592.rewardCoin;
  __isset = other592.__isset;
  return *this;
}
void CoinPayLoad::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CoinPayLoad(";
  out << "payCoin=" << to_string(payCoin);
  out << ", " << "freeCoin=" << to_string(freeCoin);
  out << ", " << "type=" << to_string(type);
  out << ", " << "rewardCoin=" << to_string(rewardCoin);
  out << ")";
}


CoinHistory::~CoinHistory() throw() {
}


void CoinHistory::__set_payDate(const int64_t val) {
  this->payDate = val;
}

void CoinHistory::__set_coinBalance(const int32_t val) {
  this->coinBalance = val;
}

void CoinHistory::__set_coin(const int32_t val) {
  this->coin = val;
}

void CoinHistory::__set_price(const std::string& val) {
  this->price = val;
}

void CoinHistory::__set_title(const std::string& val) {
  this->title = val;
}

void CoinHistory::__set_refund(const bool val) {
  this->refund = val;
}

void CoinHistory::__set_paySeq(const std::string& val) {
  this->paySeq = val;
}

void CoinHistory::__set_currency(const std::string& val) {
  this->currency = val;
}

void CoinHistory::__set_currencySign(const std::string& val) {
  this->currencySign = val;
}

void CoinHistory::__set_displayPrice(const std::string& val) {
  this->displayPrice = val;
}

void CoinHistory::__set_payload(const CoinPayLoad& val) {
  this->payload = val;
}

void CoinHistory::__set_channelId(const std::string& val) {
  this->channelId = val;
}
std::ostream& operator<<(std::ostream& out, const CoinHistory& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CoinHistory::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->payDate);
          this->__isset.payDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coinBalance);
          this->__isset.coinBalance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coin);
          this->__isset.coin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->price);
          this->__isset.price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          this->__isset.title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->refund);
          this->__isset.refund = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->paySeq);
          this->__isset.paySeq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currency);
          this->__isset.currency = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currencySign);
          this->__isset.currencySign = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->displayPrice);
          this->__isset.displayPrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->payload.read(iprot);
          this->__isset.payload = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->channelId);
          this->__isset.channelId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CoinHistory::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CoinHistory");

  xfer += oprot->writeFieldBegin("payDate", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->payDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("coinBalance", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->coinBalance);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("coin", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->coin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("price", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("refund", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->refund);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("paySeq", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->paySeq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currency", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->currency);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currencySign", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->currencySign);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayPrice", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->displayPrice);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("payload", ::apache::thrift::protocol::T_STRUCT, 11);
  xfer += this->payload.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channelId", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->channelId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CoinHistory &a, CoinHistory &b) {
  using ::std::swap;
  swap(a.payDate, b.payDate);
  swap(a.coinBalance, b.coinBalance);
  swap(a.coin, b.coin);
  swap(a.price, b.price);
  swap(a.title, b.title);
  swap(a.refund, b.refund);
  swap(a.paySeq, b.paySeq);
  swap(a.currency, b.currency);
  swap(a.currencySign, b.currencySign);
  swap(a.displayPrice, b.displayPrice);
  swap(a.payload, b.payload);
  swap(a.channelId, b.channelId);
  swap(a.__isset, b.__isset);
}

CoinHistory::CoinHistory(const CoinHistory& other593) {
  payDate = other593.payDate;
  coinBalance = other593.coinBalance;
  coin = other593.coin;
  price = other593.price;
  title = other593.title;
  refund = other593.refund;
  paySeq = other593.paySeq;
  currency = other593.currency;
  currencySign = other593.currencySign;
  displayPrice = other593.displayPrice;
  payload = other593.payload;
  channelId = other593.channelId;
  __isset = other593.__isset;
}
CoinHistory& CoinHistory::operator=(const CoinHistory& other594) {
  payDate = other594.payDate;
  coinBalance = other594.coinBalance;
  coin = other594.coin;
  price = other594.price;
  title = other594.title;
  refund = other594.refund;
  paySeq = other594.paySeq;
  currency = other594.currency;
  currencySign = other594.currencySign;
  displayPrice = other594.displayPrice;
  payload = other594.payload;
  channelId = other594.channelId;
  __isset = other594.__isset;
  return *this;
}
void CoinHistory::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CoinHistory(";
  out << "payDate=" << to_string(payDate);
  out << ", " << "coinBalance=" << to_string(coinBalance);
  out << ", " << "coin=" << to_string(coin);
  out << ", " << "price=" << to_string(price);
  out << ", " << "title=" << to_string(title);
  out << ", " << "refund=" << to_string(refund);
  out << ", " << "paySeq=" << to_string(paySeq);
  out << ", " << "currency=" << to_string(currency);
  out << ", " << "currencySign=" << to_string(currencySign);
  out << ", " << "displayPrice=" << to_string(displayPrice);
  out << ", " << "payload=" << to_string(payload);
  out << ", " << "channelId=" << to_string(channelId);
  out << ")";
}


CoinHistoryCondition::~CoinHistoryCondition() throw() {
}


void CoinHistoryCondition::__set_start(const int64_t val) {
  this->start = val;
}

void CoinHistoryCondition::__set_size(const int32_t val) {
  this->size = val;
}

void CoinHistoryCondition::__set_language(const std::string& val) {
  this->language = val;
}

void CoinHistoryCondition::__set_eddt(const std::string& val) {
  this->eddt = val;
}

void CoinHistoryCondition::__set_appStoreCode(const PaymentType::type val) {
  this->appStoreCode = val;
}
std::ostream& operator<<(std::ostream& out, const CoinHistoryCondition& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CoinHistoryCondition::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->start);
          this->__isset.start = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->size);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->language);
          this->__isset.language = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eddt);
          this->__isset.eddt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast595;
          xfer += iprot->readI32(ecast595);
          this->appStoreCode = (PaymentType::type)ecast595;
          this->__isset.appStoreCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CoinHistoryCondition::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CoinHistoryCondition");

  xfer += oprot->writeFieldBegin("start", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->start);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("language", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->language);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eddt", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->eddt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("appStoreCode", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->appStoreCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CoinHistoryCondition &a, CoinHistoryCondition &b) {
  using ::std::swap;
  swap(a.start, b.start);
  swap(a.size, b.size);
  swap(a.language, b.language);
  swap(a.eddt, b.eddt);
  swap(a.appStoreCode, b.appStoreCode);
  swap(a.__isset, b.__isset);
}

CoinHistoryCondition::CoinHistoryCondition(const CoinHistoryCondition& other596) {
  start = other596.start;
  size = other596.size;
  language = other596.language;
  eddt = other596.eddt;
  appStoreCode = other596.appStoreCode;
  __isset = other596.__isset;
}
CoinHistoryCondition& CoinHistoryCondition::operator=(const CoinHistoryCondition& other597) {
  start = other597.start;
  size = other597.size;
  language = other597.language;
  eddt = other597.eddt;
  appStoreCode = other597.appStoreCode;
  __isset = other597.__isset;
  return *this;
}
void CoinHistoryCondition::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CoinHistoryCondition(";
  out << "start=" << to_string(start);
  out << ", " << "size=" << to_string(size);
  out << ", " << "language=" << to_string(language);
  out << ", " << "eddt=" << to_string(eddt);
  out << ", " << "appStoreCode=" << to_string(appStoreCode);
  out << ")";
}


CoinHistoryResult::~CoinHistoryResult() throw() {
}


void CoinHistoryResult::__set_historys(const std::vector<CoinHistory> & val) {
  this->historys = val;
}

void CoinHistoryResult::__set_balance(const Coin& val) {
  this->balance = val;
}

void CoinHistoryResult::__set_hasNext(const bool val) {
  this->hasNext = val;
}
std::ostream& operator<<(std::ostream& out, const CoinHistoryResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CoinHistoryResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->historys.clear();
            uint32_t _size598;
            ::apache::thrift::protocol::TType _etype601;
            xfer += iprot->readListBegin(_etype601, _size598);
            this->historys.resize(_size598);
            uint32_t _i602;
            for (_i602 = 0; _i602 < _size598; ++_i602)
            {
              xfer += this->historys[_i602].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.historys = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->balance.read(iprot);
          this->__isset.balance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasNext);
          this->__isset.hasNext = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CoinHistoryResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CoinHistoryResult");

  xfer += oprot->writeFieldBegin("historys", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->historys.size()));
    std::vector<CoinHistory> ::const_iterator _iter603;
    for (_iter603 = this->historys.begin(); _iter603 != this->historys.end(); ++_iter603)
    {
      xfer += (*_iter603).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("balance", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->balance.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hasNext", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->hasNext);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CoinHistoryResult &a, CoinHistoryResult &b) {
  using ::std::swap;
  swap(a.historys, b.historys);
  swap(a.balance, b.balance);
  swap(a.hasNext, b.hasNext);
  swap(a.__isset, b.__isset);
}

CoinHistoryResult::CoinHistoryResult(const CoinHistoryResult& other604) {
  historys = other604.historys;
  balance = other604.balance;
  hasNext = other604.hasNext;
  __isset = other604.__isset;
}
CoinHistoryResult& CoinHistoryResult::operator=(const CoinHistoryResult& other605) {
  historys = other605.historys;
  balance = other605.balance;
  hasNext = other605.hasNext;
  __isset = other605.__isset;
  return *this;
}
void CoinHistoryResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CoinHistoryResult(";
  out << "historys=" << to_string(historys);
  out << ", " << "balance=" << to_string(balance);
  out << ", " << "hasNext=" << to_string(hasNext);
  out << ")";
}


CoinProductItem::~CoinProductItem() throw() {
}


void CoinProductItem::__set_itemId(const std::string& val) {
  this->itemId = val;
}

void CoinProductItem::__set_coin(const int32_t val) {
  this->coin = val;
}

void CoinProductItem::__set_freeCoin(const int32_t val) {
  this->freeCoin = val;
}

void CoinProductItem::__set_currency(const std::string& val) {
  this->currency = val;
}

void CoinProductItem::__set_price(const std::string& val) {
  this->price = val;
}

void CoinProductItem::__set_displayPrice(const std::string& val) {
  this->displayPrice = val;
}

void CoinProductItem::__set_name(const std::string& val) {
  this->name = val;
}

void CoinProductItem::__set_desc(const std::string& val) {
  this->desc = val;
}
std::ostream& operator<<(std::ostream& out, const CoinProductItem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CoinProductItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->itemId);
          this->__isset.itemId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coin);
          this->__isset.coin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->freeCoin);
          this->__isset.freeCoin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currency);
          this->__isset.currency = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->price);
          this->__isset.price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->displayPrice);
          this->__isset.displayPrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->desc);
          this->__isset.desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CoinProductItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CoinProductItem");

  xfer += oprot->writeFieldBegin("itemId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->itemId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("coin", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->coin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("freeCoin", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->freeCoin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currency", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->currency);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("price", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayPrice", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->displayPrice);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("desc", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->desc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CoinProductItem &a, CoinProductItem &b) {
  using ::std::swap;
  swap(a.itemId, b.itemId);
  swap(a.coin, b.coin);
  swap(a.freeCoin, b.freeCoin);
  swap(a.currency, b.currency);
  swap(a.price, b.price);
  swap(a.displayPrice, b.displayPrice);
  swap(a.name, b.name);
  swap(a.desc, b.desc);
  swap(a.__isset, b.__isset);
}

CoinProductItem::CoinProductItem(const CoinProductItem& other606) {
  itemId = other606.itemId;
  coin = other606.coin;
  freeCoin = other606.freeCoin;
  currency = other606.currency;
  price = other606.price;
  displayPrice = other606.displayPrice;
  name = other606.name;
  desc = other606.desc;
  __isset = other606.__isset;
}
CoinProductItem& CoinProductItem::operator=(const CoinProductItem& other607) {
  itemId = other607.itemId;
  coin = other607.coin;
  freeCoin = other607.freeCoin;
  currency = other607.currency;
  price = other607.price;
  displayPrice = other607.displayPrice;
  name = other607.name;
  desc = other607.desc;
  __isset = other607.__isset;
  return *this;
}
void CoinProductItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CoinProductItem(";
  out << "itemId=" << to_string(itemId);
  out << ", " << "coin=" << to_string(coin);
  out << ", " << "freeCoin=" << to_string(freeCoin);
  out << ", " << "currency=" << to_string(currency);
  out << ", " << "price=" << to_string(price);
  out << ", " << "displayPrice=" << to_string(displayPrice);
  out << ", " << "name=" << to_string(name);
  out << ", " << "desc=" << to_string(desc);
  out << ")";
}


CoinPurchaseConfirm::~CoinPurchaseConfirm() throw() {
}


void CoinPurchaseConfirm::__set_orderId(const std::string& val) {
  this->orderId = val;
}

void CoinPurchaseConfirm::__set_appStoreCode(const PaymentType::type val) {
  this->appStoreCode = val;
}

void CoinPurchaseConfirm::__set_receipt(const std::string& val) {
  this->receipt = val;
}

void CoinPurchaseConfirm::__set_signature(const std::string& val) {
  this->signature = val;
}

void CoinPurchaseConfirm::__set_seller(const std::string& val) {
  this->seller = val;
}

void CoinPurchaseConfirm::__set_requestType(const std::string& val) {
  this->requestType = val;
}

void CoinPurchaseConfirm::__set_ignoreReceipt(const bool val) {
  this->ignoreReceipt = val;
}
std::ostream& operator<<(std::ostream& out, const CoinPurchaseConfirm& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CoinPurchaseConfirm::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->orderId);
          this->__isset.orderId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast608;
          xfer += iprot->readI32(ecast608);
          this->appStoreCode = (PaymentType::type)ecast608;
          this->__isset.appStoreCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->receipt);
          this->__isset.receipt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->signature);
          this->__isset.signature = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->seller);
          this->__isset.seller = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->requestType);
          this->__isset.requestType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ignoreReceipt);
          this->__isset.ignoreReceipt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CoinPurchaseConfirm::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CoinPurchaseConfirm");

  xfer += oprot->writeFieldBegin("orderId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->orderId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("appStoreCode", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->appStoreCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("receipt", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->receipt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("signature", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->signature);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seller", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->seller);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("requestType", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->requestType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ignoreReceipt", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->ignoreReceipt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CoinPurchaseConfirm &a, CoinPurchaseConfirm &b) {
  using ::std::swap;
  swap(a.orderId, b.orderId);
  swap(a.appStoreCode, b.appStoreCode);
  swap(a.receipt, b.receipt);
  swap(a.signature, b.signature);
  swap(a.seller, b.seller);
  swap(a.requestType, b.requestType);
  swap(a.ignoreReceipt, b.ignoreReceipt);
  swap(a.__isset, b.__isset);
}

CoinPurchaseConfirm::CoinPurchaseConfirm(const CoinPurchaseConfirm& other609) {
  orderId = other609.orderId;
  appStoreCode = other609.appStoreCode;
  receipt = other609.receipt;
  signature = other609.signature;
  seller = other609.seller;
  requestType = other609.requestType;
  ignoreReceipt = other609.ignoreReceipt;
  __isset = other609.__isset;
}
CoinPurchaseConfirm& CoinPurchaseConfirm::operator=(const CoinPurchaseConfirm& other610) {
  orderId = other610.orderId;
  appStoreCode = other610.appStoreCode;
  receipt = other610.receipt;
  signature = other610.signature;
  seller = other610.seller;
  requestType = other610.requestType;
  ignoreReceipt = other610.ignoreReceipt;
  __isset = other610.__isset;
  return *this;
}
void CoinPurchaseConfirm::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CoinPurchaseConfirm(";
  out << "orderId=" << to_string(orderId);
  out << ", " << "appStoreCode=" << to_string(appStoreCode);
  out << ", " << "receipt=" << to_string(receipt);
  out << ", " << "signature=" << to_string(signature);
  out << ", " << "seller=" << to_string(seller);
  out << ", " << "requestType=" << to_string(requestType);
  out << ", " << "ignoreReceipt=" << to_string(ignoreReceipt);
  out << ")";
}


CoinPurchaseReservation::~CoinPurchaseReservation() throw() {
}


void CoinPurchaseReservation::__set_productId(const std::string& val) {
  this->productId = val;
}

void CoinPurchaseReservation::__set_country(const std::string& val) {
  this->country = val;
}

void CoinPurchaseReservation::__set_currency(const std::string& val) {
  this->currency = val;
}

void CoinPurchaseReservation::__set_price(const std::string& val) {
  this->price = val;
}

void CoinPurchaseReservation::__set_appStoreCode(const PaymentType::type val) {
  this->appStoreCode = val;
}

void CoinPurchaseReservation::__set_language(const std::string& val) {
  this->language = val;
}

void CoinPurchaseReservation::__set_pgCode(const PaymentPgType::type val) {
  this->pgCode = val;
}

void CoinPurchaseReservation::__set_redirectUrl(const std::string& val) {
  this->redirectUrl = val;
}
std::ostream& operator<<(std::ostream& out, const CoinPurchaseReservation& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CoinPurchaseReservation::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->productId);
          this->__isset.productId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->country);
          this->__isset.country = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currency);
          this->__isset.currency = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->price);
          this->__isset.price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast611;
          xfer += iprot->readI32(ecast611);
          this->appStoreCode = (PaymentType::type)ecast611;
          this->__isset.appStoreCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->language);
          this->__isset.language = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast612;
          xfer += iprot->readI32(ecast612);
          this->pgCode = (PaymentPgType::type)ecast612;
          this->__isset.pgCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->redirectUrl);
          this->__isset.redirectUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CoinPurchaseReservation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CoinPurchaseReservation");

  xfer += oprot->writeFieldBegin("productId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->productId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("country", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->country);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currency", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->currency);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("price", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("appStoreCode", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->appStoreCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("language", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->language);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pgCode", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->pgCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("redirectUrl", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->redirectUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CoinPurchaseReservation &a, CoinPurchaseReservation &b) {
  using ::std::swap;
  swap(a.productId, b.productId);
  swap(a.country, b.country);
  swap(a.currency, b.currency);
  swap(a.price, b.price);
  swap(a.appStoreCode, b.appStoreCode);
  swap(a.language, b.language);
  swap(a.pgCode, b.pgCode);
  swap(a.redirectUrl, b.redirectUrl);
  swap(a.__isset, b.__isset);
}

CoinPurchaseReservation::CoinPurchaseReservation(const CoinPurchaseReservation& other613) {
  productId = other613.productId;
  country = other613.country;
  currency = other613.currency;
  price = other613.price;
  appStoreCode = other613.appStoreCode;
  language = other613.language;
  pgCode = other613.pgCode;
  redirectUrl = other613.redirectUrl;
  __isset = other613.__isset;
}
CoinPurchaseReservation& CoinPurchaseReservation::operator=(const CoinPurchaseReservation& other614) {
  productId = other614.productId;
  country = other614.country;
  currency = other614.currency;
  price = other614.price;
  appStoreCode = other614.appStoreCode;
  language = other614.language;
  pgCode = other614.pgCode;
  redirectUrl = other614.redirectUrl;
  __isset = other614.__isset;
  return *this;
}
void CoinPurchaseReservation::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CoinPurchaseReservation(";
  out << "productId=" << to_string(productId);
  out << ", " << "country=" << to_string(country);
  out << ", " << "currency=" << to_string(currency);
  out << ", " << "price=" << to_string(price);
  out << ", " << "appStoreCode=" << to_string(appStoreCode);
  out << ", " << "language=" << to_string(language);
  out << ", " << "pgCode=" << to_string(pgCode);
  out << ", " << "redirectUrl=" << to_string(redirectUrl);
  out << ")";
}


CoinUseReservationItem::~CoinUseReservationItem() throw() {
}


void CoinUseReservationItem::__set_itemId(const std::string& val) {
  this->itemId = val;
}

void CoinUseReservationItem::__set_itemName(const std::string& val) {
  this->itemName = val;
}

void CoinUseReservationItem::__set_amount(const int32_t val) {
  this->amount = val;
}
std::ostream& operator<<(std::ostream& out, const CoinUseReservationItem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CoinUseReservationItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->itemId);
          this->__isset.itemId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->itemName);
          this->__isset.itemName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->amount);
          this->__isset.amount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CoinUseReservationItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CoinUseReservationItem");

  xfer += oprot->writeFieldBegin("itemId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->itemId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("itemName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->itemName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("amount", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->amount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CoinUseReservationItem &a, CoinUseReservationItem &b) {
  using ::std::swap;
  swap(a.itemId, b.itemId);
  swap(a.itemName, b.itemName);
  swap(a.amount, b.amount);
  swap(a.__isset, b.__isset);
}

CoinUseReservationItem::CoinUseReservationItem(const CoinUseReservationItem& other615) {
  itemId = other615.itemId;
  itemName = other615.itemName;
  amount = other615.amount;
  __isset = other615.__isset;
}
CoinUseReservationItem& CoinUseReservationItem::operator=(const CoinUseReservationItem& other616) {
  itemId = other616.itemId;
  itemName = other616.itemName;
  amount = other616.amount;
  __isset = other616.__isset;
  return *this;
}
void CoinUseReservationItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CoinUseReservationItem(";
  out << "itemId=" << to_string(itemId);
  out << ", " << "itemName=" << to_string(itemName);
  out << ", " << "amount=" << to_string(amount);
  out << ")";
}


CoinUseReservation::~CoinUseReservation() throw() {
}


void CoinUseReservation::__set_channelId(const std::string& val) {
  this->channelId = val;
}

void CoinUseReservation::__set_shopOrderId(const std::string& val) {
  this->shopOrderId = val;
}

void CoinUseReservation::__set_appStoreCode(const PaymentType::type val) {
  this->appStoreCode = val;
}

void CoinUseReservation::__set_items(const std::vector<CoinUseReservationItem> & val) {
  this->items = val;
}

void CoinUseReservation::__set_country(const std::string& val) {
  this->country = val;
}
std::ostream& operator<<(std::ostream& out, const CoinUseReservation& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CoinUseReservation::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->channelId);
          this->__isset.channelId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->shopOrderId);
          this->__isset.shopOrderId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast617;
          xfer += iprot->readI32(ecast617);
          this->appStoreCode = (PaymentType::type)ecast617;
          this->__isset.appStoreCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->items.clear();
            uint32_t _size618;
            ::apache::thrift::protocol::TType _etype621;
            xfer += iprot->readListBegin(_etype621, _size618);
            this->items.resize(_size618);
            uint32_t _i622;
            for (_i622 = 0; _i622 < _size618; ++_i622)
            {
              xfer += this->items[_i622].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.items = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->country);
          this->__isset.country = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CoinUseReservation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CoinUseReservation");

  xfer += oprot->writeFieldBegin("channelId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->channelId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("shopOrderId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->shopOrderId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("appStoreCode", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->appStoreCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("items", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->items.size()));
    std::vector<CoinUseReservationItem> ::const_iterator _iter623;
    for (_iter623 = this->items.begin(); _iter623 != this->items.end(); ++_iter623)
    {
      xfer += (*_iter623).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("country", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->country);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CoinUseReservation &a, CoinUseReservation &b) {
  using ::std::swap;
  swap(a.channelId, b.channelId);
  swap(a.shopOrderId, b.shopOrderId);
  swap(a.appStoreCode, b.appStoreCode);
  swap(a.items, b.items);
  swap(a.country, b.country);
  swap(a.__isset, b.__isset);
}

CoinUseReservation::CoinUseReservation(const CoinUseReservation& other624) {
  channelId = other624.channelId;
  shopOrderId = other624.shopOrderId;
  appStoreCode = other624.appStoreCode;
  items = other624.items;
  country = other624.country;
  __isset = other624.__isset;
}
CoinUseReservation& CoinUseReservation::operator=(const CoinUseReservation& other625) {
  channelId = other625.channelId;
  shopOrderId = other625.shopOrderId;
  appStoreCode = other625.appStoreCode;
  items = other625.items;
  country = other625.country;
  __isset = other625.__isset;
  return *this;
}
void CoinUseReservation::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CoinUseReservation(";
  out << "channelId=" << to_string(channelId);
  out << ", " << "shopOrderId=" << to_string(shopOrderId);
  out << ", " << "appStoreCode=" << to_string(appStoreCode);
  out << ", " << "items=" << to_string(items);
  out << ", " << "country=" << to_string(country);
  out << ")";
}


CompactContact::~CompactContact() throw() {
}


void CompactContact::__set_mid(const std::string& val) {
  this->mid = val;
}

void CompactContact::__set_createdTime(const int64_t val) {
  this->createdTime = val;
}

void CompactContact::__set_modifiedTime(const int64_t val) {
  this->modifiedTime = val;
}

void CompactContact::__set_status(const ContactStatus::type val) {
  this->status = val;
}

void CompactContact::__set_settings(const int64_t val) {
  this->settings = val;
}

void CompactContact::__set_displayNameOverridden(const std::string& val) {
  this->displayNameOverridden = val;
}
std::ostream& operator<<(std::ostream& out, const CompactContact& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CompactContact::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mid);
          this->__isset.mid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createdTime);
          this->__isset.createdTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->modifiedTime);
          this->__isset.modifiedTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast626;
          xfer += iprot->readI32(ecast626);
          this->status = (ContactStatus::type)ecast626;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->settings);
          this->__isset.settings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->displayNameOverridden);
          this->__isset.displayNameOverridden = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CompactContact::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CompactContact");

  xfer += oprot->writeFieldBegin("mid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->mid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createdTime", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->createdTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("modifiedTime", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->modifiedTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("settings", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->settings);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayNameOverridden", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->displayNameOverridden);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CompactContact &a, CompactContact &b) {
  using ::std::swap;
  swap(a.mid, b.mid);
  swap(a.createdTime, b.createdTime);
  swap(a.modifiedTime, b.modifiedTime);
  swap(a.status, b.status);
  swap(a.settings, b.settings);
  swap(a.displayNameOverridden, b.displayNameOverridden);
  swap(a.__isset, b.__isset);
}

CompactContact::CompactContact(const CompactContact& other627) {
  mid = other627.mid;
  createdTime = other627.createdTime;
  modifiedTime = other627.modifiedTime;
  status = other627.status;
  settings = other627.settings;
  displayNameOverridden = other627.displayNameOverridden;
  __isset = other627.__isset;
}
CompactContact& CompactContact::operator=(const CompactContact& other628) {
  mid = other628.mid;
  createdTime = other628.createdTime;
  modifiedTime = other628.modifiedTime;
  status = other628.status;
  settings = other628.settings;
  displayNameOverridden = other628.displayNameOverridden;
  __isset = other628.__isset;
  return *this;
}
void CompactContact::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CompactContact(";
  out << "mid=" << to_string(mid);
  out << ", " << "createdTime=" << to_string(createdTime);
  out << ", " << "modifiedTime=" << to_string(modifiedTime);
  out << ", " << "status=" << to_string(status);
  out << ", " << "settings=" << to_string(settings);
  out << ", " << "displayNameOverridden=" << to_string(displayNameOverridden);
  out << ")";
}


ContactModification::~ContactModification() throw() {
}


void ContactModification::__set_type(const ModificationType::type val) {
  this->type = val;
}

void ContactModification::__set_luid(const std::string& val) {
  this->luid = val;
}

void ContactModification::__set_phones(const std::vector<std::string> & val) {
  this->phones = val;
}

void ContactModification::__set_emails(const std::vector<std::string> & val) {
  this->emails = val;
}

void ContactModification::__set_userids(const std::vector<std::string> & val) {
  this->userids = val;
}
std::ostream& operator<<(std::ostream& out, const ContactModification& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ContactModification::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast629;
          xfer += iprot->readI32(ecast629);
          this->type = (ModificationType::type)ecast629;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->luid);
          this->__isset.luid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->phones.clear();
            uint32_t _size630;
            ::apache::thrift::protocol::TType _etype633;
            xfer += iprot->readListBegin(_etype633, _size630);
            this->phones.resize(_size630);
            uint32_t _i634;
            for (_i634 = 0; _i634 < _size630; ++_i634)
            {
              xfer += iprot->readString(this->phones[_i634]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.phones = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->emails.clear();
            uint32_t _size635;
            ::apache::thrift::protocol::TType _etype638;
            xfer += iprot->readListBegin(_etype638, _size635);
            this->emails.resize(_size635);
            uint32_t _i639;
            for (_i639 = 0; _i639 < _size635; ++_i639)
            {
              xfer += iprot->readString(this->emails[_i639]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.emails = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->userids.clear();
            uint32_t _size640;
            ::apache::thrift::protocol::TType _etype643;
            xfer += iprot->readListBegin(_etype643, _size640);
            this->userids.resize(_size640);
            uint32_t _i644;
            for (_i644 = 0; _i644 < _size640; ++_i644)
            {
              xfer += iprot->readString(this->userids[_i644]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.userids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ContactModification::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ContactModification");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("luid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->luid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phones", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->phones.size()));
    std::vector<std::string> ::const_iterator _iter645;
    for (_iter645 = this->phones.begin(); _iter645 != this->phones.end(); ++_iter645)
    {
      xfer += oprot->writeString((*_iter645));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("emails", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->emails.size()));
    std::vector<std::string> ::const_iterator _iter646;
    for (_iter646 = this->emails.begin(); _iter646 != this->emails.end(); ++_iter646)
    {
      xfer += oprot->writeString((*_iter646));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userids", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->userids.size()));
    std::vector<std::string> ::const_iterator _iter647;
    for (_iter647 = this->userids.begin(); _iter647 != this->userids.end(); ++_iter647)
    {
      xfer += oprot->writeString((*_iter647));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ContactModification &a, ContactModification &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.luid, b.luid);
  swap(a.phones, b.phones);
  swap(a.emails, b.emails);
  swap(a.userids, b.userids);
  swap(a.__isset, b.__isset);
}

ContactModification::ContactModification(const ContactModification& other648) {
  type = other648.type;
  luid = other648.luid;
  phones = other648.phones;
  emails = other648.emails;
  userids = other648.userids;
  __isset = other648.__isset;
}
ContactModification& ContactModification::operator=(const ContactModification& other649) {
  type = other649.type;
  luid = other649.luid;
  phones = other649.phones;
  emails = other649.emails;
  userids = other649.userids;
  __isset = other649.__isset;
  return *this;
}
void ContactModification::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ContactModification(";
  out << "type=" << to_string(type);
  out << ", " << "luid=" << to_string(luid);
  out << ", " << "phones=" << to_string(phones);
  out << ", " << "emails=" << to_string(emails);
  out << ", " << "userids=" << to_string(userids);
  out << ")";
}


ContactRegistration::~ContactRegistration() throw() {
}


void ContactRegistration::__set_contact(const Contact& val) {
  this->contact = val;
}

void ContactRegistration::__set_luid(const std::string& val) {
  this->luid = val;
}

void ContactRegistration::__set_contactType(const ContactType::type val) {
  this->contactType = val;
}

void ContactRegistration::__set_contactKey(const std::string& val) {
  this->contactKey = val;
}
std::ostream& operator<<(std::ostream& out, const ContactRegistration& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ContactRegistration::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->contact.read(iprot);
          this->__isset.contact = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->luid);
          this->__isset.luid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast650;
          xfer += iprot->readI32(ecast650);
          this->contactType = (ContactType::type)ecast650;
          this->__isset.contactType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->contactKey);
          this->__isset.contactKey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ContactRegistration::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ContactRegistration");

  xfer += oprot->writeFieldBegin("contact", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->contact.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("luid", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->luid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contactType", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32((int32_t)this->contactType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contactKey", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->contactKey);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ContactRegistration &a, ContactRegistration &b) {
  using ::std::swap;
  swap(a.contact, b.contact);
  swap(a.luid, b.luid);
  swap(a.contactType, b.contactType);
  swap(a.contactKey, b.contactKey);
  swap(a.__isset, b.__isset);
}

ContactRegistration::ContactRegistration(const ContactRegistration& other651) {
  contact = other651.contact;
  luid = other651.luid;
  contactType = other651.contactType;
  contactKey = other651.contactKey;
  __isset = other651.__isset;
}
ContactRegistration& ContactRegistration::operator=(const ContactRegistration& other652) {
  contact = other652.contact;
  luid = other652.luid;
  contactType = other652.contactType;
  contactKey = other652.contactKey;
  __isset = other652.__isset;
  return *this;
}
void ContactRegistration::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ContactRegistration(";
  out << "contact=" << to_string(contact);
  out << ", " << "luid=" << to_string(luid);
  out << ", " << "contactType=" << to_string(contactType);
  out << ", " << "contactKey=" << to_string(contactKey);
  out << ")";
}


ContactReport::~ContactReport() throw() {
}


void ContactReport::__set_mid(const std::string& val) {
  this->mid = val;
}

void ContactReport::__set_exists(const bool val) {
  this->exists = val;
}

void ContactReport::__set_contact(const Contact& val) {
  this->contact = val;
}
std::ostream& operator<<(std::ostream& out, const ContactReport& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ContactReport::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mid);
          this->__isset.mid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->exists);
          this->__isset.exists = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->contact.read(iprot);
          this->__isset.contact = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ContactReport::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ContactReport");

  xfer += oprot->writeFieldBegin("mid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->mid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("exists", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->exists);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contact", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->contact.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ContactReport &a, ContactReport &b) {
  using ::std::swap;
  swap(a.mid, b.mid);
  swap(a.exists, b.exists);
  swap(a.contact, b.contact);
  swap(a.__isset, b.__isset);
}

ContactReport::ContactReport(const ContactReport& other653) {
  mid = other653.mid;
  exists = other653.exists;
  contact = other653.contact;
  __isset = other653.__isset;
}
ContactReport& ContactReport::operator=(const ContactReport& other654) {
  mid = other654.mid;
  exists = other654.exists;
  contact = other654.contact;
  __isset = other654.__isset;
  return *this;
}
void ContactReport::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ContactReport(";
  out << "mid=" << to_string(mid);
  out << ", " << "exists=" << to_string(exists);
  out << ", " << "contact=" << to_string(contact);
  out << ")";
}


ContactReportResult::~ContactReportResult() throw() {
}


void ContactReportResult::__set_mid(const std::string& val) {
  this->mid = val;
}

void ContactReportResult::__set_exists(const bool val) {
  this->exists = val;
}
std::ostream& operator<<(std::ostream& out, const ContactReportResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ContactReportResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mid);
          this->__isset.mid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->exists);
          this->__isset.exists = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ContactReportResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ContactReportResult");

  xfer += oprot->writeFieldBegin("mid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->mid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("exists", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->exists);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ContactReportResult &a, ContactReportResult &b) {
  using ::std::swap;
  swap(a.mid, b.mid);
  swap(a.exists, b.exists);
  swap(a.__isset, b.__isset);
}

ContactReportResult::ContactReportResult(const ContactReportResult& other655) {
  mid = other655.mid;
  exists = other655.exists;
  __isset = other655.__isset;
}
ContactReportResult& ContactReportResult::operator=(const ContactReportResult& other656) {
  mid = other656.mid;
  exists = other656.exists;
  __isset = other656.__isset;
  return *this;
}
void ContactReportResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ContactReportResult(";
  out << "mid=" << to_string(mid);
  out << ", " << "exists=" << to_string(exists);
  out << ")";
}


DeviceInfo::~DeviceInfo() throw() {
}


void DeviceInfo::__set_deviceName(const std::string& val) {
  this->deviceName = val;
}

void DeviceInfo::__set_systemName(const std::string& val) {
  this->systemName = val;
}

void DeviceInfo::__set_systemVersion(const std::string& val) {
  this->systemVersion = val;
}

void DeviceInfo::__set_model(const std::string& val) {
  this->model = val;
}

void DeviceInfo::__set_carrierCode(const CarrierCode::type val) {
  this->carrierCode = val;
}

void DeviceInfo::__set_carrierName(const std::string& val) {
  this->carrierName = val;
}

void DeviceInfo::__set_applicationType(const ApplicationType::type val) {
  this->applicationType = val;
}
std::ostream& operator<<(std::ostream& out, const DeviceInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DeviceInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->deviceName);
          this->__isset.deviceName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->systemName);
          this->__isset.systemName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->systemVersion);
          this->__isset.systemVersion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->model);
          this->__isset.model = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast657;
          xfer += iprot->readI32(ecast657);
          this->carrierCode = (CarrierCode::type)ecast657;
          this->__isset.carrierCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->carrierName);
          this->__isset.carrierName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast658;
          xfer += iprot->readI32(ecast658);
          this->applicationType = (ApplicationType::type)ecast658;
          this->__isset.applicationType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeviceInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DeviceInfo");

  xfer += oprot->writeFieldBegin("deviceName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->deviceName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("systemName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->systemName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("systemVersion", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->systemVersion);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("model", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->model);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("carrierCode", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32((int32_t)this->carrierCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("carrierName", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->carrierName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationType", ::apache::thrift::protocol::T_I32, 20);
  xfer += oprot->writeI32((int32_t)this->applicationType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeviceInfo &a, DeviceInfo &b) {
  using ::std::swap;
  swap(a.deviceName, b.deviceName);
  swap(a.systemName, b.systemName);
  swap(a.systemVersion, b.systemVersion);
  swap(a.model, b.model);
  swap(a.carrierCode, b.carrierCode);
  swap(a.carrierName, b.carrierName);
  swap(a.applicationType, b.applicationType);
  swap(a.__isset, b.__isset);
}

DeviceInfo::DeviceInfo(const DeviceInfo& other659) {
  deviceName = other659.deviceName;
  systemName = other659.systemName;
  systemVersion = other659.systemVersion;
  model = other659.model;
  carrierCode = other659.carrierCode;
  carrierName = other659.carrierName;
  applicationType = other659.applicationType;
  __isset = other659.__isset;
}
DeviceInfo& DeviceInfo::operator=(const DeviceInfo& other660) {
  deviceName = other660.deviceName;
  systemName = other660.systemName;
  systemVersion = other660.systemVersion;
  model = other660.model;
  carrierCode = other660.carrierCode;
  carrierName = other660.carrierName;
  applicationType = other660.applicationType;
  __isset = other660.__isset;
  return *this;
}
void DeviceInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DeviceInfo(";
  out << "deviceName=" << to_string(deviceName);
  out << ", " << "systemName=" << to_string(systemName);
  out << ", " << "systemVersion=" << to_string(systemVersion);
  out << ", " << "model=" << to_string(model);
  out << ", " << "carrierCode=" << to_string(carrierCode);
  out << ", " << "carrierName=" << to_string(carrierName);
  out << ", " << "applicationType=" << to_string(applicationType);
  out << ")";
}


EmailConfirmation::~EmailConfirmation() throw() {
}


void EmailConfirmation::__set_usePasswordSet(const bool val) {
  this->usePasswordSet = val;
}

void EmailConfirmation::__set_email(const std::string& val) {
  this->email = val;
}

void EmailConfirmation::__set_password(const std::string& val) {
  this->password = val;
}

void EmailConfirmation::__set_ignoreDuplication(const bool val) {
  this->ignoreDuplication = val;
}
std::ostream& operator<<(std::ostream& out, const EmailConfirmation& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t EmailConfirmation::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->usePasswordSet);
          this->__isset.usePasswordSet = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->password);
          this->__isset.password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ignoreDuplication);
          this->__isset.ignoreDuplication = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t EmailConfirmation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("EmailConfirmation");

  xfer += oprot->writeFieldBegin("usePasswordSet", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->usePasswordSet);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->password);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ignoreDuplication", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->ignoreDuplication);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EmailConfirmation &a, EmailConfirmation &b) {
  using ::std::swap;
  swap(a.usePasswordSet, b.usePasswordSet);
  swap(a.email, b.email);
  swap(a.password, b.password);
  swap(a.ignoreDuplication, b.ignoreDuplication);
  swap(a.__isset, b.__isset);
}

EmailConfirmation::EmailConfirmation(const EmailConfirmation& other661) {
  usePasswordSet = other661.usePasswordSet;
  email = other661.email;
  password = other661.password;
  ignoreDuplication = other661.ignoreDuplication;
  __isset = other661.__isset;
}
EmailConfirmation& EmailConfirmation::operator=(const EmailConfirmation& other662) {
  usePasswordSet = other662.usePasswordSet;
  email = other662.email;
  password = other662.password;
  ignoreDuplication = other662.ignoreDuplication;
  __isset = other662.__isset;
  return *this;
}
void EmailConfirmation::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "EmailConfirmation(";
  out << "usePasswordSet=" << to_string(usePasswordSet);
  out << ", " << "email=" << to_string(email);
  out << ", " << "password=" << to_string(password);
  out << ", " << "ignoreDuplication=" << to_string(ignoreDuplication);
  out << ")";
}


EmailConfirmationSession::~EmailConfirmationSession() throw() {
}


void EmailConfirmationSession::__set_emailConfirmationType(const EmailConfirmationType::type val) {
  this->emailConfirmationType = val;
}

void EmailConfirmationSession::__set_verifier(const std::string& val) {
  this->verifier = val;
}

void EmailConfirmationSession::__set_targetEmail(const std::string& val) {
  this->targetEmail = val;
}
std::ostream& operator<<(std::ostream& out, const EmailConfirmationSession& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t EmailConfirmationSession::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast663;
          xfer += iprot->readI32(ecast663);
          this->emailConfirmationType = (EmailConfirmationType::type)ecast663;
          this->__isset.emailConfirmationType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->verifier);
          this->__isset.verifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->targetEmail);
          this->__isset.targetEmail = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t EmailConfirmationSession::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("EmailConfirmationSession");

  xfer += oprot->writeFieldBegin("emailConfirmationType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->emailConfirmationType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("verifier", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->verifier);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("targetEmail", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->targetEmail);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EmailConfirmationSession &a, EmailConfirmationSession &b) {
  using ::std::swap;
  swap(a.emailConfirmationType, b.emailConfirmationType);
  swap(a.verifier, b.verifier);
  swap(a.targetEmail, b.targetEmail);
  swap(a.__isset, b.__isset);
}

EmailConfirmationSession::EmailConfirmationSession(const EmailConfirmationSession& other664) {
  emailConfirmationType = other664.emailConfirmationType;
  verifier = other664.verifier;
  targetEmail = other664.targetEmail;
  __isset = other664.__isset;
}
EmailConfirmationSession& EmailConfirmationSession::operator=(const EmailConfirmationSession& other665) {
  emailConfirmationType = other665.emailConfirmationType;
  verifier = other665.verifier;
  targetEmail = other665.targetEmail;
  __isset = other665.__isset;
  return *this;
}
void EmailConfirmationSession::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "EmailConfirmationSession(";
  out << "emailConfirmationType=" << to_string(emailConfirmationType);
  out << ", " << "verifier=" << to_string(verifier);
  out << ", " << "targetEmail=" << to_string(targetEmail);
  out << ")";
}


FriendChannelMatrix::~FriendChannelMatrix() throw() {
}


void FriendChannelMatrix::__set_channelId(const std::string& val) {
  this->channelId = val;
}

void FriendChannelMatrix::__set_representMid(const std::string& val) {
  this->representMid = val;
}

void FriendChannelMatrix::__set_count(const int32_t val) {
  this->count = val;
}

void FriendChannelMatrix::__set_point(const int32_t val) {
  this->point = val;
}
std::ostream& operator<<(std::ostream& out, const FriendChannelMatrix& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t FriendChannelMatrix::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->channelId);
          this->__isset.channelId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->representMid);
          this->__isset.representMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->point);
          this->__isset.point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FriendChannelMatrix::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FriendChannelMatrix");

  xfer += oprot->writeFieldBegin("channelId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->channelId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("representMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->representMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("point", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->point);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FriendChannelMatrix &a, FriendChannelMatrix &b) {
  using ::std::swap;
  swap(a.channelId, b.channelId);
  swap(a.representMid, b.representMid);
  swap(a.count, b.count);
  swap(a.point, b.point);
  swap(a.__isset, b.__isset);
}

FriendChannelMatrix::FriendChannelMatrix(const FriendChannelMatrix& other666) {
  channelId = other666.channelId;
  representMid = other666.representMid;
  count = other666.count;
  point = other666.point;
  __isset = other666.__isset;
}
FriendChannelMatrix& FriendChannelMatrix::operator=(const FriendChannelMatrix& other667) {
  channelId = other667.channelId;
  representMid = other667.representMid;
  count = other667.count;
  point = other667.point;
  __isset = other667.__isset;
  return *this;
}
void FriendChannelMatrix::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FriendChannelMatrix(";
  out << "channelId=" << to_string(channelId);
  out << ", " << "representMid=" << to_string(representMid);
  out << ", " << "count=" << to_string(count);
  out << ", " << "point=" << to_string(point);
  out << ")";
}


FriendChannelMatricesResponse::~FriendChannelMatricesResponse() throw() {
}


void FriendChannelMatricesResponse::__set_expires(const int64_t val) {
  this->expires = val;
}

void FriendChannelMatricesResponse::__set_matrices(const std::vector<FriendChannelMatrix> & val) {
  this->matrices = val;
}
std::ostream& operator<<(std::ostream& out, const FriendChannelMatricesResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t FriendChannelMatricesResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->expires);
          this->__isset.expires = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->matrices.clear();
            uint32_t _size668;
            ::apache::thrift::protocol::TType _etype671;
            xfer += iprot->readListBegin(_etype671, _size668);
            this->matrices.resize(_size668);
            uint32_t _i672;
            for (_i672 = 0; _i672 < _size668; ++_i672)
            {
              xfer += this->matrices[_i672].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.matrices = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FriendChannelMatricesResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FriendChannelMatricesResponse");

  xfer += oprot->writeFieldBegin("expires", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->expires);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("matrices", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->matrices.size()));
    std::vector<FriendChannelMatrix> ::const_iterator _iter673;
    for (_iter673 = this->matrices.begin(); _iter673 != this->matrices.end(); ++_iter673)
    {
      xfer += (*_iter673).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FriendChannelMatricesResponse &a, FriendChannelMatricesResponse &b) {
  using ::std::swap;
  swap(a.expires, b.expires);
  swap(a.matrices, b.matrices);
  swap(a.__isset, b.__isset);
}

FriendChannelMatricesResponse::FriendChannelMatricesResponse(const FriendChannelMatricesResponse& other674) {
  expires = other674.expires;
  matrices = other674.matrices;
  __isset = other674.__isset;
}
FriendChannelMatricesResponse& FriendChannelMatricesResponse::operator=(const FriendChannelMatricesResponse& other675) {
  expires = other675.expires;
  matrices = other675.matrices;
  __isset = other675.__isset;
  return *this;
}
void FriendChannelMatricesResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FriendChannelMatricesResponse(";
  out << "expires=" << to_string(expires);
  out << ", " << "matrices=" << to_string(matrices);
  out << ")";
}


FriendRequest::~FriendRequest() throw() {
}


void FriendRequest::__set_eMid(const std::string& val) {
  this->eMid = val;
}

void FriendRequest::__set_mid(const std::string& val) {
  this->mid = val;
}

void FriendRequest::__set_direction(const FriendRequestDirection::type val) {
  this->direction = val;
}

void FriendRequest::__set_method(const FriendRequestMethod::type val) {
  this->method = val;
}

void FriendRequest::__set_param(const std::string& val) {
  this->param = val;
}

void FriendRequest::__set_timestamp(const int64_t val) {
  this->timestamp = val;
}

void FriendRequest::__set_seqId(const int64_t val) {
  this->seqId = val;
}

void FriendRequest::__set_displayName(const std::string& val) {
  this->displayName = val;
}

void FriendRequest::__set_picturePath(const std::string& val) {
  this->picturePath = val;
}

void FriendRequest::__set_pictureStatus(const std::string& val) {
  this->pictureStatus = val;
}
std::ostream& operator<<(std::ostream& out, const FriendRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t FriendRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eMid);
          this->__isset.eMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mid);
          this->__isset.mid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast676;
          xfer += iprot->readI32(ecast676);
          this->direction = (FriendRequestDirection::type)ecast676;
          this->__isset.direction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast677;
          xfer += iprot->readI32(ecast677);
          this->method = (FriendRequestMethod::type)ecast677;
          this->__isset.method = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->param);
          this->__isset.param = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->seqId);
          this->__isset.seqId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->displayName);
          this->__isset.displayName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->picturePath);
          this->__isset.picturePath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pictureStatus);
          this->__isset.pictureStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FriendRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FriendRequest");

  xfer += oprot->writeFieldBegin("eMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->eMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->mid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("direction", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->direction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("method", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->method);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->param);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seqId", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->seqId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayName", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->displayName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("picturePath", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->picturePath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pictureStatus", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->pictureStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FriendRequest &a, FriendRequest &b) {
  using ::std::swap;
  swap(a.eMid, b.eMid);
  swap(a.mid, b.mid);
  swap(a.direction, b.direction);
  swap(a.method, b.method);
  swap(a.param, b.param);
  swap(a.timestamp, b.timestamp);
  swap(a.seqId, b.seqId);
  swap(a.displayName, b.displayName);
  swap(a.picturePath, b.picturePath);
  swap(a.pictureStatus, b.pictureStatus);
  swap(a.__isset, b.__isset);
}

FriendRequest::FriendRequest(const FriendRequest& other678) {
  eMid = other678.eMid;
  mid = other678.mid;
  direction = other678.direction;
  method = other678.method;
  param = other678.param;
  timestamp = other678.timestamp;
  seqId = other678.seqId;
  displayName = other678.displayName;
  picturePath = other678.picturePath;
  pictureStatus = other678.pictureStatus;
  __isset = other678.__isset;
}
FriendRequest& FriendRequest::operator=(const FriendRequest& other679) {
  eMid = other679.eMid;
  mid = other679.mid;
  direction = other679.direction;
  method = other679.method;
  param = other679.param;
  timestamp = other679.timestamp;
  seqId = other679.seqId;
  displayName = other679.displayName;
  picturePath = other679.picturePath;
  pictureStatus = other679.pictureStatus;
  __isset = other679.__isset;
  return *this;
}
void FriendRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FriendRequest(";
  out << "eMid=" << to_string(eMid);
  out << ", " << "mid=" << to_string(mid);
  out << ", " << "direction=" << to_string(direction);
  out << ", " << "method=" << to_string(method);
  out << ", " << "param=" << to_string(param);
  out << ", " << "timestamp=" << to_string(timestamp);
  out << ", " << "seqId=" << to_string(seqId);
  out << ", " << "displayName=" << to_string(displayName);
  out << ", " << "picturePath=" << to_string(picturePath);
  out << ", " << "pictureStatus=" << to_string(pictureStatus);
  out << ")";
}


FriendRequestsInfo::~FriendRequestsInfo() throw() {
}


void FriendRequestsInfo::__set_totalIncomingCount(const int32_t val) {
  this->totalIncomingCount = val;
}

void FriendRequestsInfo::__set_totalOutgoingCount(const int32_t val) {
  this->totalOutgoingCount = val;
}

void FriendRequestsInfo::__set_recentIncomings(const std::vector<FriendRequest> & val) {
  this->recentIncomings = val;
}

void FriendRequestsInfo::__set_recentOutgoings(const std::vector<FriendRequest> & val) {
  this->recentOutgoings = val;
}

void FriendRequestsInfo::__set_totalIncomingLimit(const int32_t val) {
  this->totalIncomingLimit = val;
}

void FriendRequestsInfo::__set_totalOutgoingLimit(const int32_t val) {
  this->totalOutgoingLimit = val;
}
std::ostream& operator<<(std::ostream& out, const FriendRequestsInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t FriendRequestsInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalIncomingCount);
          this->__isset.totalIncomingCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalOutgoingCount);
          this->__isset.totalOutgoingCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->recentIncomings.clear();
            uint32_t _size680;
            ::apache::thrift::protocol::TType _etype683;
            xfer += iprot->readListBegin(_etype683, _size680);
            this->recentIncomings.resize(_size680);
            uint32_t _i684;
            for (_i684 = 0; _i684 < _size680; ++_i684)
            {
              xfer += this->recentIncomings[_i684].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.recentIncomings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->recentOutgoings.clear();
            uint32_t _size685;
            ::apache::thrift::protocol::TType _etype688;
            xfer += iprot->readListBegin(_etype688, _size685);
            this->recentOutgoings.resize(_size685);
            uint32_t _i689;
            for (_i689 = 0; _i689 < _size685; ++_i689)
            {
              xfer += this->recentOutgoings[_i689].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.recentOutgoings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalIncomingLimit);
          this->__isset.totalIncomingLimit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalOutgoingLimit);
          this->__isset.totalOutgoingLimit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FriendRequestsInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FriendRequestsInfo");

  xfer += oprot->writeFieldBegin("totalIncomingCount", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->totalIncomingCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalOutgoingCount", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->totalOutgoingCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recentIncomings", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->recentIncomings.size()));
    std::vector<FriendRequest> ::const_iterator _iter690;
    for (_iter690 = this->recentIncomings.begin(); _iter690 != this->recentIncomings.end(); ++_iter690)
    {
      xfer += (*_iter690).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recentOutgoings", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->recentOutgoings.size()));
    std::vector<FriendRequest> ::const_iterator _iter691;
    for (_iter691 = this->recentOutgoings.begin(); _iter691 != this->recentOutgoings.end(); ++_iter691)
    {
      xfer += (*_iter691).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalIncomingLimit", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->totalIncomingLimit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalOutgoingLimit", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->totalOutgoingLimit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FriendRequestsInfo &a, FriendRequestsInfo &b) {
  using ::std::swap;
  swap(a.totalIncomingCount, b.totalIncomingCount);
  swap(a.totalOutgoingCount, b.totalOutgoingCount);
  swap(a.recentIncomings, b.recentIncomings);
  swap(a.recentOutgoings, b.recentOutgoings);
  swap(a.totalIncomingLimit, b.totalIncomingLimit);
  swap(a.totalOutgoingLimit, b.totalOutgoingLimit);
  swap(a.__isset, b.__isset);
}

FriendRequestsInfo::FriendRequestsInfo(const FriendRequestsInfo& other692) {
  totalIncomingCount = other692.totalIncomingCount;
  totalOutgoingCount = other692.totalOutgoingCount;
  recentIncomings = other692.recentIncomings;
  recentOutgoings = other692.recentOutgoings;
  totalIncomingLimit = other692.totalIncomingLimit;
  totalOutgoingLimit = other692.totalOutgoingLimit;
  __isset = other692.__isset;
}
FriendRequestsInfo& FriendRequestsInfo::operator=(const FriendRequestsInfo& other693) {
  totalIncomingCount = other693.totalIncomingCount;
  totalOutgoingCount = other693.totalOutgoingCount;
  recentIncomings = other693.recentIncomings;
  recentOutgoings = other693.recentOutgoings;
  totalIncomingLimit = other693.totalIncomingLimit;
  totalOutgoingLimit = other693.totalOutgoingLimit;
  __isset = other693.__isset;
  return *this;
}
void FriendRequestsInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FriendRequestsInfo(";
  out << "totalIncomingCount=" << to_string(totalIncomingCount);
  out << ", " << "totalOutgoingCount=" << to_string(totalOutgoingCount);
  out << ", " << "recentIncomings=" << to_string(recentIncomings);
  out << ", " << "recentOutgoings=" << to_string(recentOutgoings);
  out << ", " << "totalIncomingLimit=" << to_string(totalIncomingLimit);
  out << ", " << "totalOutgoingLimit=" << to_string(totalOutgoingLimit);
  out << ")";
}


Geolocation::~Geolocation() throw() {
}


void Geolocation::__set_longitude(const double val) {
  this->longitude = val;
}

void Geolocation::__set_latitude(const double val) {
  this->latitude = val;
}
std::ostream& operator<<(std::ostream& out, const Geolocation& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Geolocation::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->longitude);
          this->__isset.longitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->latitude);
          this->__isset.latitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Geolocation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Geolocation");

  xfer += oprot->writeFieldBegin("longitude", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->longitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("latitude", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->latitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Geolocation &a, Geolocation &b) {
  using ::std::swap;
  swap(a.longitude, b.longitude);
  swap(a.latitude, b.latitude);
  swap(a.__isset, b.__isset);
}

Geolocation::Geolocation(const Geolocation& other694) {
  longitude = other694.longitude;
  latitude = other694.latitude;
  __isset = other694.__isset;
}
Geolocation& Geolocation::operator=(const Geolocation& other695) {
  longitude = other695.longitude;
  latitude = other695.latitude;
  __isset = other695.__isset;
  return *this;
}
void Geolocation::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Geolocation(";
  out << "longitude=" << to_string(longitude);
  out << ", " << "latitude=" << to_string(latitude);
  out << ")";
}


NotificationTarget::~NotificationTarget() throw() {
}


void NotificationTarget::__set_applicationType(const std::string& val) {
  this->applicationType = val;
}

void NotificationTarget::__set_applicationVersion(const std::string& val) {
  this->applicationVersion = val;
}

void NotificationTarget::__set_region(const std::string& val) {
  this->region = val;
}
std::ostream& operator<<(std::ostream& out, const NotificationTarget& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t NotificationTarget::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationType);
          this->__isset.applicationType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationVersion);
          this->__isset.applicationVersion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->region);
          this->__isset.region = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NotificationTarget::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NotificationTarget");

  xfer += oprot->writeFieldBegin("applicationType", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->applicationType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationVersion", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationVersion);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("region", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->region);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NotificationTarget &a, NotificationTarget &b) {
  using ::std::swap;
  swap(a.applicationType, b.applicationType);
  swap(a.applicationVersion, b.applicationVersion);
  swap(a.region, b.region);
  swap(a.__isset, b.__isset);
}

NotificationTarget::NotificationTarget(const NotificationTarget& other696) {
  applicationType = other696.applicationType;
  applicationVersion = other696.applicationVersion;
  region = other696.region;
  __isset = other696.__isset;
}
NotificationTarget& NotificationTarget::operator=(const NotificationTarget& other697) {
  applicationType = other697.applicationType;
  applicationVersion = other697.applicationVersion;
  region = other697.region;
  __isset = other697.__isset;
  return *this;
}
void NotificationTarget::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NotificationTarget(";
  out << "applicationType=" << to_string(applicationType);
  out << ", " << "applicationVersion=" << to_string(applicationVersion);
  out << ", " << "region=" << to_string(region);
  out << ")";
}


GlobalEvent::~GlobalEvent() throw() {
}


void GlobalEvent::__set_key(const std::string& val) {
  this->key = val;
}

void GlobalEvent::__set_targets(const std::vector<NotificationTarget> & val) {
  this->targets = val;
}

void GlobalEvent::__set_createdTime(const int64_t val) {
  this->createdTime = val;
}

void GlobalEvent::__set_data(const int64_t val) {
  this->data = val;
}

void GlobalEvent::__set_maxDelay(const int32_t val) {
  this->maxDelay = val;
}
std::ostream& operator<<(std::ostream& out, const GlobalEvent& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GlobalEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->targets.clear();
            uint32_t _size698;
            ::apache::thrift::protocol::TType _etype701;
            xfer += iprot->readListBegin(_etype701, _size698);
            this->targets.resize(_size698);
            uint32_t _i702;
            for (_i702 = 0; _i702 < _size698; ++_i702)
            {
              xfer += this->targets[_i702].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.targets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createdTime);
          this->__isset.createdTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->data);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxDelay);
          this->__isset.maxDelay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GlobalEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GlobalEvent");

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("targets", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->targets.size()));
    std::vector<NotificationTarget> ::const_iterator _iter703;
    for (_iter703 = this->targets.begin(); _iter703 != this->targets.end(); ++_iter703)
    {
      xfer += (*_iter703).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createdTime", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->createdTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxDelay", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->maxDelay);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GlobalEvent &a, GlobalEvent &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.targets, b.targets);
  swap(a.createdTime, b.createdTime);
  swap(a.data, b.data);
  swap(a.maxDelay, b.maxDelay);
  swap(a.__isset, b.__isset);
}

GlobalEvent::GlobalEvent(const GlobalEvent& other704) {
  key = other704.key;
  targets = other704.targets;
  createdTime = other704.createdTime;
  data = other704.data;
  maxDelay = other704.maxDelay;
  __isset = other704.__isset;
}
GlobalEvent& GlobalEvent::operator=(const GlobalEvent& other705) {
  key = other705.key;
  targets = other705.targets;
  createdTime = other705.createdTime;
  data = other705.data;
  maxDelay = other705.maxDelay;
  __isset = other705.__isset;
  return *this;
}
void GlobalEvent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GlobalEvent(";
  out << "key=" << to_string(key);
  out << ", " << "targets=" << to_string(targets);
  out << ", " << "createdTime=" << to_string(createdTime);
  out << ", " << "data=" << to_string(data);
  out << ", " << "maxDelay=" << to_string(maxDelay);
  out << ")";
}


GroupPreference::~GroupPreference() throw() {
}


void GroupPreference::__set_invitationTicket(const std::string& val) {
  this->invitationTicket = val;
}

void GroupPreference::__set_favoriteTimestamp(const int64_t val) {
  this->favoriteTimestamp = val;
}
std::ostream& operator<<(std::ostream& out, const GroupPreference& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GroupPreference::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->invitationTicket);
          this->__isset.invitationTicket = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->favoriteTimestamp);
          this->__isset.favoriteTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GroupPreference::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GroupPreference");

  xfer += oprot->writeFieldBegin("invitationTicket", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->invitationTicket);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("favoriteTimestamp", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->favoriteTimestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GroupPreference &a, GroupPreference &b) {
  using ::std::swap;
  swap(a.invitationTicket, b.invitationTicket);
  swap(a.favoriteTimestamp, b.favoriteTimestamp);
  swap(a.__isset, b.__isset);
}

GroupPreference::GroupPreference(const GroupPreference& other706) {
  invitationTicket = other706.invitationTicket;
  favoriteTimestamp = other706.favoriteTimestamp;
  __isset = other706.__isset;
}
GroupPreference& GroupPreference::operator=(const GroupPreference& other707) {
  invitationTicket = other707.invitationTicket;
  favoriteTimestamp = other707.favoriteTimestamp;
  __isset = other707.__isset;
  return *this;
}
void GroupPreference::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GroupPreference(";
  out << "invitationTicket=" << to_string(invitationTicket);
  out << ", " << "favoriteTimestamp=" << to_string(favoriteTimestamp);
  out << ")";
}


Group::~Group() throw() {
}


void Group::__set_id(const std::string& val) {
  this->id = val;
}

void Group::__set_createdTime(const int64_t val) {
  this->createdTime = val;
}

void Group::__set_name(const std::string& val) {
  this->name = val;
}

void Group::__set_pictureStatus(const std::string& val) {
  this->pictureStatus = val;
}

void Group::__set_preventedJoinByTicket(const bool val) {
  this->preventedJoinByTicket = val;
}

void Group::__set_groupPreference(const GroupPreference& val) {
  this->groupPreference = val;
}

void Group::__set_members(const std::vector<Contact> & val) {
  this->members = val;
}

void Group::__set_creator(const Contact& val) {
  this->creator = val;
}

void Group::__set_invitee(const std::vector<Contact> & val) {
  this->invitee = val;
}

void Group::__set_notificationDisabled(const bool val) {
  this->notificationDisabled = val;
}

void Group::__set_picturePath(const std::string& val) {
  this->picturePath = val;
}

void Group::__set_memberMids(const std::vector<std::string> & val) {
  this->memberMids = val;
}

void Group::__set_inviteeMids(const std::vector<std::string> & val) {
  this->inviteeMids = val;
}
std::ostream& operator<<(std::ostream& out, const Group& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Group::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createdTime);
          this->__isset.createdTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pictureStatus);
          this->__isset.pictureStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->preventedJoinByTicket);
          this->__isset.preventedJoinByTicket = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->groupPreference.read(iprot);
          this->__isset.groupPreference = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->members.clear();
            uint32_t _size708;
            ::apache::thrift::protocol::TType _etype711;
            xfer += iprot->readListBegin(_etype711, _size708);
            this->members.resize(_size708);
            uint32_t _i712;
            for (_i712 = 0; _i712 < _size708; ++_i712)
            {
              xfer += this->members[_i712].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.members = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->creator.read(iprot);
          this->__isset.creator = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->invitee.clear();
            uint32_t _size713;
            ::apache::thrift::protocol::TType _etype716;
            xfer += iprot->readListBegin(_etype716, _size713);
            this->invitee.resize(_size713);
            uint32_t _i717;
            for (_i717 = 0; _i717 < _size713; ++_i717)
            {
              xfer += this->invitee[_i717].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.invitee = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->notificationDisabled);
          this->__isset.notificationDisabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->picturePath);
          this->__isset.picturePath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->memberMids.clear();
            uint32_t _size718;
            ::apache::thrift::protocol::TType _etype721;
            xfer += iprot->readListBegin(_etype721, _size718);
            this->memberMids.resize(_size718);
            uint32_t _i722;
            for (_i722 = 0; _i722 < _size718; ++_i722)
            {
              xfer += iprot->readString(this->memberMids[_i722]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.memberMids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->inviteeMids.clear();
            uint32_t _size723;
            ::apache::thrift::protocol::TType _etype726;
            xfer += iprot->readListBegin(_etype726, _size723);
            this->inviteeMids.resize(_size723);
            uint32_t _i727;
            for (_i727 = 0; _i727 < _size723; ++_i727)
            {
              xfer += iprot->readString(this->inviteeMids[_i727]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.inviteeMids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Group::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Group");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createdTime", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->createdTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pictureStatus", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->pictureStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("preventedJoinByTicket", ::apache::thrift::protocol::T_BOOL, 12);
  xfer += oprot->writeBool(this->preventedJoinByTicket);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("groupPreference", ::apache::thrift::protocol::T_STRUCT, 13);
  xfer += this->groupPreference.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("members", ::apache::thrift::protocol::T_LIST, 20);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->members.size()));
    std::vector<Contact> ::const_iterator _iter728;
    for (_iter728 = this->members.begin(); _iter728 != this->members.end(); ++_iter728)
    {
      xfer += (*_iter728).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("creator", ::apache::thrift::protocol::T_STRUCT, 21);
  xfer += this->creator.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("invitee", ::apache::thrift::protocol::T_LIST, 22);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->invitee.size()));
    std::vector<Contact> ::const_iterator _iter729;
    for (_iter729 = this->invitee.begin(); _iter729 != this->invitee.end(); ++_iter729)
    {
      xfer += (*_iter729).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notificationDisabled", ::apache::thrift::protocol::T_BOOL, 31);
  xfer += oprot->writeBool(this->notificationDisabled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("picturePath", ::apache::thrift::protocol::T_STRING, 32);
  xfer += oprot->writeString(this->picturePath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("memberMids", ::apache::thrift::protocol::T_LIST, 40);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->memberMids.size()));
    std::vector<std::string> ::const_iterator _iter730;
    for (_iter730 = this->memberMids.begin(); _iter730 != this->memberMids.end(); ++_iter730)
    {
      xfer += oprot->writeString((*_iter730));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inviteeMids", ::apache::thrift::protocol::T_LIST, 41);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->inviteeMids.size()));
    std::vector<std::string> ::const_iterator _iter731;
    for (_iter731 = this->inviteeMids.begin(); _iter731 != this->inviteeMids.end(); ++_iter731)
    {
      xfer += oprot->writeString((*_iter731));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Group &a, Group &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.createdTime, b.createdTime);
  swap(a.name, b.name);
  swap(a.pictureStatus, b.pictureStatus);
  swap(a.preventedJoinByTicket, b.preventedJoinByTicket);
  swap(a.groupPreference, b.groupPreference);
  swap(a.members, b.members);
  swap(a.creator, b.creator);
  swap(a.invitee, b.invitee);
  swap(a.notificationDisabled, b.notificationDisabled);
  swap(a.picturePath, b.picturePath);
  swap(a.memberMids, b.memberMids);
  swap(a.inviteeMids, b.inviteeMids);
  swap(a.__isset, b.__isset);
}

Group::Group(const Group& other732) {
  id = other732.id;
  createdTime = other732.createdTime;
  name = other732.name;
  pictureStatus = other732.pictureStatus;
  preventedJoinByTicket = other732.preventedJoinByTicket;
  groupPreference = other732.groupPreference;
  members = other732.members;
  creator = other732.creator;
  invitee = other732.invitee;
  notificationDisabled = other732.notificationDisabled;
  picturePath = other732.picturePath;
  memberMids = other732.memberMids;
  inviteeMids = other732.inviteeMids;
  __isset = other732.__isset;
}
Group& Group::operator=(const Group& other733) {
  id = other733.id;
  createdTime = other733.createdTime;
  name = other733.name;
  pictureStatus = other733.pictureStatus;
  preventedJoinByTicket = other733.preventedJoinByTicket;
  groupPreference = other733.groupPreference;
  members = other733.members;
  creator = other733.creator;
  invitee = other733.invitee;
  notificationDisabled = other733.notificationDisabled;
  picturePath = other733.picturePath;
  memberMids = other733.memberMids;
  inviteeMids = other733.inviteeMids;
  __isset = other733.__isset;
  return *this;
}
void Group::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Group(";
  out << "id=" << to_string(id);
  out << ", " << "createdTime=" << to_string(createdTime);
  out << ", " << "name=" << to_string(name);
  out << ", " << "pictureStatus=" << to_string(pictureStatus);
  out << ", " << "preventedJoinByTicket=" << to_string(preventedJoinByTicket);
  out << ", " << "groupPreference=" << to_string(groupPreference);
  out << ", " << "members=" << to_string(members);
  out << ", " << "creator=" << to_string(creator);
  out << ", " << "invitee=" << to_string(invitee);
  out << ", " << "notificationDisabled=" << to_string(notificationDisabled);
  out << ", " << "picturePath=" << to_string(picturePath);
  out << ", " << "memberMids=" << to_string(memberMids);
  out << ", " << "inviteeMids=" << to_string(inviteeMids);
  out << ")";
}


IdentityCredential::~IdentityCredential() throw() {
}


void IdentityCredential::__set_provider(const IdentityProvider::type val) {
  this->provider = val;
}

void IdentityCredential::__set_identifier(const std::string& val) {
  this->identifier = val;
}

void IdentityCredential::__set_password(const std::string& val) {
  this->password = val;
}
std::ostream& operator<<(std::ostream& out, const IdentityCredential& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t IdentityCredential::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast734;
          xfer += iprot->readI32(ecast734);
          this->provider = (IdentityProvider::type)ecast734;
          this->__isset.provider = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->identifier);
          this->__isset.identifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->password);
          this->__isset.password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t IdentityCredential::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("IdentityCredential");

  xfer += oprot->writeFieldBegin("provider", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->provider);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("identifier", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->identifier);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->password);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(IdentityCredential &a, IdentityCredential &b) {
  using ::std::swap;
  swap(a.provider, b.provider);
  swap(a.identifier, b.identifier);
  swap(a.password, b.password);
  swap(a.__isset, b.__isset);
}

IdentityCredential::IdentityCredential(const IdentityCredential& other735) {
  provider = other735.provider;
  identifier = other735.identifier;
  password = other735.password;
  __isset = other735.__isset;
}
IdentityCredential& IdentityCredential::operator=(const IdentityCredential& other736) {
  provider = other736.provider;
  identifier = other736.identifier;
  password = other736.password;
  __isset = other736.__isset;
  return *this;
}
void IdentityCredential::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "IdentityCredential(";
  out << "provider=" << to_string(provider);
  out << ", " << "identifier=" << to_string(identifier);
  out << ", " << "password=" << to_string(password);
  out << ")";
}


LastReadMessageId::~LastReadMessageId() throw() {
}


void LastReadMessageId::__set_mid(const std::string& val) {
  this->mid = val;
}

void LastReadMessageId::__set_lastReadMessageId(const std::string& val) {
  this->lastReadMessageId = val;
}
std::ostream& operator<<(std::ostream& out, const LastReadMessageId& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LastReadMessageId::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mid);
          this->__isset.mid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lastReadMessageId);
          this->__isset.lastReadMessageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LastReadMessageId::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LastReadMessageId");

  xfer += oprot->writeFieldBegin("mid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->mid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastReadMessageId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->lastReadMessageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LastReadMessageId &a, LastReadMessageId &b) {
  using ::std::swap;
  swap(a.mid, b.mid);
  swap(a.lastReadMessageId, b.lastReadMessageId);
  swap(a.__isset, b.__isset);
}

LastReadMessageId::LastReadMessageId(const LastReadMessageId& other737) {
  mid = other737.mid;
  lastReadMessageId = other737.lastReadMessageId;
  __isset = other737.__isset;
}
LastReadMessageId& LastReadMessageId::operator=(const LastReadMessageId& other738) {
  mid = other738.mid;
  lastReadMessageId = other738.lastReadMessageId;
  __isset = other738.__isset;
  return *this;
}
void LastReadMessageId::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LastReadMessageId(";
  out << "mid=" << to_string(mid);
  out << ", " << "lastReadMessageId=" << to_string(lastReadMessageId);
  out << ")";
}


LastReadMessageIds::~LastReadMessageIds() throw() {
}


void LastReadMessageIds::__set_chatId(const std::string& val) {
  this->chatId = val;
}

void LastReadMessageIds::__set_lastReadMessageIds(const std::vector<LastReadMessageId> & val) {
  this->lastReadMessageIds = val;
}
std::ostream& operator<<(std::ostream& out, const LastReadMessageIds& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LastReadMessageIds::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->chatId);
          this->__isset.chatId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->lastReadMessageIds.clear();
            uint32_t _size739;
            ::apache::thrift::protocol::TType _etype742;
            xfer += iprot->readListBegin(_etype742, _size739);
            this->lastReadMessageIds.resize(_size739);
            uint32_t _i743;
            for (_i743 = 0; _i743 < _size739; ++_i743)
            {
              xfer += this->lastReadMessageIds[_i743].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.lastReadMessageIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LastReadMessageIds::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LastReadMessageIds");

  xfer += oprot->writeFieldBegin("chatId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->chatId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastReadMessageIds", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->lastReadMessageIds.size()));
    std::vector<LastReadMessageId> ::const_iterator _iter744;
    for (_iter744 = this->lastReadMessageIds.begin(); _iter744 != this->lastReadMessageIds.end(); ++_iter744)
    {
      xfer += (*_iter744).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LastReadMessageIds &a, LastReadMessageIds &b) {
  using ::std::swap;
  swap(a.chatId, b.chatId);
  swap(a.lastReadMessageIds, b.lastReadMessageIds);
  swap(a.__isset, b.__isset);
}

LastReadMessageIds::LastReadMessageIds(const LastReadMessageIds& other745) {
  chatId = other745.chatId;
  lastReadMessageIds = other745.lastReadMessageIds;
  __isset = other745.__isset;
}
LastReadMessageIds& LastReadMessageIds::operator=(const LastReadMessageIds& other746) {
  chatId = other746.chatId;
  lastReadMessageIds = other746.lastReadMessageIds;
  __isset = other746.__isset;
  return *this;
}
void LastReadMessageIds::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LastReadMessageIds(";
  out << "chatId=" << to_string(chatId);
  out << ", " << "lastReadMessageIds=" << to_string(lastReadMessageIds);
  out << ")";
}


VerificationSessionData::~VerificationSessionData() throw() {
}


void VerificationSessionData::__set_sessionId(const std::string& val) {
  this->sessionId = val;
}

void VerificationSessionData::__set_method(const VerificationMethod::type val) {
  this->method = val;
}

void VerificationSessionData::__set_callback(const std::string& val) {
  this->callback = val;
}

void VerificationSessionData::__set_normalizedPhone(const std::string& val) {
  this->normalizedPhone = val;
}

void VerificationSessionData::__set_countryCode(const std::string& val) {
  this->countryCode = val;
}

void VerificationSessionData::__set_nationalSignificantNumber(const std::string& val) {
  this->nationalSignificantNumber = val;
}

void VerificationSessionData::__set_availableVerificationMethods(const std::vector<VerificationMethod::type> & val) {
  this->availableVerificationMethods = val;
}

void VerificationSessionData::__set_callerIdMask(const std::string& val) {
  this->callerIdMask = val;
}
std::ostream& operator<<(std::ostream& out, const VerificationSessionData& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t VerificationSessionData::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sessionId);
          this->__isset.sessionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast747;
          xfer += iprot->readI32(ecast747);
          this->method = (VerificationMethod::type)ecast747;
          this->__isset.method = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->callback);
          this->__isset.callback = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->normalizedPhone);
          this->__isset.normalizedPhone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->countryCode);
          this->__isset.countryCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nationalSignificantNumber);
          this->__isset.nationalSignificantNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->availableVerificationMethods.clear();
            uint32_t _size748;
            ::apache::thrift::protocol::TType _etype751;
            xfer += iprot->readListBegin(_etype751, _size748);
            this->availableVerificationMethods.resize(_size748);
            uint32_t _i752;
            for (_i752 = 0; _i752 < _size748; ++_i752)
            {
              int32_t ecast753;
              xfer += iprot->readI32(ecast753);
              this->availableVerificationMethods[_i752] = (VerificationMethod::type)ecast753;
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.availableVerificationMethods = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->callerIdMask);
          this->__isset.callerIdMask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VerificationSessionData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("VerificationSessionData");

  xfer += oprot->writeFieldBegin("sessionId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->sessionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("method", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->method);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("callback", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->callback);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("normalizedPhone", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->normalizedPhone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("countryCode", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->countryCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nationalSignificantNumber", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->nationalSignificantNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("availableVerificationMethods", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->availableVerificationMethods.size()));
    std::vector<VerificationMethod::type> ::const_iterator _iter754;
    for (_iter754 = this->availableVerificationMethods.begin(); _iter754 != this->availableVerificationMethods.end(); ++_iter754)
    {
      xfer += oprot->writeI32((int32_t)(*_iter754));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("callerIdMask", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->callerIdMask);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(VerificationSessionData &a, VerificationSessionData &b) {
  using ::std::swap;
  swap(a.sessionId, b.sessionId);
  swap(a.method, b.method);
  swap(a.callback, b.callback);
  swap(a.normalizedPhone, b.normalizedPhone);
  swap(a.countryCode, b.countryCode);
  swap(a.nationalSignificantNumber, b.nationalSignificantNumber);
  swap(a.availableVerificationMethods, b.availableVerificationMethods);
  swap(a.callerIdMask, b.callerIdMask);
  swap(a.__isset, b.__isset);
}

VerificationSessionData::VerificationSessionData(const VerificationSessionData& other755) {
  sessionId = other755.sessionId;
  method = other755.method;
  callback = other755.callback;
  normalizedPhone = other755.normalizedPhone;
  countryCode = other755.countryCode;
  nationalSignificantNumber = other755.nationalSignificantNumber;
  availableVerificationMethods = other755.availableVerificationMethods;
  callerIdMask = other755.callerIdMask;
  __isset = other755.__isset;
}
VerificationSessionData& VerificationSessionData::operator=(const VerificationSessionData& other756) {
  sessionId = other756.sessionId;
  method = other756.method;
  callback = other756.callback;
  normalizedPhone = other756.normalizedPhone;
  countryCode = other756.countryCode;
  nationalSignificantNumber = other756.nationalSignificantNumber;
  availableVerificationMethods = other756.availableVerificationMethods;
  callerIdMask = other756.callerIdMask;
  __isset = other756.__isset;
  return *this;
}
void VerificationSessionData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "VerificationSessionData(";
  out << "sessionId=" << to_string(sessionId);
  out << ", " << "method=" << to_string(method);
  out << ", " << "callback=" << to_string(callback);
  out << ", " << "normalizedPhone=" << to_string(normalizedPhone);
  out << ", " << "countryCode=" << to_string(countryCode);
  out << ", " << "nationalSignificantNumber=" << to_string(nationalSignificantNumber);
  out << ", " << "availableVerificationMethods=" << to_string(availableVerificationMethods);
  out << ", " << "callerIdMask=" << to_string(callerIdMask);
  out << ")";
}


LoginResult::~LoginResult() throw() {
}


void LoginResult::__set_authToken(const std::string& val) {
  this->authToken = val;
}

void LoginResult::__set_certificate(const std::string& val) {
  this->certificate = val;
}

void LoginResult::__set_verifier(const std::string& val) {
  this->verifier = val;
}

void LoginResult::__set_pinCode(const std::string& val) {
  this->pinCode = val;
}

void LoginResult::__set_type(const LoginResultType::type val) {
  this->type = val;
}

void LoginResult::__set_lastPrimaryBindTime(const int64_t val) {
  this->lastPrimaryBindTime = val;
}

void LoginResult::__set_displayMessage(const std::string& val) {
  this->displayMessage = val;
}

void LoginResult::__set_sessionForSMSConfirm(const VerificationSessionData& val) {
  this->sessionForSMSConfirm = val;
}
std::ostream& operator<<(std::ostream& out, const LoginResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LoginResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->authToken);
          this->__isset.authToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->certificate);
          this->__isset.certificate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->verifier);
          this->__isset.verifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pinCode);
          this->__isset.pinCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast757;
          xfer += iprot->readI32(ecast757);
          this->type = (LoginResultType::type)ecast757;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastPrimaryBindTime);
          this->__isset.lastPrimaryBindTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->displayMessage);
          this->__isset.displayMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sessionForSMSConfirm.read(iprot);
          this->__isset.sessionForSMSConfirm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LoginResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LoginResult");

  xfer += oprot->writeFieldBegin("authToken", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->authToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("certificate", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->certificate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("verifier", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->verifier);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pinCode", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->pinCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastPrimaryBindTime", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->lastPrimaryBindTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayMessage", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->displayMessage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sessionForSMSConfirm", ::apache::thrift::protocol::T_STRUCT, 8);
  xfer += this->sessionForSMSConfirm.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LoginResult &a, LoginResult &b) {
  using ::std::swap;
  swap(a.authToken, b.authToken);
  swap(a.certificate, b.certificate);
  swap(a.verifier, b.verifier);
  swap(a.pinCode, b.pinCode);
  swap(a.type, b.type);
  swap(a.lastPrimaryBindTime, b.lastPrimaryBindTime);
  swap(a.displayMessage, b.displayMessage);
  swap(a.sessionForSMSConfirm, b.sessionForSMSConfirm);
  swap(a.__isset, b.__isset);
}

LoginResult::LoginResult(const LoginResult& other758) {
  authToken = other758.authToken;
  certificate = other758.certificate;
  verifier = other758.verifier;
  pinCode = other758.pinCode;
  type = other758.type;
  lastPrimaryBindTime = other758.lastPrimaryBindTime;
  displayMessage = other758.displayMessage;
  sessionForSMSConfirm = other758.sessionForSMSConfirm;
  __isset = other758.__isset;
}
LoginResult& LoginResult::operator=(const LoginResult& other759) {
  authToken = other759.authToken;
  certificate = other759.certificate;
  verifier = other759.verifier;
  pinCode = other759.pinCode;
  type = other759.type;
  lastPrimaryBindTime = other759.lastPrimaryBindTime;
  displayMessage = other759.displayMessage;
  sessionForSMSConfirm = other759.sessionForSMSConfirm;
  __isset = other759.__isset;
  return *this;
}
void LoginResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LoginResult(";
  out << "authToken=" << to_string(authToken);
  out << ", " << "certificate=" << to_string(certificate);
  out << ", " << "verifier=" << to_string(verifier);
  out << ", " << "pinCode=" << to_string(pinCode);
  out << ", " << "type=" << to_string(type);
  out << ", " << "lastPrimaryBindTime=" << to_string(lastPrimaryBindTime);
  out << ", " << "displayMessage=" << to_string(displayMessage);
  out << ", " << "sessionForSMSConfirm=" << to_string(sessionForSMSConfirm);
  out << ")";
}


LoginRequest::~LoginRequest() throw() {
}


void LoginRequest::__set_type(const int32_t val) {
  this->type = val;
}

void LoginRequest::__set_identityProvider(const int32_t val) {
  this->identityProvider = val;
}

void LoginRequest::__set_identifier(const std::string& val) {
  this->identifier = val;
}

void LoginRequest::__set_password(const std::string& val) {
  this->password = val;
}

void LoginRequest::__set_keepLoggedIn(const bool val) {
  this->keepLoggedIn = val;
}

void LoginRequest::__set_accessLocation(const std::string& val) {
  this->accessLocation = val;
}

void LoginRequest::__set_systemName(const std::string& val) {
  this->systemName = val;
}

void LoginRequest::__set_certificate(const std::string& val) {
  this->certificate = val;
}

void LoginRequest::__set_verifier(const std::string& val) {
  this->verifier = val;
}

void LoginRequest::__set_secret(const std::string& val) {
  this->secret = val;
}

void LoginRequest::__set_e2eeVersion(const int32_t val) {
  this->e2eeVersion = val;
}
std::ostream& operator<<(std::ostream& out, const LoginRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LoginRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->identityProvider);
          this->__isset.identityProvider = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->identifier);
          this->__isset.identifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->password);
          this->__isset.password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->keepLoggedIn);
          this->__isset.keepLoggedIn = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->accessLocation);
          this->__isset.accessLocation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->systemName);
          this->__isset.systemName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->certificate);
          this->__isset.certificate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->verifier);
          this->__isset.verifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->secret);
          this->__isset.secret = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->e2eeVersion);
          this->__isset.e2eeVersion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LoginRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LoginRequest");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("identityProvider", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->identityProvider);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("identifier", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->identifier);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->password);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("keepLoggedIn", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->keepLoggedIn);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("accessLocation", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->accessLocation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("systemName", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->systemName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("certificate", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->certificate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("verifier", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->verifier);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("secret", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->secret);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("e2eeVersion", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->e2eeVersion);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LoginRequest &a, LoginRequest &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.identityProvider, b.identityProvider);
  swap(a.identifier, b.identifier);
  swap(a.password, b.password);
  swap(a.keepLoggedIn, b.keepLoggedIn);
  swap(a.accessLocation, b.accessLocation);
  swap(a.systemName, b.systemName);
  swap(a.certificate, b.certificate);
  swap(a.verifier, b.verifier);
  swap(a.secret, b.secret);
  swap(a.e2eeVersion, b.e2eeVersion);
  swap(a.__isset, b.__isset);
}

LoginRequest::LoginRequest(const LoginRequest& other760) {
  type = other760.type;
  identityProvider = other760.identityProvider;
  identifier = other760.identifier;
  password = other760.password;
  keepLoggedIn = other760.keepLoggedIn;
  accessLocation = other760.accessLocation;
  systemName = other760.systemName;
  certificate = other760.certificate;
  verifier = other760.verifier;
  secret = other760.secret;
  e2eeVersion = other760.e2eeVersion;
  __isset = other760.__isset;
}
LoginRequest& LoginRequest::operator=(const LoginRequest& other761) {
  type = other761.type;
  identityProvider = other761.identityProvider;
  identifier = other761.identifier;
  password = other761.password;
  keepLoggedIn = other761.keepLoggedIn;
  accessLocation = other761.accessLocation;
  systemName = other761.systemName;
  certificate = other761.certificate;
  verifier = other761.verifier;
  secret = other761.secret;
  e2eeVersion = other761.e2eeVersion;
  __isset = other761.__isset;
  return *this;
}
void LoginRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LoginRequest(";
  out << "type=" << to_string(type);
  out << ", " << "identityProvider=" << to_string(identityProvider);
  out << ", " << "identifier=" << to_string(identifier);
  out << ", " << "password=" << to_string(password);
  out << ", " << "keepLoggedIn=" << to_string(keepLoggedIn);
  out << ", " << "accessLocation=" << to_string(accessLocation);
  out << ", " << "systemName=" << to_string(systemName);
  out << ", " << "certificate=" << to_string(certificate);
  out << ", " << "verifier=" << to_string(verifier);
  out << ", " << "secret=" << to_string(secret);
  out << ", " << "e2eeVersion=" << to_string(e2eeVersion);
  out << ")";
}


LoginSession::~LoginSession() throw() {
}


void LoginSession::__set_tokenKey(const std::string& val) {
  this->tokenKey = val;
}

void LoginSession::__set_expirationTime(const int64_t val) {
  this->expirationTime = val;
}

void LoginSession::__set_applicationType(const ApplicationType::type val) {
  this->applicationType = val;
}

void LoginSession::__set_systemName(const std::string& val) {
  this->systemName = val;
}

void LoginSession::__set_accessLocation(const std::string& val) {
  this->accessLocation = val;
}
std::ostream& operator<<(std::ostream& out, const LoginSession& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LoginSession::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tokenKey);
          this->__isset.tokenKey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->expirationTime);
          this->__isset.expirationTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast762;
          xfer += iprot->readI32(ecast762);
          this->applicationType = (ApplicationType::type)ecast762;
          this->__isset.applicationType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->systemName);
          this->__isset.systemName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->accessLocation);
          this->__isset.accessLocation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LoginSession::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LoginSession");

  xfer += oprot->writeFieldBegin("tokenKey", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->tokenKey);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("expirationTime", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->expirationTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationType", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32((int32_t)this->applicationType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("systemName", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->systemName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("accessLocation", ::apache::thrift::protocol::T_STRING, 22);
  xfer += oprot->writeString(this->accessLocation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LoginSession &a, LoginSession &b) {
  using ::std::swap;
  swap(a.tokenKey, b.tokenKey);
  swap(a.expirationTime, b.expirationTime);
  swap(a.applicationType, b.applicationType);
  swap(a.systemName, b.systemName);
  swap(a.accessLocation, b.accessLocation);
  swap(a.__isset, b.__isset);
}

LoginSession::LoginSession(const LoginSession& other763) {
  tokenKey = other763.tokenKey;
  expirationTime = other763.expirationTime;
  applicationType = other763.applicationType;
  systemName = other763.systemName;
  accessLocation = other763.accessLocation;
  __isset = other763.__isset;
}
LoginSession& LoginSession::operator=(const LoginSession& other764) {
  tokenKey = other764.tokenKey;
  expirationTime = other764.expirationTime;
  applicationType = other764.applicationType;
  systemName = other764.systemName;
  accessLocation = other764.accessLocation;
  __isset = other764.__isset;
  return *this;
}
void LoginSession::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LoginSession(";
  out << "tokenKey=" << to_string(tokenKey);
  out << ", " << "expirationTime=" << to_string(expirationTime);
  out << ", " << "applicationType=" << to_string(applicationType);
  out << ", " << "systemName=" << to_string(systemName);
  out << ", " << "accessLocation=" << to_string(accessLocation);
  out << ")";
}


Message::~Message() throw() {
}


void Message::__set__from(const std::string& val) {
  this->_from = val;
}

void Message::__set_displayName(const std::string& val) {
  this->displayName = val;
}

void Message::__set_picturePath(const std::string& val) {
  this->picturePath = val;
}

void Message::__set_type(const std::string& val) {
  this->type = val;
}

void Message::__set_person(const std::string& val) {
  this->person = val;
}

void Message::__set_person2(const std::string& val) {
  this->person2 = val;
}

void Message::__set_personName(const std::string& val) {
  this->personName = val;
}

void Message::__set_personName2(const std::string& val) {
  this->personName2 = val;
}

void Message::__set_to(const std::string& val) {
  this->to = val;
}

void Message::__set_toType(const MIDType::type val) {
  this->toType = val;
}

void Message::__set_id(const std::string& val) {
  this->id = val;
}

void Message::__set_createdTime(const int64_t val) {
  this->createdTime = val;
}

void Message::__set_deliveredTime(const int64_t val) {
  this->deliveredTime = val;
}

void Message::__set_text(const std::string& val) {
  this->text = val;
}

void Message::__set_location(const Location& val) {
  this->location = val;
}

void Message::__set_hasContent(const bool val) {
  this->hasContent = val;
}

void Message::__set_contentType(const ContentType::type val) {
  this->contentType = val;
}

void Message::__set_contentPreview(const std::string& val) {
  this->contentPreview = val;
}

void Message::__set_contentMetadata(const std::map<std::string, std::string> & val) {
  this->contentMetadata = val;
}

void Message::__set_sessionId(const int8_t val) {
  this->sessionId = val;
}

void Message::__set_chunks(const std::vector<std::string> & val) {
  this->chunks = val;
}

void Message::__set_relatedMessageId(const std::string& val) {
  this->relatedMessageId = val;
}

void Message::__set_messageRelationType(const MessageRelationType::type val) {
  this->messageRelationType = val;
}

void Message::__set_readCount(const int32_t val) {
  this->readCount = val;
}

void Message::__set_relatedMessageServiceCode(const ServiceCode::type val) {
  this->relatedMessageServiceCode = val;
}
std::ostream& operator<<(std::ostream& out, const Message& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Message::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_from);
          this->__isset._from = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 99:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->displayName);
          this->__isset.displayName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 98:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->picturePath);
          this->__isset.picturePath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 97:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 96:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->person);
          this->__isset.person = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 95:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->person2);
          this->__isset.person2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 94:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->personName);
          this->__isset.personName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 93:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->personName2);
          this->__isset.personName2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->to);
          this->__isset.to = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast765;
          xfer += iprot->readI32(ecast765);
          this->toType = (MIDType::type)ecast765;
          this->__isset.toType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createdTime);
          this->__isset.createdTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->deliveredTime);
          this->__isset.deliveredTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->text);
          this->__isset.text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->location.read(iprot);
          this->__isset.location = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasContent);
          this->__isset.hasContent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast766;
          xfer += iprot->readI32(ecast766);
          this->contentType = (ContentType::type)ecast766;
          this->__isset.contentType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->contentPreview);
          this->__isset.contentPreview = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->contentMetadata.clear();
            uint32_t _size767;
            ::apache::thrift::protocol::TType _ktype768;
            ::apache::thrift::protocol::TType _vtype769;
            xfer += iprot->readMapBegin(_ktype768, _vtype769, _size767);
            uint32_t _i771;
            for (_i771 = 0; _i771 < _size767; ++_i771)
            {
              std::string _key772;
              xfer += iprot->readString(_key772);
              std::string& _val773 = this->contentMetadata[_key772];
              xfer += iprot->readString(_val773);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.contentMetadata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->sessionId);
          this->__isset.sessionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->chunks.clear();
            uint32_t _size774;
            ::apache::thrift::protocol::TType _etype777;
            xfer += iprot->readListBegin(_etype777, _size774);
            this->chunks.resize(_size774);
            uint32_t _i778;
            for (_i778 = 0; _i778 < _size774; ++_i778)
            {
              xfer += iprot->readBinary(this->chunks[_i778]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.chunks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->relatedMessageId);
          this->__isset.relatedMessageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast779;
          xfer += iprot->readI32(ecast779);
          this->messageRelationType = (MessageRelationType::type)ecast779;
          this->__isset.messageRelationType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->readCount);
          this->__isset.readCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast780;
          xfer += iprot->readI32(ecast780);
          this->relatedMessageServiceCode = (ServiceCode::type)ecast780;
          this->__isset.relatedMessageServiceCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Message::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Message");

  xfer += oprot->writeFieldBegin("_from", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->_from);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->to);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("toType", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->toType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createdTime", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->createdTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("deliveredTime", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->deliveredTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("text", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("location", ::apache::thrift::protocol::T_STRUCT, 11);
  xfer += this->location.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hasContent", ::apache::thrift::protocol::T_BOOL, 14);
  xfer += oprot->writeBool(this->hasContent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contentType", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32((int32_t)this->contentType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contentPreview", ::apache::thrift::protocol::T_STRING, 17);
  xfer += oprot->writeBinary(this->contentPreview);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contentMetadata", ::apache::thrift::protocol::T_MAP, 18);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->contentMetadata.size()));
    std::map<std::string, std::string> ::const_iterator _iter781;
    for (_iter781 = this->contentMetadata.begin(); _iter781 != this->contentMetadata.end(); ++_iter781)
    {
      xfer += oprot->writeString(_iter781->first);
      xfer += oprot->writeString(_iter781->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sessionId", ::apache::thrift::protocol::T_BYTE, 19);
  xfer += oprot->writeByte(this->sessionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chunks", ::apache::thrift::protocol::T_LIST, 20);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->chunks.size()));
    std::vector<std::string> ::const_iterator _iter782;
    for (_iter782 = this->chunks.begin(); _iter782 != this->chunks.end(); ++_iter782)
    {
      xfer += oprot->writeBinary((*_iter782));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("relatedMessageId", ::apache::thrift::protocol::T_STRING, 21);
  xfer += oprot->writeString(this->relatedMessageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageRelationType", ::apache::thrift::protocol::T_I32, 22);
  xfer += oprot->writeI32((int32_t)this->messageRelationType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("readCount", ::apache::thrift::protocol::T_I32, 23);
  xfer += oprot->writeI32(this->readCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("relatedMessageServiceCode", ::apache::thrift::protocol::T_I32, 24);
  xfer += oprot->writeI32((int32_t)this->relatedMessageServiceCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("personName2", ::apache::thrift::protocol::T_STRING, 93);
  xfer += oprot->writeString(this->personName2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("personName", ::apache::thrift::protocol::T_STRING, 94);
  xfer += oprot->writeString(this->personName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("person2", ::apache::thrift::protocol::T_STRING, 95);
  xfer += oprot->writeString(this->person2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("person", ::apache::thrift::protocol::T_STRING, 96);
  xfer += oprot->writeString(this->person);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 97);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("picturePath", ::apache::thrift::protocol::T_STRING, 98);
  xfer += oprot->writeString(this->picturePath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayName", ::apache::thrift::protocol::T_STRING, 99);
  xfer += oprot->writeString(this->displayName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Message &a, Message &b) {
  using ::std::swap;
  swap(a._from, b._from);
  swap(a.displayName, b.displayName);
  swap(a.picturePath, b.picturePath);
  swap(a.type, b.type);
  swap(a.person, b.person);
  swap(a.person2, b.person2);
  swap(a.personName, b.personName);
  swap(a.personName2, b.personName2);
  swap(a.to, b.to);
  swap(a.toType, b.toType);
  swap(a.id, b.id);
  swap(a.createdTime, b.createdTime);
  swap(a.deliveredTime, b.deliveredTime);
  swap(a.text, b.text);
  swap(a.location, b.location);
  swap(a.hasContent, b.hasContent);
  swap(a.contentType, b.contentType);
  swap(a.contentPreview, b.contentPreview);
  swap(a.contentMetadata, b.contentMetadata);
  swap(a.sessionId, b.sessionId);
  swap(a.chunks, b.chunks);
  swap(a.relatedMessageId, b.relatedMessageId);
  swap(a.messageRelationType, b.messageRelationType);
  swap(a.readCount, b.readCount);
  swap(a.relatedMessageServiceCode, b.relatedMessageServiceCode);
  swap(a.__isset, b.__isset);
}

Message::Message(const Message& other783) {
  _from = other783._from;
  displayName = other783.displayName;
  picturePath = other783.picturePath;
  type = other783.type;
  person = other783.person;
  person2 = other783.person2;
  personName = other783.personName;
  personName2 = other783.personName2;
  to = other783.to;
  toType = other783.toType;
  id = other783.id;
  createdTime = other783.createdTime;
  deliveredTime = other783.deliveredTime;
  text = other783.text;
  location = other783.location;
  hasContent = other783.hasContent;
  contentType = other783.contentType;
  contentPreview = other783.contentPreview;
  contentMetadata = other783.contentMetadata;
  sessionId = other783.sessionId;
  chunks = other783.chunks;
  relatedMessageId = other783.relatedMessageId;
  messageRelationType = other783.messageRelationType;
  readCount = other783.readCount;
  relatedMessageServiceCode = other783.relatedMessageServiceCode;
  __isset = other783.__isset;
}
Message& Message::operator=(const Message& other784) {
  _from = other784._from;
  displayName = other784.displayName;
  picturePath = other784.picturePath;
  type = other784.type;
  person = other784.person;
  person2 = other784.person2;
  personName = other784.personName;
  personName2 = other784.personName2;
  to = other784.to;
  toType = other784.toType;
  id = other784.id;
  createdTime = other784.createdTime;
  deliveredTime = other784.deliveredTime;
  text = other784.text;
  location = other784.location;
  hasContent = other784.hasContent;
  contentType = other784.contentType;
  contentPreview = other784.contentPreview;
  contentMetadata = other784.contentMetadata;
  sessionId = other784.sessionId;
  chunks = other784.chunks;
  relatedMessageId = other784.relatedMessageId;
  messageRelationType = other784.messageRelationType;
  readCount = other784.readCount;
  relatedMessageServiceCode = other784.relatedMessageServiceCode;
  __isset = other784.__isset;
  return *this;
}
void Message::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Message(";
  out << "_from=" << to_string(_from);
  out << ", " << "displayName=" << to_string(displayName);
  out << ", " << "picturePath=" << to_string(picturePath);
  out << ", " << "type=" << to_string(type);
  out << ", " << "person=" << to_string(person);
  out << ", " << "person2=" << to_string(person2);
  out << ", " << "personName=" << to_string(personName);
  out << ", " << "personName2=" << to_string(personName2);
  out << ", " << "to=" << to_string(to);
  out << ", " << "toType=" << to_string(toType);
  out << ", " << "id=" << to_string(id);
  out << ", " << "createdTime=" << to_string(createdTime);
  out << ", " << "deliveredTime=" << to_string(deliveredTime);
  out << ", " << "text=" << to_string(text);
  out << ", " << "location=" << to_string(location);
  out << ", " << "hasContent=" << to_string(hasContent);
  out << ", " << "contentType=" << to_string(contentType);
  out << ", " << "contentPreview=" << to_string(contentPreview);
  out << ", " << "contentMetadata=" << to_string(contentMetadata);
  out << ", " << "sessionId=" << to_string(sessionId);
  out << ", " << "chunks=" << to_string(chunks);
  out << ", " << "relatedMessageId=" << to_string(relatedMessageId);
  out << ", " << "messageRelationType=" << to_string(messageRelationType);
  out << ", " << "readCount=" << to_string(readCount);
  out << ", " << "relatedMessageServiceCode=" << to_string(relatedMessageServiceCode);
  out << ")";
}


SquareMessage::~SquareMessage() throw() {
}


void SquareMessage::__set_message(const Message& val) {
  this->message = val;
}

void SquareMessage::__set_fromType(const MIDType::type val) {
  this->fromType = val;
}

void SquareMessage::__set_squareMessageRevision(const int64_t val) {
  this->squareMessageRevision = val;
}
std::ostream& operator<<(std::ostream& out, const SquareMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->message.read(iprot);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast785;
          xfer += iprot->readI32(ecast785);
          this->fromType = (MIDType::type)ecast785;
          this->__isset.fromType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->squareMessageRevision);
          this->__isset.squareMessageRevision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareMessage");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->message.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fromType", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->fromType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareMessageRevision", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->squareMessageRevision);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareMessage &a, SquareMessage &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.fromType, b.fromType);
  swap(a.squareMessageRevision, b.squareMessageRevision);
  swap(a.__isset, b.__isset);
}

SquareMessage::SquareMessage(const SquareMessage& other786) {
  message = other786.message;
  fromType = other786.fromType;
  squareMessageRevision = other786.squareMessageRevision;
  __isset = other786.__isset;
}
SquareMessage& SquareMessage::operator=(const SquareMessage& other787) {
  message = other787.message;
  fromType = other787.fromType;
  squareMessageRevision = other787.squareMessageRevision;
  __isset = other787.__isset;
  return *this;
}
void SquareMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareMessage(";
  out << "message=" << to_string(message);
  out << ", " << "fromType=" << to_string(fromType);
  out << ", " << "squareMessageRevision=" << to_string(squareMessageRevision);
  out << ")";
}


SquareChatStatusWithoutMessage::~SquareChatStatusWithoutMessage() throw() {
}


void SquareChatStatusWithoutMessage::__set_memberCount(const int32_t val) {
  this->memberCount = val;
}

void SquareChatStatusWithoutMessage::__set_unreadMessageCount(const int32_t val) {
  this->unreadMessageCount = val;
}
std::ostream& operator<<(std::ostream& out, const SquareChatStatusWithoutMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareChatStatusWithoutMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->memberCount);
          this->__isset.memberCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unreadMessageCount);
          this->__isset.unreadMessageCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareChatStatusWithoutMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareChatStatusWithoutMessage");

  xfer += oprot->writeFieldBegin("memberCount", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->memberCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unreadMessageCount", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->unreadMessageCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareChatStatusWithoutMessage &a, SquareChatStatusWithoutMessage &b) {
  using ::std::swap;
  swap(a.memberCount, b.memberCount);
  swap(a.unreadMessageCount, b.unreadMessageCount);
  swap(a.__isset, b.__isset);
}

SquareChatStatusWithoutMessage::SquareChatStatusWithoutMessage(const SquareChatStatusWithoutMessage& other788) {
  memberCount = other788.memberCount;
  unreadMessageCount = other788.unreadMessageCount;
  __isset = other788.__isset;
}
SquareChatStatusWithoutMessage& SquareChatStatusWithoutMessage::operator=(const SquareChatStatusWithoutMessage& other789) {
  memberCount = other789.memberCount;
  unreadMessageCount = other789.unreadMessageCount;
  __isset = other789.__isset;
  return *this;
}
void SquareChatStatusWithoutMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareChatStatusWithoutMessage(";
  out << "memberCount=" << to_string(memberCount);
  out << ", " << "unreadMessageCount=" << to_string(unreadMessageCount);
  out << ")";
}


SquareChatStatus::~SquareChatStatus() throw() {
}


void SquareChatStatus::__set_lastMessage(const SquareMessage& val) {
  this->lastMessage = val;
}

void SquareChatStatus::__set_senderDisplayName(const std::string& val) {
  this->senderDisplayName = val;
}

void SquareChatStatus::__set_otherStatus(const SquareChatStatusWithoutMessage& val) {
  this->otherStatus = val;
}
std::ostream& operator<<(std::ostream& out, const SquareChatStatus& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareChatStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->lastMessage.read(iprot);
          this->__isset.lastMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->senderDisplayName);
          this->__isset.senderDisplayName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->otherStatus.read(iprot);
          this->__isset.otherStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareChatStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareChatStatus");

  xfer += oprot->writeFieldBegin("lastMessage", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->lastMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("senderDisplayName", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->senderDisplayName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("otherStatus", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->otherStatus.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareChatStatus &a, SquareChatStatus &b) {
  using ::std::swap;
  swap(a.lastMessage, b.lastMessage);
  swap(a.senderDisplayName, b.senderDisplayName);
  swap(a.otherStatus, b.otherStatus);
  swap(a.__isset, b.__isset);
}

SquareChatStatus::SquareChatStatus(const SquareChatStatus& other790) {
  lastMessage = other790.lastMessage;
  senderDisplayName = other790.senderDisplayName;
  otherStatus = other790.otherStatus;
  __isset = other790.__isset;
}
SquareChatStatus& SquareChatStatus::operator=(const SquareChatStatus& other791) {
  lastMessage = other791.lastMessage;
  senderDisplayName = other791.senderDisplayName;
  otherStatus = other791.otherStatus;
  __isset = other791.__isset;
  return *this;
}
void SquareChatStatus::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareChatStatus(";
  out << "lastMessage=" << to_string(lastMessage);
  out << ", " << "senderDisplayName=" << to_string(senderDisplayName);
  out << ", " << "otherStatus=" << to_string(otherStatus);
  out << ")";
}


SquareChatMember::~SquareChatMember() throw() {
}


void SquareChatMember::__set_squareMemberMid(const std::string& val) {
  this->squareMemberMid = val;
}

void SquareChatMember::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}

void SquareChatMember::__set_revision(const int64_t val) {
  this->revision = val;
}

void SquareChatMember::__set_membershipState(const SquareChatMembershipState::type val) {
  this->membershipState = val;
}

void SquareChatMember::__set_notificationForMessage(const bool val) {
  this->notificationForMessage = val;
}
std::ostream& operator<<(std::ostream& out, const SquareChatMember& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareChatMember::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMemberMid);
          this->__isset.squareMemberMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->revision);
          this->__isset.revision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast792;
          xfer += iprot->readI32(ecast792);
          this->membershipState = (SquareChatMembershipState::type)ecast792;
          this->__isset.membershipState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->notificationForMessage);
          this->__isset.notificationForMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareChatMember::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareChatMember");

  xfer += oprot->writeFieldBegin("squareMemberMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareMemberMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("revision", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->revision);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("membershipState", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->membershipState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notificationForMessage", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->notificationForMessage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareChatMember &a, SquareChatMember &b) {
  using ::std::swap;
  swap(a.squareMemberMid, b.squareMemberMid);
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.revision, b.revision);
  swap(a.membershipState, b.membershipState);
  swap(a.notificationForMessage, b.notificationForMessage);
  swap(a.__isset, b.__isset);
}

SquareChatMember::SquareChatMember(const SquareChatMember& other793) {
  squareMemberMid = other793.squareMemberMid;
  squareChatMid = other793.squareChatMid;
  revision = other793.revision;
  membershipState = other793.membershipState;
  notificationForMessage = other793.notificationForMessage;
  __isset = other793.__isset;
}
SquareChatMember& SquareChatMember::operator=(const SquareChatMember& other794) {
  squareMemberMid = other794.squareMemberMid;
  squareChatMid = other794.squareChatMid;
  revision = other794.revision;
  membershipState = other794.membershipState;
  notificationForMessage = other794.notificationForMessage;
  __isset = other794.__isset;
  return *this;
}
void SquareChatMember::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareChatMember(";
  out << "squareMemberMid=" << to_string(squareMemberMid);
  out << ", " << "squareChatMid=" << to_string(squareChatMid);
  out << ", " << "revision=" << to_string(revision);
  out << ", " << "membershipState=" << to_string(membershipState);
  out << ", " << "notificationForMessage=" << to_string(notificationForMessage);
  out << ")";
}


MessageOperation::~MessageOperation() throw() {
}


void MessageOperation::__set_revision(const int64_t val) {
  this->revision = val;
}

void MessageOperation::__set_createdTime(const int64_t val) {
  this->createdTime = val;
}

void MessageOperation::__set_type(const MessageOperationType::type val) {
  this->type = val;
}

void MessageOperation::__set_reqSeq(const int32_t val) {
  this->reqSeq = val;
}

void MessageOperation::__set_status(const OpStatus::type val) {
  this->status = val;
}

void MessageOperation::__set_param1(const std::string& val) {
  this->param1 = val;
}

void MessageOperation::__set_param2(const std::string& val) {
  this->param2 = val;
}

void MessageOperation::__set_param3(const std::string& val) {
  this->param3 = val;
}

void MessageOperation::__set_message(const Message& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const MessageOperation& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t MessageOperation::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->revision);
          this->__isset.revision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createdTime);
          this->__isset.createdTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast795;
          xfer += iprot->readI32(ecast795);
          this->type = (MessageOperationType::type)ecast795;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->reqSeq);
          this->__isset.reqSeq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast796;
          xfer += iprot->readI32(ecast796);
          this->status = (OpStatus::type)ecast796;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->param1);
          this->__isset.param1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->param2);
          this->__isset.param2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->param3);
          this->__isset.param3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->message.read(iprot);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageOperation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MessageOperation");

  xfer += oprot->writeFieldBegin("revision", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->revision);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createdTime", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->createdTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reqSeq", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->reqSeq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param1", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->param1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param2", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->param2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param3", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->param3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRUCT, 20);
  xfer += this->message.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageOperation &a, MessageOperation &b) {
  using ::std::swap;
  swap(a.revision, b.revision);
  swap(a.createdTime, b.createdTime);
  swap(a.type, b.type);
  swap(a.reqSeq, b.reqSeq);
  swap(a.status, b.status);
  swap(a.param1, b.param1);
  swap(a.param2, b.param2);
  swap(a.param3, b.param3);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

MessageOperation::MessageOperation(const MessageOperation& other797) {
  revision = other797.revision;
  createdTime = other797.createdTime;
  type = other797.type;
  reqSeq = other797.reqSeq;
  status = other797.status;
  param1 = other797.param1;
  param2 = other797.param2;
  param3 = other797.param3;
  message = other797.message;
  __isset = other797.__isset;
}
MessageOperation& MessageOperation::operator=(const MessageOperation& other798) {
  revision = other798.revision;
  createdTime = other798.createdTime;
  type = other798.type;
  reqSeq = other798.reqSeq;
  status = other798.status;
  param1 = other798.param1;
  param2 = other798.param2;
  param3 = other798.param3;
  message = other798.message;
  __isset = other798.__isset;
  return *this;
}
void MessageOperation::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MessageOperation(";
  out << "revision=" << to_string(revision);
  out << ", " << "createdTime=" << to_string(createdTime);
  out << ", " << "type=" << to_string(type);
  out << ", " << "reqSeq=" << to_string(reqSeq);
  out << ", " << "status=" << to_string(status);
  out << ", " << "param1=" << to_string(param1);
  out << ", " << "param2=" << to_string(param2);
  out << ", " << "param3=" << to_string(param3);
  out << ", " << "message=" << to_string(message);
  out << ")";
}


MessageOperations::~MessageOperations() throw() {
}


void MessageOperations::__set_operations(const std::vector<MessageOperation> & val) {
  this->operations = val;
}

void MessageOperations::__set_endFlag(const bool val) {
  this->endFlag = val;
}
std::ostream& operator<<(std::ostream& out, const MessageOperations& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t MessageOperations::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->operations.clear();
            uint32_t _size799;
            ::apache::thrift::protocol::TType _etype802;
            xfer += iprot->readListBegin(_etype802, _size799);
            this->operations.resize(_size799);
            uint32_t _i803;
            for (_i803 = 0; _i803 < _size799; ++_i803)
            {
              xfer += this->operations[_i803].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.operations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->endFlag);
          this->__isset.endFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageOperations::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MessageOperations");

  xfer += oprot->writeFieldBegin("operations", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->operations.size()));
    std::vector<MessageOperation> ::const_iterator _iter804;
    for (_iter804 = this->operations.begin(); _iter804 != this->operations.end(); ++_iter804)
    {
      xfer += (*_iter804).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endFlag", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->endFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageOperations &a, MessageOperations &b) {
  using ::std::swap;
  swap(a.operations, b.operations);
  swap(a.endFlag, b.endFlag);
  swap(a.__isset, b.__isset);
}

MessageOperations::MessageOperations(const MessageOperations& other805) {
  operations = other805.operations;
  endFlag = other805.endFlag;
  __isset = other805.__isset;
}
MessageOperations& MessageOperations::operator=(const MessageOperations& other806) {
  operations = other806.operations;
  endFlag = other806.endFlag;
  __isset = other806.__isset;
  return *this;
}
void MessageOperations::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MessageOperations(";
  out << "operations=" << to_string(operations);
  out << ", " << "endFlag=" << to_string(endFlag);
  out << ")";
}


MessageStoreResult::~MessageStoreResult() throw() {
}


void MessageStoreResult::__set_requestId(const std::string& val) {
  this->requestId = val;
}

void MessageStoreResult::__set_messageIds(const std::vector<std::string> & val) {
  this->messageIds = val;
}
std::ostream& operator<<(std::ostream& out, const MessageStoreResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t MessageStoreResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->requestId);
          this->__isset.requestId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->messageIds.clear();
            uint32_t _size807;
            ::apache::thrift::protocol::TType _etype810;
            xfer += iprot->readListBegin(_etype810, _size807);
            this->messageIds.resize(_size807);
            uint32_t _i811;
            for (_i811 = 0; _i811 < _size807; ++_i811)
            {
              xfer += iprot->readString(this->messageIds[_i811]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.messageIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageStoreResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MessageStoreResult");

  xfer += oprot->writeFieldBegin("requestId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->requestId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageIds", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->messageIds.size()));
    std::vector<std::string> ::const_iterator _iter812;
    for (_iter812 = this->messageIds.begin(); _iter812 != this->messageIds.end(); ++_iter812)
    {
      xfer += oprot->writeString((*_iter812));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageStoreResult &a, MessageStoreResult &b) {
  using ::std::swap;
  swap(a.requestId, b.requestId);
  swap(a.messageIds, b.messageIds);
  swap(a.__isset, b.__isset);
}

MessageStoreResult::MessageStoreResult(const MessageStoreResult& other813) {
  requestId = other813.requestId;
  messageIds = other813.messageIds;
  __isset = other813.__isset;
}
MessageStoreResult& MessageStoreResult::operator=(const MessageStoreResult& other814) {
  requestId = other814.requestId;
  messageIds = other814.messageIds;
  __isset = other814.__isset;
  return *this;
}
void MessageStoreResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MessageStoreResult(";
  out << "requestId=" << to_string(requestId);
  out << ", " << "messageIds=" << to_string(messageIds);
  out << ")";
}


MetaProfile::~MetaProfile() throw() {
}


void MetaProfile::__set_createTime(const int64_t val) {
  this->createTime = val;
}

void MetaProfile::__set_regionCode(const std::string& val) {
  this->regionCode = val;
}

void MetaProfile::__set_identities(const std::map<RegistrationType::type, std::string> & val) {
  this->identities = val;
}
std::ostream& operator<<(std::ostream& out, const MetaProfile& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t MetaProfile::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createTime);
          this->__isset.createTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->regionCode);
          this->__isset.regionCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->identities.clear();
            uint32_t _size815;
            ::apache::thrift::protocol::TType _ktype816;
            ::apache::thrift::protocol::TType _vtype817;
            xfer += iprot->readMapBegin(_ktype816, _vtype817, _size815);
            uint32_t _i819;
            for (_i819 = 0; _i819 < _size815; ++_i819)
            {
              RegistrationType::type _key820;
              int32_t ecast822;
              xfer += iprot->readI32(ecast822);
              _key820 = (RegistrationType::type)ecast822;
              std::string& _val821 = this->identities[_key820];
              xfer += iprot->readString(_val821);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.identities = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetaProfile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetaProfile");

  xfer += oprot->writeFieldBegin("createTime", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->createTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("regionCode", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->regionCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("identities", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->identities.size()));
    std::map<RegistrationType::type, std::string> ::const_iterator _iter823;
    for (_iter823 = this->identities.begin(); _iter823 != this->identities.end(); ++_iter823)
    {
      xfer += oprot->writeI32((int32_t)_iter823->first);
      xfer += oprot->writeString(_iter823->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MetaProfile &a, MetaProfile &b) {
  using ::std::swap;
  swap(a.createTime, b.createTime);
  swap(a.regionCode, b.regionCode);
  swap(a.identities, b.identities);
  swap(a.__isset, b.__isset);
}

MetaProfile::MetaProfile(const MetaProfile& other824) {
  createTime = other824.createTime;
  regionCode = other824.regionCode;
  identities = other824.identities;
  __isset = other824.__isset;
}
MetaProfile& MetaProfile::operator=(const MetaProfile& other825) {
  createTime = other825.createTime;
  regionCode = other825.regionCode;
  identities = other825.identities;
  __isset = other825.__isset;
  return *this;
}
void MetaProfile::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MetaProfile(";
  out << "createTime=" << to_string(createTime);
  out << ", " << "regionCode=" << to_string(regionCode);
  out << ", " << "identities=" << to_string(identities);
  out << ")";
}


NotificationItem::~NotificationItem() throw() {
}


void NotificationItem::__set_id(const std::string& val) {
  this->id = val;
}

void NotificationItem::__set__from(const std::string& val) {
  this->_from = val;
}

void NotificationItem::__set_to(const std::string& val) {
  this->to = val;
}

void NotificationItem::__set_fromChannel(const std::string& val) {
  this->fromChannel = val;
}

void NotificationItem::__set_toChannel(const std::string& val) {
  this->toChannel = val;
}

void NotificationItem::__set_revision(const int64_t val) {
  this->revision = val;
}

void NotificationItem::__set_createdTime(const int64_t val) {
  this->createdTime = val;
}

void NotificationItem::__set_content(const std::map<std::string, std::string> & val) {
  this->content = val;
}
std::ostream& operator<<(std::ostream& out, const NotificationItem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t NotificationItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->_from);
          this->__isset._from = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->to);
          this->__isset.to = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fromChannel);
          this->__isset.fromChannel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->toChannel);
          this->__isset.toChannel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->revision);
          this->__isset.revision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createdTime);
          this->__isset.createdTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->content.clear();
            uint32_t _size826;
            ::apache::thrift::protocol::TType _ktype827;
            ::apache::thrift::protocol::TType _vtype828;
            xfer += iprot->readMapBegin(_ktype827, _vtype828, _size826);
            uint32_t _i830;
            for (_i830 = 0; _i830 < _size826; ++_i830)
            {
              std::string _key831;
              xfer += iprot->readString(_key831);
              std::string& _val832 = this->content[_key831];
              xfer += iprot->readString(_val832);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NotificationItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NotificationItem");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("_from", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->_from);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->to);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fromChannel", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->fromChannel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("toChannel", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->toChannel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("revision", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->revision);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createdTime", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->createdTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_MAP, 9);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->content.size()));
    std::map<std::string, std::string> ::const_iterator _iter833;
    for (_iter833 = this->content.begin(); _iter833 != this->content.end(); ++_iter833)
    {
      xfer += oprot->writeString(_iter833->first);
      xfer += oprot->writeString(_iter833->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NotificationItem &a, NotificationItem &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a._from, b._from);
  swap(a.to, b.to);
  swap(a.fromChannel, b.fromChannel);
  swap(a.toChannel, b.toChannel);
  swap(a.revision, b.revision);
  swap(a.createdTime, b.createdTime);
  swap(a.content, b.content);
  swap(a.__isset, b.__isset);
}

NotificationItem::NotificationItem(const NotificationItem& other834) {
  id = other834.id;
  _from = other834._from;
  to = other834.to;
  fromChannel = other834.fromChannel;
  toChannel = other834.toChannel;
  revision = other834.revision;
  createdTime = other834.createdTime;
  content = other834.content;
  __isset = other834.__isset;
}
NotificationItem& NotificationItem::operator=(const NotificationItem& other835) {
  id = other835.id;
  _from = other835._from;
  to = other835.to;
  fromChannel = other835.fromChannel;
  toChannel = other835.toChannel;
  revision = other835.revision;
  createdTime = other835.createdTime;
  content = other835.content;
  __isset = other835.__isset;
  return *this;
}
void NotificationItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NotificationItem(";
  out << "id=" << to_string(id);
  out << ", " << "_from=" << to_string(_from);
  out << ", " << "to=" << to_string(to);
  out << ", " << "fromChannel=" << to_string(fromChannel);
  out << ", " << "toChannel=" << to_string(toChannel);
  out << ", " << "revision=" << to_string(revision);
  out << ", " << "createdTime=" << to_string(createdTime);
  out << ", " << "content=" << to_string(content);
  out << ")";
}


NotificationFetchResult::~NotificationFetchResult() throw() {
}


void NotificationFetchResult::__set_fetchMode(const NotificationItemFetchMode::type val) {
  this->fetchMode = val;
}

void NotificationFetchResult::__set_itemList(const std::vector<NotificationItem> & val) {
  this->itemList = val;
}
std::ostream& operator<<(std::ostream& out, const NotificationFetchResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t NotificationFetchResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast836;
          xfer += iprot->readI32(ecast836);
          this->fetchMode = (NotificationItemFetchMode::type)ecast836;
          this->__isset.fetchMode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->itemList.clear();
            uint32_t _size837;
            ::apache::thrift::protocol::TType _etype840;
            xfer += iprot->readListBegin(_etype840, _size837);
            this->itemList.resize(_size837);
            uint32_t _i841;
            for (_i841 = 0; _i841 < _size837; ++_i841)
            {
              xfer += this->itemList[_i841].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.itemList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NotificationFetchResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NotificationFetchResult");

  xfer += oprot->writeFieldBegin("fetchMode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->fetchMode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("itemList", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->itemList.size()));
    std::vector<NotificationItem> ::const_iterator _iter842;
    for (_iter842 = this->itemList.begin(); _iter842 != this->itemList.end(); ++_iter842)
    {
      xfer += (*_iter842).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NotificationFetchResult &a, NotificationFetchResult &b) {
  using ::std::swap;
  swap(a.fetchMode, b.fetchMode);
  swap(a.itemList, b.itemList);
  swap(a.__isset, b.__isset);
}

NotificationFetchResult::NotificationFetchResult(const NotificationFetchResult& other843) {
  fetchMode = other843.fetchMode;
  itemList = other843.itemList;
  __isset = other843.__isset;
}
NotificationFetchResult& NotificationFetchResult::operator=(const NotificationFetchResult& other844) {
  fetchMode = other844.fetchMode;
  itemList = other844.itemList;
  __isset = other844.__isset;
  return *this;
}
void NotificationFetchResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NotificationFetchResult(";
  out << "fetchMode=" << to_string(fetchMode);
  out << ", " << "itemList=" << to_string(itemList);
  out << ")";
}


Operation::~Operation() throw() {
}


void Operation::__set_revision(const int64_t val) {
  this->revision = val;
}

void Operation::__set_createdTime(const int64_t val) {
  this->createdTime = val;
}

void Operation::__set_type(const OpType::type val) {
  this->type = val;
}

void Operation::__set_reqSeq(const int32_t val) {
  this->reqSeq = val;
}

void Operation::__set_checksum(const std::string& val) {
  this->checksum = val;
}

void Operation::__set_status(const OpStatus::type val) {
  this->status = val;
}

void Operation::__set_param1(const std::string& val) {
  this->param1 = val;
}

void Operation::__set_param2(const std::string& val) {
  this->param2 = val;
}

void Operation::__set_param3(const std::string& val) {
  this->param3 = val;
}

void Operation::__set_message(const Message& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const Operation& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Operation::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->revision);
          this->__isset.revision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createdTime);
          this->__isset.createdTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast845;
          xfer += iprot->readI32(ecast845);
          this->type = (OpType::type)ecast845;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->reqSeq);
          this->__isset.reqSeq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->checksum);
          this->__isset.checksum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast846;
          xfer += iprot->readI32(ecast846);
          this->status = (OpStatus::type)ecast846;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->param1);
          this->__isset.param1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->param2);
          this->__isset.param2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->param3);
          this->__isset.param3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->message.read(iprot);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Operation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Operation");

  xfer += oprot->writeFieldBegin("revision", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->revision);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createdTime", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->createdTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reqSeq", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->reqSeq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("checksum", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->checksum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param1", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->param1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param2", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->param2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param3", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->param3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRUCT, 20);
  xfer += this->message.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Operation &a, Operation &b) {
  using ::std::swap;
  swap(a.revision, b.revision);
  swap(a.createdTime, b.createdTime);
  swap(a.type, b.type);
  swap(a.reqSeq, b.reqSeq);
  swap(a.checksum, b.checksum);
  swap(a.status, b.status);
  swap(a.param1, b.param1);
  swap(a.param2, b.param2);
  swap(a.param3, b.param3);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

Operation::Operation(const Operation& other847) {
  revision = other847.revision;
  createdTime = other847.createdTime;
  type = other847.type;
  reqSeq = other847.reqSeq;
  checksum = other847.checksum;
  status = other847.status;
  param1 = other847.param1;
  param2 = other847.param2;
  param3 = other847.param3;
  message = other847.message;
  __isset = other847.__isset;
}
Operation& Operation::operator=(const Operation& other848) {
  revision = other848.revision;
  createdTime = other848.createdTime;
  type = other848.type;
  reqSeq = other848.reqSeq;
  checksum = other848.checksum;
  status = other848.status;
  param1 = other848.param1;
  param2 = other848.param2;
  param3 = other848.param3;
  message = other848.message;
  __isset = other848.__isset;
  return *this;
}
void Operation::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Operation(";
  out << "revision=" << to_string(revision);
  out << ", " << "createdTime=" << to_string(createdTime);
  out << ", " << "type=" << to_string(type);
  out << ", " << "reqSeq=" << to_string(reqSeq);
  out << ", " << "checksum=" << to_string(checksum);
  out << ", " << "status=" << to_string(status);
  out << ", " << "param1=" << to_string(param1);
  out << ", " << "param2=" << to_string(param2);
  out << ", " << "param3=" << to_string(param3);
  out << ", " << "message=" << to_string(message);
  out << ")";
}


PaymentReservation::~PaymentReservation() throw() {
}


void PaymentReservation::__set_receiverMid(const std::string& val) {
  this->receiverMid = val;
}

void PaymentReservation::__set_productId(const std::string& val) {
  this->productId = val;
}

void PaymentReservation::__set_language(const std::string& val) {
  this->language = val;
}

void PaymentReservation::__set_location(const std::string& val) {
  this->location = val;
}

void PaymentReservation::__set_currency(const std::string& val) {
  this->currency = val;
}

void PaymentReservation::__set_price(const std::string& val) {
  this->price = val;
}

void PaymentReservation::__set_appStoreCode(const PaymentType::type val) {
  this->appStoreCode = val;
}

void PaymentReservation::__set_messageText(const std::string& val) {
  this->messageText = val;
}

void PaymentReservation::__set_messageTemplate(const int32_t val) {
  this->messageTemplate = val;
}

void PaymentReservation::__set_packageId(const int64_t val) {
  this->packageId = val;
}
std::ostream& operator<<(std::ostream& out, const PaymentReservation& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PaymentReservation::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->receiverMid);
          this->__isset.receiverMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->productId);
          this->__isset.productId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->language);
          this->__isset.language = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->location);
          this->__isset.location = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currency);
          this->__isset.currency = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->price);
          this->__isset.price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast849;
          xfer += iprot->readI32(ecast849);
          this->appStoreCode = (PaymentType::type)ecast849;
          this->__isset.appStoreCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageText);
          this->__isset.messageText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->messageTemplate);
          this->__isset.messageTemplate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->packageId);
          this->__isset.packageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PaymentReservation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PaymentReservation");

  xfer += oprot->writeFieldBegin("receiverMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->receiverMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("productId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->productId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("language", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->language);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("location", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->location);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currency", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->currency);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("price", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("appStoreCode", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->appStoreCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageText", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->messageText);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageTemplate", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->messageTemplate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("packageId", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->packageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PaymentReservation &a, PaymentReservation &b) {
  using ::std::swap;
  swap(a.receiverMid, b.receiverMid);
  swap(a.productId, b.productId);
  swap(a.language, b.language);
  swap(a.location, b.location);
  swap(a.currency, b.currency);
  swap(a.price, b.price);
  swap(a.appStoreCode, b.appStoreCode);
  swap(a.messageText, b.messageText);
  swap(a.messageTemplate, b.messageTemplate);
  swap(a.packageId, b.packageId);
  swap(a.__isset, b.__isset);
}

PaymentReservation::PaymentReservation(const PaymentReservation& other850) {
  receiverMid = other850.receiverMid;
  productId = other850.productId;
  language = other850.language;
  location = other850.location;
  currency = other850.currency;
  price = other850.price;
  appStoreCode = other850.appStoreCode;
  messageText = other850.messageText;
  messageTemplate = other850.messageTemplate;
  packageId = other850.packageId;
  __isset = other850.__isset;
}
PaymentReservation& PaymentReservation::operator=(const PaymentReservation& other851) {
  receiverMid = other851.receiverMid;
  productId = other851.productId;
  language = other851.language;
  location = other851.location;
  currency = other851.currency;
  price = other851.price;
  appStoreCode = other851.appStoreCode;
  messageText = other851.messageText;
  messageTemplate = other851.messageTemplate;
  packageId = other851.packageId;
  __isset = other851.__isset;
  return *this;
}
void PaymentReservation::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PaymentReservation(";
  out << "receiverMid=" << to_string(receiverMid);
  out << ", " << "productId=" << to_string(productId);
  out << ", " << "language=" << to_string(language);
  out << ", " << "location=" << to_string(location);
  out << ", " << "currency=" << to_string(currency);
  out << ", " << "price=" << to_string(price);
  out << ", " << "appStoreCode=" << to_string(appStoreCode);
  out << ", " << "messageText=" << to_string(messageText);
  out << ", " << "messageTemplate=" << to_string(messageTemplate);
  out << ", " << "packageId=" << to_string(packageId);
  out << ")";
}


PaymentReservationResult::~PaymentReservationResult() throw() {
}


void PaymentReservationResult::__set_orderId(const std::string& val) {
  this->orderId = val;
}

void PaymentReservationResult::__set_confirmUrl(const std::string& val) {
  this->confirmUrl = val;
}

void PaymentReservationResult::__set_extras(const std::map<std::string, std::string> & val) {
  this->extras = val;
}
std::ostream& operator<<(std::ostream& out, const PaymentReservationResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PaymentReservationResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->orderId);
          this->__isset.orderId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->confirmUrl);
          this->__isset.confirmUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->extras.clear();
            uint32_t _size852;
            ::apache::thrift::protocol::TType _ktype853;
            ::apache::thrift::protocol::TType _vtype854;
            xfer += iprot->readMapBegin(_ktype853, _vtype854, _size852);
            uint32_t _i856;
            for (_i856 = 0; _i856 < _size852; ++_i856)
            {
              std::string _key857;
              xfer += iprot->readString(_key857);
              std::string& _val858 = this->extras[_key857];
              xfer += iprot->readString(_val858);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.extras = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PaymentReservationResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PaymentReservationResult");

  xfer += oprot->writeFieldBegin("orderId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->orderId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("confirmUrl", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->confirmUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("extras", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->extras.size()));
    std::map<std::string, std::string> ::const_iterator _iter859;
    for (_iter859 = this->extras.begin(); _iter859 != this->extras.end(); ++_iter859)
    {
      xfer += oprot->writeString(_iter859->first);
      xfer += oprot->writeString(_iter859->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PaymentReservationResult &a, PaymentReservationResult &b) {
  using ::std::swap;
  swap(a.orderId, b.orderId);
  swap(a.confirmUrl, b.confirmUrl);
  swap(a.extras, b.extras);
  swap(a.__isset, b.__isset);
}

PaymentReservationResult::PaymentReservationResult(const PaymentReservationResult& other860) {
  orderId = other860.orderId;
  confirmUrl = other860.confirmUrl;
  extras = other860.extras;
  __isset = other860.__isset;
}
PaymentReservationResult& PaymentReservationResult::operator=(const PaymentReservationResult& other861) {
  orderId = other861.orderId;
  confirmUrl = other861.confirmUrl;
  extras = other861.extras;
  __isset = other861.__isset;
  return *this;
}
void PaymentReservationResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PaymentReservationResult(";
  out << "orderId=" << to_string(orderId);
  out << ", " << "confirmUrl=" << to_string(confirmUrl);
  out << ", " << "extras=" << to_string(extras);
  out << ")";
}


Product::~Product() throw() {
}


void Product::__set_productId(const std::string& val) {
  this->productId = val;
}

void Product::__set_packageId(const int64_t val) {
  this->packageId = val;
}

void Product::__set_version(const int32_t val) {
  this->version = val;
}

void Product::__set_authorName(const std::string& val) {
  this->authorName = val;
}

void Product::__set_onSale(const bool val) {
  this->onSale = val;
}

void Product::__set_validDays(const int32_t val) {
  this->validDays = val;
}

void Product::__set_saleType(const int32_t val) {
  this->saleType = val;
}

void Product::__set_copyright(const std::string& val) {
  this->copyright = val;
}

void Product::__set_title(const std::string& val) {
  this->title = val;
}

void Product::__set_descriptionText(const std::string& val) {
  this->descriptionText = val;
}

void Product::__set_shopOrderId(const int64_t val) {
  this->shopOrderId = val;
}

void Product::__set_fromMid(const std::string& val) {
  this->fromMid = val;
}

void Product::__set_toMid(const std::string& val) {
  this->toMid = val;
}

void Product::__set_validUntil(const int64_t val) {
  this->validUntil = val;
}

void Product::__set_priceTier(const int32_t val) {
  this->priceTier = val;
}

void Product::__set_price(const std::string& val) {
  this->price = val;
}

void Product::__set_currency(const std::string& val) {
  this->currency = val;
}

void Product::__set_currencySymbol(const std::string& val) {
  this->currencySymbol = val;
}

void Product::__set_paymentType(const PaymentType::type val) {
  this->paymentType = val;
}

void Product::__set_createDate(const int64_t val) {
  this->createDate = val;
}

void Product::__set_ownFlag(const bool val) {
  this->ownFlag = val;
}

void Product::__set_eventType(const ProductEventType::type val) {
  this->eventType = val;
}

void Product::__set_urlSchema(const std::string& val) {
  this->urlSchema = val;
}

void Product::__set_downloadUrl(const std::string& val) {
  this->downloadUrl = val;
}

void Product::__set_buddyMid(const std::string& val) {
  this->buddyMid = val;
}

void Product::__set_publishSince(const int64_t val) {
  this->publishSince = val;
}

void Product::__set_newFlag(const bool val) {
  this->newFlag = val;
}

void Product::__set_missionFlag(const bool val) {
  this->missionFlag = val;
}

void Product::__set_categories(const std::vector<ProductCategory> & val) {
  this->categories = val;
}

void Product::__set_missionButtonText(const std::string& val) {
  this->missionButtonText = val;
}

void Product::__set_missionShortDescription(const std::string& val) {
  this->missionShortDescription = val;
}

void Product::__set_authorId(const std::string& val) {
  this->authorId = val;
}

void Product::__set_grantedByDefault(const bool val) {
  this->grantedByDefault = val;
}

void Product::__set_displayOrder(const int32_t val) {
  this->displayOrder = val;
}

void Product::__set_availableForPresent(const bool val) {
  this->availableForPresent = val;
}

void Product::__set_availableForMyself(const bool val) {
  this->availableForMyself = val;
}

void Product::__set_hasAnimation(const bool val) {
  this->hasAnimation = val;
}

void Product::__set_hasSound(const bool val) {
  this->hasSound = val;
}

void Product::__set_recommendationsEnabled(const bool val) {
  this->recommendationsEnabled = val;
}

void Product::__set_stickerResourceType(const StickerResourceType::type val) {
  this->stickerResourceType = val;
}
std::ostream& operator<<(std::ostream& out, const Product& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Product::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->productId);
          this->__isset.productId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->packageId);
          this->__isset.packageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->authorName);
          this->__isset.authorName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->onSale);
          this->__isset.onSale = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->validDays);
          this->__isset.validDays = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->saleType);
          this->__isset.saleType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->copyright);
          this->__isset.copyright = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          this->__isset.title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->descriptionText);
          this->__isset.descriptionText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->shopOrderId);
          this->__isset.shopOrderId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fromMid);
          this->__isset.fromMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->toMid);
          this->__isset.toMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->validUntil);
          this->__isset.validUntil = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->priceTier);
          this->__isset.priceTier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->price);
          this->__isset.price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currency);
          this->__isset.currency = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currencySymbol);
          this->__isset.currencySymbol = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast862;
          xfer += iprot->readI32(ecast862);
          this->paymentType = (PaymentType::type)ecast862;
          this->__isset.paymentType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createDate);
          this->__isset.createDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ownFlag);
          this->__isset.ownFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast863;
          xfer += iprot->readI32(ecast863);
          this->eventType = (ProductEventType::type)ecast863;
          this->__isset.eventType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->urlSchema);
          this->__isset.urlSchema = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->downloadUrl);
          this->__isset.downloadUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->buddyMid);
          this->__isset.buddyMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->publishSince);
          this->__isset.publishSince = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->newFlag);
          this->__isset.newFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->missionFlag);
          this->__isset.missionFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->categories.clear();
            uint32_t _size864;
            ::apache::thrift::protocol::TType _etype867;
            xfer += iprot->readListBegin(_etype867, _size864);
            this->categories.resize(_size864);
            uint32_t _i868;
            for (_i868 = 0; _i868 < _size864; ++_i868)
            {
              xfer += this->categories[_i868].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.categories = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->missionButtonText);
          this->__isset.missionButtonText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->missionShortDescription);
          this->__isset.missionShortDescription = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->authorId);
          this->__isset.authorId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->grantedByDefault);
          this->__isset.grantedByDefault = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->displayOrder);
          this->__isset.displayOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 43:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->availableForPresent);
          this->__isset.availableForPresent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 44:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->availableForMyself);
          this->__isset.availableForMyself = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 51:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasAnimation);
          this->__isset.hasAnimation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 52:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasSound);
          this->__isset.hasSound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 53:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->recommendationsEnabled);
          this->__isset.recommendationsEnabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 54:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast869;
          xfer += iprot->readI32(ecast869);
          this->stickerResourceType = (StickerResourceType::type)ecast869;
          this->__isset.stickerResourceType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Product::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Product");

  xfer += oprot->writeFieldBegin("productId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->productId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("packageId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->packageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("authorName", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->authorName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("onSale", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->onSale);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("validDays", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->validDays);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("saleType", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->saleType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("copyright", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->copyright);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("descriptionText", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->descriptionText);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("shopOrderId", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->shopOrderId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fromMid", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->fromMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("toMid", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->toMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("validUntil", ::apache::thrift::protocol::T_I64, 14);
  xfer += oprot->writeI64(this->validUntil);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("priceTier", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->priceTier);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("price", ::apache::thrift::protocol::T_STRING, 16);
  xfer += oprot->writeString(this->price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currency", ::apache::thrift::protocol::T_STRING, 17);
  xfer += oprot->writeString(this->currency);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currencySymbol", ::apache::thrift::protocol::T_STRING, 18);
  xfer += oprot->writeString(this->currencySymbol);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("paymentType", ::apache::thrift::protocol::T_I32, 19);
  xfer += oprot->writeI32((int32_t)this->paymentType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createDate", ::apache::thrift::protocol::T_I64, 20);
  xfer += oprot->writeI64(this->createDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ownFlag", ::apache::thrift::protocol::T_BOOL, 21);
  xfer += oprot->writeBool(this->ownFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventType", ::apache::thrift::protocol::T_I32, 22);
  xfer += oprot->writeI32((int32_t)this->eventType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("urlSchema", ::apache::thrift::protocol::T_STRING, 23);
  xfer += oprot->writeString(this->urlSchema);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("downloadUrl", ::apache::thrift::protocol::T_STRING, 24);
  xfer += oprot->writeString(this->downloadUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buddyMid", ::apache::thrift::protocol::T_STRING, 25);
  xfer += oprot->writeString(this->buddyMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("publishSince", ::apache::thrift::protocol::T_I64, 26);
  xfer += oprot->writeI64(this->publishSince);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("newFlag", ::apache::thrift::protocol::T_BOOL, 27);
  xfer += oprot->writeBool(this->newFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("missionFlag", ::apache::thrift::protocol::T_BOOL, 28);
  xfer += oprot->writeBool(this->missionFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("categories", ::apache::thrift::protocol::T_LIST, 29);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->categories.size()));
    std::vector<ProductCategory> ::const_iterator _iter870;
    for (_iter870 = this->categories.begin(); _iter870 != this->categories.end(); ++_iter870)
    {
      xfer += (*_iter870).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("missionButtonText", ::apache::thrift::protocol::T_STRING, 30);
  xfer += oprot->writeString(this->missionButtonText);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("missionShortDescription", ::apache::thrift::protocol::T_STRING, 31);
  xfer += oprot->writeString(this->missionShortDescription);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("authorId", ::apache::thrift::protocol::T_STRING, 32);
  xfer += oprot->writeString(this->authorId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("grantedByDefault", ::apache::thrift::protocol::T_BOOL, 41);
  xfer += oprot->writeBool(this->grantedByDefault);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayOrder", ::apache::thrift::protocol::T_I32, 42);
  xfer += oprot->writeI32(this->displayOrder);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("availableForPresent", ::apache::thrift::protocol::T_BOOL, 43);
  xfer += oprot->writeBool(this->availableForPresent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("availableForMyself", ::apache::thrift::protocol::T_BOOL, 44);
  xfer += oprot->writeBool(this->availableForMyself);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hasAnimation", ::apache::thrift::protocol::T_BOOL, 51);
  xfer += oprot->writeBool(this->hasAnimation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hasSound", ::apache::thrift::protocol::T_BOOL, 52);
  xfer += oprot->writeBool(this->hasSound);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recommendationsEnabled", ::apache::thrift::protocol::T_BOOL, 53);
  xfer += oprot->writeBool(this->recommendationsEnabled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stickerResourceType", ::apache::thrift::protocol::T_I32, 54);
  xfer += oprot->writeI32((int32_t)this->stickerResourceType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Product &a, Product &b) {
  using ::std::swap;
  swap(a.productId, b.productId);
  swap(a.packageId, b.packageId);
  swap(a.version, b.version);
  swap(a.authorName, b.authorName);
  swap(a.onSale, b.onSale);
  swap(a.validDays, b.validDays);
  swap(a.saleType, b.saleType);
  swap(a.copyright, b.copyright);
  swap(a.title, b.title);
  swap(a.descriptionText, b.descriptionText);
  swap(a.shopOrderId, b.shopOrderId);
  swap(a.fromMid, b.fromMid);
  swap(a.toMid, b.toMid);
  swap(a.validUntil, b.validUntil);
  swap(a.priceTier, b.priceTier);
  swap(a.price, b.price);
  swap(a.currency, b.currency);
  swap(a.currencySymbol, b.currencySymbol);
  swap(a.paymentType, b.paymentType);
  swap(a.createDate, b.createDate);
  swap(a.ownFlag, b.ownFlag);
  swap(a.eventType, b.eventType);
  swap(a.urlSchema, b.urlSchema);
  swap(a.downloadUrl, b.downloadUrl);
  swap(a.buddyMid, b.buddyMid);
  swap(a.publishSince, b.publishSince);
  swap(a.newFlag, b.newFlag);
  swap(a.missionFlag, b.missionFlag);
  swap(a.categories, b.categories);
  swap(a.missionButtonText, b.missionButtonText);
  swap(a.missionShortDescription, b.missionShortDescription);
  swap(a.authorId, b.authorId);
  swap(a.grantedByDefault, b.grantedByDefault);
  swap(a.displayOrder, b.displayOrder);
  swap(a.availableForPresent, b.availableForPresent);
  swap(a.availableForMyself, b.availableForMyself);
  swap(a.hasAnimation, b.hasAnimation);
  swap(a.hasSound, b.hasSound);
  swap(a.recommendationsEnabled, b.recommendationsEnabled);
  swap(a.stickerResourceType, b.stickerResourceType);
  swap(a.__isset, b.__isset);
}

Product::Product(const Product& other871) {
  productId = other871.productId;
  packageId = other871.packageId;
  version = other871.version;
  authorName = other871.authorName;
  onSale = other871.onSale;
  validDays = other871.validDays;
  saleType = other871.saleType;
  copyright = other871.copyright;
  title = other871.title;
  descriptionText = other871.descriptionText;
  shopOrderId = other871.shopOrderId;
  fromMid = other871.fromMid;
  toMid = other871.toMid;
  validUntil = other871.validUntil;
  priceTier = other871.priceTier;
  price = other871.price;
  currency = other871.currency;
  currencySymbol = other871.currencySymbol;
  paymentType = other871.paymentType;
  createDate = other871.createDate;
  ownFlag = other871.ownFlag;
  eventType = other871.eventType;
  urlSchema = other871.urlSchema;
  downloadUrl = other871.downloadUrl;
  buddyMid = other871.buddyMid;
  publishSince = other871.publishSince;
  newFlag = other871.newFlag;
  missionFlag = other871.missionFlag;
  categories = other871.categories;
  missionButtonText = other871.missionButtonText;
  missionShortDescription = other871.missionShortDescription;
  authorId = other871.authorId;
  grantedByDefault = other871.grantedByDefault;
  displayOrder = other871.displayOrder;
  availableForPresent = other871.availableForPresent;
  availableForMyself = other871.availableForMyself;
  hasAnimation = other871.hasAnimation;
  hasSound = other871.hasSound;
  recommendationsEnabled = other871.recommendationsEnabled;
  stickerResourceType = other871.stickerResourceType;
  __isset = other871.__isset;
}
Product& Product::operator=(const Product& other872) {
  productId = other872.productId;
  packageId = other872.packageId;
  version = other872.version;
  authorName = other872.authorName;
  onSale = other872.onSale;
  validDays = other872.validDays;
  saleType = other872.saleType;
  copyright = other872.copyright;
  title = other872.title;
  descriptionText = other872.descriptionText;
  shopOrderId = other872.shopOrderId;
  fromMid = other872.fromMid;
  toMid = other872.toMid;
  validUntil = other872.validUntil;
  priceTier = other872.priceTier;
  price = other872.price;
  currency = other872.currency;
  currencySymbol = other872.currencySymbol;
  paymentType = other872.paymentType;
  createDate = other872.createDate;
  ownFlag = other872.ownFlag;
  eventType = other872.eventType;
  urlSchema = other872.urlSchema;
  downloadUrl = other872.downloadUrl;
  buddyMid = other872.buddyMid;
  publishSince = other872.publishSince;
  newFlag = other872.newFlag;
  missionFlag = other872.missionFlag;
  categories = other872.categories;
  missionButtonText = other872.missionButtonText;
  missionShortDescription = other872.missionShortDescription;
  authorId = other872.authorId;
  grantedByDefault = other872.grantedByDefault;
  displayOrder = other872.displayOrder;
  availableForPresent = other872.availableForPresent;
  availableForMyself = other872.availableForMyself;
  hasAnimation = other872.hasAnimation;
  hasSound = other872.hasSound;
  recommendationsEnabled = other872.recommendationsEnabled;
  stickerResourceType = other872.stickerResourceType;
  __isset = other872.__isset;
  return *this;
}
void Product::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Product(";
  out << "productId=" << to_string(productId);
  out << ", " << "packageId=" << to_string(packageId);
  out << ", " << "version=" << to_string(version);
  out << ", " << "authorName=" << to_string(authorName);
  out << ", " << "onSale=" << to_string(onSale);
  out << ", " << "validDays=" << to_string(validDays);
  out << ", " << "saleType=" << to_string(saleType);
  out << ", " << "copyright=" << to_string(copyright);
  out << ", " << "title=" << to_string(title);
  out << ", " << "descriptionText=" << to_string(descriptionText);
  out << ", " << "shopOrderId=" << to_string(shopOrderId);
  out << ", " << "fromMid=" << to_string(fromMid);
  out << ", " << "toMid=" << to_string(toMid);
  out << ", " << "validUntil=" << to_string(validUntil);
  out << ", " << "priceTier=" << to_string(priceTier);
  out << ", " << "price=" << to_string(price);
  out << ", " << "currency=" << to_string(currency);
  out << ", " << "currencySymbol=" << to_string(currencySymbol);
  out << ", " << "paymentType=" << to_string(paymentType);
  out << ", " << "createDate=" << to_string(createDate);
  out << ", " << "ownFlag=" << to_string(ownFlag);
  out << ", " << "eventType=" << to_string(eventType);
  out << ", " << "urlSchema=" << to_string(urlSchema);
  out << ", " << "downloadUrl=" << to_string(downloadUrl);
  out << ", " << "buddyMid=" << to_string(buddyMid);
  out << ", " << "publishSince=" << to_string(publishSince);
  out << ", " << "newFlag=" << to_string(newFlag);
  out << ", " << "missionFlag=" << to_string(missionFlag);
  out << ", " << "categories=" << to_string(categories);
  out << ", " << "missionButtonText=" << to_string(missionButtonText);
  out << ", " << "missionShortDescription=" << to_string(missionShortDescription);
  out << ", " << "authorId=" << to_string(authorId);
  out << ", " << "grantedByDefault=" << to_string(grantedByDefault);
  out << ", " << "displayOrder=" << to_string(displayOrder);
  out << ", " << "availableForPresent=" << to_string(availableForPresent);
  out << ", " << "availableForMyself=" << to_string(availableForMyself);
  out << ", " << "hasAnimation=" << to_string(hasAnimation);
  out << ", " << "hasSound=" << to_string(hasSound);
  out << ", " << "recommendationsEnabled=" << to_string(recommendationsEnabled);
  out << ", " << "stickerResourceType=" << to_string(stickerResourceType);
  out << ")";
}


ProductList::~ProductList() throw() {
}


void ProductList::__set_hasNext(const bool val) {
  this->hasNext = val;
}

void ProductList::__set_bannerSequence(const int64_t val) {
  this->bannerSequence = val;
}

void ProductList::__set_bannerTargetType(const ProductBannerLinkType::type val) {
  this->bannerTargetType = val;
}

void ProductList::__set_bannerTargetPath(const std::string& val) {
  this->bannerTargetPath = val;
}

void ProductList::__set_productList(const std::vector<Product> & val) {
  this->productList = val;
}

void ProductList::__set_bannerLang(const std::string& val) {
  this->bannerLang = val;
}
std::ostream& operator<<(std::ostream& out, const ProductList& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ProductList::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasNext);
          this->__isset.hasNext = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bannerSequence);
          this->__isset.bannerSequence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast873;
          xfer += iprot->readI32(ecast873);
          this->bannerTargetType = (ProductBannerLinkType::type)ecast873;
          this->__isset.bannerTargetType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bannerTargetPath);
          this->__isset.bannerTargetPath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->productList.clear();
            uint32_t _size874;
            ::apache::thrift::protocol::TType _etype877;
            xfer += iprot->readListBegin(_etype877, _size874);
            this->productList.resize(_size874);
            uint32_t _i878;
            for (_i878 = 0; _i878 < _size874; ++_i878)
            {
              xfer += this->productList[_i878].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.productList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bannerLang);
          this->__isset.bannerLang = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProductList::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ProductList");

  xfer += oprot->writeFieldBegin("hasNext", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->hasNext);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bannerSequence", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->bannerSequence);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bannerTargetType", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->bannerTargetType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bannerTargetPath", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->bannerTargetPath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("productList", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->productList.size()));
    std::vector<Product> ::const_iterator _iter879;
    for (_iter879 = this->productList.begin(); _iter879 != this->productList.end(); ++_iter879)
    {
      xfer += (*_iter879).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bannerLang", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->bannerLang);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProductList &a, ProductList &b) {
  using ::std::swap;
  swap(a.hasNext, b.hasNext);
  swap(a.bannerSequence, b.bannerSequence);
  swap(a.bannerTargetType, b.bannerTargetType);
  swap(a.bannerTargetPath, b.bannerTargetPath);
  swap(a.productList, b.productList);
  swap(a.bannerLang, b.bannerLang);
  swap(a.__isset, b.__isset);
}

ProductList::ProductList(const ProductList& other880) {
  hasNext = other880.hasNext;
  bannerSequence = other880.bannerSequence;
  bannerTargetType = other880.bannerTargetType;
  bannerTargetPath = other880.bannerTargetPath;
  productList = other880.productList;
  bannerLang = other880.bannerLang;
  __isset = other880.__isset;
}
ProductList& ProductList::operator=(const ProductList& other881) {
  hasNext = other881.hasNext;
  bannerSequence = other881.bannerSequence;
  bannerTargetType = other881.bannerTargetType;
  bannerTargetPath = other881.bannerTargetPath;
  productList = other881.productList;
  bannerLang = other881.bannerLang;
  __isset = other881.__isset;
  return *this;
}
void ProductList::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ProductList(";
  out << "hasNext=" << to_string(hasNext);
  out << ", " << "bannerSequence=" << to_string(bannerSequence);
  out << ", " << "bannerTargetType=" << to_string(bannerTargetType);
  out << ", " << "bannerTargetPath=" << to_string(bannerTargetPath);
  out << ", " << "productList=" << to_string(productList);
  out << ", " << "bannerLang=" << to_string(bannerLang);
  out << ")";
}


StickerIdRange::~StickerIdRange() throw() {
}


void StickerIdRange::__set_start(const int64_t val) {
  this->start = val;
}

void StickerIdRange::__set_size(const int32_t val) {
  this->size = val;
}
std::ostream& operator<<(std::ostream& out, const StickerIdRange& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t StickerIdRange::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->start);
          this->__isset.start = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->size);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t StickerIdRange::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("StickerIdRange");

  xfer += oprot->writeFieldBegin("start", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->start);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StickerIdRange &a, StickerIdRange &b) {
  using ::std::swap;
  swap(a.start, b.start);
  swap(a.size, b.size);
  swap(a.__isset, b.__isset);
}

StickerIdRange::StickerIdRange(const StickerIdRange& other882) {
  start = other882.start;
  size = other882.size;
  __isset = other882.__isset;
}
StickerIdRange& StickerIdRange::operator=(const StickerIdRange& other883) {
  start = other883.start;
  size = other883.size;
  __isset = other883.__isset;
  return *this;
}
void StickerIdRange::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "StickerIdRange(";
  out << "start=" << to_string(start);
  out << ", " << "size=" << to_string(size);
  out << ")";
}


ProductSimple::~ProductSimple() throw() {
}


void ProductSimple::__set_productId(const std::string& val) {
  this->productId = val;
}

void ProductSimple::__set_packageId(const int64_t val) {
  this->packageId = val;
}

void ProductSimple::__set_version(const int32_t val) {
  this->version = val;
}

void ProductSimple::__set_onSale(const bool val) {
  this->onSale = val;
}

void ProductSimple::__set_validUntil(const int64_t val) {
  this->validUntil = val;
}

void ProductSimple::__set_stickerIdRanges(const std::vector<StickerIdRange> & val) {
  this->stickerIdRanges = val;
}

void ProductSimple::__set_grantedByDefault(const bool val) {
  this->grantedByDefault = val;
}

void ProductSimple::__set_displayOrder(const int32_t val) {
  this->displayOrder = val;
}
std::ostream& operator<<(std::ostream& out, const ProductSimple& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ProductSimple::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->productId);
          this->__isset.productId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->packageId);
          this->__isset.packageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->onSale);
          this->__isset.onSale = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->validUntil);
          this->__isset.validUntil = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->stickerIdRanges.clear();
            uint32_t _size884;
            ::apache::thrift::protocol::TType _etype887;
            xfer += iprot->readListBegin(_etype887, _size884);
            this->stickerIdRanges.resize(_size884);
            uint32_t _i888;
            for (_i888 = 0; _i888 < _size884; ++_i888)
            {
              xfer += this->stickerIdRanges[_i888].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.stickerIdRanges = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->grantedByDefault);
          this->__isset.grantedByDefault = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->displayOrder);
          this->__isset.displayOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProductSimple::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ProductSimple");

  xfer += oprot->writeFieldBegin("productId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->productId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("packageId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->packageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("onSale", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->onSale);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("validUntil", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->validUntil);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stickerIdRanges", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->stickerIdRanges.size()));
    std::vector<StickerIdRange> ::const_iterator _iter889;
    for (_iter889 = this->stickerIdRanges.begin(); _iter889 != this->stickerIdRanges.end(); ++_iter889)
    {
      xfer += (*_iter889).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("grantedByDefault", ::apache::thrift::protocol::T_BOOL, 41);
  xfer += oprot->writeBool(this->grantedByDefault);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayOrder", ::apache::thrift::protocol::T_I32, 42);
  xfer += oprot->writeI32(this->displayOrder);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProductSimple &a, ProductSimple &b) {
  using ::std::swap;
  swap(a.productId, b.productId);
  swap(a.packageId, b.packageId);
  swap(a.version, b.version);
  swap(a.onSale, b.onSale);
  swap(a.validUntil, b.validUntil);
  swap(a.stickerIdRanges, b.stickerIdRanges);
  swap(a.grantedByDefault, b.grantedByDefault);
  swap(a.displayOrder, b.displayOrder);
  swap(a.__isset, b.__isset);
}

ProductSimple::ProductSimple(const ProductSimple& other890) {
  productId = other890.productId;
  packageId = other890.packageId;
  version = other890.version;
  onSale = other890.onSale;
  validUntil = other890.validUntil;
  stickerIdRanges = other890.stickerIdRanges;
  grantedByDefault = other890.grantedByDefault;
  displayOrder = other890.displayOrder;
  __isset = other890.__isset;
}
ProductSimple& ProductSimple::operator=(const ProductSimple& other891) {
  productId = other891.productId;
  packageId = other891.packageId;
  version = other891.version;
  onSale = other891.onSale;
  validUntil = other891.validUntil;
  stickerIdRanges = other891.stickerIdRanges;
  grantedByDefault = other891.grantedByDefault;
  displayOrder = other891.displayOrder;
  __isset = other891.__isset;
  return *this;
}
void ProductSimple::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ProductSimple(";
  out << "productId=" << to_string(productId);
  out << ", " << "packageId=" << to_string(packageId);
  out << ", " << "version=" << to_string(version);
  out << ", " << "onSale=" << to_string(onSale);
  out << ", " << "validUntil=" << to_string(validUntil);
  out << ", " << "stickerIdRanges=" << to_string(stickerIdRanges);
  out << ", " << "grantedByDefault=" << to_string(grantedByDefault);
  out << ", " << "displayOrder=" << to_string(displayOrder);
  out << ")";
}


ProductSimpleList::~ProductSimpleList() throw() {
}


void ProductSimpleList::__set_hasNext(const bool val) {
  this->hasNext = val;
}

void ProductSimpleList::__set_reinvokeHour(const int32_t val) {
  this->reinvokeHour = val;
}

void ProductSimpleList::__set_lastVersionSeq(const int64_t val) {
  this->lastVersionSeq = val;
}

void ProductSimpleList::__set_productList(const std::vector<ProductSimple> & val) {
  this->productList = val;
}

void ProductSimpleList::__set_recentNewReleaseDate(const int64_t val) {
  this->recentNewReleaseDate = val;
}

void ProductSimpleList::__set_recentEventReleaseDate(const int64_t val) {
  this->recentEventReleaseDate = val;
}
std::ostream& operator<<(std::ostream& out, const ProductSimpleList& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ProductSimpleList::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasNext);
          this->__isset.hasNext = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->reinvokeHour);
          this->__isset.reinvokeHour = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastVersionSeq);
          this->__isset.lastVersionSeq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->productList.clear();
            uint32_t _size892;
            ::apache::thrift::protocol::TType _etype895;
            xfer += iprot->readListBegin(_etype895, _size892);
            this->productList.resize(_size892);
            uint32_t _i896;
            for (_i896 = 0; _i896 < _size892; ++_i896)
            {
              xfer += this->productList[_i896].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.productList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->recentNewReleaseDate);
          this->__isset.recentNewReleaseDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->recentEventReleaseDate);
          this->__isset.recentEventReleaseDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProductSimpleList::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ProductSimpleList");

  xfer += oprot->writeFieldBegin("hasNext", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->hasNext);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reinvokeHour", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->reinvokeHour);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastVersionSeq", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->lastVersionSeq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("productList", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->productList.size()));
    std::vector<ProductSimple> ::const_iterator _iter897;
    for (_iter897 = this->productList.begin(); _iter897 != this->productList.end(); ++_iter897)
    {
      xfer += (*_iter897).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recentNewReleaseDate", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->recentNewReleaseDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recentEventReleaseDate", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->recentEventReleaseDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProductSimpleList &a, ProductSimpleList &b) {
  using ::std::swap;
  swap(a.hasNext, b.hasNext);
  swap(a.reinvokeHour, b.reinvokeHour);
  swap(a.lastVersionSeq, b.lastVersionSeq);
  swap(a.productList, b.productList);
  swap(a.recentNewReleaseDate, b.recentNewReleaseDate);
  swap(a.recentEventReleaseDate, b.recentEventReleaseDate);
  swap(a.__isset, b.__isset);
}

ProductSimpleList::ProductSimpleList(const ProductSimpleList& other898) {
  hasNext = other898.hasNext;
  reinvokeHour = other898.reinvokeHour;
  lastVersionSeq = other898.lastVersionSeq;
  productList = other898.productList;
  recentNewReleaseDate = other898.recentNewReleaseDate;
  recentEventReleaseDate = other898.recentEventReleaseDate;
  __isset = other898.__isset;
}
ProductSimpleList& ProductSimpleList::operator=(const ProductSimpleList& other899) {
  hasNext = other899.hasNext;
  reinvokeHour = other899.reinvokeHour;
  lastVersionSeq = other899.lastVersionSeq;
  productList = other899.productList;
  recentNewReleaseDate = other899.recentNewReleaseDate;
  recentEventReleaseDate = other899.recentEventReleaseDate;
  __isset = other899.__isset;
  return *this;
}
void ProductSimpleList::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ProductSimpleList(";
  out << "hasNext=" << to_string(hasNext);
  out << ", " << "reinvokeHour=" << to_string(reinvokeHour);
  out << ", " << "lastVersionSeq=" << to_string(lastVersionSeq);
  out << ", " << "productList=" << to_string(productList);
  out << ", " << "recentNewReleaseDate=" << to_string(recentNewReleaseDate);
  out << ", " << "recentEventReleaseDate=" << to_string(recentEventReleaseDate);
  out << ")";
}


Profile::~Profile() throw() {
}


void Profile::__set_mid(const std::string& val) {
  this->mid = val;
}

void Profile::__set_userid(const std::string& val) {
  this->userid = val;
}

void Profile::__set_phone(const std::string& val) {
  this->phone = val;
}

void Profile::__set_email(const std::string& val) {
  this->email = val;
}

void Profile::__set_regionCode(const std::string& val) {
  this->regionCode = val;
}

void Profile::__set_displayName(const std::string& val) {
  this->displayName = val;
}

void Profile::__set_phoneticName(const std::string& val) {
  this->phoneticName = val;
}

void Profile::__set_pictureStatus(const std::string& val) {
  this->pictureStatus = val;
}

void Profile::__set_thumbnailUrl(const std::string& val) {
  this->thumbnailUrl = val;
}

void Profile::__set_statusMessage(const std::string& val) {
  this->statusMessage = val;
}

void Profile::__set_allowSearchByUserid(const bool val) {
  this->allowSearchByUserid = val;
}

void Profile::__set_allowSearchByEmail(const bool val) {
  this->allowSearchByEmail = val;
}

void Profile::__set_picturePath(const std::string& val) {
  this->picturePath = val;
}

void Profile::__set_musicProfile(const std::string& val) {
  this->musicProfile = val;
}

void Profile::__set_videoProfile(const std::string& val) {
  this->videoProfile = val;
}
std::ostream& operator<<(std::ostream& out, const Profile& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Profile::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mid);
          this->__isset.mid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userid);
          this->__isset.userid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone);
          this->__isset.phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->regionCode);
          this->__isset.regionCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->displayName);
          this->__isset.displayName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phoneticName);
          this->__isset.phoneticName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pictureStatus);
          this->__isset.pictureStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->thumbnailUrl);
          this->__isset.thumbnailUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->statusMessage);
          this->__isset.statusMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->allowSearchByUserid);
          this->__isset.allowSearchByUserid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->allowSearchByEmail);
          this->__isset.allowSearchByEmail = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->picturePath);
          this->__isset.picturePath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->musicProfile);
          this->__isset.musicProfile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->videoProfile);
          this->__isset.videoProfile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Profile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Profile");

  xfer += oprot->writeFieldBegin("mid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->mid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userid", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->userid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phone", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("regionCode", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->regionCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayName", ::apache::thrift::protocol::T_STRING, 20);
  xfer += oprot->writeString(this->displayName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phoneticName", ::apache::thrift::protocol::T_STRING, 21);
  xfer += oprot->writeString(this->phoneticName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pictureStatus", ::apache::thrift::protocol::T_STRING, 22);
  xfer += oprot->writeString(this->pictureStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thumbnailUrl", ::apache::thrift::protocol::T_STRING, 23);
  xfer += oprot->writeString(this->thumbnailUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("statusMessage", ::apache::thrift::protocol::T_STRING, 24);
  xfer += oprot->writeString(this->statusMessage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("allowSearchByUserid", ::apache::thrift::protocol::T_BOOL, 31);
  xfer += oprot->writeBool(this->allowSearchByUserid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("allowSearchByEmail", ::apache::thrift::protocol::T_BOOL, 32);
  xfer += oprot->writeBool(this->allowSearchByEmail);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("picturePath", ::apache::thrift::protocol::T_STRING, 33);
  xfer += oprot->writeString(this->picturePath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("musicProfile", ::apache::thrift::protocol::T_STRING, 34);
  xfer += oprot->writeString(this->musicProfile);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("videoProfile", ::apache::thrift::protocol::T_STRING, 35);
  xfer += oprot->writeString(this->videoProfile);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Profile &a, Profile &b) {
  using ::std::swap;
  swap(a.mid, b.mid);
  swap(a.userid, b.userid);
  swap(a.phone, b.phone);
  swap(a.email, b.email);
  swap(a.regionCode, b.regionCode);
  swap(a.displayName, b.displayName);
  swap(a.phoneticName, b.phoneticName);
  swap(a.pictureStatus, b.pictureStatus);
  swap(a.thumbnailUrl, b.thumbnailUrl);
  swap(a.statusMessage, b.statusMessage);
  swap(a.allowSearchByUserid, b.allowSearchByUserid);
  swap(a.allowSearchByEmail, b.allowSearchByEmail);
  swap(a.picturePath, b.picturePath);
  swap(a.musicProfile, b.musicProfile);
  swap(a.videoProfile, b.videoProfile);
  swap(a.__isset, b.__isset);
}

Profile::Profile(const Profile& other900) {
  mid = other900.mid;
  userid = other900.userid;
  phone = other900.phone;
  email = other900.email;
  regionCode = other900.regionCode;
  displayName = other900.displayName;
  phoneticName = other900.phoneticName;
  pictureStatus = other900.pictureStatus;
  thumbnailUrl = other900.thumbnailUrl;
  statusMessage = other900.statusMessage;
  allowSearchByUserid = other900.allowSearchByUserid;
  allowSearchByEmail = other900.allowSearchByEmail;
  picturePath = other900.picturePath;
  musicProfile = other900.musicProfile;
  videoProfile = other900.videoProfile;
  __isset = other900.__isset;
}
Profile& Profile::operator=(const Profile& other901) {
  mid = other901.mid;
  userid = other901.userid;
  phone = other901.phone;
  email = other901.email;
  regionCode = other901.regionCode;
  displayName = other901.displayName;
  phoneticName = other901.phoneticName;
  pictureStatus = other901.pictureStatus;
  thumbnailUrl = other901.thumbnailUrl;
  statusMessage = other901.statusMessage;
  allowSearchByUserid = other901.allowSearchByUserid;
  allowSearchByEmail = other901.allowSearchByEmail;
  picturePath = other901.picturePath;
  musicProfile = other901.musicProfile;
  videoProfile = other901.videoProfile;
  __isset = other901.__isset;
  return *this;
}
void Profile::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Profile(";
  out << "mid=" << to_string(mid);
  out << ", " << "userid=" << to_string(userid);
  out << ", " << "phone=" << to_string(phone);
  out << ", " << "email=" << to_string(email);
  out << ", " << "regionCode=" << to_string(regionCode);
  out << ", " << "displayName=" << to_string(displayName);
  out << ", " << "phoneticName=" << to_string(phoneticName);
  out << ", " << "pictureStatus=" << to_string(pictureStatus);
  out << ", " << "thumbnailUrl=" << to_string(thumbnailUrl);
  out << ", " << "statusMessage=" << to_string(statusMessage);
  out << ", " << "allowSearchByUserid=" << to_string(allowSearchByUserid);
  out << ", " << "allowSearchByEmail=" << to_string(allowSearchByEmail);
  out << ", " << "picturePath=" << to_string(picturePath);
  out << ", " << "musicProfile=" << to_string(musicProfile);
  out << ", " << "videoProfile=" << to_string(videoProfile);
  out << ")";
}


ProximityMatchCandidateResult::~ProximityMatchCandidateResult() throw() {
}


void ProximityMatchCandidateResult::__set_users(const std::vector<Contact> & val) {
  this->users = val;
}

void ProximityMatchCandidateResult::__set_buddies(const std::vector<Contact> & val) {
  this->buddies = val;
}
std::ostream& operator<<(std::ostream& out, const ProximityMatchCandidateResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ProximityMatchCandidateResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->users.clear();
            uint32_t _size902;
            ::apache::thrift::protocol::TType _etype905;
            xfer += iprot->readListBegin(_etype905, _size902);
            this->users.resize(_size902);
            uint32_t _i906;
            for (_i906 = 0; _i906 < _size902; ++_i906)
            {
              xfer += this->users[_i906].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.users = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->buddies.clear();
            uint32_t _size907;
            ::apache::thrift::protocol::TType _etype910;
            xfer += iprot->readListBegin(_etype910, _size907);
            this->buddies.resize(_size907);
            uint32_t _i911;
            for (_i911 = 0; _i911 < _size907; ++_i911)
            {
              xfer += this->buddies[_i911].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.buddies = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProximityMatchCandidateResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ProximityMatchCandidateResult");

  xfer += oprot->writeFieldBegin("users", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->users.size()));
    std::vector<Contact> ::const_iterator _iter912;
    for (_iter912 = this->users.begin(); _iter912 != this->users.end(); ++_iter912)
    {
      xfer += (*_iter912).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buddies", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->buddies.size()));
    std::vector<Contact> ::const_iterator _iter913;
    for (_iter913 = this->buddies.begin(); _iter913 != this->buddies.end(); ++_iter913)
    {
      xfer += (*_iter913).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProximityMatchCandidateResult &a, ProximityMatchCandidateResult &b) {
  using ::std::swap;
  swap(a.users, b.users);
  swap(a.buddies, b.buddies);
  swap(a.__isset, b.__isset);
}

ProximityMatchCandidateResult::ProximityMatchCandidateResult(const ProximityMatchCandidateResult& other914) {
  users = other914.users;
  buddies = other914.buddies;
  __isset = other914.__isset;
}
ProximityMatchCandidateResult& ProximityMatchCandidateResult::operator=(const ProximityMatchCandidateResult& other915) {
  users = other915.users;
  buddies = other915.buddies;
  __isset = other915.__isset;
  return *this;
}
void ProximityMatchCandidateResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ProximityMatchCandidateResult(";
  out << "users=" << to_string(users);
  out << ", " << "buddies=" << to_string(buddies);
  out << ")";
}


RegisterWithSnsIdResult::~RegisterWithSnsIdResult() throw() {
}


void RegisterWithSnsIdResult::__set_authToken(const std::string& val) {
  this->authToken = val;
}

void RegisterWithSnsIdResult::__set_userCreated(const bool val) {
  this->userCreated = val;
}
std::ostream& operator<<(std::ostream& out, const RegisterWithSnsIdResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RegisterWithSnsIdResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->authToken);
          this->__isset.authToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->userCreated);
          this->__isset.userCreated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RegisterWithSnsIdResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RegisterWithSnsIdResult");

  xfer += oprot->writeFieldBegin("authToken", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->authToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userCreated", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->userCreated);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RegisterWithSnsIdResult &a, RegisterWithSnsIdResult &b) {
  using ::std::swap;
  swap(a.authToken, b.authToken);
  swap(a.userCreated, b.userCreated);
  swap(a.__isset, b.__isset);
}

RegisterWithSnsIdResult::RegisterWithSnsIdResult(const RegisterWithSnsIdResult& other916) {
  authToken = other916.authToken;
  userCreated = other916.userCreated;
  __isset = other916.__isset;
}
RegisterWithSnsIdResult& RegisterWithSnsIdResult::operator=(const RegisterWithSnsIdResult& other917) {
  authToken = other917.authToken;
  userCreated = other917.userCreated;
  __isset = other917.__isset;
  return *this;
}
void RegisterWithSnsIdResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RegisterWithSnsIdResult(";
  out << "authToken=" << to_string(authToken);
  out << ", " << "userCreated=" << to_string(userCreated);
  out << ")";
}


RequestTokenResponse::~RequestTokenResponse() throw() {
}


void RequestTokenResponse::__set_requestToken(const std::string& val) {
  this->requestToken = val;
}

void RequestTokenResponse::__set_returnUrl(const std::string& val) {
  this->returnUrl = val;
}
std::ostream& operator<<(std::ostream& out, const RequestTokenResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RequestTokenResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->requestToken);
          this->__isset.requestToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->returnUrl);
          this->__isset.returnUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RequestTokenResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RequestTokenResponse");

  xfer += oprot->writeFieldBegin("requestToken", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->requestToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("returnUrl", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->returnUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestTokenResponse &a, RequestTokenResponse &b) {
  using ::std::swap;
  swap(a.requestToken, b.requestToken);
  swap(a.returnUrl, b.returnUrl);
  swap(a.__isset, b.__isset);
}

RequestTokenResponse::RequestTokenResponse(const RequestTokenResponse& other918) {
  requestToken = other918.requestToken;
  returnUrl = other918.returnUrl;
  __isset = other918.__isset;
}
RequestTokenResponse& RequestTokenResponse::operator=(const RequestTokenResponse& other919) {
  requestToken = other919.requestToken;
  returnUrl = other919.returnUrl;
  __isset = other919.__isset;
  return *this;
}
void RequestTokenResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RequestTokenResponse(";
  out << "requestToken=" << to_string(requestToken);
  out << ", " << "returnUrl=" << to_string(returnUrl);
  out << ")";
}


Room::~Room() throw() {
}


void Room::__set_mid(const std::string& val) {
  this->mid = val;
}

void Room::__set_createdTime(const int64_t val) {
  this->createdTime = val;
}

void Room::__set_contacts(const std::vector<Contact> & val) {
  this->contacts = val;
}

void Room::__set_notificationDisabled(const bool val) {
  this->notificationDisabled = val;
}

void Room::__set_memberMids(const std::vector<std::string> & val) {
  this->memberMids = val;
}
std::ostream& operator<<(std::ostream& out, const Room& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Room::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mid);
          this->__isset.mid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createdTime);
          this->__isset.createdTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->contacts.clear();
            uint32_t _size920;
            ::apache::thrift::protocol::TType _etype923;
            xfer += iprot->readListBegin(_etype923, _size920);
            this->contacts.resize(_size920);
            uint32_t _i924;
            for (_i924 = 0; _i924 < _size920; ++_i924)
            {
              xfer += this->contacts[_i924].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.contacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->notificationDisabled);
          this->__isset.notificationDisabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->memberMids.clear();
            uint32_t _size925;
            ::apache::thrift::protocol::TType _etype928;
            xfer += iprot->readListBegin(_etype928, _size925);
            this->memberMids.resize(_size925);
            uint32_t _i929;
            for (_i929 = 0; _i929 < _size925; ++_i929)
            {
              xfer += iprot->readString(this->memberMids[_i929]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.memberMids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Room::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Room");

  xfer += oprot->writeFieldBegin("mid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->mid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createdTime", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->createdTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contacts", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->contacts.size()));
    std::vector<Contact> ::const_iterator _iter930;
    for (_iter930 = this->contacts.begin(); _iter930 != this->contacts.end(); ++_iter930)
    {
      xfer += (*_iter930).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notificationDisabled", ::apache::thrift::protocol::T_BOOL, 31);
  xfer += oprot->writeBool(this->notificationDisabled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("memberMids", ::apache::thrift::protocol::T_LIST, 40);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->memberMids.size()));
    std::vector<std::string> ::const_iterator _iter931;
    for (_iter931 = this->memberMids.begin(); _iter931 != this->memberMids.end(); ++_iter931)
    {
      xfer += oprot->writeString((*_iter931));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Room &a, Room &b) {
  using ::std::swap;
  swap(a.mid, b.mid);
  swap(a.createdTime, b.createdTime);
  swap(a.contacts, b.contacts);
  swap(a.notificationDisabled, b.notificationDisabled);
  swap(a.memberMids, b.memberMids);
  swap(a.__isset, b.__isset);
}

Room::Room(const Room& other932) {
  mid = other932.mid;
  createdTime = other932.createdTime;
  contacts = other932.contacts;
  notificationDisabled = other932.notificationDisabled;
  memberMids = other932.memberMids;
  __isset = other932.__isset;
}
Room& Room::operator=(const Room& other933) {
  mid = other933.mid;
  createdTime = other933.createdTime;
  contacts = other933.contacts;
  notificationDisabled = other933.notificationDisabled;
  memberMids = other933.memberMids;
  __isset = other933.__isset;
  return *this;
}
void Room::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Room(";
  out << "mid=" << to_string(mid);
  out << ", " << "createdTime=" << to_string(createdTime);
  out << ", " << "contacts=" << to_string(contacts);
  out << ", " << "notificationDisabled=" << to_string(notificationDisabled);
  out << ", " << "memberMids=" << to_string(memberMids);
  out << ")";
}


SuggestDictionary::~SuggestDictionary() throw() {
}


void SuggestDictionary::__set_language(const std::string& val) {
  this->language = val;
}

void SuggestDictionary::__set_name(const std::string& val) {
  this->name = val;
}
std::ostream& operator<<(std::ostream& out, const SuggestDictionary& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SuggestDictionary::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->language);
          this->__isset.language = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SuggestDictionary::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SuggestDictionary");

  xfer += oprot->writeFieldBegin("language", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->language);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SuggestDictionary &a, SuggestDictionary &b) {
  using ::std::swap;
  swap(a.language, b.language);
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

SuggestDictionary::SuggestDictionary(const SuggestDictionary& other934) {
  language = other934.language;
  name = other934.name;
  __isset = other934.__isset;
}
SuggestDictionary& SuggestDictionary::operator=(const SuggestDictionary& other935) {
  language = other935.language;
  name = other935.name;
  __isset = other935.__isset;
  return *this;
}
void SuggestDictionary::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SuggestDictionary(";
  out << "language=" << to_string(language);
  out << ", " << "name=" << to_string(name);
  out << ")";
}


SuggestItemDictionaryIncrement::~SuggestItemDictionaryIncrement() throw() {
}


void SuggestItemDictionaryIncrement::__set_status(const SuggestDictionaryIncrementStatus val) {
  this->status = val;
}

void SuggestItemDictionaryIncrement::__set_revision(const int64_t val) {
  this->revision = val;
}

void SuggestItemDictionaryIncrement::__set_scheme(const std::string& val) {
  this->scheme = val;
}

void SuggestItemDictionaryIncrement::__set_data(const std::string& val) {
  this->data = val;
}
std::ostream& operator<<(std::ostream& out, const SuggestItemDictionaryIncrement& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SuggestItemDictionaryIncrement::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast936;
          xfer += iprot->readI32(ecast936);
          this->status = (SuggestDictionaryIncrementStatus::type)ecast936;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->revision);
          this->__isset.revision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->scheme);
          this->__isset.scheme = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->data);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SuggestItemDictionaryIncrement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SuggestItemDictionaryIncrement");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("revision", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->revision);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scheme", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->scheme);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeBinary(this->data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SuggestItemDictionaryIncrement &a, SuggestItemDictionaryIncrement &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.revision, b.revision);
  swap(a.scheme, b.scheme);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

SuggestItemDictionaryIncrement::SuggestItemDictionaryIncrement(const SuggestItemDictionaryIncrement& other937) {
  status = other937.status;
  revision = other937.revision;
  scheme = other937.scheme;
  data = other937.data;
  __isset = other937.__isset;
}
SuggestItemDictionaryIncrement& SuggestItemDictionaryIncrement::operator=(const SuggestItemDictionaryIncrement& other938) {
  status = other938.status;
  revision = other938.revision;
  scheme = other938.scheme;
  data = other938.data;
  __isset = other938.__isset;
  return *this;
}
void SuggestItemDictionaryIncrement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SuggestItemDictionaryIncrement(";
  out << "status=" << to_string(status);
  out << ", " << "revision=" << to_string(revision);
  out << ", " << "scheme=" << to_string(scheme);
  out << ", " << "data=" << to_string(data);
  out << ")";
}


SuggestTagDictionaryIncrement::~SuggestTagDictionaryIncrement() throw() {
}


void SuggestTagDictionaryIncrement::__set_status(const SuggestDictionaryIncrementStatus val) {
  this->status = val;
}

void SuggestTagDictionaryIncrement::__set_language(const std::string& val) {
  this->language = val;
}

void SuggestTagDictionaryIncrement::__set_revision(const int64_t val) {
  this->revision = val;
}

void SuggestTagDictionaryIncrement::__set_scheme(const std::string& val) {
  this->scheme = val;
}

void SuggestTagDictionaryIncrement::__set_data(const std::string& val) {
  this->data = val;
}
std::ostream& operator<<(std::ostream& out, const SuggestTagDictionaryIncrement& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SuggestTagDictionaryIncrement::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast939;
          xfer += iprot->readI32(ecast939);
          this->status = (SuggestDictionaryIncrementStatus::type)ecast939;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->language);
          this->__isset.language = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->revision);
          this->__isset.revision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->scheme);
          this->__isset.scheme = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->data);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SuggestTagDictionaryIncrement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SuggestTagDictionaryIncrement");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("language", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->language);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("revision", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->revision);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scheme", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->scheme);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeBinary(this->data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SuggestTagDictionaryIncrement &a, SuggestTagDictionaryIncrement &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.language, b.language);
  swap(a.revision, b.revision);
  swap(a.scheme, b.scheme);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

SuggestTagDictionaryIncrement::SuggestTagDictionaryIncrement(const SuggestTagDictionaryIncrement& other940) {
  status = other940.status;
  language = other940.language;
  revision = other940.revision;
  scheme = other940.scheme;
  data = other940.data;
  __isset = other940.__isset;
}
SuggestTagDictionaryIncrement& SuggestTagDictionaryIncrement::operator=(const SuggestTagDictionaryIncrement& other941) {
  status = other941.status;
  language = other941.language;
  revision = other941.revision;
  scheme = other941.scheme;
  data = other941.data;
  __isset = other941.__isset;
  return *this;
}
void SuggestTagDictionaryIncrement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SuggestTagDictionaryIncrement(";
  out << "status=" << to_string(status);
  out << ", " << "language=" << to_string(language);
  out << ", " << "revision=" << to_string(revision);
  out << ", " << "scheme=" << to_string(scheme);
  out << ", " << "data=" << to_string(data);
  out << ")";
}


SuggestDictionaryIncrements::~SuggestDictionaryIncrements() throw() {
}


void SuggestDictionaryIncrements::__set_itemIncrement(const SuggestItemDictionaryIncrement& val) {
  this->itemIncrement = val;
}

void SuggestDictionaryIncrements::__set_tagIncrements(const std::vector<SuggestTagDictionaryIncrement> & val) {
  this->tagIncrements = val;
}
std::ostream& operator<<(std::ostream& out, const SuggestDictionaryIncrements& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SuggestDictionaryIncrements::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->itemIncrement.read(iprot);
          this->__isset.itemIncrement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tagIncrements.clear();
            uint32_t _size942;
            ::apache::thrift::protocol::TType _etype945;
            xfer += iprot->readListBegin(_etype945, _size942);
            this->tagIncrements.resize(_size942);
            uint32_t _i946;
            for (_i946 = 0; _i946 < _size942; ++_i946)
            {
              xfer += this->tagIncrements[_i946].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tagIncrements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SuggestDictionaryIncrements::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SuggestDictionaryIncrements");

  xfer += oprot->writeFieldBegin("itemIncrement", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->itemIncrement.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tagIncrements", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->tagIncrements.size()));
    std::vector<SuggestTagDictionaryIncrement> ::const_iterator _iter947;
    for (_iter947 = this->tagIncrements.begin(); _iter947 != this->tagIncrements.end(); ++_iter947)
    {
      xfer += (*_iter947).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SuggestDictionaryIncrements &a, SuggestDictionaryIncrements &b) {
  using ::std::swap;
  swap(a.itemIncrement, b.itemIncrement);
  swap(a.tagIncrements, b.tagIncrements);
  swap(a.__isset, b.__isset);
}

SuggestDictionaryIncrements::SuggestDictionaryIncrements(const SuggestDictionaryIncrements& other948) {
  itemIncrement = other948.itemIncrement;
  tagIncrements = other948.tagIncrements;
  __isset = other948.__isset;
}
SuggestDictionaryIncrements& SuggestDictionaryIncrements::operator=(const SuggestDictionaryIncrements& other949) {
  itemIncrement = other949.itemIncrement;
  tagIncrements = other949.tagIncrements;
  __isset = other949.__isset;
  return *this;
}
void SuggestDictionaryIncrements::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SuggestDictionaryIncrements(";
  out << "itemIncrement=" << to_string(itemIncrement);
  out << ", " << "tagIncrements=" << to_string(tagIncrements);
  out << ")";
}


SuggestItemDictionaryRevision::~SuggestItemDictionaryRevision() throw() {
}


void SuggestItemDictionaryRevision::__set_revision(const int64_t val) {
  this->revision = val;
}

void SuggestItemDictionaryRevision::__set_scheme(const std::string& val) {
  this->scheme = val;
}
std::ostream& operator<<(std::ostream& out, const SuggestItemDictionaryRevision& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SuggestItemDictionaryRevision::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->revision);
          this->__isset.revision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->scheme);
          this->__isset.scheme = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SuggestItemDictionaryRevision::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SuggestItemDictionaryRevision");

  xfer += oprot->writeFieldBegin("revision", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->revision);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scheme", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->scheme);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SuggestItemDictionaryRevision &a, SuggestItemDictionaryRevision &b) {
  using ::std::swap;
  swap(a.revision, b.revision);
  swap(a.scheme, b.scheme);
  swap(a.__isset, b.__isset);
}

SuggestItemDictionaryRevision::SuggestItemDictionaryRevision(const SuggestItemDictionaryRevision& other950) {
  revision = other950.revision;
  scheme = other950.scheme;
  __isset = other950.__isset;
}
SuggestItemDictionaryRevision& SuggestItemDictionaryRevision::operator=(const SuggestItemDictionaryRevision& other951) {
  revision = other951.revision;
  scheme = other951.scheme;
  __isset = other951.__isset;
  return *this;
}
void SuggestItemDictionaryRevision::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SuggestItemDictionaryRevision(";
  out << "revision=" << to_string(revision);
  out << ", " << "scheme=" << to_string(scheme);
  out << ")";
}


SuggestTagDictionaryRevision::~SuggestTagDictionaryRevision() throw() {
}


void SuggestTagDictionaryRevision::__set_language(const std::string& val) {
  this->language = val;
}

void SuggestTagDictionaryRevision::__set_revision(const int64_t val) {
  this->revision = val;
}

void SuggestTagDictionaryRevision::__set_scheme(const std::string& val) {
  this->scheme = val;
}
std::ostream& operator<<(std::ostream& out, const SuggestTagDictionaryRevision& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SuggestTagDictionaryRevision::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->language);
          this->__isset.language = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->revision);
          this->__isset.revision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->scheme);
          this->__isset.scheme = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SuggestTagDictionaryRevision::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SuggestTagDictionaryRevision");

  xfer += oprot->writeFieldBegin("language", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->language);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("revision", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->revision);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scheme", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->scheme);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SuggestTagDictionaryRevision &a, SuggestTagDictionaryRevision &b) {
  using ::std::swap;
  swap(a.language, b.language);
  swap(a.revision, b.revision);
  swap(a.scheme, b.scheme);
  swap(a.__isset, b.__isset);
}

SuggestTagDictionaryRevision::SuggestTagDictionaryRevision(const SuggestTagDictionaryRevision& other952) {
  language = other952.language;
  revision = other952.revision;
  scheme = other952.scheme;
  __isset = other952.__isset;
}
SuggestTagDictionaryRevision& SuggestTagDictionaryRevision::operator=(const SuggestTagDictionaryRevision& other953) {
  language = other953.language;
  revision = other953.revision;
  scheme = other953.scheme;
  __isset = other953.__isset;
  return *this;
}
void SuggestTagDictionaryRevision::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SuggestTagDictionaryRevision(";
  out << "language=" << to_string(language);
  out << ", " << "revision=" << to_string(revision);
  out << ", " << "scheme=" << to_string(scheme);
  out << ")";
}


SuggestDictionaryRevisions::~SuggestDictionaryRevisions() throw() {
}


void SuggestDictionaryRevisions::__set_itemRevision(const SuggestItemDictionaryRevision& val) {
  this->itemRevision = val;
}

void SuggestDictionaryRevisions::__set_tagRevisions(const std::vector<SuggestTagDictionaryRevision> & val) {
  this->tagRevisions = val;
}
std::ostream& operator<<(std::ostream& out, const SuggestDictionaryRevisions& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SuggestDictionaryRevisions::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->itemRevision.read(iprot);
          this->__isset.itemRevision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tagRevisions.clear();
            uint32_t _size954;
            ::apache::thrift::protocol::TType _etype957;
            xfer += iprot->readListBegin(_etype957, _size954);
            this->tagRevisions.resize(_size954);
            uint32_t _i958;
            for (_i958 = 0; _i958 < _size954; ++_i958)
            {
              xfer += this->tagRevisions[_i958].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tagRevisions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SuggestDictionaryRevisions::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SuggestDictionaryRevisions");

  xfer += oprot->writeFieldBegin("itemRevision", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->itemRevision.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tagRevisions", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->tagRevisions.size()));
    std::vector<SuggestTagDictionaryRevision> ::const_iterator _iter959;
    for (_iter959 = this->tagRevisions.begin(); _iter959 != this->tagRevisions.end(); ++_iter959)
    {
      xfer += (*_iter959).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SuggestDictionaryRevisions &a, SuggestDictionaryRevisions &b) {
  using ::std::swap;
  swap(a.itemRevision, b.itemRevision);
  swap(a.tagRevisions, b.tagRevisions);
  swap(a.__isset, b.__isset);
}

SuggestDictionaryRevisions::SuggestDictionaryRevisions(const SuggestDictionaryRevisions& other960) {
  itemRevision = other960.itemRevision;
  tagRevisions = other960.tagRevisions;
  __isset = other960.__isset;
}
SuggestDictionaryRevisions& SuggestDictionaryRevisions::operator=(const SuggestDictionaryRevisions& other961) {
  itemRevision = other961.itemRevision;
  tagRevisions = other961.tagRevisions;
  __isset = other961.__isset;
  return *this;
}
void SuggestDictionaryRevisions::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SuggestDictionaryRevisions(";
  out << "itemRevision=" << to_string(itemRevision);
  out << ", " << "tagRevisions=" << to_string(tagRevisions);
  out << ")";
}


SuggestDictionarySettings::~SuggestDictionarySettings() throw() {
}


void SuggestDictionarySettings::__set_revision(const int64_t val) {
  this->revision = val;
}

void SuggestDictionarySettings::__set_newRevision(const int64_t val) {
  this->newRevision = val;
}

void SuggestDictionarySettings::__set_dictionaries(const std::vector<SuggestDictionary> & val) {
  this->dictionaries = val;
}

void SuggestDictionarySettings::__set_preloadedDictionaries(const std::vector<std::string> & val) {
  this->preloadedDictionaries = val;
}
std::ostream& operator<<(std::ostream& out, const SuggestDictionarySettings& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SuggestDictionarySettings::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->revision);
          this->__isset.revision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->newRevision);
          this->__isset.newRevision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->dictionaries.clear();
            uint32_t _size962;
            ::apache::thrift::protocol::TType _etype965;
            xfer += iprot->readListBegin(_etype965, _size962);
            this->dictionaries.resize(_size962);
            uint32_t _i966;
            for (_i966 = 0; _i966 < _size962; ++_i966)
            {
              xfer += this->dictionaries[_i966].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.dictionaries = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->preloadedDictionaries.clear();
            uint32_t _size967;
            ::apache::thrift::protocol::TType _etype970;
            xfer += iprot->readListBegin(_etype970, _size967);
            this->preloadedDictionaries.resize(_size967);
            uint32_t _i971;
            for (_i971 = 0; _i971 < _size967; ++_i971)
            {
              xfer += iprot->readString(this->preloadedDictionaries[_i971]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.preloadedDictionaries = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SuggestDictionarySettings::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SuggestDictionarySettings");

  xfer += oprot->writeFieldBegin("revision", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->revision);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("newRevision", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->newRevision);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dictionaries", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->dictionaries.size()));
    std::vector<SuggestDictionary> ::const_iterator _iter972;
    for (_iter972 = this->dictionaries.begin(); _iter972 != this->dictionaries.end(); ++_iter972)
    {
      xfer += (*_iter972).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("preloadedDictionaries", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->preloadedDictionaries.size()));
    std::vector<std::string> ::const_iterator _iter973;
    for (_iter973 = this->preloadedDictionaries.begin(); _iter973 != this->preloadedDictionaries.end(); ++_iter973)
    {
      xfer += oprot->writeString((*_iter973));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SuggestDictionarySettings &a, SuggestDictionarySettings &b) {
  using ::std::swap;
  swap(a.revision, b.revision);
  swap(a.newRevision, b.newRevision);
  swap(a.dictionaries, b.dictionaries);
  swap(a.preloadedDictionaries, b.preloadedDictionaries);
  swap(a.__isset, b.__isset);
}

SuggestDictionarySettings::SuggestDictionarySettings(const SuggestDictionarySettings& other974) {
  revision = other974.revision;
  newRevision = other974.newRevision;
  dictionaries = other974.dictionaries;
  preloadedDictionaries = other974.preloadedDictionaries;
  __isset = other974.__isset;
}
SuggestDictionarySettings& SuggestDictionarySettings::operator=(const SuggestDictionarySettings& other975) {
  revision = other975.revision;
  newRevision = other975.newRevision;
  dictionaries = other975.dictionaries;
  preloadedDictionaries = other975.preloadedDictionaries;
  __isset = other975.__isset;
  return *this;
}
void SuggestDictionarySettings::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SuggestDictionarySettings(";
  out << "revision=" << to_string(revision);
  out << ", " << "newRevision=" << to_string(newRevision);
  out << ", " << "dictionaries=" << to_string(dictionaries);
  out << ", " << "preloadedDictionaries=" << to_string(preloadedDictionaries);
  out << ")";
}


PhoneInfoForChannel::~PhoneInfoForChannel() throw() {
}


void PhoneInfoForChannel::__set_mid(const std::string& val) {
  this->mid = val;
}

void PhoneInfoForChannel::__set_normalizedPhoneNumber(const std::string& val) {
  this->normalizedPhoneNumber = val;
}

void PhoneInfoForChannel::__set_allowedToSearchByPhoneNumber(const bool val) {
  this->allowedToSearchByPhoneNumber = val;
}

void PhoneInfoForChannel::__set_allowedToReceiveMessageFromNonFriend(const bool val) {
  this->allowedToReceiveMessageFromNonFriend = val;
}

void PhoneInfoForChannel::__set_region(const std::string& val) {
  this->region = val;
}
std::ostream& operator<<(std::ostream& out, const PhoneInfoForChannel& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PhoneInfoForChannel::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mid);
          this->__isset.mid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->normalizedPhoneNumber);
          this->__isset.normalizedPhoneNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->allowedToSearchByPhoneNumber);
          this->__isset.allowedToSearchByPhoneNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->allowedToReceiveMessageFromNonFriend);
          this->__isset.allowedToReceiveMessageFromNonFriend = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->region);
          this->__isset.region = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PhoneInfoForChannel::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PhoneInfoForChannel");

  xfer += oprot->writeFieldBegin("mid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->mid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("normalizedPhoneNumber", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->normalizedPhoneNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("allowedToSearchByPhoneNumber", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->allowedToSearchByPhoneNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("allowedToReceiveMessageFromNonFriend", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->allowedToReceiveMessageFromNonFriend);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("region", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->region);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PhoneInfoForChannel &a, PhoneInfoForChannel &b) {
  using ::std::swap;
  swap(a.mid, b.mid);
  swap(a.normalizedPhoneNumber, b.normalizedPhoneNumber);
  swap(a.allowedToSearchByPhoneNumber, b.allowedToSearchByPhoneNumber);
  swap(a.allowedToReceiveMessageFromNonFriend, b.allowedToReceiveMessageFromNonFriend);
  swap(a.region, b.region);
  swap(a.__isset, b.__isset);
}

PhoneInfoForChannel::PhoneInfoForChannel(const PhoneInfoForChannel& other976) {
  mid = other976.mid;
  normalizedPhoneNumber = other976.normalizedPhoneNumber;
  allowedToSearchByPhoneNumber = other976.allowedToSearchByPhoneNumber;
  allowedToReceiveMessageFromNonFriend = other976.allowedToReceiveMessageFromNonFriend;
  region = other976.region;
  __isset = other976.__isset;
}
PhoneInfoForChannel& PhoneInfoForChannel::operator=(const PhoneInfoForChannel& other977) {
  mid = other977.mid;
  normalizedPhoneNumber = other977.normalizedPhoneNumber;
  allowedToSearchByPhoneNumber = other977.allowedToSearchByPhoneNumber;
  allowedToReceiveMessageFromNonFriend = other977.allowedToReceiveMessageFromNonFriend;
  region = other977.region;
  __isset = other977.__isset;
  return *this;
}
void PhoneInfoForChannel::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PhoneInfoForChannel(";
  out << "mid=" << to_string(mid);
  out << ", " << "normalizedPhoneNumber=" << to_string(normalizedPhoneNumber);
  out << ", " << "allowedToSearchByPhoneNumber=" << to_string(allowedToSearchByPhoneNumber);
  out << ", " << "allowedToReceiveMessageFromNonFriend=" << to_string(allowedToReceiveMessageFromNonFriend);
  out << ", " << "region=" << to_string(region);
  out << ")";
}


PhoneVerificationResult::~PhoneVerificationResult() throw() {
}


void PhoneVerificationResult::__set_verificationResult(const VerificationResult::type val) {
  this->verificationResult = val;
}

void PhoneVerificationResult::__set_accountMigrationCheckType(const AccountMigrationCheckType::type val) {
  this->accountMigrationCheckType = val;
}

void PhoneVerificationResult::__set_recommendAddFriends(const bool val) {
  this->recommendAddFriends = val;
}
std::ostream& operator<<(std::ostream& out, const PhoneVerificationResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PhoneVerificationResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast978;
          xfer += iprot->readI32(ecast978);
          this->verificationResult = (VerificationResult::type)ecast978;
          this->__isset.verificationResult = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast979;
          xfer += iprot->readI32(ecast979);
          this->accountMigrationCheckType = (AccountMigrationCheckType::type)ecast979;
          this->__isset.accountMigrationCheckType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->recommendAddFriends);
          this->__isset.recommendAddFriends = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PhoneVerificationResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PhoneVerificationResult");

  xfer += oprot->writeFieldBegin("verificationResult", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->verificationResult);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("accountMigrationCheckType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->accountMigrationCheckType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recommendAddFriends", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->recommendAddFriends);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PhoneVerificationResult &a, PhoneVerificationResult &b) {
  using ::std::swap;
  swap(a.verificationResult, b.verificationResult);
  swap(a.accountMigrationCheckType, b.accountMigrationCheckType);
  swap(a.recommendAddFriends, b.recommendAddFriends);
  swap(a.__isset, b.__isset);
}

PhoneVerificationResult::PhoneVerificationResult(const PhoneVerificationResult& other980) {
  verificationResult = other980.verificationResult;
  accountMigrationCheckType = other980.accountMigrationCheckType;
  recommendAddFriends = other980.recommendAddFriends;
  __isset = other980.__isset;
}
PhoneVerificationResult& PhoneVerificationResult::operator=(const PhoneVerificationResult& other981) {
  verificationResult = other981.verificationResult;
  accountMigrationCheckType = other981.accountMigrationCheckType;
  recommendAddFriends = other981.recommendAddFriends;
  __isset = other981.__isset;
  return *this;
}
void PhoneVerificationResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PhoneVerificationResult(";
  out << "verificationResult=" << to_string(verificationResult);
  out << ", " << "accountMigrationCheckType=" << to_string(accountMigrationCheckType);
  out << ", " << "recommendAddFriends=" << to_string(recommendAddFriends);
  out << ")";
}


PlaceSearchInfo::~PlaceSearchInfo() throw() {
}


void PlaceSearchInfo::__set_name(const std::string& val) {
  this->name = val;
}

void PlaceSearchInfo::__set_address(const std::string& val) {
  this->address = val;
}

void PlaceSearchInfo::__set_latitude(const double val) {
  this->latitude = val;
}

void PlaceSearchInfo::__set_longitude(const double val) {
  this->longitude = val;
}
std::ostream& operator<<(std::ostream& out, const PlaceSearchInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PlaceSearchInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->address);
          this->__isset.address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->latitude);
          this->__isset.latitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->longitude);
          this->__isset.longitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PlaceSearchInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PlaceSearchInfo");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("address", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->address);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("latitude", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->latitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("longitude", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->longitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PlaceSearchInfo &a, PlaceSearchInfo &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.address, b.address);
  swap(a.latitude, b.latitude);
  swap(a.longitude, b.longitude);
  swap(a.__isset, b.__isset);
}

PlaceSearchInfo::PlaceSearchInfo(const PlaceSearchInfo& other982) {
  name = other982.name;
  address = other982.address;
  latitude = other982.latitude;
  longitude = other982.longitude;
  __isset = other982.__isset;
}
PlaceSearchInfo& PlaceSearchInfo::operator=(const PlaceSearchInfo& other983) {
  name = other983.name;
  address = other983.address;
  latitude = other983.latitude;
  longitude = other983.longitude;
  __isset = other983.__isset;
  return *this;
}
void PlaceSearchInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PlaceSearchInfo(";
  out << "name=" << to_string(name);
  out << ", " << "address=" << to_string(address);
  out << ", " << "latitude=" << to_string(latitude);
  out << ", " << "longitude=" << to_string(longitude);
  out << ")";
}


RSAKey::~RSAKey() throw() {
}


void RSAKey::__set_keynm(const std::string& val) {
  this->keynm = val;
}

void RSAKey::__set_nvalue(const std::string& val) {
  this->nvalue = val;
}

void RSAKey::__set_evalue(const std::string& val) {
  this->evalue = val;
}

void RSAKey::__set_sessionKey(const std::string& val) {
  this->sessionKey = val;
}
std::ostream& operator<<(std::ostream& out, const RSAKey& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RSAKey::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->keynm);
          this->__isset.keynm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nvalue);
          this->__isset.nvalue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->evalue);
          this->__isset.evalue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sessionKey);
          this->__isset.sessionKey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RSAKey::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RSAKey");

  xfer += oprot->writeFieldBegin("keynm", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->keynm);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nvalue", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->nvalue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("evalue", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->evalue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sessionKey", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->sessionKey);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RSAKey &a, RSAKey &b) {
  using ::std::swap;
  swap(a.keynm, b.keynm);
  swap(a.nvalue, b.nvalue);
  swap(a.evalue, b.evalue);
  swap(a.sessionKey, b.sessionKey);
  swap(a.__isset, b.__isset);
}

RSAKey::RSAKey(const RSAKey& other984) {
  keynm = other984.keynm;
  nvalue = other984.nvalue;
  evalue = other984.evalue;
  sessionKey = other984.sessionKey;
  __isset = other984.__isset;
}
RSAKey& RSAKey::operator=(const RSAKey& other985) {
  keynm = other985.keynm;
  nvalue = other985.nvalue;
  evalue = other985.evalue;
  sessionKey = other985.sessionKey;
  __isset = other985.__isset;
  return *this;
}
void RSAKey::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RSAKey(";
  out << "keynm=" << to_string(keynm);
  out << ", " << "nvalue=" << to_string(nvalue);
  out << ", " << "evalue=" << to_string(evalue);
  out << ", " << "sessionKey=" << to_string(sessionKey);
  out << ")";
}


SecurityCenterResult::~SecurityCenterResult() throw() {
}


void SecurityCenterResult::__set_uri(const std::string& val) {
  this->uri = val;
}

void SecurityCenterResult::__set_token(const std::string& val) {
  this->token = val;
}

void SecurityCenterResult::__set_cookiePath(const std::string& val) {
  this->cookiePath = val;
}

void SecurityCenterResult::__set_skip(const bool val) {
  this->skip = val;
}
std::ostream& operator<<(std::ostream& out, const SecurityCenterResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SecurityCenterResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uri);
          this->__isset.uri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->token);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cookiePath);
          this->__isset.cookiePath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->skip);
          this->__isset.skip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SecurityCenterResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SecurityCenterResult");

  xfer += oprot->writeFieldBegin("uri", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->uri);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cookiePath", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->cookiePath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("skip", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->skip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SecurityCenterResult &a, SecurityCenterResult &b) {
  using ::std::swap;
  swap(a.uri, b.uri);
  swap(a.token, b.token);
  swap(a.cookiePath, b.cookiePath);
  swap(a.skip, b.skip);
  swap(a.__isset, b.__isset);
}

SecurityCenterResult::SecurityCenterResult(const SecurityCenterResult& other986) {
  uri = other986.uri;
  token = other986.token;
  cookiePath = other986.cookiePath;
  skip = other986.skip;
  __isset = other986.__isset;
}
SecurityCenterResult& SecurityCenterResult::operator=(const SecurityCenterResult& other987) {
  uri = other987.uri;
  token = other987.token;
  cookiePath = other987.cookiePath;
  skip = other987.skip;
  __isset = other987.__isset;
  return *this;
}
void SecurityCenterResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SecurityCenterResult(";
  out << "uri=" << to_string(uri);
  out << ", " << "token=" << to_string(token);
  out << ", " << "cookiePath=" << to_string(cookiePath);
  out << ", " << "skip=" << to_string(skip);
  out << ")";
}


SendBuddyMessageResult::~SendBuddyMessageResult() throw() {
}


void SendBuddyMessageResult::__set_requestId(const std::string& val) {
  this->requestId = val;
}

void SendBuddyMessageResult::__set_state(const BuddyResultState::type val) {
  this->state = val;
}

void SendBuddyMessageResult::__set_messageId(const std::string& val) {
  this->messageId = val;
}

void SendBuddyMessageResult::__set_eventNo(const int32_t val) {
  this->eventNo = val;
}

void SendBuddyMessageResult::__set_receiverCount(const int64_t val) {
  this->receiverCount = val;
}

void SendBuddyMessageResult::__set_successCount(const int64_t val) {
  this->successCount = val;
}

void SendBuddyMessageResult::__set_failCount(const int64_t val) {
  this->failCount = val;
}

void SendBuddyMessageResult::__set_cancelCount(const int64_t val) {
  this->cancelCount = val;
}

void SendBuddyMessageResult::__set_blockCount(const int64_t val) {
  this->blockCount = val;
}

void SendBuddyMessageResult::__set_unregisterCount(const int64_t val) {
  this->unregisterCount = val;
}

void SendBuddyMessageResult::__set_timestamp(const int64_t val) {
  this->timestamp = val;
}

void SendBuddyMessageResult::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const SendBuddyMessageResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SendBuddyMessageResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->requestId);
          this->__isset.requestId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast988;
          xfer += iprot->readI32(ecast988);
          this->state = (BuddyResultState::type)ecast988;
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageId);
          this->__isset.messageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eventNo);
          this->__isset.eventNo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->receiverCount);
          this->__isset.receiverCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->successCount);
          this->__isset.successCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->failCount);
          this->__isset.failCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cancelCount);
          this->__isset.cancelCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->blockCount);
          this->__isset.blockCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->unregisterCount);
          this->__isset.unregisterCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SendBuddyMessageResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SendBuddyMessageResult");

  xfer += oprot->writeFieldBegin("requestId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->requestId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->messageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventNo", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->eventNo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("receiverCount", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->receiverCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("successCount", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->successCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("failCount", ::apache::thrift::protocol::T_I64, 13);
  xfer += oprot->writeI64(this->failCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cancelCount", ::apache::thrift::protocol::T_I64, 14);
  xfer += oprot->writeI64(this->cancelCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("blockCount", ::apache::thrift::protocol::T_I64, 15);
  xfer += oprot->writeI64(this->blockCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unregisterCount", ::apache::thrift::protocol::T_I64, 16);
  xfer += oprot->writeI64(this->unregisterCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I64, 21);
  xfer += oprot->writeI64(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 22);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SendBuddyMessageResult &a, SendBuddyMessageResult &b) {
  using ::std::swap;
  swap(a.requestId, b.requestId);
  swap(a.state, b.state);
  swap(a.messageId, b.messageId);
  swap(a.eventNo, b.eventNo);
  swap(a.receiverCount, b.receiverCount);
  swap(a.successCount, b.successCount);
  swap(a.failCount, b.failCount);
  swap(a.cancelCount, b.cancelCount);
  swap(a.blockCount, b.blockCount);
  swap(a.unregisterCount, b.unregisterCount);
  swap(a.timestamp, b.timestamp);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

SendBuddyMessageResult::SendBuddyMessageResult(const SendBuddyMessageResult& other989) {
  requestId = other989.requestId;
  state = other989.state;
  messageId = other989.messageId;
  eventNo = other989.eventNo;
  receiverCount = other989.receiverCount;
  successCount = other989.successCount;
  failCount = other989.failCount;
  cancelCount = other989.cancelCount;
  blockCount = other989.blockCount;
  unregisterCount = other989.unregisterCount;
  timestamp = other989.timestamp;
  message = other989.message;
  __isset = other989.__isset;
}
SendBuddyMessageResult& SendBuddyMessageResult::operator=(const SendBuddyMessageResult& other990) {
  requestId = other990.requestId;
  state = other990.state;
  messageId = other990.messageId;
  eventNo = other990.eventNo;
  receiverCount = other990.receiverCount;
  successCount = other990.successCount;
  failCount = other990.failCount;
  cancelCount = other990.cancelCount;
  blockCount = other990.blockCount;
  unregisterCount = other990.unregisterCount;
  timestamp = other990.timestamp;
  message = other990.message;
  __isset = other990.__isset;
  return *this;
}
void SendBuddyMessageResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SendBuddyMessageResult(";
  out << "requestId=" << to_string(requestId);
  out << ", " << "state=" << to_string(state);
  out << ", " << "messageId=" << to_string(messageId);
  out << ", " << "eventNo=" << to_string(eventNo);
  out << ", " << "receiverCount=" << to_string(receiverCount);
  out << ", " << "successCount=" << to_string(successCount);
  out << ", " << "failCount=" << to_string(failCount);
  out << ", " << "cancelCount=" << to_string(cancelCount);
  out << ", " << "blockCount=" << to_string(blockCount);
  out << ", " << "unregisterCount=" << to_string(unregisterCount);
  out << ", " << "timestamp=" << to_string(timestamp);
  out << ", " << "message=" << to_string(message);
  out << ")";
}


SetBuddyOnAirResult::~SetBuddyOnAirResult() throw() {
}


void SetBuddyOnAirResult::__set_requestId(const std::string& val) {
  this->requestId = val;
}

void SetBuddyOnAirResult::__set_state(const BuddyResultState::type val) {
  this->state = val;
}

void SetBuddyOnAirResult::__set_eventNo(const int32_t val) {
  this->eventNo = val;
}

void SetBuddyOnAirResult::__set_receiverCount(const int64_t val) {
  this->receiverCount = val;
}

void SetBuddyOnAirResult::__set_successCount(const int64_t val) {
  this->successCount = val;
}

void SetBuddyOnAirResult::__set_failCount(const int64_t val) {
  this->failCount = val;
}

void SetBuddyOnAirResult::__set_cancelCount(const int64_t val) {
  this->cancelCount = val;
}

void SetBuddyOnAirResult::__set_unregisterCount(const int64_t val) {
  this->unregisterCount = val;
}

void SetBuddyOnAirResult::__set_timestamp(const int64_t val) {
  this->timestamp = val;
}

void SetBuddyOnAirResult::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const SetBuddyOnAirResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SetBuddyOnAirResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->requestId);
          this->__isset.requestId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast991;
          xfer += iprot->readI32(ecast991);
          this->state = (BuddyResultState::type)ecast991;
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eventNo);
          this->__isset.eventNo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->receiverCount);
          this->__isset.receiverCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->successCount);
          this->__isset.successCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->failCount);
          this->__isset.failCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cancelCount);
          this->__isset.cancelCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->unregisterCount);
          this->__isset.unregisterCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SetBuddyOnAirResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SetBuddyOnAirResult");

  xfer += oprot->writeFieldBegin("requestId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->requestId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventNo", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->eventNo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("receiverCount", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->receiverCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("successCount", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->successCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("failCount", ::apache::thrift::protocol::T_I64, 13);
  xfer += oprot->writeI64(this->failCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cancelCount", ::apache::thrift::protocol::T_I64, 14);
  xfer += oprot->writeI64(this->cancelCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unregisterCount", ::apache::thrift::protocol::T_I64, 15);
  xfer += oprot->writeI64(this->unregisterCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I64, 21);
  xfer += oprot->writeI64(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 22);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SetBuddyOnAirResult &a, SetBuddyOnAirResult &b) {
  using ::std::swap;
  swap(a.requestId, b.requestId);
  swap(a.state, b.state);
  swap(a.eventNo, b.eventNo);
  swap(a.receiverCount, b.receiverCount);
  swap(a.successCount, b.successCount);
  swap(a.failCount, b.failCount);
  swap(a.cancelCount, b.cancelCount);
  swap(a.unregisterCount, b.unregisterCount);
  swap(a.timestamp, b.timestamp);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

SetBuddyOnAirResult::SetBuddyOnAirResult(const SetBuddyOnAirResult& other992) {
  requestId = other992.requestId;
  state = other992.state;
  eventNo = other992.eventNo;
  receiverCount = other992.receiverCount;
  successCount = other992.successCount;
  failCount = other992.failCount;
  cancelCount = other992.cancelCount;
  unregisterCount = other992.unregisterCount;
  timestamp = other992.timestamp;
  message = other992.message;
  __isset = other992.__isset;
}
SetBuddyOnAirResult& SetBuddyOnAirResult::operator=(const SetBuddyOnAirResult& other993) {
  requestId = other993.requestId;
  state = other993.state;
  eventNo = other993.eventNo;
  receiverCount = other993.receiverCount;
  successCount = other993.successCount;
  failCount = other993.failCount;
  cancelCount = other993.cancelCount;
  unregisterCount = other993.unregisterCount;
  timestamp = other993.timestamp;
  message = other993.message;
  __isset = other993.__isset;
  return *this;
}
void SetBuddyOnAirResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SetBuddyOnAirResult(";
  out << "requestId=" << to_string(requestId);
  out << ", " << "state=" << to_string(state);
  out << ", " << "eventNo=" << to_string(eventNo);
  out << ", " << "receiverCount=" << to_string(receiverCount);
  out << ", " << "successCount=" << to_string(successCount);
  out << ", " << "failCount=" << to_string(failCount);
  out << ", " << "cancelCount=" << to_string(cancelCount);
  out << ", " << "unregisterCount=" << to_string(unregisterCount);
  out << ", " << "timestamp=" << to_string(timestamp);
  out << ", " << "message=" << to_string(message);
  out << ")";
}


Settings::~Settings() throw() {
}


void Settings::__set_notificationEnable(const bool val) {
  this->notificationEnable = val;
}

void Settings::__set_notificationMuteExpiration(const int64_t val) {
  this->notificationMuteExpiration = val;
}

void Settings::__set_notificationNewMessage(const bool val) {
  this->notificationNewMessage = val;
}

void Settings::__set_notificationGroupInvitation(const bool val) {
  this->notificationGroupInvitation = val;
}

void Settings::__set_notificationShowMessage(const bool val) {
  this->notificationShowMessage = val;
}

void Settings::__set_notificationIncomingCall(const bool val) {
  this->notificationIncomingCall = val;
}

void Settings::__set_notificationSoundMessage(const std::string& val) {
  this->notificationSoundMessage = val;
}

void Settings::__set_notificationSoundGroup(const std::string& val) {
  this->notificationSoundGroup = val;
}

void Settings::__set_notificationDisabledWithSub(const bool val) {
  this->notificationDisabledWithSub = val;
}

void Settings::__set_privacySyncContacts(const bool val) {
  this->privacySyncContacts = val;
}

void Settings::__set_privacySearchByPhoneNumber(const bool val) {
  this->privacySearchByPhoneNumber = val;
}

void Settings::__set_privacySearchByUserid(const bool val) {
  this->privacySearchByUserid = val;
}

void Settings::__set_privacySearchByEmail(const bool val) {
  this->privacySearchByEmail = val;
}

void Settings::__set_privacyAllowSecondaryDeviceLogin(const bool val) {
  this->privacyAllowSecondaryDeviceLogin = val;
}

void Settings::__set_privacyProfileImagePostToMyhome(const bool val) {
  this->privacyProfileImagePostToMyhome = val;
}

void Settings::__set_privacyReceiveMessagesFromNotFriend(const bool val) {
  this->privacyReceiveMessagesFromNotFriend = val;
}

void Settings::__set_contactMyTicket(const std::string& val) {
  this->contactMyTicket = val;
}

void Settings::__set_identityProvider(const IdentityProvider::type val) {
  this->identityProvider = val;
}

void Settings::__set_identityIdentifier(const std::string& val) {
  this->identityIdentifier = val;
}

void Settings::__set_snsAccounts(const std::map<SnsIdType::type, std::string> & val) {
  this->snsAccounts = val;
}

void Settings::__set_phoneRegistration(const bool val) {
  this->phoneRegistration = val;
}

void Settings::__set_emailConfirmationStatus(const EmailConfirmationStatus::type val) {
  this->emailConfirmationStatus = val;
}

void Settings::__set_preferenceLocale(const std::string& val) {
  this->preferenceLocale = val;
}

void Settings::__set_customModes(const std::map<CustomMode::type, std::string> & val) {
  this->customModes = val;
}

void Settings::__set_e2eeEnable(const bool val) {
  this->e2eeEnable = val;
}

void Settings::__set_hitokotoBackupRequested(const bool val) {
  this->hitokotoBackupRequested = val;
}

void Settings::__set_privacyProfileMusicPostToMyhome(const bool val) {
  this->privacyProfileMusicPostToMyhome = val;
}

void Settings::__set_privacyAllowNearby(const bool val) {
  this->privacyAllowNearby = val;
}

void Settings::__set_agreementNearbyTime(const int64_t val) {
  this->agreementNearbyTime = val;
}

void Settings::__set_agreementSquareTime(const int64_t val) {
  this->agreementSquareTime = val;
}

void Settings::__set_notificationMention(const bool val) {
  this->notificationMention = val;
}

void Settings::__set_botUseAgreementAcceptedAt(const int64_t val) {
  this->botUseAgreementAcceptedAt = val;
}
std::ostream& operator<<(std::ostream& out, const Settings& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Settings::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->notificationEnable);
          this->__isset.notificationEnable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->notificationMuteExpiration);
          this->__isset.notificationMuteExpiration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->notificationNewMessage);
          this->__isset.notificationNewMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->notificationGroupInvitation);
          this->__isset.notificationGroupInvitation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->notificationShowMessage);
          this->__isset.notificationShowMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->notificationIncomingCall);
          this->__isset.notificationIncomingCall = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->notificationSoundMessage);
          this->__isset.notificationSoundMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->notificationSoundGroup);
          this->__isset.notificationSoundGroup = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->notificationDisabledWithSub);
          this->__isset.notificationDisabledWithSub = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->privacySyncContacts);
          this->__isset.privacySyncContacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->privacySearchByPhoneNumber);
          this->__isset.privacySearchByPhoneNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->privacySearchByUserid);
          this->__isset.privacySearchByUserid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->privacySearchByEmail);
          this->__isset.privacySearchByEmail = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->privacyAllowSecondaryDeviceLogin);
          this->__isset.privacyAllowSecondaryDeviceLogin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->privacyProfileImagePostToMyhome);
          this->__isset.privacyProfileImagePostToMyhome = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->privacyReceiveMessagesFromNotFriend);
          this->__isset.privacyReceiveMessagesFromNotFriend = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->contactMyTicket);
          this->__isset.contactMyTicket = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast994;
          xfer += iprot->readI32(ecast994);
          this->identityProvider = (IdentityProvider::type)ecast994;
          this->__isset.identityProvider = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->identityIdentifier);
          this->__isset.identityIdentifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->snsAccounts.clear();
            uint32_t _size995;
            ::apache::thrift::protocol::TType _ktype996;
            ::apache::thrift::protocol::TType _vtype997;
            xfer += iprot->readMapBegin(_ktype996, _vtype997, _size995);
            uint32_t _i999;
            for (_i999 = 0; _i999 < _size995; ++_i999)
            {
              SnsIdType::type _key1000;
              int32_t ecast1002;
              xfer += iprot->readI32(ecast1002);
              _key1000 = (SnsIdType::type)ecast1002;
              std::string& _val1001 = this->snsAccounts[_key1000];
              xfer += iprot->readString(_val1001);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.snsAccounts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 43:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->phoneRegistration);
          this->__isset.phoneRegistration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 44:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1003;
          xfer += iprot->readI32(ecast1003);
          this->emailConfirmationStatus = (EmailConfirmationStatus::type)ecast1003;
          this->__isset.emailConfirmationStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->preferenceLocale);
          this->__isset.preferenceLocale = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 60:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->customModes.clear();
            uint32_t _size1004;
            ::apache::thrift::protocol::TType _ktype1005;
            ::apache::thrift::protocol::TType _vtype1006;
            xfer += iprot->readMapBegin(_ktype1005, _vtype1006, _size1004);
            uint32_t _i1008;
            for (_i1008 = 0; _i1008 < _size1004; ++_i1008)
            {
              CustomMode::type _key1009;
              int32_t ecast1011;
              xfer += iprot->readI32(ecast1011);
              _key1009 = (CustomMode::type)ecast1011;
              std::string& _val1010 = this->customModes[_key1009];
              xfer += iprot->readString(_val1010);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.customModes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 61:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->e2eeEnable);
          this->__isset.e2eeEnable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 62:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hitokotoBackupRequested);
          this->__isset.hitokotoBackupRequested = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 63:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->privacyProfileMusicPostToMyhome);
          this->__isset.privacyProfileMusicPostToMyhome = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 65:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->privacyAllowNearby);
          this->__isset.privacyAllowNearby = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 66:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->agreementNearbyTime);
          this->__isset.agreementNearbyTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 67:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->agreementSquareTime);
          this->__isset.agreementSquareTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 68:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->notificationMention);
          this->__isset.notificationMention = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 69:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->botUseAgreementAcceptedAt);
          this->__isset.botUseAgreementAcceptedAt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Settings::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Settings");

  xfer += oprot->writeFieldBegin("notificationEnable", ::apache::thrift::protocol::T_BOOL, 10);
  xfer += oprot->writeBool(this->notificationEnable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notificationMuteExpiration", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->notificationMuteExpiration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notificationNewMessage", ::apache::thrift::protocol::T_BOOL, 12);
  xfer += oprot->writeBool(this->notificationNewMessage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notificationGroupInvitation", ::apache::thrift::protocol::T_BOOL, 13);
  xfer += oprot->writeBool(this->notificationGroupInvitation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notificationShowMessage", ::apache::thrift::protocol::T_BOOL, 14);
  xfer += oprot->writeBool(this->notificationShowMessage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notificationIncomingCall", ::apache::thrift::protocol::T_BOOL, 15);
  xfer += oprot->writeBool(this->notificationIncomingCall);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notificationSoundMessage", ::apache::thrift::protocol::T_STRING, 16);
  xfer += oprot->writeString(this->notificationSoundMessage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notificationSoundGroup", ::apache::thrift::protocol::T_STRING, 17);
  xfer += oprot->writeString(this->notificationSoundGroup);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notificationDisabledWithSub", ::apache::thrift::protocol::T_BOOL, 18);
  xfer += oprot->writeBool(this->notificationDisabledWithSub);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("privacySyncContacts", ::apache::thrift::protocol::T_BOOL, 20);
  xfer += oprot->writeBool(this->privacySyncContacts);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("privacySearchByPhoneNumber", ::apache::thrift::protocol::T_BOOL, 21);
  xfer += oprot->writeBool(this->privacySearchByPhoneNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("privacySearchByUserid", ::apache::thrift::protocol::T_BOOL, 22);
  xfer += oprot->writeBool(this->privacySearchByUserid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("privacySearchByEmail", ::apache::thrift::protocol::T_BOOL, 23);
  xfer += oprot->writeBool(this->privacySearchByEmail);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("privacyAllowSecondaryDeviceLogin", ::apache::thrift::protocol::T_BOOL, 24);
  xfer += oprot->writeBool(this->privacyAllowSecondaryDeviceLogin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("privacyProfileImagePostToMyhome", ::apache::thrift::protocol::T_BOOL, 25);
  xfer += oprot->writeBool(this->privacyProfileImagePostToMyhome);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("privacyReceiveMessagesFromNotFriend", ::apache::thrift::protocol::T_BOOL, 26);
  xfer += oprot->writeBool(this->privacyReceiveMessagesFromNotFriend);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contactMyTicket", ::apache::thrift::protocol::T_STRING, 30);
  xfer += oprot->writeString(this->contactMyTicket);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("identityProvider", ::apache::thrift::protocol::T_I32, 40);
  xfer += oprot->writeI32((int32_t)this->identityProvider);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("identityIdentifier", ::apache::thrift::protocol::T_STRING, 41);
  xfer += oprot->writeString(this->identityIdentifier);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("snsAccounts", ::apache::thrift::protocol::T_MAP, 42);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->snsAccounts.size()));
    std::map<SnsIdType::type, std::string> ::const_iterator _iter1012;
    for (_iter1012 = this->snsAccounts.begin(); _iter1012 != this->snsAccounts.end(); ++_iter1012)
    {
      xfer += oprot->writeI32((int32_t)_iter1012->first);
      xfer += oprot->writeString(_iter1012->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phoneRegistration", ::apache::thrift::protocol::T_BOOL, 43);
  xfer += oprot->writeBool(this->phoneRegistration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("emailConfirmationStatus", ::apache::thrift::protocol::T_I32, 44);
  xfer += oprot->writeI32((int32_t)this->emailConfirmationStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("preferenceLocale", ::apache::thrift::protocol::T_STRING, 50);
  xfer += oprot->writeString(this->preferenceLocale);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("customModes", ::apache::thrift::protocol::T_MAP, 60);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->customModes.size()));
    std::map<CustomMode::type, std::string> ::const_iterator _iter1013;
    for (_iter1013 = this->customModes.begin(); _iter1013 != this->customModes.end(); ++_iter1013)
    {
      xfer += oprot->writeI32((int32_t)_iter1013->first);
      xfer += oprot->writeString(_iter1013->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("e2eeEnable", ::apache::thrift::protocol::T_BOOL, 61);
  xfer += oprot->writeBool(this->e2eeEnable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hitokotoBackupRequested", ::apache::thrift::protocol::T_BOOL, 62);
  xfer += oprot->writeBool(this->hitokotoBackupRequested);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("privacyProfileMusicPostToMyhome", ::apache::thrift::protocol::T_BOOL, 63);
  xfer += oprot->writeBool(this->privacyProfileMusicPostToMyhome);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("privacyAllowNearby", ::apache::thrift::protocol::T_BOOL, 65);
  xfer += oprot->writeBool(this->privacyAllowNearby);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("agreementNearbyTime", ::apache::thrift::protocol::T_I64, 66);
  xfer += oprot->writeI64(this->agreementNearbyTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("agreementSquareTime", ::apache::thrift::protocol::T_I64, 67);
  xfer += oprot->writeI64(this->agreementSquareTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notificationMention", ::apache::thrift::protocol::T_BOOL, 68);
  xfer += oprot->writeBool(this->notificationMention);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("botUseAgreementAcceptedAt", ::apache::thrift::protocol::T_I64, 69);
  xfer += oprot->writeI64(this->botUseAgreementAcceptedAt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Settings &a, Settings &b) {
  using ::std::swap;
  swap(a.notificationEnable, b.notificationEnable);
  swap(a.notificationMuteExpiration, b.notificationMuteExpiration);
  swap(a.notificationNewMessage, b.notificationNewMessage);
  swap(a.notificationGroupInvitation, b.notificationGroupInvitation);
  swap(a.notificationShowMessage, b.notificationShowMessage);
  swap(a.notificationIncomingCall, b.notificationIncomingCall);
  swap(a.notificationSoundMessage, b.notificationSoundMessage);
  swap(a.notificationSoundGroup, b.notificationSoundGroup);
  swap(a.notificationDisabledWithSub, b.notificationDisabledWithSub);
  swap(a.privacySyncContacts, b.privacySyncContacts);
  swap(a.privacySearchByPhoneNumber, b.privacySearchByPhoneNumber);
  swap(a.privacySearchByUserid, b.privacySearchByUserid);
  swap(a.privacySearchByEmail, b.privacySearchByEmail);
  swap(a.privacyAllowSecondaryDeviceLogin, b.privacyAllowSecondaryDeviceLogin);
  swap(a.privacyProfileImagePostToMyhome, b.privacyProfileImagePostToMyhome);
  swap(a.privacyReceiveMessagesFromNotFriend, b.privacyReceiveMessagesFromNotFriend);
  swap(a.contactMyTicket, b.contactMyTicket);
  swap(a.identityProvider, b.identityProvider);
  swap(a.identityIdentifier, b.identityIdentifier);
  swap(a.snsAccounts, b.snsAccounts);
  swap(a.phoneRegistration, b.phoneRegistration);
  swap(a.emailConfirmationStatus, b.emailConfirmationStatus);
  swap(a.preferenceLocale, b.preferenceLocale);
  swap(a.customModes, b.customModes);
  swap(a.e2eeEnable, b.e2eeEnable);
  swap(a.hitokotoBackupRequested, b.hitokotoBackupRequested);
  swap(a.privacyProfileMusicPostToMyhome, b.privacyProfileMusicPostToMyhome);
  swap(a.privacyAllowNearby, b.privacyAllowNearby);
  swap(a.agreementNearbyTime, b.agreementNearbyTime);
  swap(a.agreementSquareTime, b.agreementSquareTime);
  swap(a.notificationMention, b.notificationMention);
  swap(a.botUseAgreementAcceptedAt, b.botUseAgreementAcceptedAt);
  swap(a.__isset, b.__isset);
}

Settings::Settings(const Settings& other1014) {
  notificationEnable = other1014.notificationEnable;
  notificationMuteExpiration = other1014.notificationMuteExpiration;
  notificationNewMessage = other1014.notificationNewMessage;
  notificationGroupInvitation = other1014.notificationGroupInvitation;
  notificationShowMessage = other1014.notificationShowMessage;
  notificationIncomingCall = other1014.notificationIncomingCall;
  notificationSoundMessage = other1014.notificationSoundMessage;
  notificationSoundGroup = other1014.notificationSoundGroup;
  notificationDisabledWithSub = other1014.notificationDisabledWithSub;
  privacySyncContacts = other1014.privacySyncContacts;
  privacySearchByPhoneNumber = other1014.privacySearchByPhoneNumber;
  privacySearchByUserid = other1014.privacySearchByUserid;
  privacySearchByEmail = other1014.privacySearchByEmail;
  privacyAllowSecondaryDeviceLogin = other1014.privacyAllowSecondaryDeviceLogin;
  privacyProfileImagePostToMyhome = other1014.privacyProfileImagePostToMyhome;
  privacyReceiveMessagesFromNotFriend = other1014.privacyReceiveMessagesFromNotFriend;
  contactMyTicket = other1014.contactMyTicket;
  identityProvider = other1014.identityProvider;
  identityIdentifier = other1014.identityIdentifier;
  snsAccounts = other1014.snsAccounts;
  phoneRegistration = other1014.phoneRegistration;
  emailConfirmationStatus = other1014.emailConfirmationStatus;
  preferenceLocale = other1014.preferenceLocale;
  customModes = other1014.customModes;
  e2eeEnable = other1014.e2eeEnable;
  hitokotoBackupRequested = other1014.hitokotoBackupRequested;
  privacyProfileMusicPostToMyhome = other1014.privacyProfileMusicPostToMyhome;
  privacyAllowNearby = other1014.privacyAllowNearby;
  agreementNearbyTime = other1014.agreementNearbyTime;
  agreementSquareTime = other1014.agreementSquareTime;
  notificationMention = other1014.notificationMention;
  botUseAgreementAcceptedAt = other1014.botUseAgreementAcceptedAt;
  __isset = other1014.__isset;
}
Settings& Settings::operator=(const Settings& other1015) {
  notificationEnable = other1015.notificationEnable;
  notificationMuteExpiration = other1015.notificationMuteExpiration;
  notificationNewMessage = other1015.notificationNewMessage;
  notificationGroupInvitation = other1015.notificationGroupInvitation;
  notificationShowMessage = other1015.notificationShowMessage;
  notificationIncomingCall = other1015.notificationIncomingCall;
  notificationSoundMessage = other1015.notificationSoundMessage;
  notificationSoundGroup = other1015.notificationSoundGroup;
  notificationDisabledWithSub = other1015.notificationDisabledWithSub;
  privacySyncContacts = other1015.privacySyncContacts;
  privacySearchByPhoneNumber = other1015.privacySearchByPhoneNumber;
  privacySearchByUserid = other1015.privacySearchByUserid;
  privacySearchByEmail = other1015.privacySearchByEmail;
  privacyAllowSecondaryDeviceLogin = other1015.privacyAllowSecondaryDeviceLogin;
  privacyProfileImagePostToMyhome = other1015.privacyProfileImagePostToMyhome;
  privacyReceiveMessagesFromNotFriend = other1015.privacyReceiveMessagesFromNotFriend;
  contactMyTicket = other1015.contactMyTicket;
  identityProvider = other1015.identityProvider;
  identityIdentifier = other1015.identityIdentifier;
  snsAccounts = other1015.snsAccounts;
  phoneRegistration = other1015.phoneRegistration;
  emailConfirmationStatus = other1015.emailConfirmationStatus;
  preferenceLocale = other1015.preferenceLocale;
  customModes = other1015.customModes;
  e2eeEnable = other1015.e2eeEnable;
  hitokotoBackupRequested = other1015.hitokotoBackupRequested;
  privacyProfileMusicPostToMyhome = other1015.privacyProfileMusicPostToMyhome;
  privacyAllowNearby = other1015.privacyAllowNearby;
  agreementNearbyTime = other1015.agreementNearbyTime;
  agreementSquareTime = other1015.agreementSquareTime;
  notificationMention = other1015.notificationMention;
  botUseAgreementAcceptedAt = other1015.botUseAgreementAcceptedAt;
  __isset = other1015.__isset;
  return *this;
}
void Settings::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Settings(";
  out << "notificationEnable=" << to_string(notificationEnable);
  out << ", " << "notificationMuteExpiration=" << to_string(notificationMuteExpiration);
  out << ", " << "notificationNewMessage=" << to_string(notificationNewMessage);
  out << ", " << "notificationGroupInvitation=" << to_string(notificationGroupInvitation);
  out << ", " << "notificationShowMessage=" << to_string(notificationShowMessage);
  out << ", " << "notificationIncomingCall=" << to_string(notificationIncomingCall);
  out << ", " << "notificationSoundMessage=" << to_string(notificationSoundMessage);
  out << ", " << "notificationSoundGroup=" << to_string(notificationSoundGroup);
  out << ", " << "notificationDisabledWithSub=" << to_string(notificationDisabledWithSub);
  out << ", " << "privacySyncContacts=" << to_string(privacySyncContacts);
  out << ", " << "privacySearchByPhoneNumber=" << to_string(privacySearchByPhoneNumber);
  out << ", " << "privacySearchByUserid=" << to_string(privacySearchByUserid);
  out << ", " << "privacySearchByEmail=" << to_string(privacySearchByEmail);
  out << ", " << "privacyAllowSecondaryDeviceLogin=" << to_string(privacyAllowSecondaryDeviceLogin);
  out << ", " << "privacyProfileImagePostToMyhome=" << to_string(privacyProfileImagePostToMyhome);
  out << ", " << "privacyReceiveMessagesFromNotFriend=" << to_string(privacyReceiveMessagesFromNotFriend);
  out << ", " << "contactMyTicket=" << to_string(contactMyTicket);
  out << ", " << "identityProvider=" << to_string(identityProvider);
  out << ", " << "identityIdentifier=" << to_string(identityIdentifier);
  out << ", " << "snsAccounts=" << to_string(snsAccounts);
  out << ", " << "phoneRegistration=" << to_string(phoneRegistration);
  out << ", " << "emailConfirmationStatus=" << to_string(emailConfirmationStatus);
  out << ", " << "preferenceLocale=" << to_string(preferenceLocale);
  out << ", " << "customModes=" << to_string(customModes);
  out << ", " << "e2eeEnable=" << to_string(e2eeEnable);
  out << ", " << "hitokotoBackupRequested=" << to_string(hitokotoBackupRequested);
  out << ", " << "privacyProfileMusicPostToMyhome=" << to_string(privacyProfileMusicPostToMyhome);
  out << ", " << "privacyAllowNearby=" << to_string(privacyAllowNearby);
  out << ", " << "agreementNearbyTime=" << to_string(agreementNearbyTime);
  out << ", " << "agreementSquareTime=" << to_string(agreementSquareTime);
  out << ", " << "notificationMention=" << to_string(notificationMention);
  out << ", " << "botUseAgreementAcceptedAt=" << to_string(botUseAgreementAcceptedAt);
  out << ")";
}


SimpleChannelClient::~SimpleChannelClient() throw() {
}


void SimpleChannelClient::__set_applicationType(const std::string& val) {
  this->applicationType = val;
}

void SimpleChannelClient::__set_applicationVersion(const std::string& val) {
  this->applicationVersion = val;
}

void SimpleChannelClient::__set_locale(const std::string& val) {
  this->locale = val;
}
std::ostream& operator<<(std::ostream& out, const SimpleChannelClient& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SimpleChannelClient::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationType);
          this->__isset.applicationType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->applicationVersion);
          this->__isset.applicationVersion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->locale);
          this->__isset.locale = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SimpleChannelClient::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SimpleChannelClient");

  xfer += oprot->writeFieldBegin("applicationType", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->applicationType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("applicationVersion", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->applicationVersion);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("locale", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->locale);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SimpleChannelClient &a, SimpleChannelClient &b) {
  using ::std::swap;
  swap(a.applicationType, b.applicationType);
  swap(a.applicationVersion, b.applicationVersion);
  swap(a.locale, b.locale);
  swap(a.__isset, b.__isset);
}

SimpleChannelClient::SimpleChannelClient(const SimpleChannelClient& other1016) {
  applicationType = other1016.applicationType;
  applicationVersion = other1016.applicationVersion;
  locale = other1016.locale;
  __isset = other1016.__isset;
}
SimpleChannelClient& SimpleChannelClient::operator=(const SimpleChannelClient& other1017) {
  applicationType = other1017.applicationType;
  applicationVersion = other1017.applicationVersion;
  locale = other1017.locale;
  __isset = other1017.__isset;
  return *this;
}
void SimpleChannelClient::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SimpleChannelClient(";
  out << "applicationType=" << to_string(applicationType);
  out << ", " << "applicationVersion=" << to_string(applicationVersion);
  out << ", " << "locale=" << to_string(locale);
  out << ")";
}


SimpleChannelContact::~SimpleChannelContact() throw() {
}


void SimpleChannelContact::__set_mid(const std::string& val) {
  this->mid = val;
}

void SimpleChannelContact::__set_displayName(const std::string& val) {
  this->displayName = val;
}

void SimpleChannelContact::__set_pictureStatus(const std::string& val) {
  this->pictureStatus = val;
}

void SimpleChannelContact::__set_picturePath(const std::string& val) {
  this->picturePath = val;
}

void SimpleChannelContact::__set_statusMessage(const std::string& val) {
  this->statusMessage = val;
}
std::ostream& operator<<(std::ostream& out, const SimpleChannelContact& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SimpleChannelContact::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mid);
          this->__isset.mid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->displayName);
          this->__isset.displayName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pictureStatus);
          this->__isset.pictureStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->picturePath);
          this->__isset.picturePath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->statusMessage);
          this->__isset.statusMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SimpleChannelContact::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SimpleChannelContact");

  xfer += oprot->writeFieldBegin("mid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->mid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->displayName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pictureStatus", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->pictureStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("picturePath", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->picturePath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("statusMessage", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->statusMessage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SimpleChannelContact &a, SimpleChannelContact &b) {
  using ::std::swap;
  swap(a.mid, b.mid);
  swap(a.displayName, b.displayName);
  swap(a.pictureStatus, b.pictureStatus);
  swap(a.picturePath, b.picturePath);
  swap(a.statusMessage, b.statusMessage);
  swap(a.__isset, b.__isset);
}

SimpleChannelContact::SimpleChannelContact(const SimpleChannelContact& other1018) {
  mid = other1018.mid;
  displayName = other1018.displayName;
  pictureStatus = other1018.pictureStatus;
  picturePath = other1018.picturePath;
  statusMessage = other1018.statusMessage;
  __isset = other1018.__isset;
}
SimpleChannelContact& SimpleChannelContact::operator=(const SimpleChannelContact& other1019) {
  mid = other1019.mid;
  displayName = other1019.displayName;
  pictureStatus = other1019.pictureStatus;
  picturePath = other1019.picturePath;
  statusMessage = other1019.statusMessage;
  __isset = other1019.__isset;
  return *this;
}
void SimpleChannelContact::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SimpleChannelContact(";
  out << "mid=" << to_string(mid);
  out << ", " << "displayName=" << to_string(displayName);
  out << ", " << "pictureStatus=" << to_string(pictureStatus);
  out << ", " << "picturePath=" << to_string(picturePath);
  out << ", " << "statusMessage=" << to_string(statusMessage);
  out << ")";
}


SnsFriend::~SnsFriend() throw() {
}


void SnsFriend::__set_snsUserId(const std::string& val) {
  this->snsUserId = val;
}

void SnsFriend::__set_snsUserName(const std::string& val) {
  this->snsUserName = val;
}

void SnsFriend::__set_snsIdType(const SnsIdType::type val) {
  this->snsIdType = val;
}
std::ostream& operator<<(std::ostream& out, const SnsFriend& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SnsFriend::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->snsUserId);
          this->__isset.snsUserId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->snsUserName);
          this->__isset.snsUserName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1020;
          xfer += iprot->readI32(ecast1020);
          this->snsIdType = (SnsIdType::type)ecast1020;
          this->__isset.snsIdType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SnsFriend::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SnsFriend");

  xfer += oprot->writeFieldBegin("snsUserId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->snsUserId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("snsUserName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->snsUserName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("snsIdType", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->snsIdType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SnsFriend &a, SnsFriend &b) {
  using ::std::swap;
  swap(a.snsUserId, b.snsUserId);
  swap(a.snsUserName, b.snsUserName);
  swap(a.snsIdType, b.snsIdType);
  swap(a.__isset, b.__isset);
}

SnsFriend::SnsFriend(const SnsFriend& other1021) {
  snsUserId = other1021.snsUserId;
  snsUserName = other1021.snsUserName;
  snsIdType = other1021.snsIdType;
  __isset = other1021.__isset;
}
SnsFriend& SnsFriend::operator=(const SnsFriend& other1022) {
  snsUserId = other1022.snsUserId;
  snsUserName = other1022.snsUserName;
  snsIdType = other1022.snsIdType;
  __isset = other1022.__isset;
  return *this;
}
void SnsFriend::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SnsFriend(";
  out << "snsUserId=" << to_string(snsUserId);
  out << ", " << "snsUserName=" << to_string(snsUserName);
  out << ", " << "snsIdType=" << to_string(snsIdType);
  out << ")";
}


SnsFriendContactRegistration::~SnsFriendContactRegistration() throw() {
}


void SnsFriendContactRegistration::__set_contact(const Contact& val) {
  this->contact = val;
}

void SnsFriendContactRegistration::__set_snsIdType(const SnsIdType::type val) {
  this->snsIdType = val;
}

void SnsFriendContactRegistration::__set_snsUserId(const std::string& val) {
  this->snsUserId = val;
}
std::ostream& operator<<(std::ostream& out, const SnsFriendContactRegistration& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SnsFriendContactRegistration::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->contact.read(iprot);
          this->__isset.contact = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1023;
          xfer += iprot->readI32(ecast1023);
          this->snsIdType = (SnsIdType::type)ecast1023;
          this->__isset.snsIdType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->snsUserId);
          this->__isset.snsUserId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SnsFriendContactRegistration::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SnsFriendContactRegistration");

  xfer += oprot->writeFieldBegin("contact", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->contact.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("snsIdType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->snsIdType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("snsUserId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->snsUserId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SnsFriendContactRegistration &a, SnsFriendContactRegistration &b) {
  using ::std::swap;
  swap(a.contact, b.contact);
  swap(a.snsIdType, b.snsIdType);
  swap(a.snsUserId, b.snsUserId);
  swap(a.__isset, b.__isset);
}

SnsFriendContactRegistration::SnsFriendContactRegistration(const SnsFriendContactRegistration& other1024) {
  contact = other1024.contact;
  snsIdType = other1024.snsIdType;
  snsUserId = other1024.snsUserId;
  __isset = other1024.__isset;
}
SnsFriendContactRegistration& SnsFriendContactRegistration::operator=(const SnsFriendContactRegistration& other1025) {
  contact = other1025.contact;
  snsIdType = other1025.snsIdType;
  snsUserId = other1025.snsUserId;
  __isset = other1025.__isset;
  return *this;
}
void SnsFriendContactRegistration::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SnsFriendContactRegistration(";
  out << "contact=" << to_string(contact);
  out << ", " << "snsIdType=" << to_string(snsIdType);
  out << ", " << "snsUserId=" << to_string(snsUserId);
  out << ")";
}


SnsFriendModification::~SnsFriendModification() throw() {
}


void SnsFriendModification::__set_type(const ModificationType::type val) {
  this->type = val;
}

void SnsFriendModification::__set_snsFriend(const SnsFriend& val) {
  this->snsFriend = val;
}
std::ostream& operator<<(std::ostream& out, const SnsFriendModification& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SnsFriendModification::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1026;
          xfer += iprot->readI32(ecast1026);
          this->type = (ModificationType::type)ecast1026;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->snsFriend.read(iprot);
          this->__isset.snsFriend = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SnsFriendModification::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SnsFriendModification");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("snsFriend", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->snsFriend.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SnsFriendModification &a, SnsFriendModification &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.snsFriend, b.snsFriend);
  swap(a.__isset, b.__isset);
}

SnsFriendModification::SnsFriendModification(const SnsFriendModification& other1027) {
  type = other1027.type;
  snsFriend = other1027.snsFriend;
  __isset = other1027.__isset;
}
SnsFriendModification& SnsFriendModification::operator=(const SnsFriendModification& other1028) {
  type = other1028.type;
  snsFriend = other1028.snsFriend;
  __isset = other1028.__isset;
  return *this;
}
void SnsFriendModification::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SnsFriendModification(";
  out << "type=" << to_string(type);
  out << ", " << "snsFriend=" << to_string(snsFriend);
  out << ")";
}


SnsFriends::~SnsFriends() throw() {
}


void SnsFriends::__set_snsFriends(const std::vector<SnsFriend> & val) {
  this->snsFriends = val;
}

void SnsFriends::__set_hasMore(const bool val) {
  this->hasMore = val;
}
std::ostream& operator<<(std::ostream& out, const SnsFriends& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SnsFriends::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->snsFriends.clear();
            uint32_t _size1029;
            ::apache::thrift::protocol::TType _etype1032;
            xfer += iprot->readListBegin(_etype1032, _size1029);
            this->snsFriends.resize(_size1029);
            uint32_t _i1033;
            for (_i1033 = 0; _i1033 < _size1029; ++_i1033)
            {
              xfer += this->snsFriends[_i1033].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.snsFriends = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasMore);
          this->__isset.hasMore = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SnsFriends::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SnsFriends");

  xfer += oprot->writeFieldBegin("snsFriends", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->snsFriends.size()));
    std::vector<SnsFriend> ::const_iterator _iter1034;
    for (_iter1034 = this->snsFriends.begin(); _iter1034 != this->snsFriends.end(); ++_iter1034)
    {
      xfer += (*_iter1034).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hasMore", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->hasMore);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SnsFriends &a, SnsFriends &b) {
  using ::std::swap;
  swap(a.snsFriends, b.snsFriends);
  swap(a.hasMore, b.hasMore);
  swap(a.__isset, b.__isset);
}

SnsFriends::SnsFriends(const SnsFriends& other1035) {
  snsFriends = other1035.snsFriends;
  hasMore = other1035.hasMore;
  __isset = other1035.__isset;
}
SnsFriends& SnsFriends::operator=(const SnsFriends& other1036) {
  snsFriends = other1036.snsFriends;
  hasMore = other1036.hasMore;
  __isset = other1036.__isset;
  return *this;
}
void SnsFriends::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SnsFriends(";
  out << "snsFriends=" << to_string(snsFriends);
  out << ", " << "hasMore=" << to_string(hasMore);
  out << ")";
}


SnsIdUserStatus::~SnsIdUserStatus() throw() {
}


void SnsIdUserStatus::__set_userExisting(const bool val) {
  this->userExisting = val;
}

void SnsIdUserStatus::__set_phoneNumberRegistered(const bool val) {
  this->phoneNumberRegistered = val;
}

void SnsIdUserStatus::__set_sameDevice(const bool val) {
  this->sameDevice = val;
}
std::ostream& operator<<(std::ostream& out, const SnsIdUserStatus& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SnsIdUserStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->userExisting);
          this->__isset.userExisting = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->phoneNumberRegistered);
          this->__isset.phoneNumberRegistered = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->sameDevice);
          this->__isset.sameDevice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SnsIdUserStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SnsIdUserStatus");

  xfer += oprot->writeFieldBegin("userExisting", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->userExisting);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phoneNumberRegistered", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->phoneNumberRegistered);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sameDevice", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->sameDevice);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SnsIdUserStatus &a, SnsIdUserStatus &b) {
  using ::std::swap;
  swap(a.userExisting, b.userExisting);
  swap(a.phoneNumberRegistered, b.phoneNumberRegistered);
  swap(a.sameDevice, b.sameDevice);
  swap(a.__isset, b.__isset);
}

SnsIdUserStatus::SnsIdUserStatus(const SnsIdUserStatus& other1037) {
  userExisting = other1037.userExisting;
  phoneNumberRegistered = other1037.phoneNumberRegistered;
  sameDevice = other1037.sameDevice;
  __isset = other1037.__isset;
}
SnsIdUserStatus& SnsIdUserStatus::operator=(const SnsIdUserStatus& other1038) {
  userExisting = other1038.userExisting;
  phoneNumberRegistered = other1038.phoneNumberRegistered;
  sameDevice = other1038.sameDevice;
  __isset = other1038.__isset;
  return *this;
}
void SnsIdUserStatus::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SnsIdUserStatus(";
  out << "userExisting=" << to_string(userExisting);
  out << ", " << "phoneNumberRegistered=" << to_string(phoneNumberRegistered);
  out << ", " << "sameDevice=" << to_string(sameDevice);
  out << ")";
}


SnsProfile::~SnsProfile() throw() {
}


void SnsProfile::__set_snsUserId(const std::string& val) {
  this->snsUserId = val;
}

void SnsProfile::__set_snsUserName(const std::string& val) {
  this->snsUserName = val;
}

void SnsProfile::__set_email(const std::string& val) {
  this->email = val;
}

void SnsProfile::__set_thumbnailUrl(const std::string& val) {
  this->thumbnailUrl = val;
}
std::ostream& operator<<(std::ostream& out, const SnsProfile& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SnsProfile::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->snsUserId);
          this->__isset.snsUserId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->snsUserName);
          this->__isset.snsUserName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->thumbnailUrl);
          this->__isset.thumbnailUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SnsProfile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SnsProfile");

  xfer += oprot->writeFieldBegin("snsUserId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->snsUserId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("snsUserName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->snsUserName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thumbnailUrl", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->thumbnailUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SnsProfile &a, SnsProfile &b) {
  using ::std::swap;
  swap(a.snsUserId, b.snsUserId);
  swap(a.snsUserName, b.snsUserName);
  swap(a.email, b.email);
  swap(a.thumbnailUrl, b.thumbnailUrl);
  swap(a.__isset, b.__isset);
}

SnsProfile::SnsProfile(const SnsProfile& other1039) {
  snsUserId = other1039.snsUserId;
  snsUserName = other1039.snsUserName;
  email = other1039.email;
  thumbnailUrl = other1039.thumbnailUrl;
  __isset = other1039.__isset;
}
SnsProfile& SnsProfile::operator=(const SnsProfile& other1040) {
  snsUserId = other1040.snsUserId;
  snsUserName = other1040.snsUserName;
  email = other1040.email;
  thumbnailUrl = other1040.thumbnailUrl;
  __isset = other1040.__isset;
  return *this;
}
void SnsProfile::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SnsProfile(";
  out << "snsUserId=" << to_string(snsUserId);
  out << ", " << "snsUserName=" << to_string(snsUserName);
  out << ", " << "email=" << to_string(email);
  out << ", " << "thumbnailUrl=" << to_string(thumbnailUrl);
  out << ")";
}


SystemConfiguration::~SystemConfiguration() throw() {
}


void SystemConfiguration::__set_endpoint(const std::string& val) {
  this->endpoint = val;
}

void SystemConfiguration::__set_endpointSsl(const std::string& val) {
  this->endpointSsl = val;
}

void SystemConfiguration::__set_updateUrl(const std::string& val) {
  this->updateUrl = val;
}

void SystemConfiguration::__set_c2dmAccount(const std::string& val) {
  this->c2dmAccount = val;
}

void SystemConfiguration::__set_nniServer(const std::string& val) {
  this->nniServer = val;
}
std::ostream& operator<<(std::ostream& out, const SystemConfiguration& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SystemConfiguration::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->endpoint);
          this->__isset.endpoint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->endpointSsl);
          this->__isset.endpointSsl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->updateUrl);
          this->__isset.updateUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->c2dmAccount);
          this->__isset.c2dmAccount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nniServer);
          this->__isset.nniServer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SystemConfiguration::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SystemConfiguration");

  xfer += oprot->writeFieldBegin("endpoint", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->endpoint);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endpointSsl", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->endpointSsl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("updateUrl", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->updateUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("c2dmAccount", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->c2dmAccount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nniServer", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->nniServer);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SystemConfiguration &a, SystemConfiguration &b) {
  using ::std::swap;
  swap(a.endpoint, b.endpoint);
  swap(a.endpointSsl, b.endpointSsl);
  swap(a.updateUrl, b.updateUrl);
  swap(a.c2dmAccount, b.c2dmAccount);
  swap(a.nniServer, b.nniServer);
  swap(a.__isset, b.__isset);
}

SystemConfiguration::SystemConfiguration(const SystemConfiguration& other1041) {
  endpoint = other1041.endpoint;
  endpointSsl = other1041.endpointSsl;
  updateUrl = other1041.updateUrl;
  c2dmAccount = other1041.c2dmAccount;
  nniServer = other1041.nniServer;
  __isset = other1041.__isset;
}
SystemConfiguration& SystemConfiguration::operator=(const SystemConfiguration& other1042) {
  endpoint = other1042.endpoint;
  endpointSsl = other1042.endpointSsl;
  updateUrl = other1042.updateUrl;
  c2dmAccount = other1042.c2dmAccount;
  nniServer = other1042.nniServer;
  __isset = other1042.__isset;
  return *this;
}
void SystemConfiguration::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SystemConfiguration(";
  out << "endpoint=" << to_string(endpoint);
  out << ", " << "endpointSsl=" << to_string(endpointSsl);
  out << ", " << "updateUrl=" << to_string(updateUrl);
  out << ", " << "c2dmAccount=" << to_string(c2dmAccount);
  out << ", " << "nniServer=" << to_string(nniServer);
  out << ")";
}


Ticket::~Ticket() throw() {
}


void Ticket::__set_id(const std::string& val) {
  this->id = val;
}

void Ticket::__set_expirationTime(const int64_t val) {
  this->expirationTime = val;
}

void Ticket::__set_maxUseCount(const int32_t val) {
  this->maxUseCount = val;
}
std::ostream& operator<<(std::ostream& out, const Ticket& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Ticket::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->expirationTime);
          this->__isset.expirationTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxUseCount);
          this->__isset.maxUseCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Ticket::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Ticket");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("expirationTime", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->expirationTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxUseCount", ::apache::thrift::protocol::T_I32, 21);
  xfer += oprot->writeI32(this->maxUseCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Ticket &a, Ticket &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.expirationTime, b.expirationTime);
  swap(a.maxUseCount, b.maxUseCount);
  swap(a.__isset, b.__isset);
}

Ticket::Ticket(const Ticket& other1043) {
  id = other1043.id;
  expirationTime = other1043.expirationTime;
  maxUseCount = other1043.maxUseCount;
  __isset = other1043.__isset;
}
Ticket& Ticket::operator=(const Ticket& other1044) {
  id = other1044.id;
  expirationTime = other1044.expirationTime;
  maxUseCount = other1044.maxUseCount;
  __isset = other1044.__isset;
  return *this;
}
void Ticket::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Ticket(";
  out << "id=" << to_string(id);
  out << ", " << "expirationTime=" << to_string(expirationTime);
  out << ", " << "maxUseCount=" << to_string(maxUseCount);
  out << ")";
}


TMessageBox::~TMessageBox() throw() {
}


void TMessageBox::__set_id(const std::string& val) {
  this->id = val;
}

void TMessageBox::__set_channelId(const std::string& val) {
  this->channelId = val;
}

void TMessageBox::__set_lastSeq(const int64_t val) {
  this->lastSeq = val;
}

void TMessageBox::__set_unreadCount(const int64_t val) {
  this->unreadCount = val;
}

void TMessageBox::__set_lastModifiedTime(const int64_t val) {
  this->lastModifiedTime = val;
}

void TMessageBox::__set_status(const int32_t val) {
  this->status = val;
}

void TMessageBox::__set_midType(const MIDType::type val) {
  this->midType = val;
}

void TMessageBox::__set_lastMessages(const std::vector<Message> & val) {
  this->lastMessages = val;
}
std::ostream& operator<<(std::ostream& out, const TMessageBox& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TMessageBox::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->channelId);
          this->__isset.channelId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastSeq);
          this->__isset.lastSeq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->unreadCount);
          this->__isset.unreadCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastModifiedTime);
          this->__isset.lastModifiedTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1045;
          xfer += iprot->readI32(ecast1045);
          this->midType = (MIDType::type)ecast1045;
          this->__isset.midType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->lastMessages.clear();
            uint32_t _size1046;
            ::apache::thrift::protocol::TType _etype1049;
            xfer += iprot->readListBegin(_etype1049, _size1046);
            this->lastMessages.resize(_size1046);
            uint32_t _i1050;
            for (_i1050 = 0; _i1050 < _size1046; ++_i1050)
            {
              xfer += this->lastMessages[_i1050].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.lastMessages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TMessageBox::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TMessageBox");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channelId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->channelId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastSeq", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->lastSeq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unreadCount", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->unreadCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastModifiedTime", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->lastModifiedTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("midType", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32((int32_t)this->midType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastMessages", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->lastMessages.size()));
    std::vector<Message> ::const_iterator _iter1051;
    for (_iter1051 = this->lastMessages.begin(); _iter1051 != this->lastMessages.end(); ++_iter1051)
    {
      xfer += (*_iter1051).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TMessageBox &a, TMessageBox &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.channelId, b.channelId);
  swap(a.lastSeq, b.lastSeq);
  swap(a.unreadCount, b.unreadCount);
  swap(a.lastModifiedTime, b.lastModifiedTime);
  swap(a.status, b.status);
  swap(a.midType, b.midType);
  swap(a.lastMessages, b.lastMessages);
  swap(a.__isset, b.__isset);
}

TMessageBox::TMessageBox(const TMessageBox& other1052) {
  id = other1052.id;
  channelId = other1052.channelId;
  lastSeq = other1052.lastSeq;
  unreadCount = other1052.unreadCount;
  lastModifiedTime = other1052.lastModifiedTime;
  status = other1052.status;
  midType = other1052.midType;
  lastMessages = other1052.lastMessages;
  __isset = other1052.__isset;
}
TMessageBox& TMessageBox::operator=(const TMessageBox& other1053) {
  id = other1053.id;
  channelId = other1053.channelId;
  lastSeq = other1053.lastSeq;
  unreadCount = other1053.unreadCount;
  lastModifiedTime = other1053.lastModifiedTime;
  status = other1053.status;
  midType = other1053.midType;
  lastMessages = other1053.lastMessages;
  __isset = other1053.__isset;
  return *this;
}
void TMessageBox::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TMessageBox(";
  out << "id=" << to_string(id);
  out << ", " << "channelId=" << to_string(channelId);
  out << ", " << "lastSeq=" << to_string(lastSeq);
  out << ", " << "unreadCount=" << to_string(unreadCount);
  out << ", " << "lastModifiedTime=" << to_string(lastModifiedTime);
  out << ", " << "status=" << to_string(status);
  out << ", " << "midType=" << to_string(midType);
  out << ", " << "lastMessages=" << to_string(lastMessages);
  out << ")";
}


TMessageBoxWrapUp::~TMessageBoxWrapUp() throw() {
}


void TMessageBoxWrapUp::__set_messageBox(const TMessageBox& val) {
  this->messageBox = val;
}

void TMessageBoxWrapUp::__set_name(const std::string& val) {
  this->name = val;
}

void TMessageBoxWrapUp::__set_contacts(const std::vector<Contact> & val) {
  this->contacts = val;
}

void TMessageBoxWrapUp::__set_pictureRevision(const std::string& val) {
  this->pictureRevision = val;
}
std::ostream& operator<<(std::ostream& out, const TMessageBoxWrapUp& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TMessageBoxWrapUp::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->messageBox.read(iprot);
          this->__isset.messageBox = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->contacts.clear();
            uint32_t _size1054;
            ::apache::thrift::protocol::TType _etype1057;
            xfer += iprot->readListBegin(_etype1057, _size1054);
            this->contacts.resize(_size1054);
            uint32_t _i1058;
            for (_i1058 = 0; _i1058 < _size1054; ++_i1058)
            {
              xfer += this->contacts[_i1058].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.contacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pictureRevision);
          this->__isset.pictureRevision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TMessageBoxWrapUp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TMessageBoxWrapUp");

  xfer += oprot->writeFieldBegin("messageBox", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->messageBox.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contacts", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->contacts.size()));
    std::vector<Contact> ::const_iterator _iter1059;
    for (_iter1059 = this->contacts.begin(); _iter1059 != this->contacts.end(); ++_iter1059)
    {
      xfer += (*_iter1059).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pictureRevision", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->pictureRevision);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TMessageBoxWrapUp &a, TMessageBoxWrapUp &b) {
  using ::std::swap;
  swap(a.messageBox, b.messageBox);
  swap(a.name, b.name);
  swap(a.contacts, b.contacts);
  swap(a.pictureRevision, b.pictureRevision);
  swap(a.__isset, b.__isset);
}

TMessageBoxWrapUp::TMessageBoxWrapUp(const TMessageBoxWrapUp& other1060) {
  messageBox = other1060.messageBox;
  name = other1060.name;
  contacts = other1060.contacts;
  pictureRevision = other1060.pictureRevision;
  __isset = other1060.__isset;
}
TMessageBoxWrapUp& TMessageBoxWrapUp::operator=(const TMessageBoxWrapUp& other1061) {
  messageBox = other1061.messageBox;
  name = other1061.name;
  contacts = other1061.contacts;
  pictureRevision = other1061.pictureRevision;
  __isset = other1061.__isset;
  return *this;
}
void TMessageBoxWrapUp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TMessageBoxWrapUp(";
  out << "messageBox=" << to_string(messageBox);
  out << ", " << "name=" << to_string(name);
  out << ", " << "contacts=" << to_string(contacts);
  out << ", " << "pictureRevision=" << to_string(pictureRevision);
  out << ")";
}


TMessageBoxWrapUpResponse::~TMessageBoxWrapUpResponse() throw() {
}


void TMessageBoxWrapUpResponse::__set_messageBoxWrapUpList(const std::vector<TMessageBoxWrapUp> & val) {
  this->messageBoxWrapUpList = val;
}

void TMessageBoxWrapUpResponse::__set_totalSize(const int32_t val) {
  this->totalSize = val;
}
std::ostream& operator<<(std::ostream& out, const TMessageBoxWrapUpResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TMessageBoxWrapUpResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->messageBoxWrapUpList.clear();
            uint32_t _size1062;
            ::apache::thrift::protocol::TType _etype1065;
            xfer += iprot->readListBegin(_etype1065, _size1062);
            this->messageBoxWrapUpList.resize(_size1062);
            uint32_t _i1066;
            for (_i1066 = 0; _i1066 < _size1062; ++_i1066)
            {
              xfer += this->messageBoxWrapUpList[_i1066].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.messageBoxWrapUpList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalSize);
          this->__isset.totalSize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TMessageBoxWrapUpResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TMessageBoxWrapUpResponse");

  xfer += oprot->writeFieldBegin("messageBoxWrapUpList", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->messageBoxWrapUpList.size()));
    std::vector<TMessageBoxWrapUp> ::const_iterator _iter1067;
    for (_iter1067 = this->messageBoxWrapUpList.begin(); _iter1067 != this->messageBoxWrapUpList.end(); ++_iter1067)
    {
      xfer += (*_iter1067).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalSize", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->totalSize);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TMessageBoxWrapUpResponse &a, TMessageBoxWrapUpResponse &b) {
  using ::std::swap;
  swap(a.messageBoxWrapUpList, b.messageBoxWrapUpList);
  swap(a.totalSize, b.totalSize);
  swap(a.__isset, b.__isset);
}

TMessageBoxWrapUpResponse::TMessageBoxWrapUpResponse(const TMessageBoxWrapUpResponse& other1068) {
  messageBoxWrapUpList = other1068.messageBoxWrapUpList;
  totalSize = other1068.totalSize;
  __isset = other1068.__isset;
}
TMessageBoxWrapUpResponse& TMessageBoxWrapUpResponse::operator=(const TMessageBoxWrapUpResponse& other1069) {
  messageBoxWrapUpList = other1069.messageBoxWrapUpList;
  totalSize = other1069.totalSize;
  __isset = other1069.__isset;
  return *this;
}
void TMessageBoxWrapUpResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TMessageBoxWrapUpResponse(";
  out << "messageBoxWrapUpList=" << to_string(messageBoxWrapUpList);
  out << ", " << "totalSize=" << to_string(totalSize);
  out << ")";
}


TMessageReadRangeEntry::~TMessageReadRangeEntry() throw() {
}


void TMessageReadRangeEntry::__set_startMessageId(const int64_t val) {
  this->startMessageId = val;
}

void TMessageReadRangeEntry::__set_endMessageId(const int64_t val) {
  this->endMessageId = val;
}

void TMessageReadRangeEntry::__set_startTime(const int64_t val) {
  this->startTime = val;
}

void TMessageReadRangeEntry::__set_endTime(const int64_t val) {
  this->endTime = val;
}
std::ostream& operator<<(std::ostream& out, const TMessageReadRangeEntry& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TMessageReadRangeEntry::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startMessageId);
          this->__isset.startMessageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->endMessageId);
          this->__isset.endMessageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startTime);
          this->__isset.startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->endTime);
          this->__isset.endTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TMessageReadRangeEntry::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TMessageReadRangeEntry");

  xfer += oprot->writeFieldBegin("startMessageId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->startMessageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endMessageId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->endMessageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->startTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endTime", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->endTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TMessageReadRangeEntry &a, TMessageReadRangeEntry &b) {
  using ::std::swap;
  swap(a.startMessageId, b.startMessageId);
  swap(a.endMessageId, b.endMessageId);
  swap(a.startTime, b.startTime);
  swap(a.endTime, b.endTime);
  swap(a.__isset, b.__isset);
}

TMessageReadRangeEntry::TMessageReadRangeEntry(const TMessageReadRangeEntry& other1070) {
  startMessageId = other1070.startMessageId;
  endMessageId = other1070.endMessageId;
  startTime = other1070.startTime;
  endTime = other1070.endTime;
  __isset = other1070.__isset;
}
TMessageReadRangeEntry& TMessageReadRangeEntry::operator=(const TMessageReadRangeEntry& other1071) {
  startMessageId = other1071.startMessageId;
  endMessageId = other1071.endMessageId;
  startTime = other1071.startTime;
  endTime = other1071.endTime;
  __isset = other1071.__isset;
  return *this;
}
void TMessageReadRangeEntry::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TMessageReadRangeEntry(";
  out << "startMessageId=" << to_string(startMessageId);
  out << ", " << "endMessageId=" << to_string(endMessageId);
  out << ", " << "startTime=" << to_string(startTime);
  out << ", " << "endTime=" << to_string(endTime);
  out << ")";
}


TMessageReadRange::~TMessageReadRange() throw() {
}


void TMessageReadRange::__set_chatId(const std::string& val) {
  this->chatId = val;
}

void TMessageReadRange::__set_ranges(const std::map<std::string, std::vector<TMessageReadRangeEntry> > & val) {
  this->ranges = val;
}
std::ostream& operator<<(std::ostream& out, const TMessageReadRange& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TMessageReadRange::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->chatId);
          this->__isset.chatId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->ranges.clear();
            uint32_t _size1072;
            ::apache::thrift::protocol::TType _ktype1073;
            ::apache::thrift::protocol::TType _vtype1074;
            xfer += iprot->readMapBegin(_ktype1073, _vtype1074, _size1072);
            uint32_t _i1076;
            for (_i1076 = 0; _i1076 < _size1072; ++_i1076)
            {
              std::string _key1077;
              xfer += iprot->readString(_key1077);
              std::vector<TMessageReadRangeEntry> & _val1078 = this->ranges[_key1077];
              {
                _val1078.clear();
                uint32_t _size1079;
                ::apache::thrift::protocol::TType _etype1082;
                xfer += iprot->readListBegin(_etype1082, _size1079);
                _val1078.resize(_size1079);
                uint32_t _i1083;
                for (_i1083 = 0; _i1083 < _size1079; ++_i1083)
                {
                  xfer += _val1078[_i1083].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.ranges = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TMessageReadRange::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TMessageReadRange");

  xfer += oprot->writeFieldBegin("chatId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->chatId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ranges", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->ranges.size()));
    std::map<std::string, std::vector<TMessageReadRangeEntry> > ::const_iterator _iter1084;
    for (_iter1084 = this->ranges.begin(); _iter1084 != this->ranges.end(); ++_iter1084)
    {
      xfer += oprot->writeString(_iter1084->first);
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter1084->second.size()));
        std::vector<TMessageReadRangeEntry> ::const_iterator _iter1085;
        for (_iter1085 = _iter1084->second.begin(); _iter1085 != _iter1084->second.end(); ++_iter1085)
        {
          xfer += (*_iter1085).write(oprot);
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TMessageReadRange &a, TMessageReadRange &b) {
  using ::std::swap;
  swap(a.chatId, b.chatId);
  swap(a.ranges, b.ranges);
  swap(a.__isset, b.__isset);
}

TMessageReadRange::TMessageReadRange(const TMessageReadRange& other1086) {
  chatId = other1086.chatId;
  ranges = other1086.ranges;
  __isset = other1086.__isset;
}
TMessageReadRange& TMessageReadRange::operator=(const TMessageReadRange& other1087) {
  chatId = other1087.chatId;
  ranges = other1087.ranges;
  __isset = other1087.__isset;
  return *this;
}
void TMessageReadRange::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TMessageReadRange(";
  out << "chatId=" << to_string(chatId);
  out << ", " << "ranges=" << to_string(ranges);
  out << ")";
}


ChatRoomAnnouncementContents::~ChatRoomAnnouncementContents() throw() {
}


void ChatRoomAnnouncementContents::__set_displayFields(const int32_t val) {
  this->displayFields = val;
}

void ChatRoomAnnouncementContents::__set_text(const std::string& val) {
  this->text = val;
}

void ChatRoomAnnouncementContents::__set_link(const std::string& val) {
  this->link = val;
}

void ChatRoomAnnouncementContents::__set_thumbnail(const std::string& val) {
  this->thumbnail = val;
}
std::ostream& operator<<(std::ostream& out, const ChatRoomAnnouncementContents& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ChatRoomAnnouncementContents::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->displayFields);
          this->__isset.displayFields = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->text);
          this->__isset.text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->link);
          this->__isset.link = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->thumbnail);
          this->__isset.thumbnail = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ChatRoomAnnouncementContents::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ChatRoomAnnouncementContents");

  xfer += oprot->writeFieldBegin("displayFields", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->displayFields);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("link", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->link);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thumbnail", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->thumbnail);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ChatRoomAnnouncementContents &a, ChatRoomAnnouncementContents &b) {
  using ::std::swap;
  swap(a.displayFields, b.displayFields);
  swap(a.text, b.text);
  swap(a.link, b.link);
  swap(a.thumbnail, b.thumbnail);
  swap(a.__isset, b.__isset);
}

ChatRoomAnnouncementContents::ChatRoomAnnouncementContents(const ChatRoomAnnouncementContents& other1088) {
  displayFields = other1088.displayFields;
  text = other1088.text;
  link = other1088.link;
  thumbnail = other1088.thumbnail;
  __isset = other1088.__isset;
}
ChatRoomAnnouncementContents& ChatRoomAnnouncementContents::operator=(const ChatRoomAnnouncementContents& other1089) {
  displayFields = other1089.displayFields;
  text = other1089.text;
  link = other1089.link;
  thumbnail = other1089.thumbnail;
  __isset = other1089.__isset;
  return *this;
}
void ChatRoomAnnouncementContents::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ChatRoomAnnouncementContents(";
  out << "displayFields=" << to_string(displayFields);
  out << ", " << "text=" << to_string(text);
  out << ", " << "link=" << to_string(link);
  out << ", " << "thumbnail=" << to_string(thumbnail);
  out << ")";
}


ChatRoomAnnouncement::~ChatRoomAnnouncement() throw() {
}


void ChatRoomAnnouncement::__set_announcementSeq(const int64_t val) {
  this->announcementSeq = val;
}

void ChatRoomAnnouncement::__set_type(const ChatRoomAnnouncementType::type val) {
  this->type = val;
}

void ChatRoomAnnouncement::__set_contents(const ChatRoomAnnouncementContents& val) {
  this->contents = val;
}

void ChatRoomAnnouncement::__set_creatorMid(const std::string& val) {
  this->creatorMid = val;
}

void ChatRoomAnnouncement::__set_createdTime(const int64_t val) {
  this->createdTime = val;
}
std::ostream& operator<<(std::ostream& out, const ChatRoomAnnouncement& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ChatRoomAnnouncement::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->announcementSeq);
          this->__isset.announcementSeq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1090;
          xfer += iprot->readI32(ecast1090);
          this->type = (ChatRoomAnnouncementType::type)ecast1090;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->contents.read(iprot);
          this->__isset.contents = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->creatorMid);
          this->__isset.creatorMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createdTime);
          this->__isset.createdTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ChatRoomAnnouncement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ChatRoomAnnouncement");

  xfer += oprot->writeFieldBegin("announcementSeq", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->announcementSeq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contents", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->contents.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("creatorMid", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->creatorMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createdTime", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->createdTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ChatRoomAnnouncement &a, ChatRoomAnnouncement &b) {
  using ::std::swap;
  swap(a.announcementSeq, b.announcementSeq);
  swap(a.type, b.type);
  swap(a.contents, b.contents);
  swap(a.creatorMid, b.creatorMid);
  swap(a.createdTime, b.createdTime);
  swap(a.__isset, b.__isset);
}

ChatRoomAnnouncement::ChatRoomAnnouncement(const ChatRoomAnnouncement& other1091) {
  announcementSeq = other1091.announcementSeq;
  type = other1091.type;
  contents = other1091.contents;
  creatorMid = other1091.creatorMid;
  createdTime = other1091.createdTime;
  __isset = other1091.__isset;
}
ChatRoomAnnouncement& ChatRoomAnnouncement::operator=(const ChatRoomAnnouncement& other1092) {
  announcementSeq = other1092.announcementSeq;
  type = other1092.type;
  contents = other1092.contents;
  creatorMid = other1092.creatorMid;
  createdTime = other1092.createdTime;
  __isset = other1092.__isset;
  return *this;
}
void ChatRoomAnnouncement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ChatRoomAnnouncement(";
  out << "announcementSeq=" << to_string(announcementSeq);
  out << ", " << "type=" << to_string(type);
  out << ", " << "contents=" << to_string(contents);
  out << ", " << "creatorMid=" << to_string(creatorMid);
  out << ", " << "createdTime=" << to_string(createdTime);
  out << ")";
}


ErrorExtraInfo::~ErrorExtraInfo() throw() {
}


void ErrorExtraInfo::__set_preconditionFailedExtraInfo(const PreconditionFailedExtraInfo::type val) {
  this->preconditionFailedExtraInfo = val;
}
std::ostream& operator<<(std::ostream& out, const ErrorExtraInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ErrorExtraInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1093;
          xfer += iprot->readI32(ecast1093);
          this->preconditionFailedExtraInfo = (PreconditionFailedExtraInfo::type)ecast1093;
          this->__isset.preconditionFailedExtraInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ErrorExtraInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ErrorExtraInfo");

  xfer += oprot->writeFieldBegin("preconditionFailedExtraInfo", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->preconditionFailedExtraInfo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ErrorExtraInfo &a, ErrorExtraInfo &b) {
  using ::std::swap;
  swap(a.preconditionFailedExtraInfo, b.preconditionFailedExtraInfo);
  swap(a.__isset, b.__isset);
}

ErrorExtraInfo::ErrorExtraInfo(const ErrorExtraInfo& other1094) {
  preconditionFailedExtraInfo = other1094.preconditionFailedExtraInfo;
  __isset = other1094.__isset;
}
ErrorExtraInfo& ErrorExtraInfo::operator=(const ErrorExtraInfo& other1095) {
  preconditionFailedExtraInfo = other1095.preconditionFailedExtraInfo;
  __isset = other1095.__isset;
  return *this;
}
void ErrorExtraInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ErrorExtraInfo(";
  out << "preconditionFailedExtraInfo=" << to_string(preconditionFailedExtraInfo);
  out << ")";
}


SyncRelations::~SyncRelations() throw() {
}


void SyncRelations::__set_syncAll(const bool val) {
  this->syncAll = val;
}

void SyncRelations::__set_syncParamContact(const std::vector<SyncParamContact> & val) {
  this->syncParamContact = val;
}

void SyncRelations::__set_syncParamMid(const std::vector<SyncParamMid> & val) {
  this->syncParamMid = val;
}
std::ostream& operator<<(std::ostream& out, const SyncRelations& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SyncRelations::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->syncAll);
          this->__isset.syncAll = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->syncParamContact.clear();
            uint32_t _size1096;
            ::apache::thrift::protocol::TType _etype1099;
            xfer += iprot->readListBegin(_etype1099, _size1096);
            this->syncParamContact.resize(_size1096);
            uint32_t _i1100;
            for (_i1100 = 0; _i1100 < _size1096; ++_i1100)
            {
              xfer += this->syncParamContact[_i1100].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.syncParamContact = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->syncParamMid.clear();
            uint32_t _size1101;
            ::apache::thrift::protocol::TType _etype1104;
            xfer += iprot->readListBegin(_etype1104, _size1101);
            this->syncParamMid.resize(_size1101);
            uint32_t _i1105;
            for (_i1105 = 0; _i1105 < _size1101; ++_i1105)
            {
              xfer += this->syncParamMid[_i1105].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.syncParamMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SyncRelations::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SyncRelations");

  xfer += oprot->writeFieldBegin("syncAll", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->syncAll);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("syncParamContact", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->syncParamContact.size()));
    std::vector<SyncParamContact> ::const_iterator _iter1106;
    for (_iter1106 = this->syncParamContact.begin(); _iter1106 != this->syncParamContact.end(); ++_iter1106)
    {
      xfer += (*_iter1106).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("syncParamMid", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->syncParamMid.size()));
    std::vector<SyncParamMid> ::const_iterator _iter1107;
    for (_iter1107 = this->syncParamMid.begin(); _iter1107 != this->syncParamMid.end(); ++_iter1107)
    {
      xfer += (*_iter1107).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SyncRelations &a, SyncRelations &b) {
  using ::std::swap;
  swap(a.syncAll, b.syncAll);
  swap(a.syncParamContact, b.syncParamContact);
  swap(a.syncParamMid, b.syncParamMid);
  swap(a.__isset, b.__isset);
}

SyncRelations::SyncRelations(const SyncRelations& other1108) {
  syncAll = other1108.syncAll;
  syncParamContact = other1108.syncParamContact;
  syncParamMid = other1108.syncParamMid;
  __isset = other1108.__isset;
}
SyncRelations& SyncRelations::operator=(const SyncRelations& other1109) {
  syncAll = other1109.syncAll;
  syncParamContact = other1109.syncParamContact;
  syncParamMid = other1109.syncParamMid;
  __isset = other1109.__isset;
  return *this;
}
void SyncRelations::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SyncRelations(";
  out << "syncAll=" << to_string(syncAll);
  out << ", " << "syncParamContact=" << to_string(syncParamContact);
  out << ", " << "syncParamMid=" << to_string(syncParamMid);
  out << ")";
}


SyncScope::~SyncScope() throw() {
}


void SyncScope::__set_syncProfile(const bool val) {
  this->syncProfile = val;
}

void SyncScope::__set_syncSettings(const bool val) {
  this->syncSettings = val;
}

void SyncScope::__set_syncSticker(const bool val) {
  this->syncSticker = val;
}

void SyncScope::__set_syncThemeShop(const bool val) {
  this->syncThemeShop = val;
}

void SyncScope::__set_contact(const SyncRelations& val) {
  this->contact = val;
}

void SyncScope::__set_group(const SyncRelations& val) {
  this->group = val;
}

void SyncScope::__set_room(const SyncRelations& val) {
  this->room = val;
}

void SyncScope::__set_chat(const SyncRelations& val) {
  this->chat = val;
}
std::ostream& operator<<(std::ostream& out, const SyncScope& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SyncScope::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->syncProfile);
          this->__isset.syncProfile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->syncSettings);
          this->__isset.syncSettings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->syncSticker);
          this->__isset.syncSticker = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->syncThemeShop);
          this->__isset.syncThemeShop = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->contact.read(iprot);
          this->__isset.contact = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->group.read(iprot);
          this->__isset.group = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->room.read(iprot);
          this->__isset.room = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->chat.read(iprot);
          this->__isset.chat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SyncScope::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SyncScope");

  xfer += oprot->writeFieldBegin("syncProfile", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->syncProfile);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("syncSettings", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->syncSettings);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("syncSticker", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->syncSticker);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("syncThemeShop", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->syncThemeShop);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contact", ::apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->contact.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("group", ::apache::thrift::protocol::T_STRUCT, 11);
  xfer += this->group.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("room", ::apache::thrift::protocol::T_STRUCT, 12);
  xfer += this->room.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chat", ::apache::thrift::protocol::T_STRUCT, 13);
  xfer += this->chat.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SyncScope &a, SyncScope &b) {
  using ::std::swap;
  swap(a.syncProfile, b.syncProfile);
  swap(a.syncSettings, b.syncSettings);
  swap(a.syncSticker, b.syncSticker);
  swap(a.syncThemeShop, b.syncThemeShop);
  swap(a.contact, b.contact);
  swap(a.group, b.group);
  swap(a.room, b.room);
  swap(a.chat, b.chat);
  swap(a.__isset, b.__isset);
}

SyncScope::SyncScope(const SyncScope& other1110) {
  syncProfile = other1110.syncProfile;
  syncSettings = other1110.syncSettings;
  syncSticker = other1110.syncSticker;
  syncThemeShop = other1110.syncThemeShop;
  contact = other1110.contact;
  group = other1110.group;
  room = other1110.room;
  chat = other1110.chat;
  __isset = other1110.__isset;
}
SyncScope& SyncScope::operator=(const SyncScope& other1111) {
  syncProfile = other1111.syncProfile;
  syncSettings = other1111.syncSettings;
  syncSticker = other1111.syncSticker;
  syncThemeShop = other1111.syncThemeShop;
  contact = other1111.contact;
  group = other1111.group;
  room = other1111.room;
  chat = other1111.chat;
  __isset = other1111.__isset;
  return *this;
}
void SyncScope::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SyncScope(";
  out << "syncProfile=" << to_string(syncProfile);
  out << ", " << "syncSettings=" << to_string(syncSettings);
  out << ", " << "syncSticker=" << to_string(syncSticker);
  out << ", " << "syncThemeShop=" << to_string(syncThemeShop);
  out << ", " << "contact=" << to_string(contact);
  out << ", " << "group=" << to_string(group);
  out << ", " << "room=" << to_string(room);
  out << ", " << "chat=" << to_string(chat);
  out << ")";
}


JoinSquareResponse::~JoinSquareResponse() throw() {
}


void JoinSquareResponse::__set_square(const Square& val) {
  this->square = val;
}

void JoinSquareResponse::__set_squareAuthority(const SquareAuthority& val) {
  this->squareAuthority = val;
}

void JoinSquareResponse::__set_squareStatus(const SquareStatus& val) {
  this->squareStatus = val;
}

void JoinSquareResponse::__set_squareMember(const SquareMember& val) {
  this->squareMember = val;
}

void JoinSquareResponse::__set_squareFeatureSet(const SquareFeatureSet& val) {
  this->squareFeatureSet = val;
}

void JoinSquareResponse::__set_noteStatus(const NoteStatus& val) {
  this->noteStatus = val;
}
std::ostream& operator<<(std::ostream& out, const JoinSquareResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t JoinSquareResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->square.read(iprot);
          this->__isset.square = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareAuthority.read(iprot);
          this->__isset.squareAuthority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareStatus.read(iprot);
          this->__isset.squareStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareMember.read(iprot);
          this->__isset.squareMember = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareFeatureSet.read(iprot);
          this->__isset.squareFeatureSet = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->noteStatus.read(iprot);
          this->__isset.noteStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t JoinSquareResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("JoinSquareResponse");

  xfer += oprot->writeFieldBegin("square", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->square.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareAuthority", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->squareAuthority.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareStatus", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->squareStatus.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareMember", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->squareMember.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareFeatureSet", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->squareFeatureSet.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("noteStatus", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->noteStatus.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(JoinSquareResponse &a, JoinSquareResponse &b) {
  using ::std::swap;
  swap(a.square, b.square);
  swap(a.squareAuthority, b.squareAuthority);
  swap(a.squareStatus, b.squareStatus);
  swap(a.squareMember, b.squareMember);
  swap(a.squareFeatureSet, b.squareFeatureSet);
  swap(a.noteStatus, b.noteStatus);
  swap(a.__isset, b.__isset);
}

JoinSquareResponse::JoinSquareResponse(const JoinSquareResponse& other1112) {
  square = other1112.square;
  squareAuthority = other1112.squareAuthority;
  squareStatus = other1112.squareStatus;
  squareMember = other1112.squareMember;
  squareFeatureSet = other1112.squareFeatureSet;
  noteStatus = other1112.noteStatus;
  __isset = other1112.__isset;
}
JoinSquareResponse& JoinSquareResponse::operator=(const JoinSquareResponse& other1113) {
  square = other1113.square;
  squareAuthority = other1113.squareAuthority;
  squareStatus = other1113.squareStatus;
  squareMember = other1113.squareMember;
  squareFeatureSet = other1113.squareFeatureSet;
  noteStatus = other1113.noteStatus;
  __isset = other1113.__isset;
  return *this;
}
void JoinSquareResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "JoinSquareResponse(";
  out << "square=" << to_string(square);
  out << ", " << "squareAuthority=" << to_string(squareAuthority);
  out << ", " << "squareStatus=" << to_string(squareStatus);
  out << ", " << "squareMember=" << to_string(squareMember);
  out << ", " << "squareFeatureSet=" << to_string(squareFeatureSet);
  out << ", " << "noteStatus=" << to_string(noteStatus);
  out << ")";
}


JoinSquareRequest::~JoinSquareRequest() throw() {
}


void JoinSquareRequest::__set_squareMid(const std::string& val) {
  this->squareMid = val;
}

void JoinSquareRequest::__set_member(const SquareMember& val) {
  this->member = val;
}
std::ostream& operator<<(std::ostream& out, const JoinSquareRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t JoinSquareRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMid);
          this->__isset.squareMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->member.read(iprot);
          this->__isset.member = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t JoinSquareRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("JoinSquareRequest");

  xfer += oprot->writeFieldBegin("squareMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("member", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->member.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(JoinSquareRequest &a, JoinSquareRequest &b) {
  using ::std::swap;
  swap(a.squareMid, b.squareMid);
  swap(a.member, b.member);
  swap(a.__isset, b.__isset);
}

JoinSquareRequest::JoinSquareRequest(const JoinSquareRequest& other1114) {
  squareMid = other1114.squareMid;
  member = other1114.member;
  __isset = other1114.__isset;
}
JoinSquareRequest& JoinSquareRequest::operator=(const JoinSquareRequest& other1115) {
  squareMid = other1115.squareMid;
  member = other1115.member;
  __isset = other1115.__isset;
  return *this;
}
void JoinSquareRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "JoinSquareRequest(";
  out << "squareMid=" << to_string(squareMid);
  out << ", " << "member=" << to_string(member);
  out << ")";
}


JoinSquareChatResponse::~JoinSquareChatResponse() throw() {
}


void JoinSquareChatResponse::__set_squareChat(const SquareChat& val) {
  this->squareChat = val;
}

void JoinSquareChatResponse::__set_squareChatStatus(const SquareChatStatus& val) {
  this->squareChatStatus = val;
}

void JoinSquareChatResponse::__set_squareChatMember(const SquareChatMember& val) {
  this->squareChatMember = val;
}
std::ostream& operator<<(std::ostream& out, const JoinSquareChatResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t JoinSquareChatResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareChat.read(iprot);
          this->__isset.squareChat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareChatStatus.read(iprot);
          this->__isset.squareChatStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareChatMember.read(iprot);
          this->__isset.squareChatMember = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t JoinSquareChatResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("JoinSquareChatResponse");

  xfer += oprot->writeFieldBegin("squareChat", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->squareChat.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareChatStatus", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->squareChatStatus.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareChatMember", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->squareChatMember.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(JoinSquareChatResponse &a, JoinSquareChatResponse &b) {
  using ::std::swap;
  swap(a.squareChat, b.squareChat);
  swap(a.squareChatStatus, b.squareChatStatus);
  swap(a.squareChatMember, b.squareChatMember);
  swap(a.__isset, b.__isset);
}

JoinSquareChatResponse::JoinSquareChatResponse(const JoinSquareChatResponse& other1116) {
  squareChat = other1116.squareChat;
  squareChatStatus = other1116.squareChatStatus;
  squareChatMember = other1116.squareChatMember;
  __isset = other1116.__isset;
}
JoinSquareChatResponse& JoinSquareChatResponse::operator=(const JoinSquareChatResponse& other1117) {
  squareChat = other1117.squareChat;
  squareChatStatus = other1117.squareChatStatus;
  squareChatMember = other1117.squareChatMember;
  __isset = other1117.__isset;
  return *this;
}
void JoinSquareChatResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "JoinSquareChatResponse(";
  out << "squareChat=" << to_string(squareChat);
  out << ", " << "squareChatStatus=" << to_string(squareChatStatus);
  out << ", " << "squareChatMember=" << to_string(squareChatMember);
  out << ")";
}


JoinSquareChatRequest::~JoinSquareChatRequest() throw() {
}


void JoinSquareChatRequest::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}
std::ostream& operator<<(std::ostream& out, const JoinSquareChatRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t JoinSquareChatRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t JoinSquareChatRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("JoinSquareChatRequest");

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(JoinSquareChatRequest &a, JoinSquareChatRequest &b) {
  using ::std::swap;
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.__isset, b.__isset);
}

JoinSquareChatRequest::JoinSquareChatRequest(const JoinSquareChatRequest& other1118) {
  squareChatMid = other1118.squareChatMid;
  __isset = other1118.__isset;
}
JoinSquareChatRequest& JoinSquareChatRequest::operator=(const JoinSquareChatRequest& other1119) {
  squareChatMid = other1119.squareChatMid;
  __isset = other1119.__isset;
  return *this;
}
void JoinSquareChatRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "JoinSquareChatRequest(";
  out << "squareChatMid=" << to_string(squareChatMid);
  out << ")";
}


SendMessageResponse::~SendMessageResponse() throw() {
}


void SendMessageResponse::__set_createdSquareMessage(const SquareMessage& val) {
  this->createdSquareMessage = val;
}
std::ostream& operator<<(std::ostream& out, const SendMessageResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SendMessageResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->createdSquareMessage.read(iprot);
          this->__isset.createdSquareMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SendMessageResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SendMessageResponse");

  xfer += oprot->writeFieldBegin("createdSquareMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->createdSquareMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SendMessageResponse &a, SendMessageResponse &b) {
  using ::std::swap;
  swap(a.createdSquareMessage, b.createdSquareMessage);
  swap(a.__isset, b.__isset);
}

SendMessageResponse::SendMessageResponse(const SendMessageResponse& other1120) {
  createdSquareMessage = other1120.createdSquareMessage;
  __isset = other1120.__isset;
}
SendMessageResponse& SendMessageResponse::operator=(const SendMessageResponse& other1121) {
  createdSquareMessage = other1121.createdSquareMessage;
  __isset = other1121.__isset;
  return *this;
}
void SendMessageResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SendMessageResponse(";
  out << "createdSquareMessage=" << to_string(createdSquareMessage);
  out << ")";
}


SendMessageRequest::~SendMessageRequest() throw() {
}


void SendMessageRequest::__set_reqSeq(const int32_t val) {
  this->reqSeq = val;
}

void SendMessageRequest::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}

void SendMessageRequest::__set_squareMessage(const SquareMessage& val) {
  this->squareMessage = val;
}
std::ostream& operator<<(std::ostream& out, const SendMessageRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SendMessageRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->reqSeq);
          this->__isset.reqSeq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareMessage.read(iprot);
          this->__isset.squareMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SendMessageRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SendMessageRequest");

  xfer += oprot->writeFieldBegin("reqSeq", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->reqSeq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareMessage", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->squareMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SendMessageRequest &a, SendMessageRequest &b) {
  using ::std::swap;
  swap(a.reqSeq, b.reqSeq);
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.squareMessage, b.squareMessage);
  swap(a.__isset, b.__isset);
}

SendMessageRequest::SendMessageRequest(const SendMessageRequest& other1122) {
  reqSeq = other1122.reqSeq;
  squareChatMid = other1122.squareChatMid;
  squareMessage = other1122.squareMessage;
  __isset = other1122.__isset;
}
SendMessageRequest& SendMessageRequest::operator=(const SendMessageRequest& other1123) {
  reqSeq = other1123.reqSeq;
  squareChatMid = other1123.squareChatMid;
  squareMessage = other1123.squareMessage;
  __isset = other1123.__isset;
  return *this;
}
void SendMessageRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SendMessageRequest(";
  out << "reqSeq=" << to_string(reqSeq);
  out << ", " << "squareChatMid=" << to_string(squareChatMid);
  out << ", " << "squareMessage=" << to_string(squareMessage);
  out << ")";
}


MarkAsReadRequest::~MarkAsReadRequest() throw() {
}


void MarkAsReadRequest::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}

void MarkAsReadRequest::__set_messageId(const std::string& val) {
  this->messageId = val;
}
std::ostream& operator<<(std::ostream& out, const MarkAsReadRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t MarkAsReadRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageId);
          this->__isset.messageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MarkAsReadRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MarkAsReadRequest");

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageId", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->messageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MarkAsReadRequest &a, MarkAsReadRequest &b) {
  using ::std::swap;
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.messageId, b.messageId);
  swap(a.__isset, b.__isset);
}

MarkAsReadRequest::MarkAsReadRequest(const MarkAsReadRequest& other1124) {
  squareChatMid = other1124.squareChatMid;
  messageId = other1124.messageId;
  __isset = other1124.__isset;
}
MarkAsReadRequest& MarkAsReadRequest::operator=(const MarkAsReadRequest& other1125) {
  squareChatMid = other1125.squareChatMid;
  messageId = other1125.messageId;
  __isset = other1125.__isset;
  return *this;
}
void MarkAsReadRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MarkAsReadRequest(";
  out << "squareChatMid=" << to_string(squareChatMid);
  out << ", " << "messageId=" << to_string(messageId);
  out << ")";
}


MarkAsReadResponse::~MarkAsReadResponse() throw() {
}

std::ostream& operator<<(std::ostream& out, const MarkAsReadResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t MarkAsReadResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MarkAsReadResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MarkAsReadResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MarkAsReadResponse &a, MarkAsReadResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

MarkAsReadResponse::MarkAsReadResponse(const MarkAsReadResponse& other1126) {
  (void) other1126;
}
MarkAsReadResponse& MarkAsReadResponse::operator=(const MarkAsReadResponse& other1127) {
  (void) other1127;
  return *this;
}
void MarkAsReadResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MarkAsReadResponse(";
  out << ")";
}


SubscriptionState::~SubscriptionState() throw() {
}


void SubscriptionState::__set_subscriptionId(const int64_t val) {
  this->subscriptionId = val;
}

void SubscriptionState::__set_ttlMillis(const int64_t val) {
  this->ttlMillis = val;
}
std::ostream& operator<<(std::ostream& out, const SubscriptionState& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SubscriptionState::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->subscriptionId);
          this->__isset.subscriptionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ttlMillis);
          this->__isset.ttlMillis = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SubscriptionState::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SubscriptionState");

  xfer += oprot->writeFieldBegin("subscriptionId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->subscriptionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ttlMillis", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->ttlMillis);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SubscriptionState &a, SubscriptionState &b) {
  using ::std::swap;
  swap(a.subscriptionId, b.subscriptionId);
  swap(a.ttlMillis, b.ttlMillis);
  swap(a.__isset, b.__isset);
}

SubscriptionState::SubscriptionState(const SubscriptionState& other1128) {
  subscriptionId = other1128.subscriptionId;
  ttlMillis = other1128.ttlMillis;
  __isset = other1128.__isset;
}
SubscriptionState& SubscriptionState::operator=(const SubscriptionState& other1129) {
  subscriptionId = other1129.subscriptionId;
  ttlMillis = other1129.ttlMillis;
  __isset = other1129.__isset;
  return *this;
}
void SubscriptionState::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SubscriptionState(";
  out << "subscriptionId=" << to_string(subscriptionId);
  out << ", " << "ttlMillis=" << to_string(ttlMillis);
  out << ")";
}


ApproveSquareMembersResponse::~ApproveSquareMembersResponse() throw() {
}


void ApproveSquareMembersResponse::__set_approvedMembers(const std::vector<SquareMember> & val) {
  this->approvedMembers = val;
}

void ApproveSquareMembersResponse::__set_status(const SquareStatus& val) {
  this->status = val;
}
std::ostream& operator<<(std::ostream& out, const ApproveSquareMembersResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ApproveSquareMembersResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->approvedMembers.clear();
            uint32_t _size1130;
            ::apache::thrift::protocol::TType _etype1133;
            xfer += iprot->readListBegin(_etype1133, _size1130);
            this->approvedMembers.resize(_size1130);
            uint32_t _i1134;
            for (_i1134 = 0; _i1134 < _size1130; ++_i1134)
            {
              xfer += this->approvedMembers[_i1134].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.approvedMembers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->status.read(iprot);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ApproveSquareMembersResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ApproveSquareMembersResponse");

  xfer += oprot->writeFieldBegin("approvedMembers", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->approvedMembers.size()));
    std::vector<SquareMember> ::const_iterator _iter1135;
    for (_iter1135 = this->approvedMembers.begin(); _iter1135 != this->approvedMembers.end(); ++_iter1135)
    {
      xfer += (*_iter1135).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->status.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ApproveSquareMembersResponse &a, ApproveSquareMembersResponse &b) {
  using ::std::swap;
  swap(a.approvedMembers, b.approvedMembers);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

ApproveSquareMembersResponse::ApproveSquareMembersResponse(const ApproveSquareMembersResponse& other1136) {
  approvedMembers = other1136.approvedMembers;
  status = other1136.status;
  __isset = other1136.__isset;
}
ApproveSquareMembersResponse& ApproveSquareMembersResponse::operator=(const ApproveSquareMembersResponse& other1137) {
  approvedMembers = other1137.approvedMembers;
  status = other1137.status;
  __isset = other1137.__isset;
  return *this;
}
void ApproveSquareMembersResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ApproveSquareMembersResponse(";
  out << "approvedMembers=" << to_string(approvedMembers);
  out << ", " << "status=" << to_string(status);
  out << ")";
}


ApproveSquareMembersRequest::~ApproveSquareMembersRequest() throw() {
}


void ApproveSquareMembersRequest::__set_squareMid(const std::string& val) {
  this->squareMid = val;
}

void ApproveSquareMembersRequest::__set_requestedMemberMids(const std::vector<std::string> & val) {
  this->requestedMemberMids = val;
}
std::ostream& operator<<(std::ostream& out, const ApproveSquareMembersRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ApproveSquareMembersRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMid);
          this->__isset.squareMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->requestedMemberMids.clear();
            uint32_t _size1138;
            ::apache::thrift::protocol::TType _etype1141;
            xfer += iprot->readListBegin(_etype1141, _size1138);
            this->requestedMemberMids.resize(_size1138);
            uint32_t _i1142;
            for (_i1142 = 0; _i1142 < _size1138; ++_i1142)
            {
              xfer += iprot->readString(this->requestedMemberMids[_i1142]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.requestedMemberMids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ApproveSquareMembersRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ApproveSquareMembersRequest");

  xfer += oprot->writeFieldBegin("squareMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("requestedMemberMids", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->requestedMemberMids.size()));
    std::vector<std::string> ::const_iterator _iter1143;
    for (_iter1143 = this->requestedMemberMids.begin(); _iter1143 != this->requestedMemberMids.end(); ++_iter1143)
    {
      xfer += oprot->writeString((*_iter1143));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ApproveSquareMembersRequest &a, ApproveSquareMembersRequest &b) {
  using ::std::swap;
  swap(a.squareMid, b.squareMid);
  swap(a.requestedMemberMids, b.requestedMemberMids);
  swap(a.__isset, b.__isset);
}

ApproveSquareMembersRequest::ApproveSquareMembersRequest(const ApproveSquareMembersRequest& other1144) {
  squareMid = other1144.squareMid;
  requestedMemberMids = other1144.requestedMemberMids;
  __isset = other1144.__isset;
}
ApproveSquareMembersRequest& ApproveSquareMembersRequest::operator=(const ApproveSquareMembersRequest& other1145) {
  squareMid = other1145.squareMid;
  requestedMemberMids = other1145.requestedMemberMids;
  __isset = other1145.__isset;
  return *this;
}
void ApproveSquareMembersRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ApproveSquareMembersRequest(";
  out << "squareMid=" << to_string(squareMid);
  out << ", " << "requestedMemberMids=" << to_string(requestedMemberMids);
  out << ")";
}


CreateSquareChatResponse::~CreateSquareChatResponse() throw() {
}


void CreateSquareChatResponse::__set_squareChat(const SquareChat& val) {
  this->squareChat = val;
}

void CreateSquareChatResponse::__set_squareChatStatus(const SquareChatStatus& val) {
  this->squareChatStatus = val;
}

void CreateSquareChatResponse::__set_squareChatMember(const SquareChatMember& val) {
  this->squareChatMember = val;
}
std::ostream& operator<<(std::ostream& out, const CreateSquareChatResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CreateSquareChatResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareChat.read(iprot);
          this->__isset.squareChat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareChatStatus.read(iprot);
          this->__isset.squareChatStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareChatMember.read(iprot);
          this->__isset.squareChatMember = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CreateSquareChatResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CreateSquareChatResponse");

  xfer += oprot->writeFieldBegin("squareChat", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->squareChat.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareChatStatus", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->squareChatStatus.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareChatMember", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->squareChatMember.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CreateSquareChatResponse &a, CreateSquareChatResponse &b) {
  using ::std::swap;
  swap(a.squareChat, b.squareChat);
  swap(a.squareChatStatus, b.squareChatStatus);
  swap(a.squareChatMember, b.squareChatMember);
  swap(a.__isset, b.__isset);
}

CreateSquareChatResponse::CreateSquareChatResponse(const CreateSquareChatResponse& other1146) {
  squareChat = other1146.squareChat;
  squareChatStatus = other1146.squareChatStatus;
  squareChatMember = other1146.squareChatMember;
  __isset = other1146.__isset;
}
CreateSquareChatResponse& CreateSquareChatResponse::operator=(const CreateSquareChatResponse& other1147) {
  squareChat = other1147.squareChat;
  squareChatStatus = other1147.squareChatStatus;
  squareChatMember = other1147.squareChatMember;
  __isset = other1147.__isset;
  return *this;
}
void CreateSquareChatResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CreateSquareChatResponse(";
  out << "squareChat=" << to_string(squareChat);
  out << ", " << "squareChatStatus=" << to_string(squareChatStatus);
  out << ", " << "squareChatMember=" << to_string(squareChatMember);
  out << ")";
}


CreateSquareChatRequest::~CreateSquareChatRequest() throw() {
}


void CreateSquareChatRequest::__set_reqSeq(const int32_t val) {
  this->reqSeq = val;
}

void CreateSquareChatRequest::__set_squareChat(const SquareChat& val) {
  this->squareChat = val;
}

void CreateSquareChatRequest::__set_squareMemberMids(const std::vector<std::string> & val) {
  this->squareMemberMids = val;
}
std::ostream& operator<<(std::ostream& out, const CreateSquareChatRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CreateSquareChatRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->reqSeq);
          this->__isset.reqSeq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareChat.read(iprot);
          this->__isset.squareChat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->squareMemberMids.clear();
            uint32_t _size1148;
            ::apache::thrift::protocol::TType _etype1151;
            xfer += iprot->readListBegin(_etype1151, _size1148);
            this->squareMemberMids.resize(_size1148);
            uint32_t _i1152;
            for (_i1152 = 0; _i1152 < _size1148; ++_i1152)
            {
              xfer += iprot->readString(this->squareMemberMids[_i1152]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.squareMemberMids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CreateSquareChatRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CreateSquareChatRequest");

  xfer += oprot->writeFieldBegin("reqSeq", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->reqSeq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareChat", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->squareChat.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareMemberMids", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->squareMemberMids.size()));
    std::vector<std::string> ::const_iterator _iter1153;
    for (_iter1153 = this->squareMemberMids.begin(); _iter1153 != this->squareMemberMids.end(); ++_iter1153)
    {
      xfer += oprot->writeString((*_iter1153));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CreateSquareChatRequest &a, CreateSquareChatRequest &b) {
  using ::std::swap;
  swap(a.reqSeq, b.reqSeq);
  swap(a.squareChat, b.squareChat);
  swap(a.squareMemberMids, b.squareMemberMids);
  swap(a.__isset, b.__isset);
}

CreateSquareChatRequest::CreateSquareChatRequest(const CreateSquareChatRequest& other1154) {
  reqSeq = other1154.reqSeq;
  squareChat = other1154.squareChat;
  squareMemberMids = other1154.squareMemberMids;
  __isset = other1154.__isset;
}
CreateSquareChatRequest& CreateSquareChatRequest::operator=(const CreateSquareChatRequest& other1155) {
  reqSeq = other1155.reqSeq;
  squareChat = other1155.squareChat;
  squareMemberMids = other1155.squareMemberMids;
  __isset = other1155.__isset;
  return *this;
}
void CreateSquareChatRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CreateSquareChatRequest(";
  out << "reqSeq=" << to_string(reqSeq);
  out << ", " << "squareChat=" << to_string(squareChat);
  out << ", " << "squareMemberMids=" << to_string(squareMemberMids);
  out << ")";
}


CreateSquareResponse::~CreateSquareResponse() throw() {
}


void CreateSquareResponse::__set_square(const Square& val) {
  this->square = val;
}

void CreateSquareResponse::__set_creator(const SquareMember& val) {
  this->creator = val;
}

void CreateSquareResponse::__set_authority(const SquareAuthority& val) {
  this->authority = val;
}

void CreateSquareResponse::__set_status(const SquareStatus& val) {
  this->status = val;
}
std::ostream& operator<<(std::ostream& out, const CreateSquareResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CreateSquareResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->square.read(iprot);
          this->__isset.square = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->creator.read(iprot);
          this->__isset.creator = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->authority.read(iprot);
          this->__isset.authority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->status.read(iprot);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CreateSquareResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CreateSquareResponse");

  xfer += oprot->writeFieldBegin("square", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->square.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("creator", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->creator.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("authority", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->authority.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->status.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CreateSquareResponse &a, CreateSquareResponse &b) {
  using ::std::swap;
  swap(a.square, b.square);
  swap(a.creator, b.creator);
  swap(a.authority, b.authority);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

CreateSquareResponse::CreateSquareResponse(const CreateSquareResponse& other1156) {
  square = other1156.square;
  creator = other1156.creator;
  authority = other1156.authority;
  status = other1156.status;
  __isset = other1156.__isset;
}
CreateSquareResponse& CreateSquareResponse::operator=(const CreateSquareResponse& other1157) {
  square = other1157.square;
  creator = other1157.creator;
  authority = other1157.authority;
  status = other1157.status;
  __isset = other1157.__isset;
  return *this;
}
void CreateSquareResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CreateSquareResponse(";
  out << "square=" << to_string(square);
  out << ", " << "creator=" << to_string(creator);
  out << ", " << "authority=" << to_string(authority);
  out << ", " << "status=" << to_string(status);
  out << ")";
}


CreateSquareRequest::~CreateSquareRequest() throw() {
}


void CreateSquareRequest::__set_reqSeq(const int32_t val) {
  this->reqSeq = val;
}

void CreateSquareRequest::__set_square(const Square& val) {
  this->square = val;
}

void CreateSquareRequest::__set_creator(const SquareMember& val) {
  this->creator = val;
}
std::ostream& operator<<(std::ostream& out, const CreateSquareRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CreateSquareRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->reqSeq);
          this->__isset.reqSeq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->square.read(iprot);
          this->__isset.square = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->creator.read(iprot);
          this->__isset.creator = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CreateSquareRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CreateSquareRequest");

  xfer += oprot->writeFieldBegin("reqSeq", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->reqSeq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("square", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->square.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("creator", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->creator.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CreateSquareRequest &a, CreateSquareRequest &b) {
  using ::std::swap;
  swap(a.reqSeq, b.reqSeq);
  swap(a.square, b.square);
  swap(a.creator, b.creator);
  swap(a.__isset, b.__isset);
}

CreateSquareRequest::CreateSquareRequest(const CreateSquareRequest& other1158) {
  reqSeq = other1158.reqSeq;
  square = other1158.square;
  creator = other1158.creator;
  __isset = other1158.__isset;
}
CreateSquareRequest& CreateSquareRequest::operator=(const CreateSquareRequest& other1159) {
  reqSeq = other1159.reqSeq;
  square = other1159.square;
  creator = other1159.creator;
  __isset = other1159.__isset;
  return *this;
}
void CreateSquareRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CreateSquareRequest(";
  out << "reqSeq=" << to_string(reqSeq);
  out << ", " << "square=" << to_string(square);
  out << ", " << "creator=" << to_string(creator);
  out << ")";
}


DeleteSquareResponse::~DeleteSquareResponse() throw() {
}

std::ostream& operator<<(std::ostream& out, const DeleteSquareResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DeleteSquareResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeleteSquareResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DeleteSquareResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeleteSquareResponse &a, DeleteSquareResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

DeleteSquareResponse::DeleteSquareResponse(const DeleteSquareResponse& other1160) {
  (void) other1160;
}
DeleteSquareResponse& DeleteSquareResponse::operator=(const DeleteSquareResponse& other1161) {
  (void) other1161;
  return *this;
}
void DeleteSquareResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DeleteSquareResponse(";
  out << ")";
}


DeleteSquareRequest::~DeleteSquareRequest() throw() {
}


void DeleteSquareRequest::__set_mid(const std::string& val) {
  this->mid = val;
}

void DeleteSquareRequest::__set_revision(const int64_t val) {
  this->revision = val;
}
std::ostream& operator<<(std::ostream& out, const DeleteSquareRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DeleteSquareRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mid);
          this->__isset.mid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->revision);
          this->__isset.revision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeleteSquareRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DeleteSquareRequest");

  xfer += oprot->writeFieldBegin("mid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->mid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("revision", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->revision);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeleteSquareRequest &a, DeleteSquareRequest &b) {
  using ::std::swap;
  swap(a.mid, b.mid);
  swap(a.revision, b.revision);
  swap(a.__isset, b.__isset);
}

DeleteSquareRequest::DeleteSquareRequest(const DeleteSquareRequest& other1162) {
  mid = other1162.mid;
  revision = other1162.revision;
  __isset = other1162.__isset;
}
DeleteSquareRequest& DeleteSquareRequest::operator=(const DeleteSquareRequest& other1163) {
  mid = other1163.mid;
  revision = other1163.revision;
  __isset = other1163.__isset;
  return *this;
}
void DeleteSquareRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DeleteSquareRequest(";
  out << "mid=" << to_string(mid);
  out << ", " << "revision=" << to_string(revision);
  out << ")";
}


DestroyMessageResponse::~DestroyMessageResponse() throw() {
}

std::ostream& operator<<(std::ostream& out, const DestroyMessageResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DestroyMessageResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DestroyMessageResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DestroyMessageResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DestroyMessageResponse &a, DestroyMessageResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

DestroyMessageResponse::DestroyMessageResponse(const DestroyMessageResponse& other1164) {
  (void) other1164;
}
DestroyMessageResponse& DestroyMessageResponse::operator=(const DestroyMessageResponse& other1165) {
  (void) other1165;
  return *this;
}
void DestroyMessageResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DestroyMessageResponse(";
  out << ")";
}


DestroyMessageRequest::~DestroyMessageRequest() throw() {
}


void DestroyMessageRequest::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}

void DestroyMessageRequest::__set_messageId(const std::string& val) {
  this->messageId = val;
}
std::ostream& operator<<(std::ostream& out, const DestroyMessageRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DestroyMessageRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageId);
          this->__isset.messageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DestroyMessageRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DestroyMessageRequest");

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageId", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->messageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DestroyMessageRequest &a, DestroyMessageRequest &b) {
  using ::std::swap;
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.messageId, b.messageId);
  swap(a.__isset, b.__isset);
}

DestroyMessageRequest::DestroyMessageRequest(const DestroyMessageRequest& other1166) {
  squareChatMid = other1166.squareChatMid;
  messageId = other1166.messageId;
  __isset = other1166.__isset;
}
DestroyMessageRequest& DestroyMessageRequest::operator=(const DestroyMessageRequest& other1167) {
  squareChatMid = other1167.squareChatMid;
  messageId = other1167.messageId;
  __isset = other1167.__isset;
  return *this;
}
void DestroyMessageRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DestroyMessageRequest(";
  out << "squareChatMid=" << to_string(squareChatMid);
  out << ", " << "messageId=" << to_string(messageId);
  out << ")";
}


GetSquareChatMembersRequest::~GetSquareChatMembersRequest() throw() {
}


void GetSquareChatMembersRequest::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}

void GetSquareChatMembersRequest::__set_continuationToken(const std::string& val) {
  this->continuationToken = val;
}

void GetSquareChatMembersRequest::__set_limit(const int32_t val) {
  this->limit = val;
}
std::ostream& operator<<(std::ostream& out, const GetSquareChatMembersRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetSquareChatMembersRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->continuationToken);
          this->__isset.continuationToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetSquareChatMembersRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetSquareChatMembersRequest");

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("continuationToken", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->continuationToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->limit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetSquareChatMembersRequest &a, GetSquareChatMembersRequest &b) {
  using ::std::swap;
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.continuationToken, b.continuationToken);
  swap(a.limit, b.limit);
  swap(a.__isset, b.__isset);
}

GetSquareChatMembersRequest::GetSquareChatMembersRequest(const GetSquareChatMembersRequest& other1168) {
  squareChatMid = other1168.squareChatMid;
  continuationToken = other1168.continuationToken;
  limit = other1168.limit;
  __isset = other1168.__isset;
}
GetSquareChatMembersRequest& GetSquareChatMembersRequest::operator=(const GetSquareChatMembersRequest& other1169) {
  squareChatMid = other1169.squareChatMid;
  continuationToken = other1169.continuationToken;
  limit = other1169.limit;
  __isset = other1169.__isset;
  return *this;
}
void GetSquareChatMembersRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetSquareChatMembersRequest(";
  out << "squareChatMid=" << to_string(squareChatMid);
  out << ", " << "continuationToken=" << to_string(continuationToken);
  out << ", " << "limit=" << to_string(limit);
  out << ")";
}


GetSquareChatMembersResponse::~GetSquareChatMembersResponse() throw() {
}


void GetSquareChatMembersResponse::__set_squareChatMembers(const SquareMember& val) {
  this->squareChatMembers = val;
}

void GetSquareChatMembersResponse::__set_continuationToken(const std::string& val) {
  this->continuationToken = val;
}
std::ostream& operator<<(std::ostream& out, const GetSquareChatMembersResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetSquareChatMembersResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareChatMembers.read(iprot);
          this->__isset.squareChatMembers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->continuationToken);
          this->__isset.continuationToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetSquareChatMembersResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetSquareChatMembersResponse");

  xfer += oprot->writeFieldBegin("squareChatMembers", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->squareChatMembers.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("continuationToken", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->continuationToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetSquareChatMembersResponse &a, GetSquareChatMembersResponse &b) {
  using ::std::swap;
  swap(a.squareChatMembers, b.squareChatMembers);
  swap(a.continuationToken, b.continuationToken);
  swap(a.__isset, b.__isset);
}

GetSquareChatMembersResponse::GetSquareChatMembersResponse(const GetSquareChatMembersResponse& other1170) {
  squareChatMembers = other1170.squareChatMembers;
  continuationToken = other1170.continuationToken;
  __isset = other1170.__isset;
}
GetSquareChatMembersResponse& GetSquareChatMembersResponse::operator=(const GetSquareChatMembersResponse& other1171) {
  squareChatMembers = other1171.squareChatMembers;
  continuationToken = other1171.continuationToken;
  __isset = other1171.__isset;
  return *this;
}
void GetSquareChatMembersResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetSquareChatMembersResponse(";
  out << "squareChatMembers=" << to_string(squareChatMembers);
  out << ", " << "continuationToken=" << to_string(continuationToken);
  out << ")";
}


GetSquareChatStatusRequest::~GetSquareChatStatusRequest() throw() {
}


void GetSquareChatStatusRequest::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}
std::ostream& operator<<(std::ostream& out, const GetSquareChatStatusRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetSquareChatStatusRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetSquareChatStatusRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetSquareChatStatusRequest");

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetSquareChatStatusRequest &a, GetSquareChatStatusRequest &b) {
  using ::std::swap;
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.__isset, b.__isset);
}

GetSquareChatStatusRequest::GetSquareChatStatusRequest(const GetSquareChatStatusRequest& other1172) {
  squareChatMid = other1172.squareChatMid;
  __isset = other1172.__isset;
}
GetSquareChatStatusRequest& GetSquareChatStatusRequest::operator=(const GetSquareChatStatusRequest& other1173) {
  squareChatMid = other1173.squareChatMid;
  __isset = other1173.__isset;
  return *this;
}
void GetSquareChatStatusRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetSquareChatStatusRequest(";
  out << "squareChatMid=" << to_string(squareChatMid);
  out << ")";
}


GetSquareChatStatusResponse::~GetSquareChatStatusResponse() throw() {
}


void GetSquareChatStatusResponse::__set_chatStatus(const SquareChatStatus& val) {
  this->chatStatus = val;
}
std::ostream& operator<<(std::ostream& out, const GetSquareChatStatusResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetSquareChatStatusResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->chatStatus.read(iprot);
          this->__isset.chatStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetSquareChatStatusResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetSquareChatStatusResponse");

  xfer += oprot->writeFieldBegin("chatStatus", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->chatStatus.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetSquareChatStatusResponse &a, GetSquareChatStatusResponse &b) {
  using ::std::swap;
  swap(a.chatStatus, b.chatStatus);
  swap(a.__isset, b.__isset);
}

GetSquareChatStatusResponse::GetSquareChatStatusResponse(const GetSquareChatStatusResponse& other1174) {
  chatStatus = other1174.chatStatus;
  __isset = other1174.__isset;
}
GetSquareChatStatusResponse& GetSquareChatStatusResponse::operator=(const GetSquareChatStatusResponse& other1175) {
  chatStatus = other1175.chatStatus;
  __isset = other1175.__isset;
  return *this;
}
void GetSquareChatStatusResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetSquareChatStatusResponse(";
  out << "chatStatus=" << to_string(chatStatus);
  out << ")";
}


GetSquareChatRequest::~GetSquareChatRequest() throw() {
}


void GetSquareChatRequest::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}
std::ostream& operator<<(std::ostream& out, const GetSquareChatRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetSquareChatRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetSquareChatRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetSquareChatRequest");

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetSquareChatRequest &a, GetSquareChatRequest &b) {
  using ::std::swap;
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.__isset, b.__isset);
}

GetSquareChatRequest::GetSquareChatRequest(const GetSquareChatRequest& other1176) {
  squareChatMid = other1176.squareChatMid;
  __isset = other1176.__isset;
}
GetSquareChatRequest& GetSquareChatRequest::operator=(const GetSquareChatRequest& other1177) {
  squareChatMid = other1177.squareChatMid;
  __isset = other1177.__isset;
  return *this;
}
void GetSquareChatRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetSquareChatRequest(";
  out << "squareChatMid=" << to_string(squareChatMid);
  out << ")";
}


GetSquareChatResponse::~GetSquareChatResponse() throw() {
}


void GetSquareChatResponse::__set_squareChat(const SquareChat& val) {
  this->squareChat = val;
}

void GetSquareChatResponse::__set_squareChatMember(const SquareChatMember& val) {
  this->squareChatMember = val;
}

void GetSquareChatResponse::__set_squareChatStatus(const SquareChatStatus& val) {
  this->squareChatStatus = val;
}
std::ostream& operator<<(std::ostream& out, const GetSquareChatResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetSquareChatResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareChat.read(iprot);
          this->__isset.squareChat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareChatMember.read(iprot);
          this->__isset.squareChatMember = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareChatStatus.read(iprot);
          this->__isset.squareChatStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetSquareChatResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetSquareChatResponse");

  xfer += oprot->writeFieldBegin("squareChat", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->squareChat.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareChatMember", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->squareChatMember.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareChatStatus", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->squareChatStatus.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetSquareChatResponse &a, GetSquareChatResponse &b) {
  using ::std::swap;
  swap(a.squareChat, b.squareChat);
  swap(a.squareChatMember, b.squareChatMember);
  swap(a.squareChatStatus, b.squareChatStatus);
  swap(a.__isset, b.__isset);
}

GetSquareChatResponse::GetSquareChatResponse(const GetSquareChatResponse& other1178) {
  squareChat = other1178.squareChat;
  squareChatMember = other1178.squareChatMember;
  squareChatStatus = other1178.squareChatStatus;
  __isset = other1178.__isset;
}
GetSquareChatResponse& GetSquareChatResponse::operator=(const GetSquareChatResponse& other1179) {
  squareChat = other1179.squareChat;
  squareChatMember = other1179.squareChatMember;
  squareChatStatus = other1179.squareChatStatus;
  __isset = other1179.__isset;
  return *this;
}
void GetSquareChatResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetSquareChatResponse(";
  out << "squareChat=" << to_string(squareChat);
  out << ", " << "squareChatMember=" << to_string(squareChatMember);
  out << ", " << "squareChatStatus=" << to_string(squareChatStatus);
  out << ")";
}


GetSquareAuthorityRequest::~GetSquareAuthorityRequest() throw() {
}


void GetSquareAuthorityRequest::__set_squareMid(const std::string& val) {
  this->squareMid = val;
}
std::ostream& operator<<(std::ostream& out, const GetSquareAuthorityRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetSquareAuthorityRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMid);
          this->__isset.squareMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetSquareAuthorityRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetSquareAuthorityRequest");

  xfer += oprot->writeFieldBegin("squareMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetSquareAuthorityRequest &a, GetSquareAuthorityRequest &b) {
  using ::std::swap;
  swap(a.squareMid, b.squareMid);
  swap(a.__isset, b.__isset);
}

GetSquareAuthorityRequest::GetSquareAuthorityRequest(const GetSquareAuthorityRequest& other1180) {
  squareMid = other1180.squareMid;
  __isset = other1180.__isset;
}
GetSquareAuthorityRequest& GetSquareAuthorityRequest::operator=(const GetSquareAuthorityRequest& other1181) {
  squareMid = other1181.squareMid;
  __isset = other1181.__isset;
  return *this;
}
void GetSquareAuthorityRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetSquareAuthorityRequest(";
  out << "squareMid=" << to_string(squareMid);
  out << ")";
}


GetSquareAuthorityResponse::~GetSquareAuthorityResponse() throw() {
}


void GetSquareAuthorityResponse::__set_authority(const SquareAuthority& val) {
  this->authority = val;
}
std::ostream& operator<<(std::ostream& out, const GetSquareAuthorityResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetSquareAuthorityResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->authority.read(iprot);
          this->__isset.authority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetSquareAuthorityResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetSquareAuthorityResponse");

  xfer += oprot->writeFieldBegin("authority", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->authority.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetSquareAuthorityResponse &a, GetSquareAuthorityResponse &b) {
  using ::std::swap;
  swap(a.authority, b.authority);
  swap(a.__isset, b.__isset);
}

GetSquareAuthorityResponse::GetSquareAuthorityResponse(const GetSquareAuthorityResponse& other1182) {
  authority = other1182.authority;
  __isset = other1182.__isset;
}
GetSquareAuthorityResponse& GetSquareAuthorityResponse::operator=(const GetSquareAuthorityResponse& other1183) {
  authority = other1183.authority;
  __isset = other1183.__isset;
  return *this;
}
void GetSquareAuthorityResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetSquareAuthorityResponse(";
  out << "authority=" << to_string(authority);
  out << ")";
}


GetJoinedSquaresRequest::~GetJoinedSquaresRequest() throw() {
}


void GetJoinedSquaresRequest::__set_continuationToken(const std::string& val) {
  this->continuationToken = val;
}

void GetJoinedSquaresRequest::__set_limit(const int32_t val) {
  this->limit = val;
}
std::ostream& operator<<(std::ostream& out, const GetJoinedSquaresRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetJoinedSquaresRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->continuationToken);
          this->__isset.continuationToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetJoinedSquaresRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetJoinedSquaresRequest");

  xfer += oprot->writeFieldBegin("continuationToken", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->continuationToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->limit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetJoinedSquaresRequest &a, GetJoinedSquaresRequest &b) {
  using ::std::swap;
  swap(a.continuationToken, b.continuationToken);
  swap(a.limit, b.limit);
  swap(a.__isset, b.__isset);
}

GetJoinedSquaresRequest::GetJoinedSquaresRequest(const GetJoinedSquaresRequest& other1184) {
  continuationToken = other1184.continuationToken;
  limit = other1184.limit;
  __isset = other1184.__isset;
}
GetJoinedSquaresRequest& GetJoinedSquaresRequest::operator=(const GetJoinedSquaresRequest& other1185) {
  continuationToken = other1185.continuationToken;
  limit = other1185.limit;
  __isset = other1185.__isset;
  return *this;
}
void GetJoinedSquaresRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetJoinedSquaresRequest(";
  out << "continuationToken=" << to_string(continuationToken);
  out << ", " << "limit=" << to_string(limit);
  out << ")";
}


GetJoinedSquaresResponse::~GetJoinedSquaresResponse() throw() {
}


void GetJoinedSquaresResponse::__set_squares(const std::vector<Square> & val) {
  this->squares = val;
}

void GetJoinedSquaresResponse::__set_members(const std::map<std::string, SquareMember> & val) {
  this->members = val;
}

void GetJoinedSquaresResponse::__set_authorities(const std::map<std::string, SquareAuthority> & val) {
  this->authorities = val;
}

void GetJoinedSquaresResponse::__set_statuses(const std::map<std::string, SquareStatus> & val) {
  this->statuses = val;
}

void GetJoinedSquaresResponse::__set_continuationToken(const std::string& val) {
  this->continuationToken = val;
}

void GetJoinedSquaresResponse::__set_noteStatuses(const std::map<std::string, NoteStatus> & val) {
  this->noteStatuses = val;
}
std::ostream& operator<<(std::ostream& out, const GetJoinedSquaresResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetJoinedSquaresResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->squares.clear();
            uint32_t _size1186;
            ::apache::thrift::protocol::TType _etype1189;
            xfer += iprot->readListBegin(_etype1189, _size1186);
            this->squares.resize(_size1186);
            uint32_t _i1190;
            for (_i1190 = 0; _i1190 < _size1186; ++_i1190)
            {
              xfer += this->squares[_i1190].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.squares = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->members.clear();
            uint32_t _size1191;
            ::apache::thrift::protocol::TType _ktype1192;
            ::apache::thrift::protocol::TType _vtype1193;
            xfer += iprot->readMapBegin(_ktype1192, _vtype1193, _size1191);
            uint32_t _i1195;
            for (_i1195 = 0; _i1195 < _size1191; ++_i1195)
            {
              std::string _key1196;
              xfer += iprot->readString(_key1196);
              SquareMember& _val1197 = this->members[_key1196];
              xfer += _val1197.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.members = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->authorities.clear();
            uint32_t _size1198;
            ::apache::thrift::protocol::TType _ktype1199;
            ::apache::thrift::protocol::TType _vtype1200;
            xfer += iprot->readMapBegin(_ktype1199, _vtype1200, _size1198);
            uint32_t _i1202;
            for (_i1202 = 0; _i1202 < _size1198; ++_i1202)
            {
              std::string _key1203;
              xfer += iprot->readString(_key1203);
              SquareAuthority& _val1204 = this->authorities[_key1203];
              xfer += _val1204.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.authorities = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->statuses.clear();
            uint32_t _size1205;
            ::apache::thrift::protocol::TType _ktype1206;
            ::apache::thrift::protocol::TType _vtype1207;
            xfer += iprot->readMapBegin(_ktype1206, _vtype1207, _size1205);
            uint32_t _i1209;
            for (_i1209 = 0; _i1209 < _size1205; ++_i1209)
            {
              std::string _key1210;
              xfer += iprot->readString(_key1210);
              SquareStatus& _val1211 = this->statuses[_key1210];
              xfer += _val1211.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.statuses = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->continuationToken);
          this->__isset.continuationToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->noteStatuses.clear();
            uint32_t _size1212;
            ::apache::thrift::protocol::TType _ktype1213;
            ::apache::thrift::protocol::TType _vtype1214;
            xfer += iprot->readMapBegin(_ktype1213, _vtype1214, _size1212);
            uint32_t _i1216;
            for (_i1216 = 0; _i1216 < _size1212; ++_i1216)
            {
              std::string _key1217;
              xfer += iprot->readString(_key1217);
              NoteStatus& _val1218 = this->noteStatuses[_key1217];
              xfer += _val1218.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.noteStatuses = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetJoinedSquaresResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetJoinedSquaresResponse");

  xfer += oprot->writeFieldBegin("squares", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->squares.size()));
    std::vector<Square> ::const_iterator _iter1219;
    for (_iter1219 = this->squares.begin(); _iter1219 != this->squares.end(); ++_iter1219)
    {
      xfer += (*_iter1219).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("members", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->members.size()));
    std::map<std::string, SquareMember> ::const_iterator _iter1220;
    for (_iter1220 = this->members.begin(); _iter1220 != this->members.end(); ++_iter1220)
    {
      xfer += oprot->writeString(_iter1220->first);
      xfer += _iter1220->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("authorities", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->authorities.size()));
    std::map<std::string, SquareAuthority> ::const_iterator _iter1221;
    for (_iter1221 = this->authorities.begin(); _iter1221 != this->authorities.end(); ++_iter1221)
    {
      xfer += oprot->writeString(_iter1221->first);
      xfer += _iter1221->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("statuses", ::apache::thrift::protocol::T_MAP, 4);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->statuses.size()));
    std::map<std::string, SquareStatus> ::const_iterator _iter1222;
    for (_iter1222 = this->statuses.begin(); _iter1222 != this->statuses.end(); ++_iter1222)
    {
      xfer += oprot->writeString(_iter1222->first);
      xfer += _iter1222->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("continuationToken", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->continuationToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("noteStatuses", ::apache::thrift::protocol::T_MAP, 6);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->noteStatuses.size()));
    std::map<std::string, NoteStatus> ::const_iterator _iter1223;
    for (_iter1223 = this->noteStatuses.begin(); _iter1223 != this->noteStatuses.end(); ++_iter1223)
    {
      xfer += oprot->writeString(_iter1223->first);
      xfer += _iter1223->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetJoinedSquaresResponse &a, GetJoinedSquaresResponse &b) {
  using ::std::swap;
  swap(a.squares, b.squares);
  swap(a.members, b.members);
  swap(a.authorities, b.authorities);
  swap(a.statuses, b.statuses);
  swap(a.continuationToken, b.continuationToken);
  swap(a.noteStatuses, b.noteStatuses);
  swap(a.__isset, b.__isset);
}

GetJoinedSquaresResponse::GetJoinedSquaresResponse(const GetJoinedSquaresResponse& other1224) {
  squares = other1224.squares;
  members = other1224.members;
  authorities = other1224.authorities;
  statuses = other1224.statuses;
  continuationToken = other1224.continuationToken;
  noteStatuses = other1224.noteStatuses;
  __isset = other1224.__isset;
}
GetJoinedSquaresResponse& GetJoinedSquaresResponse::operator=(const GetJoinedSquaresResponse& other1225) {
  squares = other1225.squares;
  members = other1225.members;
  authorities = other1225.authorities;
  statuses = other1225.statuses;
  continuationToken = other1225.continuationToken;
  noteStatuses = other1225.noteStatuses;
  __isset = other1225.__isset;
  return *this;
}
void GetJoinedSquaresResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetJoinedSquaresResponse(";
  out << "squares=" << to_string(squares);
  out << ", " << "members=" << to_string(members);
  out << ", " << "authorities=" << to_string(authorities);
  out << ", " << "statuses=" << to_string(statuses);
  out << ", " << "continuationToken=" << to_string(continuationToken);
  out << ", " << "noteStatuses=" << to_string(noteStatuses);
  out << ")";
}


GetJoinableSquareChatsRequest::~GetJoinableSquareChatsRequest() throw() {
}


void GetJoinableSquareChatsRequest::__set_squareMid(const std::string& val) {
  this->squareMid = val;
}

void GetJoinableSquareChatsRequest::__set_continuationToken(const std::string& val) {
  this->continuationToken = val;
}

void GetJoinableSquareChatsRequest::__set_limit(const int32_t val) {
  this->limit = val;
}
std::ostream& operator<<(std::ostream& out, const GetJoinableSquareChatsRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetJoinableSquareChatsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMid);
          this->__isset.squareMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->continuationToken);
          this->__isset.continuationToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetJoinableSquareChatsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetJoinableSquareChatsRequest");

  xfer += oprot->writeFieldBegin("squareMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("continuationToken", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->continuationToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->limit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetJoinableSquareChatsRequest &a, GetJoinableSquareChatsRequest &b) {
  using ::std::swap;
  swap(a.squareMid, b.squareMid);
  swap(a.continuationToken, b.continuationToken);
  swap(a.limit, b.limit);
  swap(a.__isset, b.__isset);
}

GetJoinableSquareChatsRequest::GetJoinableSquareChatsRequest(const GetJoinableSquareChatsRequest& other1226) {
  squareMid = other1226.squareMid;
  continuationToken = other1226.continuationToken;
  limit = other1226.limit;
  __isset = other1226.__isset;
}
GetJoinableSquareChatsRequest& GetJoinableSquareChatsRequest::operator=(const GetJoinableSquareChatsRequest& other1227) {
  squareMid = other1227.squareMid;
  continuationToken = other1227.continuationToken;
  limit = other1227.limit;
  __isset = other1227.__isset;
  return *this;
}
void GetJoinableSquareChatsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetJoinableSquareChatsRequest(";
  out << "squareMid=" << to_string(squareMid);
  out << ", " << "continuationToken=" << to_string(continuationToken);
  out << ", " << "limit=" << to_string(limit);
  out << ")";
}


GetJoinableSquareChatsResponse::~GetJoinableSquareChatsResponse() throw() {
}


void GetJoinableSquareChatsResponse::__set_squareChats(const std::vector<SquareChat> & val) {
  this->squareChats = val;
}

void GetJoinableSquareChatsResponse::__set_continuationToken(const std::string& val) {
  this->continuationToken = val;
}

void GetJoinableSquareChatsResponse::__set_totalSquareChatCount(const int32_t val) {
  this->totalSquareChatCount = val;
}

void GetJoinableSquareChatsResponse::__set_squareChatStatuses(const std::map<std::string, SquareChatStatus> & val) {
  this->squareChatStatuses = val;
}
std::ostream& operator<<(std::ostream& out, const GetJoinableSquareChatsResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetJoinableSquareChatsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->squareChats.clear();
            uint32_t _size1228;
            ::apache::thrift::protocol::TType _etype1231;
            xfer += iprot->readListBegin(_etype1231, _size1228);
            this->squareChats.resize(_size1228);
            uint32_t _i1232;
            for (_i1232 = 0; _i1232 < _size1228; ++_i1232)
            {
              xfer += this->squareChats[_i1232].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.squareChats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->continuationToken);
          this->__isset.continuationToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalSquareChatCount);
          this->__isset.totalSquareChatCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->squareChatStatuses.clear();
            uint32_t _size1233;
            ::apache::thrift::protocol::TType _ktype1234;
            ::apache::thrift::protocol::TType _vtype1235;
            xfer += iprot->readMapBegin(_ktype1234, _vtype1235, _size1233);
            uint32_t _i1237;
            for (_i1237 = 0; _i1237 < _size1233; ++_i1237)
            {
              std::string _key1238;
              xfer += iprot->readString(_key1238);
              SquareChatStatus& _val1239 = this->squareChatStatuses[_key1238];
              xfer += _val1239.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.squareChatStatuses = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetJoinableSquareChatsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetJoinableSquareChatsResponse");

  xfer += oprot->writeFieldBegin("squareChats", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->squareChats.size()));
    std::vector<SquareChat> ::const_iterator _iter1240;
    for (_iter1240 = this->squareChats.begin(); _iter1240 != this->squareChats.end(); ++_iter1240)
    {
      xfer += (*_iter1240).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("continuationToken", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->continuationToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalSquareChatCount", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->totalSquareChatCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareChatStatuses", ::apache::thrift::protocol::T_MAP, 4);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->squareChatStatuses.size()));
    std::map<std::string, SquareChatStatus> ::const_iterator _iter1241;
    for (_iter1241 = this->squareChatStatuses.begin(); _iter1241 != this->squareChatStatuses.end(); ++_iter1241)
    {
      xfer += oprot->writeString(_iter1241->first);
      xfer += _iter1241->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetJoinableSquareChatsResponse &a, GetJoinableSquareChatsResponse &b) {
  using ::std::swap;
  swap(a.squareChats, b.squareChats);
  swap(a.continuationToken, b.continuationToken);
  swap(a.totalSquareChatCount, b.totalSquareChatCount);
  swap(a.squareChatStatuses, b.squareChatStatuses);
  swap(a.__isset, b.__isset);
}

GetJoinableSquareChatsResponse::GetJoinableSquareChatsResponse(const GetJoinableSquareChatsResponse& other1242) {
  squareChats = other1242.squareChats;
  continuationToken = other1242.continuationToken;
  totalSquareChatCount = other1242.totalSquareChatCount;
  squareChatStatuses = other1242.squareChatStatuses;
  __isset = other1242.__isset;
}
GetJoinableSquareChatsResponse& GetJoinableSquareChatsResponse::operator=(const GetJoinableSquareChatsResponse& other1243) {
  squareChats = other1243.squareChats;
  continuationToken = other1243.continuationToken;
  totalSquareChatCount = other1243.totalSquareChatCount;
  squareChatStatuses = other1243.squareChatStatuses;
  __isset = other1243.__isset;
  return *this;
}
void GetJoinableSquareChatsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetJoinableSquareChatsResponse(";
  out << "squareChats=" << to_string(squareChats);
  out << ", " << "continuationToken=" << to_string(continuationToken);
  out << ", " << "totalSquareChatCount=" << to_string(totalSquareChatCount);
  out << ", " << "squareChatStatuses=" << to_string(squareChatStatuses);
  out << ")";
}


GetInvitationTicketUrlRequest::~GetInvitationTicketUrlRequest() throw() {
}


void GetInvitationTicketUrlRequest::__set_mid(const std::string& val) {
  this->mid = val;
}
std::ostream& operator<<(std::ostream& out, const GetInvitationTicketUrlRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetInvitationTicketUrlRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mid);
          this->__isset.mid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetInvitationTicketUrlRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetInvitationTicketUrlRequest");

  xfer += oprot->writeFieldBegin("mid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->mid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetInvitationTicketUrlRequest &a, GetInvitationTicketUrlRequest &b) {
  using ::std::swap;
  swap(a.mid, b.mid);
  swap(a.__isset, b.__isset);
}

GetInvitationTicketUrlRequest::GetInvitationTicketUrlRequest(const GetInvitationTicketUrlRequest& other1244) {
  mid = other1244.mid;
  __isset = other1244.__isset;
}
GetInvitationTicketUrlRequest& GetInvitationTicketUrlRequest::operator=(const GetInvitationTicketUrlRequest& other1245) {
  mid = other1245.mid;
  __isset = other1245.__isset;
  return *this;
}
void GetInvitationTicketUrlRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetInvitationTicketUrlRequest(";
  out << "mid=" << to_string(mid);
  out << ")";
}


GetInvitationTicketUrlResponse::~GetInvitationTicketUrlResponse() throw() {
}


void GetInvitationTicketUrlResponse::__set_invitationURL(const std::string& val) {
  this->invitationURL = val;
}
std::ostream& operator<<(std::ostream& out, const GetInvitationTicketUrlResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetInvitationTicketUrlResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->invitationURL);
          this->__isset.invitationURL = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetInvitationTicketUrlResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetInvitationTicketUrlResponse");

  xfer += oprot->writeFieldBegin("invitationURL", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->invitationURL);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetInvitationTicketUrlResponse &a, GetInvitationTicketUrlResponse &b) {
  using ::std::swap;
  swap(a.invitationURL, b.invitationURL);
  swap(a.__isset, b.__isset);
}

GetInvitationTicketUrlResponse::GetInvitationTicketUrlResponse(const GetInvitationTicketUrlResponse& other1246) {
  invitationURL = other1246.invitationURL;
  __isset = other1246.__isset;
}
GetInvitationTicketUrlResponse& GetInvitationTicketUrlResponse::operator=(const GetInvitationTicketUrlResponse& other1247) {
  invitationURL = other1247.invitationURL;
  __isset = other1247.__isset;
  return *this;
}
void GetInvitationTicketUrlResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetInvitationTicketUrlResponse(";
  out << "invitationURL=" << to_string(invitationURL);
  out << ")";
}


LeaveSquareRequest::~LeaveSquareRequest() throw() {
}


void LeaveSquareRequest::__set_squareMid(const std::string& val) {
  this->squareMid = val;
}
std::ostream& operator<<(std::ostream& out, const LeaveSquareRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LeaveSquareRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMid);
          this->__isset.squareMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LeaveSquareRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LeaveSquareRequest");

  xfer += oprot->writeFieldBegin("squareMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LeaveSquareRequest &a, LeaveSquareRequest &b) {
  using ::std::swap;
  swap(a.squareMid, b.squareMid);
  swap(a.__isset, b.__isset);
}

LeaveSquareRequest::LeaveSquareRequest(const LeaveSquareRequest& other1248) {
  squareMid = other1248.squareMid;
  __isset = other1248.__isset;
}
LeaveSquareRequest& LeaveSquareRequest::operator=(const LeaveSquareRequest& other1249) {
  squareMid = other1249.squareMid;
  __isset = other1249.__isset;
  return *this;
}
void LeaveSquareRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LeaveSquareRequest(";
  out << "squareMid=" << to_string(squareMid);
  out << ")";
}


LeaveSquareResponse::~LeaveSquareResponse() throw() {
}

std::ostream& operator<<(std::ostream& out, const LeaveSquareResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LeaveSquareResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LeaveSquareResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LeaveSquareResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LeaveSquareResponse &a, LeaveSquareResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

LeaveSquareResponse::LeaveSquareResponse(const LeaveSquareResponse& other1250) {
  (void) other1250;
}
LeaveSquareResponse& LeaveSquareResponse::operator=(const LeaveSquareResponse& other1251) {
  (void) other1251;
  return *this;
}
void LeaveSquareResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LeaveSquareResponse(";
  out << ")";
}


LeaveSquareChatRequest::~LeaveSquareChatRequest() throw() {
}


void LeaveSquareChatRequest::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}

void LeaveSquareChatRequest::__set_sayGoodbye(const bool val) {
  this->sayGoodbye = val;
}

void LeaveSquareChatRequest::__set_squareChatMemberRevision(const int64_t val) {
  this->squareChatMemberRevision = val;
}
std::ostream& operator<<(std::ostream& out, const LeaveSquareChatRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LeaveSquareChatRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->sayGoodbye);
          this->__isset.sayGoodbye = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->squareChatMemberRevision);
          this->__isset.squareChatMemberRevision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LeaveSquareChatRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LeaveSquareChatRequest");

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sayGoodbye", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->sayGoodbye);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareChatMemberRevision", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->squareChatMemberRevision);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LeaveSquareChatRequest &a, LeaveSquareChatRequest &b) {
  using ::std::swap;
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.sayGoodbye, b.sayGoodbye);
  swap(a.squareChatMemberRevision, b.squareChatMemberRevision);
  swap(a.__isset, b.__isset);
}

LeaveSquareChatRequest::LeaveSquareChatRequest(const LeaveSquareChatRequest& other1252) {
  squareChatMid = other1252.squareChatMid;
  sayGoodbye = other1252.sayGoodbye;
  squareChatMemberRevision = other1252.squareChatMemberRevision;
  __isset = other1252.__isset;
}
LeaveSquareChatRequest& LeaveSquareChatRequest::operator=(const LeaveSquareChatRequest& other1253) {
  squareChatMid = other1253.squareChatMid;
  sayGoodbye = other1253.sayGoodbye;
  squareChatMemberRevision = other1253.squareChatMemberRevision;
  __isset = other1253.__isset;
  return *this;
}
void LeaveSquareChatRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LeaveSquareChatRequest(";
  out << "squareChatMid=" << to_string(squareChatMid);
  out << ", " << "sayGoodbye=" << to_string(sayGoodbye);
  out << ", " << "squareChatMemberRevision=" << to_string(squareChatMemberRevision);
  out << ")";
}


LeaveSquareChatResponse::~LeaveSquareChatResponse() throw() {
}

std::ostream& operator<<(std::ostream& out, const LeaveSquareChatResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LeaveSquareChatResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LeaveSquareChatResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LeaveSquareChatResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LeaveSquareChatResponse &a, LeaveSquareChatResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

LeaveSquareChatResponse::LeaveSquareChatResponse(const LeaveSquareChatResponse& other1254) {
  (void) other1254;
}
LeaveSquareChatResponse& LeaveSquareChatResponse::operator=(const LeaveSquareChatResponse& other1255) {
  (void) other1255;
  return *this;
}
void LeaveSquareChatResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LeaveSquareChatResponse(";
  out << ")";
}


SquareMemberSearchOption::~SquareMemberSearchOption() throw() {
}


void SquareMemberSearchOption::__set_membershipState(const SquareMembershipState::type val) {
  this->membershipState = val;
}

void SquareMemberSearchOption::__set_memberRoles(const std::set<SquareMemberRole::type> & val) {
  this->memberRoles = val;
}

void SquareMemberSearchOption::__set_displayName(const std::string& val) {
  this->displayName = val;
}

void SquareMemberSearchOption::__set_ableToReceiveMessage(const BooleanState::type val) {
  this->ableToReceiveMessage = val;
}

void SquareMemberSearchOption::__set_ableToReceiveFriendRequest(const BooleanState::type val) {
  this->ableToReceiveFriendRequest = val;
}

void SquareMemberSearchOption::__set_chatMidToExcludeMembers(const std::string& val) {
  this->chatMidToExcludeMembers = val;
}

void SquareMemberSearchOption::__set_includingMe(const bool val) {
  this->includingMe = val;
}
std::ostream& operator<<(std::ostream& out, const SquareMemberSearchOption& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareMemberSearchOption::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1256;
          xfer += iprot->readI32(ecast1256);
          this->membershipState = (SquareMembershipState::type)ecast1256;
          this->__isset.membershipState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->memberRoles.clear();
            uint32_t _size1257;
            ::apache::thrift::protocol::TType _etype1260;
            xfer += iprot->readSetBegin(_etype1260, _size1257);
            uint32_t _i1261;
            for (_i1261 = 0; _i1261 < _size1257; ++_i1261)
            {
              SquareMemberRole::type _elem1262;
              int32_t ecast1263;
              xfer += iprot->readI32(ecast1263);
              _elem1262 = (SquareMemberRole::type)ecast1263;
              this->memberRoles.insert(_elem1262);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.memberRoles = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->displayName);
          this->__isset.displayName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1264;
          xfer += iprot->readI32(ecast1264);
          this->ableToReceiveMessage = (BooleanState::type)ecast1264;
          this->__isset.ableToReceiveMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1265;
          xfer += iprot->readI32(ecast1265);
          this->ableToReceiveFriendRequest = (BooleanState::type)ecast1265;
          this->__isset.ableToReceiveFriendRequest = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->chatMidToExcludeMembers);
          this->__isset.chatMidToExcludeMembers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->includingMe);
          this->__isset.includingMe = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareMemberSearchOption::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareMemberSearchOption");

  xfer += oprot->writeFieldBegin("membershipState", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->membershipState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("memberRoles", ::apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->memberRoles.size()));
    std::set<SquareMemberRole::type> ::const_iterator _iter1266;
    for (_iter1266 = this->memberRoles.begin(); _iter1266 != this->memberRoles.end(); ++_iter1266)
    {
      xfer += oprot->writeI32((int32_t)(*_iter1266));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->displayName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ableToReceiveMessage", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->ableToReceiveMessage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ableToReceiveFriendRequest", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->ableToReceiveFriendRequest);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chatMidToExcludeMembers", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->chatMidToExcludeMembers);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("includingMe", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->includingMe);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareMemberSearchOption &a, SquareMemberSearchOption &b) {
  using ::std::swap;
  swap(a.membershipState, b.membershipState);
  swap(a.memberRoles, b.memberRoles);
  swap(a.displayName, b.displayName);
  swap(a.ableToReceiveMessage, b.ableToReceiveMessage);
  swap(a.ableToReceiveFriendRequest, b.ableToReceiveFriendRequest);
  swap(a.chatMidToExcludeMembers, b.chatMidToExcludeMembers);
  swap(a.includingMe, b.includingMe);
  swap(a.__isset, b.__isset);
}

SquareMemberSearchOption::SquareMemberSearchOption(const SquareMemberSearchOption& other1267) {
  membershipState = other1267.membershipState;
  memberRoles = other1267.memberRoles;
  displayName = other1267.displayName;
  ableToReceiveMessage = other1267.ableToReceiveMessage;
  ableToReceiveFriendRequest = other1267.ableToReceiveFriendRequest;
  chatMidToExcludeMembers = other1267.chatMidToExcludeMembers;
  includingMe = other1267.includingMe;
  __isset = other1267.__isset;
}
SquareMemberSearchOption& SquareMemberSearchOption::operator=(const SquareMemberSearchOption& other1268) {
  membershipState = other1268.membershipState;
  memberRoles = other1268.memberRoles;
  displayName = other1268.displayName;
  ableToReceiveMessage = other1268.ableToReceiveMessage;
  ableToReceiveFriendRequest = other1268.ableToReceiveFriendRequest;
  chatMidToExcludeMembers = other1268.chatMidToExcludeMembers;
  includingMe = other1268.includingMe;
  __isset = other1268.__isset;
  return *this;
}
void SquareMemberSearchOption::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareMemberSearchOption(";
  out << "membershipState=" << to_string(membershipState);
  out << ", " << "memberRoles=" << to_string(memberRoles);
  out << ", " << "displayName=" << to_string(displayName);
  out << ", " << "ableToReceiveMessage=" << to_string(ableToReceiveMessage);
  out << ", " << "ableToReceiveFriendRequest=" << to_string(ableToReceiveFriendRequest);
  out << ", " << "chatMidToExcludeMembers=" << to_string(chatMidToExcludeMembers);
  out << ", " << "includingMe=" << to_string(includingMe);
  out << ")";
}


SearchSquareMembersRequest::~SearchSquareMembersRequest() throw() {
}


void SearchSquareMembersRequest::__set_squareMid(const std::string& val) {
  this->squareMid = val;
}

void SearchSquareMembersRequest::__set_searchOption(const SquareMemberSearchOption& val) {
  this->searchOption = val;
}

void SearchSquareMembersRequest::__set_continuationToken(const std::string& val) {
  this->continuationToken = val;
}

void SearchSquareMembersRequest::__set_limit(const int32_t val) {
  this->limit = val;
}
std::ostream& operator<<(std::ostream& out, const SearchSquareMembersRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SearchSquareMembersRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMid);
          this->__isset.squareMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->searchOption.read(iprot);
          this->__isset.searchOption = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->continuationToken);
          this->__isset.continuationToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SearchSquareMembersRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SearchSquareMembersRequest");

  xfer += oprot->writeFieldBegin("squareMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("searchOption", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->searchOption.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("continuationToken", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->continuationToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->limit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SearchSquareMembersRequest &a, SearchSquareMembersRequest &b) {
  using ::std::swap;
  swap(a.squareMid, b.squareMid);
  swap(a.searchOption, b.searchOption);
  swap(a.continuationToken, b.continuationToken);
  swap(a.limit, b.limit);
  swap(a.__isset, b.__isset);
}

SearchSquareMembersRequest::SearchSquareMembersRequest(const SearchSquareMembersRequest& other1269) {
  squareMid = other1269.squareMid;
  searchOption = other1269.searchOption;
  continuationToken = other1269.continuationToken;
  limit = other1269.limit;
  __isset = other1269.__isset;
}
SearchSquareMembersRequest& SearchSquareMembersRequest::operator=(const SearchSquareMembersRequest& other1270) {
  squareMid = other1270.squareMid;
  searchOption = other1270.searchOption;
  continuationToken = other1270.continuationToken;
  limit = other1270.limit;
  __isset = other1270.__isset;
  return *this;
}
void SearchSquareMembersRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SearchSquareMembersRequest(";
  out << "squareMid=" << to_string(squareMid);
  out << ", " << "searchOption=" << to_string(searchOption);
  out << ", " << "continuationToken=" << to_string(continuationToken);
  out << ", " << "limit=" << to_string(limit);
  out << ")";
}


SearchSquareMembersResponse::~SearchSquareMembersResponse() throw() {
}


void SearchSquareMembersResponse::__set_members(const std::vector<SquareMember> & val) {
  this->members = val;
}

void SearchSquareMembersResponse::__set_revision(const int64_t val) {
  this->revision = val;
}

void SearchSquareMembersResponse::__set_continuationToken(const std::string& val) {
  this->continuationToken = val;
}

void SearchSquareMembersResponse::__set_totalCount(const int32_t val) {
  this->totalCount = val;
}
std::ostream& operator<<(std::ostream& out, const SearchSquareMembersResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SearchSquareMembersResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->members.clear();
            uint32_t _size1271;
            ::apache::thrift::protocol::TType _etype1274;
            xfer += iprot->readListBegin(_etype1274, _size1271);
            this->members.resize(_size1271);
            uint32_t _i1275;
            for (_i1275 = 0; _i1275 < _size1271; ++_i1275)
            {
              xfer += this->members[_i1275].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.members = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->revision);
          this->__isset.revision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->continuationToken);
          this->__isset.continuationToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalCount);
          this->__isset.totalCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SearchSquareMembersResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SearchSquareMembersResponse");

  xfer += oprot->writeFieldBegin("members", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->members.size()));
    std::vector<SquareMember> ::const_iterator _iter1276;
    for (_iter1276 = this->members.begin(); _iter1276 != this->members.end(); ++_iter1276)
    {
      xfer += (*_iter1276).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("revision", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->revision);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("continuationToken", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->continuationToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalCount", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->totalCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SearchSquareMembersResponse &a, SearchSquareMembersResponse &b) {
  using ::std::swap;
  swap(a.members, b.members);
  swap(a.revision, b.revision);
  swap(a.continuationToken, b.continuationToken);
  swap(a.totalCount, b.totalCount);
  swap(a.__isset, b.__isset);
}

SearchSquareMembersResponse::SearchSquareMembersResponse(const SearchSquareMembersResponse& other1277) {
  members = other1277.members;
  revision = other1277.revision;
  continuationToken = other1277.continuationToken;
  totalCount = other1277.totalCount;
  __isset = other1277.__isset;
}
SearchSquareMembersResponse& SearchSquareMembersResponse::operator=(const SearchSquareMembersResponse& other1278) {
  members = other1278.members;
  revision = other1278.revision;
  continuationToken = other1278.continuationToken;
  totalCount = other1278.totalCount;
  __isset = other1278.__isset;
  return *this;
}
void SearchSquareMembersResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SearchSquareMembersResponse(";
  out << "members=" << to_string(members);
  out << ", " << "revision=" << to_string(revision);
  out << ", " << "continuationToken=" << to_string(continuationToken);
  out << ", " << "totalCount=" << to_string(totalCount);
  out << ")";
}


FindSquareByInvitationTicketRequest::~FindSquareByInvitationTicketRequest() throw() {
}


void FindSquareByInvitationTicketRequest::__set_invitationTicket(const std::string& val) {
  this->invitationTicket = val;
}
std::ostream& operator<<(std::ostream& out, const FindSquareByInvitationTicketRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t FindSquareByInvitationTicketRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->invitationTicket);
          this->__isset.invitationTicket = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FindSquareByInvitationTicketRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FindSquareByInvitationTicketRequest");

  xfer += oprot->writeFieldBegin("invitationTicket", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->invitationTicket);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FindSquareByInvitationTicketRequest &a, FindSquareByInvitationTicketRequest &b) {
  using ::std::swap;
  swap(a.invitationTicket, b.invitationTicket);
  swap(a.__isset, b.__isset);
}

FindSquareByInvitationTicketRequest::FindSquareByInvitationTicketRequest(const FindSquareByInvitationTicketRequest& other1279) {
  invitationTicket = other1279.invitationTicket;
  __isset = other1279.__isset;
}
FindSquareByInvitationTicketRequest& FindSquareByInvitationTicketRequest::operator=(const FindSquareByInvitationTicketRequest& other1280) {
  invitationTicket = other1280.invitationTicket;
  __isset = other1280.__isset;
  return *this;
}
void FindSquareByInvitationTicketRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FindSquareByInvitationTicketRequest(";
  out << "invitationTicket=" << to_string(invitationTicket);
  out << ")";
}


FindSquareByInvitationTicketResponse::~FindSquareByInvitationTicketResponse() throw() {
}


void FindSquareByInvitationTicketResponse::__set_square(const Square& val) {
  this->square = val;
}

void FindSquareByInvitationTicketResponse::__set_myMembership(const SquareMember& val) {
  this->myMembership = val;
}

void FindSquareByInvitationTicketResponse::__set_squareAuthority(const SquareAuthority& val) {
  this->squareAuthority = val;
}

void FindSquareByInvitationTicketResponse::__set_squareStatus(const SquareStatus& val) {
  this->squareStatus = val;
}
std::ostream& operator<<(std::ostream& out, const FindSquareByInvitationTicketResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t FindSquareByInvitationTicketResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->square.read(iprot);
          this->__isset.square = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->myMembership.read(iprot);
          this->__isset.myMembership = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareAuthority.read(iprot);
          this->__isset.squareAuthority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareStatus.read(iprot);
          this->__isset.squareStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FindSquareByInvitationTicketResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FindSquareByInvitationTicketResponse");

  xfer += oprot->writeFieldBegin("square", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->square.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("myMembership", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->myMembership.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareAuthority", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->squareAuthority.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareStatus", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->squareStatus.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FindSquareByInvitationTicketResponse &a, FindSquareByInvitationTicketResponse &b) {
  using ::std::swap;
  swap(a.square, b.square);
  swap(a.myMembership, b.myMembership);
  swap(a.squareAuthority, b.squareAuthority);
  swap(a.squareStatus, b.squareStatus);
  swap(a.__isset, b.__isset);
}

FindSquareByInvitationTicketResponse::FindSquareByInvitationTicketResponse(const FindSquareByInvitationTicketResponse& other1281) {
  square = other1281.square;
  myMembership = other1281.myMembership;
  squareAuthority = other1281.squareAuthority;
  squareStatus = other1281.squareStatus;
  __isset = other1281.__isset;
}
FindSquareByInvitationTicketResponse& FindSquareByInvitationTicketResponse::operator=(const FindSquareByInvitationTicketResponse& other1282) {
  square = other1282.square;
  myMembership = other1282.myMembership;
  squareAuthority = other1282.squareAuthority;
  squareStatus = other1282.squareStatus;
  __isset = other1282.__isset;
  return *this;
}
void FindSquareByInvitationTicketResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FindSquareByInvitationTicketResponse(";
  out << "square=" << to_string(square);
  out << ", " << "myMembership=" << to_string(myMembership);
  out << ", " << "squareAuthority=" << to_string(squareAuthority);
  out << ", " << "squareStatus=" << to_string(squareStatus);
  out << ")";
}


SquareEventReceiveMessage::~SquareEventReceiveMessage() throw() {
}


void SquareEventReceiveMessage::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}

void SquareEventReceiveMessage::__set_squareMessage(const SquareMessage& val) {
  this->squareMessage = val;
}
std::ostream& operator<<(std::ostream& out, const SquareEventReceiveMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareEventReceiveMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareMessage.read(iprot);
          this->__isset.squareMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareEventReceiveMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareEventReceiveMessage");

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareMessage", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->squareMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareEventReceiveMessage &a, SquareEventReceiveMessage &b) {
  using ::std::swap;
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.squareMessage, b.squareMessage);
  swap(a.__isset, b.__isset);
}

SquareEventReceiveMessage::SquareEventReceiveMessage(const SquareEventReceiveMessage& other1283) {
  squareChatMid = other1283.squareChatMid;
  squareMessage = other1283.squareMessage;
  __isset = other1283.__isset;
}
SquareEventReceiveMessage& SquareEventReceiveMessage::operator=(const SquareEventReceiveMessage& other1284) {
  squareChatMid = other1284.squareChatMid;
  squareMessage = other1284.squareMessage;
  __isset = other1284.__isset;
  return *this;
}
void SquareEventReceiveMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareEventReceiveMessage(";
  out << "squareChatMid=" << to_string(squareChatMid);
  out << ", " << "squareMessage=" << to_string(squareMessage);
  out << ")";
}


SquareEventSendMessage::~SquareEventSendMessage() throw() {
}


void SquareEventSendMessage::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}

void SquareEventSendMessage::__set_squareMessage(const SquareMessage& val) {
  this->squareMessage = val;
}

void SquareEventSendMessage::__set_reqSeq(const int32_t val) {
  this->reqSeq = val;
}
std::ostream& operator<<(std::ostream& out, const SquareEventSendMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareEventSendMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareMessage.read(iprot);
          this->__isset.squareMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->reqSeq);
          this->__isset.reqSeq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareEventSendMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareEventSendMessage");

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareMessage", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->squareMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reqSeq", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->reqSeq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareEventSendMessage &a, SquareEventSendMessage &b) {
  using ::std::swap;
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.squareMessage, b.squareMessage);
  swap(a.reqSeq, b.reqSeq);
  swap(a.__isset, b.__isset);
}

SquareEventSendMessage::SquareEventSendMessage(const SquareEventSendMessage& other1285) {
  squareChatMid = other1285.squareChatMid;
  squareMessage = other1285.squareMessage;
  reqSeq = other1285.reqSeq;
  __isset = other1285.__isset;
}
SquareEventSendMessage& SquareEventSendMessage::operator=(const SquareEventSendMessage& other1286) {
  squareChatMid = other1286.squareChatMid;
  squareMessage = other1286.squareMessage;
  reqSeq = other1286.reqSeq;
  __isset = other1286.__isset;
  return *this;
}
void SquareEventSendMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareEventSendMessage(";
  out << "squareChatMid=" << to_string(squareChatMid);
  out << ", " << "squareMessage=" << to_string(squareMessage);
  out << ", " << "reqSeq=" << to_string(reqSeq);
  out << ")";
}


SquareEventNotifiedJoinSquareChat::~SquareEventNotifiedJoinSquareChat() throw() {
}


void SquareEventNotifiedJoinSquareChat::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}

void SquareEventNotifiedJoinSquareChat::__set_joinedMember(const SquareMember& val) {
  this->joinedMember = val;
}
std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedJoinSquareChat& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareEventNotifiedJoinSquareChat::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->joinedMember.read(iprot);
          this->__isset.joinedMember = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareEventNotifiedJoinSquareChat::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareEventNotifiedJoinSquareChat");

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("joinedMember", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->joinedMember.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareEventNotifiedJoinSquareChat &a, SquareEventNotifiedJoinSquareChat &b) {
  using ::std::swap;
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.joinedMember, b.joinedMember);
  swap(a.__isset, b.__isset);
}

SquareEventNotifiedJoinSquareChat::SquareEventNotifiedJoinSquareChat(const SquareEventNotifiedJoinSquareChat& other1287) {
  squareChatMid = other1287.squareChatMid;
  joinedMember = other1287.joinedMember;
  __isset = other1287.__isset;
}
SquareEventNotifiedJoinSquareChat& SquareEventNotifiedJoinSquareChat::operator=(const SquareEventNotifiedJoinSquareChat& other1288) {
  squareChatMid = other1288.squareChatMid;
  joinedMember = other1288.joinedMember;
  __isset = other1288.__isset;
  return *this;
}
void SquareEventNotifiedJoinSquareChat::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareEventNotifiedJoinSquareChat(";
  out << "squareChatMid=" << to_string(squareChatMid);
  out << ", " << "joinedMember=" << to_string(joinedMember);
  out << ")";
}


SquareEventNotifiedInviteIntoSquareChat::~SquareEventNotifiedInviteIntoSquareChat() throw() {
}


void SquareEventNotifiedInviteIntoSquareChat::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}

void SquareEventNotifiedInviteIntoSquareChat::__set_invitees(const std::vector<SquareMember> & val) {
  this->invitees = val;
}

void SquareEventNotifiedInviteIntoSquareChat::__set_invitor(const SquareMember& val) {
  this->invitor = val;
}

void SquareEventNotifiedInviteIntoSquareChat::__set_invitorRelation(const SquareMemberRelation& val) {
  this->invitorRelation = val;
}
std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedInviteIntoSquareChat& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareEventNotifiedInviteIntoSquareChat::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->invitees.clear();
            uint32_t _size1289;
            ::apache::thrift::protocol::TType _etype1292;
            xfer += iprot->readListBegin(_etype1292, _size1289);
            this->invitees.resize(_size1289);
            uint32_t _i1293;
            for (_i1293 = 0; _i1293 < _size1289; ++_i1293)
            {
              xfer += this->invitees[_i1293].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.invitees = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->invitor.read(iprot);
          this->__isset.invitor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->invitorRelation.read(iprot);
          this->__isset.invitorRelation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareEventNotifiedInviteIntoSquareChat::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareEventNotifiedInviteIntoSquareChat");

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("invitees", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->invitees.size()));
    std::vector<SquareMember> ::const_iterator _iter1294;
    for (_iter1294 = this->invitees.begin(); _iter1294 != this->invitees.end(); ++_iter1294)
    {
      xfer += (*_iter1294).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("invitor", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->invitor.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("invitorRelation", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->invitorRelation.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareEventNotifiedInviteIntoSquareChat &a, SquareEventNotifiedInviteIntoSquareChat &b) {
  using ::std::swap;
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.invitees, b.invitees);
  swap(a.invitor, b.invitor);
  swap(a.invitorRelation, b.invitorRelation);
  swap(a.__isset, b.__isset);
}

SquareEventNotifiedInviteIntoSquareChat::SquareEventNotifiedInviteIntoSquareChat(const SquareEventNotifiedInviteIntoSquareChat& other1295) {
  squareChatMid = other1295.squareChatMid;
  invitees = other1295.invitees;
  invitor = other1295.invitor;
  invitorRelation = other1295.invitorRelation;
  __isset = other1295.__isset;
}
SquareEventNotifiedInviteIntoSquareChat& SquareEventNotifiedInviteIntoSquareChat::operator=(const SquareEventNotifiedInviteIntoSquareChat& other1296) {
  squareChatMid = other1296.squareChatMid;
  invitees = other1296.invitees;
  invitor = other1296.invitor;
  invitorRelation = other1296.invitorRelation;
  __isset = other1296.__isset;
  return *this;
}
void SquareEventNotifiedInviteIntoSquareChat::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareEventNotifiedInviteIntoSquareChat(";
  out << "squareChatMid=" << to_string(squareChatMid);
  out << ", " << "invitees=" << to_string(invitees);
  out << ", " << "invitor=" << to_string(invitor);
  out << ", " << "invitorRelation=" << to_string(invitorRelation);
  out << ")";
}


SquareEventNotifiedLeaveSquareChat::~SquareEventNotifiedLeaveSquareChat() throw() {
}


void SquareEventNotifiedLeaveSquareChat::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}

void SquareEventNotifiedLeaveSquareChat::__set_squareMemberMid(const std::string& val) {
  this->squareMemberMid = val;
}

void SquareEventNotifiedLeaveSquareChat::__set_sayGoodbye(const bool val) {
  this->sayGoodbye = val;
}

void SquareEventNotifiedLeaveSquareChat::__set_squareMember(const SquareMember& val) {
  this->squareMember = val;
}
std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedLeaveSquareChat& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareEventNotifiedLeaveSquareChat::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMemberMid);
          this->__isset.squareMemberMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->sayGoodbye);
          this->__isset.sayGoodbye = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareMember.read(iprot);
          this->__isset.squareMember = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareEventNotifiedLeaveSquareChat::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareEventNotifiedLeaveSquareChat");

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareMemberMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareMemberMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sayGoodbye", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->sayGoodbye);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareMember", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->squareMember.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareEventNotifiedLeaveSquareChat &a, SquareEventNotifiedLeaveSquareChat &b) {
  using ::std::swap;
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.squareMemberMid, b.squareMemberMid);
  swap(a.sayGoodbye, b.sayGoodbye);
  swap(a.squareMember, b.squareMember);
  swap(a.__isset, b.__isset);
}

SquareEventNotifiedLeaveSquareChat::SquareEventNotifiedLeaveSquareChat(const SquareEventNotifiedLeaveSquareChat& other1297) {
  squareChatMid = other1297.squareChatMid;
  squareMemberMid = other1297.squareMemberMid;
  sayGoodbye = other1297.sayGoodbye;
  squareMember = other1297.squareMember;
  __isset = other1297.__isset;
}
SquareEventNotifiedLeaveSquareChat& SquareEventNotifiedLeaveSquareChat::operator=(const SquareEventNotifiedLeaveSquareChat& other1298) {
  squareChatMid = other1298.squareChatMid;
  squareMemberMid = other1298.squareMemberMid;
  sayGoodbye = other1298.sayGoodbye;
  squareMember = other1298.squareMember;
  __isset = other1298.__isset;
  return *this;
}
void SquareEventNotifiedLeaveSquareChat::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareEventNotifiedLeaveSquareChat(";
  out << "squareChatMid=" << to_string(squareChatMid);
  out << ", " << "squareMemberMid=" << to_string(squareMemberMid);
  out << ", " << "sayGoodbye=" << to_string(sayGoodbye);
  out << ", " << "squareMember=" << to_string(squareMember);
  out << ")";
}


SquareEventNotifiedDestroyMessage::~SquareEventNotifiedDestroyMessage() throw() {
}


void SquareEventNotifiedDestroyMessage::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}

void SquareEventNotifiedDestroyMessage::__set_messageId(const std::string& val) {
  this->messageId = val;
}
std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedDestroyMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareEventNotifiedDestroyMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageId);
          this->__isset.messageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareEventNotifiedDestroyMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareEventNotifiedDestroyMessage");

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->messageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareEventNotifiedDestroyMessage &a, SquareEventNotifiedDestroyMessage &b) {
  using ::std::swap;
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.messageId, b.messageId);
  swap(a.__isset, b.__isset);
}

SquareEventNotifiedDestroyMessage::SquareEventNotifiedDestroyMessage(const SquareEventNotifiedDestroyMessage& other1299) {
  squareChatMid = other1299.squareChatMid;
  messageId = other1299.messageId;
  __isset = other1299.__isset;
}
SquareEventNotifiedDestroyMessage& SquareEventNotifiedDestroyMessage::operator=(const SquareEventNotifiedDestroyMessage& other1300) {
  squareChatMid = other1300.squareChatMid;
  messageId = other1300.messageId;
  __isset = other1300.__isset;
  return *this;
}
void SquareEventNotifiedDestroyMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareEventNotifiedDestroyMessage(";
  out << "squareChatMid=" << to_string(squareChatMid);
  out << ", " << "messageId=" << to_string(messageId);
  out << ")";
}


SquareEventNotifiedMarkAsRead::~SquareEventNotifiedMarkAsRead() throw() {
}


void SquareEventNotifiedMarkAsRead::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}

void SquareEventNotifiedMarkAsRead::__set_sMemberMid(const std::string& val) {
  this->sMemberMid = val;
}

void SquareEventNotifiedMarkAsRead::__set_messageId(const std::string& val) {
  this->messageId = val;
}
std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedMarkAsRead& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareEventNotifiedMarkAsRead::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sMemberMid);
          this->__isset.sMemberMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageId);
          this->__isset.messageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareEventNotifiedMarkAsRead::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareEventNotifiedMarkAsRead");

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sMemberMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->sMemberMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageId", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->messageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareEventNotifiedMarkAsRead &a, SquareEventNotifiedMarkAsRead &b) {
  using ::std::swap;
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.sMemberMid, b.sMemberMid);
  swap(a.messageId, b.messageId);
  swap(a.__isset, b.__isset);
}

SquareEventNotifiedMarkAsRead::SquareEventNotifiedMarkAsRead(const SquareEventNotifiedMarkAsRead& other1301) {
  squareChatMid = other1301.squareChatMid;
  sMemberMid = other1301.sMemberMid;
  messageId = other1301.messageId;
  __isset = other1301.__isset;
}
SquareEventNotifiedMarkAsRead& SquareEventNotifiedMarkAsRead::operator=(const SquareEventNotifiedMarkAsRead& other1302) {
  squareChatMid = other1302.squareChatMid;
  sMemberMid = other1302.sMemberMid;
  messageId = other1302.messageId;
  __isset = other1302.__isset;
  return *this;
}
void SquareEventNotifiedMarkAsRead::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareEventNotifiedMarkAsRead(";
  out << "squareChatMid=" << to_string(squareChatMid);
  out << ", " << "sMemberMid=" << to_string(sMemberMid);
  out << ", " << "messageId=" << to_string(messageId);
  out << ")";
}


SquareEventNotifiedUpdateSquareMemberProfile::~SquareEventNotifiedUpdateSquareMemberProfile() throw() {
}


void SquareEventNotifiedUpdateSquareMemberProfile::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}

void SquareEventNotifiedUpdateSquareMemberProfile::__set_squareMember(const SquareMember& val) {
  this->squareMember = val;
}
std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedUpdateSquareMemberProfile& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareEventNotifiedUpdateSquareMemberProfile::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareMember.read(iprot);
          this->__isset.squareMember = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareEventNotifiedUpdateSquareMemberProfile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareEventNotifiedUpdateSquareMemberProfile");

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareMember", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->squareMember.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareEventNotifiedUpdateSquareMemberProfile &a, SquareEventNotifiedUpdateSquareMemberProfile &b) {
  using ::std::swap;
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.squareMember, b.squareMember);
  swap(a.__isset, b.__isset);
}

SquareEventNotifiedUpdateSquareMemberProfile::SquareEventNotifiedUpdateSquareMemberProfile(const SquareEventNotifiedUpdateSquareMemberProfile& other1303) {
  squareChatMid = other1303.squareChatMid;
  squareMember = other1303.squareMember;
  __isset = other1303.__isset;
}
SquareEventNotifiedUpdateSquareMemberProfile& SquareEventNotifiedUpdateSquareMemberProfile::operator=(const SquareEventNotifiedUpdateSquareMemberProfile& other1304) {
  squareChatMid = other1304.squareChatMid;
  squareMember = other1304.squareMember;
  __isset = other1304.__isset;
  return *this;
}
void SquareEventNotifiedUpdateSquareMemberProfile::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareEventNotifiedUpdateSquareMemberProfile(";
  out << "squareChatMid=" << to_string(squareChatMid);
  out << ", " << "squareMember=" << to_string(squareMember);
  out << ")";
}


SquareEventNotifiedKickoutFromSquare::~SquareEventNotifiedKickoutFromSquare() throw() {
}


void SquareEventNotifiedKickoutFromSquare::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}

void SquareEventNotifiedKickoutFromSquare::__set_kickees(const std::vector<SquareMember> & val) {
  this->kickees = val;
}
std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedKickoutFromSquare& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareEventNotifiedKickoutFromSquare::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->kickees.clear();
            uint32_t _size1305;
            ::apache::thrift::protocol::TType _etype1308;
            xfer += iprot->readListBegin(_etype1308, _size1305);
            this->kickees.resize(_size1305);
            uint32_t _i1309;
            for (_i1309 = 0; _i1309 < _size1305; ++_i1309)
            {
              xfer += this->kickees[_i1309].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.kickees = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareEventNotifiedKickoutFromSquare::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareEventNotifiedKickoutFromSquare");

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kickees", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->kickees.size()));
    std::vector<SquareMember> ::const_iterator _iter1310;
    for (_iter1310 = this->kickees.begin(); _iter1310 != this->kickees.end(); ++_iter1310)
    {
      xfer += (*_iter1310).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareEventNotifiedKickoutFromSquare &a, SquareEventNotifiedKickoutFromSquare &b) {
  using ::std::swap;
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.kickees, b.kickees);
  swap(a.__isset, b.__isset);
}

SquareEventNotifiedKickoutFromSquare::SquareEventNotifiedKickoutFromSquare(const SquareEventNotifiedKickoutFromSquare& other1311) {
  squareChatMid = other1311.squareChatMid;
  kickees = other1311.kickees;
  __isset = other1311.__isset;
}
SquareEventNotifiedKickoutFromSquare& SquareEventNotifiedKickoutFromSquare::operator=(const SquareEventNotifiedKickoutFromSquare& other1312) {
  squareChatMid = other1312.squareChatMid;
  kickees = other1312.kickees;
  __isset = other1312.__isset;
  return *this;
}
void SquareEventNotifiedKickoutFromSquare::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareEventNotifiedKickoutFromSquare(";
  out << "squareChatMid=" << to_string(squareChatMid);
  out << ", " << "kickees=" << to_string(kickees);
  out << ")";
}


SquareEventNotifiedShutdownSquare::~SquareEventNotifiedShutdownSquare() throw() {
}


void SquareEventNotifiedShutdownSquare::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}

void SquareEventNotifiedShutdownSquare::__set_square(const Square& val) {
  this->square = val;
}
std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedShutdownSquare& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareEventNotifiedShutdownSquare::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->square.read(iprot);
          this->__isset.square = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareEventNotifiedShutdownSquare::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareEventNotifiedShutdownSquare");

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("square", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->square.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareEventNotifiedShutdownSquare &a, SquareEventNotifiedShutdownSquare &b) {
  using ::std::swap;
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.square, b.square);
  swap(a.__isset, b.__isset);
}

SquareEventNotifiedShutdownSquare::SquareEventNotifiedShutdownSquare(const SquareEventNotifiedShutdownSquare& other1313) {
  squareChatMid = other1313.squareChatMid;
  square = other1313.square;
  __isset = other1313.__isset;
}
SquareEventNotifiedShutdownSquare& SquareEventNotifiedShutdownSquare::operator=(const SquareEventNotifiedShutdownSquare& other1314) {
  squareChatMid = other1314.squareChatMid;
  square = other1314.square;
  __isset = other1314.__isset;
  return *this;
}
void SquareEventNotifiedShutdownSquare::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareEventNotifiedShutdownSquare(";
  out << "squareChatMid=" << to_string(squareChatMid);
  out << ", " << "square=" << to_string(square);
  out << ")";
}


SquareEventNotifiedDeleteSquareChat::~SquareEventNotifiedDeleteSquareChat() throw() {
}


void SquareEventNotifiedDeleteSquareChat::__set_squareChat(const SquareChat& val) {
  this->squareChat = val;
}
std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedDeleteSquareChat& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareEventNotifiedDeleteSquareChat::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareChat.read(iprot);
          this->__isset.squareChat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareEventNotifiedDeleteSquareChat::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareEventNotifiedDeleteSquareChat");

  xfer += oprot->writeFieldBegin("squareChat", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->squareChat.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareEventNotifiedDeleteSquareChat &a, SquareEventNotifiedDeleteSquareChat &b) {
  using ::std::swap;
  swap(a.squareChat, b.squareChat);
  swap(a.__isset, b.__isset);
}

SquareEventNotifiedDeleteSquareChat::SquareEventNotifiedDeleteSquareChat(const SquareEventNotifiedDeleteSquareChat& other1315) {
  squareChat = other1315.squareChat;
  __isset = other1315.__isset;
}
SquareEventNotifiedDeleteSquareChat& SquareEventNotifiedDeleteSquareChat::operator=(const SquareEventNotifiedDeleteSquareChat& other1316) {
  squareChat = other1316.squareChat;
  __isset = other1316.__isset;
  return *this;
}
void SquareEventNotifiedDeleteSquareChat::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareEventNotifiedDeleteSquareChat(";
  out << "squareChat=" << to_string(squareChat);
  out << ")";
}


SquareEventNotifiedUpdateSquareChatProfileName::~SquareEventNotifiedUpdateSquareChatProfileName() throw() {
}


void SquareEventNotifiedUpdateSquareChatProfileName::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}

void SquareEventNotifiedUpdateSquareChatProfileName::__set_editor(const SquareMember& val) {
  this->editor = val;
}

void SquareEventNotifiedUpdateSquareChatProfileName::__set_updatedChatName(const std::string& val) {
  this->updatedChatName = val;
}
std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedUpdateSquareChatProfileName& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareEventNotifiedUpdateSquareChatProfileName::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->editor.read(iprot);
          this->__isset.editor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->updatedChatName);
          this->__isset.updatedChatName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareEventNotifiedUpdateSquareChatProfileName::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareEventNotifiedUpdateSquareChatProfileName");

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("editor", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->editor.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("updatedChatName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->updatedChatName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareEventNotifiedUpdateSquareChatProfileName &a, SquareEventNotifiedUpdateSquareChatProfileName &b) {
  using ::std::swap;
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.editor, b.editor);
  swap(a.updatedChatName, b.updatedChatName);
  swap(a.__isset, b.__isset);
}

SquareEventNotifiedUpdateSquareChatProfileName::SquareEventNotifiedUpdateSquareChatProfileName(const SquareEventNotifiedUpdateSquareChatProfileName& other1317) {
  squareChatMid = other1317.squareChatMid;
  editor = other1317.editor;
  updatedChatName = other1317.updatedChatName;
  __isset = other1317.__isset;
}
SquareEventNotifiedUpdateSquareChatProfileName& SquareEventNotifiedUpdateSquareChatProfileName::operator=(const SquareEventNotifiedUpdateSquareChatProfileName& other1318) {
  squareChatMid = other1318.squareChatMid;
  editor = other1318.editor;
  updatedChatName = other1318.updatedChatName;
  __isset = other1318.__isset;
  return *this;
}
void SquareEventNotifiedUpdateSquareChatProfileName::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareEventNotifiedUpdateSquareChatProfileName(";
  out << "squareChatMid=" << to_string(squareChatMid);
  out << ", " << "editor=" << to_string(editor);
  out << ", " << "updatedChatName=" << to_string(updatedChatName);
  out << ")";
}


SquareEventNotifiedUpdateSquareChatProfileImage::~SquareEventNotifiedUpdateSquareChatProfileImage() throw() {
}


void SquareEventNotifiedUpdateSquareChatProfileImage::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}

void SquareEventNotifiedUpdateSquareChatProfileImage::__set_editor(const SquareMember& val) {
  this->editor = val;
}
std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedUpdateSquareChatProfileImage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareEventNotifiedUpdateSquareChatProfileImage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->editor.read(iprot);
          this->__isset.editor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareEventNotifiedUpdateSquareChatProfileImage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareEventNotifiedUpdateSquareChatProfileImage");

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("editor", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->editor.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareEventNotifiedUpdateSquareChatProfileImage &a, SquareEventNotifiedUpdateSquareChatProfileImage &b) {
  using ::std::swap;
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.editor, b.editor);
  swap(a.__isset, b.__isset);
}

SquareEventNotifiedUpdateSquareChatProfileImage::SquareEventNotifiedUpdateSquareChatProfileImage(const SquareEventNotifiedUpdateSquareChatProfileImage& other1319) {
  squareChatMid = other1319.squareChatMid;
  editor = other1319.editor;
  __isset = other1319.__isset;
}
SquareEventNotifiedUpdateSquareChatProfileImage& SquareEventNotifiedUpdateSquareChatProfileImage::operator=(const SquareEventNotifiedUpdateSquareChatProfileImage& other1320) {
  squareChatMid = other1320.squareChatMid;
  editor = other1320.editor;
  __isset = other1320.__isset;
  return *this;
}
void SquareEventNotifiedUpdateSquareChatProfileImage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareEventNotifiedUpdateSquareChatProfileImage(";
  out << "squareChatMid=" << to_string(squareChatMid);
  out << ", " << "editor=" << to_string(editor);
  out << ")";
}


SquareEventNotifiedUpdateSquareChatStatus::~SquareEventNotifiedUpdateSquareChatStatus() throw() {
}


void SquareEventNotifiedUpdateSquareChatStatus::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}

void SquareEventNotifiedUpdateSquareChatStatus::__set_statusWithoutMessage(const SquareChatStatusWithoutMessage& val) {
  this->statusWithoutMessage = val;
}
std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedUpdateSquareChatStatus& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareEventNotifiedUpdateSquareChatStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->statusWithoutMessage.read(iprot);
          this->__isset.statusWithoutMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareEventNotifiedUpdateSquareChatStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareEventNotifiedUpdateSquareChatStatus");

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("statusWithoutMessage", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->statusWithoutMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareEventNotifiedUpdateSquareChatStatus &a, SquareEventNotifiedUpdateSquareChatStatus &b) {
  using ::std::swap;
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.statusWithoutMessage, b.statusWithoutMessage);
  swap(a.__isset, b.__isset);
}

SquareEventNotifiedUpdateSquareChatStatus::SquareEventNotifiedUpdateSquareChatStatus(const SquareEventNotifiedUpdateSquareChatStatus& other1321) {
  squareChatMid = other1321.squareChatMid;
  statusWithoutMessage = other1321.statusWithoutMessage;
  __isset = other1321.__isset;
}
SquareEventNotifiedUpdateSquareChatStatus& SquareEventNotifiedUpdateSquareChatStatus::operator=(const SquareEventNotifiedUpdateSquareChatStatus& other1322) {
  squareChatMid = other1322.squareChatMid;
  statusWithoutMessage = other1322.statusWithoutMessage;
  __isset = other1322.__isset;
  return *this;
}
void SquareEventNotifiedUpdateSquareChatStatus::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareEventNotifiedUpdateSquareChatStatus(";
  out << "squareChatMid=" << to_string(squareChatMid);
  out << ", " << "statusWithoutMessage=" << to_string(statusWithoutMessage);
  out << ")";
}


SquareEventNotifiedUpdateSquareStatus::~SquareEventNotifiedUpdateSquareStatus() throw() {
}


void SquareEventNotifiedUpdateSquareStatus::__set_squareMid(const std::string& val) {
  this->squareMid = val;
}

void SquareEventNotifiedUpdateSquareStatus::__set_squareStatus(const SquareStatus& val) {
  this->squareStatus = val;
}
std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedUpdateSquareStatus& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareEventNotifiedUpdateSquareStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMid);
          this->__isset.squareMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareStatus.read(iprot);
          this->__isset.squareStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareEventNotifiedUpdateSquareStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareEventNotifiedUpdateSquareStatus");

  xfer += oprot->writeFieldBegin("squareMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareStatus", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->squareStatus.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareEventNotifiedUpdateSquareStatus &a, SquareEventNotifiedUpdateSquareStatus &b) {
  using ::std::swap;
  swap(a.squareMid, b.squareMid);
  swap(a.squareStatus, b.squareStatus);
  swap(a.__isset, b.__isset);
}

SquareEventNotifiedUpdateSquareStatus::SquareEventNotifiedUpdateSquareStatus(const SquareEventNotifiedUpdateSquareStatus& other1323) {
  squareMid = other1323.squareMid;
  squareStatus = other1323.squareStatus;
  __isset = other1323.__isset;
}
SquareEventNotifiedUpdateSquareStatus& SquareEventNotifiedUpdateSquareStatus::operator=(const SquareEventNotifiedUpdateSquareStatus& other1324) {
  squareMid = other1324.squareMid;
  squareStatus = other1324.squareStatus;
  __isset = other1324.__isset;
  return *this;
}
void SquareEventNotifiedUpdateSquareStatus::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareEventNotifiedUpdateSquareStatus(";
  out << "squareMid=" << to_string(squareMid);
  out << ", " << "squareStatus=" << to_string(squareStatus);
  out << ")";
}


SquareEventNotifiedCreateSquareMember::~SquareEventNotifiedCreateSquareMember() throw() {
}


void SquareEventNotifiedCreateSquareMember::__set_square(const Square& val) {
  this->square = val;
}

void SquareEventNotifiedCreateSquareMember::__set_squareAuthority(const SquareAuthority& val) {
  this->squareAuthority = val;
}

void SquareEventNotifiedCreateSquareMember::__set_squareStatus(const SquareStatus& val) {
  this->squareStatus = val;
}

void SquareEventNotifiedCreateSquareMember::__set_squareMember(const SquareMember& val) {
  this->squareMember = val;
}

void SquareEventNotifiedCreateSquareMember::__set_squareFeatureSet(const SquareFeatureSet& val) {
  this->squareFeatureSet = val;
}
std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedCreateSquareMember& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareEventNotifiedCreateSquareMember::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->square.read(iprot);
          this->__isset.square = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareAuthority.read(iprot);
          this->__isset.squareAuthority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareStatus.read(iprot);
          this->__isset.squareStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareMember.read(iprot);
          this->__isset.squareMember = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareFeatureSet.read(iprot);
          this->__isset.squareFeatureSet = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareEventNotifiedCreateSquareMember::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareEventNotifiedCreateSquareMember");

  xfer += oprot->writeFieldBegin("square", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->square.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareAuthority", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->squareAuthority.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareStatus", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->squareStatus.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareMember", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->squareMember.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareFeatureSet", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->squareFeatureSet.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareEventNotifiedCreateSquareMember &a, SquareEventNotifiedCreateSquareMember &b) {
  using ::std::swap;
  swap(a.square, b.square);
  swap(a.squareAuthority, b.squareAuthority);
  swap(a.squareStatus, b.squareStatus);
  swap(a.squareMember, b.squareMember);
  swap(a.squareFeatureSet, b.squareFeatureSet);
  swap(a.__isset, b.__isset);
}

SquareEventNotifiedCreateSquareMember::SquareEventNotifiedCreateSquareMember(const SquareEventNotifiedCreateSquareMember& other1325) {
  square = other1325.square;
  squareAuthority = other1325.squareAuthority;
  squareStatus = other1325.squareStatus;
  squareMember = other1325.squareMember;
  squareFeatureSet = other1325.squareFeatureSet;
  __isset = other1325.__isset;
}
SquareEventNotifiedCreateSquareMember& SquareEventNotifiedCreateSquareMember::operator=(const SquareEventNotifiedCreateSquareMember& other1326) {
  square = other1326.square;
  squareAuthority = other1326.squareAuthority;
  squareStatus = other1326.squareStatus;
  squareMember = other1326.squareMember;
  squareFeatureSet = other1326.squareFeatureSet;
  __isset = other1326.__isset;
  return *this;
}
void SquareEventNotifiedCreateSquareMember::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareEventNotifiedCreateSquareMember(";
  out << "square=" << to_string(square);
  out << ", " << "squareAuthority=" << to_string(squareAuthority);
  out << ", " << "squareStatus=" << to_string(squareStatus);
  out << ", " << "squareMember=" << to_string(squareMember);
  out << ", " << "squareFeatureSet=" << to_string(squareFeatureSet);
  out << ")";
}


SquareEventNotifiedCreateSquareChatMember::~SquareEventNotifiedCreateSquareChatMember() throw() {
}


void SquareEventNotifiedCreateSquareChatMember::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}

void SquareEventNotifiedCreateSquareChatMember::__set_squareMemberMid(const std::string& val) {
  this->squareMemberMid = val;
}

void SquareEventNotifiedCreateSquareChatMember::__set_squareChatMember(const SquareChatMember& val) {
  this->squareChatMember = val;
}
std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedCreateSquareChatMember& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareEventNotifiedCreateSquareChatMember::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMemberMid);
          this->__isset.squareMemberMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareChatMember.read(iprot);
          this->__isset.squareChatMember = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareEventNotifiedCreateSquareChatMember::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareEventNotifiedCreateSquareChatMember");

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareMemberMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareMemberMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareChatMember", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->squareChatMember.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareEventNotifiedCreateSquareChatMember &a, SquareEventNotifiedCreateSquareChatMember &b) {
  using ::std::swap;
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.squareMemberMid, b.squareMemberMid);
  swap(a.squareChatMember, b.squareChatMember);
  swap(a.__isset, b.__isset);
}

SquareEventNotifiedCreateSquareChatMember::SquareEventNotifiedCreateSquareChatMember(const SquareEventNotifiedCreateSquareChatMember& other1327) {
  squareChatMid = other1327.squareChatMid;
  squareMemberMid = other1327.squareMemberMid;
  squareChatMember = other1327.squareChatMember;
  __isset = other1327.__isset;
}
SquareEventNotifiedCreateSquareChatMember& SquareEventNotifiedCreateSquareChatMember::operator=(const SquareEventNotifiedCreateSquareChatMember& other1328) {
  squareChatMid = other1328.squareChatMid;
  squareMemberMid = other1328.squareMemberMid;
  squareChatMember = other1328.squareChatMember;
  __isset = other1328.__isset;
  return *this;
}
void SquareEventNotifiedCreateSquareChatMember::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareEventNotifiedCreateSquareChatMember(";
  out << "squareChatMid=" << to_string(squareChatMid);
  out << ", " << "squareMemberMid=" << to_string(squareMemberMid);
  out << ", " << "squareChatMember=" << to_string(squareChatMember);
  out << ")";
}


SquareEventNotifiedUpdateSquareMemberRelation::~SquareEventNotifiedUpdateSquareMemberRelation() throw() {
}


void SquareEventNotifiedUpdateSquareMemberRelation::__set_squareMid(const std::string& val) {
  this->squareMid = val;
}

void SquareEventNotifiedUpdateSquareMemberRelation::__set_myMemberMid(const std::string& val) {
  this->myMemberMid = val;
}

void SquareEventNotifiedUpdateSquareMemberRelation::__set_targetSquareMemberMid(const std::string& val) {
  this->targetSquareMemberMid = val;
}

void SquareEventNotifiedUpdateSquareMemberRelation::__set_squareMemberRelation(const SquareMemberRelation& val) {
  this->squareMemberRelation = val;
}
std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedUpdateSquareMemberRelation& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareEventNotifiedUpdateSquareMemberRelation::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMid);
          this->__isset.squareMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->myMemberMid);
          this->__isset.myMemberMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->targetSquareMemberMid);
          this->__isset.targetSquareMemberMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareMemberRelation.read(iprot);
          this->__isset.squareMemberRelation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareEventNotifiedUpdateSquareMemberRelation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareEventNotifiedUpdateSquareMemberRelation");

  xfer += oprot->writeFieldBegin("squareMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("myMemberMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->myMemberMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("targetSquareMemberMid", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->targetSquareMemberMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareMemberRelation", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->squareMemberRelation.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareEventNotifiedUpdateSquareMemberRelation &a, SquareEventNotifiedUpdateSquareMemberRelation &b) {
  using ::std::swap;
  swap(a.squareMid, b.squareMid);
  swap(a.myMemberMid, b.myMemberMid);
  swap(a.targetSquareMemberMid, b.targetSquareMemberMid);
  swap(a.squareMemberRelation, b.squareMemberRelation);
  swap(a.__isset, b.__isset);
}

SquareEventNotifiedUpdateSquareMemberRelation::SquareEventNotifiedUpdateSquareMemberRelation(const SquareEventNotifiedUpdateSquareMemberRelation& other1329) {
  squareMid = other1329.squareMid;
  myMemberMid = other1329.myMemberMid;
  targetSquareMemberMid = other1329.targetSquareMemberMid;
  squareMemberRelation = other1329.squareMemberRelation;
  __isset = other1329.__isset;
}
SquareEventNotifiedUpdateSquareMemberRelation& SquareEventNotifiedUpdateSquareMemberRelation::operator=(const SquareEventNotifiedUpdateSquareMemberRelation& other1330) {
  squareMid = other1330.squareMid;
  myMemberMid = other1330.myMemberMid;
  targetSquareMemberMid = other1330.targetSquareMemberMid;
  squareMemberRelation = other1330.squareMemberRelation;
  __isset = other1330.__isset;
  return *this;
}
void SquareEventNotifiedUpdateSquareMemberRelation::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareEventNotifiedUpdateSquareMemberRelation(";
  out << "squareMid=" << to_string(squareMid);
  out << ", " << "myMemberMid=" << to_string(myMemberMid);
  out << ", " << "targetSquareMemberMid=" << to_string(targetSquareMemberMid);
  out << ", " << "squareMemberRelation=" << to_string(squareMemberRelation);
  out << ")";
}


SquareEventNotifiedUpdateSquare::~SquareEventNotifiedUpdateSquare() throw() {
}


void SquareEventNotifiedUpdateSquare::__set_squareMid(const std::string& val) {
  this->squareMid = val;
}

void SquareEventNotifiedUpdateSquare::__set_square(const Square& val) {
  this->square = val;
}
std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedUpdateSquare& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareEventNotifiedUpdateSquare::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMid);
          this->__isset.squareMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->square.read(iprot);
          this->__isset.square = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareEventNotifiedUpdateSquare::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareEventNotifiedUpdateSquare");

  xfer += oprot->writeFieldBegin("squareMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("square", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->square.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareEventNotifiedUpdateSquare &a, SquareEventNotifiedUpdateSquare &b) {
  using ::std::swap;
  swap(a.squareMid, b.squareMid);
  swap(a.square, b.square);
  swap(a.__isset, b.__isset);
}

SquareEventNotifiedUpdateSquare::SquareEventNotifiedUpdateSquare(const SquareEventNotifiedUpdateSquare& other1331) {
  squareMid = other1331.squareMid;
  square = other1331.square;
  __isset = other1331.__isset;
}
SquareEventNotifiedUpdateSquare& SquareEventNotifiedUpdateSquare::operator=(const SquareEventNotifiedUpdateSquare& other1332) {
  squareMid = other1332.squareMid;
  square = other1332.square;
  __isset = other1332.__isset;
  return *this;
}
void SquareEventNotifiedUpdateSquare::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareEventNotifiedUpdateSquare(";
  out << "squareMid=" << to_string(squareMid);
  out << ", " << "square=" << to_string(square);
  out << ")";
}


SquareEventNotifiedUpdateSquareMember::~SquareEventNotifiedUpdateSquareMember() throw() {
}


void SquareEventNotifiedUpdateSquareMember::__set_squareMid(const std::string& val) {
  this->squareMid = val;
}

void SquareEventNotifiedUpdateSquareMember::__set_squareMemberMid(const std::string& val) {
  this->squareMemberMid = val;
}

void SquareEventNotifiedUpdateSquareMember::__set_squareMember(const SquareMember& val) {
  this->squareMember = val;
}
std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedUpdateSquareMember& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareEventNotifiedUpdateSquareMember::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMid);
          this->__isset.squareMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMemberMid);
          this->__isset.squareMemberMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareMember.read(iprot);
          this->__isset.squareMember = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareEventNotifiedUpdateSquareMember::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareEventNotifiedUpdateSquareMember");

  xfer += oprot->writeFieldBegin("squareMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareMemberMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareMemberMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareMember", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->squareMember.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareEventNotifiedUpdateSquareMember &a, SquareEventNotifiedUpdateSquareMember &b) {
  using ::std::swap;
  swap(a.squareMid, b.squareMid);
  swap(a.squareMemberMid, b.squareMemberMid);
  swap(a.squareMember, b.squareMember);
  swap(a.__isset, b.__isset);
}

SquareEventNotifiedUpdateSquareMember::SquareEventNotifiedUpdateSquareMember(const SquareEventNotifiedUpdateSquareMember& other1333) {
  squareMid = other1333.squareMid;
  squareMemberMid = other1333.squareMemberMid;
  squareMember = other1333.squareMember;
  __isset = other1333.__isset;
}
SquareEventNotifiedUpdateSquareMember& SquareEventNotifiedUpdateSquareMember::operator=(const SquareEventNotifiedUpdateSquareMember& other1334) {
  squareMid = other1334.squareMid;
  squareMemberMid = other1334.squareMemberMid;
  squareMember = other1334.squareMember;
  __isset = other1334.__isset;
  return *this;
}
void SquareEventNotifiedUpdateSquareMember::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareEventNotifiedUpdateSquareMember(";
  out << "squareMid=" << to_string(squareMid);
  out << ", " << "squareMemberMid=" << to_string(squareMemberMid);
  out << ", " << "squareMember=" << to_string(squareMember);
  out << ")";
}


SquareEventNotifiedUpdateSquareChat::~SquareEventNotifiedUpdateSquareChat() throw() {
}


void SquareEventNotifiedUpdateSquareChat::__set_squareMid(const std::string& val) {
  this->squareMid = val;
}

void SquareEventNotifiedUpdateSquareChat::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}

void SquareEventNotifiedUpdateSquareChat::__set_squareChat(const SquareChat& val) {
  this->squareChat = val;
}
std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedUpdateSquareChat& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareEventNotifiedUpdateSquareChat::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMid);
          this->__isset.squareMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareChat.read(iprot);
          this->__isset.squareChat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareEventNotifiedUpdateSquareChat::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareEventNotifiedUpdateSquareChat");

  xfer += oprot->writeFieldBegin("squareMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareChat", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->squareChat.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareEventNotifiedUpdateSquareChat &a, SquareEventNotifiedUpdateSquareChat &b) {
  using ::std::swap;
  swap(a.squareMid, b.squareMid);
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.squareChat, b.squareChat);
  swap(a.__isset, b.__isset);
}

SquareEventNotifiedUpdateSquareChat::SquareEventNotifiedUpdateSquareChat(const SquareEventNotifiedUpdateSquareChat& other1335) {
  squareMid = other1335.squareMid;
  squareChatMid = other1335.squareChatMid;
  squareChat = other1335.squareChat;
  __isset = other1335.__isset;
}
SquareEventNotifiedUpdateSquareChat& SquareEventNotifiedUpdateSquareChat::operator=(const SquareEventNotifiedUpdateSquareChat& other1336) {
  squareMid = other1336.squareMid;
  squareChatMid = other1336.squareChatMid;
  squareChat = other1336.squareChat;
  __isset = other1336.__isset;
  return *this;
}
void SquareEventNotifiedUpdateSquareChat::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareEventNotifiedUpdateSquareChat(";
  out << "squareMid=" << to_string(squareMid);
  out << ", " << "squareChatMid=" << to_string(squareChatMid);
  out << ", " << "squareChat=" << to_string(squareChat);
  out << ")";
}


SquareEventNotificationJoinRequest::~SquareEventNotificationJoinRequest() throw() {
}


void SquareEventNotificationJoinRequest::__set_squareMid(const std::string& val) {
  this->squareMid = val;
}

void SquareEventNotificationJoinRequest::__set_squareName(const std::string& val) {
  this->squareName = val;
}

void SquareEventNotificationJoinRequest::__set_requestMemberName(const std::string& val) {
  this->requestMemberName = val;
}

void SquareEventNotificationJoinRequest::__set_profileImageObsHash(const std::string& val) {
  this->profileImageObsHash = val;
}
std::ostream& operator<<(std::ostream& out, const SquareEventNotificationJoinRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareEventNotificationJoinRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMid);
          this->__isset.squareMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareName);
          this->__isset.squareName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->requestMemberName);
          this->__isset.requestMemberName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->profileImageObsHash);
          this->__isset.profileImageObsHash = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareEventNotificationJoinRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareEventNotificationJoinRequest");

  xfer += oprot->writeFieldBegin("squareMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("requestMemberName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->requestMemberName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("profileImageObsHash", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->profileImageObsHash);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareEventNotificationJoinRequest &a, SquareEventNotificationJoinRequest &b) {
  using ::std::swap;
  swap(a.squareMid, b.squareMid);
  swap(a.squareName, b.squareName);
  swap(a.requestMemberName, b.requestMemberName);
  swap(a.profileImageObsHash, b.profileImageObsHash);
  swap(a.__isset, b.__isset);
}

SquareEventNotificationJoinRequest::SquareEventNotificationJoinRequest(const SquareEventNotificationJoinRequest& other1337) {
  squareMid = other1337.squareMid;
  squareName = other1337.squareName;
  requestMemberName = other1337.requestMemberName;
  profileImageObsHash = other1337.profileImageObsHash;
  __isset = other1337.__isset;
}
SquareEventNotificationJoinRequest& SquareEventNotificationJoinRequest::operator=(const SquareEventNotificationJoinRequest& other1338) {
  squareMid = other1338.squareMid;
  squareName = other1338.squareName;
  requestMemberName = other1338.requestMemberName;
  profileImageObsHash = other1338.profileImageObsHash;
  __isset = other1338.__isset;
  return *this;
}
void SquareEventNotificationJoinRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareEventNotificationJoinRequest(";
  out << "squareMid=" << to_string(squareMid);
  out << ", " << "squareName=" << to_string(squareName);
  out << ", " << "requestMemberName=" << to_string(requestMemberName);
  out << ", " << "profileImageObsHash=" << to_string(profileImageObsHash);
  out << ")";
}


SquareEventNotificationMemberUpdate::~SquareEventNotificationMemberUpdate() throw() {
}


void SquareEventNotificationMemberUpdate::__set_squareMid(const std::string& val) {
  this->squareMid = val;
}

void SquareEventNotificationMemberUpdate::__set_squareName(const std::string& val) {
  this->squareName = val;
}

void SquareEventNotificationMemberUpdate::__set_profileImageObsHash(const std::string& val) {
  this->profileImageObsHash = val;
}
std::ostream& operator<<(std::ostream& out, const SquareEventNotificationMemberUpdate& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareEventNotificationMemberUpdate::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMid);
          this->__isset.squareMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareName);
          this->__isset.squareName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->profileImageObsHash);
          this->__isset.profileImageObsHash = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareEventNotificationMemberUpdate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareEventNotificationMemberUpdate");

  xfer += oprot->writeFieldBegin("squareMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("profileImageObsHash", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->profileImageObsHash);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareEventNotificationMemberUpdate &a, SquareEventNotificationMemberUpdate &b) {
  using ::std::swap;
  swap(a.squareMid, b.squareMid);
  swap(a.squareName, b.squareName);
  swap(a.profileImageObsHash, b.profileImageObsHash);
  swap(a.__isset, b.__isset);
}

SquareEventNotificationMemberUpdate::SquareEventNotificationMemberUpdate(const SquareEventNotificationMemberUpdate& other1339) {
  squareMid = other1339.squareMid;
  squareName = other1339.squareName;
  profileImageObsHash = other1339.profileImageObsHash;
  __isset = other1339.__isset;
}
SquareEventNotificationMemberUpdate& SquareEventNotificationMemberUpdate::operator=(const SquareEventNotificationMemberUpdate& other1340) {
  squareMid = other1340.squareMid;
  squareName = other1340.squareName;
  profileImageObsHash = other1340.profileImageObsHash;
  __isset = other1340.__isset;
  return *this;
}
void SquareEventNotificationMemberUpdate::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareEventNotificationMemberUpdate(";
  out << "squareMid=" << to_string(squareMid);
  out << ", " << "squareName=" << to_string(squareName);
  out << ", " << "profileImageObsHash=" << to_string(profileImageObsHash);
  out << ")";
}


SquareEventNotificationSquareDelete::~SquareEventNotificationSquareDelete() throw() {
}


void SquareEventNotificationSquareDelete::__set_squareMid(const std::string& val) {
  this->squareMid = val;
}

void SquareEventNotificationSquareDelete::__set_squareName(const std::string& val) {
  this->squareName = val;
}

void SquareEventNotificationSquareDelete::__set_profileImageObsHash(const std::string& val) {
  this->profileImageObsHash = val;
}
std::ostream& operator<<(std::ostream& out, const SquareEventNotificationSquareDelete& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareEventNotificationSquareDelete::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMid);
          this->__isset.squareMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareName);
          this->__isset.squareName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->profileImageObsHash);
          this->__isset.profileImageObsHash = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareEventNotificationSquareDelete::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareEventNotificationSquareDelete");

  xfer += oprot->writeFieldBegin("squareMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("profileImageObsHash", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->profileImageObsHash);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareEventNotificationSquareDelete &a, SquareEventNotificationSquareDelete &b) {
  using ::std::swap;
  swap(a.squareMid, b.squareMid);
  swap(a.squareName, b.squareName);
  swap(a.profileImageObsHash, b.profileImageObsHash);
  swap(a.__isset, b.__isset);
}

SquareEventNotificationSquareDelete::SquareEventNotificationSquareDelete(const SquareEventNotificationSquareDelete& other1341) {
  squareMid = other1341.squareMid;
  squareName = other1341.squareName;
  profileImageObsHash = other1341.profileImageObsHash;
  __isset = other1341.__isset;
}
SquareEventNotificationSquareDelete& SquareEventNotificationSquareDelete::operator=(const SquareEventNotificationSquareDelete& other1342) {
  squareMid = other1342.squareMid;
  squareName = other1342.squareName;
  profileImageObsHash = other1342.profileImageObsHash;
  __isset = other1342.__isset;
  return *this;
}
void SquareEventNotificationSquareDelete::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareEventNotificationSquareDelete(";
  out << "squareMid=" << to_string(squareMid);
  out << ", " << "squareName=" << to_string(squareName);
  out << ", " << "profileImageObsHash=" << to_string(profileImageObsHash);
  out << ")";
}


SquareEventNotificationSquareChatDelete::~SquareEventNotificationSquareChatDelete() throw() {
}


void SquareEventNotificationSquareChatDelete::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}

void SquareEventNotificationSquareChatDelete::__set_squareChatName(const std::string& val) {
  this->squareChatName = val;
}

void SquareEventNotificationSquareChatDelete::__set_profileImageObsHash(const std::string& val) {
  this->profileImageObsHash = val;
}
std::ostream& operator<<(std::ostream& out, const SquareEventNotificationSquareChatDelete& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareEventNotificationSquareChatDelete::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatName);
          this->__isset.squareChatName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->profileImageObsHash);
          this->__isset.profileImageObsHash = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareEventNotificationSquareChatDelete::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareEventNotificationSquareChatDelete");

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareChatName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareChatName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("profileImageObsHash", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->profileImageObsHash);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareEventNotificationSquareChatDelete &a, SquareEventNotificationSquareChatDelete &b) {
  using ::std::swap;
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.squareChatName, b.squareChatName);
  swap(a.profileImageObsHash, b.profileImageObsHash);
  swap(a.__isset, b.__isset);
}

SquareEventNotificationSquareChatDelete::SquareEventNotificationSquareChatDelete(const SquareEventNotificationSquareChatDelete& other1343) {
  squareChatMid = other1343.squareChatMid;
  squareChatName = other1343.squareChatName;
  profileImageObsHash = other1343.profileImageObsHash;
  __isset = other1343.__isset;
}
SquareEventNotificationSquareChatDelete& SquareEventNotificationSquareChatDelete::operator=(const SquareEventNotificationSquareChatDelete& other1344) {
  squareChatMid = other1344.squareChatMid;
  squareChatName = other1344.squareChatName;
  profileImageObsHash = other1344.profileImageObsHash;
  __isset = other1344.__isset;
  return *this;
}
void SquareEventNotificationSquareChatDelete::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareEventNotificationSquareChatDelete(";
  out << "squareChatMid=" << to_string(squareChatMid);
  out << ", " << "squareChatName=" << to_string(squareChatName);
  out << ", " << "profileImageObsHash=" << to_string(profileImageObsHash);
  out << ")";
}


SquareEventNotificationMessage::~SquareEventNotificationMessage() throw() {
}


void SquareEventNotificationMessage::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}

void SquareEventNotificationMessage::__set_squareMessage(const SquareMessage& val) {
  this->squareMessage = val;
}

void SquareEventNotificationMessage::__set_senderDisplayName(const std::string& val) {
  this->senderDisplayName = val;
}

void SquareEventNotificationMessage::__set_unreadCount(const int32_t val) {
  this->unreadCount = val;
}

void SquareEventNotificationMessage::__set_requiredToFetchChatEvents(const bool val) {
  this->requiredToFetchChatEvents = val;
}
std::ostream& operator<<(std::ostream& out, const SquareEventNotificationMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareEventNotificationMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareMessage.read(iprot);
          this->__isset.squareMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->senderDisplayName);
          this->__isset.senderDisplayName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unreadCount);
          this->__isset.unreadCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->requiredToFetchChatEvents);
          this->__isset.requiredToFetchChatEvents = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareEventNotificationMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareEventNotificationMessage");

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareMessage", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->squareMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("senderDisplayName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->senderDisplayName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unreadCount", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->unreadCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("requiredToFetchChatEvents", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->requiredToFetchChatEvents);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareEventNotificationMessage &a, SquareEventNotificationMessage &b) {
  using ::std::swap;
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.squareMessage, b.squareMessage);
  swap(a.senderDisplayName, b.senderDisplayName);
  swap(a.unreadCount, b.unreadCount);
  swap(a.requiredToFetchChatEvents, b.requiredToFetchChatEvents);
  swap(a.__isset, b.__isset);
}

SquareEventNotificationMessage::SquareEventNotificationMessage(const SquareEventNotificationMessage& other1345) {
  squareChatMid = other1345.squareChatMid;
  squareMessage = other1345.squareMessage;
  senderDisplayName = other1345.senderDisplayName;
  unreadCount = other1345.unreadCount;
  requiredToFetchChatEvents = other1345.requiredToFetchChatEvents;
  __isset = other1345.__isset;
}
SquareEventNotificationMessage& SquareEventNotificationMessage::operator=(const SquareEventNotificationMessage& other1346) {
  squareChatMid = other1346.squareChatMid;
  squareMessage = other1346.squareMessage;
  senderDisplayName = other1346.senderDisplayName;
  unreadCount = other1346.unreadCount;
  requiredToFetchChatEvents = other1346.requiredToFetchChatEvents;
  __isset = other1346.__isset;
  return *this;
}
void SquareEventNotificationMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareEventNotificationMessage(";
  out << "squareChatMid=" << to_string(squareChatMid);
  out << ", " << "squareMessage=" << to_string(squareMessage);
  out << ", " << "senderDisplayName=" << to_string(senderDisplayName);
  out << ", " << "unreadCount=" << to_string(unreadCount);
  out << ", " << "requiredToFetchChatEvents=" << to_string(requiredToFetchChatEvents);
  out << ")";
}


SquareEventNotifiedUpdateSquareChatMember::~SquareEventNotifiedUpdateSquareChatMember() throw() {
}


void SquareEventNotifiedUpdateSquareChatMember::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}

void SquareEventNotifiedUpdateSquareChatMember::__set_squareMemberMid(const std::string& val) {
  this->squareMemberMid = val;
}

void SquareEventNotifiedUpdateSquareChatMember::__set_squareChatMember(const SquareChatMember& val) {
  this->squareChatMember = val;
}
std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedUpdateSquareChatMember& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareEventNotifiedUpdateSquareChatMember::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMemberMid);
          this->__isset.squareMemberMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareChatMember.read(iprot);
          this->__isset.squareChatMember = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareEventNotifiedUpdateSquareChatMember::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareEventNotifiedUpdateSquareChatMember");

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareMemberMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareMemberMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareChatMember", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->squareChatMember.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareEventNotifiedUpdateSquareChatMember &a, SquareEventNotifiedUpdateSquareChatMember &b) {
  using ::std::swap;
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.squareMemberMid, b.squareMemberMid);
  swap(a.squareChatMember, b.squareChatMember);
  swap(a.__isset, b.__isset);
}

SquareEventNotifiedUpdateSquareChatMember::SquareEventNotifiedUpdateSquareChatMember(const SquareEventNotifiedUpdateSquareChatMember& other1347) {
  squareChatMid = other1347.squareChatMid;
  squareMemberMid = other1347.squareMemberMid;
  squareChatMember = other1347.squareChatMember;
  __isset = other1347.__isset;
}
SquareEventNotifiedUpdateSquareChatMember& SquareEventNotifiedUpdateSquareChatMember::operator=(const SquareEventNotifiedUpdateSquareChatMember& other1348) {
  squareChatMid = other1348.squareChatMid;
  squareMemberMid = other1348.squareMemberMid;
  squareChatMember = other1348.squareChatMember;
  __isset = other1348.__isset;
  return *this;
}
void SquareEventNotifiedUpdateSquareChatMember::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareEventNotifiedUpdateSquareChatMember(";
  out << "squareChatMid=" << to_string(squareChatMid);
  out << ", " << "squareMemberMid=" << to_string(squareMemberMid);
  out << ", " << "squareChatMember=" << to_string(squareChatMember);
  out << ")";
}


SquareEventNotifiedUpdateSquareAuthority::~SquareEventNotifiedUpdateSquareAuthority() throw() {
}


void SquareEventNotifiedUpdateSquareAuthority::__set_squareMid(const std::string& val) {
  this->squareMid = val;
}

void SquareEventNotifiedUpdateSquareAuthority::__set_squareAuthority(const SquareAuthority& val) {
  this->squareAuthority = val;
}
std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedUpdateSquareAuthority& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareEventNotifiedUpdateSquareAuthority::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMid);
          this->__isset.squareMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareAuthority.read(iprot);
          this->__isset.squareAuthority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareEventNotifiedUpdateSquareAuthority::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareEventNotifiedUpdateSquareAuthority");

  xfer += oprot->writeFieldBegin("squareMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareAuthority", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->squareAuthority.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareEventNotifiedUpdateSquareAuthority &a, SquareEventNotifiedUpdateSquareAuthority &b) {
  using ::std::swap;
  swap(a.squareMid, b.squareMid);
  swap(a.squareAuthority, b.squareAuthority);
  swap(a.__isset, b.__isset);
}

SquareEventNotifiedUpdateSquareAuthority::SquareEventNotifiedUpdateSquareAuthority(const SquareEventNotifiedUpdateSquareAuthority& other1349) {
  squareMid = other1349.squareMid;
  squareAuthority = other1349.squareAuthority;
  __isset = other1349.__isset;
}
SquareEventNotifiedUpdateSquareAuthority& SquareEventNotifiedUpdateSquareAuthority::operator=(const SquareEventNotifiedUpdateSquareAuthority& other1350) {
  squareMid = other1350.squareMid;
  squareAuthority = other1350.squareAuthority;
  __isset = other1350.__isset;
  return *this;
}
void SquareEventNotifiedUpdateSquareAuthority::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareEventNotifiedUpdateSquareAuthority(";
  out << "squareMid=" << to_string(squareMid);
  out << ", " << "squareAuthority=" << to_string(squareAuthority);
  out << ")";
}


SquareEventNotifiedUpdateSquareFeatureSet::~SquareEventNotifiedUpdateSquareFeatureSet() throw() {
}


void SquareEventNotifiedUpdateSquareFeatureSet::__set_squareFeatureSet(const SquareFeatureSet& val) {
  this->squareFeatureSet = val;
}
std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedUpdateSquareFeatureSet& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareEventNotifiedUpdateSquareFeatureSet::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareFeatureSet.read(iprot);
          this->__isset.squareFeatureSet = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareEventNotifiedUpdateSquareFeatureSet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareEventNotifiedUpdateSquareFeatureSet");

  xfer += oprot->writeFieldBegin("squareFeatureSet", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->squareFeatureSet.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareEventNotifiedUpdateSquareFeatureSet &a, SquareEventNotifiedUpdateSquareFeatureSet &b) {
  using ::std::swap;
  swap(a.squareFeatureSet, b.squareFeatureSet);
  swap(a.__isset, b.__isset);
}

SquareEventNotifiedUpdateSquareFeatureSet::SquareEventNotifiedUpdateSquareFeatureSet(const SquareEventNotifiedUpdateSquareFeatureSet& other1351) {
  squareFeatureSet = other1351.squareFeatureSet;
  __isset = other1351.__isset;
}
SquareEventNotifiedUpdateSquareFeatureSet& SquareEventNotifiedUpdateSquareFeatureSet::operator=(const SquareEventNotifiedUpdateSquareFeatureSet& other1352) {
  squareFeatureSet = other1352.squareFeatureSet;
  __isset = other1352.__isset;
  return *this;
}
void SquareEventNotifiedUpdateSquareFeatureSet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareEventNotifiedUpdateSquareFeatureSet(";
  out << "squareFeatureSet=" << to_string(squareFeatureSet);
  out << ")";
}


SquareEventPayload::~SquareEventPayload() throw() {
}


void SquareEventPayload::__set_receiveMessage(const SquareEventReceiveMessage& val) {
  this->receiveMessage = val;
}

void SquareEventPayload::__set_sendMessage(const SquareEventSendMessage& val) {
  this->sendMessage = val;
}

void SquareEventPayload::__set_notifiedJoinSquareChat(const SquareEventNotifiedJoinSquareChat& val) {
  this->notifiedJoinSquareChat = val;
}

void SquareEventPayload::__set_notifiedInviteIntoSquareChat(const SquareEventNotifiedInviteIntoSquareChat& val) {
  this->notifiedInviteIntoSquareChat = val;
}

void SquareEventPayload::__set_notifiedLeaveSquareChat(const SquareEventNotifiedLeaveSquareChat& val) {
  this->notifiedLeaveSquareChat = val;
}

void SquareEventPayload::__set_notifiedDestroyMessage(const SquareEventNotifiedDestroyMessage& val) {
  this->notifiedDestroyMessage = val;
}

void SquareEventPayload::__set_notifiedMarkAsRead(const SquareEventNotifiedMarkAsRead& val) {
  this->notifiedMarkAsRead = val;
}

void SquareEventPayload::__set_notifiedUpdateSquareMemberProfile(const SquareEventNotifiedUpdateSquareMemberProfile& val) {
  this->notifiedUpdateSquareMemberProfile = val;
}

void SquareEventPayload::__set_notifiedKickoutFromSquare(const SquareEventNotifiedKickoutFromSquare& val) {
  this->notifiedKickoutFromSquare = val;
}

void SquareEventPayload::__set_notifiedShutdownSquare(const SquareEventNotifiedShutdownSquare& val) {
  this->notifiedShutdownSquare = val;
}

void SquareEventPayload::__set_notifiedDeleteSquareChat(const SquareEventNotifiedDeleteSquareChat& val) {
  this->notifiedDeleteSquareChat = val;
}

void SquareEventPayload::__set_notifiedUpdateSquareChatProfileName(const SquareEventNotifiedUpdateSquareChatProfileName& val) {
  this->notifiedUpdateSquareChatProfileName = val;
}

void SquareEventPayload::__set_notifiedUpdateSquareChatProfileImage(const SquareEventNotifiedUpdateSquareChatProfileImage& val) {
  this->notifiedUpdateSquareChatProfileImage = val;
}

void SquareEventPayload::__set_notifiedUpdateSquareStatus(const SquareEventNotifiedUpdateSquareStatus& val) {
  this->notifiedUpdateSquareStatus = val;
}

void SquareEventPayload::__set_notifiedUpdateSquareChatStatus(const SquareEventNotifiedUpdateSquareChatStatus& val) {
  this->notifiedUpdateSquareChatStatus = val;
}

void SquareEventPayload::__set_notifiedCreateSquareMember(const SquareEventNotifiedCreateSquareMember& val) {
  this->notifiedCreateSquareMember = val;
}

void SquareEventPayload::__set_notifiedCreateSquareChatMember(const SquareEventNotifiedCreateSquareChatMember& val) {
  this->notifiedCreateSquareChatMember = val;
}

void SquareEventPayload::__set_notifiedUpdateSquareMemberRelation(const SquareEventNotifiedUpdateSquareMemberRelation& val) {
  this->notifiedUpdateSquareMemberRelation = val;
}

void SquareEventPayload::__set_notifiedUpdateSquare(const SquareEventNotifiedUpdateSquare& val) {
  this->notifiedUpdateSquare = val;
}

void SquareEventPayload::__set_notifiedUpdateSquareMember(const SquareEventNotifiedUpdateSquareMember& val) {
  this->notifiedUpdateSquareMember = val;
}

void SquareEventPayload::__set_notifiedUpdateSquareChat(const SquareEventNotifiedUpdateSquareChat& val) {
  this->notifiedUpdateSquareChat = val;
}

void SquareEventPayload::__set_notificationJoinRequest(const SquareEventNotificationJoinRequest& val) {
  this->notificationJoinRequest = val;
}

void SquareEventPayload::__set_notificationJoined(const SquareEventNotificationMemberUpdate& val) {
  this->notificationJoined = val;
}

void SquareEventPayload::__set_notificationPromoteCoadmin(const SquareEventNotificationMemberUpdate& val) {
  this->notificationPromoteCoadmin = val;
}

void SquareEventPayload::__set_notificationPromoteAdmin(const SquareEventNotificationMemberUpdate& val) {
  this->notificationPromoteAdmin = val;
}

void SquareEventPayload::__set_notificationDemoteMember(const SquareEventNotificationMemberUpdate& val) {
  this->notificationDemoteMember = val;
}

void SquareEventPayload::__set_notificationKickedOut(const SquareEventNotificationMemberUpdate& val) {
  this->notificationKickedOut = val;
}

void SquareEventPayload::__set_notificationSquareDelete(const SquareEventNotificationSquareDelete& val) {
  this->notificationSquareDelete = val;
}

void SquareEventPayload::__set_notificationSquareChatDelete(const SquareEventNotificationSquareChatDelete& val) {
  this->notificationSquareChatDelete = val;
}

void SquareEventPayload::__set_notificationMessage(const SquareEventNotificationMessage& val) {
  this->notificationMessage = val;
}

void SquareEventPayload::__set_notifiedUpdateSquareChatMember(const SquareEventNotifiedUpdateSquareChatMember& val) {
  this->notifiedUpdateSquareChatMember = val;
}

void SquareEventPayload::__set_notifiedUpdateSquareAuthority(const SquareEventNotifiedUpdateSquareAuthority& val) {
  this->notifiedUpdateSquareAuthority = val;
}

void SquareEventPayload::__set_notifiedUpdateSquareFeatureSet(const SquareEventNotifiedUpdateSquareFeatureSet& val) {
  this->notifiedUpdateSquareFeatureSet = val;
}
std::ostream& operator<<(std::ostream& out, const SquareEventPayload& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareEventPayload::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->receiveMessage.read(iprot);
          this->__isset.receiveMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sendMessage.read(iprot);
          this->__isset.sendMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->notifiedJoinSquareChat.read(iprot);
          this->__isset.notifiedJoinSquareChat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->notifiedInviteIntoSquareChat.read(iprot);
          this->__isset.notifiedInviteIntoSquareChat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->notifiedLeaveSquareChat.read(iprot);
          this->__isset.notifiedLeaveSquareChat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->notifiedDestroyMessage.read(iprot);
          this->__isset.notifiedDestroyMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->notifiedMarkAsRead.read(iprot);
          this->__isset.notifiedMarkAsRead = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->notifiedUpdateSquareMemberProfile.read(iprot);
          this->__isset.notifiedUpdateSquareMemberProfile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->notifiedKickoutFromSquare.read(iprot);
          this->__isset.notifiedKickoutFromSquare = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->notifiedShutdownSquare.read(iprot);
          this->__isset.notifiedShutdownSquare = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->notifiedDeleteSquareChat.read(iprot);
          this->__isset.notifiedDeleteSquareChat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->notifiedUpdateSquareChatProfileName.read(iprot);
          this->__isset.notifiedUpdateSquareChatProfileName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->notifiedUpdateSquareChatProfileImage.read(iprot);
          this->__isset.notifiedUpdateSquareChatProfileImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->notifiedUpdateSquareStatus.read(iprot);
          this->__isset.notifiedUpdateSquareStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->notifiedUpdateSquareChatStatus.read(iprot);
          this->__isset.notifiedUpdateSquareChatStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->notifiedCreateSquareMember.read(iprot);
          this->__isset.notifiedCreateSquareMember = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->notifiedCreateSquareChatMember.read(iprot);
          this->__isset.notifiedCreateSquareChatMember = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->notifiedUpdateSquareMemberRelation.read(iprot);
          this->__isset.notifiedUpdateSquareMemberRelation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->notifiedUpdateSquare.read(iprot);
          this->__isset.notifiedUpdateSquare = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->notifiedUpdateSquareMember.read(iprot);
          this->__isset.notifiedUpdateSquareMember = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->notifiedUpdateSquareChat.read(iprot);
          this->__isset.notifiedUpdateSquareChat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->notificationJoinRequest.read(iprot);
          this->__isset.notificationJoinRequest = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->notificationJoined.read(iprot);
          this->__isset.notificationJoined = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->notificationPromoteCoadmin.read(iprot);
          this->__isset.notificationPromoteCoadmin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->notificationPromoteAdmin.read(iprot);
          this->__isset.notificationPromoteAdmin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->notificationDemoteMember.read(iprot);
          this->__isset.notificationDemoteMember = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->notificationKickedOut.read(iprot);
          this->__isset.notificationKickedOut = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->notificationSquareDelete.read(iprot);
          this->__isset.notificationSquareDelete = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->notificationSquareChatDelete.read(iprot);
          this->__isset.notificationSquareChatDelete = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->notificationMessage.read(iprot);
          this->__isset.notificationMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->notifiedUpdateSquareChatMember.read(iprot);
          this->__isset.notifiedUpdateSquareChatMember = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->notifiedUpdateSquareAuthority.read(iprot);
          this->__isset.notifiedUpdateSquareAuthority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->notifiedUpdateSquareFeatureSet.read(iprot);
          this->__isset.notifiedUpdateSquareFeatureSet = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareEventPayload::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareEventPayload");

  xfer += oprot->writeFieldBegin("receiveMessage", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->receiveMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendMessage", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->sendMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notifiedJoinSquareChat", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->notifiedJoinSquareChat.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notifiedInviteIntoSquareChat", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->notifiedInviteIntoSquareChat.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notifiedLeaveSquareChat", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->notifiedLeaveSquareChat.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notifiedDestroyMessage", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->notifiedDestroyMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notifiedMarkAsRead", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->notifiedMarkAsRead.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notifiedUpdateSquareMemberProfile", ::apache::thrift::protocol::T_STRUCT, 8);
  xfer += this->notifiedUpdateSquareMemberProfile.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notifiedUpdateSquare", ::apache::thrift::protocol::T_STRUCT, 9);
  xfer += this->notifiedUpdateSquare.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notifiedUpdateSquareMember", ::apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->notifiedUpdateSquareMember.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notifiedUpdateSquareChat", ::apache::thrift::protocol::T_STRUCT, 11);
  xfer += this->notifiedUpdateSquareChat.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notifiedUpdateSquareChatMember", ::apache::thrift::protocol::T_STRUCT, 12);
  xfer += this->notifiedUpdateSquareChatMember.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notifiedUpdateSquareAuthority", ::apache::thrift::protocol::T_STRUCT, 13);
  xfer += this->notifiedUpdateSquareAuthority.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notifiedUpdateSquareStatus", ::apache::thrift::protocol::T_STRUCT, 14);
  xfer += this->notifiedUpdateSquareStatus.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notifiedUpdateSquareChatStatus", ::apache::thrift::protocol::T_STRUCT, 15);
  xfer += this->notifiedUpdateSquareChatStatus.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notifiedCreateSquareMember", ::apache::thrift::protocol::T_STRUCT, 16);
  xfer += this->notifiedCreateSquareMember.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notifiedCreateSquareChatMember", ::apache::thrift::protocol::T_STRUCT, 17);
  xfer += this->notifiedCreateSquareChatMember.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notifiedUpdateSquareMemberRelation", ::apache::thrift::protocol::T_STRUCT, 18);
  xfer += this->notifiedUpdateSquareMemberRelation.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notifiedShutdownSquare", ::apache::thrift::protocol::T_STRUCT, 19);
  xfer += this->notifiedShutdownSquare.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notifiedKickoutFromSquare", ::apache::thrift::protocol::T_STRUCT, 20);
  xfer += this->notifiedKickoutFromSquare.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notifiedDeleteSquareChat", ::apache::thrift::protocol::T_STRUCT, 21);
  xfer += this->notifiedDeleteSquareChat.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notificationJoinRequest", ::apache::thrift::protocol::T_STRUCT, 22);
  xfer += this->notificationJoinRequest.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notificationJoined", ::apache::thrift::protocol::T_STRUCT, 23);
  xfer += this->notificationJoined.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notificationPromoteCoadmin", ::apache::thrift::protocol::T_STRUCT, 24);
  xfer += this->notificationPromoteCoadmin.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notificationPromoteAdmin", ::apache::thrift::protocol::T_STRUCT, 25);
  xfer += this->notificationPromoteAdmin.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notificationDemoteMember", ::apache::thrift::protocol::T_STRUCT, 26);
  xfer += this->notificationDemoteMember.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notificationKickedOut", ::apache::thrift::protocol::T_STRUCT, 27);
  xfer += this->notificationKickedOut.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notificationSquareDelete", ::apache::thrift::protocol::T_STRUCT, 28);
  xfer += this->notificationSquareDelete.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notificationSquareChatDelete", ::apache::thrift::protocol::T_STRUCT, 29);
  xfer += this->notificationSquareChatDelete.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notificationMessage", ::apache::thrift::protocol::T_STRUCT, 30);
  xfer += this->notificationMessage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notifiedUpdateSquareChatProfileName", ::apache::thrift::protocol::T_STRUCT, 31);
  xfer += this->notifiedUpdateSquareChatProfileName.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notifiedUpdateSquareChatProfileImage", ::apache::thrift::protocol::T_STRUCT, 32);
  xfer += this->notifiedUpdateSquareChatProfileImage.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notifiedUpdateSquareFeatureSet", ::apache::thrift::protocol::T_STRUCT, 33);
  xfer += this->notifiedUpdateSquareFeatureSet.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareEventPayload &a, SquareEventPayload &b) {
  using ::std::swap;
  swap(a.receiveMessage, b.receiveMessage);
  swap(a.sendMessage, b.sendMessage);
  swap(a.notifiedJoinSquareChat, b.notifiedJoinSquareChat);
  swap(a.notifiedInviteIntoSquareChat, b.notifiedInviteIntoSquareChat);
  swap(a.notifiedLeaveSquareChat, b.notifiedLeaveSquareChat);
  swap(a.notifiedDestroyMessage, b.notifiedDestroyMessage);
  swap(a.notifiedMarkAsRead, b.notifiedMarkAsRead);
  swap(a.notifiedUpdateSquareMemberProfile, b.notifiedUpdateSquareMemberProfile);
  swap(a.notifiedKickoutFromSquare, b.notifiedKickoutFromSquare);
  swap(a.notifiedShutdownSquare, b.notifiedShutdownSquare);
  swap(a.notifiedDeleteSquareChat, b.notifiedDeleteSquareChat);
  swap(a.notifiedUpdateSquareChatProfileName, b.notifiedUpdateSquareChatProfileName);
  swap(a.notifiedUpdateSquareChatProfileImage, b.notifiedUpdateSquareChatProfileImage);
  swap(a.notifiedUpdateSquareStatus, b.notifiedUpdateSquareStatus);
  swap(a.notifiedUpdateSquareChatStatus, b.notifiedUpdateSquareChatStatus);
  swap(a.notifiedCreateSquareMember, b.notifiedCreateSquareMember);
  swap(a.notifiedCreateSquareChatMember, b.notifiedCreateSquareChatMember);
  swap(a.notifiedUpdateSquareMemberRelation, b.notifiedUpdateSquareMemberRelation);
  swap(a.notifiedUpdateSquare, b.notifiedUpdateSquare);
  swap(a.notifiedUpdateSquareMember, b.notifiedUpdateSquareMember);
  swap(a.notifiedUpdateSquareChat, b.notifiedUpdateSquareChat);
  swap(a.notificationJoinRequest, b.notificationJoinRequest);
  swap(a.notificationJoined, b.notificationJoined);
  swap(a.notificationPromoteCoadmin, b.notificationPromoteCoadmin);
  swap(a.notificationPromoteAdmin, b.notificationPromoteAdmin);
  swap(a.notificationDemoteMember, b.notificationDemoteMember);
  swap(a.notificationKickedOut, b.notificationKickedOut);
  swap(a.notificationSquareDelete, b.notificationSquareDelete);
  swap(a.notificationSquareChatDelete, b.notificationSquareChatDelete);
  swap(a.notificationMessage, b.notificationMessage);
  swap(a.notifiedUpdateSquareChatMember, b.notifiedUpdateSquareChatMember);
  swap(a.notifiedUpdateSquareAuthority, b.notifiedUpdateSquareAuthority);
  swap(a.notifiedUpdateSquareFeatureSet, b.notifiedUpdateSquareFeatureSet);
  swap(a.__isset, b.__isset);
}

SquareEventPayload::SquareEventPayload(const SquareEventPayload& other1353) {
  receiveMessage = other1353.receiveMessage;
  sendMessage = other1353.sendMessage;
  notifiedJoinSquareChat = other1353.notifiedJoinSquareChat;
  notifiedInviteIntoSquareChat = other1353.notifiedInviteIntoSquareChat;
  notifiedLeaveSquareChat = other1353.notifiedLeaveSquareChat;
  notifiedDestroyMessage = other1353.notifiedDestroyMessage;
  notifiedMarkAsRead = other1353.notifiedMarkAsRead;
  notifiedUpdateSquareMemberProfile = other1353.notifiedUpdateSquareMemberProfile;
  notifiedKickoutFromSquare = other1353.notifiedKickoutFromSquare;
  notifiedShutdownSquare = other1353.notifiedShutdownSquare;
  notifiedDeleteSquareChat = other1353.notifiedDeleteSquareChat;
  notifiedUpdateSquareChatProfileName = other1353.notifiedUpdateSquareChatProfileName;
  notifiedUpdateSquareChatProfileImage = other1353.notifiedUpdateSquareChatProfileImage;
  notifiedUpdateSquareStatus = other1353.notifiedUpdateSquareStatus;
  notifiedUpdateSquareChatStatus = other1353.notifiedUpdateSquareChatStatus;
  notifiedCreateSquareMember = other1353.notifiedCreateSquareMember;
  notifiedCreateSquareChatMember = other1353.notifiedCreateSquareChatMember;
  notifiedUpdateSquareMemberRelation = other1353.notifiedUpdateSquareMemberRelation;
  notifiedUpdateSquare = other1353.notifiedUpdateSquare;
  notifiedUpdateSquareMember = other1353.notifiedUpdateSquareMember;
  notifiedUpdateSquareChat = other1353.notifiedUpdateSquareChat;
  notificationJoinRequest = other1353.notificationJoinRequest;
  notificationJoined = other1353.notificationJoined;
  notificationPromoteCoadmin = other1353.notificationPromoteCoadmin;
  notificationPromoteAdmin = other1353.notificationPromoteAdmin;
  notificationDemoteMember = other1353.notificationDemoteMember;
  notificationKickedOut = other1353.notificationKickedOut;
  notificationSquareDelete = other1353.notificationSquareDelete;
  notificationSquareChatDelete = other1353.notificationSquareChatDelete;
  notificationMessage = other1353.notificationMessage;
  notifiedUpdateSquareChatMember = other1353.notifiedUpdateSquareChatMember;
  notifiedUpdateSquareAuthority = other1353.notifiedUpdateSquareAuthority;
  notifiedUpdateSquareFeatureSet = other1353.notifiedUpdateSquareFeatureSet;
  __isset = other1353.__isset;
}
SquareEventPayload& SquareEventPayload::operator=(const SquareEventPayload& other1354) {
  receiveMessage = other1354.receiveMessage;
  sendMessage = other1354.sendMessage;
  notifiedJoinSquareChat = other1354.notifiedJoinSquareChat;
  notifiedInviteIntoSquareChat = other1354.notifiedInviteIntoSquareChat;
  notifiedLeaveSquareChat = other1354.notifiedLeaveSquareChat;
  notifiedDestroyMessage = other1354.notifiedDestroyMessage;
  notifiedMarkAsRead = other1354.notifiedMarkAsRead;
  notifiedUpdateSquareMemberProfile = other1354.notifiedUpdateSquareMemberProfile;
  notifiedKickoutFromSquare = other1354.notifiedKickoutFromSquare;
  notifiedShutdownSquare = other1354.notifiedShutdownSquare;
  notifiedDeleteSquareChat = other1354.notifiedDeleteSquareChat;
  notifiedUpdateSquareChatProfileName = other1354.notifiedUpdateSquareChatProfileName;
  notifiedUpdateSquareChatProfileImage = other1354.notifiedUpdateSquareChatProfileImage;
  notifiedUpdateSquareStatus = other1354.notifiedUpdateSquareStatus;
  notifiedUpdateSquareChatStatus = other1354.notifiedUpdateSquareChatStatus;
  notifiedCreateSquareMember = other1354.notifiedCreateSquareMember;
  notifiedCreateSquareChatMember = other1354.notifiedCreateSquareChatMember;
  notifiedUpdateSquareMemberRelation = other1354.notifiedUpdateSquareMemberRelation;
  notifiedUpdateSquare = other1354.notifiedUpdateSquare;
  notifiedUpdateSquareMember = other1354.notifiedUpdateSquareMember;
  notifiedUpdateSquareChat = other1354.notifiedUpdateSquareChat;
  notificationJoinRequest = other1354.notificationJoinRequest;
  notificationJoined = other1354.notificationJoined;
  notificationPromoteCoadmin = other1354.notificationPromoteCoadmin;
  notificationPromoteAdmin = other1354.notificationPromoteAdmin;
  notificationDemoteMember = other1354.notificationDemoteMember;
  notificationKickedOut = other1354.notificationKickedOut;
  notificationSquareDelete = other1354.notificationSquareDelete;
  notificationSquareChatDelete = other1354.notificationSquareChatDelete;
  notificationMessage = other1354.notificationMessage;
  notifiedUpdateSquareChatMember = other1354.notifiedUpdateSquareChatMember;
  notifiedUpdateSquareAuthority = other1354.notifiedUpdateSquareAuthority;
  notifiedUpdateSquareFeatureSet = other1354.notifiedUpdateSquareFeatureSet;
  __isset = other1354.__isset;
  return *this;
}
void SquareEventPayload::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareEventPayload(";
  out << "receiveMessage=" << to_string(receiveMessage);
  out << ", " << "sendMessage=" << to_string(sendMessage);
  out << ", " << "notifiedJoinSquareChat=" << to_string(notifiedJoinSquareChat);
  out << ", " << "notifiedInviteIntoSquareChat=" << to_string(notifiedInviteIntoSquareChat);
  out << ", " << "notifiedLeaveSquareChat=" << to_string(notifiedLeaveSquareChat);
  out << ", " << "notifiedDestroyMessage=" << to_string(notifiedDestroyMessage);
  out << ", " << "notifiedMarkAsRead=" << to_string(notifiedMarkAsRead);
  out << ", " << "notifiedUpdateSquareMemberProfile=" << to_string(notifiedUpdateSquareMemberProfile);
  out << ", " << "notifiedKickoutFromSquare=" << to_string(notifiedKickoutFromSquare);
  out << ", " << "notifiedShutdownSquare=" << to_string(notifiedShutdownSquare);
  out << ", " << "notifiedDeleteSquareChat=" << to_string(notifiedDeleteSquareChat);
  out << ", " << "notifiedUpdateSquareChatProfileName=" << to_string(notifiedUpdateSquareChatProfileName);
  out << ", " << "notifiedUpdateSquareChatProfileImage=" << to_string(notifiedUpdateSquareChatProfileImage);
  out << ", " << "notifiedUpdateSquareStatus=" << to_string(notifiedUpdateSquareStatus);
  out << ", " << "notifiedUpdateSquareChatStatus=" << to_string(notifiedUpdateSquareChatStatus);
  out << ", " << "notifiedCreateSquareMember=" << to_string(notifiedCreateSquareMember);
  out << ", " << "notifiedCreateSquareChatMember=" << to_string(notifiedCreateSquareChatMember);
  out << ", " << "notifiedUpdateSquareMemberRelation=" << to_string(notifiedUpdateSquareMemberRelation);
  out << ", " << "notifiedUpdateSquare=" << to_string(notifiedUpdateSquare);
  out << ", " << "notifiedUpdateSquareMember=" << to_string(notifiedUpdateSquareMember);
  out << ", " << "notifiedUpdateSquareChat=" << to_string(notifiedUpdateSquareChat);
  out << ", " << "notificationJoinRequest=" << to_string(notificationJoinRequest);
  out << ", " << "notificationJoined=" << to_string(notificationJoined);
  out << ", " << "notificationPromoteCoadmin=" << to_string(notificationPromoteCoadmin);
  out << ", " << "notificationPromoteAdmin=" << to_string(notificationPromoteAdmin);
  out << ", " << "notificationDemoteMember=" << to_string(notificationDemoteMember);
  out << ", " << "notificationKickedOut=" << to_string(notificationKickedOut);
  out << ", " << "notificationSquareDelete=" << to_string(notificationSquareDelete);
  out << ", " << "notificationSquareChatDelete=" << to_string(notificationSquareChatDelete);
  out << ", " << "notificationMessage=" << to_string(notificationMessage);
  out << ", " << "notifiedUpdateSquareChatMember=" << to_string(notifiedUpdateSquareChatMember);
  out << ", " << "notifiedUpdateSquareAuthority=" << to_string(notifiedUpdateSquareAuthority);
  out << ", " << "notifiedUpdateSquareFeatureSet=" << to_string(notifiedUpdateSquareFeatureSet);
  out << ")";
}


SquareEvent::~SquareEvent() throw() {
}


void SquareEvent::__set_createdTime(const int64_t val) {
  this->createdTime = val;
}

void SquareEvent::__set_type(const SquareEventType::type val) {
  this->type = val;
}

void SquareEvent::__set_payload(const SquareEventPayload& val) {
  this->payload = val;
}

void SquareEvent::__set_syncToken(const std::string& val) {
  this->syncToken = val;
}

void SquareEvent::__set_eventStatus(const SquareEventStatus::type val) {
  this->eventStatus = val;
}
std::ostream& operator<<(std::ostream& out, const SquareEvent& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createdTime);
          this->__isset.createdTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1355;
          xfer += iprot->readI32(ecast1355);
          this->type = (SquareEventType::type)ecast1355;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->payload.read(iprot);
          this->__isset.payload = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->syncToken);
          this->__isset.syncToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1356;
          xfer += iprot->readI32(ecast1356);
          this->eventStatus = (SquareEventStatus::type)ecast1356;
          this->__isset.eventStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareEvent");

  xfer += oprot->writeFieldBegin("createdTime", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->createdTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("payload", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->payload.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("syncToken", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->syncToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventStatus", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->eventStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareEvent &a, SquareEvent &b) {
  using ::std::swap;
  swap(a.createdTime, b.createdTime);
  swap(a.type, b.type);
  swap(a.payload, b.payload);
  swap(a.syncToken, b.syncToken);
  swap(a.eventStatus, b.eventStatus);
  swap(a.__isset, b.__isset);
}

SquareEvent::SquareEvent(const SquareEvent& other1357) {
  createdTime = other1357.createdTime;
  type = other1357.type;
  payload = other1357.payload;
  syncToken = other1357.syncToken;
  eventStatus = other1357.eventStatus;
  __isset = other1357.__isset;
}
SquareEvent& SquareEvent::operator=(const SquareEvent& other1358) {
  createdTime = other1358.createdTime;
  type = other1358.type;
  payload = other1358.payload;
  syncToken = other1358.syncToken;
  eventStatus = other1358.eventStatus;
  __isset = other1358.__isset;
  return *this;
}
void SquareEvent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareEvent(";
  out << "createdTime=" << to_string(createdTime);
  out << ", " << "type=" << to_string(type);
  out << ", " << "payload=" << to_string(payload);
  out << ", " << "syncToken=" << to_string(syncToken);
  out << ", " << "eventStatus=" << to_string(eventStatus);
  out << ")";
}


FetchMyEventsRequest::~FetchMyEventsRequest() throw() {
}


void FetchMyEventsRequest::__set_subscriptionId(const int64_t val) {
  this->subscriptionId = val;
}

void FetchMyEventsRequest::__set_syncToken(const std::string& val) {
  this->syncToken = val;
}

void FetchMyEventsRequest::__set_limit(const int32_t val) {
  this->limit = val;
}

void FetchMyEventsRequest::__set_continuationToken(const std::string& val) {
  this->continuationToken = val;
}
std::ostream& operator<<(std::ostream& out, const FetchMyEventsRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t FetchMyEventsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->subscriptionId);
          this->__isset.subscriptionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->syncToken);
          this->__isset.syncToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->continuationToken);
          this->__isset.continuationToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FetchMyEventsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FetchMyEventsRequest");

  xfer += oprot->writeFieldBegin("subscriptionId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->subscriptionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("syncToken", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->syncToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->limit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("continuationToken", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->continuationToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FetchMyEventsRequest &a, FetchMyEventsRequest &b) {
  using ::std::swap;
  swap(a.subscriptionId, b.subscriptionId);
  swap(a.syncToken, b.syncToken);
  swap(a.limit, b.limit);
  swap(a.continuationToken, b.continuationToken);
  swap(a.__isset, b.__isset);
}

FetchMyEventsRequest::FetchMyEventsRequest(const FetchMyEventsRequest& other1359) {
  subscriptionId = other1359.subscriptionId;
  syncToken = other1359.syncToken;
  limit = other1359.limit;
  continuationToken = other1359.continuationToken;
  __isset = other1359.__isset;
}
FetchMyEventsRequest& FetchMyEventsRequest::operator=(const FetchMyEventsRequest& other1360) {
  subscriptionId = other1360.subscriptionId;
  syncToken = other1360.syncToken;
  limit = other1360.limit;
  continuationToken = other1360.continuationToken;
  __isset = other1360.__isset;
  return *this;
}
void FetchMyEventsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FetchMyEventsRequest(";
  out << "subscriptionId=" << to_string(subscriptionId);
  out << ", " << "syncToken=" << to_string(syncToken);
  out << ", " << "limit=" << to_string(limit);
  out << ", " << "continuationToken=" << to_string(continuationToken);
  out << ")";
}


FetchMyEventsResponse::~FetchMyEventsResponse() throw() {
}


void FetchMyEventsResponse::__set_subscription(const SubscriptionState& val) {
  this->subscription = val;
}

void FetchMyEventsResponse::__set_events(const std::vector<SquareEvent> & val) {
  this->events = val;
}

void FetchMyEventsResponse::__set_syncToken(const std::string& val) {
  this->syncToken = val;
}

void FetchMyEventsResponse::__set_continuationToken(const std::string& val) {
  this->continuationToken = val;
}
std::ostream& operator<<(std::ostream& out, const FetchMyEventsResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t FetchMyEventsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->subscription.read(iprot);
          this->__isset.subscription = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->events.clear();
            uint32_t _size1361;
            ::apache::thrift::protocol::TType _etype1364;
            xfer += iprot->readListBegin(_etype1364, _size1361);
            this->events.resize(_size1361);
            uint32_t _i1365;
            for (_i1365 = 0; _i1365 < _size1361; ++_i1365)
            {
              xfer += this->events[_i1365].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.events = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->syncToken);
          this->__isset.syncToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->continuationToken);
          this->__isset.continuationToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FetchMyEventsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FetchMyEventsResponse");

  xfer += oprot->writeFieldBegin("subscription", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->subscription.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("events", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->events.size()));
    std::vector<SquareEvent> ::const_iterator _iter1366;
    for (_iter1366 = this->events.begin(); _iter1366 != this->events.end(); ++_iter1366)
    {
      xfer += (*_iter1366).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("syncToken", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->syncToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("continuationToken", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->continuationToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FetchMyEventsResponse &a, FetchMyEventsResponse &b) {
  using ::std::swap;
  swap(a.subscription, b.subscription);
  swap(a.events, b.events);
  swap(a.syncToken, b.syncToken);
  swap(a.continuationToken, b.continuationToken);
  swap(a.__isset, b.__isset);
}

FetchMyEventsResponse::FetchMyEventsResponse(const FetchMyEventsResponse& other1367) {
  subscription = other1367.subscription;
  events = other1367.events;
  syncToken = other1367.syncToken;
  continuationToken = other1367.continuationToken;
  __isset = other1367.__isset;
}
FetchMyEventsResponse& FetchMyEventsResponse::operator=(const FetchMyEventsResponse& other1368) {
  subscription = other1368.subscription;
  events = other1368.events;
  syncToken = other1368.syncToken;
  continuationToken = other1368.continuationToken;
  __isset = other1368.__isset;
  return *this;
}
void FetchMyEventsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FetchMyEventsResponse(";
  out << "subscription=" << to_string(subscription);
  out << ", " << "events=" << to_string(events);
  out << ", " << "syncToken=" << to_string(syncToken);
  out << ", " << "continuationToken=" << to_string(continuationToken);
  out << ")";
}


FetchSquareChatEventsRequest::~FetchSquareChatEventsRequest() throw() {
}


void FetchSquareChatEventsRequest::__set_subscriptionId(const int64_t val) {
  this->subscriptionId = val;
}

void FetchSquareChatEventsRequest::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}

void FetchSquareChatEventsRequest::__set_syncToken(const std::string& val) {
  this->syncToken = val;
}

void FetchSquareChatEventsRequest::__set_limit(const int32_t val) {
  this->limit = val;
}

void FetchSquareChatEventsRequest::__set_direction(const FetchDirection::type val) {
  this->direction = val;
}
std::ostream& operator<<(std::ostream& out, const FetchSquareChatEventsRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t FetchSquareChatEventsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->subscriptionId);
          this->__isset.subscriptionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->syncToken);
          this->__isset.syncToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1369;
          xfer += iprot->readI32(ecast1369);
          this->direction = (FetchDirection::type)ecast1369;
          this->__isset.direction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FetchSquareChatEventsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FetchSquareChatEventsRequest");

  xfer += oprot->writeFieldBegin("subscriptionId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->subscriptionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("syncToken", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->syncToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->limit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("direction", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->direction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FetchSquareChatEventsRequest &a, FetchSquareChatEventsRequest &b) {
  using ::std::swap;
  swap(a.subscriptionId, b.subscriptionId);
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.syncToken, b.syncToken);
  swap(a.limit, b.limit);
  swap(a.direction, b.direction);
  swap(a.__isset, b.__isset);
}

FetchSquareChatEventsRequest::FetchSquareChatEventsRequest(const FetchSquareChatEventsRequest& other1370) {
  subscriptionId = other1370.subscriptionId;
  squareChatMid = other1370.squareChatMid;
  syncToken = other1370.syncToken;
  limit = other1370.limit;
  direction = other1370.direction;
  __isset = other1370.__isset;
}
FetchSquareChatEventsRequest& FetchSquareChatEventsRequest::operator=(const FetchSquareChatEventsRequest& other1371) {
  subscriptionId = other1371.subscriptionId;
  squareChatMid = other1371.squareChatMid;
  syncToken = other1371.syncToken;
  limit = other1371.limit;
  direction = other1371.direction;
  __isset = other1371.__isset;
  return *this;
}
void FetchSquareChatEventsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FetchSquareChatEventsRequest(";
  out << "subscriptionId=" << to_string(subscriptionId);
  out << ", " << "squareChatMid=" << to_string(squareChatMid);
  out << ", " << "syncToken=" << to_string(syncToken);
  out << ", " << "limit=" << to_string(limit);
  out << ", " << "direction=" << to_string(direction);
  out << ")";
}


FetchSquareChatEventsResponse::~FetchSquareChatEventsResponse() throw() {
}


void FetchSquareChatEventsResponse::__set_subscription(const SubscriptionState& val) {
  this->subscription = val;
}

void FetchSquareChatEventsResponse::__set_events(const std::vector<SquareEvent> & val) {
  this->events = val;
}

void FetchSquareChatEventsResponse::__set_syncToken(const std::string& val) {
  this->syncToken = val;
}

void FetchSquareChatEventsResponse::__set_continuationToken(const std::string& val) {
  this->continuationToken = val;
}
std::ostream& operator<<(std::ostream& out, const FetchSquareChatEventsResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t FetchSquareChatEventsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->subscription.read(iprot);
          this->__isset.subscription = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->events.clear();
            uint32_t _size1372;
            ::apache::thrift::protocol::TType _etype1375;
            xfer += iprot->readListBegin(_etype1375, _size1372);
            this->events.resize(_size1372);
            uint32_t _i1376;
            for (_i1376 = 0; _i1376 < _size1372; ++_i1376)
            {
              xfer += this->events[_i1376].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.events = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->syncToken);
          this->__isset.syncToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->continuationToken);
          this->__isset.continuationToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FetchSquareChatEventsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FetchSquareChatEventsResponse");

  xfer += oprot->writeFieldBegin("subscription", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->subscription.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("events", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->events.size()));
    std::vector<SquareEvent> ::const_iterator _iter1377;
    for (_iter1377 = this->events.begin(); _iter1377 != this->events.end(); ++_iter1377)
    {
      xfer += (*_iter1377).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("syncToken", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->syncToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("continuationToken", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->continuationToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FetchSquareChatEventsResponse &a, FetchSquareChatEventsResponse &b) {
  using ::std::swap;
  swap(a.subscription, b.subscription);
  swap(a.events, b.events);
  swap(a.syncToken, b.syncToken);
  swap(a.continuationToken, b.continuationToken);
  swap(a.__isset, b.__isset);
}

FetchSquareChatEventsResponse::FetchSquareChatEventsResponse(const FetchSquareChatEventsResponse& other1378) {
  subscription = other1378.subscription;
  events = other1378.events;
  syncToken = other1378.syncToken;
  continuationToken = other1378.continuationToken;
  __isset = other1378.__isset;
}
FetchSquareChatEventsResponse& FetchSquareChatEventsResponse::operator=(const FetchSquareChatEventsResponse& other1379) {
  subscription = other1379.subscription;
  events = other1379.events;
  syncToken = other1379.syncToken;
  continuationToken = other1379.continuationToken;
  __isset = other1379.__isset;
  return *this;
}
void FetchSquareChatEventsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FetchSquareChatEventsResponse(";
  out << "subscription=" << to_string(subscription);
  out << ", " << "events=" << to_string(events);
  out << ", " << "syncToken=" << to_string(syncToken);
  out << ", " << "continuationToken=" << to_string(continuationToken);
  out << ")";
}


InviteToSquareRequest::~InviteToSquareRequest() throw() {
}


void InviteToSquareRequest::__set_squareMid(const std::string& val) {
  this->squareMid = val;
}

void InviteToSquareRequest::__set_invitees(const std::vector<std::string> & val) {
  this->invitees = val;
}

void InviteToSquareRequest::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}
std::ostream& operator<<(std::ostream& out, const InviteToSquareRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t InviteToSquareRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMid);
          this->__isset.squareMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->invitees.clear();
            uint32_t _size1380;
            ::apache::thrift::protocol::TType _etype1383;
            xfer += iprot->readListBegin(_etype1383, _size1380);
            this->invitees.resize(_size1380);
            uint32_t _i1384;
            for (_i1384 = 0; _i1384 < _size1380; ++_i1384)
            {
              xfer += iprot->readString(this->invitees[_i1384]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.invitees = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InviteToSquareRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InviteToSquareRequest");

  xfer += oprot->writeFieldBegin("squareMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("invitees", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->invitees.size()));
    std::vector<std::string> ::const_iterator _iter1385;
    for (_iter1385 = this->invitees.begin(); _iter1385 != this->invitees.end(); ++_iter1385)
    {
      xfer += oprot->writeString((*_iter1385));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InviteToSquareRequest &a, InviteToSquareRequest &b) {
  using ::std::swap;
  swap(a.squareMid, b.squareMid);
  swap(a.invitees, b.invitees);
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.__isset, b.__isset);
}

InviteToSquareRequest::InviteToSquareRequest(const InviteToSquareRequest& other1386) {
  squareMid = other1386.squareMid;
  invitees = other1386.invitees;
  squareChatMid = other1386.squareChatMid;
  __isset = other1386.__isset;
}
InviteToSquareRequest& InviteToSquareRequest::operator=(const InviteToSquareRequest& other1387) {
  squareMid = other1387.squareMid;
  invitees = other1387.invitees;
  squareChatMid = other1387.squareChatMid;
  __isset = other1387.__isset;
  return *this;
}
void InviteToSquareRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InviteToSquareRequest(";
  out << "squareMid=" << to_string(squareMid);
  out << ", " << "invitees=" << to_string(invitees);
  out << ", " << "squareChatMid=" << to_string(squareChatMid);
  out << ")";
}


InviteToSquareResponse::~InviteToSquareResponse() throw() {
}

std::ostream& operator<<(std::ostream& out, const InviteToSquareResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t InviteToSquareResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InviteToSquareResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InviteToSquareResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InviteToSquareResponse &a, InviteToSquareResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

InviteToSquareResponse::InviteToSquareResponse(const InviteToSquareResponse& other1388) {
  (void) other1388;
}
InviteToSquareResponse& InviteToSquareResponse::operator=(const InviteToSquareResponse& other1389) {
  (void) other1389;
  return *this;
}
void InviteToSquareResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InviteToSquareResponse(";
  out << ")";
}


InviteToSquareChatRequest::~InviteToSquareChatRequest() throw() {
}


void InviteToSquareChatRequest::__set_inviteeMids(const std::vector<std::string> & val) {
  this->inviteeMids = val;
}

void InviteToSquareChatRequest::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}
std::ostream& operator<<(std::ostream& out, const InviteToSquareChatRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t InviteToSquareChatRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->inviteeMids.clear();
            uint32_t _size1390;
            ::apache::thrift::protocol::TType _etype1393;
            xfer += iprot->readListBegin(_etype1393, _size1390);
            this->inviteeMids.resize(_size1390);
            uint32_t _i1394;
            for (_i1394 = 0; _i1394 < _size1390; ++_i1394)
            {
              xfer += iprot->readString(this->inviteeMids[_i1394]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.inviteeMids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InviteToSquareChatRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InviteToSquareChatRequest");

  xfer += oprot->writeFieldBegin("inviteeMids", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->inviteeMids.size()));
    std::vector<std::string> ::const_iterator _iter1395;
    for (_iter1395 = this->inviteeMids.begin(); _iter1395 != this->inviteeMids.end(); ++_iter1395)
    {
      xfer += oprot->writeString((*_iter1395));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InviteToSquareChatRequest &a, InviteToSquareChatRequest &b) {
  using ::std::swap;
  swap(a.inviteeMids, b.inviteeMids);
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.__isset, b.__isset);
}

InviteToSquareChatRequest::InviteToSquareChatRequest(const InviteToSquareChatRequest& other1396) {
  inviteeMids = other1396.inviteeMids;
  squareChatMid = other1396.squareChatMid;
  __isset = other1396.__isset;
}
InviteToSquareChatRequest& InviteToSquareChatRequest::operator=(const InviteToSquareChatRequest& other1397) {
  inviteeMids = other1397.inviteeMids;
  squareChatMid = other1397.squareChatMid;
  __isset = other1397.__isset;
  return *this;
}
void InviteToSquareChatRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InviteToSquareChatRequest(";
  out << "inviteeMids=" << to_string(inviteeMids);
  out << ", " << "squareChatMid=" << to_string(squareChatMid);
  out << ")";
}


InviteToSquareChatResponse::~InviteToSquareChatResponse() throw() {
}


void InviteToSquareChatResponse::__set_inviteeMids(const std::vector<std::string> & val) {
  this->inviteeMids = val;
}
std::ostream& operator<<(std::ostream& out, const InviteToSquareChatResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t InviteToSquareChatResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->inviteeMids.clear();
            uint32_t _size1398;
            ::apache::thrift::protocol::TType _etype1401;
            xfer += iprot->readListBegin(_etype1401, _size1398);
            this->inviteeMids.resize(_size1398);
            uint32_t _i1402;
            for (_i1402 = 0; _i1402 < _size1398; ++_i1402)
            {
              xfer += iprot->readString(this->inviteeMids[_i1402]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.inviteeMids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InviteToSquareChatResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InviteToSquareChatResponse");

  xfer += oprot->writeFieldBegin("inviteeMids", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->inviteeMids.size()));
    std::vector<std::string> ::const_iterator _iter1403;
    for (_iter1403 = this->inviteeMids.begin(); _iter1403 != this->inviteeMids.end(); ++_iter1403)
    {
      xfer += oprot->writeString((*_iter1403));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InviteToSquareChatResponse &a, InviteToSquareChatResponse &b) {
  using ::std::swap;
  swap(a.inviteeMids, b.inviteeMids);
  swap(a.__isset, b.__isset);
}

InviteToSquareChatResponse::InviteToSquareChatResponse(const InviteToSquareChatResponse& other1404) {
  inviteeMids = other1404.inviteeMids;
  __isset = other1404.__isset;
}
InviteToSquareChatResponse& InviteToSquareChatResponse::operator=(const InviteToSquareChatResponse& other1405) {
  inviteeMids = other1405.inviteeMids;
  __isset = other1405.__isset;
  return *this;
}
void InviteToSquareChatResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InviteToSquareChatResponse(";
  out << "inviteeMids=" << to_string(inviteeMids);
  out << ")";
}


GetSquareMemberRequest::~GetSquareMemberRequest() throw() {
}


void GetSquareMemberRequest::__set_squareMemberMid(const std::string& val) {
  this->squareMemberMid = val;
}
std::ostream& operator<<(std::ostream& out, const GetSquareMemberRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetSquareMemberRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMemberMid);
          this->__isset.squareMemberMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetSquareMemberRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetSquareMemberRequest");

  xfer += oprot->writeFieldBegin("squareMemberMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareMemberMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetSquareMemberRequest &a, GetSquareMemberRequest &b) {
  using ::std::swap;
  swap(a.squareMemberMid, b.squareMemberMid);
  swap(a.__isset, b.__isset);
}

GetSquareMemberRequest::GetSquareMemberRequest(const GetSquareMemberRequest& other1406) {
  squareMemberMid = other1406.squareMemberMid;
  __isset = other1406.__isset;
}
GetSquareMemberRequest& GetSquareMemberRequest::operator=(const GetSquareMemberRequest& other1407) {
  squareMemberMid = other1407.squareMemberMid;
  __isset = other1407.__isset;
  return *this;
}
void GetSquareMemberRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetSquareMemberRequest(";
  out << "squareMemberMid=" << to_string(squareMemberMid);
  out << ")";
}


GetSquareMemberResponse::~GetSquareMemberResponse() throw() {
}


void GetSquareMemberResponse::__set_squareMember(const SquareMember& val) {
  this->squareMember = val;
}

void GetSquareMemberResponse::__set_relation(const SquareMemberRelation& val) {
  this->relation = val;
}

void GetSquareMemberResponse::__set_oneOnOneChatMid(const std::string& val) {
  this->oneOnOneChatMid = val;
}
std::ostream& operator<<(std::ostream& out, const GetSquareMemberResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetSquareMemberResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareMember.read(iprot);
          this->__isset.squareMember = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->relation.read(iprot);
          this->__isset.relation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->oneOnOneChatMid);
          this->__isset.oneOnOneChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetSquareMemberResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetSquareMemberResponse");

  xfer += oprot->writeFieldBegin("squareMember", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->squareMember.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("relation", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->relation.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("oneOnOneChatMid", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->oneOnOneChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetSquareMemberResponse &a, GetSquareMemberResponse &b) {
  using ::std::swap;
  swap(a.squareMember, b.squareMember);
  swap(a.relation, b.relation);
  swap(a.oneOnOneChatMid, b.oneOnOneChatMid);
  swap(a.__isset, b.__isset);
}

GetSquareMemberResponse::GetSquareMemberResponse(const GetSquareMemberResponse& other1408) {
  squareMember = other1408.squareMember;
  relation = other1408.relation;
  oneOnOneChatMid = other1408.oneOnOneChatMid;
  __isset = other1408.__isset;
}
GetSquareMemberResponse& GetSquareMemberResponse::operator=(const GetSquareMemberResponse& other1409) {
  squareMember = other1409.squareMember;
  relation = other1409.relation;
  oneOnOneChatMid = other1409.oneOnOneChatMid;
  __isset = other1409.__isset;
  return *this;
}
void GetSquareMemberResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetSquareMemberResponse(";
  out << "squareMember=" << to_string(squareMember);
  out << ", " << "relation=" << to_string(relation);
  out << ", " << "oneOnOneChatMid=" << to_string(oneOnOneChatMid);
  out << ")";
}


GetSquareMembersRequest::~GetSquareMembersRequest() throw() {
}


void GetSquareMembersRequest::__set_mids(const std::set<std::string> & val) {
  this->mids = val;
}
std::ostream& operator<<(std::ostream& out, const GetSquareMembersRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetSquareMembersRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->mids.clear();
            uint32_t _size1410;
            ::apache::thrift::protocol::TType _etype1413;
            xfer += iprot->readSetBegin(_etype1413, _size1410);
            uint32_t _i1414;
            for (_i1414 = 0; _i1414 < _size1410; ++_i1414)
            {
              std::string _elem1415;
              xfer += iprot->readString(_elem1415);
              this->mids.insert(_elem1415);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.mids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetSquareMembersRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetSquareMembersRequest");

  xfer += oprot->writeFieldBegin("mids", ::apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->mids.size()));
    std::set<std::string> ::const_iterator _iter1416;
    for (_iter1416 = this->mids.begin(); _iter1416 != this->mids.end(); ++_iter1416)
    {
      xfer += oprot->writeString((*_iter1416));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetSquareMembersRequest &a, GetSquareMembersRequest &b) {
  using ::std::swap;
  swap(a.mids, b.mids);
  swap(a.__isset, b.__isset);
}

GetSquareMembersRequest::GetSquareMembersRequest(const GetSquareMembersRequest& other1417) {
  mids = other1417.mids;
  __isset = other1417.__isset;
}
GetSquareMembersRequest& GetSquareMembersRequest::operator=(const GetSquareMembersRequest& other1418) {
  mids = other1418.mids;
  __isset = other1418.__isset;
  return *this;
}
void GetSquareMembersRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetSquareMembersRequest(";
  out << "mids=" << to_string(mids);
  out << ")";
}


GetSquareMembersResponse::~GetSquareMembersResponse() throw() {
}


void GetSquareMembersResponse::__set_members(const SquareMember& val) {
  this->members = val;
}
std::ostream& operator<<(std::ostream& out, const GetSquareMembersResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetSquareMembersResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->members.read(iprot);
          this->__isset.members = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetSquareMembersResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetSquareMembersResponse");

  xfer += oprot->writeFieldBegin("members", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->members.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetSquareMembersResponse &a, GetSquareMembersResponse &b) {
  using ::std::swap;
  swap(a.members, b.members);
  swap(a.__isset, b.__isset);
}

GetSquareMembersResponse::GetSquareMembersResponse(const GetSquareMembersResponse& other1419) {
  members = other1419.members;
  __isset = other1419.__isset;
}
GetSquareMembersResponse& GetSquareMembersResponse::operator=(const GetSquareMembersResponse& other1420) {
  members = other1420.members;
  __isset = other1420.__isset;
  return *this;
}
void GetSquareMembersResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetSquareMembersResponse(";
  out << "members=" << to_string(members);
  out << ")";
}


GetSquareMemberRelationsRequest::~GetSquareMemberRelationsRequest() throw() {
}


void GetSquareMemberRelationsRequest::__set_state(const SquareMemberRelationState::type val) {
  this->state = val;
}

void GetSquareMemberRelationsRequest::__set_continuationToken(const std::string& val) {
  this->continuationToken = val;
}

void GetSquareMemberRelationsRequest::__set_limit(const int32_t val) {
  this->limit = val;
}
std::ostream& operator<<(std::ostream& out, const GetSquareMemberRelationsRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetSquareMemberRelationsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1421;
          xfer += iprot->readI32(ecast1421);
          this->state = (SquareMemberRelationState::type)ecast1421;
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->continuationToken);
          this->__isset.continuationToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetSquareMemberRelationsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetSquareMemberRelationsRequest");

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("continuationToken", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->continuationToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->limit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetSquareMemberRelationsRequest &a, GetSquareMemberRelationsRequest &b) {
  using ::std::swap;
  swap(a.state, b.state);
  swap(a.continuationToken, b.continuationToken);
  swap(a.limit, b.limit);
  swap(a.__isset, b.__isset);
}

GetSquareMemberRelationsRequest::GetSquareMemberRelationsRequest(const GetSquareMemberRelationsRequest& other1422) {
  state = other1422.state;
  continuationToken = other1422.continuationToken;
  limit = other1422.limit;
  __isset = other1422.__isset;
}
GetSquareMemberRelationsRequest& GetSquareMemberRelationsRequest::operator=(const GetSquareMemberRelationsRequest& other1423) {
  state = other1423.state;
  continuationToken = other1423.continuationToken;
  limit = other1423.limit;
  __isset = other1423.__isset;
  return *this;
}
void GetSquareMemberRelationsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetSquareMemberRelationsRequest(";
  out << "state=" << to_string(state);
  out << ", " << "continuationToken=" << to_string(continuationToken);
  out << ", " << "limit=" << to_string(limit);
  out << ")";
}


GetSquareMemberRelationsResponse::~GetSquareMemberRelationsResponse() throw() {
}


void GetSquareMemberRelationsResponse::__set_squareMembers(const std::vector<SquareMember> & val) {
  this->squareMembers = val;
}

void GetSquareMemberRelationsResponse::__set_relations(const std::map<std::string, SquareMemberRelation> & val) {
  this->relations = val;
}

void GetSquareMemberRelationsResponse::__set_continuationToken(const std::string& val) {
  this->continuationToken = val;
}
std::ostream& operator<<(std::ostream& out, const GetSquareMemberRelationsResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetSquareMemberRelationsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->squareMembers.clear();
            uint32_t _size1424;
            ::apache::thrift::protocol::TType _etype1427;
            xfer += iprot->readListBegin(_etype1427, _size1424);
            this->squareMembers.resize(_size1424);
            uint32_t _i1428;
            for (_i1428 = 0; _i1428 < _size1424; ++_i1428)
            {
              xfer += this->squareMembers[_i1428].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.squareMembers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->relations.clear();
            uint32_t _size1429;
            ::apache::thrift::protocol::TType _ktype1430;
            ::apache::thrift::protocol::TType _vtype1431;
            xfer += iprot->readMapBegin(_ktype1430, _vtype1431, _size1429);
            uint32_t _i1433;
            for (_i1433 = 0; _i1433 < _size1429; ++_i1433)
            {
              std::string _key1434;
              xfer += iprot->readString(_key1434);
              SquareMemberRelation& _val1435 = this->relations[_key1434];
              xfer += _val1435.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.relations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->continuationToken);
          this->__isset.continuationToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetSquareMemberRelationsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetSquareMemberRelationsResponse");

  xfer += oprot->writeFieldBegin("squareMembers", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->squareMembers.size()));
    std::vector<SquareMember> ::const_iterator _iter1436;
    for (_iter1436 = this->squareMembers.begin(); _iter1436 != this->squareMembers.end(); ++_iter1436)
    {
      xfer += (*_iter1436).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("relations", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->relations.size()));
    std::map<std::string, SquareMemberRelation> ::const_iterator _iter1437;
    for (_iter1437 = this->relations.begin(); _iter1437 != this->relations.end(); ++_iter1437)
    {
      xfer += oprot->writeString(_iter1437->first);
      xfer += _iter1437->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("continuationToken", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->continuationToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetSquareMemberRelationsResponse &a, GetSquareMemberRelationsResponse &b) {
  using ::std::swap;
  swap(a.squareMembers, b.squareMembers);
  swap(a.relations, b.relations);
  swap(a.continuationToken, b.continuationToken);
  swap(a.__isset, b.__isset);
}

GetSquareMemberRelationsResponse::GetSquareMemberRelationsResponse(const GetSquareMemberRelationsResponse& other1438) {
  squareMembers = other1438.squareMembers;
  relations = other1438.relations;
  continuationToken = other1438.continuationToken;
  __isset = other1438.__isset;
}
GetSquareMemberRelationsResponse& GetSquareMemberRelationsResponse::operator=(const GetSquareMemberRelationsResponse& other1439) {
  squareMembers = other1439.squareMembers;
  relations = other1439.relations;
  continuationToken = other1439.continuationToken;
  __isset = other1439.__isset;
  return *this;
}
void GetSquareMemberRelationsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetSquareMemberRelationsResponse(";
  out << "squareMembers=" << to_string(squareMembers);
  out << ", " << "relations=" << to_string(relations);
  out << ", " << "continuationToken=" << to_string(continuationToken);
  out << ")";
}


GetSquareMemberRelationRequest::~GetSquareMemberRelationRequest() throw() {
}


void GetSquareMemberRelationRequest::__set_squareMid(const std::string& val) {
  this->squareMid = val;
}

void GetSquareMemberRelationRequest::__set_targetSquareMemberMid(const std::string& val) {
  this->targetSquareMemberMid = val;
}
std::ostream& operator<<(std::ostream& out, const GetSquareMemberRelationRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetSquareMemberRelationRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMid);
          this->__isset.squareMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->targetSquareMemberMid);
          this->__isset.targetSquareMemberMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetSquareMemberRelationRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetSquareMemberRelationRequest");

  xfer += oprot->writeFieldBegin("squareMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("targetSquareMemberMid", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->targetSquareMemberMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetSquareMemberRelationRequest &a, GetSquareMemberRelationRequest &b) {
  using ::std::swap;
  swap(a.squareMid, b.squareMid);
  swap(a.targetSquareMemberMid, b.targetSquareMemberMid);
  swap(a.__isset, b.__isset);
}

GetSquareMemberRelationRequest::GetSquareMemberRelationRequest(const GetSquareMemberRelationRequest& other1440) {
  squareMid = other1440.squareMid;
  targetSquareMemberMid = other1440.targetSquareMemberMid;
  __isset = other1440.__isset;
}
GetSquareMemberRelationRequest& GetSquareMemberRelationRequest::operator=(const GetSquareMemberRelationRequest& other1441) {
  squareMid = other1441.squareMid;
  targetSquareMemberMid = other1441.targetSquareMemberMid;
  __isset = other1441.__isset;
  return *this;
}
void GetSquareMemberRelationRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetSquareMemberRelationRequest(";
  out << "squareMid=" << to_string(squareMid);
  out << ", " << "targetSquareMemberMid=" << to_string(targetSquareMemberMid);
  out << ")";
}


GetSquareMemberRelationResponse::~GetSquareMemberRelationResponse() throw() {
}


void GetSquareMemberRelationResponse::__set_squareMid(const std::string& val) {
  this->squareMid = val;
}

void GetSquareMemberRelationResponse::__set_targetSquareMemberMid(const std::string& val) {
  this->targetSquareMemberMid = val;
}

void GetSquareMemberRelationResponse::__set_relation(const SquareMemberRelation& val) {
  this->relation = val;
}
std::ostream& operator<<(std::ostream& out, const GetSquareMemberRelationResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetSquareMemberRelationResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMid);
          this->__isset.squareMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->targetSquareMemberMid);
          this->__isset.targetSquareMemberMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->relation.read(iprot);
          this->__isset.relation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetSquareMemberRelationResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetSquareMemberRelationResponse");

  xfer += oprot->writeFieldBegin("squareMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("targetSquareMemberMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->targetSquareMemberMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("relation", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->relation.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetSquareMemberRelationResponse &a, GetSquareMemberRelationResponse &b) {
  using ::std::swap;
  swap(a.squareMid, b.squareMid);
  swap(a.targetSquareMemberMid, b.targetSquareMemberMid);
  swap(a.relation, b.relation);
  swap(a.__isset, b.__isset);
}

GetSquareMemberRelationResponse::GetSquareMemberRelationResponse(const GetSquareMemberRelationResponse& other1442) {
  squareMid = other1442.squareMid;
  targetSquareMemberMid = other1442.targetSquareMemberMid;
  relation = other1442.relation;
  __isset = other1442.__isset;
}
GetSquareMemberRelationResponse& GetSquareMemberRelationResponse::operator=(const GetSquareMemberRelationResponse& other1443) {
  squareMid = other1443.squareMid;
  targetSquareMemberMid = other1443.targetSquareMemberMid;
  relation = other1443.relation;
  __isset = other1443.__isset;
  return *this;
}
void GetSquareMemberRelationResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetSquareMemberRelationResponse(";
  out << "squareMid=" << to_string(squareMid);
  out << ", " << "targetSquareMemberMid=" << to_string(targetSquareMemberMid);
  out << ", " << "relation=" << to_string(relation);
  out << ")";
}


Category::~Category() throw() {
}


void Category::__set_id(const int32_t val) {
  this->id = val;
}

void Category::__set_name(const std::string& val) {
  this->name = val;
}
std::ostream& operator<<(std::ostream& out, const Category& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Category::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Category::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Category");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Category &a, Category &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

Category::Category(const Category& other1444) {
  id = other1444.id;
  name = other1444.name;
  __isset = other1444.__isset;
}
Category& Category::operator=(const Category& other1445) {
  id = other1445.id;
  name = other1445.name;
  __isset = other1445.__isset;
  return *this;
}
void Category::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Category(";
  out << "id=" << to_string(id);
  out << ", " << "name=" << to_string(name);
  out << ")";
}


GetSquareCategoriesRequest::~GetSquareCategoriesRequest() throw() {
}

std::ostream& operator<<(std::ostream& out, const GetSquareCategoriesRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetSquareCategoriesRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetSquareCategoriesRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetSquareCategoriesRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetSquareCategoriesRequest &a, GetSquareCategoriesRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

GetSquareCategoriesRequest::GetSquareCategoriesRequest(const GetSquareCategoriesRequest& other1446) {
  (void) other1446;
}
GetSquareCategoriesRequest& GetSquareCategoriesRequest::operator=(const GetSquareCategoriesRequest& other1447) {
  (void) other1447;
  return *this;
}
void GetSquareCategoriesRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetSquareCategoriesRequest(";
  out << ")";
}


GetSquareCategoriesResponse::~GetSquareCategoriesResponse() throw() {
}


void GetSquareCategoriesResponse::__set_categoryList(const std::vector<Category> & val) {
  this->categoryList = val;
}
std::ostream& operator<<(std::ostream& out, const GetSquareCategoriesResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetSquareCategoriesResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->categoryList.clear();
            uint32_t _size1448;
            ::apache::thrift::protocol::TType _etype1451;
            xfer += iprot->readListBegin(_etype1451, _size1448);
            this->categoryList.resize(_size1448);
            uint32_t _i1452;
            for (_i1452 = 0; _i1452 < _size1448; ++_i1452)
            {
              xfer += this->categoryList[_i1452].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.categoryList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetSquareCategoriesResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetSquareCategoriesResponse");

  xfer += oprot->writeFieldBegin("categoryList", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->categoryList.size()));
    std::vector<Category> ::const_iterator _iter1453;
    for (_iter1453 = this->categoryList.begin(); _iter1453 != this->categoryList.end(); ++_iter1453)
    {
      xfer += (*_iter1453).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetSquareCategoriesResponse &a, GetSquareCategoriesResponse &b) {
  using ::std::swap;
  swap(a.categoryList, b.categoryList);
  swap(a.__isset, b.__isset);
}

GetSquareCategoriesResponse::GetSquareCategoriesResponse(const GetSquareCategoriesResponse& other1454) {
  categoryList = other1454.categoryList;
  __isset = other1454.__isset;
}
GetSquareCategoriesResponse& GetSquareCategoriesResponse::operator=(const GetSquareCategoriesResponse& other1455) {
  categoryList = other1455.categoryList;
  __isset = other1455.__isset;
  return *this;
}
void GetSquareCategoriesResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetSquareCategoriesResponse(";
  out << "categoryList=" << to_string(categoryList);
  out << ")";
}


UpdateSquareRequest::~UpdateSquareRequest() throw() {
}


void UpdateSquareRequest::__set_updatedAttrs(const std::set<SquareAttribute::type> & val) {
  this->updatedAttrs = val;
}

void UpdateSquareRequest::__set_square(const Square& val) {
  this->square = val;
}
std::ostream& operator<<(std::ostream& out, const UpdateSquareRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UpdateSquareRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->updatedAttrs.clear();
            uint32_t _size1456;
            ::apache::thrift::protocol::TType _etype1459;
            xfer += iprot->readSetBegin(_etype1459, _size1456);
            uint32_t _i1460;
            for (_i1460 = 0; _i1460 < _size1456; ++_i1460)
            {
              SquareAttribute::type _elem1461;
              int32_t ecast1462;
              xfer += iprot->readI32(ecast1462);
              _elem1461 = (SquareAttribute::type)ecast1462;
              this->updatedAttrs.insert(_elem1461);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.updatedAttrs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->square.read(iprot);
          this->__isset.square = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateSquareRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UpdateSquareRequest");

  xfer += oprot->writeFieldBegin("updatedAttrs", ::apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->updatedAttrs.size()));
    std::set<SquareAttribute::type> ::const_iterator _iter1463;
    for (_iter1463 = this->updatedAttrs.begin(); _iter1463 != this->updatedAttrs.end(); ++_iter1463)
    {
      xfer += oprot->writeI32((int32_t)(*_iter1463));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("square", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->square.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateSquareRequest &a, UpdateSquareRequest &b) {
  using ::std::swap;
  swap(a.updatedAttrs, b.updatedAttrs);
  swap(a.square, b.square);
  swap(a.__isset, b.__isset);
}

UpdateSquareRequest::UpdateSquareRequest(const UpdateSquareRequest& other1464) {
  updatedAttrs = other1464.updatedAttrs;
  square = other1464.square;
  __isset = other1464.__isset;
}
UpdateSquareRequest& UpdateSquareRequest::operator=(const UpdateSquareRequest& other1465) {
  updatedAttrs = other1465.updatedAttrs;
  square = other1465.square;
  __isset = other1465.__isset;
  return *this;
}
void UpdateSquareRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UpdateSquareRequest(";
  out << "updatedAttrs=" << to_string(updatedAttrs);
  out << ", " << "square=" << to_string(square);
  out << ")";
}


UpdateSquareResponse::~UpdateSquareResponse() throw() {
}


void UpdateSquareResponse::__set_updatedAttrs(const std::set<SquareAttribute::type> & val) {
  this->updatedAttrs = val;
}

void UpdateSquareResponse::__set_square(const Square& val) {
  this->square = val;
}
std::ostream& operator<<(std::ostream& out, const UpdateSquareResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UpdateSquareResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->updatedAttrs.clear();
            uint32_t _size1466;
            ::apache::thrift::protocol::TType _etype1469;
            xfer += iprot->readSetBegin(_etype1469, _size1466);
            uint32_t _i1470;
            for (_i1470 = 0; _i1470 < _size1466; ++_i1470)
            {
              SquareAttribute::type _elem1471;
              int32_t ecast1472;
              xfer += iprot->readI32(ecast1472);
              _elem1471 = (SquareAttribute::type)ecast1472;
              this->updatedAttrs.insert(_elem1471);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.updatedAttrs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->square.read(iprot);
          this->__isset.square = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateSquareResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UpdateSquareResponse");

  xfer += oprot->writeFieldBegin("updatedAttrs", ::apache::thrift::protocol::T_SET, 1);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->updatedAttrs.size()));
    std::set<SquareAttribute::type> ::const_iterator _iter1473;
    for (_iter1473 = this->updatedAttrs.begin(); _iter1473 != this->updatedAttrs.end(); ++_iter1473)
    {
      xfer += oprot->writeI32((int32_t)(*_iter1473));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("square", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->square.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateSquareResponse &a, UpdateSquareResponse &b) {
  using ::std::swap;
  swap(a.updatedAttrs, b.updatedAttrs);
  swap(a.square, b.square);
  swap(a.__isset, b.__isset);
}

UpdateSquareResponse::UpdateSquareResponse(const UpdateSquareResponse& other1474) {
  updatedAttrs = other1474.updatedAttrs;
  square = other1474.square;
  __isset = other1474.__isset;
}
UpdateSquareResponse& UpdateSquareResponse::operator=(const UpdateSquareResponse& other1475) {
  updatedAttrs = other1475.updatedAttrs;
  square = other1475.square;
  __isset = other1475.__isset;
  return *this;
}
void UpdateSquareResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UpdateSquareResponse(";
  out << "updatedAttrs=" << to_string(updatedAttrs);
  out << ", " << "square=" << to_string(square);
  out << ")";
}


SearchSquaresRequest::~SearchSquaresRequest() throw() {
}


void SearchSquaresRequest::__set_query(const std::string& val) {
  this->query = val;
}

void SearchSquaresRequest::__set_continuationToken(const std::string& val) {
  this->continuationToken = val;
}

void SearchSquaresRequest::__set_limit(const int32_t val) {
  this->limit = val;
}
std::ostream& operator<<(std::ostream& out, const SearchSquaresRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SearchSquaresRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->query);
          this->__isset.query = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->continuationToken);
          this->__isset.continuationToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SearchSquaresRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SearchSquaresRequest");

  xfer += oprot->writeFieldBegin("query", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->query);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("continuationToken", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->continuationToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->limit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SearchSquaresRequest &a, SearchSquaresRequest &b) {
  using ::std::swap;
  swap(a.query, b.query);
  swap(a.continuationToken, b.continuationToken);
  swap(a.limit, b.limit);
  swap(a.__isset, b.__isset);
}

SearchSquaresRequest::SearchSquaresRequest(const SearchSquaresRequest& other1476) {
  query = other1476.query;
  continuationToken = other1476.continuationToken;
  limit = other1476.limit;
  __isset = other1476.__isset;
}
SearchSquaresRequest& SearchSquaresRequest::operator=(const SearchSquaresRequest& other1477) {
  query = other1477.query;
  continuationToken = other1477.continuationToken;
  limit = other1477.limit;
  __isset = other1477.__isset;
  return *this;
}
void SearchSquaresRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SearchSquaresRequest(";
  out << "query=" << to_string(query);
  out << ", " << "continuationToken=" << to_string(continuationToken);
  out << ", " << "limit=" << to_string(limit);
  out << ")";
}


SearchSquaresResponse::~SearchSquaresResponse() throw() {
}


void SearchSquaresResponse::__set_squares(const std::vector<Square> & val) {
  this->squares = val;
}

void SearchSquaresResponse::__set_squareStatuses(const std::map<std::string, SquareStatus> & val) {
  this->squareStatuses = val;
}

void SearchSquaresResponse::__set_myMemberships(const std::map<std::string, SquareMember> & val) {
  this->myMemberships = val;
}

void SearchSquaresResponse::__set_continuationToken(const std::string& val) {
  this->continuationToken = val;
}

void SearchSquaresResponse::__set_noteStatuses(const std::map<std::string, NoteStatus> & val) {
  this->noteStatuses = val;
}
std::ostream& operator<<(std::ostream& out, const SearchSquaresResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SearchSquaresResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->squares.clear();
            uint32_t _size1478;
            ::apache::thrift::protocol::TType _etype1481;
            xfer += iprot->readListBegin(_etype1481, _size1478);
            this->squares.resize(_size1478);
            uint32_t _i1482;
            for (_i1482 = 0; _i1482 < _size1478; ++_i1482)
            {
              xfer += this->squares[_i1482].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.squares = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->squareStatuses.clear();
            uint32_t _size1483;
            ::apache::thrift::protocol::TType _ktype1484;
            ::apache::thrift::protocol::TType _vtype1485;
            xfer += iprot->readMapBegin(_ktype1484, _vtype1485, _size1483);
            uint32_t _i1487;
            for (_i1487 = 0; _i1487 < _size1483; ++_i1487)
            {
              std::string _key1488;
              xfer += iprot->readString(_key1488);
              SquareStatus& _val1489 = this->squareStatuses[_key1488];
              xfer += _val1489.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.squareStatuses = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->myMemberships.clear();
            uint32_t _size1490;
            ::apache::thrift::protocol::TType _ktype1491;
            ::apache::thrift::protocol::TType _vtype1492;
            xfer += iprot->readMapBegin(_ktype1491, _vtype1492, _size1490);
            uint32_t _i1494;
            for (_i1494 = 0; _i1494 < _size1490; ++_i1494)
            {
              std::string _key1495;
              xfer += iprot->readString(_key1495);
              SquareMember& _val1496 = this->myMemberships[_key1495];
              xfer += _val1496.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.myMemberships = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->continuationToken);
          this->__isset.continuationToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->noteStatuses.clear();
            uint32_t _size1497;
            ::apache::thrift::protocol::TType _ktype1498;
            ::apache::thrift::protocol::TType _vtype1499;
            xfer += iprot->readMapBegin(_ktype1498, _vtype1499, _size1497);
            uint32_t _i1501;
            for (_i1501 = 0; _i1501 < _size1497; ++_i1501)
            {
              std::string _key1502;
              xfer += iprot->readString(_key1502);
              NoteStatus& _val1503 = this->noteStatuses[_key1502];
              xfer += _val1503.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.noteStatuses = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SearchSquaresResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SearchSquaresResponse");

  xfer += oprot->writeFieldBegin("squares", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->squares.size()));
    std::vector<Square> ::const_iterator _iter1504;
    for (_iter1504 = this->squares.begin(); _iter1504 != this->squares.end(); ++_iter1504)
    {
      xfer += (*_iter1504).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareStatuses", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->squareStatuses.size()));
    std::map<std::string, SquareStatus> ::const_iterator _iter1505;
    for (_iter1505 = this->squareStatuses.begin(); _iter1505 != this->squareStatuses.end(); ++_iter1505)
    {
      xfer += oprot->writeString(_iter1505->first);
      xfer += _iter1505->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("myMemberships", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->myMemberships.size()));
    std::map<std::string, SquareMember> ::const_iterator _iter1506;
    for (_iter1506 = this->myMemberships.begin(); _iter1506 != this->myMemberships.end(); ++_iter1506)
    {
      xfer += oprot->writeString(_iter1506->first);
      xfer += _iter1506->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("continuationToken", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->continuationToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("noteStatuses", ::apache::thrift::protocol::T_MAP, 5);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->noteStatuses.size()));
    std::map<std::string, NoteStatus> ::const_iterator _iter1507;
    for (_iter1507 = this->noteStatuses.begin(); _iter1507 != this->noteStatuses.end(); ++_iter1507)
    {
      xfer += oprot->writeString(_iter1507->first);
      xfer += _iter1507->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SearchSquaresResponse &a, SearchSquaresResponse &b) {
  using ::std::swap;
  swap(a.squares, b.squares);
  swap(a.squareStatuses, b.squareStatuses);
  swap(a.myMemberships, b.myMemberships);
  swap(a.continuationToken, b.continuationToken);
  swap(a.noteStatuses, b.noteStatuses);
  swap(a.__isset, b.__isset);
}

SearchSquaresResponse::SearchSquaresResponse(const SearchSquaresResponse& other1508) {
  squares = other1508.squares;
  squareStatuses = other1508.squareStatuses;
  myMemberships = other1508.myMemberships;
  continuationToken = other1508.continuationToken;
  noteStatuses = other1508.noteStatuses;
  __isset = other1508.__isset;
}
SearchSquaresResponse& SearchSquaresResponse::operator=(const SearchSquaresResponse& other1509) {
  squares = other1509.squares;
  squareStatuses = other1509.squareStatuses;
  myMemberships = other1509.myMemberships;
  continuationToken = other1509.continuationToken;
  noteStatuses = other1509.noteStatuses;
  __isset = other1509.__isset;
  return *this;
}
void SearchSquaresResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SearchSquaresResponse(";
  out << "squares=" << to_string(squares);
  out << ", " << "squareStatuses=" << to_string(squareStatuses);
  out << ", " << "myMemberships=" << to_string(myMemberships);
  out << ", " << "continuationToken=" << to_string(continuationToken);
  out << ", " << "noteStatuses=" << to_string(noteStatuses);
  out << ")";
}


GetSquareFeatureSetRequest::~GetSquareFeatureSetRequest() throw() {
}


void GetSquareFeatureSetRequest::__set_squareMid(const std::string& val) {
  this->squareMid = val;
}
std::ostream& operator<<(std::ostream& out, const GetSquareFeatureSetRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetSquareFeatureSetRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMid);
          this->__isset.squareMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetSquareFeatureSetRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetSquareFeatureSetRequest");

  xfer += oprot->writeFieldBegin("squareMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetSquareFeatureSetRequest &a, GetSquareFeatureSetRequest &b) {
  using ::std::swap;
  swap(a.squareMid, b.squareMid);
  swap(a.__isset, b.__isset);
}

GetSquareFeatureSetRequest::GetSquareFeatureSetRequest(const GetSquareFeatureSetRequest& other1510) {
  squareMid = other1510.squareMid;
  __isset = other1510.__isset;
}
GetSquareFeatureSetRequest& GetSquareFeatureSetRequest::operator=(const GetSquareFeatureSetRequest& other1511) {
  squareMid = other1511.squareMid;
  __isset = other1511.__isset;
  return *this;
}
void GetSquareFeatureSetRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetSquareFeatureSetRequest(";
  out << "squareMid=" << to_string(squareMid);
  out << ")";
}


GetSquareFeatureSetResponse::~GetSquareFeatureSetResponse() throw() {
}


void GetSquareFeatureSetResponse::__set_squareFeatureSet(const SquareFeatureSet& val) {
  this->squareFeatureSet = val;
}
std::ostream& operator<<(std::ostream& out, const GetSquareFeatureSetResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetSquareFeatureSetResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareFeatureSet.read(iprot);
          this->__isset.squareFeatureSet = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetSquareFeatureSetResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetSquareFeatureSetResponse");

  xfer += oprot->writeFieldBegin("squareFeatureSet", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->squareFeatureSet.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetSquareFeatureSetResponse &a, GetSquareFeatureSetResponse &b) {
  using ::std::swap;
  swap(a.squareFeatureSet, b.squareFeatureSet);
  swap(a.__isset, b.__isset);
}

GetSquareFeatureSetResponse::GetSquareFeatureSetResponse(const GetSquareFeatureSetResponse& other1512) {
  squareFeatureSet = other1512.squareFeatureSet;
  __isset = other1512.__isset;
}
GetSquareFeatureSetResponse& GetSquareFeatureSetResponse::operator=(const GetSquareFeatureSetResponse& other1513) {
  squareFeatureSet = other1513.squareFeatureSet;
  __isset = other1513.__isset;
  return *this;
}
void GetSquareFeatureSetResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetSquareFeatureSetResponse(";
  out << "squareFeatureSet=" << to_string(squareFeatureSet);
  out << ")";
}


UpdateSquareFeatureSetRequest::~UpdateSquareFeatureSetRequest() throw() {
}


void UpdateSquareFeatureSetRequest::__set_updateAttributes(const std::set<SquareFeatureSetAttribute::type> & val) {
  this->updateAttributes = val;
}

void UpdateSquareFeatureSetRequest::__set_squareFeatureSet(const SquareFeatureSet& val) {
  this->squareFeatureSet = val;
}
std::ostream& operator<<(std::ostream& out, const UpdateSquareFeatureSetRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UpdateSquareFeatureSetRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->updateAttributes.clear();
            uint32_t _size1514;
            ::apache::thrift::protocol::TType _etype1517;
            xfer += iprot->readSetBegin(_etype1517, _size1514);
            uint32_t _i1518;
            for (_i1518 = 0; _i1518 < _size1514; ++_i1518)
            {
              SquareFeatureSetAttribute::type _elem1519;
              int32_t ecast1520;
              xfer += iprot->readI32(ecast1520);
              _elem1519 = (SquareFeatureSetAttribute::type)ecast1520;
              this->updateAttributes.insert(_elem1519);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.updateAttributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareFeatureSet.read(iprot);
          this->__isset.squareFeatureSet = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateSquareFeatureSetRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UpdateSquareFeatureSetRequest");

  xfer += oprot->writeFieldBegin("updateAttributes", ::apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->updateAttributes.size()));
    std::set<SquareFeatureSetAttribute::type> ::const_iterator _iter1521;
    for (_iter1521 = this->updateAttributes.begin(); _iter1521 != this->updateAttributes.end(); ++_iter1521)
    {
      xfer += oprot->writeI32((int32_t)(*_iter1521));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareFeatureSet", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->squareFeatureSet.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateSquareFeatureSetRequest &a, UpdateSquareFeatureSetRequest &b) {
  using ::std::swap;
  swap(a.updateAttributes, b.updateAttributes);
  swap(a.squareFeatureSet, b.squareFeatureSet);
  swap(a.__isset, b.__isset);
}

UpdateSquareFeatureSetRequest::UpdateSquareFeatureSetRequest(const UpdateSquareFeatureSetRequest& other1522) {
  updateAttributes = other1522.updateAttributes;
  squareFeatureSet = other1522.squareFeatureSet;
  __isset = other1522.__isset;
}
UpdateSquareFeatureSetRequest& UpdateSquareFeatureSetRequest::operator=(const UpdateSquareFeatureSetRequest& other1523) {
  updateAttributes = other1523.updateAttributes;
  squareFeatureSet = other1523.squareFeatureSet;
  __isset = other1523.__isset;
  return *this;
}
void UpdateSquareFeatureSetRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UpdateSquareFeatureSetRequest(";
  out << "updateAttributes=" << to_string(updateAttributes);
  out << ", " << "squareFeatureSet=" << to_string(squareFeatureSet);
  out << ")";
}


UpdateSquareFeatureSetResponse::~UpdateSquareFeatureSetResponse() throw() {
}


void UpdateSquareFeatureSetResponse::__set_updateAttributes(const std::set<SquareFeatureSetAttribute::type> & val) {
  this->updateAttributes = val;
}

void UpdateSquareFeatureSetResponse::__set_squareFeatureSet(const SquareFeatureSet& val) {
  this->squareFeatureSet = val;
}
std::ostream& operator<<(std::ostream& out, const UpdateSquareFeatureSetResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UpdateSquareFeatureSetResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->updateAttributes.clear();
            uint32_t _size1524;
            ::apache::thrift::protocol::TType _etype1527;
            xfer += iprot->readSetBegin(_etype1527, _size1524);
            uint32_t _i1528;
            for (_i1528 = 0; _i1528 < _size1524; ++_i1528)
            {
              SquareFeatureSetAttribute::type _elem1529;
              int32_t ecast1530;
              xfer += iprot->readI32(ecast1530);
              _elem1529 = (SquareFeatureSetAttribute::type)ecast1530;
              this->updateAttributes.insert(_elem1529);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.updateAttributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareFeatureSet.read(iprot);
          this->__isset.squareFeatureSet = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateSquareFeatureSetResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UpdateSquareFeatureSetResponse");

  xfer += oprot->writeFieldBegin("updateAttributes", ::apache::thrift::protocol::T_SET, 1);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->updateAttributes.size()));
    std::set<SquareFeatureSetAttribute::type> ::const_iterator _iter1531;
    for (_iter1531 = this->updateAttributes.begin(); _iter1531 != this->updateAttributes.end(); ++_iter1531)
    {
      xfer += oprot->writeI32((int32_t)(*_iter1531));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareFeatureSet", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->squareFeatureSet.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateSquareFeatureSetResponse &a, UpdateSquareFeatureSetResponse &b) {
  using ::std::swap;
  swap(a.updateAttributes, b.updateAttributes);
  swap(a.squareFeatureSet, b.squareFeatureSet);
  swap(a.__isset, b.__isset);
}

UpdateSquareFeatureSetResponse::UpdateSquareFeatureSetResponse(const UpdateSquareFeatureSetResponse& other1532) {
  updateAttributes = other1532.updateAttributes;
  squareFeatureSet = other1532.squareFeatureSet;
  __isset = other1532.__isset;
}
UpdateSquareFeatureSetResponse& UpdateSquareFeatureSetResponse::operator=(const UpdateSquareFeatureSetResponse& other1533) {
  updateAttributes = other1533.updateAttributes;
  squareFeatureSet = other1533.squareFeatureSet;
  __isset = other1533.__isset;
  return *this;
}
void UpdateSquareFeatureSetResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UpdateSquareFeatureSetResponse(";
  out << "updateAttributes=" << to_string(updateAttributes);
  out << ", " << "squareFeatureSet=" << to_string(squareFeatureSet);
  out << ")";
}


UpdateSquareMemberRequest::~UpdateSquareMemberRequest() throw() {
}


void UpdateSquareMemberRequest::__set_updatedAttrs(const std::set<SquareMemberAttribute::type> & val) {
  this->updatedAttrs = val;
}

void UpdateSquareMemberRequest::__set_updatedPreferenceAttrs(const std::set<SquarePreferenceAttribute::type> & val) {
  this->updatedPreferenceAttrs = val;
}

void UpdateSquareMemberRequest::__set_squareMember(const SquareMember& val) {
  this->squareMember = val;
}
std::ostream& operator<<(std::ostream& out, const UpdateSquareMemberRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UpdateSquareMemberRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->updatedAttrs.clear();
            uint32_t _size1534;
            ::apache::thrift::protocol::TType _etype1537;
            xfer += iprot->readSetBegin(_etype1537, _size1534);
            uint32_t _i1538;
            for (_i1538 = 0; _i1538 < _size1534; ++_i1538)
            {
              SquareMemberAttribute::type _elem1539;
              int32_t ecast1540;
              xfer += iprot->readI32(ecast1540);
              _elem1539 = (SquareMemberAttribute::type)ecast1540;
              this->updatedAttrs.insert(_elem1539);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.updatedAttrs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->updatedPreferenceAttrs.clear();
            uint32_t _size1541;
            ::apache::thrift::protocol::TType _etype1544;
            xfer += iprot->readSetBegin(_etype1544, _size1541);
            uint32_t _i1545;
            for (_i1545 = 0; _i1545 < _size1541; ++_i1545)
            {
              SquarePreferenceAttribute::type _elem1546;
              int32_t ecast1547;
              xfer += iprot->readI32(ecast1547);
              _elem1546 = (SquarePreferenceAttribute::type)ecast1547;
              this->updatedPreferenceAttrs.insert(_elem1546);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.updatedPreferenceAttrs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareMember.read(iprot);
          this->__isset.squareMember = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateSquareMemberRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UpdateSquareMemberRequest");

  xfer += oprot->writeFieldBegin("updatedAttrs", ::apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->updatedAttrs.size()));
    std::set<SquareMemberAttribute::type> ::const_iterator _iter1548;
    for (_iter1548 = this->updatedAttrs.begin(); _iter1548 != this->updatedAttrs.end(); ++_iter1548)
    {
      xfer += oprot->writeI32((int32_t)(*_iter1548));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("updatedPreferenceAttrs", ::apache::thrift::protocol::T_SET, 3);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->updatedPreferenceAttrs.size()));
    std::set<SquarePreferenceAttribute::type> ::const_iterator _iter1549;
    for (_iter1549 = this->updatedPreferenceAttrs.begin(); _iter1549 != this->updatedPreferenceAttrs.end(); ++_iter1549)
    {
      xfer += oprot->writeI32((int32_t)(*_iter1549));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareMember", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->squareMember.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateSquareMemberRequest &a, UpdateSquareMemberRequest &b) {
  using ::std::swap;
  swap(a.updatedAttrs, b.updatedAttrs);
  swap(a.updatedPreferenceAttrs, b.updatedPreferenceAttrs);
  swap(a.squareMember, b.squareMember);
  swap(a.__isset, b.__isset);
}

UpdateSquareMemberRequest::UpdateSquareMemberRequest(const UpdateSquareMemberRequest& other1550) {
  updatedAttrs = other1550.updatedAttrs;
  updatedPreferenceAttrs = other1550.updatedPreferenceAttrs;
  squareMember = other1550.squareMember;
  __isset = other1550.__isset;
}
UpdateSquareMemberRequest& UpdateSquareMemberRequest::operator=(const UpdateSquareMemberRequest& other1551) {
  updatedAttrs = other1551.updatedAttrs;
  updatedPreferenceAttrs = other1551.updatedPreferenceAttrs;
  squareMember = other1551.squareMember;
  __isset = other1551.__isset;
  return *this;
}
void UpdateSquareMemberRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UpdateSquareMemberRequest(";
  out << "updatedAttrs=" << to_string(updatedAttrs);
  out << ", " << "updatedPreferenceAttrs=" << to_string(updatedPreferenceAttrs);
  out << ", " << "squareMember=" << to_string(squareMember);
  out << ")";
}


UpdateSquareMemberResponse::~UpdateSquareMemberResponse() throw() {
}


void UpdateSquareMemberResponse::__set_updatedAttrs(const std::set<SquareMemberAttribute::type> & val) {
  this->updatedAttrs = val;
}

void UpdateSquareMemberResponse::__set_squareMember(const SquareMember& val) {
  this->squareMember = val;
}

void UpdateSquareMemberResponse::__set_updatedPreferenceAttrs(const std::set<SquarePreferenceAttribute::type> & val) {
  this->updatedPreferenceAttrs = val;
}
std::ostream& operator<<(std::ostream& out, const UpdateSquareMemberResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UpdateSquareMemberResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->updatedAttrs.clear();
            uint32_t _size1552;
            ::apache::thrift::protocol::TType _etype1555;
            xfer += iprot->readSetBegin(_etype1555, _size1552);
            uint32_t _i1556;
            for (_i1556 = 0; _i1556 < _size1552; ++_i1556)
            {
              SquareMemberAttribute::type _elem1557;
              int32_t ecast1558;
              xfer += iprot->readI32(ecast1558);
              _elem1557 = (SquareMemberAttribute::type)ecast1558;
              this->updatedAttrs.insert(_elem1557);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.updatedAttrs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareMember.read(iprot);
          this->__isset.squareMember = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->updatedPreferenceAttrs.clear();
            uint32_t _size1559;
            ::apache::thrift::protocol::TType _etype1562;
            xfer += iprot->readSetBegin(_etype1562, _size1559);
            uint32_t _i1563;
            for (_i1563 = 0; _i1563 < _size1559; ++_i1563)
            {
              SquarePreferenceAttribute::type _elem1564;
              int32_t ecast1565;
              xfer += iprot->readI32(ecast1565);
              _elem1564 = (SquarePreferenceAttribute::type)ecast1565;
              this->updatedPreferenceAttrs.insert(_elem1564);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.updatedPreferenceAttrs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateSquareMemberResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UpdateSquareMemberResponse");

  xfer += oprot->writeFieldBegin("updatedAttrs", ::apache::thrift::protocol::T_SET, 1);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->updatedAttrs.size()));
    std::set<SquareMemberAttribute::type> ::const_iterator _iter1566;
    for (_iter1566 = this->updatedAttrs.begin(); _iter1566 != this->updatedAttrs.end(); ++_iter1566)
    {
      xfer += oprot->writeI32((int32_t)(*_iter1566));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareMember", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->squareMember.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("updatedPreferenceAttrs", ::apache::thrift::protocol::T_SET, 3);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->updatedPreferenceAttrs.size()));
    std::set<SquarePreferenceAttribute::type> ::const_iterator _iter1567;
    for (_iter1567 = this->updatedPreferenceAttrs.begin(); _iter1567 != this->updatedPreferenceAttrs.end(); ++_iter1567)
    {
      xfer += oprot->writeI32((int32_t)(*_iter1567));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateSquareMemberResponse &a, UpdateSquareMemberResponse &b) {
  using ::std::swap;
  swap(a.updatedAttrs, b.updatedAttrs);
  swap(a.squareMember, b.squareMember);
  swap(a.updatedPreferenceAttrs, b.updatedPreferenceAttrs);
  swap(a.__isset, b.__isset);
}

UpdateSquareMemberResponse::UpdateSquareMemberResponse(const UpdateSquareMemberResponse& other1568) {
  updatedAttrs = other1568.updatedAttrs;
  squareMember = other1568.squareMember;
  updatedPreferenceAttrs = other1568.updatedPreferenceAttrs;
  __isset = other1568.__isset;
}
UpdateSquareMemberResponse& UpdateSquareMemberResponse::operator=(const UpdateSquareMemberResponse& other1569) {
  updatedAttrs = other1569.updatedAttrs;
  squareMember = other1569.squareMember;
  updatedPreferenceAttrs = other1569.updatedPreferenceAttrs;
  __isset = other1569.__isset;
  return *this;
}
void UpdateSquareMemberResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UpdateSquareMemberResponse(";
  out << "updatedAttrs=" << to_string(updatedAttrs);
  out << ", " << "squareMember=" << to_string(squareMember);
  out << ", " << "updatedPreferenceAttrs=" << to_string(updatedPreferenceAttrs);
  out << ")";
}


UpdateSquareMembersRequest::~UpdateSquareMembersRequest() throw() {
}


void UpdateSquareMembersRequest::__set_updatedAttrs(const std::set<SquareMemberAttribute::type> & val) {
  this->updatedAttrs = val;
}

void UpdateSquareMembersRequest::__set_members(const std::vector<SquareMember> & val) {
  this->members = val;
}
std::ostream& operator<<(std::ostream& out, const UpdateSquareMembersRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UpdateSquareMembersRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->updatedAttrs.clear();
            uint32_t _size1570;
            ::apache::thrift::protocol::TType _etype1573;
            xfer += iprot->readSetBegin(_etype1573, _size1570);
            uint32_t _i1574;
            for (_i1574 = 0; _i1574 < _size1570; ++_i1574)
            {
              SquareMemberAttribute::type _elem1575;
              int32_t ecast1576;
              xfer += iprot->readI32(ecast1576);
              _elem1575 = (SquareMemberAttribute::type)ecast1576;
              this->updatedAttrs.insert(_elem1575);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.updatedAttrs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->members.clear();
            uint32_t _size1577;
            ::apache::thrift::protocol::TType _etype1580;
            xfer += iprot->readListBegin(_etype1580, _size1577);
            this->members.resize(_size1577);
            uint32_t _i1581;
            for (_i1581 = 0; _i1581 < _size1577; ++_i1581)
            {
              xfer += this->members[_i1581].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.members = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateSquareMembersRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UpdateSquareMembersRequest");

  xfer += oprot->writeFieldBegin("updatedAttrs", ::apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->updatedAttrs.size()));
    std::set<SquareMemberAttribute::type> ::const_iterator _iter1582;
    for (_iter1582 = this->updatedAttrs.begin(); _iter1582 != this->updatedAttrs.end(); ++_iter1582)
    {
      xfer += oprot->writeI32((int32_t)(*_iter1582));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("members", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->members.size()));
    std::vector<SquareMember> ::const_iterator _iter1583;
    for (_iter1583 = this->members.begin(); _iter1583 != this->members.end(); ++_iter1583)
    {
      xfer += (*_iter1583).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateSquareMembersRequest &a, UpdateSquareMembersRequest &b) {
  using ::std::swap;
  swap(a.updatedAttrs, b.updatedAttrs);
  swap(a.members, b.members);
  swap(a.__isset, b.__isset);
}

UpdateSquareMembersRequest::UpdateSquareMembersRequest(const UpdateSquareMembersRequest& other1584) {
  updatedAttrs = other1584.updatedAttrs;
  members = other1584.members;
  __isset = other1584.__isset;
}
UpdateSquareMembersRequest& UpdateSquareMembersRequest::operator=(const UpdateSquareMembersRequest& other1585) {
  updatedAttrs = other1585.updatedAttrs;
  members = other1585.members;
  __isset = other1585.__isset;
  return *this;
}
void UpdateSquareMembersRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UpdateSquareMembersRequest(";
  out << "updatedAttrs=" << to_string(updatedAttrs);
  out << ", " << "members=" << to_string(members);
  out << ")";
}


UpdateSquareMembersResponse::~UpdateSquareMembersResponse() throw() {
}


void UpdateSquareMembersResponse::__set_updatedAttrs(const std::set<SquareMemberAttribute::type> & val) {
  this->updatedAttrs = val;
}

void UpdateSquareMembersResponse::__set_editor(const SquareMember& val) {
  this->editor = val;
}

void UpdateSquareMembersResponse::__set_members(const std::map<std::string, SquareMember> & val) {
  this->members = val;
}
std::ostream& operator<<(std::ostream& out, const UpdateSquareMembersResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UpdateSquareMembersResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->updatedAttrs.clear();
            uint32_t _size1586;
            ::apache::thrift::protocol::TType _etype1589;
            xfer += iprot->readSetBegin(_etype1589, _size1586);
            uint32_t _i1590;
            for (_i1590 = 0; _i1590 < _size1586; ++_i1590)
            {
              SquareMemberAttribute::type _elem1591;
              int32_t ecast1592;
              xfer += iprot->readI32(ecast1592);
              _elem1591 = (SquareMemberAttribute::type)ecast1592;
              this->updatedAttrs.insert(_elem1591);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.updatedAttrs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->editor.read(iprot);
          this->__isset.editor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->members.clear();
            uint32_t _size1593;
            ::apache::thrift::protocol::TType _ktype1594;
            ::apache::thrift::protocol::TType _vtype1595;
            xfer += iprot->readMapBegin(_ktype1594, _vtype1595, _size1593);
            uint32_t _i1597;
            for (_i1597 = 0; _i1597 < _size1593; ++_i1597)
            {
              std::string _key1598;
              xfer += iprot->readString(_key1598);
              SquareMember& _val1599 = this->members[_key1598];
              xfer += _val1599.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.members = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateSquareMembersResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UpdateSquareMembersResponse");

  xfer += oprot->writeFieldBegin("updatedAttrs", ::apache::thrift::protocol::T_SET, 1);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->updatedAttrs.size()));
    std::set<SquareMemberAttribute::type> ::const_iterator _iter1600;
    for (_iter1600 = this->updatedAttrs.begin(); _iter1600 != this->updatedAttrs.end(); ++_iter1600)
    {
      xfer += oprot->writeI32((int32_t)(*_iter1600));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("editor", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->editor.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("members", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->members.size()));
    std::map<std::string, SquareMember> ::const_iterator _iter1601;
    for (_iter1601 = this->members.begin(); _iter1601 != this->members.end(); ++_iter1601)
    {
      xfer += oprot->writeString(_iter1601->first);
      xfer += _iter1601->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateSquareMembersResponse &a, UpdateSquareMembersResponse &b) {
  using ::std::swap;
  swap(a.updatedAttrs, b.updatedAttrs);
  swap(a.editor, b.editor);
  swap(a.members, b.members);
  swap(a.__isset, b.__isset);
}

UpdateSquareMembersResponse::UpdateSquareMembersResponse(const UpdateSquareMembersResponse& other1602) {
  updatedAttrs = other1602.updatedAttrs;
  editor = other1602.editor;
  members = other1602.members;
  __isset = other1602.__isset;
}
UpdateSquareMembersResponse& UpdateSquareMembersResponse::operator=(const UpdateSquareMembersResponse& other1603) {
  updatedAttrs = other1603.updatedAttrs;
  editor = other1603.editor;
  members = other1603.members;
  __isset = other1603.__isset;
  return *this;
}
void UpdateSquareMembersResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UpdateSquareMembersResponse(";
  out << "updatedAttrs=" << to_string(updatedAttrs);
  out << ", " << "editor=" << to_string(editor);
  out << ", " << "members=" << to_string(members);
  out << ")";
}


RejectSquareMembersRequest::~RejectSquareMembersRequest() throw() {
}


void RejectSquareMembersRequest::__set_squareMid(const std::string& val) {
  this->squareMid = val;
}

void RejectSquareMembersRequest::__set_requestedMemberMids(const std::vector<std::string> & val) {
  this->requestedMemberMids = val;
}
std::ostream& operator<<(std::ostream& out, const RejectSquareMembersRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RejectSquareMembersRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMid);
          this->__isset.squareMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->requestedMemberMids.clear();
            uint32_t _size1604;
            ::apache::thrift::protocol::TType _etype1607;
            xfer += iprot->readListBegin(_etype1607, _size1604);
            this->requestedMemberMids.resize(_size1604);
            uint32_t _i1608;
            for (_i1608 = 0; _i1608 < _size1604; ++_i1608)
            {
              xfer += iprot->readString(this->requestedMemberMids[_i1608]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.requestedMemberMids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RejectSquareMembersRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RejectSquareMembersRequest");

  xfer += oprot->writeFieldBegin("squareMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("requestedMemberMids", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->requestedMemberMids.size()));
    std::vector<std::string> ::const_iterator _iter1609;
    for (_iter1609 = this->requestedMemberMids.begin(); _iter1609 != this->requestedMemberMids.end(); ++_iter1609)
    {
      xfer += oprot->writeString((*_iter1609));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RejectSquareMembersRequest &a, RejectSquareMembersRequest &b) {
  using ::std::swap;
  swap(a.squareMid, b.squareMid);
  swap(a.requestedMemberMids, b.requestedMemberMids);
  swap(a.__isset, b.__isset);
}

RejectSquareMembersRequest::RejectSquareMembersRequest(const RejectSquareMembersRequest& other1610) {
  squareMid = other1610.squareMid;
  requestedMemberMids = other1610.requestedMemberMids;
  __isset = other1610.__isset;
}
RejectSquareMembersRequest& RejectSquareMembersRequest::operator=(const RejectSquareMembersRequest& other1611) {
  squareMid = other1611.squareMid;
  requestedMemberMids = other1611.requestedMemberMids;
  __isset = other1611.__isset;
  return *this;
}
void RejectSquareMembersRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RejectSquareMembersRequest(";
  out << "squareMid=" << to_string(squareMid);
  out << ", " << "requestedMemberMids=" << to_string(requestedMemberMids);
  out << ")";
}


RejectSquareMembersResponse::~RejectSquareMembersResponse() throw() {
}


void RejectSquareMembersResponse::__set_rejectedMembers(const std::vector<SquareMember> & val) {
  this->rejectedMembers = val;
}

void RejectSquareMembersResponse::__set_status(const SquareStatus& val) {
  this->status = val;
}
std::ostream& operator<<(std::ostream& out, const RejectSquareMembersResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RejectSquareMembersResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->rejectedMembers.clear();
            uint32_t _size1612;
            ::apache::thrift::protocol::TType _etype1615;
            xfer += iprot->readListBegin(_etype1615, _size1612);
            this->rejectedMembers.resize(_size1612);
            uint32_t _i1616;
            for (_i1616 = 0; _i1616 < _size1612; ++_i1616)
            {
              xfer += this->rejectedMembers[_i1616].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.rejectedMembers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->status.read(iprot);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RejectSquareMembersResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RejectSquareMembersResponse");

  xfer += oprot->writeFieldBegin("rejectedMembers", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->rejectedMembers.size()));
    std::vector<SquareMember> ::const_iterator _iter1617;
    for (_iter1617 = this->rejectedMembers.begin(); _iter1617 != this->rejectedMembers.end(); ++_iter1617)
    {
      xfer += (*_iter1617).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->status.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RejectSquareMembersResponse &a, RejectSquareMembersResponse &b) {
  using ::std::swap;
  swap(a.rejectedMembers, b.rejectedMembers);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

RejectSquareMembersResponse::RejectSquareMembersResponse(const RejectSquareMembersResponse& other1618) {
  rejectedMembers = other1618.rejectedMembers;
  status = other1618.status;
  __isset = other1618.__isset;
}
RejectSquareMembersResponse& RejectSquareMembersResponse::operator=(const RejectSquareMembersResponse& other1619) {
  rejectedMembers = other1619.rejectedMembers;
  status = other1619.status;
  __isset = other1619.__isset;
  return *this;
}
void RejectSquareMembersResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RejectSquareMembersResponse(";
  out << "rejectedMembers=" << to_string(rejectedMembers);
  out << ", " << "status=" << to_string(status);
  out << ")";
}


RemoveSubscriptionsRequest::~RemoveSubscriptionsRequest() throw() {
}


void RemoveSubscriptionsRequest::__set_unsubscriptions(const std::vector<int64_t> & val) {
  this->unsubscriptions = val;
}
std::ostream& operator<<(std::ostream& out, const RemoveSubscriptionsRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RemoveSubscriptionsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->unsubscriptions.clear();
            uint32_t _size1620;
            ::apache::thrift::protocol::TType _etype1623;
            xfer += iprot->readListBegin(_etype1623, _size1620);
            this->unsubscriptions.resize(_size1620);
            uint32_t _i1624;
            for (_i1624 = 0; _i1624 < _size1620; ++_i1624)
            {
              xfer += iprot->readI64(this->unsubscriptions[_i1624]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.unsubscriptions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RemoveSubscriptionsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RemoveSubscriptionsRequest");

  xfer += oprot->writeFieldBegin("unsubscriptions", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->unsubscriptions.size()));
    std::vector<int64_t> ::const_iterator _iter1625;
    for (_iter1625 = this->unsubscriptions.begin(); _iter1625 != this->unsubscriptions.end(); ++_iter1625)
    {
      xfer += oprot->writeI64((*_iter1625));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RemoveSubscriptionsRequest &a, RemoveSubscriptionsRequest &b) {
  using ::std::swap;
  swap(a.unsubscriptions, b.unsubscriptions);
  swap(a.__isset, b.__isset);
}

RemoveSubscriptionsRequest::RemoveSubscriptionsRequest(const RemoveSubscriptionsRequest& other1626) {
  unsubscriptions = other1626.unsubscriptions;
  __isset = other1626.__isset;
}
RemoveSubscriptionsRequest& RemoveSubscriptionsRequest::operator=(const RemoveSubscriptionsRequest& other1627) {
  unsubscriptions = other1627.unsubscriptions;
  __isset = other1627.__isset;
  return *this;
}
void RemoveSubscriptionsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RemoveSubscriptionsRequest(";
  out << "unsubscriptions=" << to_string(unsubscriptions);
  out << ")";
}


RemoveSubscriptionsResponse::~RemoveSubscriptionsResponse() throw() {
}

std::ostream& operator<<(std::ostream& out, const RemoveSubscriptionsResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RemoveSubscriptionsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RemoveSubscriptionsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RemoveSubscriptionsResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RemoveSubscriptionsResponse &a, RemoveSubscriptionsResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

RemoveSubscriptionsResponse::RemoveSubscriptionsResponse(const RemoveSubscriptionsResponse& other1628) {
  (void) other1628;
}
RemoveSubscriptionsResponse& RemoveSubscriptionsResponse::operator=(const RemoveSubscriptionsResponse& other1629) {
  (void) other1629;
  return *this;
}
void RemoveSubscriptionsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RemoveSubscriptionsResponse(";
  out << ")";
}


RefreshSubscriptionsRequest::~RefreshSubscriptionsRequest() throw() {
}


void RefreshSubscriptionsRequest::__set_subscriptions(const std::vector<int64_t> & val) {
  this->subscriptions = val;
}
std::ostream& operator<<(std::ostream& out, const RefreshSubscriptionsRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RefreshSubscriptionsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->subscriptions.clear();
            uint32_t _size1630;
            ::apache::thrift::protocol::TType _etype1633;
            xfer += iprot->readListBegin(_etype1633, _size1630);
            this->subscriptions.resize(_size1630);
            uint32_t _i1634;
            for (_i1634 = 0; _i1634 < _size1630; ++_i1634)
            {
              xfer += iprot->readI64(this->subscriptions[_i1634]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.subscriptions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RefreshSubscriptionsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RefreshSubscriptionsRequest");

  xfer += oprot->writeFieldBegin("subscriptions", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->subscriptions.size()));
    std::vector<int64_t> ::const_iterator _iter1635;
    for (_iter1635 = this->subscriptions.begin(); _iter1635 != this->subscriptions.end(); ++_iter1635)
    {
      xfer += oprot->writeI64((*_iter1635));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RefreshSubscriptionsRequest &a, RefreshSubscriptionsRequest &b) {
  using ::std::swap;
  swap(a.subscriptions, b.subscriptions);
  swap(a.__isset, b.__isset);
}

RefreshSubscriptionsRequest::RefreshSubscriptionsRequest(const RefreshSubscriptionsRequest& other1636) {
  subscriptions = other1636.subscriptions;
  __isset = other1636.__isset;
}
RefreshSubscriptionsRequest& RefreshSubscriptionsRequest::operator=(const RefreshSubscriptionsRequest& other1637) {
  subscriptions = other1637.subscriptions;
  __isset = other1637.__isset;
  return *this;
}
void RefreshSubscriptionsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RefreshSubscriptionsRequest(";
  out << "subscriptions=" << to_string(subscriptions);
  out << ")";
}


RefreshSubscriptionsResponse::~RefreshSubscriptionsResponse() throw() {
}


void RefreshSubscriptionsResponse::__set_ttlMillis(const int64_t val) {
  this->ttlMillis = val;
}

void RefreshSubscriptionsResponse::__set_subscriptionStates(const std::map<int64_t, SubscriptionState> & val) {
  this->subscriptionStates = val;
}
std::ostream& operator<<(std::ostream& out, const RefreshSubscriptionsResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RefreshSubscriptionsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ttlMillis);
          this->__isset.ttlMillis = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->subscriptionStates.clear();
            uint32_t _size1638;
            ::apache::thrift::protocol::TType _ktype1639;
            ::apache::thrift::protocol::TType _vtype1640;
            xfer += iprot->readMapBegin(_ktype1639, _vtype1640, _size1638);
            uint32_t _i1642;
            for (_i1642 = 0; _i1642 < _size1638; ++_i1642)
            {
              int64_t _key1643;
              xfer += iprot->readI64(_key1643);
              SubscriptionState& _val1644 = this->subscriptionStates[_key1643];
              xfer += _val1644.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.subscriptionStates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RefreshSubscriptionsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RefreshSubscriptionsResponse");

  xfer += oprot->writeFieldBegin("ttlMillis", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->ttlMillis);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("subscriptionStates", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->subscriptionStates.size()));
    std::map<int64_t, SubscriptionState> ::const_iterator _iter1645;
    for (_iter1645 = this->subscriptionStates.begin(); _iter1645 != this->subscriptionStates.end(); ++_iter1645)
    {
      xfer += oprot->writeI64(_iter1645->first);
      xfer += _iter1645->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RefreshSubscriptionsResponse &a, RefreshSubscriptionsResponse &b) {
  using ::std::swap;
  swap(a.ttlMillis, b.ttlMillis);
  swap(a.subscriptionStates, b.subscriptionStates);
  swap(a.__isset, b.__isset);
}

RefreshSubscriptionsResponse::RefreshSubscriptionsResponse(const RefreshSubscriptionsResponse& other1646) {
  ttlMillis = other1646.ttlMillis;
  subscriptionStates = other1646.subscriptionStates;
  __isset = other1646.__isset;
}
RefreshSubscriptionsResponse& RefreshSubscriptionsResponse::operator=(const RefreshSubscriptionsResponse& other1647) {
  ttlMillis = other1647.ttlMillis;
  subscriptionStates = other1647.subscriptionStates;
  __isset = other1647.__isset;
  return *this;
}
void RefreshSubscriptionsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RefreshSubscriptionsResponse(";
  out << "ttlMillis=" << to_string(ttlMillis);
  out << ", " << "subscriptionStates=" << to_string(subscriptionStates);
  out << ")";
}


UpdateSquareChatRequest::~UpdateSquareChatRequest() throw() {
}


void UpdateSquareChatRequest::__set_updatedAttrs(const std::set<SquareChatAttribute::type> & val) {
  this->updatedAttrs = val;
}

void UpdateSquareChatRequest::__set_squareChat(const SquareChat& val) {
  this->squareChat = val;
}
std::ostream& operator<<(std::ostream& out, const UpdateSquareChatRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UpdateSquareChatRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->updatedAttrs.clear();
            uint32_t _size1648;
            ::apache::thrift::protocol::TType _etype1651;
            xfer += iprot->readSetBegin(_etype1651, _size1648);
            uint32_t _i1652;
            for (_i1652 = 0; _i1652 < _size1648; ++_i1652)
            {
              SquareChatAttribute::type _elem1653;
              int32_t ecast1654;
              xfer += iprot->readI32(ecast1654);
              _elem1653 = (SquareChatAttribute::type)ecast1654;
              this->updatedAttrs.insert(_elem1653);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.updatedAttrs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareChat.read(iprot);
          this->__isset.squareChat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateSquareChatRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UpdateSquareChatRequest");

  xfer += oprot->writeFieldBegin("updatedAttrs", ::apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->updatedAttrs.size()));
    std::set<SquareChatAttribute::type> ::const_iterator _iter1655;
    for (_iter1655 = this->updatedAttrs.begin(); _iter1655 != this->updatedAttrs.end(); ++_iter1655)
    {
      xfer += oprot->writeI32((int32_t)(*_iter1655));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareChat", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->squareChat.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateSquareChatRequest &a, UpdateSquareChatRequest &b) {
  using ::std::swap;
  swap(a.updatedAttrs, b.updatedAttrs);
  swap(a.squareChat, b.squareChat);
  swap(a.__isset, b.__isset);
}

UpdateSquareChatRequest::UpdateSquareChatRequest(const UpdateSquareChatRequest& other1656) {
  updatedAttrs = other1656.updatedAttrs;
  squareChat = other1656.squareChat;
  __isset = other1656.__isset;
}
UpdateSquareChatRequest& UpdateSquareChatRequest::operator=(const UpdateSquareChatRequest& other1657) {
  updatedAttrs = other1657.updatedAttrs;
  squareChat = other1657.squareChat;
  __isset = other1657.__isset;
  return *this;
}
void UpdateSquareChatRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UpdateSquareChatRequest(";
  out << "updatedAttrs=" << to_string(updatedAttrs);
  out << ", " << "squareChat=" << to_string(squareChat);
  out << ")";
}


UpdateSquareChatResponse::~UpdateSquareChatResponse() throw() {
}


void UpdateSquareChatResponse::__set_updatedAttrs(const std::set<SquareChatAttribute::type> & val) {
  this->updatedAttrs = val;
}

void UpdateSquareChatResponse::__set_squareChat(const SquareChat& val) {
  this->squareChat = val;
}
std::ostream& operator<<(std::ostream& out, const UpdateSquareChatResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UpdateSquareChatResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->updatedAttrs.clear();
            uint32_t _size1658;
            ::apache::thrift::protocol::TType _etype1661;
            xfer += iprot->readSetBegin(_etype1661, _size1658);
            uint32_t _i1662;
            for (_i1662 = 0; _i1662 < _size1658; ++_i1662)
            {
              SquareChatAttribute::type _elem1663;
              int32_t ecast1664;
              xfer += iprot->readI32(ecast1664);
              _elem1663 = (SquareChatAttribute::type)ecast1664;
              this->updatedAttrs.insert(_elem1663);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.updatedAttrs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareChat.read(iprot);
          this->__isset.squareChat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateSquareChatResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UpdateSquareChatResponse");

  xfer += oprot->writeFieldBegin("updatedAttrs", ::apache::thrift::protocol::T_SET, 1);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->updatedAttrs.size()));
    std::set<SquareChatAttribute::type> ::const_iterator _iter1665;
    for (_iter1665 = this->updatedAttrs.begin(); _iter1665 != this->updatedAttrs.end(); ++_iter1665)
    {
      xfer += oprot->writeI32((int32_t)(*_iter1665));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareChat", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->squareChat.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateSquareChatResponse &a, UpdateSquareChatResponse &b) {
  using ::std::swap;
  swap(a.updatedAttrs, b.updatedAttrs);
  swap(a.squareChat, b.squareChat);
  swap(a.__isset, b.__isset);
}

UpdateSquareChatResponse::UpdateSquareChatResponse(const UpdateSquareChatResponse& other1666) {
  updatedAttrs = other1666.updatedAttrs;
  squareChat = other1666.squareChat;
  __isset = other1666.__isset;
}
UpdateSquareChatResponse& UpdateSquareChatResponse::operator=(const UpdateSquareChatResponse& other1667) {
  updatedAttrs = other1667.updatedAttrs;
  squareChat = other1667.squareChat;
  __isset = other1667.__isset;
  return *this;
}
void UpdateSquareChatResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UpdateSquareChatResponse(";
  out << "updatedAttrs=" << to_string(updatedAttrs);
  out << ", " << "squareChat=" << to_string(squareChat);
  out << ")";
}


DeleteSquareChatRequest::~DeleteSquareChatRequest() throw() {
}


void DeleteSquareChatRequest::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}

void DeleteSquareChatRequest::__set_revision(const int64_t val) {
  this->revision = val;
}
std::ostream& operator<<(std::ostream& out, const DeleteSquareChatRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DeleteSquareChatRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->revision);
          this->__isset.revision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeleteSquareChatRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DeleteSquareChatRequest");

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("revision", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->revision);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeleteSquareChatRequest &a, DeleteSquareChatRequest &b) {
  using ::std::swap;
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.revision, b.revision);
  swap(a.__isset, b.__isset);
}

DeleteSquareChatRequest::DeleteSquareChatRequest(const DeleteSquareChatRequest& other1668) {
  squareChatMid = other1668.squareChatMid;
  revision = other1668.revision;
  __isset = other1668.__isset;
}
DeleteSquareChatRequest& DeleteSquareChatRequest::operator=(const DeleteSquareChatRequest& other1669) {
  squareChatMid = other1669.squareChatMid;
  revision = other1669.revision;
  __isset = other1669.__isset;
  return *this;
}
void DeleteSquareChatRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DeleteSquareChatRequest(";
  out << "squareChatMid=" << to_string(squareChatMid);
  out << ", " << "revision=" << to_string(revision);
  out << ")";
}


DeleteSquareChatResponse::~DeleteSquareChatResponse() throw() {
}

std::ostream& operator<<(std::ostream& out, const DeleteSquareChatResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DeleteSquareChatResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeleteSquareChatResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DeleteSquareChatResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeleteSquareChatResponse &a, DeleteSquareChatResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

DeleteSquareChatResponse::DeleteSquareChatResponse(const DeleteSquareChatResponse& other1670) {
  (void) other1670;
}
DeleteSquareChatResponse& DeleteSquareChatResponse::operator=(const DeleteSquareChatResponse& other1671) {
  (void) other1671;
  return *this;
}
void DeleteSquareChatResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DeleteSquareChatResponse(";
  out << ")";
}


UpdateSquareChatMemberRequest::~UpdateSquareChatMemberRequest() throw() {
}


void UpdateSquareChatMemberRequest::__set_updatedAttrs(const std::set<SquareChatMemberAttribute::type> & val) {
  this->updatedAttrs = val;
}

void UpdateSquareChatMemberRequest::__set_chatMember(const SquareChatMember& val) {
  this->chatMember = val;
}
std::ostream& operator<<(std::ostream& out, const UpdateSquareChatMemberRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UpdateSquareChatMemberRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->updatedAttrs.clear();
            uint32_t _size1672;
            ::apache::thrift::protocol::TType _etype1675;
            xfer += iprot->readSetBegin(_etype1675, _size1672);
            uint32_t _i1676;
            for (_i1676 = 0; _i1676 < _size1672; ++_i1676)
            {
              SquareChatMemberAttribute::type _elem1677;
              int32_t ecast1678;
              xfer += iprot->readI32(ecast1678);
              _elem1677 = (SquareChatMemberAttribute::type)ecast1678;
              this->updatedAttrs.insert(_elem1677);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.updatedAttrs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->chatMember.read(iprot);
          this->__isset.chatMember = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateSquareChatMemberRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UpdateSquareChatMemberRequest");

  xfer += oprot->writeFieldBegin("updatedAttrs", ::apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->updatedAttrs.size()));
    std::set<SquareChatMemberAttribute::type> ::const_iterator _iter1679;
    for (_iter1679 = this->updatedAttrs.begin(); _iter1679 != this->updatedAttrs.end(); ++_iter1679)
    {
      xfer += oprot->writeI32((int32_t)(*_iter1679));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chatMember", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->chatMember.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateSquareChatMemberRequest &a, UpdateSquareChatMemberRequest &b) {
  using ::std::swap;
  swap(a.updatedAttrs, b.updatedAttrs);
  swap(a.chatMember, b.chatMember);
  swap(a.__isset, b.__isset);
}

UpdateSquareChatMemberRequest::UpdateSquareChatMemberRequest(const UpdateSquareChatMemberRequest& other1680) {
  updatedAttrs = other1680.updatedAttrs;
  chatMember = other1680.chatMember;
  __isset = other1680.__isset;
}
UpdateSquareChatMemberRequest& UpdateSquareChatMemberRequest::operator=(const UpdateSquareChatMemberRequest& other1681) {
  updatedAttrs = other1681.updatedAttrs;
  chatMember = other1681.chatMember;
  __isset = other1681.__isset;
  return *this;
}
void UpdateSquareChatMemberRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UpdateSquareChatMemberRequest(";
  out << "updatedAttrs=" << to_string(updatedAttrs);
  out << ", " << "chatMember=" << to_string(chatMember);
  out << ")";
}


UpdateSquareChatMemberResponse::~UpdateSquareChatMemberResponse() throw() {
}


void UpdateSquareChatMemberResponse::__set_updatedChatMember(const SquareChatMember& val) {
  this->updatedChatMember = val;
}
std::ostream& operator<<(std::ostream& out, const UpdateSquareChatMemberResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UpdateSquareChatMemberResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->updatedChatMember.read(iprot);
          this->__isset.updatedChatMember = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateSquareChatMemberResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UpdateSquareChatMemberResponse");

  xfer += oprot->writeFieldBegin("updatedChatMember", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->updatedChatMember.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateSquareChatMemberResponse &a, UpdateSquareChatMemberResponse &b) {
  using ::std::swap;
  swap(a.updatedChatMember, b.updatedChatMember);
  swap(a.__isset, b.__isset);
}

UpdateSquareChatMemberResponse::UpdateSquareChatMemberResponse(const UpdateSquareChatMemberResponse& other1682) {
  updatedChatMember = other1682.updatedChatMember;
  __isset = other1682.__isset;
}
UpdateSquareChatMemberResponse& UpdateSquareChatMemberResponse::operator=(const UpdateSquareChatMemberResponse& other1683) {
  updatedChatMember = other1683.updatedChatMember;
  __isset = other1683.__isset;
  return *this;
}
void UpdateSquareChatMemberResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UpdateSquareChatMemberResponse(";
  out << "updatedChatMember=" << to_string(updatedChatMember);
  out << ")";
}


UpdateSquareAuthorityRequest::~UpdateSquareAuthorityRequest() throw() {
}


void UpdateSquareAuthorityRequest::__set_updateAttributes(const std::set<SquareAuthorityAttribute::type> & val) {
  this->updateAttributes = val;
}

void UpdateSquareAuthorityRequest::__set_authority(const SquareAuthority& val) {
  this->authority = val;
}
std::ostream& operator<<(std::ostream& out, const UpdateSquareAuthorityRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UpdateSquareAuthorityRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->updateAttributes.clear();
            uint32_t _size1684;
            ::apache::thrift::protocol::TType _etype1687;
            xfer += iprot->readSetBegin(_etype1687, _size1684);
            uint32_t _i1688;
            for (_i1688 = 0; _i1688 < _size1684; ++_i1688)
            {
              SquareAuthorityAttribute::type _elem1689;
              int32_t ecast1690;
              xfer += iprot->readI32(ecast1690);
              _elem1689 = (SquareAuthorityAttribute::type)ecast1690;
              this->updateAttributes.insert(_elem1689);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.updateAttributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->authority.read(iprot);
          this->__isset.authority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateSquareAuthorityRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UpdateSquareAuthorityRequest");

  xfer += oprot->writeFieldBegin("updateAttributes", ::apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->updateAttributes.size()));
    std::set<SquareAuthorityAttribute::type> ::const_iterator _iter1691;
    for (_iter1691 = this->updateAttributes.begin(); _iter1691 != this->updateAttributes.end(); ++_iter1691)
    {
      xfer += oprot->writeI32((int32_t)(*_iter1691));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("authority", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->authority.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateSquareAuthorityRequest &a, UpdateSquareAuthorityRequest &b) {
  using ::std::swap;
  swap(a.updateAttributes, b.updateAttributes);
  swap(a.authority, b.authority);
  swap(a.__isset, b.__isset);
}

UpdateSquareAuthorityRequest::UpdateSquareAuthorityRequest(const UpdateSquareAuthorityRequest& other1692) {
  updateAttributes = other1692.updateAttributes;
  authority = other1692.authority;
  __isset = other1692.__isset;
}
UpdateSquareAuthorityRequest& UpdateSquareAuthorityRequest::operator=(const UpdateSquareAuthorityRequest& other1693) {
  updateAttributes = other1693.updateAttributes;
  authority = other1693.authority;
  __isset = other1693.__isset;
  return *this;
}
void UpdateSquareAuthorityRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UpdateSquareAuthorityRequest(";
  out << "updateAttributes=" << to_string(updateAttributes);
  out << ", " << "authority=" << to_string(authority);
  out << ")";
}


UpdateSquareAuthorityResponse::~UpdateSquareAuthorityResponse() throw() {
}


void UpdateSquareAuthorityResponse::__set_updatdAttributes(const std::set<SquareAuthorityAttribute::type> & val) {
  this->updatdAttributes = val;
}

void UpdateSquareAuthorityResponse::__set_authority(const SquareAuthority& val) {
  this->authority = val;
}
std::ostream& operator<<(std::ostream& out, const UpdateSquareAuthorityResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UpdateSquareAuthorityResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->updatdAttributes.clear();
            uint32_t _size1694;
            ::apache::thrift::protocol::TType _etype1697;
            xfer += iprot->readSetBegin(_etype1697, _size1694);
            uint32_t _i1698;
            for (_i1698 = 0; _i1698 < _size1694; ++_i1698)
            {
              SquareAuthorityAttribute::type _elem1699;
              int32_t ecast1700;
              xfer += iprot->readI32(ecast1700);
              _elem1699 = (SquareAuthorityAttribute::type)ecast1700;
              this->updatdAttributes.insert(_elem1699);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.updatdAttributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->authority.read(iprot);
          this->__isset.authority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateSquareAuthorityResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UpdateSquareAuthorityResponse");

  xfer += oprot->writeFieldBegin("updatdAttributes", ::apache::thrift::protocol::T_SET, 1);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->updatdAttributes.size()));
    std::set<SquareAuthorityAttribute::type> ::const_iterator _iter1701;
    for (_iter1701 = this->updatdAttributes.begin(); _iter1701 != this->updatdAttributes.end(); ++_iter1701)
    {
      xfer += oprot->writeI32((int32_t)(*_iter1701));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("authority", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->authority.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateSquareAuthorityResponse &a, UpdateSquareAuthorityResponse &b) {
  using ::std::swap;
  swap(a.updatdAttributes, b.updatdAttributes);
  swap(a.authority, b.authority);
  swap(a.__isset, b.__isset);
}

UpdateSquareAuthorityResponse::UpdateSquareAuthorityResponse(const UpdateSquareAuthorityResponse& other1702) {
  updatdAttributes = other1702.updatdAttributes;
  authority = other1702.authority;
  __isset = other1702.__isset;
}
UpdateSquareAuthorityResponse& UpdateSquareAuthorityResponse::operator=(const UpdateSquareAuthorityResponse& other1703) {
  updatdAttributes = other1703.updatdAttributes;
  authority = other1703.authority;
  __isset = other1703.__isset;
  return *this;
}
void UpdateSquareAuthorityResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UpdateSquareAuthorityResponse(";
  out << "updatdAttributes=" << to_string(updatdAttributes);
  out << ", " << "authority=" << to_string(authority);
  out << ")";
}


UpdateSquareMemberRelationRequest::~UpdateSquareMemberRelationRequest() throw() {
}


void UpdateSquareMemberRelationRequest::__set_squareMid(const std::string& val) {
  this->squareMid = val;
}

void UpdateSquareMemberRelationRequest::__set_targetSquareMemberMid(const std::string& val) {
  this->targetSquareMemberMid = val;
}

void UpdateSquareMemberRelationRequest::__set_updatedAttrs(const std::set<SquareMemberRelationAttribute::type> & val) {
  this->updatedAttrs = val;
}

void UpdateSquareMemberRelationRequest::__set_relation(const SquareMemberRelation& val) {
  this->relation = val;
}
std::ostream& operator<<(std::ostream& out, const UpdateSquareMemberRelationRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UpdateSquareMemberRelationRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMid);
          this->__isset.squareMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->targetSquareMemberMid);
          this->__isset.targetSquareMemberMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->updatedAttrs.clear();
            uint32_t _size1704;
            ::apache::thrift::protocol::TType _etype1707;
            xfer += iprot->readSetBegin(_etype1707, _size1704);
            uint32_t _i1708;
            for (_i1708 = 0; _i1708 < _size1704; ++_i1708)
            {
              SquareMemberRelationAttribute::type _elem1709;
              int32_t ecast1710;
              xfer += iprot->readI32(ecast1710);
              _elem1709 = (SquareMemberRelationAttribute::type)ecast1710;
              this->updatedAttrs.insert(_elem1709);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.updatedAttrs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->relation.read(iprot);
          this->__isset.relation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateSquareMemberRelationRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UpdateSquareMemberRelationRequest");

  xfer += oprot->writeFieldBegin("squareMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("targetSquareMemberMid", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->targetSquareMemberMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("updatedAttrs", ::apache::thrift::protocol::T_SET, 4);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->updatedAttrs.size()));
    std::set<SquareMemberRelationAttribute::type> ::const_iterator _iter1711;
    for (_iter1711 = this->updatedAttrs.begin(); _iter1711 != this->updatedAttrs.end(); ++_iter1711)
    {
      xfer += oprot->writeI32((int32_t)(*_iter1711));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("relation", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->relation.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateSquareMemberRelationRequest &a, UpdateSquareMemberRelationRequest &b) {
  using ::std::swap;
  swap(a.squareMid, b.squareMid);
  swap(a.targetSquareMemberMid, b.targetSquareMemberMid);
  swap(a.updatedAttrs, b.updatedAttrs);
  swap(a.relation, b.relation);
  swap(a.__isset, b.__isset);
}

UpdateSquareMemberRelationRequest::UpdateSquareMemberRelationRequest(const UpdateSquareMemberRelationRequest& other1712) {
  squareMid = other1712.squareMid;
  targetSquareMemberMid = other1712.targetSquareMemberMid;
  updatedAttrs = other1712.updatedAttrs;
  relation = other1712.relation;
  __isset = other1712.__isset;
}
UpdateSquareMemberRelationRequest& UpdateSquareMemberRelationRequest::operator=(const UpdateSquareMemberRelationRequest& other1713) {
  squareMid = other1713.squareMid;
  targetSquareMemberMid = other1713.targetSquareMemberMid;
  updatedAttrs = other1713.updatedAttrs;
  relation = other1713.relation;
  __isset = other1713.__isset;
  return *this;
}
void UpdateSquareMemberRelationRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UpdateSquareMemberRelationRequest(";
  out << "squareMid=" << to_string(squareMid);
  out << ", " << "targetSquareMemberMid=" << to_string(targetSquareMemberMid);
  out << ", " << "updatedAttrs=" << to_string(updatedAttrs);
  out << ", " << "relation=" << to_string(relation);
  out << ")";
}


UpdateSquareMemberRelationResponse::~UpdateSquareMemberRelationResponse() throw() {
}


void UpdateSquareMemberRelationResponse::__set_squareMid(const std::string& val) {
  this->squareMid = val;
}

void UpdateSquareMemberRelationResponse::__set_targetSquareMemberMid(const std::string& val) {
  this->targetSquareMemberMid = val;
}

void UpdateSquareMemberRelationResponse::__set_updatedAttrs(const std::set<SquareMemberRelationAttribute::type> & val) {
  this->updatedAttrs = val;
}

void UpdateSquareMemberRelationResponse::__set_relation(const SquareMemberRelation& val) {
  this->relation = val;
}
std::ostream& operator<<(std::ostream& out, const UpdateSquareMemberRelationResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UpdateSquareMemberRelationResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMid);
          this->__isset.squareMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->targetSquareMemberMid);
          this->__isset.targetSquareMemberMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->updatedAttrs.clear();
            uint32_t _size1714;
            ::apache::thrift::protocol::TType _etype1717;
            xfer += iprot->readSetBegin(_etype1717, _size1714);
            uint32_t _i1718;
            for (_i1718 = 0; _i1718 < _size1714; ++_i1718)
            {
              SquareMemberRelationAttribute::type _elem1719;
              int32_t ecast1720;
              xfer += iprot->readI32(ecast1720);
              _elem1719 = (SquareMemberRelationAttribute::type)ecast1720;
              this->updatedAttrs.insert(_elem1719);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.updatedAttrs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->relation.read(iprot);
          this->__isset.relation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateSquareMemberRelationResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UpdateSquareMemberRelationResponse");

  xfer += oprot->writeFieldBegin("squareMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("targetSquareMemberMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->targetSquareMemberMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("updatedAttrs", ::apache::thrift::protocol::T_SET, 3);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->updatedAttrs.size()));
    std::set<SquareMemberRelationAttribute::type> ::const_iterator _iter1721;
    for (_iter1721 = this->updatedAttrs.begin(); _iter1721 != this->updatedAttrs.end(); ++_iter1721)
    {
      xfer += oprot->writeI32((int32_t)(*_iter1721));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("relation", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->relation.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateSquareMemberRelationResponse &a, UpdateSquareMemberRelationResponse &b) {
  using ::std::swap;
  swap(a.squareMid, b.squareMid);
  swap(a.targetSquareMemberMid, b.targetSquareMemberMid);
  swap(a.updatedAttrs, b.updatedAttrs);
  swap(a.relation, b.relation);
  swap(a.__isset, b.__isset);
}

UpdateSquareMemberRelationResponse::UpdateSquareMemberRelationResponse(const UpdateSquareMemberRelationResponse& other1722) {
  squareMid = other1722.squareMid;
  targetSquareMemberMid = other1722.targetSquareMemberMid;
  updatedAttrs = other1722.updatedAttrs;
  relation = other1722.relation;
  __isset = other1722.__isset;
}
UpdateSquareMemberRelationResponse& UpdateSquareMemberRelationResponse::operator=(const UpdateSquareMemberRelationResponse& other1723) {
  squareMid = other1723.squareMid;
  targetSquareMemberMid = other1723.targetSquareMemberMid;
  updatedAttrs = other1723.updatedAttrs;
  relation = other1723.relation;
  __isset = other1723.__isset;
  return *this;
}
void UpdateSquareMemberRelationResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UpdateSquareMemberRelationResponse(";
  out << "squareMid=" << to_string(squareMid);
  out << ", " << "targetSquareMemberMid=" << to_string(targetSquareMemberMid);
  out << ", " << "updatedAttrs=" << to_string(updatedAttrs);
  out << ", " << "relation=" << to_string(relation);
  out << ")";
}


ReportSquareRequest::~ReportSquareRequest() throw() {
}


void ReportSquareRequest::__set_squareMid(const std::string& val) {
  this->squareMid = val;
}

void ReportSquareRequest::__set_reportType(const ReportType::type val) {
  this->reportType = val;
}

void ReportSquareRequest::__set_otherReason(const std::string& val) {
  this->otherReason = val;
}
std::ostream& operator<<(std::ostream& out, const ReportSquareRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ReportSquareRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMid);
          this->__isset.squareMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1724;
          xfer += iprot->readI32(ecast1724);
          this->reportType = (ReportType::type)ecast1724;
          this->__isset.reportType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->otherReason);
          this->__isset.otherReason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReportSquareRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ReportSquareRequest");

  xfer += oprot->writeFieldBegin("squareMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reportType", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->reportType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("otherReason", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->otherReason);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReportSquareRequest &a, ReportSquareRequest &b) {
  using ::std::swap;
  swap(a.squareMid, b.squareMid);
  swap(a.reportType, b.reportType);
  swap(a.otherReason, b.otherReason);
  swap(a.__isset, b.__isset);
}

ReportSquareRequest::ReportSquareRequest(const ReportSquareRequest& other1725) {
  squareMid = other1725.squareMid;
  reportType = other1725.reportType;
  otherReason = other1725.otherReason;
  __isset = other1725.__isset;
}
ReportSquareRequest& ReportSquareRequest::operator=(const ReportSquareRequest& other1726) {
  squareMid = other1726.squareMid;
  reportType = other1726.reportType;
  otherReason = other1726.otherReason;
  __isset = other1726.__isset;
  return *this;
}
void ReportSquareRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ReportSquareRequest(";
  out << "squareMid=" << to_string(squareMid);
  out << ", " << "reportType=" << to_string(reportType);
  out << ", " << "otherReason=" << to_string(otherReason);
  out << ")";
}


ReportSquareResponse::~ReportSquareResponse() throw() {
}

std::ostream& operator<<(std::ostream& out, const ReportSquareResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ReportSquareResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReportSquareResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ReportSquareResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReportSquareResponse &a, ReportSquareResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

ReportSquareResponse::ReportSquareResponse(const ReportSquareResponse& other1727) {
  (void) other1727;
}
ReportSquareResponse& ReportSquareResponse::operator=(const ReportSquareResponse& other1728) {
  (void) other1728;
  return *this;
}
void ReportSquareResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ReportSquareResponse(";
  out << ")";
}


ReportSquareChatRequest::~ReportSquareChatRequest() throw() {
}


void ReportSquareChatRequest::__set_squareMid(const std::string& val) {
  this->squareMid = val;
}

void ReportSquareChatRequest::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}

void ReportSquareChatRequest::__set_reportType(const ReportType::type val) {
  this->reportType = val;
}

void ReportSquareChatRequest::__set_otherReason(const std::string& val) {
  this->otherReason = val;
}
std::ostream& operator<<(std::ostream& out, const ReportSquareChatRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ReportSquareChatRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMid);
          this->__isset.squareMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1729;
          xfer += iprot->readI32(ecast1729);
          this->reportType = (ReportType::type)ecast1729;
          this->__isset.reportType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->otherReason);
          this->__isset.otherReason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReportSquareChatRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ReportSquareChatRequest");

  xfer += oprot->writeFieldBegin("squareMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reportType", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->reportType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("otherReason", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->otherReason);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReportSquareChatRequest &a, ReportSquareChatRequest &b) {
  using ::std::swap;
  swap(a.squareMid, b.squareMid);
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.reportType, b.reportType);
  swap(a.otherReason, b.otherReason);
  swap(a.__isset, b.__isset);
}

ReportSquareChatRequest::ReportSquareChatRequest(const ReportSquareChatRequest& other1730) {
  squareMid = other1730.squareMid;
  squareChatMid = other1730.squareChatMid;
  reportType = other1730.reportType;
  otherReason = other1730.otherReason;
  __isset = other1730.__isset;
}
ReportSquareChatRequest& ReportSquareChatRequest::operator=(const ReportSquareChatRequest& other1731) {
  squareMid = other1731.squareMid;
  squareChatMid = other1731.squareChatMid;
  reportType = other1731.reportType;
  otherReason = other1731.otherReason;
  __isset = other1731.__isset;
  return *this;
}
void ReportSquareChatRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ReportSquareChatRequest(";
  out << "squareMid=" << to_string(squareMid);
  out << ", " << "squareChatMid=" << to_string(squareChatMid);
  out << ", " << "reportType=" << to_string(reportType);
  out << ", " << "otherReason=" << to_string(otherReason);
  out << ")";
}


ReportSquareChatResponse::~ReportSquareChatResponse() throw() {
}

std::ostream& operator<<(std::ostream& out, const ReportSquareChatResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ReportSquareChatResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReportSquareChatResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ReportSquareChatResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReportSquareChatResponse &a, ReportSquareChatResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

ReportSquareChatResponse::ReportSquareChatResponse(const ReportSquareChatResponse& other1732) {
  (void) other1732;
}
ReportSquareChatResponse& ReportSquareChatResponse::operator=(const ReportSquareChatResponse& other1733) {
  (void) other1733;
  return *this;
}
void ReportSquareChatResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ReportSquareChatResponse(";
  out << ")";
}


ReportSquareMessageRequest::~ReportSquareMessageRequest() throw() {
}


void ReportSquareMessageRequest::__set_squareMid(const std::string& val) {
  this->squareMid = val;
}

void ReportSquareMessageRequest::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}

void ReportSquareMessageRequest::__set_squareMessageId(const std::string& val) {
  this->squareMessageId = val;
}

void ReportSquareMessageRequest::__set_reportType(const ReportType::type val) {
  this->reportType = val;
}

void ReportSquareMessageRequest::__set_otherReason(const std::string& val) {
  this->otherReason = val;
}
std::ostream& operator<<(std::ostream& out, const ReportSquareMessageRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ReportSquareMessageRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMid);
          this->__isset.squareMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMessageId);
          this->__isset.squareMessageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1734;
          xfer += iprot->readI32(ecast1734);
          this->reportType = (ReportType::type)ecast1734;
          this->__isset.reportType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->otherReason);
          this->__isset.otherReason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReportSquareMessageRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ReportSquareMessageRequest");

  xfer += oprot->writeFieldBegin("squareMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareMessageId", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->squareMessageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reportType", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->reportType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("otherReason", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->otherReason);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReportSquareMessageRequest &a, ReportSquareMessageRequest &b) {
  using ::std::swap;
  swap(a.squareMid, b.squareMid);
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.squareMessageId, b.squareMessageId);
  swap(a.reportType, b.reportType);
  swap(a.otherReason, b.otherReason);
  swap(a.__isset, b.__isset);
}

ReportSquareMessageRequest::ReportSquareMessageRequest(const ReportSquareMessageRequest& other1735) {
  squareMid = other1735.squareMid;
  squareChatMid = other1735.squareChatMid;
  squareMessageId = other1735.squareMessageId;
  reportType = other1735.reportType;
  otherReason = other1735.otherReason;
  __isset = other1735.__isset;
}
ReportSquareMessageRequest& ReportSquareMessageRequest::operator=(const ReportSquareMessageRequest& other1736) {
  squareMid = other1736.squareMid;
  squareChatMid = other1736.squareChatMid;
  squareMessageId = other1736.squareMessageId;
  reportType = other1736.reportType;
  otherReason = other1736.otherReason;
  __isset = other1736.__isset;
  return *this;
}
void ReportSquareMessageRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ReportSquareMessageRequest(";
  out << "squareMid=" << to_string(squareMid);
  out << ", " << "squareChatMid=" << to_string(squareChatMid);
  out << ", " << "squareMessageId=" << to_string(squareMessageId);
  out << ", " << "reportType=" << to_string(reportType);
  out << ", " << "otherReason=" << to_string(otherReason);
  out << ")";
}


ReportSquareMessageResponse::~ReportSquareMessageResponse() throw() {
}

std::ostream& operator<<(std::ostream& out, const ReportSquareMessageResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ReportSquareMessageResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReportSquareMessageResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ReportSquareMessageResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReportSquareMessageResponse &a, ReportSquareMessageResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

ReportSquareMessageResponse::ReportSquareMessageResponse(const ReportSquareMessageResponse& other1737) {
  (void) other1737;
}
ReportSquareMessageResponse& ReportSquareMessageResponse::operator=(const ReportSquareMessageResponse& other1738) {
  (void) other1738;
  return *this;
}
void ReportSquareMessageResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ReportSquareMessageResponse(";
  out << ")";
}


ReportSquareMemberRequest::~ReportSquareMemberRequest() throw() {
}


void ReportSquareMemberRequest::__set_squareMemberMid(const std::string& val) {
  this->squareMemberMid = val;
}

void ReportSquareMemberRequest::__set_reportType(const ReportType::type val) {
  this->reportType = val;
}

void ReportSquareMemberRequest::__set_otherReason(const std::string& val) {
  this->otherReason = val;
}

void ReportSquareMemberRequest::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}
std::ostream& operator<<(std::ostream& out, const ReportSquareMemberRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ReportSquareMemberRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMemberMid);
          this->__isset.squareMemberMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1739;
          xfer += iprot->readI32(ecast1739);
          this->reportType = (ReportType::type)ecast1739;
          this->__isset.reportType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->otherReason);
          this->__isset.otherReason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReportSquareMemberRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ReportSquareMemberRequest");

  xfer += oprot->writeFieldBegin("squareMemberMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareMemberMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reportType", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->reportType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("otherReason", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->otherReason);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReportSquareMemberRequest &a, ReportSquareMemberRequest &b) {
  using ::std::swap;
  swap(a.squareMemberMid, b.squareMemberMid);
  swap(a.reportType, b.reportType);
  swap(a.otherReason, b.otherReason);
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.__isset, b.__isset);
}

ReportSquareMemberRequest::ReportSquareMemberRequest(const ReportSquareMemberRequest& other1740) {
  squareMemberMid = other1740.squareMemberMid;
  reportType = other1740.reportType;
  otherReason = other1740.otherReason;
  squareChatMid = other1740.squareChatMid;
  __isset = other1740.__isset;
}
ReportSquareMemberRequest& ReportSquareMemberRequest::operator=(const ReportSquareMemberRequest& other1741) {
  squareMemberMid = other1741.squareMemberMid;
  reportType = other1741.reportType;
  otherReason = other1741.otherReason;
  squareChatMid = other1741.squareChatMid;
  __isset = other1741.__isset;
  return *this;
}
void ReportSquareMemberRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ReportSquareMemberRequest(";
  out << "squareMemberMid=" << to_string(squareMemberMid);
  out << ", " << "reportType=" << to_string(reportType);
  out << ", " << "otherReason=" << to_string(otherReason);
  out << ", " << "squareChatMid=" << to_string(squareChatMid);
  out << ")";
}


ReportSquareMemberResponse::~ReportSquareMemberResponse() throw() {
}

std::ostream& operator<<(std::ostream& out, const ReportSquareMemberResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ReportSquareMemberResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReportSquareMemberResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ReportSquareMemberResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReportSquareMemberResponse &a, ReportSquareMemberResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

ReportSquareMemberResponse::ReportSquareMemberResponse(const ReportSquareMemberResponse& other1742) {
  (void) other1742;
}
ReportSquareMemberResponse& ReportSquareMemberResponse::operator=(const ReportSquareMemberResponse& other1743) {
  (void) other1743;
  return *this;
}
void ReportSquareMemberResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ReportSquareMemberResponse(";
  out << ")";
}


GetSquareRequest::~GetSquareRequest() throw() {
}


void GetSquareRequest::__set_mid(const std::string& val) {
  this->mid = val;
}
std::ostream& operator<<(std::ostream& out, const GetSquareRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetSquareRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mid);
          this->__isset.mid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetSquareRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetSquareRequest");

  xfer += oprot->writeFieldBegin("mid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->mid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetSquareRequest &a, GetSquareRequest &b) {
  using ::std::swap;
  swap(a.mid, b.mid);
  swap(a.__isset, b.__isset);
}

GetSquareRequest::GetSquareRequest(const GetSquareRequest& other1744) {
  mid = other1744.mid;
  __isset = other1744.__isset;
}
GetSquareRequest& GetSquareRequest::operator=(const GetSquareRequest& other1745) {
  mid = other1745.mid;
  __isset = other1745.__isset;
  return *this;
}
void GetSquareRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetSquareRequest(";
  out << "mid=" << to_string(mid);
  out << ")";
}


GetSquareResponse::~GetSquareResponse() throw() {
}


void GetSquareResponse::__set_square(const Square& val) {
  this->square = val;
}

void GetSquareResponse::__set_myMembership(const SquareMember& val) {
  this->myMembership = val;
}

void GetSquareResponse::__set_squareAuthority(const SquareAuthority& val) {
  this->squareAuthority = val;
}

void GetSquareResponse::__set_squareStatus(const SquareStatus& val) {
  this->squareStatus = val;
}

void GetSquareResponse::__set_squareFeatureSet(const SquareFeatureSet& val) {
  this->squareFeatureSet = val;
}

void GetSquareResponse::__set_noteStatus(const NoteStatus& val) {
  this->noteStatus = val;
}
std::ostream& operator<<(std::ostream& out, const GetSquareResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetSquareResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->square.read(iprot);
          this->__isset.square = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->myMembership.read(iprot);
          this->__isset.myMembership = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareAuthority.read(iprot);
          this->__isset.squareAuthority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareStatus.read(iprot);
          this->__isset.squareStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareFeatureSet.read(iprot);
          this->__isset.squareFeatureSet = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->noteStatus.read(iprot);
          this->__isset.noteStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetSquareResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetSquareResponse");

  xfer += oprot->writeFieldBegin("square", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->square.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("myMembership", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->myMembership.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareAuthority", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->squareAuthority.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareStatus", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->squareStatus.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareFeatureSet", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->squareFeatureSet.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("noteStatus", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->noteStatus.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetSquareResponse &a, GetSquareResponse &b) {
  using ::std::swap;
  swap(a.square, b.square);
  swap(a.myMembership, b.myMembership);
  swap(a.squareAuthority, b.squareAuthority);
  swap(a.squareStatus, b.squareStatus);
  swap(a.squareFeatureSet, b.squareFeatureSet);
  swap(a.noteStatus, b.noteStatus);
  swap(a.__isset, b.__isset);
}

GetSquareResponse::GetSquareResponse(const GetSquareResponse& other1746) {
  square = other1746.square;
  myMembership = other1746.myMembership;
  squareAuthority = other1746.squareAuthority;
  squareStatus = other1746.squareStatus;
  squareFeatureSet = other1746.squareFeatureSet;
  noteStatus = other1746.noteStatus;
  __isset = other1746.__isset;
}
GetSquareResponse& GetSquareResponse::operator=(const GetSquareResponse& other1747) {
  square = other1747.square;
  myMembership = other1747.myMembership;
  squareAuthority = other1747.squareAuthority;
  squareStatus = other1747.squareStatus;
  squareFeatureSet = other1747.squareFeatureSet;
  noteStatus = other1747.noteStatus;
  __isset = other1747.__isset;
  return *this;
}
void GetSquareResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetSquareResponse(";
  out << "square=" << to_string(square);
  out << ", " << "myMembership=" << to_string(myMembership);
  out << ", " << "squareAuthority=" << to_string(squareAuthority);
  out << ", " << "squareStatus=" << to_string(squareStatus);
  out << ", " << "squareFeatureSet=" << to_string(squareFeatureSet);
  out << ", " << "noteStatus=" << to_string(noteStatus);
  out << ")";
}


GetSquareStatusRequest::~GetSquareStatusRequest() throw() {
}


void GetSquareStatusRequest::__set_squareMid(const std::string& val) {
  this->squareMid = val;
}
std::ostream& operator<<(std::ostream& out, const GetSquareStatusRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetSquareStatusRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMid);
          this->__isset.squareMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetSquareStatusRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetSquareStatusRequest");

  xfer += oprot->writeFieldBegin("squareMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetSquareStatusRequest &a, GetSquareStatusRequest &b) {
  using ::std::swap;
  swap(a.squareMid, b.squareMid);
  swap(a.__isset, b.__isset);
}

GetSquareStatusRequest::GetSquareStatusRequest(const GetSquareStatusRequest& other1748) {
  squareMid = other1748.squareMid;
  __isset = other1748.__isset;
}
GetSquareStatusRequest& GetSquareStatusRequest::operator=(const GetSquareStatusRequest& other1749) {
  squareMid = other1749.squareMid;
  __isset = other1749.__isset;
  return *this;
}
void GetSquareStatusRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetSquareStatusRequest(";
  out << "squareMid=" << to_string(squareMid);
  out << ")";
}


GetSquareStatusResponse::~GetSquareStatusResponse() throw() {
}


void GetSquareStatusResponse::__set_squareStatus(const SquareStatus& val) {
  this->squareStatus = val;
}
std::ostream& operator<<(std::ostream& out, const GetSquareStatusResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetSquareStatusResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareStatus.read(iprot);
          this->__isset.squareStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetSquareStatusResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetSquareStatusResponse");

  xfer += oprot->writeFieldBegin("squareStatus", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->squareStatus.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetSquareStatusResponse &a, GetSquareStatusResponse &b) {
  using ::std::swap;
  swap(a.squareStatus, b.squareStatus);
  swap(a.__isset, b.__isset);
}

GetSquareStatusResponse::GetSquareStatusResponse(const GetSquareStatusResponse& other1750) {
  squareStatus = other1750.squareStatus;
  __isset = other1750.__isset;
}
GetSquareStatusResponse& GetSquareStatusResponse::operator=(const GetSquareStatusResponse& other1751) {
  squareStatus = other1751.squareStatus;
  __isset = other1751.__isset;
  return *this;
}
void GetSquareStatusResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetSquareStatusResponse(";
  out << "squareStatus=" << to_string(squareStatus);
  out << ")";
}


GetNoteStatusRequest::~GetNoteStatusRequest() throw() {
}


void GetNoteStatusRequest::__set_squareMid(const std::string& val) {
  this->squareMid = val;
}
std::ostream& operator<<(std::ostream& out, const GetNoteStatusRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetNoteStatusRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMid);
          this->__isset.squareMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetNoteStatusRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetNoteStatusRequest");

  xfer += oprot->writeFieldBegin("squareMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetNoteStatusRequest &a, GetNoteStatusRequest &b) {
  using ::std::swap;
  swap(a.squareMid, b.squareMid);
  swap(a.__isset, b.__isset);
}

GetNoteStatusRequest::GetNoteStatusRequest(const GetNoteStatusRequest& other1752) {
  squareMid = other1752.squareMid;
  __isset = other1752.__isset;
}
GetNoteStatusRequest& GetNoteStatusRequest::operator=(const GetNoteStatusRequest& other1753) {
  squareMid = other1753.squareMid;
  __isset = other1753.__isset;
  return *this;
}
void GetNoteStatusRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetNoteStatusRequest(";
  out << "squareMid=" << to_string(squareMid);
  out << ")";
}


GetNoteStatusResponse::~GetNoteStatusResponse() throw() {
}


void GetNoteStatusResponse::__set_squareMid(const std::string& val) {
  this->squareMid = val;
}

void GetNoteStatusResponse::__set_status(const NoteStatus& val) {
  this->status = val;
}
std::ostream& operator<<(std::ostream& out, const GetNoteStatusResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetNoteStatusResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareMid);
          this->__isset.squareMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->status.read(iprot);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetNoteStatusResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetNoteStatusResponse");

  xfer += oprot->writeFieldBegin("squareMid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->squareMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->status.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetNoteStatusResponse &a, GetNoteStatusResponse &b) {
  using ::std::swap;
  swap(a.squareMid, b.squareMid);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

GetNoteStatusResponse::GetNoteStatusResponse(const GetNoteStatusResponse& other1754) {
  squareMid = other1754.squareMid;
  status = other1754.status;
  __isset = other1754.__isset;
}
GetNoteStatusResponse& GetNoteStatusResponse::operator=(const GetNoteStatusResponse& other1755) {
  squareMid = other1755.squareMid;
  status = other1755.status;
  __isset = other1755.__isset;
  return *this;
}
void GetNoteStatusResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetNoteStatusResponse(";
  out << "squareMid=" << to_string(squareMid);
  out << ", " << "status=" << to_string(status);
  out << ")";
}


CreateSquareChatAnnouncementRequest::~CreateSquareChatAnnouncementRequest() throw() {
}


void CreateSquareChatAnnouncementRequest::__set_reqSeq(const int32_t val) {
  this->reqSeq = val;
}

void CreateSquareChatAnnouncementRequest::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}

void CreateSquareChatAnnouncementRequest::__set_squareChatAnnouncement(const SquareChatAnnouncement& val) {
  this->squareChatAnnouncement = val;
}
std::ostream& operator<<(std::ostream& out, const CreateSquareChatAnnouncementRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CreateSquareChatAnnouncementRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->reqSeq);
          this->__isset.reqSeq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->squareChatAnnouncement.read(iprot);
          this->__isset.squareChatAnnouncement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CreateSquareChatAnnouncementRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CreateSquareChatAnnouncementRequest");

  xfer += oprot->writeFieldBegin("reqSeq", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->reqSeq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("squareChatAnnouncement", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->squareChatAnnouncement.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CreateSquareChatAnnouncementRequest &a, CreateSquareChatAnnouncementRequest &b) {
  using ::std::swap;
  swap(a.reqSeq, b.reqSeq);
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.squareChatAnnouncement, b.squareChatAnnouncement);
  swap(a.__isset, b.__isset);
}

CreateSquareChatAnnouncementRequest::CreateSquareChatAnnouncementRequest(const CreateSquareChatAnnouncementRequest& other1756) {
  reqSeq = other1756.reqSeq;
  squareChatMid = other1756.squareChatMid;
  squareChatAnnouncement = other1756.squareChatAnnouncement;
  __isset = other1756.__isset;
}
CreateSquareChatAnnouncementRequest& CreateSquareChatAnnouncementRequest::operator=(const CreateSquareChatAnnouncementRequest& other1757) {
  reqSeq = other1757.reqSeq;
  squareChatMid = other1757.squareChatMid;
  squareChatAnnouncement = other1757.squareChatAnnouncement;
  __isset = other1757.__isset;
  return *this;
}
void CreateSquareChatAnnouncementRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CreateSquareChatAnnouncementRequest(";
  out << "reqSeq=" << to_string(reqSeq);
  out << ", " << "squareChatMid=" << to_string(squareChatMid);
  out << ", " << "squareChatAnnouncement=" << to_string(squareChatAnnouncement);
  out << ")";
}


CreateSquareChatAnnouncementResponse::~CreateSquareChatAnnouncementResponse() throw() {
}


void CreateSquareChatAnnouncementResponse::__set_announcement(const SquareChatAnnouncement& val) {
  this->announcement = val;
}
std::ostream& operator<<(std::ostream& out, const CreateSquareChatAnnouncementResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CreateSquareChatAnnouncementResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->announcement.read(iprot);
          this->__isset.announcement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CreateSquareChatAnnouncementResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CreateSquareChatAnnouncementResponse");

  xfer += oprot->writeFieldBegin("announcement", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->announcement.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CreateSquareChatAnnouncementResponse &a, CreateSquareChatAnnouncementResponse &b) {
  using ::std::swap;
  swap(a.announcement, b.announcement);
  swap(a.__isset, b.__isset);
}

CreateSquareChatAnnouncementResponse::CreateSquareChatAnnouncementResponse(const CreateSquareChatAnnouncementResponse& other1758) {
  announcement = other1758.announcement;
  __isset = other1758.__isset;
}
CreateSquareChatAnnouncementResponse& CreateSquareChatAnnouncementResponse::operator=(const CreateSquareChatAnnouncementResponse& other1759) {
  announcement = other1759.announcement;
  __isset = other1759.__isset;
  return *this;
}
void CreateSquareChatAnnouncementResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CreateSquareChatAnnouncementResponse(";
  out << "announcement=" << to_string(announcement);
  out << ")";
}


DeleteSquareChatAnnouncementRequest::~DeleteSquareChatAnnouncementRequest() throw() {
}


void DeleteSquareChatAnnouncementRequest::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}

void DeleteSquareChatAnnouncementRequest::__set_announcementSeq(const int64_t val) {
  this->announcementSeq = val;
}
std::ostream& operator<<(std::ostream& out, const DeleteSquareChatAnnouncementRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DeleteSquareChatAnnouncementRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->announcementSeq);
          this->__isset.announcementSeq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeleteSquareChatAnnouncementRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DeleteSquareChatAnnouncementRequest");

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("announcementSeq", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->announcementSeq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeleteSquareChatAnnouncementRequest &a, DeleteSquareChatAnnouncementRequest &b) {
  using ::std::swap;
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.announcementSeq, b.announcementSeq);
  swap(a.__isset, b.__isset);
}

DeleteSquareChatAnnouncementRequest::DeleteSquareChatAnnouncementRequest(const DeleteSquareChatAnnouncementRequest& other1760) {
  squareChatMid = other1760.squareChatMid;
  announcementSeq = other1760.announcementSeq;
  __isset = other1760.__isset;
}
DeleteSquareChatAnnouncementRequest& DeleteSquareChatAnnouncementRequest::operator=(const DeleteSquareChatAnnouncementRequest& other1761) {
  squareChatMid = other1761.squareChatMid;
  announcementSeq = other1761.announcementSeq;
  __isset = other1761.__isset;
  return *this;
}
void DeleteSquareChatAnnouncementRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DeleteSquareChatAnnouncementRequest(";
  out << "squareChatMid=" << to_string(squareChatMid);
  out << ", " << "announcementSeq=" << to_string(announcementSeq);
  out << ")";
}


DeleteSquareChatAnnouncementResponse::~DeleteSquareChatAnnouncementResponse() throw() {
}

std::ostream& operator<<(std::ostream& out, const DeleteSquareChatAnnouncementResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DeleteSquareChatAnnouncementResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeleteSquareChatAnnouncementResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DeleteSquareChatAnnouncementResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeleteSquareChatAnnouncementResponse &a, DeleteSquareChatAnnouncementResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

DeleteSquareChatAnnouncementResponse::DeleteSquareChatAnnouncementResponse(const DeleteSquareChatAnnouncementResponse& other1762) {
  (void) other1762;
}
DeleteSquareChatAnnouncementResponse& DeleteSquareChatAnnouncementResponse::operator=(const DeleteSquareChatAnnouncementResponse& other1763) {
  (void) other1763;
  return *this;
}
void DeleteSquareChatAnnouncementResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DeleteSquareChatAnnouncementResponse(";
  out << ")";
}


GetSquareChatAnnouncementsRequest::~GetSquareChatAnnouncementsRequest() throw() {
}


void GetSquareChatAnnouncementsRequest::__set_squareChatMid(const std::string& val) {
  this->squareChatMid = val;
}
std::ostream& operator<<(std::ostream& out, const GetSquareChatAnnouncementsRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetSquareChatAnnouncementsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->squareChatMid);
          this->__isset.squareChatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetSquareChatAnnouncementsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetSquareChatAnnouncementsRequest");

  xfer += oprot->writeFieldBegin("squareChatMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->squareChatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetSquareChatAnnouncementsRequest &a, GetSquareChatAnnouncementsRequest &b) {
  using ::std::swap;
  swap(a.squareChatMid, b.squareChatMid);
  swap(a.__isset, b.__isset);
}

GetSquareChatAnnouncementsRequest::GetSquareChatAnnouncementsRequest(const GetSquareChatAnnouncementsRequest& other1764) {
  squareChatMid = other1764.squareChatMid;
  __isset = other1764.__isset;
}
GetSquareChatAnnouncementsRequest& GetSquareChatAnnouncementsRequest::operator=(const GetSquareChatAnnouncementsRequest& other1765) {
  squareChatMid = other1765.squareChatMid;
  __isset = other1765.__isset;
  return *this;
}
void GetSquareChatAnnouncementsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetSquareChatAnnouncementsRequest(";
  out << "squareChatMid=" << to_string(squareChatMid);
  out << ")";
}


GetSquareChatAnnouncementsResponse::~GetSquareChatAnnouncementsResponse() throw() {
}


void GetSquareChatAnnouncementsResponse::__set_announcements(const std::vector<SquareChatAnnouncement> & val) {
  this->announcements = val;
}
std::ostream& operator<<(std::ostream& out, const GetSquareChatAnnouncementsResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetSquareChatAnnouncementsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->announcements.clear();
            uint32_t _size1766;
            ::apache::thrift::protocol::TType _etype1769;
            xfer += iprot->readListBegin(_etype1769, _size1766);
            this->announcements.resize(_size1766);
            uint32_t _i1770;
            for (_i1770 = 0; _i1770 < _size1766; ++_i1770)
            {
              xfer += this->announcements[_i1770].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.announcements = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetSquareChatAnnouncementsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetSquareChatAnnouncementsResponse");

  xfer += oprot->writeFieldBegin("announcements", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->announcements.size()));
    std::vector<SquareChatAnnouncement> ::const_iterator _iter1771;
    for (_iter1771 = this->announcements.begin(); _iter1771 != this->announcements.end(); ++_iter1771)
    {
      xfer += (*_iter1771).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetSquareChatAnnouncementsResponse &a, GetSquareChatAnnouncementsResponse &b) {
  using ::std::swap;
  swap(a.announcements, b.announcements);
  swap(a.__isset, b.__isset);
}

GetSquareChatAnnouncementsResponse::GetSquareChatAnnouncementsResponse(const GetSquareChatAnnouncementsResponse& other1772) {
  announcements = other1772.announcements;
  __isset = other1772.__isset;
}
GetSquareChatAnnouncementsResponse& GetSquareChatAnnouncementsResponse::operator=(const GetSquareChatAnnouncementsResponse& other1773) {
  announcements = other1773.announcements;
  __isset = other1773.__isset;
  return *this;
}
void GetSquareChatAnnouncementsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetSquareChatAnnouncementsResponse(";
  out << "announcements=" << to_string(announcements);
  out << ")";
}


GetJoinedSquareChatsRequest::~GetJoinedSquareChatsRequest() throw() {
}


void GetJoinedSquareChatsRequest::__set_continuationToken(const std::string& val) {
  this->continuationToken = val;
}

void GetJoinedSquareChatsRequest::__set_limit(const int32_t val) {
  this->limit = val;
}
std::ostream& operator<<(std::ostream& out, const GetJoinedSquareChatsRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetJoinedSquareChatsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->continuationToken);
          this->__isset.continuationToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetJoinedSquareChatsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetJoinedSquareChatsRequest");

  xfer += oprot->writeFieldBegin("continuationToken", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->continuationToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->limit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetJoinedSquareChatsRequest &a, GetJoinedSquareChatsRequest &b) {
  using ::std::swap;
  swap(a.continuationToken, b.continuationToken);
  swap(a.limit, b.limit);
  swap(a.__isset, b.__isset);
}

GetJoinedSquareChatsRequest::GetJoinedSquareChatsRequest(const GetJoinedSquareChatsRequest& other1774) {
  continuationToken = other1774.continuationToken;
  limit = other1774.limit;
  __isset = other1774.__isset;
}
GetJoinedSquareChatsRequest& GetJoinedSquareChatsRequest::operator=(const GetJoinedSquareChatsRequest& other1775) {
  continuationToken = other1775.continuationToken;
  limit = other1775.limit;
  __isset = other1775.__isset;
  return *this;
}
void GetJoinedSquareChatsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetJoinedSquareChatsRequest(";
  out << "continuationToken=" << to_string(continuationToken);
  out << ", " << "limit=" << to_string(limit);
  out << ")";
}


GetJoinedSquareChatsResponse::~GetJoinedSquareChatsResponse() throw() {
}


void GetJoinedSquareChatsResponse::__set_chats(const std::vector<SquareChat> & val) {
  this->chats = val;
}

void GetJoinedSquareChatsResponse::__set_chatMembers(const std::map<std::string, SquareChatMember> & val) {
  this->chatMembers = val;
}

void GetJoinedSquareChatsResponse::__set_statuses(const std::map<std::string, SquareChatStatus> & val) {
  this->statuses = val;
}

void GetJoinedSquareChatsResponse::__set_continuationToken(const std::string& val) {
  this->continuationToken = val;
}
std::ostream& operator<<(std::ostream& out, const GetJoinedSquareChatsResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetJoinedSquareChatsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->chats.clear();
            uint32_t _size1776;
            ::apache::thrift::protocol::TType _etype1779;
            xfer += iprot->readListBegin(_etype1779, _size1776);
            this->chats.resize(_size1776);
            uint32_t _i1780;
            for (_i1780 = 0; _i1780 < _size1776; ++_i1780)
            {
              xfer += this->chats[_i1780].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.chats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->chatMembers.clear();
            uint32_t _size1781;
            ::apache::thrift::protocol::TType _ktype1782;
            ::apache::thrift::protocol::TType _vtype1783;
            xfer += iprot->readMapBegin(_ktype1782, _vtype1783, _size1781);
            uint32_t _i1785;
            for (_i1785 = 0; _i1785 < _size1781; ++_i1785)
            {
              std::string _key1786;
              xfer += iprot->readString(_key1786);
              SquareChatMember& _val1787 = this->chatMembers[_key1786];
              xfer += _val1787.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.chatMembers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->statuses.clear();
            uint32_t _size1788;
            ::apache::thrift::protocol::TType _ktype1789;
            ::apache::thrift::protocol::TType _vtype1790;
            xfer += iprot->readMapBegin(_ktype1789, _vtype1790, _size1788);
            uint32_t _i1792;
            for (_i1792 = 0; _i1792 < _size1788; ++_i1792)
            {
              std::string _key1793;
              xfer += iprot->readString(_key1793);
              SquareChatStatus& _val1794 = this->statuses[_key1793];
              xfer += _val1794.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.statuses = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->continuationToken);
          this->__isset.continuationToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetJoinedSquareChatsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetJoinedSquareChatsResponse");

  xfer += oprot->writeFieldBegin("chats", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->chats.size()));
    std::vector<SquareChat> ::const_iterator _iter1795;
    for (_iter1795 = this->chats.begin(); _iter1795 != this->chats.end(); ++_iter1795)
    {
      xfer += (*_iter1795).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chatMembers", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->chatMembers.size()));
    std::map<std::string, SquareChatMember> ::const_iterator _iter1796;
    for (_iter1796 = this->chatMembers.begin(); _iter1796 != this->chatMembers.end(); ++_iter1796)
    {
      xfer += oprot->writeString(_iter1796->first);
      xfer += _iter1796->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("statuses", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->statuses.size()));
    std::map<std::string, SquareChatStatus> ::const_iterator _iter1797;
    for (_iter1797 = this->statuses.begin(); _iter1797 != this->statuses.end(); ++_iter1797)
    {
      xfer += oprot->writeString(_iter1797->first);
      xfer += _iter1797->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("continuationToken", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->continuationToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetJoinedSquareChatsResponse &a, GetJoinedSquareChatsResponse &b) {
  using ::std::swap;
  swap(a.chats, b.chats);
  swap(a.chatMembers, b.chatMembers);
  swap(a.statuses, b.statuses);
  swap(a.continuationToken, b.continuationToken);
  swap(a.__isset, b.__isset);
}

GetJoinedSquareChatsResponse::GetJoinedSquareChatsResponse(const GetJoinedSquareChatsResponse& other1798) {
  chats = other1798.chats;
  chatMembers = other1798.chatMembers;
  statuses = other1798.statuses;
  continuationToken = other1798.continuationToken;
  __isset = other1798.__isset;
}
GetJoinedSquareChatsResponse& GetJoinedSquareChatsResponse::operator=(const GetJoinedSquareChatsResponse& other1799) {
  chats = other1799.chats;
  chatMembers = other1799.chatMembers;
  statuses = other1799.statuses;
  continuationToken = other1799.continuationToken;
  __isset = other1799.__isset;
  return *this;
}
void GetJoinedSquareChatsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetJoinedSquareChatsResponse(";
  out << "chats=" << to_string(chats);
  out << ", " << "chatMembers=" << to_string(chatMembers);
  out << ", " << "statuses=" << to_string(statuses);
  out << ", " << "continuationToken=" << to_string(continuationToken);
  out << ")";
}


TalkException::~TalkException() throw() {
}


void TalkException::__set_code(const ErrorCode::type val) {
  this->code = val;
}

void TalkException::__set_reason(const std::string& val) {
  this->reason = val;
}

void TalkException::__set_parameterMap(const std::map<std::string, std::string> & val) {
  this->parameterMap = val;
}
std::ostream& operator<<(std::ostream& out, const TalkException& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TalkException::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1800;
          xfer += iprot->readI32(ecast1800);
          this->code = (ErrorCode::type)ecast1800;
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->reason);
          this->__isset.reason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->parameterMap.clear();
            uint32_t _size1801;
            ::apache::thrift::protocol::TType _ktype1802;
            ::apache::thrift::protocol::TType _vtype1803;
            xfer += iprot->readMapBegin(_ktype1802, _vtype1803, _size1801);
            uint32_t _i1805;
            for (_i1805 = 0; _i1805 < _size1801; ++_i1805)
            {
              std::string _key1806;
              xfer += iprot->readString(_key1806);
              std::string& _val1807 = this->parameterMap[_key1806];
              xfer += iprot->readString(_val1807);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.parameterMap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TalkException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TalkException");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reason", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->reason);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parameterMap", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->parameterMap.size()));
    std::map<std::string, std::string> ::const_iterator _iter1808;
    for (_iter1808 = this->parameterMap.begin(); _iter1808 != this->parameterMap.end(); ++_iter1808)
    {
      xfer += oprot->writeString(_iter1808->first);
      xfer += oprot->writeString(_iter1808->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TalkException &a, TalkException &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.reason, b.reason);
  swap(a.parameterMap, b.parameterMap);
  swap(a.__isset, b.__isset);
}

TalkException::TalkException(const TalkException& other1809) : TException() {
  code = other1809.code;
  reason = other1809.reason;
  parameterMap = other1809.parameterMap;
  __isset = other1809.__isset;
}
TalkException& TalkException::operator=(const TalkException& other1810) {
  code = other1810.code;
  reason = other1810.reason;
  parameterMap = other1810.parameterMap;
  __isset = other1810.__isset;
  return *this;
}
void TalkException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TalkException(";
  out << "code=" << to_string(code);
  out << ", " << "reason=" << to_string(reason);
  out << ", " << "parameterMap=" << to_string(parameterMap);
  out << ")";
}

const char* TalkException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: TalkException";
  }
}


ShouldSyncException::~ShouldSyncException() throw() {
}


void ShouldSyncException::__set_syncOpRevision(const int64_t val) {
  this->syncOpRevision = val;
}

void ShouldSyncException::__set_syncScope(const SyncScope& val) {
  this->syncScope = val;
}

void ShouldSyncException::__set_syncReason(const SyncTriggerReason::type val) {
  this->syncReason = val;
}

void ShouldSyncException::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const ShouldSyncException& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShouldSyncException::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->syncOpRevision);
          this->__isset.syncOpRevision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->syncScope.read(iprot);
          this->__isset.syncScope = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1811;
          xfer += iprot->readI32(ecast1811);
          this->syncReason = (SyncTriggerReason::type)ecast1811;
          this->__isset.syncReason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShouldSyncException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShouldSyncException");

  xfer += oprot->writeFieldBegin("syncOpRevision", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->syncOpRevision);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("syncScope", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->syncScope.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("syncReason", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->syncReason);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShouldSyncException &a, ShouldSyncException &b) {
  using ::std::swap;
  swap(a.syncOpRevision, b.syncOpRevision);
  swap(a.syncScope, b.syncScope);
  swap(a.syncReason, b.syncReason);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

ShouldSyncException::ShouldSyncException(const ShouldSyncException& other1812) : TException() {
  syncOpRevision = other1812.syncOpRevision;
  syncScope = other1812.syncScope;
  syncReason = other1812.syncReason;
  message = other1812.message;
  __isset = other1812.__isset;
}
ShouldSyncException& ShouldSyncException::operator=(const ShouldSyncException& other1813) {
  syncOpRevision = other1813.syncOpRevision;
  syncScope = other1813.syncScope;
  syncReason = other1813.syncReason;
  message = other1813.message;
  __isset = other1813.__isset;
  return *this;
}
void ShouldSyncException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShouldSyncException(";
  out << "syncOpRevision=" << to_string(syncOpRevision);
  out << ", " << "syncScope=" << to_string(syncScope);
  out << ", " << "syncReason=" << to_string(syncReason);
  out << ", " << "message=" << to_string(message);
  out << ")";
}

const char* ShouldSyncException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: ShouldSyncException";
  }
}


PointException::~PointException() throw() {
}


void PointException::__set_code(const PointErrorCode::type val) {
  this->code = val;
}

void PointException::__set_reason(const std::string& val) {
  this->reason = val;
}

void PointException::__set_extra(const std::map<std::string, std::string> & val) {
  this->extra = val;
}
std::ostream& operator<<(std::ostream& out, const PointException& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PointException::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1814;
          xfer += iprot->readI32(ecast1814);
          this->code = (PointErrorCode::type)ecast1814;
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->reason);
          this->__isset.reason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->extra.clear();
            uint32_t _size1815;
            ::apache::thrift::protocol::TType _ktype1816;
            ::apache::thrift::protocol::TType _vtype1817;
            xfer += iprot->readMapBegin(_ktype1816, _vtype1817, _size1815);
            uint32_t _i1819;
            for (_i1819 = 0; _i1819 < _size1815; ++_i1819)
            {
              std::string _key1820;
              xfer += iprot->readString(_key1820);
              std::string& _val1821 = this->extra[_key1820];
              xfer += iprot->readString(_val1821);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.extra = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PointException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PointException");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reason", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->reason);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("extra", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->extra.size()));
    std::map<std::string, std::string> ::const_iterator _iter1822;
    for (_iter1822 = this->extra.begin(); _iter1822 != this->extra.end(); ++_iter1822)
    {
      xfer += oprot->writeString(_iter1822->first);
      xfer += oprot->writeString(_iter1822->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PointException &a, PointException &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.reason, b.reason);
  swap(a.extra, b.extra);
  swap(a.__isset, b.__isset);
}

PointException::PointException(const PointException& other1823) : TException() {
  code = other1823.code;
  reason = other1823.reason;
  extra = other1823.extra;
  __isset = other1823.__isset;
}
PointException& PointException::operator=(const PointException& other1824) {
  code = other1824.code;
  reason = other1824.reason;
  extra = other1824.extra;
  __isset = other1824.__isset;
  return *this;
}
void PointException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PointException(";
  out << "code=" << to_string(code);
  out << ", " << "reason=" << to_string(reason);
  out << ", " << "extra=" << to_string(extra);
  out << ")";
}

const char* PointException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: PointException";
  }
}


ChannelException::~ChannelException() throw() {
}


void ChannelException::__set_code(const ChannelErrorCode::type val) {
  this->code = val;
}

void ChannelException::__set_reason(const std::string& val) {
  this->reason = val;
}

void ChannelException::__set_parameterMap(const std::map<std::string, std::string> & val) {
  this->parameterMap = val;
}
std::ostream& operator<<(std::ostream& out, const ChannelException& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ChannelException::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1825;
          xfer += iprot->readI32(ecast1825);
          this->code = (ChannelErrorCode::type)ecast1825;
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->reason);
          this->__isset.reason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->parameterMap.clear();
            uint32_t _size1826;
            ::apache::thrift::protocol::TType _ktype1827;
            ::apache::thrift::protocol::TType _vtype1828;
            xfer += iprot->readMapBegin(_ktype1827, _vtype1828, _size1826);
            uint32_t _i1830;
            for (_i1830 = 0; _i1830 < _size1826; ++_i1830)
            {
              std::string _key1831;
              xfer += iprot->readString(_key1831);
              std::string& _val1832 = this->parameterMap[_key1831];
              xfer += iprot->readString(_val1832);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.parameterMap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ChannelException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ChannelException");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reason", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->reason);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parameterMap", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->parameterMap.size()));
    std::map<std::string, std::string> ::const_iterator _iter1833;
    for (_iter1833 = this->parameterMap.begin(); _iter1833 != this->parameterMap.end(); ++_iter1833)
    {
      xfer += oprot->writeString(_iter1833->first);
      xfer += oprot->writeString(_iter1833->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ChannelException &a, ChannelException &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.reason, b.reason);
  swap(a.parameterMap, b.parameterMap);
  swap(a.__isset, b.__isset);
}

ChannelException::ChannelException(const ChannelException& other1834) : TException() {
  code = other1834.code;
  reason = other1834.reason;
  parameterMap = other1834.parameterMap;
  __isset = other1834.__isset;
}
ChannelException& ChannelException::operator=(const ChannelException& other1835) {
  code = other1835.code;
  reason = other1835.reason;
  parameterMap = other1835.parameterMap;
  __isset = other1835.__isset;
  return *this;
}
void ChannelException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ChannelException(";
  out << "code=" << to_string(code);
  out << ", " << "reason=" << to_string(reason);
  out << ", " << "parameterMap=" << to_string(parameterMap);
  out << ")";
}

const char* ChannelException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: ChannelException";
  }
}


SquareException::~SquareException() throw() {
}


void SquareException::__set_errorCode(const SQErrorCode::type val) {
  this->errorCode = val;
}

void SquareException::__set_errorExtraInfo(const ErrorExtraInfo& val) {
  this->errorExtraInfo = val;
}

void SquareException::__set_reason(const std::string& val) {
  this->reason = val;
}
std::ostream& operator<<(std::ostream& out, const SquareException& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SquareException::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1836;
          xfer += iprot->readI32(ecast1836);
          this->errorCode = (SQErrorCode::type)ecast1836;
          this->__isset.errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->errorExtraInfo.read(iprot);
          this->__isset.errorExtraInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->reason);
          this->__isset.reason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SquareException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SquareException");

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->errorCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errorExtraInfo", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->errorExtraInfo.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reason", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->reason);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SquareException &a, SquareException &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.errorExtraInfo, b.errorExtraInfo);
  swap(a.reason, b.reason);
  swap(a.__isset, b.__isset);
}

SquareException::SquareException(const SquareException& other1837) : TException() {
  errorCode = other1837.errorCode;
  errorExtraInfo = other1837.errorExtraInfo;
  reason = other1837.reason;
  __isset = other1837.__isset;
}
SquareException& SquareException::operator=(const SquareException& other1838) {
  errorCode = other1838.errorCode;
  errorExtraInfo = other1838.errorExtraInfo;
  reason = other1838.reason;
  __isset = other1838.__isset;
  return *this;
}
void SquareException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SquareException(";
  out << "errorCode=" << to_string(errorCode);
  out << ", " << "errorExtraInfo=" << to_string(errorExtraInfo);
  out << ", " << "reason=" << to_string(reason);
  out << ")";
}

const char* SquareException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: SquareException";
  }
}


UniversalNotificationServiceException::~UniversalNotificationServiceException() throw() {
}


void UniversalNotificationServiceException::__set_code(const UniversalNotificationServiceErrorCode::type val) {
  this->code = val;
}

void UniversalNotificationServiceException::__set_reason(const std::string& val) {
  this->reason = val;
}

void UniversalNotificationServiceException::__set_parameterMap(const std::map<std::string, std::string> & val) {
  this->parameterMap = val;
}
std::ostream& operator<<(std::ostream& out, const UniversalNotificationServiceException& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UniversalNotificationServiceException::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1839;
          xfer += iprot->readI32(ecast1839);
          this->code = (UniversalNotificationServiceErrorCode::type)ecast1839;
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->reason);
          this->__isset.reason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->parameterMap.clear();
            uint32_t _size1840;
            ::apache::thrift::protocol::TType _ktype1841;
            ::apache::thrift::protocol::TType _vtype1842;
            xfer += iprot->readMapBegin(_ktype1841, _vtype1842, _size1840);
            uint32_t _i1844;
            for (_i1844 = 0; _i1844 < _size1840; ++_i1844)
            {
              std::string _key1845;
              xfer += iprot->readString(_key1845);
              std::string& _val1846 = this->parameterMap[_key1845];
              xfer += iprot->readString(_val1846);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.parameterMap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UniversalNotificationServiceException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UniversalNotificationServiceException");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reason", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->reason);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parameterMap", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->parameterMap.size()));
    std::map<std::string, std::string> ::const_iterator _iter1847;
    for (_iter1847 = this->parameterMap.begin(); _iter1847 != this->parameterMap.end(); ++_iter1847)
    {
      xfer += oprot->writeString(_iter1847->first);
      xfer += oprot->writeString(_iter1847->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UniversalNotificationServiceException &a, UniversalNotificationServiceException &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.reason, b.reason);
  swap(a.parameterMap, b.parameterMap);
  swap(a.__isset, b.__isset);
}

UniversalNotificationServiceException::UniversalNotificationServiceException(const UniversalNotificationServiceException& other1848) : TException() {
  code = other1848.code;
  reason = other1848.reason;
  parameterMap = other1848.parameterMap;
  __isset = other1848.__isset;
}
UniversalNotificationServiceException& UniversalNotificationServiceException::operator=(const UniversalNotificationServiceException& other1849) {
  code = other1849.code;
  reason = other1849.reason;
  parameterMap = other1849.parameterMap;
  __isset = other1849.__isset;
  return *this;
}
void UniversalNotificationServiceException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UniversalNotificationServiceException(";
  out << "code=" << to_string(code);
  out << ", " << "reason=" << to_string(reason);
  out << ", " << "parameterMap=" << to_string(parameterMap);
  out << ")";
}

const char* UniversalNotificationServiceException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: UniversalNotificationServiceException";
  }
}


UpdateBuddyProfileResult::~UpdateBuddyProfileResult() throw() {
}


void UpdateBuddyProfileResult::__set_requestId(const std::string& val) {
  this->requestId = val;
}

void UpdateBuddyProfileResult::__set_state(const BuddyResultState::type val) {
  this->state = val;
}

void UpdateBuddyProfileResult::__set_eventNo(const int32_t val) {
  this->eventNo = val;
}

void UpdateBuddyProfileResult::__set_receiverCount(const int64_t val) {
  this->receiverCount = val;
}

void UpdateBuddyProfileResult::__set_successCount(const int64_t val) {
  this->successCount = val;
}

void UpdateBuddyProfileResult::__set_failCount(const int64_t val) {
  this->failCount = val;
}

void UpdateBuddyProfileResult::__set_cancelCount(const int64_t val) {
  this->cancelCount = val;
}

void UpdateBuddyProfileResult::__set_unregisterCount(const int64_t val) {
  this->unregisterCount = val;
}

void UpdateBuddyProfileResult::__set_timestamp(const int64_t val) {
  this->timestamp = val;
}

void UpdateBuddyProfileResult::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const UpdateBuddyProfileResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UpdateBuddyProfileResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->requestId);
          this->__isset.requestId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1850;
          xfer += iprot->readI32(ecast1850);
          this->state = (BuddyResultState::type)ecast1850;
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eventNo);
          this->__isset.eventNo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->receiverCount);
          this->__isset.receiverCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->successCount);
          this->__isset.successCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->failCount);
          this->__isset.failCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cancelCount);
          this->__isset.cancelCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->unregisterCount);
          this->__isset.unregisterCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateBuddyProfileResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UpdateBuddyProfileResult");

  xfer += oprot->writeFieldBegin("requestId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->requestId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventNo", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->eventNo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("receiverCount", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->receiverCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("successCount", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->successCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("failCount", ::apache::thrift::protocol::T_I64, 13);
  xfer += oprot->writeI64(this->failCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cancelCount", ::apache::thrift::protocol::T_I64, 14);
  xfer += oprot->writeI64(this->cancelCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unregisterCount", ::apache::thrift::protocol::T_I64, 15);
  xfer += oprot->writeI64(this->unregisterCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I64, 21);
  xfer += oprot->writeI64(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 22);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateBuddyProfileResult &a, UpdateBuddyProfileResult &b) {
  using ::std::swap;
  swap(a.requestId, b.requestId);
  swap(a.state, b.state);
  swap(a.eventNo, b.eventNo);
  swap(a.receiverCount, b.receiverCount);
  swap(a.successCount, b.successCount);
  swap(a.failCount, b.failCount);
  swap(a.cancelCount, b.cancelCount);
  swap(a.unregisterCount, b.unregisterCount);
  swap(a.timestamp, b.timestamp);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

UpdateBuddyProfileResult::UpdateBuddyProfileResult(const UpdateBuddyProfileResult& other1851) {
  requestId = other1851.requestId;
  state = other1851.state;
  eventNo = other1851.eventNo;
  receiverCount = other1851.receiverCount;
  successCount = other1851.successCount;
  failCount = other1851.failCount;
  cancelCount = other1851.cancelCount;
  unregisterCount = other1851.unregisterCount;
  timestamp = other1851.timestamp;
  message = other1851.message;
  __isset = other1851.__isset;
}
UpdateBuddyProfileResult& UpdateBuddyProfileResult::operator=(const UpdateBuddyProfileResult& other1852) {
  requestId = other1852.requestId;
  state = other1852.state;
  eventNo = other1852.eventNo;
  receiverCount = other1852.receiverCount;
  successCount = other1852.successCount;
  failCount = other1852.failCount;
  cancelCount = other1852.cancelCount;
  unregisterCount = other1852.unregisterCount;
  timestamp = other1852.timestamp;
  message = other1852.message;
  __isset = other1852.__isset;
  return *this;
}
void UpdateBuddyProfileResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UpdateBuddyProfileResult(";
  out << "requestId=" << to_string(requestId);
  out << ", " << "state=" << to_string(state);
  out << ", " << "eventNo=" << to_string(eventNo);
  out << ", " << "receiverCount=" << to_string(receiverCount);
  out << ", " << "successCount=" << to_string(successCount);
  out << ", " << "failCount=" << to_string(failCount);
  out << ", " << "cancelCount=" << to_string(cancelCount);
  out << ", " << "unregisterCount=" << to_string(unregisterCount);
  out << ", " << "timestamp=" << to_string(timestamp);
  out << ", " << "message=" << to_string(message);
  out << ")";
}


UserAuthStatus::~UserAuthStatus() throw() {
}


void UserAuthStatus::__set_phoneNumberRegistered(const bool val) {
  this->phoneNumberRegistered = val;
}

void UserAuthStatus::__set_registeredSnsIdTypes(const std::vector<SnsIdType::type> & val) {
  this->registeredSnsIdTypes = val;
}

void UserAuthStatus::__set_accountMigrationCheckType(const AccountMigrationCheckType::type val) {
  this->accountMigrationCheckType = val;
}
std::ostream& operator<<(std::ostream& out, const UserAuthStatus& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UserAuthStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->phoneNumberRegistered);
          this->__isset.phoneNumberRegistered = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->registeredSnsIdTypes.clear();
            uint32_t _size1853;
            ::apache::thrift::protocol::TType _etype1856;
            xfer += iprot->readListBegin(_etype1856, _size1853);
            this->registeredSnsIdTypes.resize(_size1853);
            uint32_t _i1857;
            for (_i1857 = 0; _i1857 < _size1853; ++_i1857)
            {
              int32_t ecast1858;
              xfer += iprot->readI32(ecast1858);
              this->registeredSnsIdTypes[_i1857] = (SnsIdType::type)ecast1858;
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.registeredSnsIdTypes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1859;
          xfer += iprot->readI32(ecast1859);
          this->accountMigrationCheckType = (AccountMigrationCheckType::type)ecast1859;
          this->__isset.accountMigrationCheckType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserAuthStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UserAuthStatus");

  xfer += oprot->writeFieldBegin("phoneNumberRegistered", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->phoneNumberRegistered);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("registeredSnsIdTypes", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->registeredSnsIdTypes.size()));
    std::vector<SnsIdType::type> ::const_iterator _iter1860;
    for (_iter1860 = this->registeredSnsIdTypes.begin(); _iter1860 != this->registeredSnsIdTypes.end(); ++_iter1860)
    {
      xfer += oprot->writeI32((int32_t)(*_iter1860));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("accountMigrationCheckType", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->accountMigrationCheckType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserAuthStatus &a, UserAuthStatus &b) {
  using ::std::swap;
  swap(a.phoneNumberRegistered, b.phoneNumberRegistered);
  swap(a.registeredSnsIdTypes, b.registeredSnsIdTypes);
  swap(a.accountMigrationCheckType, b.accountMigrationCheckType);
  swap(a.__isset, b.__isset);
}

UserAuthStatus::UserAuthStatus(const UserAuthStatus& other1861) {
  phoneNumberRegistered = other1861.phoneNumberRegistered;
  registeredSnsIdTypes = other1861.registeredSnsIdTypes;
  accountMigrationCheckType = other1861.accountMigrationCheckType;
  __isset = other1861.__isset;
}
UserAuthStatus& UserAuthStatus::operator=(const UserAuthStatus& other1862) {
  phoneNumberRegistered = other1862.phoneNumberRegistered;
  registeredSnsIdTypes = other1862.registeredSnsIdTypes;
  accountMigrationCheckType = other1862.accountMigrationCheckType;
  __isset = other1862.__isset;
  return *this;
}
void UserAuthStatus::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UserAuthStatus(";
  out << "phoneNumberRegistered=" << to_string(phoneNumberRegistered);
  out << ", " << "registeredSnsIdTypes=" << to_string(registeredSnsIdTypes);
  out << ", " << "accountMigrationCheckType=" << to_string(accountMigrationCheckType);
  out << ")";
}


WapInvitation::~WapInvitation() throw() {
}


void WapInvitation::__set_type(const WapInvitationType::type val) {
  this->type = val;
}

void WapInvitation::__set_inviteeEmail(const std::string& val) {
  this->inviteeEmail = val;
}

void WapInvitation::__set_inviterMid(const std::string& val) {
  this->inviterMid = val;
}

void WapInvitation::__set_roomMid(const std::string& val) {
  this->roomMid = val;
}
std::ostream& operator<<(std::ostream& out, const WapInvitation& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t WapInvitation::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1863;
          xfer += iprot->readI32(ecast1863);
          this->type = (WapInvitationType::type)ecast1863;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->inviteeEmail);
          this->__isset.inviteeEmail = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->inviterMid);
          this->__isset.inviterMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->roomMid);
          this->__isset.roomMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WapInvitation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WapInvitation");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inviteeEmail", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->inviteeEmail);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inviterMid", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->inviterMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roomMid", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->roomMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WapInvitation &a, WapInvitation &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.inviteeEmail, b.inviteeEmail);
  swap(a.inviterMid, b.inviterMid);
  swap(a.roomMid, b.roomMid);
  swap(a.__isset, b.__isset);
}

WapInvitation::WapInvitation(const WapInvitation& other1864) {
  type = other1864.type;
  inviteeEmail = other1864.inviteeEmail;
  inviterMid = other1864.inviterMid;
  roomMid = other1864.roomMid;
  __isset = other1864.__isset;
}
WapInvitation& WapInvitation::operator=(const WapInvitation& other1865) {
  type = other1865.type;
  inviteeEmail = other1865.inviteeEmail;
  inviterMid = other1865.inviterMid;
  roomMid = other1865.roomMid;
  __isset = other1865.__isset;
  return *this;
}
void WapInvitation::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WapInvitation(";
  out << "type=" << to_string(type);
  out << ", " << "inviteeEmail=" << to_string(inviteeEmail);
  out << ", " << "inviterMid=" << to_string(inviterMid);
  out << ", " << "roomMid=" << to_string(roomMid);
  out << ")";
}


GroupCall::~GroupCall() throw() {
}


void GroupCall::__set_online(const bool val) {
  this->online = val;
}

void GroupCall::__set_chatMid(const std::string& val) {
  this->chatMid = val;
}

void GroupCall::__set_hostMids(const std::string& val) {
  this->hostMids = val;
}

void GroupCall::__set_memberMids(const std::vector<std::string> & val) {
  this->memberMids = val;
}

void GroupCall::__set_started(const int64_t val) {
  this->started = val;
}

void GroupCall::__set_mediaType(const GroupCallMediaType::type val) {
  this->mediaType = val;
}
std::ostream& operator<<(std::ostream& out, const GroupCall& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GroupCall::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->online);
          this->__isset.online = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->chatMid);
          this->__isset.chatMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->hostMids);
          this->__isset.hostMids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->memberMids.clear();
            uint32_t _size1866;
            ::apache::thrift::protocol::TType _etype1869;
            xfer += iprot->readListBegin(_etype1869, _size1866);
            this->memberMids.resize(_size1866);
            uint32_t _i1870;
            for (_i1870 = 0; _i1870 < _size1866; ++_i1870)
            {
              xfer += iprot->readString(this->memberMids[_i1870]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.memberMids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->started);
          this->__isset.started = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1871;
          xfer += iprot->readI32(ecast1871);
          this->mediaType = (GroupCallMediaType::type)ecast1871;
          this->__isset.mediaType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GroupCall::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GroupCall");

  xfer += oprot->writeFieldBegin("online", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->online);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chatMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->chatMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hostMids", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->hostMids);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("memberMids", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->memberMids.size()));
    std::vector<std::string> ::const_iterator _iter1872;
    for (_iter1872 = this->memberMids.begin(); _iter1872 != this->memberMids.end(); ++_iter1872)
    {
      xfer += oprot->writeString((*_iter1872));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("started", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->started);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mediaType", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->mediaType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GroupCall &a, GroupCall &b) {
  using ::std::swap;
  swap(a.online, b.online);
  swap(a.chatMid, b.chatMid);
  swap(a.hostMids, b.hostMids);
  swap(a.memberMids, b.memberMids);
  swap(a.started, b.started);
  swap(a.mediaType, b.mediaType);
  swap(a.__isset, b.__isset);
}

GroupCall::GroupCall(const GroupCall& other1873) {
  online = other1873.online;
  chatMid = other1873.chatMid;
  hostMids = other1873.hostMids;
  memberMids = other1873.memberMids;
  started = other1873.started;
  mediaType = other1873.mediaType;
  __isset = other1873.__isset;
}
GroupCall& GroupCall::operator=(const GroupCall& other1874) {
  online = other1874.online;
  chatMid = other1874.chatMid;
  hostMids = other1874.hostMids;
  memberMids = other1874.memberMids;
  started = other1874.started;
  mediaType = other1874.mediaType;
  __isset = other1874.__isset;
  return *this;
}
void GroupCall::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GroupCall(";
  out << "online=" << to_string(online);
  out << ", " << "chatMid=" << to_string(chatMid);
  out << ", " << "hostMids=" << to_string(hostMids);
  out << ", " << "memberMids=" << to_string(memberMids);
  out << ", " << "started=" << to_string(started);
  out << ", " << "mediaType=" << to_string(mediaType);
  out << ")";
}


GroupCallRoute::~GroupCallRoute() throw() {
}


void GroupCallRoute::__set_token(const std::string& val) {
  this->token = val;
}

void GroupCallRoute::__set_cscf(const CallHost& val) {
  this->cscf = val;
}

void GroupCallRoute::__set_mix(const CallHost& val) {
  this->mix = val;
}
std::ostream& operator<<(std::ostream& out, const GroupCallRoute& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GroupCallRoute::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->token);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->cscf.read(iprot);
          this->__isset.cscf = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->mix.read(iprot);
          this->__isset.mix = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GroupCallRoute::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GroupCallRoute");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cscf", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->cscf.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mix", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->mix.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GroupCallRoute &a, GroupCallRoute &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.cscf, b.cscf);
  swap(a.mix, b.mix);
  swap(a.__isset, b.__isset);
}

GroupCallRoute::GroupCallRoute(const GroupCallRoute& other1875) {
  token = other1875.token;
  cscf = other1875.cscf;
  mix = other1875.mix;
  __isset = other1875.__isset;
}
GroupCallRoute& GroupCallRoute::operator=(const GroupCallRoute& other1876) {
  token = other1876.token;
  cscf = other1876.cscf;
  mix = other1876.mix;
  __isset = other1876.__isset;
  return *this;
}
void GroupCallRoute::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GroupCallRoute(";
  out << "token=" << to_string(token);
  out << ", " << "cscf=" << to_string(cscf);
  out << ", " << "mix=" << to_string(mix);
  out << ")";
}


