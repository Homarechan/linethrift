/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SnsAdaptorService_H
#define SnsAdaptorService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "line_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class SnsAdaptorServiceIf {
 public:
  virtual ~SnsAdaptorServiceIf() {}
  virtual void getSnsFriends(SnsFriends& _return, const SnsIdType::type snsIdType, const std::string& snsAccessToken, const int32_t startIdx, const int32_t limit) = 0;
  virtual void getSnsMyProfile(SnsProfile& _return, const SnsIdType::type snsIdType, const std::string& snsAccessToken) = 0;
  virtual void postSnsInvitationMessage(const SnsIdType::type snsIdType, const std::string& snsAccessToken, const std::string& toSnsUserId) = 0;
};

class SnsAdaptorServiceIfFactory {
 public:
  typedef SnsAdaptorServiceIf Handler;

  virtual ~SnsAdaptorServiceIfFactory() {}

  virtual SnsAdaptorServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SnsAdaptorServiceIf* /* handler */) = 0;
};

class SnsAdaptorServiceIfSingletonFactory : virtual public SnsAdaptorServiceIfFactory {
 public:
  SnsAdaptorServiceIfSingletonFactory(const ::std::shared_ptr<SnsAdaptorServiceIf>& iface) : iface_(iface) {}
  virtual ~SnsAdaptorServiceIfSingletonFactory() {}

  virtual SnsAdaptorServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SnsAdaptorServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<SnsAdaptorServiceIf> iface_;
};

class SnsAdaptorServiceNull : virtual public SnsAdaptorServiceIf {
 public:
  virtual ~SnsAdaptorServiceNull() {}
  void getSnsFriends(SnsFriends& /* _return */, const SnsIdType::type /* snsIdType */, const std::string& /* snsAccessToken */, const int32_t /* startIdx */, const int32_t /* limit */) {
    return;
  }
  void getSnsMyProfile(SnsProfile& /* _return */, const SnsIdType::type /* snsIdType */, const std::string& /* snsAccessToken */) {
    return;
  }
  void postSnsInvitationMessage(const SnsIdType::type /* snsIdType */, const std::string& /* snsAccessToken */, const std::string& /* toSnsUserId */) {
    return;
  }
};

typedef struct _SnsAdaptorService_getSnsFriends_args__isset {
  _SnsAdaptorService_getSnsFriends_args__isset() : snsIdType(false), snsAccessToken(false), startIdx(false), limit(false) {}
  bool snsIdType :1;
  bool snsAccessToken :1;
  bool startIdx :1;
  bool limit :1;
} _SnsAdaptorService_getSnsFriends_args__isset;

class SnsAdaptorService_getSnsFriends_args {
 public:

  SnsAdaptorService_getSnsFriends_args(const SnsAdaptorService_getSnsFriends_args&);
  SnsAdaptorService_getSnsFriends_args& operator=(const SnsAdaptorService_getSnsFriends_args&);
  SnsAdaptorService_getSnsFriends_args() : snsIdType((SnsIdType::type)0), snsAccessToken(), startIdx(0), limit(0) {
  }

  virtual ~SnsAdaptorService_getSnsFriends_args() noexcept;
  SnsIdType::type snsIdType;
  std::string snsAccessToken;
  int32_t startIdx;
  int32_t limit;

  _SnsAdaptorService_getSnsFriends_args__isset __isset;

  void __set_snsIdType(const SnsIdType::type val);

  void __set_snsAccessToken(const std::string& val);

  void __set_startIdx(const int32_t val);

  void __set_limit(const int32_t val);

  bool operator == (const SnsAdaptorService_getSnsFriends_args & rhs) const
  {
    if (!(snsIdType == rhs.snsIdType))
      return false;
    if (!(snsAccessToken == rhs.snsAccessToken))
      return false;
    if (!(startIdx == rhs.startIdx))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const SnsAdaptorService_getSnsFriends_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnsAdaptorService_getSnsFriends_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnsAdaptorService_getSnsFriends_pargs {
 public:


  virtual ~SnsAdaptorService_getSnsFriends_pargs() noexcept;
  const SnsIdType::type* snsIdType;
  const std::string* snsAccessToken;
  const int32_t* startIdx;
  const int32_t* limit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnsAdaptorService_getSnsFriends_result__isset {
  _SnsAdaptorService_getSnsFriends_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _SnsAdaptorService_getSnsFriends_result__isset;

class SnsAdaptorService_getSnsFriends_result {
 public:

  SnsAdaptorService_getSnsFriends_result(const SnsAdaptorService_getSnsFriends_result&);
  SnsAdaptorService_getSnsFriends_result& operator=(const SnsAdaptorService_getSnsFriends_result&);
  SnsAdaptorService_getSnsFriends_result() {
  }

  virtual ~SnsAdaptorService_getSnsFriends_result() noexcept;
  SnsFriends success;
  TalkException e;

  _SnsAdaptorService_getSnsFriends_result__isset __isset;

  void __set_success(const SnsFriends& val);

  void __set_e(const TalkException& val);

  bool operator == (const SnsAdaptorService_getSnsFriends_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const SnsAdaptorService_getSnsFriends_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnsAdaptorService_getSnsFriends_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnsAdaptorService_getSnsFriends_presult__isset {
  _SnsAdaptorService_getSnsFriends_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _SnsAdaptorService_getSnsFriends_presult__isset;

class SnsAdaptorService_getSnsFriends_presult {
 public:


  virtual ~SnsAdaptorService_getSnsFriends_presult() noexcept;
  SnsFriends* success;
  TalkException e;

  _SnsAdaptorService_getSnsFriends_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnsAdaptorService_getSnsMyProfile_args__isset {
  _SnsAdaptorService_getSnsMyProfile_args__isset() : snsIdType(false), snsAccessToken(false) {}
  bool snsIdType :1;
  bool snsAccessToken :1;
} _SnsAdaptorService_getSnsMyProfile_args__isset;

class SnsAdaptorService_getSnsMyProfile_args {
 public:

  SnsAdaptorService_getSnsMyProfile_args(const SnsAdaptorService_getSnsMyProfile_args&);
  SnsAdaptorService_getSnsMyProfile_args& operator=(const SnsAdaptorService_getSnsMyProfile_args&);
  SnsAdaptorService_getSnsMyProfile_args() : snsIdType((SnsIdType::type)0), snsAccessToken() {
  }

  virtual ~SnsAdaptorService_getSnsMyProfile_args() noexcept;
  SnsIdType::type snsIdType;
  std::string snsAccessToken;

  _SnsAdaptorService_getSnsMyProfile_args__isset __isset;

  void __set_snsIdType(const SnsIdType::type val);

  void __set_snsAccessToken(const std::string& val);

  bool operator == (const SnsAdaptorService_getSnsMyProfile_args & rhs) const
  {
    if (!(snsIdType == rhs.snsIdType))
      return false;
    if (!(snsAccessToken == rhs.snsAccessToken))
      return false;
    return true;
  }
  bool operator != (const SnsAdaptorService_getSnsMyProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnsAdaptorService_getSnsMyProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnsAdaptorService_getSnsMyProfile_pargs {
 public:


  virtual ~SnsAdaptorService_getSnsMyProfile_pargs() noexcept;
  const SnsIdType::type* snsIdType;
  const std::string* snsAccessToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnsAdaptorService_getSnsMyProfile_result__isset {
  _SnsAdaptorService_getSnsMyProfile_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _SnsAdaptorService_getSnsMyProfile_result__isset;

class SnsAdaptorService_getSnsMyProfile_result {
 public:

  SnsAdaptorService_getSnsMyProfile_result(const SnsAdaptorService_getSnsMyProfile_result&);
  SnsAdaptorService_getSnsMyProfile_result& operator=(const SnsAdaptorService_getSnsMyProfile_result&);
  SnsAdaptorService_getSnsMyProfile_result() {
  }

  virtual ~SnsAdaptorService_getSnsMyProfile_result() noexcept;
  SnsProfile success;
  TalkException e;

  _SnsAdaptorService_getSnsMyProfile_result__isset __isset;

  void __set_success(const SnsProfile& val);

  void __set_e(const TalkException& val);

  bool operator == (const SnsAdaptorService_getSnsMyProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const SnsAdaptorService_getSnsMyProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnsAdaptorService_getSnsMyProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnsAdaptorService_getSnsMyProfile_presult__isset {
  _SnsAdaptorService_getSnsMyProfile_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _SnsAdaptorService_getSnsMyProfile_presult__isset;

class SnsAdaptorService_getSnsMyProfile_presult {
 public:


  virtual ~SnsAdaptorService_getSnsMyProfile_presult() noexcept;
  SnsProfile* success;
  TalkException e;

  _SnsAdaptorService_getSnsMyProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnsAdaptorService_postSnsInvitationMessage_args__isset {
  _SnsAdaptorService_postSnsInvitationMessage_args__isset() : snsIdType(false), snsAccessToken(false), toSnsUserId(false) {}
  bool snsIdType :1;
  bool snsAccessToken :1;
  bool toSnsUserId :1;
} _SnsAdaptorService_postSnsInvitationMessage_args__isset;

class SnsAdaptorService_postSnsInvitationMessage_args {
 public:

  SnsAdaptorService_postSnsInvitationMessage_args(const SnsAdaptorService_postSnsInvitationMessage_args&);
  SnsAdaptorService_postSnsInvitationMessage_args& operator=(const SnsAdaptorService_postSnsInvitationMessage_args&);
  SnsAdaptorService_postSnsInvitationMessage_args() : snsIdType((SnsIdType::type)0), snsAccessToken(), toSnsUserId() {
  }

  virtual ~SnsAdaptorService_postSnsInvitationMessage_args() noexcept;
  SnsIdType::type snsIdType;
  std::string snsAccessToken;
  std::string toSnsUserId;

  _SnsAdaptorService_postSnsInvitationMessage_args__isset __isset;

  void __set_snsIdType(const SnsIdType::type val);

  void __set_snsAccessToken(const std::string& val);

  void __set_toSnsUserId(const std::string& val);

  bool operator == (const SnsAdaptorService_postSnsInvitationMessage_args & rhs) const
  {
    if (!(snsIdType == rhs.snsIdType))
      return false;
    if (!(snsAccessToken == rhs.snsAccessToken))
      return false;
    if (!(toSnsUserId == rhs.toSnsUserId))
      return false;
    return true;
  }
  bool operator != (const SnsAdaptorService_postSnsInvitationMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnsAdaptorService_postSnsInvitationMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnsAdaptorService_postSnsInvitationMessage_pargs {
 public:


  virtual ~SnsAdaptorService_postSnsInvitationMessage_pargs() noexcept;
  const SnsIdType::type* snsIdType;
  const std::string* snsAccessToken;
  const std::string* toSnsUserId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnsAdaptorService_postSnsInvitationMessage_result__isset {
  _SnsAdaptorService_postSnsInvitationMessage_result__isset() : e(false) {}
  bool e :1;
} _SnsAdaptorService_postSnsInvitationMessage_result__isset;

class SnsAdaptorService_postSnsInvitationMessage_result {
 public:

  SnsAdaptorService_postSnsInvitationMessage_result(const SnsAdaptorService_postSnsInvitationMessage_result&);
  SnsAdaptorService_postSnsInvitationMessage_result& operator=(const SnsAdaptorService_postSnsInvitationMessage_result&);
  SnsAdaptorService_postSnsInvitationMessage_result() {
  }

  virtual ~SnsAdaptorService_postSnsInvitationMessage_result() noexcept;
  TalkException e;

  _SnsAdaptorService_postSnsInvitationMessage_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const SnsAdaptorService_postSnsInvitationMessage_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const SnsAdaptorService_postSnsInvitationMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnsAdaptorService_postSnsInvitationMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnsAdaptorService_postSnsInvitationMessage_presult__isset {
  _SnsAdaptorService_postSnsInvitationMessage_presult__isset() : e(false) {}
  bool e :1;
} _SnsAdaptorService_postSnsInvitationMessage_presult__isset;

class SnsAdaptorService_postSnsInvitationMessage_presult {
 public:


  virtual ~SnsAdaptorService_postSnsInvitationMessage_presult() noexcept;
  TalkException e;

  _SnsAdaptorService_postSnsInvitationMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SnsAdaptorServiceClient : virtual public SnsAdaptorServiceIf {
 public:
  SnsAdaptorServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SnsAdaptorServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getSnsFriends(SnsFriends& _return, const SnsIdType::type snsIdType, const std::string& snsAccessToken, const int32_t startIdx, const int32_t limit);
  void send_getSnsFriends(const SnsIdType::type snsIdType, const std::string& snsAccessToken, const int32_t startIdx, const int32_t limit);
  void recv_getSnsFriends(SnsFriends& _return);
  void getSnsMyProfile(SnsProfile& _return, const SnsIdType::type snsIdType, const std::string& snsAccessToken);
  void send_getSnsMyProfile(const SnsIdType::type snsIdType, const std::string& snsAccessToken);
  void recv_getSnsMyProfile(SnsProfile& _return);
  void postSnsInvitationMessage(const SnsIdType::type snsIdType, const std::string& snsAccessToken, const std::string& toSnsUserId);
  void send_postSnsInvitationMessage(const SnsIdType::type snsIdType, const std::string& snsAccessToken, const std::string& toSnsUserId);
  void recv_postSnsInvitationMessage();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SnsAdaptorServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<SnsAdaptorServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SnsAdaptorServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getSnsFriends(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSnsMyProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postSnsInvitationMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SnsAdaptorServiceProcessor(::std::shared_ptr<SnsAdaptorServiceIf> iface) :
    iface_(iface) {
    processMap_["getSnsFriends"] = &SnsAdaptorServiceProcessor::process_getSnsFriends;
    processMap_["getSnsMyProfile"] = &SnsAdaptorServiceProcessor::process_getSnsMyProfile;
    processMap_["postSnsInvitationMessage"] = &SnsAdaptorServiceProcessor::process_postSnsInvitationMessage;
  }

  virtual ~SnsAdaptorServiceProcessor() {}
};

class SnsAdaptorServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SnsAdaptorServiceProcessorFactory(const ::std::shared_ptr< SnsAdaptorServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< SnsAdaptorServiceIfFactory > handlerFactory_;
};

class SnsAdaptorServiceMultiface : virtual public SnsAdaptorServiceIf {
 public:
  SnsAdaptorServiceMultiface(std::vector<std::shared_ptr<SnsAdaptorServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SnsAdaptorServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<SnsAdaptorServiceIf> > ifaces_;
  SnsAdaptorServiceMultiface() {}
  void add(::std::shared_ptr<SnsAdaptorServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getSnsFriends(SnsFriends& _return, const SnsIdType::type snsIdType, const std::string& snsAccessToken, const int32_t startIdx, const int32_t limit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSnsFriends(_return, snsIdType, snsAccessToken, startIdx, limit);
    }
    ifaces_[i]->getSnsFriends(_return, snsIdType, snsAccessToken, startIdx, limit);
    return;
  }

  void getSnsMyProfile(SnsProfile& _return, const SnsIdType::type snsIdType, const std::string& snsAccessToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSnsMyProfile(_return, snsIdType, snsAccessToken);
    }
    ifaces_[i]->getSnsMyProfile(_return, snsIdType, snsAccessToken);
    return;
  }

  void postSnsInvitationMessage(const SnsIdType::type snsIdType, const std::string& snsAccessToken, const std::string& toSnsUserId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postSnsInvitationMessage(snsIdType, snsAccessToken, toSnsUserId);
    }
    ifaces_[i]->postSnsInvitationMessage(snsIdType, snsAccessToken, toSnsUserId);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class SnsAdaptorServiceConcurrentClient : virtual public SnsAdaptorServiceIf {
 public:
  SnsAdaptorServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  SnsAdaptorServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getSnsFriends(SnsFriends& _return, const SnsIdType::type snsIdType, const std::string& snsAccessToken, const int32_t startIdx, const int32_t limit);
  int32_t send_getSnsFriends(const SnsIdType::type snsIdType, const std::string& snsAccessToken, const int32_t startIdx, const int32_t limit);
  void recv_getSnsFriends(SnsFriends& _return, const int32_t seqid);
  void getSnsMyProfile(SnsProfile& _return, const SnsIdType::type snsIdType, const std::string& snsAccessToken);
  int32_t send_getSnsMyProfile(const SnsIdType::type snsIdType, const std::string& snsAccessToken);
  void recv_getSnsMyProfile(SnsProfile& _return, const int32_t seqid);
  void postSnsInvitationMessage(const SnsIdType::type snsIdType, const std::string& snsAccessToken, const std::string& toSnsUserId);
  int32_t send_postSnsInvitationMessage(const SnsIdType::type snsIdType, const std::string& snsAccessToken, const std::string& toSnsUserId);
  void recv_postSnsInvitationMessage(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
