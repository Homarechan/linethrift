/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SpotService_H
#define SpotService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "line_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class SpotServiceIf {
 public:
  virtual ~SpotServiceIf() {}
  virtual void lookupByPhoneNumber(SpotPhoneNumberResponse& _return, const std::string& countryAreaCode, const std::string& phoneNumber) = 0;
  virtual void lookupNearby(SpotNearbyResponse& _return, const Location& location, const SpotCategory::type category, const std::string& query, const std::string& countryAreaCode) = 0;
};

class SpotServiceIfFactory {
 public:
  typedef SpotServiceIf Handler;

  virtual ~SpotServiceIfFactory() {}

  virtual SpotServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SpotServiceIf* /* handler */) = 0;
};

class SpotServiceIfSingletonFactory : virtual public SpotServiceIfFactory {
 public:
  SpotServiceIfSingletonFactory(const ::std::shared_ptr<SpotServiceIf>& iface) : iface_(iface) {}
  virtual ~SpotServiceIfSingletonFactory() {}

  virtual SpotServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SpotServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<SpotServiceIf> iface_;
};

class SpotServiceNull : virtual public SpotServiceIf {
 public:
  virtual ~SpotServiceNull() {}
  void lookupByPhoneNumber(SpotPhoneNumberResponse& /* _return */, const std::string& /* countryAreaCode */, const std::string& /* phoneNumber */) {
    return;
  }
  void lookupNearby(SpotNearbyResponse& /* _return */, const Location& /* location */, const SpotCategory::type /* category */, const std::string& /* query */, const std::string& /* countryAreaCode */) {
    return;
  }
};

typedef struct _SpotService_lookupByPhoneNumber_args__isset {
  _SpotService_lookupByPhoneNumber_args__isset() : countryAreaCode(false), phoneNumber(false) {}
  bool countryAreaCode :1;
  bool phoneNumber :1;
} _SpotService_lookupByPhoneNumber_args__isset;

class SpotService_lookupByPhoneNumber_args {
 public:

  SpotService_lookupByPhoneNumber_args(const SpotService_lookupByPhoneNumber_args&);
  SpotService_lookupByPhoneNumber_args& operator=(const SpotService_lookupByPhoneNumber_args&);
  SpotService_lookupByPhoneNumber_args() : countryAreaCode(), phoneNumber() {
  }

  virtual ~SpotService_lookupByPhoneNumber_args() noexcept;
  std::string countryAreaCode;
  std::string phoneNumber;

  _SpotService_lookupByPhoneNumber_args__isset __isset;

  void __set_countryAreaCode(const std::string& val);

  void __set_phoneNumber(const std::string& val);

  bool operator == (const SpotService_lookupByPhoneNumber_args & rhs) const
  {
    if (!(countryAreaCode == rhs.countryAreaCode))
      return false;
    if (!(phoneNumber == rhs.phoneNumber))
      return false;
    return true;
  }
  bool operator != (const SpotService_lookupByPhoneNumber_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SpotService_lookupByPhoneNumber_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SpotService_lookupByPhoneNumber_pargs {
 public:


  virtual ~SpotService_lookupByPhoneNumber_pargs() noexcept;
  const std::string* countryAreaCode;
  const std::string* phoneNumber;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SpotService_lookupByPhoneNumber_result__isset {
  _SpotService_lookupByPhoneNumber_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _SpotService_lookupByPhoneNumber_result__isset;

class SpotService_lookupByPhoneNumber_result {
 public:

  SpotService_lookupByPhoneNumber_result(const SpotService_lookupByPhoneNumber_result&);
  SpotService_lookupByPhoneNumber_result& operator=(const SpotService_lookupByPhoneNumber_result&);
  SpotService_lookupByPhoneNumber_result() {
  }

  virtual ~SpotService_lookupByPhoneNumber_result() noexcept;
  SpotPhoneNumberResponse success;
  TalkException e;

  _SpotService_lookupByPhoneNumber_result__isset __isset;

  void __set_success(const SpotPhoneNumberResponse& val);

  void __set_e(const TalkException& val);

  bool operator == (const SpotService_lookupByPhoneNumber_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const SpotService_lookupByPhoneNumber_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SpotService_lookupByPhoneNumber_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SpotService_lookupByPhoneNumber_presult__isset {
  _SpotService_lookupByPhoneNumber_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _SpotService_lookupByPhoneNumber_presult__isset;

class SpotService_lookupByPhoneNumber_presult {
 public:


  virtual ~SpotService_lookupByPhoneNumber_presult() noexcept;
  SpotPhoneNumberResponse* success;
  TalkException e;

  _SpotService_lookupByPhoneNumber_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SpotService_lookupNearby_args__isset {
  _SpotService_lookupNearby_args__isset() : location(false), category(false), query(false), countryAreaCode(false) {}
  bool location :1;
  bool category :1;
  bool query :1;
  bool countryAreaCode :1;
} _SpotService_lookupNearby_args__isset;

class SpotService_lookupNearby_args {
 public:

  SpotService_lookupNearby_args(const SpotService_lookupNearby_args&);
  SpotService_lookupNearby_args& operator=(const SpotService_lookupNearby_args&);
  SpotService_lookupNearby_args() : category((SpotCategory::type)0), query(), countryAreaCode() {
  }

  virtual ~SpotService_lookupNearby_args() noexcept;
  Location location;
  SpotCategory::type category;
  std::string query;
  std::string countryAreaCode;

  _SpotService_lookupNearby_args__isset __isset;

  void __set_location(const Location& val);

  void __set_category(const SpotCategory::type val);

  void __set_query(const std::string& val);

  void __set_countryAreaCode(const std::string& val);

  bool operator == (const SpotService_lookupNearby_args & rhs) const
  {
    if (!(location == rhs.location))
      return false;
    if (!(category == rhs.category))
      return false;
    if (!(query == rhs.query))
      return false;
    if (!(countryAreaCode == rhs.countryAreaCode))
      return false;
    return true;
  }
  bool operator != (const SpotService_lookupNearby_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SpotService_lookupNearby_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SpotService_lookupNearby_pargs {
 public:


  virtual ~SpotService_lookupNearby_pargs() noexcept;
  const Location* location;
  const SpotCategory::type* category;
  const std::string* query;
  const std::string* countryAreaCode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SpotService_lookupNearby_result__isset {
  _SpotService_lookupNearby_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _SpotService_lookupNearby_result__isset;

class SpotService_lookupNearby_result {
 public:

  SpotService_lookupNearby_result(const SpotService_lookupNearby_result&);
  SpotService_lookupNearby_result& operator=(const SpotService_lookupNearby_result&);
  SpotService_lookupNearby_result() {
  }

  virtual ~SpotService_lookupNearby_result() noexcept;
  SpotNearbyResponse success;
  TalkException e;

  _SpotService_lookupNearby_result__isset __isset;

  void __set_success(const SpotNearbyResponse& val);

  void __set_e(const TalkException& val);

  bool operator == (const SpotService_lookupNearby_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const SpotService_lookupNearby_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SpotService_lookupNearby_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SpotService_lookupNearby_presult__isset {
  _SpotService_lookupNearby_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _SpotService_lookupNearby_presult__isset;

class SpotService_lookupNearby_presult {
 public:


  virtual ~SpotService_lookupNearby_presult() noexcept;
  SpotNearbyResponse* success;
  TalkException e;

  _SpotService_lookupNearby_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SpotServiceClient : virtual public SpotServiceIf {
 public:
  SpotServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SpotServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void lookupByPhoneNumber(SpotPhoneNumberResponse& _return, const std::string& countryAreaCode, const std::string& phoneNumber);
  void send_lookupByPhoneNumber(const std::string& countryAreaCode, const std::string& phoneNumber);
  void recv_lookupByPhoneNumber(SpotPhoneNumberResponse& _return);
  void lookupNearby(SpotNearbyResponse& _return, const Location& location, const SpotCategory::type category, const std::string& query, const std::string& countryAreaCode);
  void send_lookupNearby(const Location& location, const SpotCategory::type category, const std::string& query, const std::string& countryAreaCode);
  void recv_lookupNearby(SpotNearbyResponse& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SpotServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<SpotServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SpotServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_lookupByPhoneNumber(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_lookupNearby(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SpotServiceProcessor(::std::shared_ptr<SpotServiceIf> iface) :
    iface_(iface) {
    processMap_["lookupByPhoneNumber"] = &SpotServiceProcessor::process_lookupByPhoneNumber;
    processMap_["lookupNearby"] = &SpotServiceProcessor::process_lookupNearby;
  }

  virtual ~SpotServiceProcessor() {}
};

class SpotServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SpotServiceProcessorFactory(const ::std::shared_ptr< SpotServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< SpotServiceIfFactory > handlerFactory_;
};

class SpotServiceMultiface : virtual public SpotServiceIf {
 public:
  SpotServiceMultiface(std::vector<std::shared_ptr<SpotServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SpotServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<SpotServiceIf> > ifaces_;
  SpotServiceMultiface() {}
  void add(::std::shared_ptr<SpotServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void lookupByPhoneNumber(SpotPhoneNumberResponse& _return, const std::string& countryAreaCode, const std::string& phoneNumber) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->lookupByPhoneNumber(_return, countryAreaCode, phoneNumber);
    }
    ifaces_[i]->lookupByPhoneNumber(_return, countryAreaCode, phoneNumber);
    return;
  }

  void lookupNearby(SpotNearbyResponse& _return, const Location& location, const SpotCategory::type category, const std::string& query, const std::string& countryAreaCode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->lookupNearby(_return, location, category, query, countryAreaCode);
    }
    ifaces_[i]->lookupNearby(_return, location, category, query, countryAreaCode);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class SpotServiceConcurrentClient : virtual public SpotServiceIf {
 public:
  SpotServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  SpotServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void lookupByPhoneNumber(SpotPhoneNumberResponse& _return, const std::string& countryAreaCode, const std::string& phoneNumber);
  int32_t send_lookupByPhoneNumber(const std::string& countryAreaCode, const std::string& phoneNumber);
  void recv_lookupByPhoneNumber(SpotPhoneNumberResponse& _return, const int32_t seqid);
  void lookupNearby(SpotNearbyResponse& _return, const Location& location, const SpotCategory::type category, const std::string& query, const std::string& countryAreaCode);
  int32_t send_lookupNearby(const Location& location, const SpotCategory::type category, const std::string& query, const std::string& countryAreaCode);
  void recv_lookupNearby(SpotNearbyResponse& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
