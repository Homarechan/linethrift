// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ShopService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class ShopServiceHandler : virtual public ShopServiceIf {
 public:
  ShopServiceHandler() {
    // Your initialization goes here
  }

  void buyCoinProduct(const PaymentReservation& paymentReservation) {
    // Your implementation goes here
    printf("buyCoinProduct\n");
  }

  void buyFreeProduct(const std::string& receiverMid, const std::string& productId, const int32_t messageTemplate, const std::string& language, const std::string& country, const int64_t packageId) {
    // Your implementation goes here
    printf("buyFreeProduct\n");
  }

  void buyMustbuyProduct(const std::string& receiverMid, const std::string& productId, const int32_t messageTemplate, const std::string& language, const std::string& country, const int64_t packageId, const std::string& serialNumber) {
    // Your implementation goes here
    printf("buyMustbuyProduct\n");
  }

  void checkCanReceivePresent(const std::string& recipientMid, const int64_t packageId, const std::string& language, const std::string& country) {
    // Your implementation goes here
    printf("checkCanReceivePresent\n");
  }

  void getActivePurchases(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country) {
    // Your implementation goes here
    printf("getActivePurchases\n");
  }

  void getActivePurchaseVersions(ProductSimpleList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country) {
    // Your implementation goes here
    printf("getActivePurchaseVersions\n");
  }

  void getCoinProducts(std::vector<CoinProductItem> & _return, const PaymentType::type appStoreCode, const std::string& country, const std::string& language) {
    // Your implementation goes here
    printf("getCoinProducts\n");
  }

  void getCoinProductsByPgCode(std::vector<CoinProductItem> & _return, const PaymentType::type appStoreCode, const PaymentPgType::type pgCode, const std::string& country, const std::string& language) {
    // Your implementation goes here
    printf("getCoinProductsByPgCode\n");
  }

  void getCoinPurchaseHistory(CoinHistoryResult& _return, const CoinHistoryCondition& request) {
    // Your implementation goes here
    printf("getCoinPurchaseHistory\n");
  }

  void getCoinUseAndRefundHistory(CoinHistoryResult& _return, const CoinHistoryCondition& request) {
    // Your implementation goes here
    printf("getCoinUseAndRefundHistory\n");
  }

  void getDownloads(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country) {
    // Your implementation goes here
    printf("getDownloads\n");
  }

  void getEventPackages(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country) {
    // Your implementation goes here
    printf("getEventPackages\n");
  }

  void getNewlyReleasedPackages(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country) {
    // Your implementation goes here
    printf("getNewlyReleasedPackages\n");
  }

  void getPopularPackages(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country) {
    // Your implementation goes here
    printf("getPopularPackages\n");
  }

  void getPresentsReceived(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country) {
    // Your implementation goes here
    printf("getPresentsReceived\n");
  }

  void getPresentsSent(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country) {
    // Your implementation goes here
    printf("getPresentsSent\n");
  }

  void getProduct(Product& _return, const int64_t packageID, const std::string& language, const std::string& country) {
    // Your implementation goes here
    printf("getProduct\n");
  }

  void getProductList(ProductList& _return, const std::vector<std::string> & productIdList, const std::string& language, const std::string& country) {
    // Your implementation goes here
    printf("getProductList\n");
  }

  void getProductListWithCarrier(ProductList& _return, const std::vector<std::string> & productIdList, const std::string& language, const std::string& country, const std::string& carrierCode) {
    // Your implementation goes here
    printf("getProductListWithCarrier\n");
  }

  void getProductWithCarrier(Product& _return, const int64_t packageID, const std::string& language, const std::string& country, const std::string& carrierCode) {
    // Your implementation goes here
    printf("getProductWithCarrier\n");
  }

  void getPurchaseHistory(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country) {
    // Your implementation goes here
    printf("getPurchaseHistory\n");
  }

  void getTotalBalance(Coin& _return, const PaymentType::type appStoreCode) {
    // Your implementation goes here
    printf("getTotalBalance\n");
  }

  int64_t notifyDownloaded(const int64_t packageId, const std::string& language) {
    // Your implementation goes here
    printf("notifyDownloaded\n");
  }

  void reserveCoinPurchase(PaymentReservationResult& _return, const CoinPurchaseReservation& request) {
    // Your implementation goes here
    printf("reserveCoinPurchase\n");
  }

  void reservePayment(PaymentReservationResult& _return, const PaymentReservation& paymentReservation) {
    // Your implementation goes here
    printf("reservePayment\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::apache::thrift::stdcxx::shared_ptr<ShopServiceHandler> handler(new ShopServiceHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new ShopServiceProcessor(handler));
  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

