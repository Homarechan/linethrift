// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "AgeCheckService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class AgeCheckServiceHandler : virtual public AgeCheckServiceIf {
 public:
  AgeCheckServiceHandler() {
    // Your initialization goes here
  }

  UserAgeType::type checkUserAge(const CarrierCode::type carrier, const std::string& sessionId, const std::string& verifier, const int32_t standardAge) {
    // Your implementation goes here
    printf("checkUserAge\n");
  }

  void checkUserAgeWithDocomo(AgeCheckDocomoResult& _return, const std::string& openIdRedirectUrl, const int32_t standardAge, const std::string& verifier) {
    // Your implementation goes here
    printf("checkUserAgeWithDocomo\n");
  }

  void retrieveOpenIdAuthUrlWithDocomo(std::string& _return) {
    // Your implementation goes here
    printf("retrieveOpenIdAuthUrlWithDocomo\n");
  }

  void retrieveRequestToken(AgeCheckRequestResult& _return, const CarrierCode::type carrier) {
    // Your implementation goes here
    printf("retrieveRequestToken\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::apache::thrift::stdcxx::shared_ptr<AgeCheckServiceHandler> handler(new AgeCheckServiceHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new AgeCheckServiceProcessor(handler));
  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

