/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "AccountSupervisorService.h"




AccountSupervisorService_getRSAKey_args::~AccountSupervisorService_getRSAKey_args() noexcept {
}


uint32_t AccountSupervisorService_getRSAKey_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AccountSupervisorService_getRSAKey_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AccountSupervisorService_getRSAKey_args");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


AccountSupervisorService_getRSAKey_pargs::~AccountSupervisorService_getRSAKey_pargs() noexcept {
}


uint32_t AccountSupervisorService_getRSAKey_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AccountSupervisorService_getRSAKey_pargs");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


AccountSupervisorService_getRSAKey_result::~AccountSupervisorService_getRSAKey_result() noexcept {
}


uint32_t AccountSupervisorService_getRSAKey_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->e.read(iprot);
          this->__isset.e = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AccountSupervisorService_getRSAKey_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("AccountSupervisorService_getRSAKey_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.e) {
    xfer += oprot->writeFieldBegin("e", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->e.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


AccountSupervisorService_getRSAKey_presult::~AccountSupervisorService_getRSAKey_presult() noexcept {
}


uint32_t AccountSupervisorService_getRSAKey_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->e.read(iprot);
          this->__isset.e = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


AccountSupervisorService_notifyEmailConfirmationResult_args::~AccountSupervisorService_notifyEmailConfirmationResult_args() noexcept {
}


uint32_t AccountSupervisorService_notifyEmailConfirmationResult_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->parameterMap.clear();
            uint32_t _size1634;
            ::apache::thrift::protocol::TType _ktype1635;
            ::apache::thrift::protocol::TType _vtype1636;
            xfer += iprot->readMapBegin(_ktype1635, _vtype1636, _size1634);
            uint32_t _i1638;
            for (_i1638 = 0; _i1638 < _size1634; ++_i1638)
            {
              std::string _key1639;
              xfer += iprot->readString(_key1639);
              std::string& _val1640 = this->parameterMap[_key1639];
              xfer += iprot->readString(_val1640);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.parameterMap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AccountSupervisorService_notifyEmailConfirmationResult_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AccountSupervisorService_notifyEmailConfirmationResult_args");

  xfer += oprot->writeFieldBegin("parameterMap", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->parameterMap.size()));
    std::map<std::string, std::string> ::const_iterator _iter1641;
    for (_iter1641 = this->parameterMap.begin(); _iter1641 != this->parameterMap.end(); ++_iter1641)
    {
      xfer += oprot->writeString(_iter1641->first);
      xfer += oprot->writeString(_iter1641->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


AccountSupervisorService_notifyEmailConfirmationResult_pargs::~AccountSupervisorService_notifyEmailConfirmationResult_pargs() noexcept {
}


uint32_t AccountSupervisorService_notifyEmailConfirmationResult_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AccountSupervisorService_notifyEmailConfirmationResult_pargs");

  xfer += oprot->writeFieldBegin("parameterMap", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->parameterMap)).size()));
    std::map<std::string, std::string> ::const_iterator _iter1642;
    for (_iter1642 = (*(this->parameterMap)).begin(); _iter1642 != (*(this->parameterMap)).end(); ++_iter1642)
    {
      xfer += oprot->writeString(_iter1642->first);
      xfer += oprot->writeString(_iter1642->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


AccountSupervisorService_notifyEmailConfirmationResult_result::~AccountSupervisorService_notifyEmailConfirmationResult_result() noexcept {
}


uint32_t AccountSupervisorService_notifyEmailConfirmationResult_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->e.read(iprot);
          this->__isset.e = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AccountSupervisorService_notifyEmailConfirmationResult_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("AccountSupervisorService_notifyEmailConfirmationResult_result");

  if (this->__isset.e) {
    xfer += oprot->writeFieldBegin("e", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->e.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


AccountSupervisorService_notifyEmailConfirmationResult_presult::~AccountSupervisorService_notifyEmailConfirmationResult_presult() noexcept {
}


uint32_t AccountSupervisorService_notifyEmailConfirmationResult_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->e.read(iprot);
          this->__isset.e = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


AccountSupervisorService_registerVirtualAccount_args::~AccountSupervisorService_registerVirtualAccount_args() noexcept {
}


uint32_t AccountSupervisorService_registerVirtualAccount_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->locale);
          this->__isset.locale = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->encryptedVirtualUserId);
          this->__isset.encryptedVirtualUserId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->encryptedPassword);
          this->__isset.encryptedPassword = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AccountSupervisorService_registerVirtualAccount_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AccountSupervisorService_registerVirtualAccount_args");

  xfer += oprot->writeFieldBegin("locale", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->locale);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("encryptedVirtualUserId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->encryptedVirtualUserId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("encryptedPassword", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->encryptedPassword);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


AccountSupervisorService_registerVirtualAccount_pargs::~AccountSupervisorService_registerVirtualAccount_pargs() noexcept {
}


uint32_t AccountSupervisorService_registerVirtualAccount_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AccountSupervisorService_registerVirtualAccount_pargs");

  xfer += oprot->writeFieldBegin("locale", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString((*(this->locale)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("encryptedVirtualUserId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString((*(this->encryptedVirtualUserId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("encryptedPassword", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString((*(this->encryptedPassword)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


AccountSupervisorService_registerVirtualAccount_result::~AccountSupervisorService_registerVirtualAccount_result() noexcept {
}


uint32_t AccountSupervisorService_registerVirtualAccount_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->e.read(iprot);
          this->__isset.e = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AccountSupervisorService_registerVirtualAccount_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("AccountSupervisorService_registerVirtualAccount_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRING, 0);
    xfer += oprot->writeString(this->success);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.e) {
    xfer += oprot->writeFieldBegin("e", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->e.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


AccountSupervisorService_registerVirtualAccount_presult::~AccountSupervisorService_registerVirtualAccount_presult() noexcept {
}


uint32_t AccountSupervisorService_registerVirtualAccount_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->e.read(iprot);
          this->__isset.e = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


AccountSupervisorService_requestVirtualAccountPasswordChange_args::~AccountSupervisorService_requestVirtualAccountPasswordChange_args() noexcept {
}


uint32_t AccountSupervisorService_requestVirtualAccountPasswordChange_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->virtualMid);
          this->__isset.virtualMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->encryptedVirtualUserId);
          this->__isset.encryptedVirtualUserId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->encryptedOldPassword);
          this->__isset.encryptedOldPassword = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->encryptedNewPassword);
          this->__isset.encryptedNewPassword = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AccountSupervisorService_requestVirtualAccountPasswordChange_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AccountSupervisorService_requestVirtualAccountPasswordChange_args");

  xfer += oprot->writeFieldBegin("virtualMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->virtualMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("encryptedVirtualUserId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->encryptedVirtualUserId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("encryptedOldPassword", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->encryptedOldPassword);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("encryptedNewPassword", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->encryptedNewPassword);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


AccountSupervisorService_requestVirtualAccountPasswordChange_pargs::~AccountSupervisorService_requestVirtualAccountPasswordChange_pargs() noexcept {
}


uint32_t AccountSupervisorService_requestVirtualAccountPasswordChange_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AccountSupervisorService_requestVirtualAccountPasswordChange_pargs");

  xfer += oprot->writeFieldBegin("virtualMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString((*(this->virtualMid)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("encryptedVirtualUserId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString((*(this->encryptedVirtualUserId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("encryptedOldPassword", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString((*(this->encryptedOldPassword)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("encryptedNewPassword", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString((*(this->encryptedNewPassword)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


AccountSupervisorService_requestVirtualAccountPasswordChange_result::~AccountSupervisorService_requestVirtualAccountPasswordChange_result() noexcept {
}


uint32_t AccountSupervisorService_requestVirtualAccountPasswordChange_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->e.read(iprot);
          this->__isset.e = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AccountSupervisorService_requestVirtualAccountPasswordChange_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("AccountSupervisorService_requestVirtualAccountPasswordChange_result");

  if (this->__isset.e) {
    xfer += oprot->writeFieldBegin("e", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->e.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


AccountSupervisorService_requestVirtualAccountPasswordChange_presult::~AccountSupervisorService_requestVirtualAccountPasswordChange_presult() noexcept {
}


uint32_t AccountSupervisorService_requestVirtualAccountPasswordChange_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->e.read(iprot);
          this->__isset.e = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


AccountSupervisorService_requestVirtualAccountPasswordSet_args::~AccountSupervisorService_requestVirtualAccountPasswordSet_args() noexcept {
}


uint32_t AccountSupervisorService_requestVirtualAccountPasswordSet_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->virtualMid);
          this->__isset.virtualMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->encryptedVirtualUserId);
          this->__isset.encryptedVirtualUserId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->encryptedNewPassword);
          this->__isset.encryptedNewPassword = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AccountSupervisorService_requestVirtualAccountPasswordSet_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AccountSupervisorService_requestVirtualAccountPasswordSet_args");

  xfer += oprot->writeFieldBegin("virtualMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->virtualMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("encryptedVirtualUserId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->encryptedVirtualUserId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("encryptedNewPassword", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->encryptedNewPassword);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


AccountSupervisorService_requestVirtualAccountPasswordSet_pargs::~AccountSupervisorService_requestVirtualAccountPasswordSet_pargs() noexcept {
}


uint32_t AccountSupervisorService_requestVirtualAccountPasswordSet_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AccountSupervisorService_requestVirtualAccountPasswordSet_pargs");

  xfer += oprot->writeFieldBegin("virtualMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString((*(this->virtualMid)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("encryptedVirtualUserId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString((*(this->encryptedVirtualUserId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("encryptedNewPassword", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString((*(this->encryptedNewPassword)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


AccountSupervisorService_requestVirtualAccountPasswordSet_result::~AccountSupervisorService_requestVirtualAccountPasswordSet_result() noexcept {
}


uint32_t AccountSupervisorService_requestVirtualAccountPasswordSet_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->e.read(iprot);
          this->__isset.e = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AccountSupervisorService_requestVirtualAccountPasswordSet_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("AccountSupervisorService_requestVirtualAccountPasswordSet_result");

  if (this->__isset.e) {
    xfer += oprot->writeFieldBegin("e", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->e.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


AccountSupervisorService_requestVirtualAccountPasswordSet_presult::~AccountSupervisorService_requestVirtualAccountPasswordSet_presult() noexcept {
}


uint32_t AccountSupervisorService_requestVirtualAccountPasswordSet_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->e.read(iprot);
          this->__isset.e = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


AccountSupervisorService_unregisterVirtualAccount_args::~AccountSupervisorService_unregisterVirtualAccount_args() noexcept {
}


uint32_t AccountSupervisorService_unregisterVirtualAccount_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->virtualMid);
          this->__isset.virtualMid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AccountSupervisorService_unregisterVirtualAccount_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AccountSupervisorService_unregisterVirtualAccount_args");

  xfer += oprot->writeFieldBegin("virtualMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->virtualMid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


AccountSupervisorService_unregisterVirtualAccount_pargs::~AccountSupervisorService_unregisterVirtualAccount_pargs() noexcept {
}


uint32_t AccountSupervisorService_unregisterVirtualAccount_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AccountSupervisorService_unregisterVirtualAccount_pargs");

  xfer += oprot->writeFieldBegin("virtualMid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString((*(this->virtualMid)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


AccountSupervisorService_unregisterVirtualAccount_result::~AccountSupervisorService_unregisterVirtualAccount_result() noexcept {
}


uint32_t AccountSupervisorService_unregisterVirtualAccount_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->e.read(iprot);
          this->__isset.e = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AccountSupervisorService_unregisterVirtualAccount_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("AccountSupervisorService_unregisterVirtualAccount_result");

  if (this->__isset.e) {
    xfer += oprot->writeFieldBegin("e", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->e.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


AccountSupervisorService_unregisterVirtualAccount_presult::~AccountSupervisorService_unregisterVirtualAccount_presult() noexcept {
}


uint32_t AccountSupervisorService_unregisterVirtualAccount_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->e.read(iprot);
          this->__isset.e = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

void AccountSupervisorServiceClient::getRSAKey(RSAKey& _return)
{
  send_getRSAKey();
  recv_getRSAKey(_return);
}

void AccountSupervisorServiceClient::send_getRSAKey()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("getRSAKey", ::apache::thrift::protocol::T_CALL, cseqid);

  AccountSupervisorService_getRSAKey_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AccountSupervisorServiceClient::recv_getRSAKey(RSAKey& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("getRSAKey") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  AccountSupervisorService_getRSAKey_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.e) {
    throw result.e;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getRSAKey failed: unknown result");
}

void AccountSupervisorServiceClient::notifyEmailConfirmationResult(const std::map<std::string, std::string> & parameterMap)
{
  send_notifyEmailConfirmationResult(parameterMap);
  recv_notifyEmailConfirmationResult();
}

void AccountSupervisorServiceClient::send_notifyEmailConfirmationResult(const std::map<std::string, std::string> & parameterMap)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("notifyEmailConfirmationResult", ::apache::thrift::protocol::T_CALL, cseqid);

  AccountSupervisorService_notifyEmailConfirmationResult_pargs args;
  args.parameterMap = &parameterMap;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AccountSupervisorServiceClient::recv_notifyEmailConfirmationResult()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("notifyEmailConfirmationResult") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  AccountSupervisorService_notifyEmailConfirmationResult_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.e) {
    throw result.e;
  }
  return;
}

void AccountSupervisorServiceClient::registerVirtualAccount(std::string& _return, const std::string& locale, const std::string& encryptedVirtualUserId, const std::string& encryptedPassword)
{
  send_registerVirtualAccount(locale, encryptedVirtualUserId, encryptedPassword);
  recv_registerVirtualAccount(_return);
}

void AccountSupervisorServiceClient::send_registerVirtualAccount(const std::string& locale, const std::string& encryptedVirtualUserId, const std::string& encryptedPassword)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("registerVirtualAccount", ::apache::thrift::protocol::T_CALL, cseqid);

  AccountSupervisorService_registerVirtualAccount_pargs args;
  args.locale = &locale;
  args.encryptedVirtualUserId = &encryptedVirtualUserId;
  args.encryptedPassword = &encryptedPassword;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AccountSupervisorServiceClient::recv_registerVirtualAccount(std::string& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("registerVirtualAccount") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  AccountSupervisorService_registerVirtualAccount_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.e) {
    throw result.e;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "registerVirtualAccount failed: unknown result");
}

void AccountSupervisorServiceClient::requestVirtualAccountPasswordChange(const std::string& virtualMid, const std::string& encryptedVirtualUserId, const std::string& encryptedOldPassword, const std::string& encryptedNewPassword)
{
  send_requestVirtualAccountPasswordChange(virtualMid, encryptedVirtualUserId, encryptedOldPassword, encryptedNewPassword);
  recv_requestVirtualAccountPasswordChange();
}

void AccountSupervisorServiceClient::send_requestVirtualAccountPasswordChange(const std::string& virtualMid, const std::string& encryptedVirtualUserId, const std::string& encryptedOldPassword, const std::string& encryptedNewPassword)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("requestVirtualAccountPasswordChange", ::apache::thrift::protocol::T_CALL, cseqid);

  AccountSupervisorService_requestVirtualAccountPasswordChange_pargs args;
  args.virtualMid = &virtualMid;
  args.encryptedVirtualUserId = &encryptedVirtualUserId;
  args.encryptedOldPassword = &encryptedOldPassword;
  args.encryptedNewPassword = &encryptedNewPassword;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AccountSupervisorServiceClient::recv_requestVirtualAccountPasswordChange()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("requestVirtualAccountPasswordChange") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  AccountSupervisorService_requestVirtualAccountPasswordChange_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.e) {
    throw result.e;
  }
  return;
}

void AccountSupervisorServiceClient::requestVirtualAccountPasswordSet(const std::string& virtualMid, const std::string& encryptedVirtualUserId, const std::string& encryptedNewPassword)
{
  send_requestVirtualAccountPasswordSet(virtualMid, encryptedVirtualUserId, encryptedNewPassword);
  recv_requestVirtualAccountPasswordSet();
}

void AccountSupervisorServiceClient::send_requestVirtualAccountPasswordSet(const std::string& virtualMid, const std::string& encryptedVirtualUserId, const std::string& encryptedNewPassword)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("requestVirtualAccountPasswordSet", ::apache::thrift::protocol::T_CALL, cseqid);

  AccountSupervisorService_requestVirtualAccountPasswordSet_pargs args;
  args.virtualMid = &virtualMid;
  args.encryptedVirtualUserId = &encryptedVirtualUserId;
  args.encryptedNewPassword = &encryptedNewPassword;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AccountSupervisorServiceClient::recv_requestVirtualAccountPasswordSet()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("requestVirtualAccountPasswordSet") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  AccountSupervisorService_requestVirtualAccountPasswordSet_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.e) {
    throw result.e;
  }
  return;
}

void AccountSupervisorServiceClient::unregisterVirtualAccount(const std::string& virtualMid)
{
  send_unregisterVirtualAccount(virtualMid);
  recv_unregisterVirtualAccount();
}

void AccountSupervisorServiceClient::send_unregisterVirtualAccount(const std::string& virtualMid)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("unregisterVirtualAccount", ::apache::thrift::protocol::T_CALL, cseqid);

  AccountSupervisorService_unregisterVirtualAccount_pargs args;
  args.virtualMid = &virtualMid;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void AccountSupervisorServiceClient::recv_unregisterVirtualAccount()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("unregisterVirtualAccount") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  AccountSupervisorService_unregisterVirtualAccount_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.e) {
    throw result.e;
  }
  return;
}

bool AccountSupervisorServiceProcessor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) {
  ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(::apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    ::apache::thrift::TApplicationException x(::apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '"+fname+"'");
    oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }
  (this->*(pfn->second))(seqid, iprot, oprot, callContext);
  return true;
}

void AccountSupervisorServiceProcessor::process_getRSAKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("AccountSupervisorService.getRSAKey", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "AccountSupervisorService.getRSAKey");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "AccountSupervisorService.getRSAKey");
  }

  AccountSupervisorService_getRSAKey_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "AccountSupervisorService.getRSAKey", bytes);
  }

  AccountSupervisorService_getRSAKey_result result;
  try {
    iface_->getRSAKey(result.success);
    result.__isset.success = true;
  } catch (TalkException &e) {
    result.e = e;
    result.__isset.e = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "AccountSupervisorService.getRSAKey");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("getRSAKey", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "AccountSupervisorService.getRSAKey");
  }

  oprot->writeMessageBegin("getRSAKey", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "AccountSupervisorService.getRSAKey", bytes);
  }
}

void AccountSupervisorServiceProcessor::process_notifyEmailConfirmationResult(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("AccountSupervisorService.notifyEmailConfirmationResult", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "AccountSupervisorService.notifyEmailConfirmationResult");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "AccountSupervisorService.notifyEmailConfirmationResult");
  }

  AccountSupervisorService_notifyEmailConfirmationResult_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "AccountSupervisorService.notifyEmailConfirmationResult", bytes);
  }

  AccountSupervisorService_notifyEmailConfirmationResult_result result;
  try {
    iface_->notifyEmailConfirmationResult(args.parameterMap);
  } catch (TalkException &e) {
    result.e = e;
    result.__isset.e = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "AccountSupervisorService.notifyEmailConfirmationResult");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("notifyEmailConfirmationResult", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "AccountSupervisorService.notifyEmailConfirmationResult");
  }

  oprot->writeMessageBegin("notifyEmailConfirmationResult", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "AccountSupervisorService.notifyEmailConfirmationResult", bytes);
  }
}

void AccountSupervisorServiceProcessor::process_registerVirtualAccount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("AccountSupervisorService.registerVirtualAccount", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "AccountSupervisorService.registerVirtualAccount");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "AccountSupervisorService.registerVirtualAccount");
  }

  AccountSupervisorService_registerVirtualAccount_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "AccountSupervisorService.registerVirtualAccount", bytes);
  }

  AccountSupervisorService_registerVirtualAccount_result result;
  try {
    iface_->registerVirtualAccount(result.success, args.locale, args.encryptedVirtualUserId, args.encryptedPassword);
    result.__isset.success = true;
  } catch (TalkException &e) {
    result.e = e;
    result.__isset.e = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "AccountSupervisorService.registerVirtualAccount");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("registerVirtualAccount", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "AccountSupervisorService.registerVirtualAccount");
  }

  oprot->writeMessageBegin("registerVirtualAccount", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "AccountSupervisorService.registerVirtualAccount", bytes);
  }
}

void AccountSupervisorServiceProcessor::process_requestVirtualAccountPasswordChange(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("AccountSupervisorService.requestVirtualAccountPasswordChange", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "AccountSupervisorService.requestVirtualAccountPasswordChange");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "AccountSupervisorService.requestVirtualAccountPasswordChange");
  }

  AccountSupervisorService_requestVirtualAccountPasswordChange_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "AccountSupervisorService.requestVirtualAccountPasswordChange", bytes);
  }

  AccountSupervisorService_requestVirtualAccountPasswordChange_result result;
  try {
    iface_->requestVirtualAccountPasswordChange(args.virtualMid, args.encryptedVirtualUserId, args.encryptedOldPassword, args.encryptedNewPassword);
  } catch (TalkException &e) {
    result.e = e;
    result.__isset.e = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "AccountSupervisorService.requestVirtualAccountPasswordChange");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("requestVirtualAccountPasswordChange", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "AccountSupervisorService.requestVirtualAccountPasswordChange");
  }

  oprot->writeMessageBegin("requestVirtualAccountPasswordChange", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "AccountSupervisorService.requestVirtualAccountPasswordChange", bytes);
  }
}

void AccountSupervisorServiceProcessor::process_requestVirtualAccountPasswordSet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("AccountSupervisorService.requestVirtualAccountPasswordSet", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "AccountSupervisorService.requestVirtualAccountPasswordSet");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "AccountSupervisorService.requestVirtualAccountPasswordSet");
  }

  AccountSupervisorService_requestVirtualAccountPasswordSet_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "AccountSupervisorService.requestVirtualAccountPasswordSet", bytes);
  }

  AccountSupervisorService_requestVirtualAccountPasswordSet_result result;
  try {
    iface_->requestVirtualAccountPasswordSet(args.virtualMid, args.encryptedVirtualUserId, args.encryptedNewPassword);
  } catch (TalkException &e) {
    result.e = e;
    result.__isset.e = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "AccountSupervisorService.requestVirtualAccountPasswordSet");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("requestVirtualAccountPasswordSet", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "AccountSupervisorService.requestVirtualAccountPasswordSet");
  }

  oprot->writeMessageBegin("requestVirtualAccountPasswordSet", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "AccountSupervisorService.requestVirtualAccountPasswordSet", bytes);
  }
}

void AccountSupervisorServiceProcessor::process_unregisterVirtualAccount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("AccountSupervisorService.unregisterVirtualAccount", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "AccountSupervisorService.unregisterVirtualAccount");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "AccountSupervisorService.unregisterVirtualAccount");
  }

  AccountSupervisorService_unregisterVirtualAccount_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "AccountSupervisorService.unregisterVirtualAccount", bytes);
  }

  AccountSupervisorService_unregisterVirtualAccount_result result;
  try {
    iface_->unregisterVirtualAccount(args.virtualMid);
  } catch (TalkException &e) {
    result.e = e;
    result.__isset.e = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "AccountSupervisorService.unregisterVirtualAccount");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("unregisterVirtualAccount", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "AccountSupervisorService.unregisterVirtualAccount");
  }

  oprot->writeMessageBegin("unregisterVirtualAccount", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "AccountSupervisorService.unregisterVirtualAccount", bytes);
  }
}

::std::shared_ptr< ::apache::thrift::TProcessor > AccountSupervisorServiceProcessorFactory::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) {
  ::apache::thrift::ReleaseHandler< AccountSupervisorServiceIfFactory > cleanup(handlerFactory_);
  ::std::shared_ptr< AccountSupervisorServiceIf > handler(handlerFactory_->getHandler(connInfo), cleanup);
  ::std::shared_ptr< ::apache::thrift::TProcessor > processor(new AccountSupervisorServiceProcessor(handler));
  return processor;
}

void AccountSupervisorServiceConcurrentClient::getRSAKey(RSAKey& _return)
{
  int32_t seqid = send_getRSAKey();
  recv_getRSAKey(_return, seqid);
}

int32_t AccountSupervisorServiceConcurrentClient::send_getRSAKey()
{
  int32_t cseqid = this->sync_->generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(this->sync_.get());
  oprot_->writeMessageBegin("getRSAKey", ::apache::thrift::protocol::T_CALL, cseqid);

  AccountSupervisorService_getRSAKey_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void AccountSupervisorServiceConcurrentClient::recv_getRSAKey(RSAKey& _return, const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(this->sync_.get(), seqid);

  while(true) {
    if(!this->sync_->getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("getRSAKey") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      AccountSupervisorService_getRSAKey_presult result;
      result.success = &_return;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        // _return pointer has now been filled
        sentry.commit();
        return;
      }
      if (result.__isset.e) {
        sentry.commit();
        throw result.e;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getRSAKey failed: unknown result");
    }
    // seqid != rseqid
    this->sync_->updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_->waitForWork(seqid);
  } // end while(true)
}

void AccountSupervisorServiceConcurrentClient::notifyEmailConfirmationResult(const std::map<std::string, std::string> & parameterMap)
{
  int32_t seqid = send_notifyEmailConfirmationResult(parameterMap);
  recv_notifyEmailConfirmationResult(seqid);
}

int32_t AccountSupervisorServiceConcurrentClient::send_notifyEmailConfirmationResult(const std::map<std::string, std::string> & parameterMap)
{
  int32_t cseqid = this->sync_->generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(this->sync_.get());
  oprot_->writeMessageBegin("notifyEmailConfirmationResult", ::apache::thrift::protocol::T_CALL, cseqid);

  AccountSupervisorService_notifyEmailConfirmationResult_pargs args;
  args.parameterMap = &parameterMap;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void AccountSupervisorServiceConcurrentClient::recv_notifyEmailConfirmationResult(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(this->sync_.get(), seqid);

  while(true) {
    if(!this->sync_->getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("notifyEmailConfirmationResult") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      AccountSupervisorService_notifyEmailConfirmationResult_presult result;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.e) {
        sentry.commit();
        throw result.e;
      }
      sentry.commit();
      return;
    }
    // seqid != rseqid
    this->sync_->updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_->waitForWork(seqid);
  } // end while(true)
}

void AccountSupervisorServiceConcurrentClient::registerVirtualAccount(std::string& _return, const std::string& locale, const std::string& encryptedVirtualUserId, const std::string& encryptedPassword)
{
  int32_t seqid = send_registerVirtualAccount(locale, encryptedVirtualUserId, encryptedPassword);
  recv_registerVirtualAccount(_return, seqid);
}

int32_t AccountSupervisorServiceConcurrentClient::send_registerVirtualAccount(const std::string& locale, const std::string& encryptedVirtualUserId, const std::string& encryptedPassword)
{
  int32_t cseqid = this->sync_->generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(this->sync_.get());
  oprot_->writeMessageBegin("registerVirtualAccount", ::apache::thrift::protocol::T_CALL, cseqid);

  AccountSupervisorService_registerVirtualAccount_pargs args;
  args.locale = &locale;
  args.encryptedVirtualUserId = &encryptedVirtualUserId;
  args.encryptedPassword = &encryptedPassword;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void AccountSupervisorServiceConcurrentClient::recv_registerVirtualAccount(std::string& _return, const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(this->sync_.get(), seqid);

  while(true) {
    if(!this->sync_->getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("registerVirtualAccount") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      AccountSupervisorService_registerVirtualAccount_presult result;
      result.success = &_return;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        // _return pointer has now been filled
        sentry.commit();
        return;
      }
      if (result.__isset.e) {
        sentry.commit();
        throw result.e;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "registerVirtualAccount failed: unknown result");
    }
    // seqid != rseqid
    this->sync_->updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_->waitForWork(seqid);
  } // end while(true)
}

void AccountSupervisorServiceConcurrentClient::requestVirtualAccountPasswordChange(const std::string& virtualMid, const std::string& encryptedVirtualUserId, const std::string& encryptedOldPassword, const std::string& encryptedNewPassword)
{
  int32_t seqid = send_requestVirtualAccountPasswordChange(virtualMid, encryptedVirtualUserId, encryptedOldPassword, encryptedNewPassword);
  recv_requestVirtualAccountPasswordChange(seqid);
}

int32_t AccountSupervisorServiceConcurrentClient::send_requestVirtualAccountPasswordChange(const std::string& virtualMid, const std::string& encryptedVirtualUserId, const std::string& encryptedOldPassword, const std::string& encryptedNewPassword)
{
  int32_t cseqid = this->sync_->generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(this->sync_.get());
  oprot_->writeMessageBegin("requestVirtualAccountPasswordChange", ::apache::thrift::protocol::T_CALL, cseqid);

  AccountSupervisorService_requestVirtualAccountPasswordChange_pargs args;
  args.virtualMid = &virtualMid;
  args.encryptedVirtualUserId = &encryptedVirtualUserId;
  args.encryptedOldPassword = &encryptedOldPassword;
  args.encryptedNewPassword = &encryptedNewPassword;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void AccountSupervisorServiceConcurrentClient::recv_requestVirtualAccountPasswordChange(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(this->sync_.get(), seqid);

  while(true) {
    if(!this->sync_->getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("requestVirtualAccountPasswordChange") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      AccountSupervisorService_requestVirtualAccountPasswordChange_presult result;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.e) {
        sentry.commit();
        throw result.e;
      }
      sentry.commit();
      return;
    }
    // seqid != rseqid
    this->sync_->updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_->waitForWork(seqid);
  } // end while(true)
}

void AccountSupervisorServiceConcurrentClient::requestVirtualAccountPasswordSet(const std::string& virtualMid, const std::string& encryptedVirtualUserId, const std::string& encryptedNewPassword)
{
  int32_t seqid = send_requestVirtualAccountPasswordSet(virtualMid, encryptedVirtualUserId, encryptedNewPassword);
  recv_requestVirtualAccountPasswordSet(seqid);
}

int32_t AccountSupervisorServiceConcurrentClient::send_requestVirtualAccountPasswordSet(const std::string& virtualMid, const std::string& encryptedVirtualUserId, const std::string& encryptedNewPassword)
{
  int32_t cseqid = this->sync_->generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(this->sync_.get());
  oprot_->writeMessageBegin("requestVirtualAccountPasswordSet", ::apache::thrift::protocol::T_CALL, cseqid);

  AccountSupervisorService_requestVirtualAccountPasswordSet_pargs args;
  args.virtualMid = &virtualMid;
  args.encryptedVirtualUserId = &encryptedVirtualUserId;
  args.encryptedNewPassword = &encryptedNewPassword;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void AccountSupervisorServiceConcurrentClient::recv_requestVirtualAccountPasswordSet(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(this->sync_.get(), seqid);

  while(true) {
    if(!this->sync_->getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("requestVirtualAccountPasswordSet") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      AccountSupervisorService_requestVirtualAccountPasswordSet_presult result;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.e) {
        sentry.commit();
        throw result.e;
      }
      sentry.commit();
      return;
    }
    // seqid != rseqid
    this->sync_->updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_->waitForWork(seqid);
  } // end while(true)
}

void AccountSupervisorServiceConcurrentClient::unregisterVirtualAccount(const std::string& virtualMid)
{
  int32_t seqid = send_unregisterVirtualAccount(virtualMid);
  recv_unregisterVirtualAccount(seqid);
}

int32_t AccountSupervisorServiceConcurrentClient::send_unregisterVirtualAccount(const std::string& virtualMid)
{
  int32_t cseqid = this->sync_->generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(this->sync_.get());
  oprot_->writeMessageBegin("unregisterVirtualAccount", ::apache::thrift::protocol::T_CALL, cseqid);

  AccountSupervisorService_unregisterVirtualAccount_pargs args;
  args.virtualMid = &virtualMid;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void AccountSupervisorServiceConcurrentClient::recv_unregisterVirtualAccount(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(this->sync_.get(), seqid);

  while(true) {
    if(!this->sync_->getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("unregisterVirtualAccount") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      AccountSupervisorService_unregisterVirtualAccount_presult result;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.e) {
        sentry.commit();
        throw result.e;
      }
      sentry.commit();
      return;
    }
    // seqid != rseqid
    this->sync_->updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_->waitForWork(seqid);
  } // end while(true)
}



