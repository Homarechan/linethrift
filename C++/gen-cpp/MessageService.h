/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MessageService_H
#define MessageService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "line_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MessageServiceIf {
 public:
  virtual ~MessageServiceIf() {}
  virtual void fetchMessageOperations(MessageOperations& _return, const int64_t localRevision, const int64_t lastOpTimestamp, const int32_t count) = 0;
  virtual void getLastReadMessageIds(LastReadMessageIds& _return, const std::string& chatId) = 0;
  virtual void multiGetLastReadMessageIds(std::vector<LastReadMessageIds> & _return, const std::vector<std::string> & chatIds) = 0;
};

class MessageServiceIfFactory {
 public:
  typedef MessageServiceIf Handler;

  virtual ~MessageServiceIfFactory() {}

  virtual MessageServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MessageServiceIf* /* handler */) = 0;
};

class MessageServiceIfSingletonFactory : virtual public MessageServiceIfFactory {
 public:
  MessageServiceIfSingletonFactory(const ::std::shared_ptr<MessageServiceIf>& iface) : iface_(iface) {}
  virtual ~MessageServiceIfSingletonFactory() {}

  virtual MessageServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MessageServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<MessageServiceIf> iface_;
};

class MessageServiceNull : virtual public MessageServiceIf {
 public:
  virtual ~MessageServiceNull() {}
  void fetchMessageOperations(MessageOperations& /* _return */, const int64_t /* localRevision */, const int64_t /* lastOpTimestamp */, const int32_t /* count */) {
    return;
  }
  void getLastReadMessageIds(LastReadMessageIds& /* _return */, const std::string& /* chatId */) {
    return;
  }
  void multiGetLastReadMessageIds(std::vector<LastReadMessageIds> & /* _return */, const std::vector<std::string> & /* chatIds */) {
    return;
  }
};

typedef struct _MessageService_fetchMessageOperations_args__isset {
  _MessageService_fetchMessageOperations_args__isset() : localRevision(false), lastOpTimestamp(false), count(false) {}
  bool localRevision :1;
  bool lastOpTimestamp :1;
  bool count :1;
} _MessageService_fetchMessageOperations_args__isset;

class MessageService_fetchMessageOperations_args {
 public:

  MessageService_fetchMessageOperations_args(const MessageService_fetchMessageOperations_args&);
  MessageService_fetchMessageOperations_args& operator=(const MessageService_fetchMessageOperations_args&);
  MessageService_fetchMessageOperations_args() : localRevision(0), lastOpTimestamp(0), count(0) {
  }

  virtual ~MessageService_fetchMessageOperations_args() noexcept;
  int64_t localRevision;
  int64_t lastOpTimestamp;
  int32_t count;

  _MessageService_fetchMessageOperations_args__isset __isset;

  void __set_localRevision(const int64_t val);

  void __set_lastOpTimestamp(const int64_t val);

  void __set_count(const int32_t val);

  bool operator == (const MessageService_fetchMessageOperations_args & rhs) const
  {
    if (!(localRevision == rhs.localRevision))
      return false;
    if (!(lastOpTimestamp == rhs.lastOpTimestamp))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const MessageService_fetchMessageOperations_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_fetchMessageOperations_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_fetchMessageOperations_pargs {
 public:


  virtual ~MessageService_fetchMessageOperations_pargs() noexcept;
  const int64_t* localRevision;
  const int64_t* lastOpTimestamp;
  const int32_t* count;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MessageService_fetchMessageOperations_result__isset {
  _MessageService_fetchMessageOperations_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MessageService_fetchMessageOperations_result__isset;

class MessageService_fetchMessageOperations_result {
 public:

  MessageService_fetchMessageOperations_result(const MessageService_fetchMessageOperations_result&);
  MessageService_fetchMessageOperations_result& operator=(const MessageService_fetchMessageOperations_result&);
  MessageService_fetchMessageOperations_result() {
  }

  virtual ~MessageService_fetchMessageOperations_result() noexcept;
  MessageOperations success;
  TalkException e;

  _MessageService_fetchMessageOperations_result__isset __isset;

  void __set_success(const MessageOperations& val);

  void __set_e(const TalkException& val);

  bool operator == (const MessageService_fetchMessageOperations_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MessageService_fetchMessageOperations_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_fetchMessageOperations_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MessageService_fetchMessageOperations_presult__isset {
  _MessageService_fetchMessageOperations_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MessageService_fetchMessageOperations_presult__isset;

class MessageService_fetchMessageOperations_presult {
 public:


  virtual ~MessageService_fetchMessageOperations_presult() noexcept;
  MessageOperations* success;
  TalkException e;

  _MessageService_fetchMessageOperations_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MessageService_getLastReadMessageIds_args__isset {
  _MessageService_getLastReadMessageIds_args__isset() : chatId(false) {}
  bool chatId :1;
} _MessageService_getLastReadMessageIds_args__isset;

class MessageService_getLastReadMessageIds_args {
 public:

  MessageService_getLastReadMessageIds_args(const MessageService_getLastReadMessageIds_args&);
  MessageService_getLastReadMessageIds_args& operator=(const MessageService_getLastReadMessageIds_args&);
  MessageService_getLastReadMessageIds_args() : chatId() {
  }

  virtual ~MessageService_getLastReadMessageIds_args() noexcept;
  std::string chatId;

  _MessageService_getLastReadMessageIds_args__isset __isset;

  void __set_chatId(const std::string& val);

  bool operator == (const MessageService_getLastReadMessageIds_args & rhs) const
  {
    if (!(chatId == rhs.chatId))
      return false;
    return true;
  }
  bool operator != (const MessageService_getLastReadMessageIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_getLastReadMessageIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_getLastReadMessageIds_pargs {
 public:


  virtual ~MessageService_getLastReadMessageIds_pargs() noexcept;
  const std::string* chatId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MessageService_getLastReadMessageIds_result__isset {
  _MessageService_getLastReadMessageIds_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MessageService_getLastReadMessageIds_result__isset;

class MessageService_getLastReadMessageIds_result {
 public:

  MessageService_getLastReadMessageIds_result(const MessageService_getLastReadMessageIds_result&);
  MessageService_getLastReadMessageIds_result& operator=(const MessageService_getLastReadMessageIds_result&);
  MessageService_getLastReadMessageIds_result() {
  }

  virtual ~MessageService_getLastReadMessageIds_result() noexcept;
  LastReadMessageIds success;
  TalkException e;

  _MessageService_getLastReadMessageIds_result__isset __isset;

  void __set_success(const LastReadMessageIds& val);

  void __set_e(const TalkException& val);

  bool operator == (const MessageService_getLastReadMessageIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MessageService_getLastReadMessageIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_getLastReadMessageIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MessageService_getLastReadMessageIds_presult__isset {
  _MessageService_getLastReadMessageIds_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MessageService_getLastReadMessageIds_presult__isset;

class MessageService_getLastReadMessageIds_presult {
 public:


  virtual ~MessageService_getLastReadMessageIds_presult() noexcept;
  LastReadMessageIds* success;
  TalkException e;

  _MessageService_getLastReadMessageIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MessageService_multiGetLastReadMessageIds_args__isset {
  _MessageService_multiGetLastReadMessageIds_args__isset() : chatIds(false) {}
  bool chatIds :1;
} _MessageService_multiGetLastReadMessageIds_args__isset;

class MessageService_multiGetLastReadMessageIds_args {
 public:

  MessageService_multiGetLastReadMessageIds_args(const MessageService_multiGetLastReadMessageIds_args&);
  MessageService_multiGetLastReadMessageIds_args& operator=(const MessageService_multiGetLastReadMessageIds_args&);
  MessageService_multiGetLastReadMessageIds_args() {
  }

  virtual ~MessageService_multiGetLastReadMessageIds_args() noexcept;
  std::vector<std::string>  chatIds;

  _MessageService_multiGetLastReadMessageIds_args__isset __isset;

  void __set_chatIds(const std::vector<std::string> & val);

  bool operator == (const MessageService_multiGetLastReadMessageIds_args & rhs) const
  {
    if (!(chatIds == rhs.chatIds))
      return false;
    return true;
  }
  bool operator != (const MessageService_multiGetLastReadMessageIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_multiGetLastReadMessageIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageService_multiGetLastReadMessageIds_pargs {
 public:


  virtual ~MessageService_multiGetLastReadMessageIds_pargs() noexcept;
  const std::vector<std::string> * chatIds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MessageService_multiGetLastReadMessageIds_result__isset {
  _MessageService_multiGetLastReadMessageIds_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MessageService_multiGetLastReadMessageIds_result__isset;

class MessageService_multiGetLastReadMessageIds_result {
 public:

  MessageService_multiGetLastReadMessageIds_result(const MessageService_multiGetLastReadMessageIds_result&);
  MessageService_multiGetLastReadMessageIds_result& operator=(const MessageService_multiGetLastReadMessageIds_result&);
  MessageService_multiGetLastReadMessageIds_result() {
  }

  virtual ~MessageService_multiGetLastReadMessageIds_result() noexcept;
  std::vector<LastReadMessageIds>  success;
  TalkException e;

  _MessageService_multiGetLastReadMessageIds_result__isset __isset;

  void __set_success(const std::vector<LastReadMessageIds> & val);

  void __set_e(const TalkException& val);

  bool operator == (const MessageService_multiGetLastReadMessageIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MessageService_multiGetLastReadMessageIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_multiGetLastReadMessageIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MessageService_multiGetLastReadMessageIds_presult__isset {
  _MessageService_multiGetLastReadMessageIds_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MessageService_multiGetLastReadMessageIds_presult__isset;

class MessageService_multiGetLastReadMessageIds_presult {
 public:


  virtual ~MessageService_multiGetLastReadMessageIds_presult() noexcept;
  std::vector<LastReadMessageIds> * success;
  TalkException e;

  _MessageService_multiGetLastReadMessageIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MessageServiceClient : virtual public MessageServiceIf {
 public:
  MessageServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MessageServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void fetchMessageOperations(MessageOperations& _return, const int64_t localRevision, const int64_t lastOpTimestamp, const int32_t count);
  void send_fetchMessageOperations(const int64_t localRevision, const int64_t lastOpTimestamp, const int32_t count);
  void recv_fetchMessageOperations(MessageOperations& _return);
  void getLastReadMessageIds(LastReadMessageIds& _return, const std::string& chatId);
  void send_getLastReadMessageIds(const std::string& chatId);
  void recv_getLastReadMessageIds(LastReadMessageIds& _return);
  void multiGetLastReadMessageIds(std::vector<LastReadMessageIds> & _return, const std::vector<std::string> & chatIds);
  void send_multiGetLastReadMessageIds(const std::vector<std::string> & chatIds);
  void recv_multiGetLastReadMessageIds(std::vector<LastReadMessageIds> & _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MessageServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<MessageServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MessageServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_fetchMessageOperations(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getLastReadMessageIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_multiGetLastReadMessageIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MessageServiceProcessor(::std::shared_ptr<MessageServiceIf> iface) :
    iface_(iface) {
    processMap_["fetchMessageOperations"] = &MessageServiceProcessor::process_fetchMessageOperations;
    processMap_["getLastReadMessageIds"] = &MessageServiceProcessor::process_getLastReadMessageIds;
    processMap_["multiGetLastReadMessageIds"] = &MessageServiceProcessor::process_multiGetLastReadMessageIds;
  }

  virtual ~MessageServiceProcessor() {}
};

class MessageServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MessageServiceProcessorFactory(const ::std::shared_ptr< MessageServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< MessageServiceIfFactory > handlerFactory_;
};

class MessageServiceMultiface : virtual public MessageServiceIf {
 public:
  MessageServiceMultiface(std::vector<std::shared_ptr<MessageServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MessageServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<MessageServiceIf> > ifaces_;
  MessageServiceMultiface() {}
  void add(::std::shared_ptr<MessageServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void fetchMessageOperations(MessageOperations& _return, const int64_t localRevision, const int64_t lastOpTimestamp, const int32_t count) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchMessageOperations(_return, localRevision, lastOpTimestamp, count);
    }
    ifaces_[i]->fetchMessageOperations(_return, localRevision, lastOpTimestamp, count);
    return;
  }

  void getLastReadMessageIds(LastReadMessageIds& _return, const std::string& chatId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getLastReadMessageIds(_return, chatId);
    }
    ifaces_[i]->getLastReadMessageIds(_return, chatId);
    return;
  }

  void multiGetLastReadMessageIds(std::vector<LastReadMessageIds> & _return, const std::vector<std::string> & chatIds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->multiGetLastReadMessageIds(_return, chatIds);
    }
    ifaces_[i]->multiGetLastReadMessageIds(_return, chatIds);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MessageServiceConcurrentClient : virtual public MessageServiceIf {
 public:
  MessageServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  MessageServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void fetchMessageOperations(MessageOperations& _return, const int64_t localRevision, const int64_t lastOpTimestamp, const int32_t count);
  int32_t send_fetchMessageOperations(const int64_t localRevision, const int64_t lastOpTimestamp, const int32_t count);
  void recv_fetchMessageOperations(MessageOperations& _return, const int32_t seqid);
  void getLastReadMessageIds(LastReadMessageIds& _return, const std::string& chatId);
  int32_t send_getLastReadMessageIds(const std::string& chatId);
  void recv_getLastReadMessageIds(LastReadMessageIds& _return, const int32_t seqid);
  void multiGetLastReadMessageIds(std::vector<LastReadMessageIds> & _return, const std::vector<std::string> & chatIds);
  int32_t send_multiGetLastReadMessageIds(const std::vector<std::string> & chatIds);
  void recv_multiGetLastReadMessageIds(std::vector<LastReadMessageIds> & _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
