/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ShopService_H
#define ShopService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "line_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ShopServiceIf {
 public:
  virtual ~ShopServiceIf() {}
  virtual void buyCoinProduct(const PaymentReservation& paymentReservation) = 0;
  virtual void buyFreeProduct(const std::string& receiverMid, const std::string& productId, const int32_t messageTemplate, const std::string& language, const std::string& country, const int64_t packageId) = 0;
  virtual void buyMustbuyProduct(const std::string& receiverMid, const std::string& productId, const int32_t messageTemplate, const std::string& language, const std::string& country, const int64_t packageId, const std::string& serialNumber) = 0;
  virtual void checkCanReceivePresent(const std::string& recipientMid, const int64_t packageId, const std::string& language, const std::string& country) = 0;
  virtual void getActivePurchases(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country) = 0;
  virtual void getActivePurchaseVersions(ProductSimpleList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country) = 0;
  virtual void getCoinProducts(std::vector<CoinProductItem> & _return, const PaymentType::type appStoreCode, const std::string& country, const std::string& language) = 0;
  virtual void getCoinProductsByPgCode(std::vector<CoinProductItem> & _return, const PaymentType::type appStoreCode, const PaymentPgType::type pgCode, const std::string& country, const std::string& language) = 0;
  virtual void getCoinPurchaseHistory(CoinHistoryResult& _return, const CoinHistoryCondition& request) = 0;
  virtual void getCoinUseAndRefundHistory(CoinHistoryResult& _return, const CoinHistoryCondition& request) = 0;
  virtual void getDownloads(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country) = 0;
  virtual void getEventPackages(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country) = 0;
  virtual void getNewlyReleasedPackages(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country) = 0;
  virtual void getPopularPackages(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country) = 0;
  virtual void getPresentsReceived(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country) = 0;
  virtual void getPresentsSent(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country) = 0;
  virtual void getProduct(Product& _return, const int64_t packageID, const std::string& language, const std::string& country) = 0;
  virtual void getProductList(ProductList& _return, const std::vector<std::string> & productIdList, const std::string& language, const std::string& country) = 0;
  virtual void getProductListWithCarrier(ProductList& _return, const std::vector<std::string> & productIdList, const std::string& language, const std::string& country, const std::string& carrierCode) = 0;
  virtual void getProductWithCarrier(Product& _return, const int64_t packageID, const std::string& language, const std::string& country, const std::string& carrierCode) = 0;
  virtual void getPurchaseHistory(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country) = 0;
  virtual void getTotalBalance(Coin& _return, const PaymentType::type appStoreCode) = 0;
  virtual int64_t notifyDownloaded(const int64_t packageId, const std::string& language) = 0;
  virtual void reserveCoinPurchase(PaymentReservationResult& _return, const CoinPurchaseReservation& request) = 0;
  virtual void reservePayment(PaymentReservationResult& _return, const PaymentReservation& paymentReservation) = 0;
};

class ShopServiceIfFactory {
 public:
  typedef ShopServiceIf Handler;

  virtual ~ShopServiceIfFactory() {}

  virtual ShopServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ShopServiceIf* /* handler */) = 0;
};

class ShopServiceIfSingletonFactory : virtual public ShopServiceIfFactory {
 public:
  ShopServiceIfSingletonFactory(const ::std::shared_ptr<ShopServiceIf>& iface) : iface_(iface) {}
  virtual ~ShopServiceIfSingletonFactory() {}

  virtual ShopServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ShopServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<ShopServiceIf> iface_;
};

class ShopServiceNull : virtual public ShopServiceIf {
 public:
  virtual ~ShopServiceNull() {}
  void buyCoinProduct(const PaymentReservation& /* paymentReservation */) {
    return;
  }
  void buyFreeProduct(const std::string& /* receiverMid */, const std::string& /* productId */, const int32_t /* messageTemplate */, const std::string& /* language */, const std::string& /* country */, const int64_t /* packageId */) {
    return;
  }
  void buyMustbuyProduct(const std::string& /* receiverMid */, const std::string& /* productId */, const int32_t /* messageTemplate */, const std::string& /* language */, const std::string& /* country */, const int64_t /* packageId */, const std::string& /* serialNumber */) {
    return;
  }
  void checkCanReceivePresent(const std::string& /* recipientMid */, const int64_t /* packageId */, const std::string& /* language */, const std::string& /* country */) {
    return;
  }
  void getActivePurchases(ProductList& /* _return */, const int64_t /* start */, const int32_t /* size */, const std::string& /* language */, const std::string& /* country */) {
    return;
  }
  void getActivePurchaseVersions(ProductSimpleList& /* _return */, const int64_t /* start */, const int32_t /* size */, const std::string& /* language */, const std::string& /* country */) {
    return;
  }
  void getCoinProducts(std::vector<CoinProductItem> & /* _return */, const PaymentType::type /* appStoreCode */, const std::string& /* country */, const std::string& /* language */) {
    return;
  }
  void getCoinProductsByPgCode(std::vector<CoinProductItem> & /* _return */, const PaymentType::type /* appStoreCode */, const PaymentPgType::type /* pgCode */, const std::string& /* country */, const std::string& /* language */) {
    return;
  }
  void getCoinPurchaseHistory(CoinHistoryResult& /* _return */, const CoinHistoryCondition& /* request */) {
    return;
  }
  void getCoinUseAndRefundHistory(CoinHistoryResult& /* _return */, const CoinHistoryCondition& /* request */) {
    return;
  }
  void getDownloads(ProductList& /* _return */, const int64_t /* start */, const int32_t /* size */, const std::string& /* language */, const std::string& /* country */) {
    return;
  }
  void getEventPackages(ProductList& /* _return */, const int64_t /* start */, const int32_t /* size */, const std::string& /* language */, const std::string& /* country */) {
    return;
  }
  void getNewlyReleasedPackages(ProductList& /* _return */, const int64_t /* start */, const int32_t /* size */, const std::string& /* language */, const std::string& /* country */) {
    return;
  }
  void getPopularPackages(ProductList& /* _return */, const int64_t /* start */, const int32_t /* size */, const std::string& /* language */, const std::string& /* country */) {
    return;
  }
  void getPresentsReceived(ProductList& /* _return */, const int64_t /* start */, const int32_t /* size */, const std::string& /* language */, const std::string& /* country */) {
    return;
  }
  void getPresentsSent(ProductList& /* _return */, const int64_t /* start */, const int32_t /* size */, const std::string& /* language */, const std::string& /* country */) {
    return;
  }
  void getProduct(Product& /* _return */, const int64_t /* packageID */, const std::string& /* language */, const std::string& /* country */) {
    return;
  }
  void getProductList(ProductList& /* _return */, const std::vector<std::string> & /* productIdList */, const std::string& /* language */, const std::string& /* country */) {
    return;
  }
  void getProductListWithCarrier(ProductList& /* _return */, const std::vector<std::string> & /* productIdList */, const std::string& /* language */, const std::string& /* country */, const std::string& /* carrierCode */) {
    return;
  }
  void getProductWithCarrier(Product& /* _return */, const int64_t /* packageID */, const std::string& /* language */, const std::string& /* country */, const std::string& /* carrierCode */) {
    return;
  }
  void getPurchaseHistory(ProductList& /* _return */, const int64_t /* start */, const int32_t /* size */, const std::string& /* language */, const std::string& /* country */) {
    return;
  }
  void getTotalBalance(Coin& /* _return */, const PaymentType::type /* appStoreCode */) {
    return;
  }
  int64_t notifyDownloaded(const int64_t /* packageId */, const std::string& /* language */) {
    int64_t _return = 0;
    return _return;
  }
  void reserveCoinPurchase(PaymentReservationResult& /* _return */, const CoinPurchaseReservation& /* request */) {
    return;
  }
  void reservePayment(PaymentReservationResult& /* _return */, const PaymentReservation& /* paymentReservation */) {
    return;
  }
};

typedef struct _ShopService_buyCoinProduct_args__isset {
  _ShopService_buyCoinProduct_args__isset() : paymentReservation(false) {}
  bool paymentReservation :1;
} _ShopService_buyCoinProduct_args__isset;

class ShopService_buyCoinProduct_args {
 public:

  ShopService_buyCoinProduct_args(const ShopService_buyCoinProduct_args&);
  ShopService_buyCoinProduct_args& operator=(const ShopService_buyCoinProduct_args&);
  ShopService_buyCoinProduct_args() {
  }

  virtual ~ShopService_buyCoinProduct_args() noexcept;
  PaymentReservation paymentReservation;

  _ShopService_buyCoinProduct_args__isset __isset;

  void __set_paymentReservation(const PaymentReservation& val);

  bool operator == (const ShopService_buyCoinProduct_args & rhs) const
  {
    if (!(paymentReservation == rhs.paymentReservation))
      return false;
    return true;
  }
  bool operator != (const ShopService_buyCoinProduct_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_buyCoinProduct_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShopService_buyCoinProduct_pargs {
 public:


  virtual ~ShopService_buyCoinProduct_pargs() noexcept;
  const PaymentReservation* paymentReservation;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_buyCoinProduct_result__isset {
  _ShopService_buyCoinProduct_result__isset() : e(false) {}
  bool e :1;
} _ShopService_buyCoinProduct_result__isset;

class ShopService_buyCoinProduct_result {
 public:

  ShopService_buyCoinProduct_result(const ShopService_buyCoinProduct_result&);
  ShopService_buyCoinProduct_result& operator=(const ShopService_buyCoinProduct_result&);
  ShopService_buyCoinProduct_result() {
  }

  virtual ~ShopService_buyCoinProduct_result() noexcept;
  TalkException e;

  _ShopService_buyCoinProduct_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const ShopService_buyCoinProduct_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ShopService_buyCoinProduct_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_buyCoinProduct_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_buyCoinProduct_presult__isset {
  _ShopService_buyCoinProduct_presult__isset() : e(false) {}
  bool e :1;
} _ShopService_buyCoinProduct_presult__isset;

class ShopService_buyCoinProduct_presult {
 public:


  virtual ~ShopService_buyCoinProduct_presult() noexcept;
  TalkException e;

  _ShopService_buyCoinProduct_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ShopService_buyFreeProduct_args__isset {
  _ShopService_buyFreeProduct_args__isset() : receiverMid(false), productId(false), messageTemplate(false), language(false), country(false), packageId(false) {}
  bool receiverMid :1;
  bool productId :1;
  bool messageTemplate :1;
  bool language :1;
  bool country :1;
  bool packageId :1;
} _ShopService_buyFreeProduct_args__isset;

class ShopService_buyFreeProduct_args {
 public:

  ShopService_buyFreeProduct_args(const ShopService_buyFreeProduct_args&);
  ShopService_buyFreeProduct_args& operator=(const ShopService_buyFreeProduct_args&);
  ShopService_buyFreeProduct_args() : receiverMid(), productId(), messageTemplate(0), language(), country(), packageId(0) {
  }

  virtual ~ShopService_buyFreeProduct_args() noexcept;
  std::string receiverMid;
  std::string productId;
  int32_t messageTemplate;
  std::string language;
  std::string country;
  int64_t packageId;

  _ShopService_buyFreeProduct_args__isset __isset;

  void __set_receiverMid(const std::string& val);

  void __set_productId(const std::string& val);

  void __set_messageTemplate(const int32_t val);

  void __set_language(const std::string& val);

  void __set_country(const std::string& val);

  void __set_packageId(const int64_t val);

  bool operator == (const ShopService_buyFreeProduct_args & rhs) const
  {
    if (!(receiverMid == rhs.receiverMid))
      return false;
    if (!(productId == rhs.productId))
      return false;
    if (!(messageTemplate == rhs.messageTemplate))
      return false;
    if (!(language == rhs.language))
      return false;
    if (!(country == rhs.country))
      return false;
    if (!(packageId == rhs.packageId))
      return false;
    return true;
  }
  bool operator != (const ShopService_buyFreeProduct_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_buyFreeProduct_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShopService_buyFreeProduct_pargs {
 public:


  virtual ~ShopService_buyFreeProduct_pargs() noexcept;
  const std::string* receiverMid;
  const std::string* productId;
  const int32_t* messageTemplate;
  const std::string* language;
  const std::string* country;
  const int64_t* packageId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_buyFreeProduct_result__isset {
  _ShopService_buyFreeProduct_result__isset() : e(false) {}
  bool e :1;
} _ShopService_buyFreeProduct_result__isset;

class ShopService_buyFreeProduct_result {
 public:

  ShopService_buyFreeProduct_result(const ShopService_buyFreeProduct_result&);
  ShopService_buyFreeProduct_result& operator=(const ShopService_buyFreeProduct_result&);
  ShopService_buyFreeProduct_result() {
  }

  virtual ~ShopService_buyFreeProduct_result() noexcept;
  TalkException e;

  _ShopService_buyFreeProduct_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const ShopService_buyFreeProduct_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ShopService_buyFreeProduct_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_buyFreeProduct_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_buyFreeProduct_presult__isset {
  _ShopService_buyFreeProduct_presult__isset() : e(false) {}
  bool e :1;
} _ShopService_buyFreeProduct_presult__isset;

class ShopService_buyFreeProduct_presult {
 public:


  virtual ~ShopService_buyFreeProduct_presult() noexcept;
  TalkException e;

  _ShopService_buyFreeProduct_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ShopService_buyMustbuyProduct_args__isset {
  _ShopService_buyMustbuyProduct_args__isset() : receiverMid(false), productId(false), messageTemplate(false), language(false), country(false), packageId(false), serialNumber(false) {}
  bool receiverMid :1;
  bool productId :1;
  bool messageTemplate :1;
  bool language :1;
  bool country :1;
  bool packageId :1;
  bool serialNumber :1;
} _ShopService_buyMustbuyProduct_args__isset;

class ShopService_buyMustbuyProduct_args {
 public:

  ShopService_buyMustbuyProduct_args(const ShopService_buyMustbuyProduct_args&);
  ShopService_buyMustbuyProduct_args& operator=(const ShopService_buyMustbuyProduct_args&);
  ShopService_buyMustbuyProduct_args() : receiverMid(), productId(), messageTemplate(0), language(), country(), packageId(0), serialNumber() {
  }

  virtual ~ShopService_buyMustbuyProduct_args() noexcept;
  std::string receiverMid;
  std::string productId;
  int32_t messageTemplate;
  std::string language;
  std::string country;
  int64_t packageId;
  std::string serialNumber;

  _ShopService_buyMustbuyProduct_args__isset __isset;

  void __set_receiverMid(const std::string& val);

  void __set_productId(const std::string& val);

  void __set_messageTemplate(const int32_t val);

  void __set_language(const std::string& val);

  void __set_country(const std::string& val);

  void __set_packageId(const int64_t val);

  void __set_serialNumber(const std::string& val);

  bool operator == (const ShopService_buyMustbuyProduct_args & rhs) const
  {
    if (!(receiverMid == rhs.receiverMid))
      return false;
    if (!(productId == rhs.productId))
      return false;
    if (!(messageTemplate == rhs.messageTemplate))
      return false;
    if (!(language == rhs.language))
      return false;
    if (!(country == rhs.country))
      return false;
    if (!(packageId == rhs.packageId))
      return false;
    if (!(serialNumber == rhs.serialNumber))
      return false;
    return true;
  }
  bool operator != (const ShopService_buyMustbuyProduct_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_buyMustbuyProduct_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShopService_buyMustbuyProduct_pargs {
 public:


  virtual ~ShopService_buyMustbuyProduct_pargs() noexcept;
  const std::string* receiverMid;
  const std::string* productId;
  const int32_t* messageTemplate;
  const std::string* language;
  const std::string* country;
  const int64_t* packageId;
  const std::string* serialNumber;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_buyMustbuyProduct_result__isset {
  _ShopService_buyMustbuyProduct_result__isset() : e(false) {}
  bool e :1;
} _ShopService_buyMustbuyProduct_result__isset;

class ShopService_buyMustbuyProduct_result {
 public:

  ShopService_buyMustbuyProduct_result(const ShopService_buyMustbuyProduct_result&);
  ShopService_buyMustbuyProduct_result& operator=(const ShopService_buyMustbuyProduct_result&);
  ShopService_buyMustbuyProduct_result() {
  }

  virtual ~ShopService_buyMustbuyProduct_result() noexcept;
  TalkException e;

  _ShopService_buyMustbuyProduct_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const ShopService_buyMustbuyProduct_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ShopService_buyMustbuyProduct_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_buyMustbuyProduct_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_buyMustbuyProduct_presult__isset {
  _ShopService_buyMustbuyProduct_presult__isset() : e(false) {}
  bool e :1;
} _ShopService_buyMustbuyProduct_presult__isset;

class ShopService_buyMustbuyProduct_presult {
 public:


  virtual ~ShopService_buyMustbuyProduct_presult() noexcept;
  TalkException e;

  _ShopService_buyMustbuyProduct_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ShopService_checkCanReceivePresent_args__isset {
  _ShopService_checkCanReceivePresent_args__isset() : recipientMid(false), packageId(false), language(false), country(false) {}
  bool recipientMid :1;
  bool packageId :1;
  bool language :1;
  bool country :1;
} _ShopService_checkCanReceivePresent_args__isset;

class ShopService_checkCanReceivePresent_args {
 public:

  ShopService_checkCanReceivePresent_args(const ShopService_checkCanReceivePresent_args&);
  ShopService_checkCanReceivePresent_args& operator=(const ShopService_checkCanReceivePresent_args&);
  ShopService_checkCanReceivePresent_args() : recipientMid(), packageId(0), language(), country() {
  }

  virtual ~ShopService_checkCanReceivePresent_args() noexcept;
  std::string recipientMid;
  int64_t packageId;
  std::string language;
  std::string country;

  _ShopService_checkCanReceivePresent_args__isset __isset;

  void __set_recipientMid(const std::string& val);

  void __set_packageId(const int64_t val);

  void __set_language(const std::string& val);

  void __set_country(const std::string& val);

  bool operator == (const ShopService_checkCanReceivePresent_args & rhs) const
  {
    if (!(recipientMid == rhs.recipientMid))
      return false;
    if (!(packageId == rhs.packageId))
      return false;
    if (!(language == rhs.language))
      return false;
    if (!(country == rhs.country))
      return false;
    return true;
  }
  bool operator != (const ShopService_checkCanReceivePresent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_checkCanReceivePresent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShopService_checkCanReceivePresent_pargs {
 public:


  virtual ~ShopService_checkCanReceivePresent_pargs() noexcept;
  const std::string* recipientMid;
  const int64_t* packageId;
  const std::string* language;
  const std::string* country;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_checkCanReceivePresent_result__isset {
  _ShopService_checkCanReceivePresent_result__isset() : e(false) {}
  bool e :1;
} _ShopService_checkCanReceivePresent_result__isset;

class ShopService_checkCanReceivePresent_result {
 public:

  ShopService_checkCanReceivePresent_result(const ShopService_checkCanReceivePresent_result&);
  ShopService_checkCanReceivePresent_result& operator=(const ShopService_checkCanReceivePresent_result&);
  ShopService_checkCanReceivePresent_result() {
  }

  virtual ~ShopService_checkCanReceivePresent_result() noexcept;
  TalkException e;

  _ShopService_checkCanReceivePresent_result__isset __isset;

  void __set_e(const TalkException& val);

  bool operator == (const ShopService_checkCanReceivePresent_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ShopService_checkCanReceivePresent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_checkCanReceivePresent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_checkCanReceivePresent_presult__isset {
  _ShopService_checkCanReceivePresent_presult__isset() : e(false) {}
  bool e :1;
} _ShopService_checkCanReceivePresent_presult__isset;

class ShopService_checkCanReceivePresent_presult {
 public:


  virtual ~ShopService_checkCanReceivePresent_presult() noexcept;
  TalkException e;

  _ShopService_checkCanReceivePresent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ShopService_getActivePurchases_args__isset {
  _ShopService_getActivePurchases_args__isset() : start(false), size(false), language(false), country(false) {}
  bool start :1;
  bool size :1;
  bool language :1;
  bool country :1;
} _ShopService_getActivePurchases_args__isset;

class ShopService_getActivePurchases_args {
 public:

  ShopService_getActivePurchases_args(const ShopService_getActivePurchases_args&);
  ShopService_getActivePurchases_args& operator=(const ShopService_getActivePurchases_args&);
  ShopService_getActivePurchases_args() : start(0), size(0), language(), country() {
  }

  virtual ~ShopService_getActivePurchases_args() noexcept;
  int64_t start;
  int32_t size;
  std::string language;
  std::string country;

  _ShopService_getActivePurchases_args__isset __isset;

  void __set_start(const int64_t val);

  void __set_size(const int32_t val);

  void __set_language(const std::string& val);

  void __set_country(const std::string& val);

  bool operator == (const ShopService_getActivePurchases_args & rhs) const
  {
    if (!(start == rhs.start))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(language == rhs.language))
      return false;
    if (!(country == rhs.country))
      return false;
    return true;
  }
  bool operator != (const ShopService_getActivePurchases_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_getActivePurchases_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShopService_getActivePurchases_pargs {
 public:


  virtual ~ShopService_getActivePurchases_pargs() noexcept;
  const int64_t* start;
  const int32_t* size;
  const std::string* language;
  const std::string* country;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_getActivePurchases_result__isset {
  _ShopService_getActivePurchases_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_getActivePurchases_result__isset;

class ShopService_getActivePurchases_result {
 public:

  ShopService_getActivePurchases_result(const ShopService_getActivePurchases_result&);
  ShopService_getActivePurchases_result& operator=(const ShopService_getActivePurchases_result&);
  ShopService_getActivePurchases_result() {
  }

  virtual ~ShopService_getActivePurchases_result() noexcept;
  ProductList success;
  TalkException e;

  _ShopService_getActivePurchases_result__isset __isset;

  void __set_success(const ProductList& val);

  void __set_e(const TalkException& val);

  bool operator == (const ShopService_getActivePurchases_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ShopService_getActivePurchases_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_getActivePurchases_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_getActivePurchases_presult__isset {
  _ShopService_getActivePurchases_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_getActivePurchases_presult__isset;

class ShopService_getActivePurchases_presult {
 public:


  virtual ~ShopService_getActivePurchases_presult() noexcept;
  ProductList* success;
  TalkException e;

  _ShopService_getActivePurchases_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ShopService_getActivePurchaseVersions_args__isset {
  _ShopService_getActivePurchaseVersions_args__isset() : start(false), size(false), language(false), country(false) {}
  bool start :1;
  bool size :1;
  bool language :1;
  bool country :1;
} _ShopService_getActivePurchaseVersions_args__isset;

class ShopService_getActivePurchaseVersions_args {
 public:

  ShopService_getActivePurchaseVersions_args(const ShopService_getActivePurchaseVersions_args&);
  ShopService_getActivePurchaseVersions_args& operator=(const ShopService_getActivePurchaseVersions_args&);
  ShopService_getActivePurchaseVersions_args() : start(0), size(0), language(), country() {
  }

  virtual ~ShopService_getActivePurchaseVersions_args() noexcept;
  int64_t start;
  int32_t size;
  std::string language;
  std::string country;

  _ShopService_getActivePurchaseVersions_args__isset __isset;

  void __set_start(const int64_t val);

  void __set_size(const int32_t val);

  void __set_language(const std::string& val);

  void __set_country(const std::string& val);

  bool operator == (const ShopService_getActivePurchaseVersions_args & rhs) const
  {
    if (!(start == rhs.start))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(language == rhs.language))
      return false;
    if (!(country == rhs.country))
      return false;
    return true;
  }
  bool operator != (const ShopService_getActivePurchaseVersions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_getActivePurchaseVersions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShopService_getActivePurchaseVersions_pargs {
 public:


  virtual ~ShopService_getActivePurchaseVersions_pargs() noexcept;
  const int64_t* start;
  const int32_t* size;
  const std::string* language;
  const std::string* country;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_getActivePurchaseVersions_result__isset {
  _ShopService_getActivePurchaseVersions_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_getActivePurchaseVersions_result__isset;

class ShopService_getActivePurchaseVersions_result {
 public:

  ShopService_getActivePurchaseVersions_result(const ShopService_getActivePurchaseVersions_result&);
  ShopService_getActivePurchaseVersions_result& operator=(const ShopService_getActivePurchaseVersions_result&);
  ShopService_getActivePurchaseVersions_result() {
  }

  virtual ~ShopService_getActivePurchaseVersions_result() noexcept;
  ProductSimpleList success;
  TalkException e;

  _ShopService_getActivePurchaseVersions_result__isset __isset;

  void __set_success(const ProductSimpleList& val);

  void __set_e(const TalkException& val);

  bool operator == (const ShopService_getActivePurchaseVersions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ShopService_getActivePurchaseVersions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_getActivePurchaseVersions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_getActivePurchaseVersions_presult__isset {
  _ShopService_getActivePurchaseVersions_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_getActivePurchaseVersions_presult__isset;

class ShopService_getActivePurchaseVersions_presult {
 public:


  virtual ~ShopService_getActivePurchaseVersions_presult() noexcept;
  ProductSimpleList* success;
  TalkException e;

  _ShopService_getActivePurchaseVersions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ShopService_getCoinProducts_args__isset {
  _ShopService_getCoinProducts_args__isset() : appStoreCode(false), country(false), language(false) {}
  bool appStoreCode :1;
  bool country :1;
  bool language :1;
} _ShopService_getCoinProducts_args__isset;

class ShopService_getCoinProducts_args {
 public:

  ShopService_getCoinProducts_args(const ShopService_getCoinProducts_args&);
  ShopService_getCoinProducts_args& operator=(const ShopService_getCoinProducts_args&);
  ShopService_getCoinProducts_args() : appStoreCode((PaymentType::type)0), country(), language() {
  }

  virtual ~ShopService_getCoinProducts_args() noexcept;
  /**
   * 
   * @see PaymentType
   */
  PaymentType::type appStoreCode;
  std::string country;
  std::string language;

  _ShopService_getCoinProducts_args__isset __isset;

  void __set_appStoreCode(const PaymentType::type val);

  void __set_country(const std::string& val);

  void __set_language(const std::string& val);

  bool operator == (const ShopService_getCoinProducts_args & rhs) const
  {
    if (!(appStoreCode == rhs.appStoreCode))
      return false;
    if (!(country == rhs.country))
      return false;
    if (!(language == rhs.language))
      return false;
    return true;
  }
  bool operator != (const ShopService_getCoinProducts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_getCoinProducts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShopService_getCoinProducts_pargs {
 public:


  virtual ~ShopService_getCoinProducts_pargs() noexcept;
  /**
   * 
   * @see PaymentType
   */
  const PaymentType::type* appStoreCode;
  const std::string* country;
  const std::string* language;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_getCoinProducts_result__isset {
  _ShopService_getCoinProducts_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_getCoinProducts_result__isset;

class ShopService_getCoinProducts_result {
 public:

  ShopService_getCoinProducts_result(const ShopService_getCoinProducts_result&);
  ShopService_getCoinProducts_result& operator=(const ShopService_getCoinProducts_result&);
  ShopService_getCoinProducts_result() {
  }

  virtual ~ShopService_getCoinProducts_result() noexcept;
  std::vector<CoinProductItem>  success;
  TalkException e;

  _ShopService_getCoinProducts_result__isset __isset;

  void __set_success(const std::vector<CoinProductItem> & val);

  void __set_e(const TalkException& val);

  bool operator == (const ShopService_getCoinProducts_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ShopService_getCoinProducts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_getCoinProducts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_getCoinProducts_presult__isset {
  _ShopService_getCoinProducts_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_getCoinProducts_presult__isset;

class ShopService_getCoinProducts_presult {
 public:


  virtual ~ShopService_getCoinProducts_presult() noexcept;
  std::vector<CoinProductItem> * success;
  TalkException e;

  _ShopService_getCoinProducts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ShopService_getCoinProductsByPgCode_args__isset {
  _ShopService_getCoinProductsByPgCode_args__isset() : appStoreCode(false), pgCode(false), country(false), language(false) {}
  bool appStoreCode :1;
  bool pgCode :1;
  bool country :1;
  bool language :1;
} _ShopService_getCoinProductsByPgCode_args__isset;

class ShopService_getCoinProductsByPgCode_args {
 public:

  ShopService_getCoinProductsByPgCode_args(const ShopService_getCoinProductsByPgCode_args&);
  ShopService_getCoinProductsByPgCode_args& operator=(const ShopService_getCoinProductsByPgCode_args&);
  ShopService_getCoinProductsByPgCode_args() : appStoreCode((PaymentType::type)0), pgCode((PaymentPgType::type)0), country(), language() {
  }

  virtual ~ShopService_getCoinProductsByPgCode_args() noexcept;
  /**
   * 
   * @see PaymentType
   */
  PaymentType::type appStoreCode;
  /**
   * 
   * @see PaymentPgType
   */
  PaymentPgType::type pgCode;
  std::string country;
  std::string language;

  _ShopService_getCoinProductsByPgCode_args__isset __isset;

  void __set_appStoreCode(const PaymentType::type val);

  void __set_pgCode(const PaymentPgType::type val);

  void __set_country(const std::string& val);

  void __set_language(const std::string& val);

  bool operator == (const ShopService_getCoinProductsByPgCode_args & rhs) const
  {
    if (!(appStoreCode == rhs.appStoreCode))
      return false;
    if (!(pgCode == rhs.pgCode))
      return false;
    if (!(country == rhs.country))
      return false;
    if (!(language == rhs.language))
      return false;
    return true;
  }
  bool operator != (const ShopService_getCoinProductsByPgCode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_getCoinProductsByPgCode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShopService_getCoinProductsByPgCode_pargs {
 public:


  virtual ~ShopService_getCoinProductsByPgCode_pargs() noexcept;
  /**
   * 
   * @see PaymentType
   */
  const PaymentType::type* appStoreCode;
  /**
   * 
   * @see PaymentPgType
   */
  const PaymentPgType::type* pgCode;
  const std::string* country;
  const std::string* language;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_getCoinProductsByPgCode_result__isset {
  _ShopService_getCoinProductsByPgCode_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_getCoinProductsByPgCode_result__isset;

class ShopService_getCoinProductsByPgCode_result {
 public:

  ShopService_getCoinProductsByPgCode_result(const ShopService_getCoinProductsByPgCode_result&);
  ShopService_getCoinProductsByPgCode_result& operator=(const ShopService_getCoinProductsByPgCode_result&);
  ShopService_getCoinProductsByPgCode_result() {
  }

  virtual ~ShopService_getCoinProductsByPgCode_result() noexcept;
  std::vector<CoinProductItem>  success;
  TalkException e;

  _ShopService_getCoinProductsByPgCode_result__isset __isset;

  void __set_success(const std::vector<CoinProductItem> & val);

  void __set_e(const TalkException& val);

  bool operator == (const ShopService_getCoinProductsByPgCode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ShopService_getCoinProductsByPgCode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_getCoinProductsByPgCode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_getCoinProductsByPgCode_presult__isset {
  _ShopService_getCoinProductsByPgCode_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_getCoinProductsByPgCode_presult__isset;

class ShopService_getCoinProductsByPgCode_presult {
 public:


  virtual ~ShopService_getCoinProductsByPgCode_presult() noexcept;
  std::vector<CoinProductItem> * success;
  TalkException e;

  _ShopService_getCoinProductsByPgCode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ShopService_getCoinPurchaseHistory_args__isset {
  _ShopService_getCoinPurchaseHistory_args__isset() : request(false) {}
  bool request :1;
} _ShopService_getCoinPurchaseHistory_args__isset;

class ShopService_getCoinPurchaseHistory_args {
 public:

  ShopService_getCoinPurchaseHistory_args(const ShopService_getCoinPurchaseHistory_args&);
  ShopService_getCoinPurchaseHistory_args& operator=(const ShopService_getCoinPurchaseHistory_args&);
  ShopService_getCoinPurchaseHistory_args() {
  }

  virtual ~ShopService_getCoinPurchaseHistory_args() noexcept;
  CoinHistoryCondition request;

  _ShopService_getCoinPurchaseHistory_args__isset __isset;

  void __set_request(const CoinHistoryCondition& val);

  bool operator == (const ShopService_getCoinPurchaseHistory_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const ShopService_getCoinPurchaseHistory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_getCoinPurchaseHistory_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShopService_getCoinPurchaseHistory_pargs {
 public:


  virtual ~ShopService_getCoinPurchaseHistory_pargs() noexcept;
  const CoinHistoryCondition* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_getCoinPurchaseHistory_result__isset {
  _ShopService_getCoinPurchaseHistory_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_getCoinPurchaseHistory_result__isset;

class ShopService_getCoinPurchaseHistory_result {
 public:

  ShopService_getCoinPurchaseHistory_result(const ShopService_getCoinPurchaseHistory_result&);
  ShopService_getCoinPurchaseHistory_result& operator=(const ShopService_getCoinPurchaseHistory_result&);
  ShopService_getCoinPurchaseHistory_result() {
  }

  virtual ~ShopService_getCoinPurchaseHistory_result() noexcept;
  CoinHistoryResult success;
  TalkException e;

  _ShopService_getCoinPurchaseHistory_result__isset __isset;

  void __set_success(const CoinHistoryResult& val);

  void __set_e(const TalkException& val);

  bool operator == (const ShopService_getCoinPurchaseHistory_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ShopService_getCoinPurchaseHistory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_getCoinPurchaseHistory_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_getCoinPurchaseHistory_presult__isset {
  _ShopService_getCoinPurchaseHistory_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_getCoinPurchaseHistory_presult__isset;

class ShopService_getCoinPurchaseHistory_presult {
 public:


  virtual ~ShopService_getCoinPurchaseHistory_presult() noexcept;
  CoinHistoryResult* success;
  TalkException e;

  _ShopService_getCoinPurchaseHistory_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ShopService_getCoinUseAndRefundHistory_args__isset {
  _ShopService_getCoinUseAndRefundHistory_args__isset() : request(false) {}
  bool request :1;
} _ShopService_getCoinUseAndRefundHistory_args__isset;

class ShopService_getCoinUseAndRefundHistory_args {
 public:

  ShopService_getCoinUseAndRefundHistory_args(const ShopService_getCoinUseAndRefundHistory_args&);
  ShopService_getCoinUseAndRefundHistory_args& operator=(const ShopService_getCoinUseAndRefundHistory_args&);
  ShopService_getCoinUseAndRefundHistory_args() {
  }

  virtual ~ShopService_getCoinUseAndRefundHistory_args() noexcept;
  CoinHistoryCondition request;

  _ShopService_getCoinUseAndRefundHistory_args__isset __isset;

  void __set_request(const CoinHistoryCondition& val);

  bool operator == (const ShopService_getCoinUseAndRefundHistory_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const ShopService_getCoinUseAndRefundHistory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_getCoinUseAndRefundHistory_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShopService_getCoinUseAndRefundHistory_pargs {
 public:


  virtual ~ShopService_getCoinUseAndRefundHistory_pargs() noexcept;
  const CoinHistoryCondition* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_getCoinUseAndRefundHistory_result__isset {
  _ShopService_getCoinUseAndRefundHistory_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_getCoinUseAndRefundHistory_result__isset;

class ShopService_getCoinUseAndRefundHistory_result {
 public:

  ShopService_getCoinUseAndRefundHistory_result(const ShopService_getCoinUseAndRefundHistory_result&);
  ShopService_getCoinUseAndRefundHistory_result& operator=(const ShopService_getCoinUseAndRefundHistory_result&);
  ShopService_getCoinUseAndRefundHistory_result() {
  }

  virtual ~ShopService_getCoinUseAndRefundHistory_result() noexcept;
  CoinHistoryResult success;
  TalkException e;

  _ShopService_getCoinUseAndRefundHistory_result__isset __isset;

  void __set_success(const CoinHistoryResult& val);

  void __set_e(const TalkException& val);

  bool operator == (const ShopService_getCoinUseAndRefundHistory_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ShopService_getCoinUseAndRefundHistory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_getCoinUseAndRefundHistory_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_getCoinUseAndRefundHistory_presult__isset {
  _ShopService_getCoinUseAndRefundHistory_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_getCoinUseAndRefundHistory_presult__isset;

class ShopService_getCoinUseAndRefundHistory_presult {
 public:


  virtual ~ShopService_getCoinUseAndRefundHistory_presult() noexcept;
  CoinHistoryResult* success;
  TalkException e;

  _ShopService_getCoinUseAndRefundHistory_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ShopService_getDownloads_args__isset {
  _ShopService_getDownloads_args__isset() : start(false), size(false), language(false), country(false) {}
  bool start :1;
  bool size :1;
  bool language :1;
  bool country :1;
} _ShopService_getDownloads_args__isset;

class ShopService_getDownloads_args {
 public:

  ShopService_getDownloads_args(const ShopService_getDownloads_args&);
  ShopService_getDownloads_args& operator=(const ShopService_getDownloads_args&);
  ShopService_getDownloads_args() : start(0), size(0), language(), country() {
  }

  virtual ~ShopService_getDownloads_args() noexcept;
  int64_t start;
  int32_t size;
  std::string language;
  std::string country;

  _ShopService_getDownloads_args__isset __isset;

  void __set_start(const int64_t val);

  void __set_size(const int32_t val);

  void __set_language(const std::string& val);

  void __set_country(const std::string& val);

  bool operator == (const ShopService_getDownloads_args & rhs) const
  {
    if (!(start == rhs.start))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(language == rhs.language))
      return false;
    if (!(country == rhs.country))
      return false;
    return true;
  }
  bool operator != (const ShopService_getDownloads_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_getDownloads_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShopService_getDownloads_pargs {
 public:


  virtual ~ShopService_getDownloads_pargs() noexcept;
  const int64_t* start;
  const int32_t* size;
  const std::string* language;
  const std::string* country;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_getDownloads_result__isset {
  _ShopService_getDownloads_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_getDownloads_result__isset;

class ShopService_getDownloads_result {
 public:

  ShopService_getDownloads_result(const ShopService_getDownloads_result&);
  ShopService_getDownloads_result& operator=(const ShopService_getDownloads_result&);
  ShopService_getDownloads_result() {
  }

  virtual ~ShopService_getDownloads_result() noexcept;
  ProductList success;
  TalkException e;

  _ShopService_getDownloads_result__isset __isset;

  void __set_success(const ProductList& val);

  void __set_e(const TalkException& val);

  bool operator == (const ShopService_getDownloads_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ShopService_getDownloads_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_getDownloads_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_getDownloads_presult__isset {
  _ShopService_getDownloads_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_getDownloads_presult__isset;

class ShopService_getDownloads_presult {
 public:


  virtual ~ShopService_getDownloads_presult() noexcept;
  ProductList* success;
  TalkException e;

  _ShopService_getDownloads_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ShopService_getEventPackages_args__isset {
  _ShopService_getEventPackages_args__isset() : start(false), size(false), language(false), country(false) {}
  bool start :1;
  bool size :1;
  bool language :1;
  bool country :1;
} _ShopService_getEventPackages_args__isset;

class ShopService_getEventPackages_args {
 public:

  ShopService_getEventPackages_args(const ShopService_getEventPackages_args&);
  ShopService_getEventPackages_args& operator=(const ShopService_getEventPackages_args&);
  ShopService_getEventPackages_args() : start(0), size(0), language(), country() {
  }

  virtual ~ShopService_getEventPackages_args() noexcept;
  int64_t start;
  int32_t size;
  std::string language;
  std::string country;

  _ShopService_getEventPackages_args__isset __isset;

  void __set_start(const int64_t val);

  void __set_size(const int32_t val);

  void __set_language(const std::string& val);

  void __set_country(const std::string& val);

  bool operator == (const ShopService_getEventPackages_args & rhs) const
  {
    if (!(start == rhs.start))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(language == rhs.language))
      return false;
    if (!(country == rhs.country))
      return false;
    return true;
  }
  bool operator != (const ShopService_getEventPackages_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_getEventPackages_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShopService_getEventPackages_pargs {
 public:


  virtual ~ShopService_getEventPackages_pargs() noexcept;
  const int64_t* start;
  const int32_t* size;
  const std::string* language;
  const std::string* country;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_getEventPackages_result__isset {
  _ShopService_getEventPackages_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_getEventPackages_result__isset;

class ShopService_getEventPackages_result {
 public:

  ShopService_getEventPackages_result(const ShopService_getEventPackages_result&);
  ShopService_getEventPackages_result& operator=(const ShopService_getEventPackages_result&);
  ShopService_getEventPackages_result() {
  }

  virtual ~ShopService_getEventPackages_result() noexcept;
  ProductList success;
  TalkException e;

  _ShopService_getEventPackages_result__isset __isset;

  void __set_success(const ProductList& val);

  void __set_e(const TalkException& val);

  bool operator == (const ShopService_getEventPackages_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ShopService_getEventPackages_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_getEventPackages_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_getEventPackages_presult__isset {
  _ShopService_getEventPackages_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_getEventPackages_presult__isset;

class ShopService_getEventPackages_presult {
 public:


  virtual ~ShopService_getEventPackages_presult() noexcept;
  ProductList* success;
  TalkException e;

  _ShopService_getEventPackages_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ShopService_getNewlyReleasedPackages_args__isset {
  _ShopService_getNewlyReleasedPackages_args__isset() : start(false), size(false), language(false), country(false) {}
  bool start :1;
  bool size :1;
  bool language :1;
  bool country :1;
} _ShopService_getNewlyReleasedPackages_args__isset;

class ShopService_getNewlyReleasedPackages_args {
 public:

  ShopService_getNewlyReleasedPackages_args(const ShopService_getNewlyReleasedPackages_args&);
  ShopService_getNewlyReleasedPackages_args& operator=(const ShopService_getNewlyReleasedPackages_args&);
  ShopService_getNewlyReleasedPackages_args() : start(0), size(0), language(), country() {
  }

  virtual ~ShopService_getNewlyReleasedPackages_args() noexcept;
  int64_t start;
  int32_t size;
  std::string language;
  std::string country;

  _ShopService_getNewlyReleasedPackages_args__isset __isset;

  void __set_start(const int64_t val);

  void __set_size(const int32_t val);

  void __set_language(const std::string& val);

  void __set_country(const std::string& val);

  bool operator == (const ShopService_getNewlyReleasedPackages_args & rhs) const
  {
    if (!(start == rhs.start))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(language == rhs.language))
      return false;
    if (!(country == rhs.country))
      return false;
    return true;
  }
  bool operator != (const ShopService_getNewlyReleasedPackages_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_getNewlyReleasedPackages_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShopService_getNewlyReleasedPackages_pargs {
 public:


  virtual ~ShopService_getNewlyReleasedPackages_pargs() noexcept;
  const int64_t* start;
  const int32_t* size;
  const std::string* language;
  const std::string* country;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_getNewlyReleasedPackages_result__isset {
  _ShopService_getNewlyReleasedPackages_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_getNewlyReleasedPackages_result__isset;

class ShopService_getNewlyReleasedPackages_result {
 public:

  ShopService_getNewlyReleasedPackages_result(const ShopService_getNewlyReleasedPackages_result&);
  ShopService_getNewlyReleasedPackages_result& operator=(const ShopService_getNewlyReleasedPackages_result&);
  ShopService_getNewlyReleasedPackages_result() {
  }

  virtual ~ShopService_getNewlyReleasedPackages_result() noexcept;
  ProductList success;
  TalkException e;

  _ShopService_getNewlyReleasedPackages_result__isset __isset;

  void __set_success(const ProductList& val);

  void __set_e(const TalkException& val);

  bool operator == (const ShopService_getNewlyReleasedPackages_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ShopService_getNewlyReleasedPackages_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_getNewlyReleasedPackages_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_getNewlyReleasedPackages_presult__isset {
  _ShopService_getNewlyReleasedPackages_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_getNewlyReleasedPackages_presult__isset;

class ShopService_getNewlyReleasedPackages_presult {
 public:


  virtual ~ShopService_getNewlyReleasedPackages_presult() noexcept;
  ProductList* success;
  TalkException e;

  _ShopService_getNewlyReleasedPackages_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ShopService_getPopularPackages_args__isset {
  _ShopService_getPopularPackages_args__isset() : start(false), size(false), language(false), country(false) {}
  bool start :1;
  bool size :1;
  bool language :1;
  bool country :1;
} _ShopService_getPopularPackages_args__isset;

class ShopService_getPopularPackages_args {
 public:

  ShopService_getPopularPackages_args(const ShopService_getPopularPackages_args&);
  ShopService_getPopularPackages_args& operator=(const ShopService_getPopularPackages_args&);
  ShopService_getPopularPackages_args() : start(0), size(0), language(), country() {
  }

  virtual ~ShopService_getPopularPackages_args() noexcept;
  int64_t start;
  int32_t size;
  std::string language;
  std::string country;

  _ShopService_getPopularPackages_args__isset __isset;

  void __set_start(const int64_t val);

  void __set_size(const int32_t val);

  void __set_language(const std::string& val);

  void __set_country(const std::string& val);

  bool operator == (const ShopService_getPopularPackages_args & rhs) const
  {
    if (!(start == rhs.start))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(language == rhs.language))
      return false;
    if (!(country == rhs.country))
      return false;
    return true;
  }
  bool operator != (const ShopService_getPopularPackages_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_getPopularPackages_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShopService_getPopularPackages_pargs {
 public:


  virtual ~ShopService_getPopularPackages_pargs() noexcept;
  const int64_t* start;
  const int32_t* size;
  const std::string* language;
  const std::string* country;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_getPopularPackages_result__isset {
  _ShopService_getPopularPackages_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_getPopularPackages_result__isset;

class ShopService_getPopularPackages_result {
 public:

  ShopService_getPopularPackages_result(const ShopService_getPopularPackages_result&);
  ShopService_getPopularPackages_result& operator=(const ShopService_getPopularPackages_result&);
  ShopService_getPopularPackages_result() {
  }

  virtual ~ShopService_getPopularPackages_result() noexcept;
  ProductList success;
  TalkException e;

  _ShopService_getPopularPackages_result__isset __isset;

  void __set_success(const ProductList& val);

  void __set_e(const TalkException& val);

  bool operator == (const ShopService_getPopularPackages_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ShopService_getPopularPackages_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_getPopularPackages_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_getPopularPackages_presult__isset {
  _ShopService_getPopularPackages_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_getPopularPackages_presult__isset;

class ShopService_getPopularPackages_presult {
 public:


  virtual ~ShopService_getPopularPackages_presult() noexcept;
  ProductList* success;
  TalkException e;

  _ShopService_getPopularPackages_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ShopService_getPresentsReceived_args__isset {
  _ShopService_getPresentsReceived_args__isset() : start(false), size(false), language(false), country(false) {}
  bool start :1;
  bool size :1;
  bool language :1;
  bool country :1;
} _ShopService_getPresentsReceived_args__isset;

class ShopService_getPresentsReceived_args {
 public:

  ShopService_getPresentsReceived_args(const ShopService_getPresentsReceived_args&);
  ShopService_getPresentsReceived_args& operator=(const ShopService_getPresentsReceived_args&);
  ShopService_getPresentsReceived_args() : start(0), size(0), language(), country() {
  }

  virtual ~ShopService_getPresentsReceived_args() noexcept;
  int64_t start;
  int32_t size;
  std::string language;
  std::string country;

  _ShopService_getPresentsReceived_args__isset __isset;

  void __set_start(const int64_t val);

  void __set_size(const int32_t val);

  void __set_language(const std::string& val);

  void __set_country(const std::string& val);

  bool operator == (const ShopService_getPresentsReceived_args & rhs) const
  {
    if (!(start == rhs.start))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(language == rhs.language))
      return false;
    if (!(country == rhs.country))
      return false;
    return true;
  }
  bool operator != (const ShopService_getPresentsReceived_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_getPresentsReceived_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShopService_getPresentsReceived_pargs {
 public:


  virtual ~ShopService_getPresentsReceived_pargs() noexcept;
  const int64_t* start;
  const int32_t* size;
  const std::string* language;
  const std::string* country;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_getPresentsReceived_result__isset {
  _ShopService_getPresentsReceived_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_getPresentsReceived_result__isset;

class ShopService_getPresentsReceived_result {
 public:

  ShopService_getPresentsReceived_result(const ShopService_getPresentsReceived_result&);
  ShopService_getPresentsReceived_result& operator=(const ShopService_getPresentsReceived_result&);
  ShopService_getPresentsReceived_result() {
  }

  virtual ~ShopService_getPresentsReceived_result() noexcept;
  ProductList success;
  TalkException e;

  _ShopService_getPresentsReceived_result__isset __isset;

  void __set_success(const ProductList& val);

  void __set_e(const TalkException& val);

  bool operator == (const ShopService_getPresentsReceived_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ShopService_getPresentsReceived_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_getPresentsReceived_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_getPresentsReceived_presult__isset {
  _ShopService_getPresentsReceived_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_getPresentsReceived_presult__isset;

class ShopService_getPresentsReceived_presult {
 public:


  virtual ~ShopService_getPresentsReceived_presult() noexcept;
  ProductList* success;
  TalkException e;

  _ShopService_getPresentsReceived_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ShopService_getPresentsSent_args__isset {
  _ShopService_getPresentsSent_args__isset() : start(false), size(false), language(false), country(false) {}
  bool start :1;
  bool size :1;
  bool language :1;
  bool country :1;
} _ShopService_getPresentsSent_args__isset;

class ShopService_getPresentsSent_args {
 public:

  ShopService_getPresentsSent_args(const ShopService_getPresentsSent_args&);
  ShopService_getPresentsSent_args& operator=(const ShopService_getPresentsSent_args&);
  ShopService_getPresentsSent_args() : start(0), size(0), language(), country() {
  }

  virtual ~ShopService_getPresentsSent_args() noexcept;
  int64_t start;
  int32_t size;
  std::string language;
  std::string country;

  _ShopService_getPresentsSent_args__isset __isset;

  void __set_start(const int64_t val);

  void __set_size(const int32_t val);

  void __set_language(const std::string& val);

  void __set_country(const std::string& val);

  bool operator == (const ShopService_getPresentsSent_args & rhs) const
  {
    if (!(start == rhs.start))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(language == rhs.language))
      return false;
    if (!(country == rhs.country))
      return false;
    return true;
  }
  bool operator != (const ShopService_getPresentsSent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_getPresentsSent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShopService_getPresentsSent_pargs {
 public:


  virtual ~ShopService_getPresentsSent_pargs() noexcept;
  const int64_t* start;
  const int32_t* size;
  const std::string* language;
  const std::string* country;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_getPresentsSent_result__isset {
  _ShopService_getPresentsSent_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_getPresentsSent_result__isset;

class ShopService_getPresentsSent_result {
 public:

  ShopService_getPresentsSent_result(const ShopService_getPresentsSent_result&);
  ShopService_getPresentsSent_result& operator=(const ShopService_getPresentsSent_result&);
  ShopService_getPresentsSent_result() {
  }

  virtual ~ShopService_getPresentsSent_result() noexcept;
  ProductList success;
  TalkException e;

  _ShopService_getPresentsSent_result__isset __isset;

  void __set_success(const ProductList& val);

  void __set_e(const TalkException& val);

  bool operator == (const ShopService_getPresentsSent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ShopService_getPresentsSent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_getPresentsSent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_getPresentsSent_presult__isset {
  _ShopService_getPresentsSent_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_getPresentsSent_presult__isset;

class ShopService_getPresentsSent_presult {
 public:


  virtual ~ShopService_getPresentsSent_presult() noexcept;
  ProductList* success;
  TalkException e;

  _ShopService_getPresentsSent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ShopService_getProduct_args__isset {
  _ShopService_getProduct_args__isset() : packageID(false), language(false), country(false) {}
  bool packageID :1;
  bool language :1;
  bool country :1;
} _ShopService_getProduct_args__isset;

class ShopService_getProduct_args {
 public:

  ShopService_getProduct_args(const ShopService_getProduct_args&);
  ShopService_getProduct_args& operator=(const ShopService_getProduct_args&);
  ShopService_getProduct_args() : packageID(0), language(), country() {
  }

  virtual ~ShopService_getProduct_args() noexcept;
  int64_t packageID;
  std::string language;
  std::string country;

  _ShopService_getProduct_args__isset __isset;

  void __set_packageID(const int64_t val);

  void __set_language(const std::string& val);

  void __set_country(const std::string& val);

  bool operator == (const ShopService_getProduct_args & rhs) const
  {
    if (!(packageID == rhs.packageID))
      return false;
    if (!(language == rhs.language))
      return false;
    if (!(country == rhs.country))
      return false;
    return true;
  }
  bool operator != (const ShopService_getProduct_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_getProduct_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShopService_getProduct_pargs {
 public:


  virtual ~ShopService_getProduct_pargs() noexcept;
  const int64_t* packageID;
  const std::string* language;
  const std::string* country;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_getProduct_result__isset {
  _ShopService_getProduct_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_getProduct_result__isset;

class ShopService_getProduct_result {
 public:

  ShopService_getProduct_result(const ShopService_getProduct_result&);
  ShopService_getProduct_result& operator=(const ShopService_getProduct_result&);
  ShopService_getProduct_result() {
  }

  virtual ~ShopService_getProduct_result() noexcept;
  Product success;
  TalkException e;

  _ShopService_getProduct_result__isset __isset;

  void __set_success(const Product& val);

  void __set_e(const TalkException& val);

  bool operator == (const ShopService_getProduct_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ShopService_getProduct_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_getProduct_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_getProduct_presult__isset {
  _ShopService_getProduct_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_getProduct_presult__isset;

class ShopService_getProduct_presult {
 public:


  virtual ~ShopService_getProduct_presult() noexcept;
  Product* success;
  TalkException e;

  _ShopService_getProduct_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ShopService_getProductList_args__isset {
  _ShopService_getProductList_args__isset() : productIdList(false), language(false), country(false) {}
  bool productIdList :1;
  bool language :1;
  bool country :1;
} _ShopService_getProductList_args__isset;

class ShopService_getProductList_args {
 public:

  ShopService_getProductList_args(const ShopService_getProductList_args&);
  ShopService_getProductList_args& operator=(const ShopService_getProductList_args&);
  ShopService_getProductList_args() : language(), country() {
  }

  virtual ~ShopService_getProductList_args() noexcept;
  std::vector<std::string>  productIdList;
  std::string language;
  std::string country;

  _ShopService_getProductList_args__isset __isset;

  void __set_productIdList(const std::vector<std::string> & val);

  void __set_language(const std::string& val);

  void __set_country(const std::string& val);

  bool operator == (const ShopService_getProductList_args & rhs) const
  {
    if (!(productIdList == rhs.productIdList))
      return false;
    if (!(language == rhs.language))
      return false;
    if (!(country == rhs.country))
      return false;
    return true;
  }
  bool operator != (const ShopService_getProductList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_getProductList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShopService_getProductList_pargs {
 public:


  virtual ~ShopService_getProductList_pargs() noexcept;
  const std::vector<std::string> * productIdList;
  const std::string* language;
  const std::string* country;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_getProductList_result__isset {
  _ShopService_getProductList_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_getProductList_result__isset;

class ShopService_getProductList_result {
 public:

  ShopService_getProductList_result(const ShopService_getProductList_result&);
  ShopService_getProductList_result& operator=(const ShopService_getProductList_result&);
  ShopService_getProductList_result() {
  }

  virtual ~ShopService_getProductList_result() noexcept;
  ProductList success;
  TalkException e;

  _ShopService_getProductList_result__isset __isset;

  void __set_success(const ProductList& val);

  void __set_e(const TalkException& val);

  bool operator == (const ShopService_getProductList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ShopService_getProductList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_getProductList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_getProductList_presult__isset {
  _ShopService_getProductList_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_getProductList_presult__isset;

class ShopService_getProductList_presult {
 public:


  virtual ~ShopService_getProductList_presult() noexcept;
  ProductList* success;
  TalkException e;

  _ShopService_getProductList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ShopService_getProductListWithCarrier_args__isset {
  _ShopService_getProductListWithCarrier_args__isset() : productIdList(false), language(false), country(false), carrierCode(false) {}
  bool productIdList :1;
  bool language :1;
  bool country :1;
  bool carrierCode :1;
} _ShopService_getProductListWithCarrier_args__isset;

class ShopService_getProductListWithCarrier_args {
 public:

  ShopService_getProductListWithCarrier_args(const ShopService_getProductListWithCarrier_args&);
  ShopService_getProductListWithCarrier_args& operator=(const ShopService_getProductListWithCarrier_args&);
  ShopService_getProductListWithCarrier_args() : language(), country(), carrierCode() {
  }

  virtual ~ShopService_getProductListWithCarrier_args() noexcept;
  std::vector<std::string>  productIdList;
  std::string language;
  std::string country;
  std::string carrierCode;

  _ShopService_getProductListWithCarrier_args__isset __isset;

  void __set_productIdList(const std::vector<std::string> & val);

  void __set_language(const std::string& val);

  void __set_country(const std::string& val);

  void __set_carrierCode(const std::string& val);

  bool operator == (const ShopService_getProductListWithCarrier_args & rhs) const
  {
    if (!(productIdList == rhs.productIdList))
      return false;
    if (!(language == rhs.language))
      return false;
    if (!(country == rhs.country))
      return false;
    if (!(carrierCode == rhs.carrierCode))
      return false;
    return true;
  }
  bool operator != (const ShopService_getProductListWithCarrier_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_getProductListWithCarrier_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShopService_getProductListWithCarrier_pargs {
 public:


  virtual ~ShopService_getProductListWithCarrier_pargs() noexcept;
  const std::vector<std::string> * productIdList;
  const std::string* language;
  const std::string* country;
  const std::string* carrierCode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_getProductListWithCarrier_result__isset {
  _ShopService_getProductListWithCarrier_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_getProductListWithCarrier_result__isset;

class ShopService_getProductListWithCarrier_result {
 public:

  ShopService_getProductListWithCarrier_result(const ShopService_getProductListWithCarrier_result&);
  ShopService_getProductListWithCarrier_result& operator=(const ShopService_getProductListWithCarrier_result&);
  ShopService_getProductListWithCarrier_result() {
  }

  virtual ~ShopService_getProductListWithCarrier_result() noexcept;
  ProductList success;
  TalkException e;

  _ShopService_getProductListWithCarrier_result__isset __isset;

  void __set_success(const ProductList& val);

  void __set_e(const TalkException& val);

  bool operator == (const ShopService_getProductListWithCarrier_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ShopService_getProductListWithCarrier_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_getProductListWithCarrier_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_getProductListWithCarrier_presult__isset {
  _ShopService_getProductListWithCarrier_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_getProductListWithCarrier_presult__isset;

class ShopService_getProductListWithCarrier_presult {
 public:


  virtual ~ShopService_getProductListWithCarrier_presult() noexcept;
  ProductList* success;
  TalkException e;

  _ShopService_getProductListWithCarrier_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ShopService_getProductWithCarrier_args__isset {
  _ShopService_getProductWithCarrier_args__isset() : packageID(false), language(false), country(false), carrierCode(false) {}
  bool packageID :1;
  bool language :1;
  bool country :1;
  bool carrierCode :1;
} _ShopService_getProductWithCarrier_args__isset;

class ShopService_getProductWithCarrier_args {
 public:

  ShopService_getProductWithCarrier_args(const ShopService_getProductWithCarrier_args&);
  ShopService_getProductWithCarrier_args& operator=(const ShopService_getProductWithCarrier_args&);
  ShopService_getProductWithCarrier_args() : packageID(0), language(), country(), carrierCode() {
  }

  virtual ~ShopService_getProductWithCarrier_args() noexcept;
  int64_t packageID;
  std::string language;
  std::string country;
  std::string carrierCode;

  _ShopService_getProductWithCarrier_args__isset __isset;

  void __set_packageID(const int64_t val);

  void __set_language(const std::string& val);

  void __set_country(const std::string& val);

  void __set_carrierCode(const std::string& val);

  bool operator == (const ShopService_getProductWithCarrier_args & rhs) const
  {
    if (!(packageID == rhs.packageID))
      return false;
    if (!(language == rhs.language))
      return false;
    if (!(country == rhs.country))
      return false;
    if (!(carrierCode == rhs.carrierCode))
      return false;
    return true;
  }
  bool operator != (const ShopService_getProductWithCarrier_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_getProductWithCarrier_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShopService_getProductWithCarrier_pargs {
 public:


  virtual ~ShopService_getProductWithCarrier_pargs() noexcept;
  const int64_t* packageID;
  const std::string* language;
  const std::string* country;
  const std::string* carrierCode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_getProductWithCarrier_result__isset {
  _ShopService_getProductWithCarrier_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_getProductWithCarrier_result__isset;

class ShopService_getProductWithCarrier_result {
 public:

  ShopService_getProductWithCarrier_result(const ShopService_getProductWithCarrier_result&);
  ShopService_getProductWithCarrier_result& operator=(const ShopService_getProductWithCarrier_result&);
  ShopService_getProductWithCarrier_result() {
  }

  virtual ~ShopService_getProductWithCarrier_result() noexcept;
  Product success;
  TalkException e;

  _ShopService_getProductWithCarrier_result__isset __isset;

  void __set_success(const Product& val);

  void __set_e(const TalkException& val);

  bool operator == (const ShopService_getProductWithCarrier_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ShopService_getProductWithCarrier_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_getProductWithCarrier_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_getProductWithCarrier_presult__isset {
  _ShopService_getProductWithCarrier_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_getProductWithCarrier_presult__isset;

class ShopService_getProductWithCarrier_presult {
 public:


  virtual ~ShopService_getProductWithCarrier_presult() noexcept;
  Product* success;
  TalkException e;

  _ShopService_getProductWithCarrier_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ShopService_getPurchaseHistory_args__isset {
  _ShopService_getPurchaseHistory_args__isset() : start(false), size(false), language(false), country(false) {}
  bool start :1;
  bool size :1;
  bool language :1;
  bool country :1;
} _ShopService_getPurchaseHistory_args__isset;

class ShopService_getPurchaseHistory_args {
 public:

  ShopService_getPurchaseHistory_args(const ShopService_getPurchaseHistory_args&);
  ShopService_getPurchaseHistory_args& operator=(const ShopService_getPurchaseHistory_args&);
  ShopService_getPurchaseHistory_args() : start(0), size(0), language(), country() {
  }

  virtual ~ShopService_getPurchaseHistory_args() noexcept;
  int64_t start;
  int32_t size;
  std::string language;
  std::string country;

  _ShopService_getPurchaseHistory_args__isset __isset;

  void __set_start(const int64_t val);

  void __set_size(const int32_t val);

  void __set_language(const std::string& val);

  void __set_country(const std::string& val);

  bool operator == (const ShopService_getPurchaseHistory_args & rhs) const
  {
    if (!(start == rhs.start))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(language == rhs.language))
      return false;
    if (!(country == rhs.country))
      return false;
    return true;
  }
  bool operator != (const ShopService_getPurchaseHistory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_getPurchaseHistory_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShopService_getPurchaseHistory_pargs {
 public:


  virtual ~ShopService_getPurchaseHistory_pargs() noexcept;
  const int64_t* start;
  const int32_t* size;
  const std::string* language;
  const std::string* country;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_getPurchaseHistory_result__isset {
  _ShopService_getPurchaseHistory_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_getPurchaseHistory_result__isset;

class ShopService_getPurchaseHistory_result {
 public:

  ShopService_getPurchaseHistory_result(const ShopService_getPurchaseHistory_result&);
  ShopService_getPurchaseHistory_result& operator=(const ShopService_getPurchaseHistory_result&);
  ShopService_getPurchaseHistory_result() {
  }

  virtual ~ShopService_getPurchaseHistory_result() noexcept;
  ProductList success;
  TalkException e;

  _ShopService_getPurchaseHistory_result__isset __isset;

  void __set_success(const ProductList& val);

  void __set_e(const TalkException& val);

  bool operator == (const ShopService_getPurchaseHistory_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ShopService_getPurchaseHistory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_getPurchaseHistory_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_getPurchaseHistory_presult__isset {
  _ShopService_getPurchaseHistory_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_getPurchaseHistory_presult__isset;

class ShopService_getPurchaseHistory_presult {
 public:


  virtual ~ShopService_getPurchaseHistory_presult() noexcept;
  ProductList* success;
  TalkException e;

  _ShopService_getPurchaseHistory_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ShopService_getTotalBalance_args__isset {
  _ShopService_getTotalBalance_args__isset() : appStoreCode(false) {}
  bool appStoreCode :1;
} _ShopService_getTotalBalance_args__isset;

class ShopService_getTotalBalance_args {
 public:

  ShopService_getTotalBalance_args(const ShopService_getTotalBalance_args&);
  ShopService_getTotalBalance_args& operator=(const ShopService_getTotalBalance_args&);
  ShopService_getTotalBalance_args() : appStoreCode((PaymentType::type)0) {
  }

  virtual ~ShopService_getTotalBalance_args() noexcept;
  /**
   * 
   * @see PaymentType
   */
  PaymentType::type appStoreCode;

  _ShopService_getTotalBalance_args__isset __isset;

  void __set_appStoreCode(const PaymentType::type val);

  bool operator == (const ShopService_getTotalBalance_args & rhs) const
  {
    if (!(appStoreCode == rhs.appStoreCode))
      return false;
    return true;
  }
  bool operator != (const ShopService_getTotalBalance_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_getTotalBalance_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShopService_getTotalBalance_pargs {
 public:


  virtual ~ShopService_getTotalBalance_pargs() noexcept;
  /**
   * 
   * @see PaymentType
   */
  const PaymentType::type* appStoreCode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_getTotalBalance_result__isset {
  _ShopService_getTotalBalance_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_getTotalBalance_result__isset;

class ShopService_getTotalBalance_result {
 public:

  ShopService_getTotalBalance_result(const ShopService_getTotalBalance_result&);
  ShopService_getTotalBalance_result& operator=(const ShopService_getTotalBalance_result&);
  ShopService_getTotalBalance_result() {
  }

  virtual ~ShopService_getTotalBalance_result() noexcept;
  Coin success;
  TalkException e;

  _ShopService_getTotalBalance_result__isset __isset;

  void __set_success(const Coin& val);

  void __set_e(const TalkException& val);

  bool operator == (const ShopService_getTotalBalance_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ShopService_getTotalBalance_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_getTotalBalance_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_getTotalBalance_presult__isset {
  _ShopService_getTotalBalance_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_getTotalBalance_presult__isset;

class ShopService_getTotalBalance_presult {
 public:


  virtual ~ShopService_getTotalBalance_presult() noexcept;
  Coin* success;
  TalkException e;

  _ShopService_getTotalBalance_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ShopService_notifyDownloaded_args__isset {
  _ShopService_notifyDownloaded_args__isset() : packageId(false), language(false) {}
  bool packageId :1;
  bool language :1;
} _ShopService_notifyDownloaded_args__isset;

class ShopService_notifyDownloaded_args {
 public:

  ShopService_notifyDownloaded_args(const ShopService_notifyDownloaded_args&);
  ShopService_notifyDownloaded_args& operator=(const ShopService_notifyDownloaded_args&);
  ShopService_notifyDownloaded_args() : packageId(0), language() {
  }

  virtual ~ShopService_notifyDownloaded_args() noexcept;
  int64_t packageId;
  std::string language;

  _ShopService_notifyDownloaded_args__isset __isset;

  void __set_packageId(const int64_t val);

  void __set_language(const std::string& val);

  bool operator == (const ShopService_notifyDownloaded_args & rhs) const
  {
    if (!(packageId == rhs.packageId))
      return false;
    if (!(language == rhs.language))
      return false;
    return true;
  }
  bool operator != (const ShopService_notifyDownloaded_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_notifyDownloaded_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShopService_notifyDownloaded_pargs {
 public:


  virtual ~ShopService_notifyDownloaded_pargs() noexcept;
  const int64_t* packageId;
  const std::string* language;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_notifyDownloaded_result__isset {
  _ShopService_notifyDownloaded_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_notifyDownloaded_result__isset;

class ShopService_notifyDownloaded_result {
 public:

  ShopService_notifyDownloaded_result(const ShopService_notifyDownloaded_result&);
  ShopService_notifyDownloaded_result& operator=(const ShopService_notifyDownloaded_result&);
  ShopService_notifyDownloaded_result() : success(0) {
  }

  virtual ~ShopService_notifyDownloaded_result() noexcept;
  int64_t success;
  TalkException e;

  _ShopService_notifyDownloaded_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_e(const TalkException& val);

  bool operator == (const ShopService_notifyDownloaded_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ShopService_notifyDownloaded_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_notifyDownloaded_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_notifyDownloaded_presult__isset {
  _ShopService_notifyDownloaded_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_notifyDownloaded_presult__isset;

class ShopService_notifyDownloaded_presult {
 public:


  virtual ~ShopService_notifyDownloaded_presult() noexcept;
  int64_t* success;
  TalkException e;

  _ShopService_notifyDownloaded_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ShopService_reserveCoinPurchase_args__isset {
  _ShopService_reserveCoinPurchase_args__isset() : request(false) {}
  bool request :1;
} _ShopService_reserveCoinPurchase_args__isset;

class ShopService_reserveCoinPurchase_args {
 public:

  ShopService_reserveCoinPurchase_args(const ShopService_reserveCoinPurchase_args&);
  ShopService_reserveCoinPurchase_args& operator=(const ShopService_reserveCoinPurchase_args&);
  ShopService_reserveCoinPurchase_args() {
  }

  virtual ~ShopService_reserveCoinPurchase_args() noexcept;
  CoinPurchaseReservation request;

  _ShopService_reserveCoinPurchase_args__isset __isset;

  void __set_request(const CoinPurchaseReservation& val);

  bool operator == (const ShopService_reserveCoinPurchase_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const ShopService_reserveCoinPurchase_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_reserveCoinPurchase_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShopService_reserveCoinPurchase_pargs {
 public:


  virtual ~ShopService_reserveCoinPurchase_pargs() noexcept;
  const CoinPurchaseReservation* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_reserveCoinPurchase_result__isset {
  _ShopService_reserveCoinPurchase_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_reserveCoinPurchase_result__isset;

class ShopService_reserveCoinPurchase_result {
 public:

  ShopService_reserveCoinPurchase_result(const ShopService_reserveCoinPurchase_result&);
  ShopService_reserveCoinPurchase_result& operator=(const ShopService_reserveCoinPurchase_result&);
  ShopService_reserveCoinPurchase_result() {
  }

  virtual ~ShopService_reserveCoinPurchase_result() noexcept;
  PaymentReservationResult success;
  TalkException e;

  _ShopService_reserveCoinPurchase_result__isset __isset;

  void __set_success(const PaymentReservationResult& val);

  void __set_e(const TalkException& val);

  bool operator == (const ShopService_reserveCoinPurchase_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ShopService_reserveCoinPurchase_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_reserveCoinPurchase_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_reserveCoinPurchase_presult__isset {
  _ShopService_reserveCoinPurchase_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_reserveCoinPurchase_presult__isset;

class ShopService_reserveCoinPurchase_presult {
 public:


  virtual ~ShopService_reserveCoinPurchase_presult() noexcept;
  PaymentReservationResult* success;
  TalkException e;

  _ShopService_reserveCoinPurchase_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ShopService_reservePayment_args__isset {
  _ShopService_reservePayment_args__isset() : paymentReservation(false) {}
  bool paymentReservation :1;
} _ShopService_reservePayment_args__isset;

class ShopService_reservePayment_args {
 public:

  ShopService_reservePayment_args(const ShopService_reservePayment_args&);
  ShopService_reservePayment_args& operator=(const ShopService_reservePayment_args&);
  ShopService_reservePayment_args() {
  }

  virtual ~ShopService_reservePayment_args() noexcept;
  PaymentReservation paymentReservation;

  _ShopService_reservePayment_args__isset __isset;

  void __set_paymentReservation(const PaymentReservation& val);

  bool operator == (const ShopService_reservePayment_args & rhs) const
  {
    if (!(paymentReservation == rhs.paymentReservation))
      return false;
    return true;
  }
  bool operator != (const ShopService_reservePayment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_reservePayment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShopService_reservePayment_pargs {
 public:


  virtual ~ShopService_reservePayment_pargs() noexcept;
  const PaymentReservation* paymentReservation;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_reservePayment_result__isset {
  _ShopService_reservePayment_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_reservePayment_result__isset;

class ShopService_reservePayment_result {
 public:

  ShopService_reservePayment_result(const ShopService_reservePayment_result&);
  ShopService_reservePayment_result& operator=(const ShopService_reservePayment_result&);
  ShopService_reservePayment_result() {
  }

  virtual ~ShopService_reservePayment_result() noexcept;
  PaymentReservationResult success;
  TalkException e;

  _ShopService_reservePayment_result__isset __isset;

  void __set_success(const PaymentReservationResult& val);

  void __set_e(const TalkException& val);

  bool operator == (const ShopService_reservePayment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ShopService_reservePayment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShopService_reservePayment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShopService_reservePayment_presult__isset {
  _ShopService_reservePayment_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ShopService_reservePayment_presult__isset;

class ShopService_reservePayment_presult {
 public:


  virtual ~ShopService_reservePayment_presult() noexcept;
  PaymentReservationResult* success;
  TalkException e;

  _ShopService_reservePayment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ShopServiceClient : virtual public ShopServiceIf {
 public:
  ShopServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ShopServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void buyCoinProduct(const PaymentReservation& paymentReservation);
  void send_buyCoinProduct(const PaymentReservation& paymentReservation);
  void recv_buyCoinProduct();
  void buyFreeProduct(const std::string& receiverMid, const std::string& productId, const int32_t messageTemplate, const std::string& language, const std::string& country, const int64_t packageId);
  void send_buyFreeProduct(const std::string& receiverMid, const std::string& productId, const int32_t messageTemplate, const std::string& language, const std::string& country, const int64_t packageId);
  void recv_buyFreeProduct();
  void buyMustbuyProduct(const std::string& receiverMid, const std::string& productId, const int32_t messageTemplate, const std::string& language, const std::string& country, const int64_t packageId, const std::string& serialNumber);
  void send_buyMustbuyProduct(const std::string& receiverMid, const std::string& productId, const int32_t messageTemplate, const std::string& language, const std::string& country, const int64_t packageId, const std::string& serialNumber);
  void recv_buyMustbuyProduct();
  void checkCanReceivePresent(const std::string& recipientMid, const int64_t packageId, const std::string& language, const std::string& country);
  void send_checkCanReceivePresent(const std::string& recipientMid, const int64_t packageId, const std::string& language, const std::string& country);
  void recv_checkCanReceivePresent();
  void getActivePurchases(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country);
  void send_getActivePurchases(const int64_t start, const int32_t size, const std::string& language, const std::string& country);
  void recv_getActivePurchases(ProductList& _return);
  void getActivePurchaseVersions(ProductSimpleList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country);
  void send_getActivePurchaseVersions(const int64_t start, const int32_t size, const std::string& language, const std::string& country);
  void recv_getActivePurchaseVersions(ProductSimpleList& _return);
  void getCoinProducts(std::vector<CoinProductItem> & _return, const PaymentType::type appStoreCode, const std::string& country, const std::string& language);
  void send_getCoinProducts(const PaymentType::type appStoreCode, const std::string& country, const std::string& language);
  void recv_getCoinProducts(std::vector<CoinProductItem> & _return);
  void getCoinProductsByPgCode(std::vector<CoinProductItem> & _return, const PaymentType::type appStoreCode, const PaymentPgType::type pgCode, const std::string& country, const std::string& language);
  void send_getCoinProductsByPgCode(const PaymentType::type appStoreCode, const PaymentPgType::type pgCode, const std::string& country, const std::string& language);
  void recv_getCoinProductsByPgCode(std::vector<CoinProductItem> & _return);
  void getCoinPurchaseHistory(CoinHistoryResult& _return, const CoinHistoryCondition& request);
  void send_getCoinPurchaseHistory(const CoinHistoryCondition& request);
  void recv_getCoinPurchaseHistory(CoinHistoryResult& _return);
  void getCoinUseAndRefundHistory(CoinHistoryResult& _return, const CoinHistoryCondition& request);
  void send_getCoinUseAndRefundHistory(const CoinHistoryCondition& request);
  void recv_getCoinUseAndRefundHistory(CoinHistoryResult& _return);
  void getDownloads(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country);
  void send_getDownloads(const int64_t start, const int32_t size, const std::string& language, const std::string& country);
  void recv_getDownloads(ProductList& _return);
  void getEventPackages(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country);
  void send_getEventPackages(const int64_t start, const int32_t size, const std::string& language, const std::string& country);
  void recv_getEventPackages(ProductList& _return);
  void getNewlyReleasedPackages(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country);
  void send_getNewlyReleasedPackages(const int64_t start, const int32_t size, const std::string& language, const std::string& country);
  void recv_getNewlyReleasedPackages(ProductList& _return);
  void getPopularPackages(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country);
  void send_getPopularPackages(const int64_t start, const int32_t size, const std::string& language, const std::string& country);
  void recv_getPopularPackages(ProductList& _return);
  void getPresentsReceived(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country);
  void send_getPresentsReceived(const int64_t start, const int32_t size, const std::string& language, const std::string& country);
  void recv_getPresentsReceived(ProductList& _return);
  void getPresentsSent(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country);
  void send_getPresentsSent(const int64_t start, const int32_t size, const std::string& language, const std::string& country);
  void recv_getPresentsSent(ProductList& _return);
  void getProduct(Product& _return, const int64_t packageID, const std::string& language, const std::string& country);
  void send_getProduct(const int64_t packageID, const std::string& language, const std::string& country);
  void recv_getProduct(Product& _return);
  void getProductList(ProductList& _return, const std::vector<std::string> & productIdList, const std::string& language, const std::string& country);
  void send_getProductList(const std::vector<std::string> & productIdList, const std::string& language, const std::string& country);
  void recv_getProductList(ProductList& _return);
  void getProductListWithCarrier(ProductList& _return, const std::vector<std::string> & productIdList, const std::string& language, const std::string& country, const std::string& carrierCode);
  void send_getProductListWithCarrier(const std::vector<std::string> & productIdList, const std::string& language, const std::string& country, const std::string& carrierCode);
  void recv_getProductListWithCarrier(ProductList& _return);
  void getProductWithCarrier(Product& _return, const int64_t packageID, const std::string& language, const std::string& country, const std::string& carrierCode);
  void send_getProductWithCarrier(const int64_t packageID, const std::string& language, const std::string& country, const std::string& carrierCode);
  void recv_getProductWithCarrier(Product& _return);
  void getPurchaseHistory(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country);
  void send_getPurchaseHistory(const int64_t start, const int32_t size, const std::string& language, const std::string& country);
  void recv_getPurchaseHistory(ProductList& _return);
  void getTotalBalance(Coin& _return, const PaymentType::type appStoreCode);
  void send_getTotalBalance(const PaymentType::type appStoreCode);
  void recv_getTotalBalance(Coin& _return);
  int64_t notifyDownloaded(const int64_t packageId, const std::string& language);
  void send_notifyDownloaded(const int64_t packageId, const std::string& language);
  int64_t recv_notifyDownloaded();
  void reserveCoinPurchase(PaymentReservationResult& _return, const CoinPurchaseReservation& request);
  void send_reserveCoinPurchase(const CoinPurchaseReservation& request);
  void recv_reserveCoinPurchase(PaymentReservationResult& _return);
  void reservePayment(PaymentReservationResult& _return, const PaymentReservation& paymentReservation);
  void send_reservePayment(const PaymentReservation& paymentReservation);
  void recv_reservePayment(PaymentReservationResult& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ShopServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<ShopServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ShopServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_buyCoinProduct(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_buyFreeProduct(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_buyMustbuyProduct(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_checkCanReceivePresent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getActivePurchases(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getActivePurchaseVersions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCoinProducts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCoinProductsByPgCode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCoinPurchaseHistory(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCoinUseAndRefundHistory(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDownloads(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getEventPackages(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getNewlyReleasedPackages(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPopularPackages(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPresentsReceived(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPresentsSent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getProduct(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getProductList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getProductListWithCarrier(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getProductWithCarrier(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPurchaseHistory(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTotalBalance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_notifyDownloaded(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reserveCoinPurchase(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reservePayment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ShopServiceProcessor(::std::shared_ptr<ShopServiceIf> iface) :
    iface_(iface) {
    processMap_["buyCoinProduct"] = &ShopServiceProcessor::process_buyCoinProduct;
    processMap_["buyFreeProduct"] = &ShopServiceProcessor::process_buyFreeProduct;
    processMap_["buyMustbuyProduct"] = &ShopServiceProcessor::process_buyMustbuyProduct;
    processMap_["checkCanReceivePresent"] = &ShopServiceProcessor::process_checkCanReceivePresent;
    processMap_["getActivePurchases"] = &ShopServiceProcessor::process_getActivePurchases;
    processMap_["getActivePurchaseVersions"] = &ShopServiceProcessor::process_getActivePurchaseVersions;
    processMap_["getCoinProducts"] = &ShopServiceProcessor::process_getCoinProducts;
    processMap_["getCoinProductsByPgCode"] = &ShopServiceProcessor::process_getCoinProductsByPgCode;
    processMap_["getCoinPurchaseHistory"] = &ShopServiceProcessor::process_getCoinPurchaseHistory;
    processMap_["getCoinUseAndRefundHistory"] = &ShopServiceProcessor::process_getCoinUseAndRefundHistory;
    processMap_["getDownloads"] = &ShopServiceProcessor::process_getDownloads;
    processMap_["getEventPackages"] = &ShopServiceProcessor::process_getEventPackages;
    processMap_["getNewlyReleasedPackages"] = &ShopServiceProcessor::process_getNewlyReleasedPackages;
    processMap_["getPopularPackages"] = &ShopServiceProcessor::process_getPopularPackages;
    processMap_["getPresentsReceived"] = &ShopServiceProcessor::process_getPresentsReceived;
    processMap_["getPresentsSent"] = &ShopServiceProcessor::process_getPresentsSent;
    processMap_["getProduct"] = &ShopServiceProcessor::process_getProduct;
    processMap_["getProductList"] = &ShopServiceProcessor::process_getProductList;
    processMap_["getProductListWithCarrier"] = &ShopServiceProcessor::process_getProductListWithCarrier;
    processMap_["getProductWithCarrier"] = &ShopServiceProcessor::process_getProductWithCarrier;
    processMap_["getPurchaseHistory"] = &ShopServiceProcessor::process_getPurchaseHistory;
    processMap_["getTotalBalance"] = &ShopServiceProcessor::process_getTotalBalance;
    processMap_["notifyDownloaded"] = &ShopServiceProcessor::process_notifyDownloaded;
    processMap_["reserveCoinPurchase"] = &ShopServiceProcessor::process_reserveCoinPurchase;
    processMap_["reservePayment"] = &ShopServiceProcessor::process_reservePayment;
  }

  virtual ~ShopServiceProcessor() {}
};

class ShopServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ShopServiceProcessorFactory(const ::std::shared_ptr< ShopServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< ShopServiceIfFactory > handlerFactory_;
};

class ShopServiceMultiface : virtual public ShopServiceIf {
 public:
  ShopServiceMultiface(std::vector<std::shared_ptr<ShopServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ShopServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<ShopServiceIf> > ifaces_;
  ShopServiceMultiface() {}
  void add(::std::shared_ptr<ShopServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void buyCoinProduct(const PaymentReservation& paymentReservation) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->buyCoinProduct(paymentReservation);
    }
    ifaces_[i]->buyCoinProduct(paymentReservation);
  }

  void buyFreeProduct(const std::string& receiverMid, const std::string& productId, const int32_t messageTemplate, const std::string& language, const std::string& country, const int64_t packageId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->buyFreeProduct(receiverMid, productId, messageTemplate, language, country, packageId);
    }
    ifaces_[i]->buyFreeProduct(receiverMid, productId, messageTemplate, language, country, packageId);
  }

  void buyMustbuyProduct(const std::string& receiverMid, const std::string& productId, const int32_t messageTemplate, const std::string& language, const std::string& country, const int64_t packageId, const std::string& serialNumber) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->buyMustbuyProduct(receiverMid, productId, messageTemplate, language, country, packageId, serialNumber);
    }
    ifaces_[i]->buyMustbuyProduct(receiverMid, productId, messageTemplate, language, country, packageId, serialNumber);
  }

  void checkCanReceivePresent(const std::string& recipientMid, const int64_t packageId, const std::string& language, const std::string& country) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->checkCanReceivePresent(recipientMid, packageId, language, country);
    }
    ifaces_[i]->checkCanReceivePresent(recipientMid, packageId, language, country);
  }

  void getActivePurchases(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getActivePurchases(_return, start, size, language, country);
    }
    ifaces_[i]->getActivePurchases(_return, start, size, language, country);
    return;
  }

  void getActivePurchaseVersions(ProductSimpleList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getActivePurchaseVersions(_return, start, size, language, country);
    }
    ifaces_[i]->getActivePurchaseVersions(_return, start, size, language, country);
    return;
  }

  void getCoinProducts(std::vector<CoinProductItem> & _return, const PaymentType::type appStoreCode, const std::string& country, const std::string& language) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCoinProducts(_return, appStoreCode, country, language);
    }
    ifaces_[i]->getCoinProducts(_return, appStoreCode, country, language);
    return;
  }

  void getCoinProductsByPgCode(std::vector<CoinProductItem> & _return, const PaymentType::type appStoreCode, const PaymentPgType::type pgCode, const std::string& country, const std::string& language) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCoinProductsByPgCode(_return, appStoreCode, pgCode, country, language);
    }
    ifaces_[i]->getCoinProductsByPgCode(_return, appStoreCode, pgCode, country, language);
    return;
  }

  void getCoinPurchaseHistory(CoinHistoryResult& _return, const CoinHistoryCondition& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCoinPurchaseHistory(_return, request);
    }
    ifaces_[i]->getCoinPurchaseHistory(_return, request);
    return;
  }

  void getCoinUseAndRefundHistory(CoinHistoryResult& _return, const CoinHistoryCondition& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCoinUseAndRefundHistory(_return, request);
    }
    ifaces_[i]->getCoinUseAndRefundHistory(_return, request);
    return;
  }

  void getDownloads(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDownloads(_return, start, size, language, country);
    }
    ifaces_[i]->getDownloads(_return, start, size, language, country);
    return;
  }

  void getEventPackages(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getEventPackages(_return, start, size, language, country);
    }
    ifaces_[i]->getEventPackages(_return, start, size, language, country);
    return;
  }

  void getNewlyReleasedPackages(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getNewlyReleasedPackages(_return, start, size, language, country);
    }
    ifaces_[i]->getNewlyReleasedPackages(_return, start, size, language, country);
    return;
  }

  void getPopularPackages(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPopularPackages(_return, start, size, language, country);
    }
    ifaces_[i]->getPopularPackages(_return, start, size, language, country);
    return;
  }

  void getPresentsReceived(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPresentsReceived(_return, start, size, language, country);
    }
    ifaces_[i]->getPresentsReceived(_return, start, size, language, country);
    return;
  }

  void getPresentsSent(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPresentsSent(_return, start, size, language, country);
    }
    ifaces_[i]->getPresentsSent(_return, start, size, language, country);
    return;
  }

  void getProduct(Product& _return, const int64_t packageID, const std::string& language, const std::string& country) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getProduct(_return, packageID, language, country);
    }
    ifaces_[i]->getProduct(_return, packageID, language, country);
    return;
  }

  void getProductList(ProductList& _return, const std::vector<std::string> & productIdList, const std::string& language, const std::string& country) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getProductList(_return, productIdList, language, country);
    }
    ifaces_[i]->getProductList(_return, productIdList, language, country);
    return;
  }

  void getProductListWithCarrier(ProductList& _return, const std::vector<std::string> & productIdList, const std::string& language, const std::string& country, const std::string& carrierCode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getProductListWithCarrier(_return, productIdList, language, country, carrierCode);
    }
    ifaces_[i]->getProductListWithCarrier(_return, productIdList, language, country, carrierCode);
    return;
  }

  void getProductWithCarrier(Product& _return, const int64_t packageID, const std::string& language, const std::string& country, const std::string& carrierCode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getProductWithCarrier(_return, packageID, language, country, carrierCode);
    }
    ifaces_[i]->getProductWithCarrier(_return, packageID, language, country, carrierCode);
    return;
  }

  void getPurchaseHistory(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPurchaseHistory(_return, start, size, language, country);
    }
    ifaces_[i]->getPurchaseHistory(_return, start, size, language, country);
    return;
  }

  void getTotalBalance(Coin& _return, const PaymentType::type appStoreCode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTotalBalance(_return, appStoreCode);
    }
    ifaces_[i]->getTotalBalance(_return, appStoreCode);
    return;
  }

  int64_t notifyDownloaded(const int64_t packageId, const std::string& language) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->notifyDownloaded(packageId, language);
    }
    return ifaces_[i]->notifyDownloaded(packageId, language);
  }

  void reserveCoinPurchase(PaymentReservationResult& _return, const CoinPurchaseReservation& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reserveCoinPurchase(_return, request);
    }
    ifaces_[i]->reserveCoinPurchase(_return, request);
    return;
  }

  void reservePayment(PaymentReservationResult& _return, const PaymentReservation& paymentReservation) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reservePayment(_return, paymentReservation);
    }
    ifaces_[i]->reservePayment(_return, paymentReservation);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ShopServiceConcurrentClient : virtual public ShopServiceIf {
 public:
  ShopServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  ShopServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void buyCoinProduct(const PaymentReservation& paymentReservation);
  int32_t send_buyCoinProduct(const PaymentReservation& paymentReservation);
  void recv_buyCoinProduct(const int32_t seqid);
  void buyFreeProduct(const std::string& receiverMid, const std::string& productId, const int32_t messageTemplate, const std::string& language, const std::string& country, const int64_t packageId);
  int32_t send_buyFreeProduct(const std::string& receiverMid, const std::string& productId, const int32_t messageTemplate, const std::string& language, const std::string& country, const int64_t packageId);
  void recv_buyFreeProduct(const int32_t seqid);
  void buyMustbuyProduct(const std::string& receiverMid, const std::string& productId, const int32_t messageTemplate, const std::string& language, const std::string& country, const int64_t packageId, const std::string& serialNumber);
  int32_t send_buyMustbuyProduct(const std::string& receiverMid, const std::string& productId, const int32_t messageTemplate, const std::string& language, const std::string& country, const int64_t packageId, const std::string& serialNumber);
  void recv_buyMustbuyProduct(const int32_t seqid);
  void checkCanReceivePresent(const std::string& recipientMid, const int64_t packageId, const std::string& language, const std::string& country);
  int32_t send_checkCanReceivePresent(const std::string& recipientMid, const int64_t packageId, const std::string& language, const std::string& country);
  void recv_checkCanReceivePresent(const int32_t seqid);
  void getActivePurchases(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country);
  int32_t send_getActivePurchases(const int64_t start, const int32_t size, const std::string& language, const std::string& country);
  void recv_getActivePurchases(ProductList& _return, const int32_t seqid);
  void getActivePurchaseVersions(ProductSimpleList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country);
  int32_t send_getActivePurchaseVersions(const int64_t start, const int32_t size, const std::string& language, const std::string& country);
  void recv_getActivePurchaseVersions(ProductSimpleList& _return, const int32_t seqid);
  void getCoinProducts(std::vector<CoinProductItem> & _return, const PaymentType::type appStoreCode, const std::string& country, const std::string& language);
  int32_t send_getCoinProducts(const PaymentType::type appStoreCode, const std::string& country, const std::string& language);
  void recv_getCoinProducts(std::vector<CoinProductItem> & _return, const int32_t seqid);
  void getCoinProductsByPgCode(std::vector<CoinProductItem> & _return, const PaymentType::type appStoreCode, const PaymentPgType::type pgCode, const std::string& country, const std::string& language);
  int32_t send_getCoinProductsByPgCode(const PaymentType::type appStoreCode, const PaymentPgType::type pgCode, const std::string& country, const std::string& language);
  void recv_getCoinProductsByPgCode(std::vector<CoinProductItem> & _return, const int32_t seqid);
  void getCoinPurchaseHistory(CoinHistoryResult& _return, const CoinHistoryCondition& request);
  int32_t send_getCoinPurchaseHistory(const CoinHistoryCondition& request);
  void recv_getCoinPurchaseHistory(CoinHistoryResult& _return, const int32_t seqid);
  void getCoinUseAndRefundHistory(CoinHistoryResult& _return, const CoinHistoryCondition& request);
  int32_t send_getCoinUseAndRefundHistory(const CoinHistoryCondition& request);
  void recv_getCoinUseAndRefundHistory(CoinHistoryResult& _return, const int32_t seqid);
  void getDownloads(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country);
  int32_t send_getDownloads(const int64_t start, const int32_t size, const std::string& language, const std::string& country);
  void recv_getDownloads(ProductList& _return, const int32_t seqid);
  void getEventPackages(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country);
  int32_t send_getEventPackages(const int64_t start, const int32_t size, const std::string& language, const std::string& country);
  void recv_getEventPackages(ProductList& _return, const int32_t seqid);
  void getNewlyReleasedPackages(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country);
  int32_t send_getNewlyReleasedPackages(const int64_t start, const int32_t size, const std::string& language, const std::string& country);
  void recv_getNewlyReleasedPackages(ProductList& _return, const int32_t seqid);
  void getPopularPackages(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country);
  int32_t send_getPopularPackages(const int64_t start, const int32_t size, const std::string& language, const std::string& country);
  void recv_getPopularPackages(ProductList& _return, const int32_t seqid);
  void getPresentsReceived(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country);
  int32_t send_getPresentsReceived(const int64_t start, const int32_t size, const std::string& language, const std::string& country);
  void recv_getPresentsReceived(ProductList& _return, const int32_t seqid);
  void getPresentsSent(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country);
  int32_t send_getPresentsSent(const int64_t start, const int32_t size, const std::string& language, const std::string& country);
  void recv_getPresentsSent(ProductList& _return, const int32_t seqid);
  void getProduct(Product& _return, const int64_t packageID, const std::string& language, const std::string& country);
  int32_t send_getProduct(const int64_t packageID, const std::string& language, const std::string& country);
  void recv_getProduct(Product& _return, const int32_t seqid);
  void getProductList(ProductList& _return, const std::vector<std::string> & productIdList, const std::string& language, const std::string& country);
  int32_t send_getProductList(const std::vector<std::string> & productIdList, const std::string& language, const std::string& country);
  void recv_getProductList(ProductList& _return, const int32_t seqid);
  void getProductListWithCarrier(ProductList& _return, const std::vector<std::string> & productIdList, const std::string& language, const std::string& country, const std::string& carrierCode);
  int32_t send_getProductListWithCarrier(const std::vector<std::string> & productIdList, const std::string& language, const std::string& country, const std::string& carrierCode);
  void recv_getProductListWithCarrier(ProductList& _return, const int32_t seqid);
  void getProductWithCarrier(Product& _return, const int64_t packageID, const std::string& language, const std::string& country, const std::string& carrierCode);
  int32_t send_getProductWithCarrier(const int64_t packageID, const std::string& language, const std::string& country, const std::string& carrierCode);
  void recv_getProductWithCarrier(Product& _return, const int32_t seqid);
  void getPurchaseHistory(ProductList& _return, const int64_t start, const int32_t size, const std::string& language, const std::string& country);
  int32_t send_getPurchaseHistory(const int64_t start, const int32_t size, const std::string& language, const std::string& country);
  void recv_getPurchaseHistory(ProductList& _return, const int32_t seqid);
  void getTotalBalance(Coin& _return, const PaymentType::type appStoreCode);
  int32_t send_getTotalBalance(const PaymentType::type appStoreCode);
  void recv_getTotalBalance(Coin& _return, const int32_t seqid);
  int64_t notifyDownloaded(const int64_t packageId, const std::string& language);
  int32_t send_notifyDownloaded(const int64_t packageId, const std::string& language);
  int64_t recv_notifyDownloaded(const int32_t seqid);
  void reserveCoinPurchase(PaymentReservationResult& _return, const CoinPurchaseReservation& request);
  int32_t send_reserveCoinPurchase(const CoinPurchaseReservation& request);
  void recv_reserveCoinPurchase(PaymentReservationResult& _return, const int32_t seqid);
  void reservePayment(PaymentReservationResult& _return, const PaymentReservation& paymentReservation);
  int32_t send_reservePayment(const PaymentReservation& paymentReservation);
  void recv_reservePayment(PaymentReservationResult& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
