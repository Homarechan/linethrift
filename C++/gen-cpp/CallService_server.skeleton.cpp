// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "CallService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class CallServiceHandler : virtual public CallServiceIf {
 public:
  CallServiceHandler() {
    // Your initialization goes here
  }

  UserStatus::type getUserStatus(const std::string& mid) {
    // Your implementation goes here
    printf("getUserStatus\n");
  }

  void updateProfileAttributeForChannel(const ProfileAttribute::type profileAttribute, const std::string& value) {
    // Your implementation goes here
    printf("updateProfileAttributeForChannel\n");
  }

  void updateExtendedProfileAttribute(const ExtendedProfileAttribute::type attr, const ExtendedProfile& extendedProfile) {
    // Your implementation goes here
    printf("updateExtendedProfileAttribute\n");
  }

  void getAllSimpleChannelContacts(std::vector<SimpleChannelContact> & _return, const bool statusSticonFallbackDisabled) {
    // Your implementation goes here
    printf("getAllSimpleChannelContacts\n");
  }

  void getUserIdentities(std::map<RegistrationType::type, std::string> & _return) {
    // Your implementation goes here
    printf("getUserIdentities\n");
  }

  void markPaidCallAd(PaidCallDialing& _return, const std::string& dialedNumber, const std::string& language, const bool disableCallerId) {
    // Your implementation goes here
    printf("markPaidCallAd\n");
  }

  bool isGroupMember(const std::string& groupId) {
    // Your implementation goes here
    printf("isGroupMember\n");
  }

  void getPhoneInfoFromPhoneNumber(PhoneInfoForChannel& _return, const std::string& region, const std::string& phoneNumber) {
    // Your implementation goes here
    printf("getPhoneInfoFromPhoneNumber\n");
  }

  void redeemPaidCallVoucher(PaidCallRedeemResult& _return, const std::string& serial, const std::string& language) {
    // Your implementation goes here
    printf("redeemPaidCallVoucher\n");
  }

  void getPreferredDisplayName(std::map<std::string, std::string> & _return, const std::vector<std::string> & mids) {
    // Your implementation goes here
    printf("getPreferredDisplayName\n");
  }

  void getContactsForChannel(std::vector<Contact> & _return, const std::vector<std::string> & ids) {
    // Your implementation goes here
    printf("getContactsForChannel\n");
  }

  void getCallCreditProducts(std::vector<CoinProductItem> & _return, const PaymentType::type appStoreCode, const PaymentPgType::type pgCode, const std::string& country, const std::string& language) {
    // Your implementation goes here
    printf("getCallCreditProducts\n");
  }

  void getCompactContacts(std::vector<CompactContact> & _return, const int64_t lastModifiedTimestamp) {
    // Your implementation goes here
    printf("getCompactContacts\n");
  }

  void notifyNotiCenterEvent(const NotiCenterEventData& event) {
    // Your implementation goes here
    printf("notifyNotiCenterEvent\n");
  }

  bool isInContact(const std::string& mid) {
    // Your implementation goes here
    printf("isInContact\n");
  }

  void lookupGroupMembers(std::vector<SimpleChannelContact> & _return, const std::string& groupId, const std::vector<std::string> & mids) {
    // Your implementation goes here
    printf("lookupGroupMembers\n");
  }

  void getRoomInformation(Room& _return, const std::string& roomMid) {
    // Your implementation goes here
    printf("getRoomInformation\n");
  }

  void getGroupCall(GroupCall& _return, const std::string& chatMid) {
    // Your implementation goes here
    printf("getGroupCall\n");
  }

  bool isAllowSecondaryDeviceLogin() {
    // Your implementation goes here
    printf("isAllowSecondaryDeviceLogin\n");
  }

  void getPrimaryClientForChannel(SimpleChannelClient& _return) {
    // Your implementation goes here
    printf("getPrimaryClientForChannel\n");
  }

  void createRoomWithBuddy(Room& _return, const int32_t reqSeq, const std::string& buddyMid, const std::vector<std::string> & contactIds) {
    // Your implementation goes here
    printf("createRoomWithBuddy\n");
  }

  void getDisplayName(std::string& _return, const std::string& mid) {
    // Your implementation goes here
    printf("getDisplayName\n");
  }

  void getPaidCallMetadata(PaidCallMetadataResult& _return, const std::string& language) {
    // Your implementation goes here
    printf("getPaidCallMetadata\n");
  }

  void getMid(std::string& _return) {
    // Your implementation goes here
    printf("getMid\n");
  }

  void getUserCountryForBilling(std::string& _return, const std::string& country, const std::string& remoteIp) {
    // Your implementation goes here
    printf("getUserCountryForBilling\n");
  }

  void getFavoriteGroupIdsForChannel(std::vector<std::string> & _return) {
    // Your implementation goes here
    printf("getFavoriteGroupIdsForChannel\n");
  }

  void getPaidCallHistory(PaidCallHistoryResult& _return, const int64_t start, const int32_t size, const std::string& language) {
    // Your implementation goes here
    printf("getPaidCallHistory\n");
  }

  void sendPinCodeOperation(const std::string& verifier) {
    // Your implementation goes here
    printf("sendPinCodeOperation\n");
  }

  void inviteIntoGroupCall(const std::string& chatMid, const std::vector<std::string> & memberMids, const GroupCallMediaType::type mediaType) {
    // Your implementation goes here
    printf("inviteIntoGroupCall\n");
  }

  void getFriendMids(std::vector<std::string> & _return) {
    // Your implementation goes here
    printf("getFriendMids\n");
  }

  void getMetaProfile(MetaProfile& _return) {
    // Your implementation goes here
    printf("getMetaProfile\n");
  }

  void sendMessageForChannel(Message& _return, const Message& message) {
    // Your implementation goes here
    printf("sendMessageForChannel\n");
  }

  int64_t activeBuddySubscriberCount() {
    // Your implementation goes here
    printf("activeBuddySubscriberCount\n");
  }

  void getCallCreditPurchaseHistory(CoinHistoryResult& _return, const CoinHistoryCondition& request) {
    // Your implementation goes here
    printf("getCallCreditPurchaseHistory\n");
  }

  bool isRoomMember(const std::string& roomId) {
    // Your implementation goes here
    printf("isRoomMember\n");
  }

  void sendSystemOAMessage(Message& _return, const Message& message) {
    // Your implementation goes here
    printf("sendSystemOAMessage\n");
  }

  void acquirePaidCallRoute(PaidCallResponse& _return, const PaidCallType::type paidCallType, const std::string& dialedNumber, const std::string& language, const std::string& networkCode, const bool disableCallerId, const std::string& referer, const std::string& adSessionId) {
    // Your implementation goes here
    printf("acquirePaidCallRoute\n");
  }

  void getGroupsForChannel(std::vector<Group> & _return, const std::vector<std::string> & groupIds) {
    // Your implementation goes here
    printf("getGroupsForChannel\n");
  }

  int64_t getUserCreateTime() {
    // Your implementation goes here
    printf("getUserCreateTime\n");
  }

  void registerChannelCP(std::string& _return, const std::string& cpId, const std::string& registerPassword) {
    // Your implementation goes here
    printf("registerChannelCP\n");
  }

  void reserveCallCreditPurchase(PaymentReservationResult& _return, const CoinPurchaseReservation& request) {
    // Your implementation goes here
    printf("reserveCallCreditPurchase\n");
  }

  void acquirePaidCallCurrencyExchangeRate(std::vector<PaidCallCurrencyExchangeRate> & _return, const std::string& language) {
    // Your implementation goes here
    printf("acquirePaidCallCurrencyExchangeRate\n");
  }

  void getRoomMemberMidsForAppPlatform(std::vector<std::string> & _return, const std::string& roomId) {
    // Your implementation goes here
    printf("getRoomMemberMidsForAppPlatform\n");
  }

  void getPaidCallBalanceList(std::vector<PaidCallBalance> & _return, const std::string& language) {
    // Your implementation goes here
    printf("getPaidCallBalanceList\n");
  }

  void getPersonalInfos(std::map<PersonalInfo::type, std::string> & _return, const std::set<PersonalInfo::type> & requiredPersonalInfos) {
    // Your implementation goes here
    printf("getPersonalInfos\n");
  }

  void getPrimaryClientsForChannel(std::vector<SimpleChannelClient> & _return, const std::vector<std::string> & userMids) {
    // Your implementation goes here
    printf("getPrimaryClientsForChannel\n");
  }

  void addBuddyToContact(ContactTransition& _return, const std::string& buddyMid) {
    // Your implementation goes here
    printf("addBuddyToContact\n");
  }

  void getGroupMemberMidsForAppPlatform(std::vector<std::string> & _return, const std::string& groupId) {
    // Your implementation goes here
    printf("getGroupMemberMidsForAppPlatform\n");
  }

  void getUserLanguage(std::string& _return) {
    // Your implementation goes here
    printf("getUserLanguage\n");
  }

  void lookupPaidCall(PaidCallResponse& _return, const std::string& dialedNumber, const std::string& language, const std::string& referer) {
    // Your implementation goes here
    printf("lookupPaidCall\n");
  }

  void getExtendedProfile(ExtendedProfile& _return) {
    // Your implementation goes here
    printf("getExtendedProfile\n");
  }

  void getReverseCompactContacts(std::map<std::string, CompactContact> & _return, const std::vector<std::string> & ids) {
    // Your implementation goes here
    printf("getReverseCompactContacts\n");
  }

  void getPaidCallAdStatus(PaidCallAdResult& _return) {
    // Your implementation goes here
    printf("getPaidCallAdStatus\n");
  }

  void findContactByUseridWithoutAbuseBlockForChannel(Contact& _return, const std::string& userid) {
    // Your implementation goes here
    printf("findContactByUseridWithoutAbuseBlockForChannel\n");
  }

  void getGroupMemberMids(std::vector<std::string> & _return, const std::string& groupId) {
    // Your implementation goes here
    printf("getGroupMemberMids\n");
  }

  void sendMessageWithoutRelationship(Message& _return, const Message& message) {
    // Your implementation goes here
    printf("sendMessageWithoutRelationship\n");
  }

  void displayBuddySubscriberCountInBulk(std::map<std::string, int64_t> & _return, const std::vector<std::string> & mids) {
    // Your implementation goes here
    printf("displayBuddySubscriberCountInBulk\n");
  }

  void lookupRoomMembers(std::vector<SimpleChannelContact> & _return, const std::string& roomId, const std::vector<std::string> & mids) {
    // Your implementation goes here
    printf("lookupRoomMembers\n");
  }

  void getFavoriteMidsForChannel(std::vector<std::string> & _return) {
    // Your implementation goes here
    printf("getFavoriteMidsForChannel\n");
  }

  void getAllContactIdsForChannel(std::vector<std::string> & _return) {
    // Your implementation goes here
    printf("getAllContactIdsForChannel\n");
  }

  int64_t displayBuddySubscriberCount() {
    // Your implementation goes here
    printf("displayBuddySubscriberCount\n");
  }

  void getProfileForChannel(Profile& _return) {
    // Your implementation goes here
    printf("getProfileForChannel\n");
  }

  void getUserTickets(std::vector<UserTicketResponse> & _return, const std::vector<std::string> & userMids) {
    // Your implementation goes here
    printf("getUserTickets\n");
  }

  void getOAFriendMids(std::vector<std::string> & _return) {
    // Your implementation goes here
    printf("getOAFriendMids\n");
  }

  void searchPaidCallUserRate(std::vector<PaidCallUserRate> & _return, const std::string& countryCode, const std::string& language) {
    // Your implementation goes here
    printf("searchPaidCallUserRate\n");
  }

  void getJoinedGroupIdsForChannel(std::vector<std::string> & _return) {
    // Your implementation goes here
    printf("getJoinedGroupIdsForChannel\n");
  }

  void acquireGroupCallRoute(GroupCallRoute& _return, const std::string& chatMid, const GroupCallMediaType::type mediaType) {
    // Your implementation goes here
    printf("acquireGroupCallRoute\n");
  }

  void getUserMidsWhoAddedMe(std::vector<std::string> & _return) {
    // Your implementation goes here
    printf("getUserMidsWhoAddedMe\n");
  }

  void getIdentityCredential(IdentityCredential& _return) {
    // Your implementation goes here
    printf("getIdentityCredential\n");
  }

  void addOperationForChannel(const OpType::type opType, const std::string& param1, const std::string& param2, const std::string& param3) {
    // Your implementation goes here
    printf("addOperationForChannel\n");
  }

  void getSimpleChannelContacts(std::vector<SimpleChannelContact> & _return, const std::vector<std::string> & ids, const bool statusSticonFallbackDisabled) {
    // Your implementation goes here
    printf("getSimpleChannelContacts\n");
  }

  int64_t getUserLastSentMessageTimeStamp(const std::string& mid) {
    // Your implementation goes here
    printf("getUserLastSentMessageTimeStamp\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<CallServiceHandler> handler(new CallServiceHandler());
  ::std::shared_ptr<TProcessor> processor(new CallServiceProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

