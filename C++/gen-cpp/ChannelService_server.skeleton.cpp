// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ChannelService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class ChannelServiceHandler : virtual public ChannelServiceIf {
 public:
  ChannelServiceHandler() {
    // Your initialization goes here
  }

  void issueOTP(OTPResult& _return, const std::string& channelId) {
    // Your implementation goes here
    printf("issueOTP\n");
  }

  void approveChannelAndIssueChannelToken(ChannelToken& _return, const std::string& channelId) {
    // Your implementation goes here
    printf("approveChannelAndIssueChannelToken\n");
  }

  void approveChannelAndIssueRequestToken(std::string& _return, const std::string& channelId, const std::string& otpId) {
    // Your implementation goes here
    printf("approveChannelAndIssueRequestToken\n");
  }

  void fetchNotificationItems(NotificationFetchResult& _return, const int64_t localRev) {
    // Your implementation goes here
    printf("fetchNotificationItems\n");
  }

  void getApprovedChannels(ApprovedChannelInfos& _return, const int64_t lastSynced, const std::string& locale) {
    // Your implementation goes here
    printf("getApprovedChannels\n");
  }

  void getChannelInfo(ChannelInfo& _return, const std::string& channelId, const std::string& locale) {
    // Your implementation goes here
    printf("getChannelInfo\n");
  }

  void getChannelNotificationSetting(ChannelNotificationSetting& _return, const std::string& channelId, const std::string& locale) {
    // Your implementation goes here
    printf("getChannelNotificationSetting\n");
  }

  void getChannelNotificationSettings(std::vector<ChannelNotificationSetting> & _return, const std::string& locale) {
    // Your implementation goes here
    printf("getChannelNotificationSettings\n");
  }

  void getChannels(ChannelInfos& _return, const int64_t lastSynced, const std::string& locale) {
    // Your implementation goes here
    printf("getChannels\n");
  }

  void getDomains(ChannelDomains& _return, const int64_t lastSynced) {
    // Your implementation goes here
    printf("getDomains\n");
  }

  void getFriendChannelMatrices(FriendChannelMatricesResponse& _return, const std::vector<std::string> & channelIds) {
    // Your implementation goes here
    printf("getFriendChannelMatrices\n");
  }

  bool updateChannelSettings(const ChannelSettings& channelSettings) {
    // Your implementation goes here
    printf("updateChannelSettings\n");
  }

  void getCommonDomains(ChannelDomains& _return, const int64_t lastSynced) {
    // Your implementation goes here
    printf("getCommonDomains\n");
  }

  int32_t getNotificationBadgeCount(const int64_t localRev) {
    // Your implementation goes here
    printf("getNotificationBadgeCount\n");
  }

  void issueChannelToken(ChannelToken& _return, const std::string& channelId) {
    // Your implementation goes here
    printf("issueChannelToken\n");
  }

  void issueRequestToken(std::string& _return, const std::string& channelId, const std::string& otpId) {
    // Your implementation goes here
    printf("issueRequestToken\n");
  }

  void issueRequestTokenWithAuthScheme(RequestTokenResponse& _return, const std::string& channelId, const std::string& otpId, const std::vector<std::string> & authScheme, const std::string& returnUrl) {
    // Your implementation goes here
    printf("issueRequestTokenWithAuthScheme\n");
  }

  void issueRequestTokenForAutoLogin(std::string& _return, const std::string& channelId, const std::string& otpId, const std::string& redirectUrl) {
    // Your implementation goes here
    printf("issueRequestTokenForAutoLogin\n");
  }

  void getUpdatedChannelIds(std::vector<std::string> & _return, const std::vector<ChannelIdWithLastUpdated> & channelIds) {
    // Your implementation goes here
    printf("getUpdatedChannelIds\n");
  }

  void reserveCoinUse(std::string& _return, const CoinUseReservation& request, const std::string& locale) {
    // Your implementation goes here
    printf("reserveCoinUse\n");
  }

  void revokeChannel(const std::string& channelId) {
    // Your implementation goes here
    printf("revokeChannel\n");
  }

  void syncChannelData(ChannelSyncDatas& _return, const int64_t lastSynced, const std::string& locale) {
    // Your implementation goes here
    printf("syncChannelData\n");
  }

  void updateChannelNotificationSetting(const std::vector<ChannelNotificationSetting> & setting) {
    // Your implementation goes here
    printf("updateChannelNotificationSetting\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<ChannelServiceHandler> handler(new ChannelServiceHandler());
  ::std::shared_ptr<TProcessor> processor(new ChannelServiceProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

