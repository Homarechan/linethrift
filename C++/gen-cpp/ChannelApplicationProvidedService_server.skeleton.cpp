// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ChannelApplicationProvidedService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class ChannelApplicationProvidedServiceHandler : virtual public ChannelApplicationProvidedServiceIf {
 public:
  ChannelApplicationProvidedServiceHandler() {
    // Your initialization goes here
  }

  int64_t activeBuddySubscriberCount() {
    // Your implementation goes here
    printf("activeBuddySubscriberCount\n");
  }

  void addOperationForChannel(const OpType::type opType, const std::string& param1, const std::string& param2, const std::string& param3) {
    // Your implementation goes here
    printf("addOperationForChannel\n");
  }

  int64_t displayBuddySubscriberCount() {
    // Your implementation goes here
    printf("displayBuddySubscriberCount\n");
  }

  void findContactByUseridWithoutAbuseBlockForChannel(Contact& _return, const std::string& userid) {
    // Your implementation goes here
    printf("findContactByUseridWithoutAbuseBlockForChannel\n");
  }

  void getAllContactIdsForChannel(std::vector<std::string> & _return) {
    // Your implementation goes here
    printf("getAllContactIdsForChannel\n");
  }

  void getCompactContacts(std::vector<CompactContact> & _return, const int64_t lastModifiedTimestamp) {
    // Your implementation goes here
    printf("getCompactContacts\n");
  }

  void getContactsForChannel(std::vector<Contact> & _return, const std::vector<std::string> & ids) {
    // Your implementation goes here
    printf("getContactsForChannel\n");
  }

  void getDisplayName(std::string& _return, const std::string& mid) {
    // Your implementation goes here
    printf("getDisplayName\n");
  }

  void getFavoriteMidsForChannel(std::vector<std::string> & _return) {
    // Your implementation goes here
    printf("getFavoriteMidsForChannel\n");
  }

  void getFriendMids(std::vector<std::string> & _return) {
    // Your implementation goes here
    printf("getFriendMids\n");
  }

  void getGroupMemberMids(std::vector<std::string> & _return, const std::string& groupId) {
    // Your implementation goes here
    printf("getGroupMemberMids\n");
  }

  void getGroupsForChannel(std::vector<Group> & _return, const std::vector<std::string> & groupIds) {
    // Your implementation goes here
    printf("getGroupsForChannel\n");
  }

  void getIdentityCredential(IdentityCredential& _return) {
    // Your implementation goes here
    printf("getIdentityCredential\n");
  }

  void getJoinedGroupIdsForChannel(std::vector<std::string> & _return) {
    // Your implementation goes here
    printf("getJoinedGroupIdsForChannel\n");
  }

  void getMetaProfile(MetaProfile& _return) {
    // Your implementation goes here
    printf("getMetaProfile\n");
  }

  void getMid(std::string& _return) {
    // Your implementation goes here
    printf("getMid\n");
  }

  void getPrimaryClientForChannel(SimpleChannelClient& _return) {
    // Your implementation goes here
    printf("getPrimaryClientForChannel\n");
  }

  void getProfileForChannel(Profile& _return) {
    // Your implementation goes here
    printf("getProfileForChannel\n");
  }

  void getSimpleChannelContacts(std::vector<SimpleChannelContact> & _return, const std::vector<std::string> & ids) {
    // Your implementation goes here
    printf("getSimpleChannelContacts\n");
  }

  void getUserCountryForBilling(std::string& _return, const std::string& country, const std::string& remoteIp) {
    // Your implementation goes here
    printf("getUserCountryForBilling\n");
  }

  int64_t getUserCreateTime() {
    // Your implementation goes here
    printf("getUserCreateTime\n");
  }

  void getUserIdentities(std::map<RegistrationType::type, std::string> & _return) {
    // Your implementation goes here
    printf("getUserIdentities\n");
  }

  void getUserLanguage(std::string& _return) {
    // Your implementation goes here
    printf("getUserLanguage\n");
  }

  void getUserMidsWhoAddedMe(std::vector<std::string> & _return) {
    // Your implementation goes here
    printf("getUserMidsWhoAddedMe\n");
  }

  bool isGroupMember(const std::string& groupId) {
    // Your implementation goes here
    printf("isGroupMember\n");
  }

  bool isInContact(const std::string& mid) {
    // Your implementation goes here
    printf("isInContact\n");
  }

  void registerChannelCP(std::string& _return, const std::string& cpId, const std::string& registerPassword) {
    // Your implementation goes here
    printf("registerChannelCP\n");
  }

  void removeNotificationStatus(const NotificationStatus::type notificationStatus) {
    // Your implementation goes here
    printf("removeNotificationStatus\n");
  }

  void sendMessageForChannel(Message& _return, const Message& message) {
    // Your implementation goes here
    printf("sendMessageForChannel\n");
  }

  void sendPinCodeOperation(const std::string& verifier) {
    // Your implementation goes here
    printf("sendPinCodeOperation\n");
  }

  void updateProfileAttributeForChannel(const ProfileAttribute::type profileAttribute, const std::string& value) {
    // Your implementation goes here
    printf("updateProfileAttributeForChannel\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<ChannelApplicationProvidedServiceHandler> handler(new ChannelApplicationProvidedServiceHandler());
  ::std::shared_ptr<TProcessor> processor(new ChannelApplicationProvidedServiceProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

