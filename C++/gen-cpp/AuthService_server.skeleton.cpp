// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "AuthService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class AuthServiceHandler : virtual public AuthServiceIf {
 public:
  AuthServiceHandler() {
    // Your initialization goes here
  }

  void normalizePhoneNumber(std::string& _return, const std::string& countryCode, const std::string& phoneNumber, const std::string& countryCodeHint) {
    // Your implementation goes here
    printf("normalizePhoneNumber\n");
  }

  void respondE2EELoginRequest(const std::string& verifier, const E2EEPublicKey& publicKey, const std::string& encryptedKeyChain, const std::string& hashKeyChain, const ErrorCode::type errorCode) {
    // Your implementation goes here
    printf("respondE2EELoginRequest\n");
  }

  void confirmE2EELogin(std::string& _return, const std::string& verifier, const std::string& deviceSecret) {
    // Your implementation goes here
    printf("confirmE2EELogin\n");
  }

  void logoutZ() {
    // Your implementation goes here
    printf("logoutZ\n");
  }

  void loginZ(LoginResult& _return, const LoginRequest& loginRequest) {
    // Your implementation goes here
    printf("loginZ\n");
  }

  void issueTokenForAccountMigrationSettings(SecurityCenterResult& _return, const bool enforce) {
    // Your implementation goes here
    printf("issueTokenForAccountMigrationSettings\n");
  }

  void issueTokenForAccountMigration(SecurityCenterResult& _return, const std::string& migrationSessionId) {
    // Your implementation goes here
    printf("issueTokenForAccountMigration\n");
  }

  void verifyQrcodeWithE2EE(std::string& _return, const std::string& verifier, const std::string& pinCode, const ErrorCode::type errorCode, const E2EEPublicKey& publicKey, const std::string& encryptedKeyChain, const std::string& hashKeyChain) {
    // Your implementation goes here
    printf("verifyQrcodeWithE2EE\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<AuthServiceHandler> handler(new AuthServiceHandler());
  ::std::shared_ptr<TProcessor> processor(new AuthServiceProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

