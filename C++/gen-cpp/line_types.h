/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef line_TYPES_H
#define line_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




struct ApplicationType {
  enum type {
    IOS = 16,
    IOS_RC = 17,
    IOS_BETA = 18,
    IOS_ALPHA = 19,
    ANDROID = 32,
    ANDROID_RC = 33,
    ANDROID_BETA = 34,
    ANDROID_ALPHA = 35,
    WAP = 48,
    WAP_RC = 49,
    WAP_BETA = 50,
    WAP_ALPHA = 51,
    BOT = 64,
    BOT_RC = 65,
    BOT_BETA = 66,
    BOT_ALPHA = 67,
    WEB = 80,
    WEB_RC = 81,
    WEB_BETA = 82,
    WEB_ALPHA = 83,
    DESKTOPWIN = 96,
    DESKTOPWIN_RC = 97,
    DESKTOPWIN_BETA = 98,
    DESKTOPWIN_ALPHA = 99,
    DESKTOPMAC = 112,
    DESKTOPMAC_RC = 113,
    DESKTOPMAC_BETA = 114,
    DESKTOPMAC_ALPHA = 115,
    CHANNELGW = 128,
    CHANNELGW_RC = 129,
    CHANNELGW_BETA = 130,
    CHANNELGW_ALPHA = 131,
    CHANNELCP = 144,
    CHANNELCP_RC = 145,
    CHANNELCP_BETA = 146,
    CHANNELCP_ALPHA = 147,
    WINPHONE = 160,
    WINPHONE_RC = 161,
    WINPHONE_BETA = 162,
    WINPHONE_ALPHA = 163,
    BLACKBERRY = 176,
    BLACKBERRY_RC = 177,
    BLACKBERRY_BETA = 178,
    BLACKBERRY_ALPHA = 179,
    WINMETRO = 192,
    WINMETRO_RC = 193,
    WINMETRO_BETA = 194,
    WINMETRO_ALPHA = 195,
    S40 = 208,
    S40_RC = 209,
    S40_BETA = 210,
    S40_ALPHA = 211,
    CHRONO = 224,
    CHRONO_RC = 225,
    CHRONO_BETA = 226,
    CHRONO_ALPHA = 227,
    TIZEN = 256,
    TIZEN_RC = 257,
    TIZEN_BETA = 258,
    TIZEN_ALPHA = 259,
    VIRTUAL = 272,
    FIREFOXOS = 288,
    FIREFOXOS_RC = 289,
    FIREFOXOS_BETA = 290,
    FIREFOXOS_ALPHA = 291,
    IOSIPAD = 304,
    IOSIPAD_RC = 305,
    IOSIPAD_BETA = 306,
    IOSIPAD_ALPHA = 307,
    BIZIOS = 320,
    BIZIOS_RC = 321,
    BIZIOS_BETA = 322,
    BIZIOS_ALPHA = 323,
    BIZANDROID = 336,
    BIZANDROID_RC = 337,
    BIZANDROID_BETA = 338,
    BIZANDROID_ALPHA = 339,
    BIZBOT = 352,
    BIZBOT_RC = 353,
    BIZBOT_BETA = 354,
    BIZBOT_ALPHA = 355,
    CHROMEOS = 368,
    CHROMEOS_RC = 369,
    CHROMEOS_BETA = 370,
    CHROMEOS_ALPHA = 371,
    ANDROIDLITE = 384,
    ANDROIDLITE_RC = 385,
    ANDROIDLITE_BETA = 386,
    ANDROIDLITE_ALPHA = 387,
    WIN10 = 400,
    WIN10_RC = 401,
    WIN10_BETA = 402,
    WIN10_ALPHA = 403,
    BIZWEB = 416,
    BIZWEB_RC = 417,
    BIZWEB_BETA = 418,
    BIZWEB_ALPHA = 419,
    DUMMYPRIMARY = 432,
    DUMMYPRIMARY_RC = 433,
    DUMMYPRIMARY_BETA = 434,
    DUMMYPRIMARY_ALPHA = 435,
    SQUARE = 448,
    SQUARE_RC = 449,
    SQUARE_BETA = 450,
    SQUARE_ALPHA = 451,
    INTERNAL = 464,
    INTERNAL_RC = 465,
    INTERNAL_BETA = 466,
    INTERNAL_ALPHA = 467,
    CLOVAFRIENDS = 480,
    CLOVAFRIENDS_RC = 481,
    CLOVAFRIENDS_BETA = 482,
    CLOVAFRIENDS_ALPHA = 483
  };
};

extern const std::map<int, const char*> _ApplicationType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ApplicationType::type& val);

std::string to_string(const ApplicationType::type& val);

struct ExtendedProfileAttribute {
  enum type {

  };
};

extern const std::map<int, const char*> _ExtendedProfileAttribute_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ExtendedProfileAttribute::type& val);

std::string to_string(const ExtendedProfileAttribute::type& val);

struct PrivacyLevelType {
  enum type {
    PUBLIC = 0,
    PRIVATE = 1
  };
};

extern const std::map<int, const char*> _PrivacyLevelType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const PrivacyLevelType::type& val);

std::string to_string(const PrivacyLevelType::type& val);

struct PaidCallerIdStatus {
  enum type {
    NOT_SPECIFIED = 0,
    VALID = 1,
    VERIFICATION_REQUIRED = 2,
    NOT_PERMITTED = 3,
    LIMIT_EXCEEDED = 4,
    LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED = 5
  };
};

extern const std::map<int, const char*> _PaidCallerIdStatus_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const PaidCallerIdStatus::type& val);

std::string to_string(const PaidCallerIdStatus::type& val);

struct PaidCallProductType {
  enum type {
    COIN = 0,
    CREDIT = 1,
    MONTHLY = 2
  };
};

extern const std::map<int, const char*> _PaidCallProductType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const PaidCallProductType::type& val);

std::string to_string(const PaidCallProductType::type& val);

struct PaidCallType {
  enum type {
    OUT = 0,
    IN = 1,
    TOLLFREE = 2,
    RECORD = 3,
    AD = 4,
    CS = 5
  };
};

extern const std::map<int, const char*> _PaidCallType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const PaidCallType::type& val);

std::string to_string(const PaidCallType::type& val);

struct BotType {
  enum type {
    RESERVED = 0,
    OFFICIAL = 1,
    LINE_AT_0 = 2,
    LINE_AT = 3
  };
};

extern const std::map<int, const char*> _BotType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const BotType::type& val);

std::string to_string(const BotType::type& val);

struct BuddyOnAirLabel {
  enum type {
    ON_AIR = 0,
    LIVE = 1
  };
};

extern const std::map<int, const char*> _BuddyOnAirLabel_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const BuddyOnAirLabel::type& val);

std::string to_string(const BuddyOnAirLabel::type& val);

struct BuddyBannerLinkType {
  enum type {
    BUDDY_BANNER_LINK_HIDDEN = 0,
    BUDDY_BANNER_LINK_MID = 1,
    BUDDY_BANNER_LINK_URL = 2
  };
};

extern const std::map<int, const char*> _BuddyBannerLinkType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const BuddyBannerLinkType::type& val);

std::string to_string(const BuddyBannerLinkType::type& val);

struct BuddyOnAirType {
  enum type {
    NORMAL = 0,
    LIVE = 1,
    VOIP = 2
  };
};

extern const std::map<int, const char*> _BuddyOnAirType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const BuddyOnAirType::type& val);

std::string to_string(const BuddyOnAirType::type& val);

struct Diff {
  enum type {
    ADDED = 0,
    UPDATED = 1,
    REMOVED = 2
  };
};

extern const std::map<int, const char*> _Diff_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const Diff::type& val);

std::string to_string(const Diff::type& val);

struct ReportType {
  enum type {
    ADVERTISING = 1,
    GENDER_HARASSMENT = 2,
    HARASSMENT = 3,
    OTHER = 4
  };
};

extern const std::map<int, const char*> _ReportType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ReportType::type& val);

std::string to_string(const ReportType::type& val);

struct SyncTriggerReason {
  enum type {
    OTHER = 0,
    REVISION_GAP_TOO_LARGE = 1,
    OPERATION_EXPIRED = 2
  };
};

extern const std::map<int, const char*> _SyncTriggerReason_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SyncTriggerReason::type& val);

std::string to_string(const SyncTriggerReason::type& val);

struct ReportCategory {
  enum type {
    PUSH_NORMAL_PLAIN = 0,
    PUSH_NORMAL_E2EE = 1,
    PUSH_VOIP_PLAIN = 2,
    PUSH_VOIP_E2EE = 3
  };
};

extern const std::map<int, const char*> _ReportCategory_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ReportCategory::type& val);

std::string to_string(const ReportCategory::type& val);

struct BuddyResultState {
  enum type {
    ACCEPTED = 1,
    SUCCEEDED = 2,
    FAILED = 3,
    CANCELLED = 4,
    NOTIFY_FAILED = 5,
    STORING = 11,
    UPLOADING = 21,
    NOTIFYING = 31,
    REMOVING_SUBSCRIPTION = 41,
    UNREGISTERING_ACCOUNT = 42,
    NOTIFYING_LEAVE_CHAT = 43
  };
};

extern const std::map<int, const char*> _BuddyResultState_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const BuddyResultState::type& val);

std::string to_string(const BuddyResultState::type& val);

struct BuddySearchRequestSource {
  enum type {
    NA = 0,
    FRIEND_VIEW = 1,
    OFFICIAL_ACCOUNT_VIEW = 2
  };
};

extern const std::map<int, const char*> _BuddySearchRequestSource_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const BuddySearchRequestSource::type& val);

std::string to_string(const BuddySearchRequestSource::type& val);

struct CarrierCode {
  enum type {
    NOT_SPECIFIED = 0,
    JP_DOCOMO = 1,
    JP_AU = 2,
    JP_SOFTBANK = 3,
    JP_DOCOMO_LINE = 4,
    KR_SKT = 17,
    KR_KT = 18,
    KR_LGT = 19
  };
};

extern const std::map<int, const char*> _CarrierCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const CarrierCode::type& val);

std::string to_string(const CarrierCode::type& val);

struct ChannelConfiguration {
  enum type {
    MESSAGE = 0,
    MESSAGE_NOTIFICATION = 1,
    NOTIFICATION_CENTER = 2
  };
};

extern const std::map<int, const char*> _ChannelConfiguration_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ChannelConfiguration::type& val);

std::string to_string(const ChannelConfiguration::type& val);

struct ChannelPermission {
  enum type {
    PROFILE = 0,
    FRIENDS = 1,
    GROUP = 2
  };
};

extern const std::map<int, const char*> _ChannelPermission_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ChannelPermission::type& val);

std::string to_string(const ChannelPermission::type& val);

struct ChannelFeatureLicense {
  enum type {
    BLE_LCS_API_USABLE = 26,
    PROHIBIT_MINIMIZE_CHANNEL_BROWSER = 27,
    ALLOW_IOS_WEBKIT = 28
  };
};

extern const std::map<int, const char*> _ChannelFeatureLicense_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ChannelFeatureLicense::type& val);

std::string to_string(const ChannelFeatureLicense::type& val);

struct ChannelErrorCode {
  enum type {
    ILLEGAL_ARGUMENT = 0,
    INTERNAL_ERROR = 1,
    CONNECTION_ERROR = 2,
    AUTHENTICATIONI_FAILED = 3,
    NEED_PERMISSION_APPROVAL = 4,
    COIN_NOT_USABLE = 5,
    WEBVIEW_NOT_ALLOWED = 6
  };
};

extern const std::map<int, const char*> _ChannelErrorCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ChannelErrorCode::type& val);

std::string to_string(const ChannelErrorCode::type& val);

struct ChannelSyncType {
  enum type {
    SYNC = 0,
    REMOVE = 1,
    REMOVE_ALL = 2
  };
};

extern const std::map<int, const char*> _ChannelSyncType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ChannelSyncType::type& val);

std::string to_string(const ChannelSyncType::type& val);

struct LoginType {
  enum type {
    ID_CREDENTIAL = 0,
    QRCODE = 1,
    ID_CREDENTIAL_WITH_E2EE = 2
  };
};

extern const std::map<int, const char*> _LoginType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const LoginType::type& val);

std::string to_string(const LoginType::type& val);

struct ContactAttribute {
  enum type {
    CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL = 1,
    CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL = 2,
    CONTACT_ATTRIBUTE_CAPABLE_MY_HOME = 16,
    CONTACT_ATTRIBUTE_CAPABLE_BUDDY = 32
  };
};

extern const std::map<int, const char*> _ContactAttribute_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ContactAttribute::type& val);

std::string to_string(const ContactAttribute::type& val);

struct ContactCategory {
  enum type {
    NORMAL = 0,
    RECOMMEND = 1
  };
};

extern const std::map<int, const char*> _ContactCategory_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ContactCategory::type& val);

std::string to_string(const ContactCategory::type& val);

struct ContactRelation {
  enum type {
    ONEWAY = 0,
    BOTH = 1,
    NOT_REGISTERED = 2
  };
};

extern const std::map<int, const char*> _ContactRelation_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ContactRelation::type& val);

std::string to_string(const ContactRelation::type& val);

struct AsymmetricKeyAlgorithm {
  enum type {
    ASYMMETRIC_KEY_ALGORITHM_RSA = 1,
    ASYMMETRIC_KEY_ALGORITHM_ECDH = 2
  };
};

extern const std::map<int, const char*> _AsymmetricKeyAlgorithm_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const AsymmetricKeyAlgorithm::type& val);

std::string to_string(const AsymmetricKeyAlgorithm::type& val);

struct ContactSetting {
  enum type {
    CONTACT_SETTING_NOTIFICATION_DISABLE = 1,
    CONTACT_SETTING_DISPLAY_NAME_OVERRIDE = 2,
    CONTACT_SETTING_CONTACT_HIDE = 4,
    CONTACT_SETTING_FAVORITE = 8,
    CONTACT_SETTING_DELETE = 16
  };
};

extern const std::map<int, const char*> _ContactSetting_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ContactSetting::type& val);

std::string to_string(const ContactSetting::type& val);

struct ContactStatus {
  enum type {
    UNSPECIFIED = 0,
    FRIEND = 1,
    FRIEND_BLOCKED = 2,
    RECOMMEND = 3,
    RECOMMEND_BLOCKED = 4,
    DELETED = 5,
    DELETED_BLOCKED = 6
  };
};

extern const std::map<int, const char*> _ContactStatus_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ContactStatus::type& val);

std::string to_string(const ContactStatus::type& val);

struct ContactType {
  enum type {
    MID = 0,
    PHONE = 1,
    EMAIL = 2,
    USERID = 3,
    PROXIMITY = 4,
    GROUP = 5,
    USER = 6,
    QRCODE = 7,
    PROMOTION_BOT = 8,
    CONTACT_MESSAGE = 9,
    FRIEND_REQUEST = 10,
    REPAIR = 128,
    FACEBOOK = 2305,
    SINA = 2306,
    RENREN = 2307,
    FEIXIN = 2308,
    BBM = 2309,
    BEACON = 11
  };
};

extern const std::map<int, const char*> _ContactType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ContactType::type& val);

std::string to_string(const ContactType::type& val);

struct GroupPreferenceAttribute {
  enum type {
    INVITATION_TICKET = 1,
    FAVORITE_TIMESTAMP = 2
  };
};

extern const std::map<int, const char*> _GroupPreferenceAttribute_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const GroupPreferenceAttribute::type& val);

std::string to_string(const GroupPreferenceAttribute::type& val);

struct ContentType {
  enum type {
    NONE = 0,
    IMAGE = 1,
    VIDEO = 2,
    AUDIO = 3,
    HTML = 4,
    PDF = 5,
    CALL = 6,
    STICKER = 7,
    PRESENCE = 8,
    GIFT = 9,
    GROUPBOARD = 10,
    APPLINK = 11,
    LINK = 12,
    CONTACT = 13,
    FILE = 14,
    LOCATION = 15,
    POSTNOTIFICATION = 16,
    RICH = 17,
    CHATEVENT = 18,
    MUSIC = 19,
    PAYMENT = 20,
    EXTIMAGE = 21
  };
};

extern const std::map<int, const char*> _ContentType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ContentType::type& val);

std::string to_string(const ContentType::type& val);

struct MessageRelationType {
  enum type {
    FORWARD = 0,
    AUTO_REPLY = 1,
    SUBORDINATE = 2
  };
};

extern const std::map<int, const char*> _MessageRelationType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const MessageRelationType::type& val);

std::string to_string(const MessageRelationType::type& val);

struct CustomMode {
  enum type {
    PROMOTION_FRIENDS_INVITE = 1,
    CAPABILITY_SERVER_SIDE_SMS = 2,
    LINE_CLIENT_ANALYTICS_CONFIGURATION = 3
  };
};

extern const std::map<int, const char*> _CustomMode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const CustomMode::type& val);

std::string to_string(const CustomMode::type& val);

struct RoomAttribute {
  enum type {
    ALL = 255,
    NOTIFICATION_SETTING = 1
  };
};

extern const std::map<int, const char*> _RoomAttribute_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const RoomAttribute::type& val);

std::string to_string(const RoomAttribute::type& val);

struct UserStatus {
  enum type {
    NORMAL = 0,
    UNBOUND = 1,
    UNREGISTERED = 2
  };
};

extern const std::map<int, const char*> _UserStatus_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const UserStatus::type& val);

std::string to_string(const UserStatus::type& val);

struct EmailConfirmationStatus {
  enum type {
    NOT_SPECIFIED = 0,
    NOT_YET = 1,
    DONE = 3,
    NEED_ENFORCED_INPUT = 4
  };
};

extern const std::map<int, const char*> _EmailConfirmationStatus_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const EmailConfirmationStatus::type& val);

std::string to_string(const EmailConfirmationStatus::type& val);

struct AccountMigrationPincodeType {
  enum type {
    NOT_APPLICABLE = 0,
    NOT_SET = 1,
    SET = 2,
    NEED_ENFORCED_INPUT = 3
  };
};

extern const std::map<int, const char*> _AccountMigrationPincodeType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const AccountMigrationPincodeType::type& val);

std::string to_string(const AccountMigrationPincodeType::type& val);

struct AccountMigrationCheckType {
  enum type {
    SKIP = 0,
    PINCODE = 1,
    SECURITY_CENTER = 2
  };
};

extern const std::map<int, const char*> _AccountMigrationCheckType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const AccountMigrationCheckType::type& val);

std::string to_string(const AccountMigrationCheckType::type& val);

struct SecurityCenterSettingsType {
  enum type {
    NOT_APPLICABLE = 0,
    NOT_SET = 1,
    SET = 2,
    NEED_ENFORCED_INPUT = 3
  };
};

extern const std::map<int, const char*> _SecurityCenterSettingsType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SecurityCenterSettingsType::type& val);

std::string to_string(const SecurityCenterSettingsType::type& val);

struct EmailConfirmationType {
  enum type {
    SERVER_SIDE_EMAIL = 0,
    CLIENT_SIDE_EMAIL = 1
  };
};

extern const std::map<int, const char*> _EmailConfirmationType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const EmailConfirmationType::type& val);

std::string to_string(const EmailConfirmationType::type& val);

struct SquareChatAnnouncementType {
  enum type {
    TEXT_MESSAGE = 0
  };
};

extern const std::map<int, const char*> _SquareChatAnnouncementType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SquareChatAnnouncementType::type& val);

std::string to_string(const SquareChatAnnouncementType::type& val);

struct SquareChatAttribute {
  enum type {
    NAME = 2,
    SQUARE_CHAT_IMAGE = 3,
    STATE = 4
  };
};

extern const std::map<int, const char*> _SquareChatAttribute_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SquareChatAttribute::type& val);

std::string to_string(const SquareChatAttribute::type& val);

struct SquareMemberAttribute {
  enum type {
    DISPLAY_NAME = 1,
    PROFILE_IMAGE = 2,
    ABLE_TO_RECEIVE_MESSAGE = 3,
    MEMBERSHIP_STATE = 5,
    ROLE = 6,
    PREFERENCE = 7
  };
};

extern const std::map<int, const char*> _SquareMemberAttribute_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SquareMemberAttribute::type& val);

std::string to_string(const SquareMemberAttribute::type& val);

struct SquareMemberRelationAttribute {
  enum type {
    BLOCKED = 1
  };
};

extern const std::map<int, const char*> _SquareMemberRelationAttribute_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SquareMemberRelationAttribute::type& val);

std::string to_string(const SquareMemberRelationAttribute::type& val);

struct SquarePreferenceAttribute {
  enum type {
    FAVORITE = 1,
    NOTI_FOR_NEW_JOIN_REQUEST = 2
  };
};

extern const std::map<int, const char*> _SquarePreferenceAttribute_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SquarePreferenceAttribute::type& val);

std::string to_string(const SquarePreferenceAttribute::type& val);

struct SquareState {
  enum type {
    ALIVE = 0,
    DELETED = 1,
    SUSPENDED = 2
  };
};

extern const std::map<int, const char*> _SquareState_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SquareState::type& val);

std::string to_string(const SquareState::type& val);

struct CommitMessageResultCode {
  enum type {
    DELIVERED = 0,
    DELIVERY_SKIPPED = 1,
    DELIVERY_RESTRICTED = 2
  };
};

extern const std::map<int, const char*> _CommitMessageResultCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const CommitMessageResultCode::type& val);

std::string to_string(const CommitMessageResultCode::type& val);

struct ErrorCode {
  enum type {
    ILLEGAL_ARGUMENT = 0,
    AUTHENTICATION_FAILED = 1,
    DB_FAILED = 2,
    INVALID_STATE = 3,
    EXCESSIVE_ACCESS = 4,
    NOT_FOUND = 5,
    INVALID_MID = 9,
    NOT_A_MEMBER = 10,
    INVALID_LENGTH = 6,
    NOT_AVAILABLE_USER = 7,
    NOT_AUTHORIZED_DEVICE = 8,
    NOT_AUTHORIZED_SESSION = 14,
    INCOMPATIBLE_APP_VERSION = 11,
    NOT_READY = 12,
    NOT_AVAILABLE_SESSION = 13,
    SYSTEM_ERROR = 15,
    NO_AVAILABLE_VERIFICATION_METHOD = 16,
    NOT_AUTHENTICATED = 17,
    INVALID_IDENTITY_CREDENTIAL = 18,
    NOT_AVAILABLE_IDENTITY_IDENTIFIER = 19,
    INTERNAL_ERROR = 20,
    NO_SUCH_IDENTITY_IDENFIER = 21,
    DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY = 22,
    ILLEGAL_IDENTITY_CREDENTIAL = 23,
    UNKNOWN_CHANNEL = 24,
    NO_SUCH_MESSAGE_BOX = 25,
    NOT_AVAILABLE_MESSAGE_BOX = 26,
    CHANNEL_DOES_NOT_MATCH = 27,
    NOT_YOUR_MESSAGE = 28,
    MESSAGE_DEFINED_ERROR = 29,
    USER_CANNOT_ACCEPT_PRESENTS = 30,
    USER_NOT_STICKER_OWNER = 32,
    MAINTENANCE_ERROR = 33,
    ACCOUNT_NOT_MATCHED = 34,
    ABUSE_BLOCK = 35,
    NOT_FRIEND = 36,
    NOT_ALLOWED_CALL = 37,
    BLOCK_FRIEND = 38,
    INCOMPATIBLE_VOIP_VERSION = 39,
    INVALID_SNS_ACCESS_TOKEN = 40,
    EXTERNAL_SERVICE_NOT_AVAILABLE = 41,
    NOT_ALLOWED_ADD_CONTACT = 42,
    NOT_CERTIFICATED = 43,
    NOT_ALLOWED_SECONDARY_DEVICE = 44,
    INVALID_PIN_CODE = 45,
    NOT_FOUND_IDENTITY_CREDENTIAL = 46,
    EXCEED_FILE_MAX_SIZE = 47,
    EXCEED_DAILY_QUOTA = 48,
    NOT_SUPPORT_SEND_FILE = 49,
    MUST_UPGRADE = 50,
    NOT_AVAILABLE_PIN_CODE_SESSION = 51,
    EXPIRED_REVISION = 52,
    NOT_YET_PHONE_NUMBER = 54,
    BAD_CALL_NUMBER = 55,
    UNAVAILABLE_CALL_NUMBER = 56,
    NOT_SUPPORT_CALL_SERVICE = 57,
    CONGESTION_CONTROL = 58,
    NO_BALANCE = 59,
    NOT_PERMITTED_CALLER_ID = 60,
    NO_CALLER_ID_LIMIT_EXCEEDED = 61,
    CALLER_ID_VERIFICATION_REQUIRED = 62,
    NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED = 63,
    MESSAGE_NOT_FOUND = 64,
    INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT = 65,
    ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED = 66,
    ACCOUNT_MIGRATION_PINCODE_BLOCKED = 67,
    INVALID_PASSWORD_FORMAT = 69,
    FEATURE_RESTRICTED = 70,
    MESSAGE_NOT_DESTRUCTIBLE = 71,
    PAID_CALL_REDEEM_FAILED = 72,
    PREVENTED_JOIN_BY_TICKET = 73,
    SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT = 75,
    SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY = 76,
    SECURITY_CENTER_NOT_VERIFIED = 77,
    SECURITY_CENTER_BLOCKED_BY_SETTING = 78,
    SECURITY_CENTER_BLOCKED = 79,
    TALK_PROXY_EXCEPTION = 80,
    E2EE_INVALID_PROTOCOL = 81,
    E2EE_RETRY_ENCRYPT = 82,
    E2EE_UPDATE_SENDER_KEY = 83,
    E2EE_UPDATE_RECEIVER_KEY = 84,
    E2EE_INVALID_ARGUMENT = 85,
    E2EE_INVALID_VERSION = 86,
    E2EE_SENDER_DISABLED = 87,
    E2EE_RECEIVER_DISABLED = 88,
    E2EE_SENDER_NOT_ALLOWED = 89,
    E2EE_RECEIVER_NOT_ALLOWED = 90,
    E2EE_RESEND_FAIL = 91,
    E2EE_RESEND_OK = 92,
    HITOKOTO_BACKUP_NO_AVAILABLE_DATA = 93,
    E2EE_UPDATE_PRIMARY_DEVICE = 94,
    SUCCESS = 95,
    CANCEL = 96,
    E2EE_PRIMARY_NOT_SUPPORT = 97,
    E2EE_RETRY_PLAIN = 98,
    E2EE_RECREATE_GROUP_KEY = 99,
    E2EE_GROUP_TOO_MANY_MEMBERS = 100,
    SERVER_BUSY = 101,
    NOT_ALLOWED_ADD_FOLLOW = 102,
    INCOMING_FRIEND_REQUEST_LIMIT = 103,
    OUTGOING_FRIEND_REQUEST_LIMIT = 104,
    OUTGOING_FRIEND_REQUEST_QUOTA = 105,
    DUPLICATED = 106,
    BANNED = 107
  };
};

extern const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ErrorCode::type& val);

std::string to_string(const ErrorCode::type& val);

struct FeatureType {
  enum type {
    OBS_VIDEO = 1,
    OBS_GENERAL = 2
  };
};

extern const std::map<int, const char*> _FeatureType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const FeatureType::type& val);

std::string to_string(const FeatureType::type& val);

struct GroupAttribute {
  enum type {
    NAME = 1,
    PICTURE_STATUS = 2,
    ALL = 255,
    PREVENTED_JOIN_BY_TICKET = 4,
    NOTIFICATION_SETTING = 8
  };
};

extern const std::map<int, const char*> _GroupAttribute_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const GroupAttribute::type& val);

std::string to_string(const GroupAttribute::type& val);

struct IdentityProvider {
  enum type {
    UNKNOWN = 0,
    LINE = 1,
    NAVER_KR = 2,
    LINE_PHONE = 3
  };
};

extern const std::map<int, const char*> _IdentityProvider_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const IdentityProvider::type& val);

std::string to_string(const IdentityProvider::type& val);

struct LoginResultType {
  enum type {
    SUCCESS = 1,
    REQUIRE_QRCODE = 2,
    REQUIRE_DEVICE_CONFIRM = 3,
    REQUIRE_SMS_CONFIRM = 4
  };
};

extern const std::map<int, const char*> _LoginResultType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const LoginResultType::type& val);

std::string to_string(const LoginResultType::type& val);

struct MessageOperationType {
  enum type {
    SEND_MESSAGE = 1,
    RECEIVE_MESSAGE = 2,
    READ_MESSAGE = 3,
    NOTIFIED_READ_MESSAGE = 4,
    NOTIFIED_JOIN_CHAT = 5,
    FAILED_SEND_MESSAGE = 6,
    SEND_CONTENT = 7,
    SEND_CONTENT_RECEIPT = 8,
    SEND_CHAT_REMOVED = 9,
    REMOVE_ALL_MESSAGES = 10
  };
};

extern const std::map<int, const char*> _MessageOperationType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const MessageOperationType::type& val);

std::string to_string(const MessageOperationType::type& val);

struct MIDType {
  enum type {
    USER = 0,
    ROOM = 1,
    GROUP = 2,
    SQUARE = 3,
    SQUARE_CHAT = 4,
    SQUARE_MEMBER = 5,
    BOT = 6
  };
};

extern const std::map<int, const char*> _MIDType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const MIDType::type& val);

std::string to_string(const MIDType::type& val);

struct ServiceCode {
  enum type {
    UNKNOWN = 0,
    TALK = 1,
    SQUARE = 2
  };
};

extern const std::map<int, const char*> _ServiceCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ServiceCode::type& val);

std::string to_string(const ServiceCode::type& val);

struct FriendRequestDirection {
  enum type {
    INCOMING = 1,
    OUTGOING = 2
  };
};

extern const std::map<int, const char*> _FriendRequestDirection_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const FriendRequestDirection::type& val);

std::string to_string(const FriendRequestDirection::type& val);

struct FriendRequestMethod {
  enum type {
    TIMELINE = 1,
    NEARBY = 2,
    SQUARE = 3
  };
};

extern const std::map<int, const char*> _FriendRequestMethod_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const FriendRequestMethod::type& val);

std::string to_string(const FriendRequestMethod::type& val);

struct FriendRequestStatus {
  enum type {
    NONE = 0,
    AVAILABLE = 1,
    ALREADY_REQUESTED = 2,
    UNAVAILABLE = 3
  };
};

extern const std::map<int, const char*> _FriendRequestStatus_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const FriendRequestStatus::type& val);

std::string to_string(const FriendRequestStatus::type& val);

struct ModificationType {
  enum type {
    ADD = 0,
    REMOVE = 1,
    MODIFY = 2
  };
};

extern const std::map<int, const char*> _ModificationType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ModificationType::type& val);

std::string to_string(const ModificationType::type& val);

struct NotificationItemFetchMode {
  enum type {
    ALL = 0,
    APPEND = 1
  };
};

extern const std::map<int, const char*> _NotificationItemFetchMode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const NotificationItemFetchMode::type& val);

std::string to_string(const NotificationItemFetchMode::type& val);

struct NotificationQueueType {
  enum type {
    GLOBAL = 1,
    MESSAGE = 2,
    PRIMARY = 3
  };
};

extern const std::map<int, const char*> _NotificationQueueType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const NotificationQueueType::type& val);

std::string to_string(const NotificationQueueType::type& val);

struct GroupCallMediaType {
  enum type {
    AUDIO = 1,
    VIDEO = 2
  };
};

extern const std::map<int, const char*> _GroupCallMediaType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const GroupCallMediaType::type& val);

std::string to_string(const GroupCallMediaType::type& val);

struct PersonalInfo {
  enum type {
    EMAIL = 0,
    PHONE = 1,
    BIRTHDAY = 2,
    RAW_BIRTHDAY = 3
  };
};

extern const std::map<int, const char*> _PersonalInfo_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const PersonalInfo::type& val);

std::string to_string(const PersonalInfo::type& val);

struct NotificationStatus {
  enum type {
    NOTIFICATION_ITEM_EXIST = 1,
    TIMELINE_ITEM_EXIST = 2,
    NOTE_GROUP_NEW_ITEM_EXIST = 4,
    TIMELINE_BUDDYGROUP_CHANGED = 8,
    NOTE_ONE_TO_ONE_NEW_ITEM_EXIST = 16,
    ALBUM_ITEM_EXIST = 32,
    TIMELINE_ITEM_DELETED = 64,
    OTOGROUP_ITEM_EXIST = 128,
    GROUPHOME_NEW_ITEM_EXIST = 256,
    GROUPHOME_HIDDEN_ITEM_CHANGED = 512,
    NOTIFICATION_ITEM_CHANGED = 1024,
    BEAD_ITEM_HIDE = 2048,
    BEAD_ITEM_SHOW = 4096
  };
};

extern const std::map<int, const char*> _NotificationStatus_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const NotificationStatus::type& val);

std::string to_string(const NotificationStatus::type& val);

struct NotificationType {
  enum type {
    APPLE_APNS = 1,
    GOOGLE_C2DM = 2,
    NHN_NNI = 3,
    SKT_AOM = 4,
    MS_MPNS = 5,
    RIM_BIS = 6,
    GOOGLE_GCM = 7,
    NOKIA_NNAPI = 8,
    TIZEN = 9,
    LINE_BOT = 17,
    LINE_WAP = 18,
    APPLE_APNS_VOIP = 19,
    MS_WNS = 20,
    GOOGLE_FCM = 21
  };
};

extern const std::map<int, const char*> _NotificationType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const NotificationType::type& val);

std::string to_string(const NotificationType::type& val);

struct OpStatus {
  enum type {
    NORMAL = 0,
    ALERT_DISABLED = 1,
    ALWAYS = 2
  };
};

extern const std::map<int, const char*> _OpStatus_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const OpStatus::type& val);

std::string to_string(const OpStatus::type& val);

struct OpType {
  enum type {
    END_OF_OPERATION = 0,
    UPDATE_PROFILE = 1,
    UPDATE_SETTINGS = 36,
    NOTIFIED_UPDATE_PROFILE = 2,
    REGISTER_USERID = 3,
    ADD_CONTACT = 4,
    NOTIFIED_ADD_CONTACT = 5,
    BLOCK_CONTACT = 6,
    UNBLOCK_CONTACT = 7,
    NOTIFIED_RECOMMEND_CONTACT = 8,
    CREATE_GROUP = 9,
    UPDATE_GROUP = 10,
    NOTIFIED_UPDATE_GROUP = 11,
    INVITE_INTO_GROUP = 12,
    NOTIFIED_INVITE_INTO_GROUP = 13,
    CANCEL_INVITATION_GROUP = 31,
    NOTIFIED_CANCEL_INVITATION_GROUP = 32,
    LEAVE_GROUP = 14,
    NOTIFIED_LEAVE_GROUP = 15,
    ACCEPT_GROUP_INVITATION = 16,
    NOTIFIED_ACCEPT_GROUP_INVITATION = 17,
    REJECT_GROUP_INVITATION = 34,
    NOTIFIED_REJECT_GROUP_INVITATION = 35,
    KICKOUT_FROM_GROUP = 18,
    NOTIFIED_KICKOUT_FROM_GROUP = 19,
    CREATE_ROOM = 20,
    INVITE_INTO_ROOM = 21,
    NOTIFIED_INVITE_INTO_ROOM = 22,
    LEAVE_ROOM = 23,
    NOTIFIED_LEAVE_ROOM = 24,
    SEND_MESSAGE = 25,
    RECEIVE_MESSAGE = 26,
    SEND_MESSAGE_RECEIPT = 27,
    RECEIVE_MESSAGE_RECEIPT = 28,
    SEND_CONTENT_RECEIPT = 29,
    RECEIVE_ANNOUNCEMENT = 30,
    NOTIFIED_UNREGISTER_USER = 33,
    INVITE_VIA_EMAIL = 38,
    NOTIFIED_REGISTER_USER = 37,
    NOTIFIED_REQUEST_RECOVERY = 39,
    SEND_CHAT_CHECKED = 40,
    SEND_CHAT_REMOVED = 41,
    NOTIFIED_FORCE_SYNC = 42,
    SEND_CONTENT = 43,
    SEND_MESSAGE_MYHOME = 44,
    NOTIFIED_UPDATE_CONTENT_PREVIEW = 45,
    REMOVE_ALL_MESSAGES = 46,
    NOTIFIED_UPDATE_PURCHASES = 47,
    DUMMY = 48,
    UPDATE_CONTACT = 49,
    NOTIFIED_RECEIVED_CALL = 50,
    CANCEL_CALL = 51,
    NOTIFIED_REDIRECT = 52,
    NOTIFIED_CHANNEL_SYNC = 53,
    FAILED_SEND_MESSAGE = 54,
    NOTIFIED_READ_MESSAGE = 55,
    FAILED_EMAIL_CONFIRMATION = 56,
    NOTIFIED_CHAT_CONTENT = 58,
    NOTIFIED_PUSH_NOTICENTER_ITEM = 59,
    NOTIFIED_JOIN_CHAT = 60,
    NOTIFIED_LEAVE_CHAT = 61,
    NOTIFIED_TYPING = 62,
    FRIEND_REQUEST_ACCEPTED = 63,
    DESTROY_MESSAGE = 64,
    NOTIFIED_DESTROY_MESSAGE = 65,
    UPDATE_PUBLICKEYCHAIN = 66,
    NOTIFIED_UPDATE_PUBLICKEYCHAIN = 67,
    NOTIFIED_BLOCK_CONTACT = 68,
    NOTIFIED_UNBLOCK_CONTACT = 69,
    UPDATE_GROUPPREFERENCE = 70,
    NOTIFIED_PAYMENT_EVENT = 71,
    REGISTER_E2EE_PUBLICKEY = 72,
    NOTIFIED_E2EE_KEY_EXCHANGE_REQ = 73,
    NOTIFIED_E2EE_KEY_EXCHANGE_RESP = 74,
    NOTIFIED_E2EE_MESSAGE_RESEND_REQ = 75,
    NOTIFIED_E2EE_MESSAGE_RESEND_RESP = 76,
    NOTIFIED_E2EE_KEY_UPDATE = 77,
    NOTIFIED_BUDDY_UPDATE_PROFILE = 78,
    NOTIFIED_UPDATE_LINEAT_TABS = 79,
    UPDATE_ROOM = 80,
    NOTIFIED_BEACON_DETECTED = 81,
    UPDATE_EXTENDED_PROFILE = 82,
    ADD_FOLLOW = 83,
    NOTIFIED_ADD_FOLLOW = 84,
    DELETE_FOLLOW = 85,
    NOTIFIED_DELETE_FOLLOW = 86,
    UPDATE_TIMELINE_SETTINGS = 87,
    NOTIFIED_FRIEND_REQUEST = 88,
    UPDATE_RINGBACK_TONE = 89,
    NOTIFIED_POSTBACK = 90,
    RECEIVE_READ_WATERMARK = 91,
    NOTIFIED_MESSAGE_DELIVERED = 92,
    NOTIFIED_UPDATE_CHAT_BAR = 93,
    NOTIFIED_CHATAPP_INSTALLED = 94,
    NOTIFIED_CHATAPP_UPDATED = 95,
    NOTIFIED_CHATAPP_NEW_MARK = 96,
    NOTIFIED_CHATAPP_DELETED = 97,
    NOTIFIED_CHATAPP_SYNC = 98,
    NOTIFIED_UPDATE_MESSAGE = 99
  };
};

extern const std::map<int, const char*> _OpType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const OpType::type& val);

std::string to_string(const OpType::type& val);

struct PayloadType {
  enum type {
    PAYLOAD_BUY = 101,
    PAYLOAD_CS = 111,
    PAYLOAD_BONUS = 121,
    PAYLOAD_EVENT = 131
  };
};

extern const std::map<int, const char*> _PayloadType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const PayloadType::type& val);

std::string to_string(const PayloadType::type& val);

struct PaymentPgType {
  enum type {
    PAYMENT_PG_NONE = 0,
    PAYMENT_PG_AU = 1,
    PAYMENT_PG_AL = 2
  };
};

extern const std::map<int, const char*> _PaymentPgType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const PaymentPgType::type& val);

std::string to_string(const PaymentPgType::type& val);

struct PaymentType {
  enum type {
    PAYMENT_APPLE = 1,
    PAYMENT_GOOGLE = 2
  };
};

extern const std::map<int, const char*> _PaymentType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const PaymentType::type& val);

std::string to_string(const PaymentType::type& val);

struct ProductBannerLinkType {
  enum type {
    BANNER_LINK_NONE = 0,
    BANNER_LINK_ITEM = 1,
    BANNER_LINK_URL = 2,
    BANNER_LINK_CATEGORY = 3
  };
};

extern const std::map<int, const char*> _ProductBannerLinkType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ProductBannerLinkType::type& val);

std::string to_string(const ProductBannerLinkType::type& val);

struct ProductEventType {
  enum type {
    NO_EVENT = 0,
    CARRIER_ANY = 65537,
    BUDDY_ANY = 131073,
    INSTALL_IOS = 196609,
    INSTALL_ANDROID = 196610,
    MISSION_ANY = 262145,
    MUSTBUY_ANY = 327681
  };
};

extern const std::map<int, const char*> _ProductEventType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ProductEventType::type& val);

std::string to_string(const ProductEventType::type& val);

struct StickerResourceType {
  enum type {
    STATIC = 1,
    ANIMATION = 2,
    SOUND = 3,
    ANIMATION_SOUND = 4,
    POPUP = 5,
    POPUP_SOUND = 6
  };
};

extern const std::map<int, const char*> _StickerResourceType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const StickerResourceType::type& val);

std::string to_string(const StickerResourceType::type& val);

struct PlaceSearchProvider {
  enum type {
    GOOGLE = 0,
    BAIDU = 1
  };
};

extern const std::map<int, const char*> _PlaceSearchProvider_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const PlaceSearchProvider::type& val);

std::string to_string(const PlaceSearchProvider::type& val);

struct PointErrorCode {
  enum type {
    REQUEST_DUPLICATION = 3001,
    INVALID_PARAMETER = 3002,
    NOT_ENOUGH_BALANCE = 3003,
    AUTHENTICATION_FAIL = 3004,
    API_ACCESS_FORBIDDEN = 3005,
    MEMBER_ACCOUNT_NOT_FOUND = 3006,
    SERVICE_ACCOUNT_NOT_FOUND = 3007,
    TRANSACTION_NOT_FOUND = 3008,
    ALREADY_REVERSED_TRANSACTION = 3009,
    MESSAGE_NOT_READABLE = 3010,
    HTTP_REQUEST_METHOD_NOT_SUPPORTED = 3011,
    HTTP_MEDIA_TYPE_NOT_SUPPORTED = 3012,
    NOT_ALLOWED_TO_DEPOSIT = 3013,
    NOT_ALLOWED_TO_PAY = 3014,
    TRANSACTION_ACCESS_FORBIDDEN = 3015,
    INVALID_SERVICE_CONFIGURATION = 4001,
    DCS_COMMUNICATION_FAIL = 5004,
    UPDATE_BALANCE_FAIL = 5007,
    SYSTEM_ERROR = 5999,
    SYSTEM_MAINTENANCE = 5888
  };
};

extern const std::map<int, const char*> _PointErrorCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const PointErrorCode::type& val);

std::string to_string(const PointErrorCode::type& val);

struct ProfileAttribute {
  enum type {
    ALL = 511,
    EMAIL = 1,
    DISPLAY_NAME = 2,
    PHONETIC_NAME = 4,
    PICTURE = 8,
    STATUS_MESSAGE = 16,
    ALLOW_SEARCH_BY_USERID = 32,
    ALLOW_SEARCH_BY_EMAIL = 64,
    BUDDY_STATUS = 128,
    MUSIC_PROFILE = 256
  };
};

extern const std::map<int, const char*> _ProfileAttribute_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ProfileAttribute::type& val);

std::string to_string(const ProfileAttribute::type& val);

struct PublicType {
  enum type {
    HIDDEN = 0,
    PUBLIC = 1000
  };
};

extern const std::map<int, const char*> _PublicType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const PublicType::type& val);

std::string to_string(const PublicType::type& val);

struct RedirectType {
  enum type {
    NONE = 0,
    EXPIRE_SECOND = 1
  };
};

extern const std::map<int, const char*> _RedirectType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const RedirectType::type& val);

std::string to_string(const RedirectType::type& val);

struct RegistrationType {
  enum type {
    PHONE = 0,
    EMAIL_WAP = 1,
    FACEBOOK = 2305,
    SINA = 2306,
    RENREN = 2307,
    FEIXIN = 2308
  };
};

extern const std::map<int, const char*> _RegistrationType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const RegistrationType::type& val);

std::string to_string(const RegistrationType::type& val);

struct ChatRoomAnnouncementType {
  enum type {
    MESSAGE = 0,
    NOTE = 1
  };
};

extern const std::map<int, const char*> _ChatRoomAnnouncementType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ChatRoomAnnouncementType::type& val);

std::string to_string(const ChatRoomAnnouncementType::type& val);

struct SettingsAttribute {
  enum type {
    ALL = 2147483647,
    NOTIFICATION_ENABLE = 1,
    NOTIFICATION_MUTE_EXPIRATION = 2,
    NOTIFICATION_NEW_MESSAGE = 4,
    NOTIFICATION_GROUP_INVITATION = 8,
    NOTIFICATION_SHOW_MESSAGE = 16,
    NOTIFICATION_INCOMING_CALL = 32,
    NOTIFICATION_SOUND_MESSAGE = 256,
    NOTIFICATION_SOUND_GROUP = 512,
    NOTIFICATION_DISABLED_WITH_SUB = 65536,
    NOTIFICATION_PAYMENT = 131072,
    PRIVACY_SYNC_CONTACTS = 64,
    PRIVACY_SEARCH_BY_PHONE_NUMBER = 128,
    PRIVACY_SEARCH_BY_USERID = 8192,
    PRIVACY_SEARCH_BY_EMAIL = 16384,
    PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN = 2097152,
    PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME = 8388608,
    PRIVACY_ALLOW_FRIEND_REQUEST = 1073741824,
    PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND = 33554432,
    PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL = 67108864,
    PRIVACY_AGREE_USE_PAIDCALL = 134217728,
    CONTACT_MY_TICKET = 1024,
    IDENTITY_PROVIDER = 2048,
    IDENTITY_IDENTIFIER = 4096,
    SNS_ACCOUNT = 524288,
    PHONE_REGISTRATION = 1048576,
    PREFERENCE_LOCALE = 32768,
    CUSTOM_MODE = 4194304,
    EMAIL_CONFIRMATION_STATUS = 16777216,
    ACCOUNT_MIGRATION_PINCODE = 268435456,
    ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE = 536870912,
    SECURITY_CENTER_SETTINGS = 262144
  };
};

extern const std::map<int, const char*> _SettingsAttribute_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SettingsAttribute::type& val);

std::string to_string(const SettingsAttribute::type& val);

struct SettingsAttributeEx {
  enum type {
    NOTIFICATION_ENABLE = 0,
    NOTIFICATION_MUTE_EXPIRATION = 1,
    NOTIFICATION_NEW_MESSAGE = 2,
    NOTIFICATION_GROUP_INVITATION = 3,
    NOTIFICATION_SHOW_MESSAGE = 4,
    NOTIFICATION_INCOMING_CALL = 5,
    NOTIFICATION_SOUND_MESSAGE = 8,
    NOTIFICATION_SOUND_GROUP = 9,
    NOTIFICATION_DISABLED_WITH_SUB = 16,
    NOTIFICATION_PAYMENT = 17,
    NOTIFICATION_MENTION = 40,
    NOTIFICATION_THUMBNAIL = 45,
    PRIVACY_SYNC_CONTACTS = 6,
    PRIVACY_SEARCH_BY_PHONE_NUMBER = 7,
    PRIVACY_SEARCH_BY_USERID = 13,
    PRIVACY_SEARCH_BY_EMAIL = 14,
    PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN = 21,
    PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME = 23,
    PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME = 35,
    PRIVACY_ALLOW_FRIEND_REQUEST = 30,
    PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND = 25,
    PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL = 26,
    PRIVACY_AGREE_USE_PAIDCALL = 27,
    CONTACT_MY_TICKET = 10,
    IDENTITY_PROVIDER = 11,
    IDENTITY_IDENTIFIER = 12,
    SNS_ACCOUNT = 19,
    PHONE_REGISTRATION = 20,
    PREFERENCE_LOCALE = 15,
    CUSTOM_MODE = 22,
    EMAIL_CONFIRMATION_STATUS = 24,
    ACCOUNT_MIGRATION_PINCODE = 28,
    ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE = 29,
    SECURITY_CENTER_SETTINGS = 18,
    E2EE_ENABLE = 33,
    ENABLE_SOUND_TO_TEXT = 47,
    HITOKOTO_BACKUP_REQUESTED = 34,
    CONTACT_ALLOW_FOLLOWING = 36,
    PRIVACY_ALLOW_NEARBY = 37,
    AGREEMENT_NEARBY = 38,
    AGREEMENT_SQUARE = 39,
    ALLOW_UNREGISTRATION_SECONDARY_DEVICE = 41,
    AGREEMENT_BOT_USE = 42,
    AGREEMENT_SHAKE_FUNCTION = 43,
    AGREEMENT_MOBILE_CONTACT_NAME = 44,
    AGREEMENT_SOUND_TO_TEXT = 46
  };
};

extern const std::map<int, const char*> _SettingsAttributeEx_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SettingsAttributeEx::type& val);

std::string to_string(const SettingsAttributeEx::type& val);

struct SnsIdType {
  enum type {
    FACEBOOK = 1,
    SINA = 2,
    RENREN = 3,
    FEIXIN = 4,
    BBM = 5
  };
};

extern const std::map<int, const char*> _SnsIdType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SnsIdType::type& val);

std::string to_string(const SnsIdType::type& val);

struct SpammerReason {
  enum type {
    OTHER = 0,
    ADVERTISING = 1,
    GENDER_HARASSMENT = 2,
    HARASSMENT = 3
  };
};

extern const std::map<int, const char*> _SpammerReason_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SpammerReason::type& val);

std::string to_string(const SpammerReason::type& val);

struct SyncActionType {
  enum type {
    SYNC = 0,
    REPORT = 1
  };
};

extern const std::map<int, const char*> _SyncActionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SyncActionType::type& val);

std::string to_string(const SyncActionType::type& val);

struct SpotCategory {
  enum type {
    UNKNOWN = 0,
    GOURMET = 1,
    BEAUTY = 2,
    TRAVEL = 3,
    SHOPPING = 4,
    ENTERTAINMENT = 5,
    SPORTS = 6,
    TRANSPORT = 7,
    LIFE = 8,
    HOSPITAL = 9,
    FINANCE = 10,
    EDUCATION = 11,
    OTHER = 12,
    ALL = 10000
  };
};

extern const std::map<int, const char*> _SpotCategory_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SpotCategory::type& val);

std::string to_string(const SpotCategory::type& val);

struct SyncCategory {
  enum type {
    PROFILE = 0,
    SETTINGS = 1,
    OPS = 2,
    CONTACT = 3,
    RECOMMEND = 4,
    BLOCK = 5,
    GROUP = 6,
    ROOM = 7,
    NOTIFICATION = 8,
    ADDRESS_BOOK = 9
  };
};

extern const std::map<int, const char*> _SyncCategory_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SyncCategory::type& val);

std::string to_string(const SyncCategory::type& val);

struct TMessageBoxStatus {
  enum type {
    ACTIVATED = 1,
    UNREAD = 2
  };
};

extern const std::map<int, const char*> _TMessageBoxStatus_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TMessageBoxStatus::type& val);

std::string to_string(const TMessageBoxStatus::type& val);

struct UniversalNotificationServiceErrorCode {
  enum type {
    INTERNAL_ERROR = 0,
    INVALID_KEY = 1,
    ILLEGAL_ARGUMENT = 2,
    TOO_MANY_REQUEST = 3,
    AUTHENTICATION_FAILED = 4,
    NO_WRITE_PERMISSION = 5
  };
};

extern const std::map<int, const char*> _UniversalNotificationServiceErrorCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const UniversalNotificationServiceErrorCode::type& val);

std::string to_string(const UniversalNotificationServiceErrorCode::type& val);

struct UnregistrationReason {
  enum type {
    UNREGISTRATION_REASON_UNREGISTER_USER = 1,
    UNREGISTRATION_REASON_UNBIND_DEVICE = 2
  };
};

extern const std::map<int, const char*> _UnregistrationReason_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const UnregistrationReason::type& val);

std::string to_string(const UnregistrationReason::type& val);

struct UserAgeType {
  enum type {
    OVER = 1,
    UNDER = 2,
    UNDEFINED = 3
  };
};

extern const std::map<int, const char*> _UserAgeType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const UserAgeType::type& val);

std::string to_string(const UserAgeType::type& val);

struct VerificationMethod {
  enum type {
    NO_AVAILABLE = 0,
    PIN_VIA_SMS = 1,
    CALLERID_INDIGO = 2,
    PIN_VIA_TTS = 4,
    SKIP = 10
  };
};

extern const std::map<int, const char*> _VerificationMethod_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const VerificationMethod::type& val);

std::string to_string(const VerificationMethod::type& val);

struct VerificationResult {
  enum type {
    FAILED = 0,
    OK_NOT_REGISTERED_YET = 1,
    OK_REGISTERED_WITH_SAME_DEVICE = 2,
    OK_REGISTERED_WITH_ANOTHER_DEVICE = 3
  };
};

extern const std::map<int, const char*> _VerificationResult_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const VerificationResult::type& val);

std::string to_string(const VerificationResult::type& val);

struct WapInvitationType {
  enum type {
    REGISTRATION = 1,
    CHAT = 2
  };
};

extern const std::map<int, const char*> _WapInvitationType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const WapInvitationType::type& val);

std::string to_string(const WapInvitationType::type& val);

struct MediaType {
  enum type {
    AUDIO = 1,
    VIDEO = 2
  };
};

extern const std::map<int, const char*> _MediaType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const MediaType::type& val);

std::string to_string(const MediaType::type& val);

struct SQErrorCode {
  enum type {
    UNKNOWN = 0,
    ILLEGAL_ARGUMENT = 400,
    AUTHENTICATION_FAILURE = 401,
    FORBIDDEN = 403,
    NOT_FOUND = 404,
    REVISION_MISMATCH = 409,
    PRECONDITION_FAILED = 410,
    INTERNAL_ERROR = 500,
    NOT_IMPLEMENTED = 501,
    TRY_AGAIN_LATER = 505
  };
};

extern const std::map<int, const char*> _SQErrorCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SQErrorCode::type& val);

std::string to_string(const SQErrorCode::type& val);

struct SquareEventType {
  enum type {
    RECEIVE_MESSAGE = 0,
    SEND_MESSAGE = 1,
    NOTIFIED_JOIN_SQUARE_CHAT = 2,
    NOTIFIED_INVITE_INTO_SQUARE_CHAT = 3,
    NOTIFIED_LEAVE_SQUARE_CHAT = 4,
    NOTIFIED_DESTROY_MESSAGE = 5,
    NOTIFIED_MARK_AS_READ = 6,
    NOTIFIED_UPDATE_SQUARE_MEMBER_PROFILE = 7,
    NOTIFIED_KICKOUT_FROM_SQUARE = 19,
    NOTIFIED_SHUTDOWN_SQUARE = 18,
    NOTIFIED_DELETE_SQUARE_CHAT = 20,
    NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_NAME = 30,
    NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_IMAGE = 31,
    NOTIFIED_UPDATE_SQUARE_CHAT_ANNOUNCEMENT = 37,
    NOTIFIED_ADD_BOT = 33,
    NOTIFIED_REMOVE_BOT = 34,
    NOTIFIED_UPDATE_SQUARE = 8,
    NOTIFIED_UPDATE_SQUARE_STATUS = 9,
    NOTIFIED_UPDATE_SQUARE_AUTHORITY = 10,
    NOTIFIED_UPDATE_SQUARE_MEMBER = 11,
    NOTIFIED_UPDATE_SQUARE_CHAT = 12,
    NOTIFIED_UPDATE_SQUARE_CHAT_STATUS = 13,
    NOTIFIED_UPDATE_SQUARE_CHAT_MEMBER = 14,
    NOTIFIED_CREATE_SQUARE_MEMBER = 15,
    NOTIFIED_CREATE_SQUARE_CHAT_MEMBER = 16,
    NOTIFIED_UPDATE_SQUARE_MEMBER_RELATION = 17,
    NOTIFIED_UPDATE_SQUARE_FEATURE_SET = 32,
    NOTIFIED_UPDATE_SQUARE_NOTE_STATUS = 36,
    NOTIFICATION_JOIN_REQUEST = 21,
    NOTIFICATION_JOINED = 22,
    NOTIFICATION_PROMOTED_COADMIN = 23,
    NOTIFICATION_PROMOTED_ADMIN = 24,
    NOTIFICATION_DEMOTED_MEMBER = 25,
    NOTIFICATION_KICKED_OUT = 26,
    NOTIFICATION_SQUARE_DELETE = 27,
    NOTIFICATION_SQUARE_CHAT_DELETE = 28,
    NOTIFICATION_MESSAGE = 29
  };
};

extern const std::map<int, const char*> _SquareEventType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SquareEventType::type& val);

std::string to_string(const SquareEventType::type& val);

struct SquareMemberRelationState {
  enum type {
    NONE = 1,
    BLOCKED = 2
  };
};

extern const std::map<int, const char*> _SquareMemberRelationState_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SquareMemberRelationState::type& val);

std::string to_string(const SquareMemberRelationState::type& val);

struct SquareFeatureControlState {
  enum type {
    DISABLED = 1,
    ENABLED = 2
  };
};

extern const std::map<int, const char*> _SquareFeatureControlState_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SquareFeatureControlState::type& val);

std::string to_string(const SquareFeatureControlState::type& val);

struct BooleanState {
  enum type {
    NONE = 0,
    OFF = 1,
    ON = 2
  };
};

extern const std::map<int, const char*> _BooleanState_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const BooleanState::type& val);

std::string to_string(const BooleanState::type& val);

struct SquareType {
  enum type {
    CLOSED = 0,
    OPEN = 1
  };
};

extern const std::map<int, const char*> _SquareType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SquareType::type& val);

std::string to_string(const SquareType::type& val);

struct SquareChatType {
  enum type {
    OPEN = 1,
    SECRET = 2,
    ONE_ON_ONE = 3,
    SQUARE_DEFAULT = 4
  };
};

extern const std::map<int, const char*> _SquareChatType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SquareChatType::type& val);

std::string to_string(const SquareChatType::type& val);

struct SquareErrorCode {
  enum type {
    UNKNOWN = 0,
    INTERNAL_ERROR = 500,
    NOT_IMPLEMENTED = 501,
    TRY_AGAIN_LATER = 503,
    MAINTENANCE = 505,
    ILLEGAL_ARGUMENT = 400,
    AUTHENTICATION_FAILURE = 401,
    FORBIDDEN = 403,
    NOT_FOUND = 404,
    REVISION_MISMATCH = 409,
    PRECONDITION_FAILED = 410
  };
};

extern const std::map<int, const char*> _SquareErrorCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SquareErrorCode::type& val);

std::string to_string(const SquareErrorCode::type& val);

struct SquareChatState {
  enum type {
    ALIVE = 0,
    DELETED = 1,
    SUSPENDED = 2
  };
};

extern const std::map<int, const char*> _SquareChatState_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SquareChatState::type& val);

std::string to_string(const SquareChatState::type& val);

struct SquareFeatureSetAttribute {
  enum type {
    CREATING_SECRET_SQUARE_CHAT = 1,
    INVITING_INTO_OPEN_SQUARE_CHAT = 2
  };
};

extern const std::map<int, const char*> _SquareFeatureSetAttribute_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SquareFeatureSetAttribute::type& val);

std::string to_string(const SquareFeatureSetAttribute::type& val);

struct SquareMembershipState {
  enum type {
    JOIN_REQUESTED = 1,
    JOINED = 2,
    REJECTED = 3,
    LEFT = 4,
    KICK_OUT = 5,
    BANNED = 6,
    DELETED = 7
  };
};

extern const std::map<int, const char*> _SquareMembershipState_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SquareMembershipState::type& val);

std::string to_string(const SquareMembershipState::type& val);

struct SquareChatMemberAttribute {
  enum type {
    MEMBERSHIP_STATE = 4,
    NOTIFICATION_MESSAGE = 6
  };
};

extern const std::map<int, const char*> _SquareChatMemberAttribute_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SquareChatMemberAttribute::type& val);

std::string to_string(const SquareChatMemberAttribute::type& val);

struct SquareMemberRole {
  enum type {
    ADMIN = 1,
    CO_ADMIN = 2,
    MEMBER = 10
  };
};

extern const std::map<int, const char*> _SquareMemberRole_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SquareMemberRole::type& val);

std::string to_string(const SquareMemberRole::type& val);

struct PreconditionFailedExtraInfo {
  enum type {
    DUPLICATED_DISPLAY_NAME = 0
  };
};

extern const std::map<int, const char*> _PreconditionFailedExtraInfo_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const PreconditionFailedExtraInfo::type& val);

std::string to_string(const PreconditionFailedExtraInfo::type& val);

struct SquareChatMembershipState {
  enum type {
    JOINED = 1,
    LEFT = 2
  };
};

extern const std::map<int, const char*> _SquareChatMembershipState_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SquareChatMembershipState::type& val);

std::string to_string(const SquareChatMembershipState::type& val);

struct FetchDirection {
  enum type {
    FORWARD = 1,
    BACKWARD = 2
  };
};

extern const std::map<int, const char*> _FetchDirection_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const FetchDirection::type& val);

std::string to_string(const FetchDirection::type& val);

struct SquareAttribute {
  enum type {
    NAME = 1,
    WELCOME_MESSAGE = 2,
    PROFILE_IMAGE = 3,
    DESCRIPTION = 4,
    SEARCHABLE = 6,
    CATEGORY = 7,
    INVITATION_URL = 8,
    ABLE_TO_USE_INVITATION_URL = 9,
    STATE = 10
  };
};

extern const std::map<int, const char*> _SquareAttribute_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SquareAttribute::type& val);

std::string to_string(const SquareAttribute::type& val);

struct SquareAuthorityAttribute {
  enum type {
    UPDATE_SQUARE_PROFILE = 1,
    INVITE_NEW_MEMBER = 2,
    APPROVE_JOIN_REQUEST = 3,
    CREATE_POST = 4,
    CREATE_OPEN_SQUARE_CHAT = 5,
    DELETE_SQUARE_CHAT_OR_POST = 6,
    REMOVE_SQUARE_MEMBER = 7,
    GRANT_ROLE = 8,
    ENABLE_INVITATION_TICKET = 9,
    CREATE_CHAT_ANNOUNCEMENT = 10
  };
};

extern const std::map<int, const char*> _SquareAuthorityAttribute_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SquareAuthorityAttribute::type& val);

std::string to_string(const SquareAuthorityAttribute::type& val);

struct SquareEventStatus {
  enum type {
    NORMAL = 1,
    ALERT_DISABLED = 2
  };
};

extern const std::map<int, const char*> _SquareEventStatus_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SquareEventStatus::type& val);

std::string to_string(const SquareEventStatus::type& val);

struct SuggestDictionaryIncrementStatus {
  enum type {
    SUCCESS = 0,
    INVALID_REVISION = 1,
    TOO_LARGE_DATA = 2,
    SCHEME_CHANGED = 3,
    RETRY = 4,
    FAIL = 5,
    TOO_OLD_DATA = 6
  };
};

extern const std::map<int, const char*> _SuggestDictionaryIncrementStatus_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SuggestDictionaryIncrementStatus::type& val);

std::string to_string(const SuggestDictionaryIncrementStatus::type& val);

class Location;

class MessageBoxV2MessageId;

class MessageCommitResult;

class CallHost;

class AgeCheckDocomoResult;

class AgeCheckRequestResult;

class TextMessageAnnouncementContents;

class SquareChatAnnouncementContents;

class SquareChatAnnouncement;

class Announcement;

class ChannelProvider;

class E2EEPublicKey;

class ChannelDomain;

class E2EENegotiationResult;

class OTPResult;

class Square;

class SquareAuthority;

class SquarePreference;

class SquareMember;

class SquareMemberRelation;

class SquareFeature;

class SquareFeatureSet;

class SquareStatus;

class SquareChat;

class NoteStatus;

class SquareInfo;

class BotUseInfo;

class PaidCallAdCountry;

class PaidCallAdResult;

class PaidCallBalance;

class PaidCallCurrencyExchangeRate;

class ExtendedProfileBirthday;

class ExtendedProfile;

class PaidCallDialing;

class SpotItem;

class SpotNearbyItem;

class SpotNearbyResponse;

class SpotPhoneNumberResponse;

class PaidCallHistory;

class PaidCallHistoryResult;

class PaidCallMetadataResult;

class PaidCallRedeemResult;

class PaidCallResponse;

class PaidCallUserRate;

class ChannelInfo;

class ApprovedChannelInfo;

class ApprovedChannelInfos;

class AuthQrcode;

class AnalyticsInfo;

class ContactTransition;

class UserTicketResponse;

class BuddyBanner;

class BuddyDetail;

class Contact;

class BuddyList;

class RegisterWithPhoneNumberResult;

class BuddyMessageRequest;

class BuddyOnAirUrls;

class BuddyOnAir;

class BuddyProfile;

class CommitMessageResult;

class BuddySearchResult;

class SyncParamMid;

class SIMInfo;

class SyncParamContact;

class ChannelDomains;

class ProductCategory;

class ChannelInfos;

class ChannelNotificationSetting;

class ChannelSyncDatas;

class NotiCenterEventData;

class ChannelToken;

class ChannelSettings;

class ChannelIdWithLastUpdated;

class Coin;

class CoinPayLoad;

class CoinHistory;

class CoinHistoryCondition;

class CoinHistoryResult;

class CoinProductItem;

class CoinPurchaseConfirm;

class CoinPurchaseReservation;

class CoinUseReservationItem;

class CoinUseReservation;

class CompactContact;

class ContactModification;

class ContactRegistration;

class ContactReport;

class ContactReportResult;

class DeviceInfo;

class EmailConfirmation;

class EmailConfirmationSession;

class FriendChannelMatrix;

class FriendChannelMatricesResponse;

class FriendRequest;

class FriendRequestsInfo;

class Geolocation;

class NotificationTarget;

class GlobalEvent;

class GroupPreference;

class Group;

class IdentityCredential;

class LastReadMessageId;

class LastReadMessageIds;

class VerificationSessionData;

class LoginResult;

class LoginRequest;

class LoginSession;

class Message;

class SquareMessage;

class SquareChatStatusWithoutMessage;

class SquareChatStatus;

class SquareChatMember;

class MessageOperation;

class MessageOperations;

class MessageStoreResult;

class MetaProfile;

class NotificationItem;

class NotificationFetchResult;

class Operation;

class PaymentReservation;

class PaymentReservationResult;

class Product;

class ProductList;

class StickerIdRange;

class ProductSimple;

class ProductSimpleList;

class Profile;

class ProximityMatchCandidateResult;

class RegisterWithSnsIdResult;

class RequestTokenResponse;

class Room;

class SuggestDictionary;

class SuggestItemDictionaryIncrement;

class SuggestTagDictionaryIncrement;

class SuggestDictionaryIncrements;

class SuggestItemDictionaryRevision;

class SuggestTagDictionaryRevision;

class SuggestDictionaryRevisions;

class SuggestDictionarySettings;

class PhoneInfoForChannel;

class PhoneVerificationResult;

class PlaceSearchInfo;

class RSAKey;

class SecurityCenterResult;

class SendBuddyMessageResult;

class SetBuddyOnAirResult;

class Settings;

class SimpleChannelClient;

class SimpleChannelContact;

class SnsFriend;

class SnsFriendContactRegistration;

class SnsFriendModification;

class SnsFriends;

class SnsIdUserStatus;

class SnsProfile;

class SystemConfiguration;

class Ticket;

class TMessageBox;

class TMessageBoxWrapUp;

class TMessageBoxWrapUpResponse;

class TMessageReadRangeEntry;

class TMessageReadRange;

class ChatRoomAnnouncementContents;

class ChatRoomAnnouncement;

class ErrorExtraInfo;

class SyncRelations;

class SyncScope;

class JoinSquareResponse;

class JoinSquareRequest;

class JoinSquareChatResponse;

class JoinSquareChatRequest;

class SendMessageResponse;

class SendMessageRequest;

class MarkAsReadRequest;

class MarkAsReadResponse;

class SubscriptionState;

class ApproveSquareMembersResponse;

class ApproveSquareMembersRequest;

class CreateSquareChatResponse;

class CreateSquareChatRequest;

class CreateSquareResponse;

class CreateSquareRequest;

class DeleteSquareResponse;

class DeleteSquareRequest;

class DestroyMessageResponse;

class DestroyMessageRequest;

class GetSquareChatMembersRequest;

class GetSquareChatMembersResponse;

class GetSquareChatStatusRequest;

class GetSquareChatStatusResponse;

class GetSquareChatRequest;

class GetSquareChatResponse;

class GetSquareAuthorityRequest;

class GetSquareAuthorityResponse;

class GetJoinedSquaresRequest;

class GetJoinedSquaresResponse;

class GetJoinableSquareChatsRequest;

class GetJoinableSquareChatsResponse;

class GetInvitationTicketUrlRequest;

class GetInvitationTicketUrlResponse;

class LeaveSquareRequest;

class LeaveSquareResponse;

class LeaveSquareChatRequest;

class LeaveSquareChatResponse;

class SquareMemberSearchOption;

class SearchSquareMembersRequest;

class SearchSquareMembersResponse;

class FindSquareByInvitationTicketRequest;

class FindSquareByInvitationTicketResponse;

class SquareEventReceiveMessage;

class SquareEventSendMessage;

class SquareEventNotifiedJoinSquareChat;

class SquareEventNotifiedInviteIntoSquareChat;

class SquareEventNotifiedLeaveSquareChat;

class SquareEventNotifiedDestroyMessage;

class SquareEventNotifiedMarkAsRead;

class SquareEventNotifiedUpdateSquareMemberProfile;

class SquareEventNotifiedKickoutFromSquare;

class SquareEventNotifiedShutdownSquare;

class SquareEventNotifiedDeleteSquareChat;

class SquareEventNotifiedUpdateSquareChatProfileName;

class SquareEventNotifiedUpdateSquareChatProfileImage;

class SquareEventNotifiedUpdateSquareChatStatus;

class SquareEventNotifiedUpdateSquareStatus;

class SquareEventNotifiedCreateSquareMember;

class SquareEventNotifiedCreateSquareChatMember;

class SquareEventNotifiedUpdateSquareMemberRelation;

class SquareEventNotifiedUpdateSquare;

class SquareEventNotifiedUpdateSquareMember;

class SquareEventNotifiedUpdateSquareChat;

class SquareEventNotificationJoinRequest;

class SquareEventNotificationMemberUpdate;

class SquareEventNotificationSquareDelete;

class SquareEventNotificationSquareChatDelete;

class SquareEventNotificationMessage;

class SquareEventNotifiedUpdateSquareChatMember;

class SquareEventNotifiedUpdateSquareAuthority;

class SquareEventNotifiedUpdateSquareFeatureSet;

class SquareEventPayload;

class SquareEvent;

class FetchMyEventsRequest;

class FetchMyEventsResponse;

class FetchSquareChatEventsRequest;

class FetchSquareChatEventsResponse;

class InviteToSquareRequest;

class InviteToSquareResponse;

class InviteToSquareChatRequest;

class InviteToSquareChatResponse;

class GetSquareMemberRequest;

class GetSquareMemberResponse;

class GetSquareMembersRequest;

class GetSquareMembersResponse;

class GetSquareMemberRelationsRequest;

class GetSquareMemberRelationsResponse;

class GetSquareMemberRelationRequest;

class GetSquareMemberRelationResponse;

class Category;

class GetSquareCategoriesRequest;

class GetSquareCategoriesResponse;

class UpdateSquareRequest;

class UpdateSquareResponse;

class SearchSquaresRequest;

class SearchSquaresResponse;

class GetSquareFeatureSetRequest;

class GetSquareFeatureSetResponse;

class UpdateSquareFeatureSetRequest;

class UpdateSquareFeatureSetResponse;

class UpdateSquareMemberRequest;

class UpdateSquareMemberResponse;

class UpdateSquareMembersRequest;

class UpdateSquareMembersResponse;

class RejectSquareMembersRequest;

class RejectSquareMembersResponse;

class RemoveSubscriptionsRequest;

class RemoveSubscriptionsResponse;

class RefreshSubscriptionsRequest;

class RefreshSubscriptionsResponse;

class UpdateSquareChatRequest;

class UpdateSquareChatResponse;

class DeleteSquareChatRequest;

class DeleteSquareChatResponse;

class UpdateSquareChatMemberRequest;

class UpdateSquareChatMemberResponse;

class UpdateSquareAuthorityRequest;

class UpdateSquareAuthorityResponse;

class UpdateSquareMemberRelationRequest;

class UpdateSquareMemberRelationResponse;

class ReportSquareRequest;

class ReportSquareResponse;

class ReportSquareChatRequest;

class ReportSquareChatResponse;

class ReportSquareMessageRequest;

class ReportSquareMessageResponse;

class ReportSquareMemberRequest;

class ReportSquareMemberResponse;

class GetSquareRequest;

class GetSquareResponse;

class GetSquareStatusRequest;

class GetSquareStatusResponse;

class GetNoteStatusRequest;

class GetNoteStatusResponse;

class CreateSquareChatAnnouncementRequest;

class CreateSquareChatAnnouncementResponse;

class DeleteSquareChatAnnouncementRequest;

class DeleteSquareChatAnnouncementResponse;

class GetSquareChatAnnouncementsRequest;

class GetSquareChatAnnouncementsResponse;

class GetJoinedSquareChatsRequest;

class GetJoinedSquareChatsResponse;

class TalkException;

class ShouldSyncException;

class PointException;

class ChannelException;

class SquareException;

class UniversalNotificationServiceException;

class UpdateBuddyProfileResult;

class UserAuthStatus;

class WapInvitation;

class GroupCall;

class GroupCallRoute;

typedef struct _Location__isset {
  _Location__isset() : title(false), address(false), latitude(false), longitude(false), phone(false) {}
  bool title :1;
  bool address :1;
  bool latitude :1;
  bool longitude :1;
  bool phone :1;
} _Location__isset;

class Location : public virtual ::apache::thrift::TBase {
 public:

  Location(const Location&);
  Location& operator=(const Location&);
  Location() : title(), address(), latitude(0), longitude(0), phone() {
  }

  virtual ~Location() noexcept;
  std::string title;
  std::string address;
  double latitude;
  double longitude;
  std::string phone;

  _Location__isset __isset;

  void __set_title(const std::string& val);

  void __set_address(const std::string& val);

  void __set_latitude(const double val);

  void __set_longitude(const double val);

  void __set_phone(const std::string& val);

  bool operator == (const Location & rhs) const
  {
    if (!(title == rhs.title))
      return false;
    if (!(address == rhs.address))
      return false;
    if (!(latitude == rhs.latitude))
      return false;
    if (!(longitude == rhs.longitude))
      return false;
    if (!(phone == rhs.phone))
      return false;
    return true;
  }
  bool operator != (const Location &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Location & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Location &a, Location &b);

std::ostream& operator<<(std::ostream& out, const Location& obj);

typedef struct _MessageBoxV2MessageId__isset {
  _MessageBoxV2MessageId__isset() : deliveredTime(false), messageId(false) {}
  bool deliveredTime :1;
  bool messageId :1;
} _MessageBoxV2MessageId__isset;

class MessageBoxV2MessageId : public virtual ::apache::thrift::TBase {
 public:

  MessageBoxV2MessageId(const MessageBoxV2MessageId&);
  MessageBoxV2MessageId& operator=(const MessageBoxV2MessageId&);
  MessageBoxV2MessageId() : deliveredTime(0), messageId(0) {
  }

  virtual ~MessageBoxV2MessageId() noexcept;
  int64_t deliveredTime;
  int64_t messageId;

  _MessageBoxV2MessageId__isset __isset;

  void __set_deliveredTime(const int64_t val);

  void __set_messageId(const int64_t val);

  bool operator == (const MessageBoxV2MessageId & rhs) const
  {
    if (!(deliveredTime == rhs.deliveredTime))
      return false;
    if (!(messageId == rhs.messageId))
      return false;
    return true;
  }
  bool operator != (const MessageBoxV2MessageId &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageBoxV2MessageId & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MessageBoxV2MessageId &a, MessageBoxV2MessageId &b);

std::ostream& operator<<(std::ostream& out, const MessageBoxV2MessageId& obj);

typedef struct _MessageCommitResult__isset {
  _MessageCommitResult__isset() : requestId(false), state(false), messageStoreRequestId(false), messageIds(false), receiverCount(false), successCount(false), failCount(false), blockCount(false), unregisteredCount(false), unrelatedCount(false), errorDescription(false) {}
  bool requestId :1;
  bool state :1;
  bool messageStoreRequestId :1;
  bool messageIds :1;
  bool receiverCount :1;
  bool successCount :1;
  bool failCount :1;
  bool blockCount :1;
  bool unregisteredCount :1;
  bool unrelatedCount :1;
  bool errorDescription :1;
} _MessageCommitResult__isset;

class MessageCommitResult : public virtual ::apache::thrift::TBase {
 public:

  MessageCommitResult(const MessageCommitResult&);
  MessageCommitResult& operator=(const MessageCommitResult&);
  MessageCommitResult() : requestId(), state((BuddyResultState::type)0), messageStoreRequestId(), receiverCount(0), successCount(0), failCount(0), blockCount(0), unregisteredCount(0), unrelatedCount(0), errorDescription() {
  }

  virtual ~MessageCommitResult() noexcept;
  std::string requestId;
  /**
   * 
   * @see BuddyResultState
   */
  BuddyResultState::type state;
  std::string messageStoreRequestId;
  std::vector<std::string>  messageIds;
  int64_t receiverCount;
  int64_t successCount;
  int64_t failCount;
  int64_t blockCount;
  int64_t unregisteredCount;
  int64_t unrelatedCount;
  std::string errorDescription;

  _MessageCommitResult__isset __isset;

  void __set_requestId(const std::string& val);

  void __set_state(const BuddyResultState::type val);

  void __set_messageStoreRequestId(const std::string& val);

  void __set_messageIds(const std::vector<std::string> & val);

  void __set_receiverCount(const int64_t val);

  void __set_successCount(const int64_t val);

  void __set_failCount(const int64_t val);

  void __set_blockCount(const int64_t val);

  void __set_unregisteredCount(const int64_t val);

  void __set_unrelatedCount(const int64_t val);

  void __set_errorDescription(const std::string& val);

  bool operator == (const MessageCommitResult & rhs) const
  {
    if (!(requestId == rhs.requestId))
      return false;
    if (!(state == rhs.state))
      return false;
    if (!(messageStoreRequestId == rhs.messageStoreRequestId))
      return false;
    if (!(messageIds == rhs.messageIds))
      return false;
    if (!(receiverCount == rhs.receiverCount))
      return false;
    if (!(successCount == rhs.successCount))
      return false;
    if (!(failCount == rhs.failCount))
      return false;
    if (!(blockCount == rhs.blockCount))
      return false;
    if (!(unregisteredCount == rhs.unregisteredCount))
      return false;
    if (!(unrelatedCount == rhs.unrelatedCount))
      return false;
    if (!(errorDescription == rhs.errorDescription))
      return false;
    return true;
  }
  bool operator != (const MessageCommitResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageCommitResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MessageCommitResult &a, MessageCommitResult &b);

std::ostream& operator<<(std::ostream& out, const MessageCommitResult& obj);

typedef struct _CallHost__isset {
  _CallHost__isset() : host(false), port(false), zone(false) {}
  bool host :1;
  bool port :1;
  bool zone :1;
} _CallHost__isset;

class CallHost : public virtual ::apache::thrift::TBase {
 public:

  CallHost(const CallHost&);
  CallHost& operator=(const CallHost&);
  CallHost() : host(), port(0), zone() {
  }

  virtual ~CallHost() noexcept;
  std::string host;
  int32_t port;
  std::string zone;

  _CallHost__isset __isset;

  void __set_host(const std::string& val);

  void __set_port(const int32_t val);

  void __set_zone(const std::string& val);

  bool operator == (const CallHost & rhs) const
  {
    if (!(host == rhs.host))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(zone == rhs.zone))
      return false;
    return true;
  }
  bool operator != (const CallHost &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CallHost & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CallHost &a, CallHost &b);

std::ostream& operator<<(std::ostream& out, const CallHost& obj);

typedef struct _AgeCheckDocomoResult__isset {
  _AgeCheckDocomoResult__isset() : authUrl(false), userAgeType(false) {}
  bool authUrl :1;
  bool userAgeType :1;
} _AgeCheckDocomoResult__isset;

class AgeCheckDocomoResult : public virtual ::apache::thrift::TBase {
 public:

  AgeCheckDocomoResult(const AgeCheckDocomoResult&);
  AgeCheckDocomoResult& operator=(const AgeCheckDocomoResult&);
  AgeCheckDocomoResult() : authUrl(), userAgeType((UserAgeType::type)0) {
  }

  virtual ~AgeCheckDocomoResult() noexcept;
  std::string authUrl;
  /**
   * 
   * @see UserAgeType
   */
  UserAgeType::type userAgeType;

  _AgeCheckDocomoResult__isset __isset;

  void __set_authUrl(const std::string& val);

  void __set_userAgeType(const UserAgeType::type val);

  bool operator == (const AgeCheckDocomoResult & rhs) const
  {
    if (!(authUrl == rhs.authUrl))
      return false;
    if (!(userAgeType == rhs.userAgeType))
      return false;
    return true;
  }
  bool operator != (const AgeCheckDocomoResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgeCheckDocomoResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AgeCheckDocomoResult &a, AgeCheckDocomoResult &b);

std::ostream& operator<<(std::ostream& out, const AgeCheckDocomoResult& obj);

typedef struct _AgeCheckRequestResult__isset {
  _AgeCheckRequestResult__isset() : authUrl(false), sessionId(false) {}
  bool authUrl :1;
  bool sessionId :1;
} _AgeCheckRequestResult__isset;

class AgeCheckRequestResult : public virtual ::apache::thrift::TBase {
 public:

  AgeCheckRequestResult(const AgeCheckRequestResult&);
  AgeCheckRequestResult& operator=(const AgeCheckRequestResult&);
  AgeCheckRequestResult() : authUrl(), sessionId() {
  }

  virtual ~AgeCheckRequestResult() noexcept;
  std::string authUrl;
  std::string sessionId;

  _AgeCheckRequestResult__isset __isset;

  void __set_authUrl(const std::string& val);

  void __set_sessionId(const std::string& val);

  bool operator == (const AgeCheckRequestResult & rhs) const
  {
    if (!(authUrl == rhs.authUrl))
      return false;
    if (!(sessionId == rhs.sessionId))
      return false;
    return true;
  }
  bool operator != (const AgeCheckRequestResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgeCheckRequestResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AgeCheckRequestResult &a, AgeCheckRequestResult &b);

std::ostream& operator<<(std::ostream& out, const AgeCheckRequestResult& obj);

typedef struct _TextMessageAnnouncementContents__isset {
  _TextMessageAnnouncementContents__isset() : messageId(false), text(false), senderSquareMemberMid(false), createdAt(false) {}
  bool messageId :1;
  bool text :1;
  bool senderSquareMemberMid :1;
  bool createdAt :1;
} _TextMessageAnnouncementContents__isset;

class TextMessageAnnouncementContents : public virtual ::apache::thrift::TBase {
 public:

  TextMessageAnnouncementContents(const TextMessageAnnouncementContents&);
  TextMessageAnnouncementContents& operator=(const TextMessageAnnouncementContents&);
  TextMessageAnnouncementContents() : messageId(), text(), senderSquareMemberMid(), createdAt(0) {
  }

  virtual ~TextMessageAnnouncementContents() noexcept;
  std::string messageId;
  std::string text;
  std::string senderSquareMemberMid;
  int64_t createdAt;

  _TextMessageAnnouncementContents__isset __isset;

  void __set_messageId(const std::string& val);

  void __set_text(const std::string& val);

  void __set_senderSquareMemberMid(const std::string& val);

  void __set_createdAt(const int64_t val);

  bool operator == (const TextMessageAnnouncementContents & rhs) const
  {
    if (!(messageId == rhs.messageId))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(senderSquareMemberMid == rhs.senderSquareMemberMid))
      return false;
    if (!(createdAt == rhs.createdAt))
      return false;
    return true;
  }
  bool operator != (const TextMessageAnnouncementContents &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TextMessageAnnouncementContents & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TextMessageAnnouncementContents &a, TextMessageAnnouncementContents &b);

std::ostream& operator<<(std::ostream& out, const TextMessageAnnouncementContents& obj);

typedef struct _SquareChatAnnouncementContents__isset {
  _SquareChatAnnouncementContents__isset() : textMessageAnnouncementContents(false) {}
  bool textMessageAnnouncementContents :1;
} _SquareChatAnnouncementContents__isset;

class SquareChatAnnouncementContents : public virtual ::apache::thrift::TBase {
 public:

  SquareChatAnnouncementContents(const SquareChatAnnouncementContents&);
  SquareChatAnnouncementContents& operator=(const SquareChatAnnouncementContents&);
  SquareChatAnnouncementContents() {
  }

  virtual ~SquareChatAnnouncementContents() noexcept;
  TextMessageAnnouncementContents textMessageAnnouncementContents;

  _SquareChatAnnouncementContents__isset __isset;

  void __set_textMessageAnnouncementContents(const TextMessageAnnouncementContents& val);

  bool operator == (const SquareChatAnnouncementContents & rhs) const
  {
    if (!(textMessageAnnouncementContents == rhs.textMessageAnnouncementContents))
      return false;
    return true;
  }
  bool operator != (const SquareChatAnnouncementContents &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareChatAnnouncementContents & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareChatAnnouncementContents &a, SquareChatAnnouncementContents &b);

std::ostream& operator<<(std::ostream& out, const SquareChatAnnouncementContents& obj);

typedef struct _SquareChatAnnouncement__isset {
  _SquareChatAnnouncement__isset() : announcementSeq(false), type(false), contents(false) {}
  bool announcementSeq :1;
  bool type :1;
  bool contents :1;
} _SquareChatAnnouncement__isset;

class SquareChatAnnouncement : public virtual ::apache::thrift::TBase {
 public:

  SquareChatAnnouncement(const SquareChatAnnouncement&);
  SquareChatAnnouncement& operator=(const SquareChatAnnouncement&);
  SquareChatAnnouncement() : announcementSeq(0), type((SquareChatAnnouncementType::type)0) {
  }

  virtual ~SquareChatAnnouncement() noexcept;
  int64_t announcementSeq;
  /**
   * 
   * @see SquareChatAnnouncementType
   */
  SquareChatAnnouncementType::type type;
  SquareChatAnnouncementContents contents;

  _SquareChatAnnouncement__isset __isset;

  void __set_announcementSeq(const int64_t val);

  void __set_type(const SquareChatAnnouncementType::type val);

  void __set_contents(const SquareChatAnnouncementContents& val);

  bool operator == (const SquareChatAnnouncement & rhs) const
  {
    if (!(announcementSeq == rhs.announcementSeq))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(contents == rhs.contents))
      return false;
    return true;
  }
  bool operator != (const SquareChatAnnouncement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareChatAnnouncement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareChatAnnouncement &a, SquareChatAnnouncement &b);

std::ostream& operator<<(std::ostream& out, const SquareChatAnnouncement& obj);

typedef struct _Announcement__isset {
  _Announcement__isset() : index(false), forceUpdate(false), title(false), text(false), createdTime(false), pictureUrl(false), thumbnailUrl(false) {}
  bool index :1;
  bool forceUpdate :1;
  bool title :1;
  bool text :1;
  bool createdTime :1;
  bool pictureUrl :1;
  bool thumbnailUrl :1;
} _Announcement__isset;

class Announcement : public virtual ::apache::thrift::TBase {
 public:

  Announcement(const Announcement&);
  Announcement& operator=(const Announcement&);
  Announcement() : index(0), forceUpdate(0), title(), text(), createdTime(0), pictureUrl(), thumbnailUrl() {
  }

  virtual ~Announcement() noexcept;
  int32_t index;
  bool forceUpdate;
  std::string title;
  std::string text;
  int64_t createdTime;
  std::string pictureUrl;
  std::string thumbnailUrl;

  _Announcement__isset __isset;

  void __set_index(const int32_t val);

  void __set_forceUpdate(const bool val);

  void __set_title(const std::string& val);

  void __set_text(const std::string& val);

  void __set_createdTime(const int64_t val);

  void __set_pictureUrl(const std::string& val);

  void __set_thumbnailUrl(const std::string& val);

  bool operator == (const Announcement & rhs) const
  {
    if (!(index == rhs.index))
      return false;
    if (!(forceUpdate == rhs.forceUpdate))
      return false;
    if (!(title == rhs.title))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(createdTime == rhs.createdTime))
      return false;
    if (!(pictureUrl == rhs.pictureUrl))
      return false;
    if (!(thumbnailUrl == rhs.thumbnailUrl))
      return false;
    return true;
  }
  bool operator != (const Announcement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Announcement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Announcement &a, Announcement &b);

std::ostream& operator<<(std::ostream& out, const Announcement& obj);

typedef struct _ChannelProvider__isset {
  _ChannelProvider__isset() : name(false) {}
  bool name :1;
} _ChannelProvider__isset;

class ChannelProvider : public virtual ::apache::thrift::TBase {
 public:

  ChannelProvider(const ChannelProvider&);
  ChannelProvider& operator=(const ChannelProvider&);
  ChannelProvider() : name() {
  }

  virtual ~ChannelProvider() noexcept;
  std::string name;

  _ChannelProvider__isset __isset;

  void __set_name(const std::string& val);

  bool operator == (const ChannelProvider & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const ChannelProvider &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelProvider & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ChannelProvider &a, ChannelProvider &b);

std::ostream& operator<<(std::ostream& out, const ChannelProvider& obj);

typedef struct _E2EEPublicKey__isset {
  _E2EEPublicKey__isset() : version(false), keyId(false), keyData(false), createdTime(false) {}
  bool version :1;
  bool keyId :1;
  bool keyData :1;
  bool createdTime :1;
} _E2EEPublicKey__isset;

class E2EEPublicKey : public virtual ::apache::thrift::TBase {
 public:

  E2EEPublicKey(const E2EEPublicKey&);
  E2EEPublicKey& operator=(const E2EEPublicKey&);
  E2EEPublicKey() : version(0), keyId(0), keyData(), createdTime(0) {
  }

  virtual ~E2EEPublicKey() noexcept;
  int32_t version;
  int32_t keyId;
  std::string keyData;
  int64_t createdTime;

  _E2EEPublicKey__isset __isset;

  void __set_version(const int32_t val);

  void __set_keyId(const int32_t val);

  void __set_keyData(const std::string& val);

  void __set_createdTime(const int64_t val);

  bool operator == (const E2EEPublicKey & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(keyId == rhs.keyId))
      return false;
    if (!(keyData == rhs.keyData))
      return false;
    if (!(createdTime == rhs.createdTime))
      return false;
    return true;
  }
  bool operator != (const E2EEPublicKey &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const E2EEPublicKey & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(E2EEPublicKey &a, E2EEPublicKey &b);

std::ostream& operator<<(std::ostream& out, const E2EEPublicKey& obj);

typedef struct _ChannelDomain__isset {
  _ChannelDomain__isset() : host(false), removed(false) {}
  bool host :1;
  bool removed :1;
} _ChannelDomain__isset;

class ChannelDomain : public virtual ::apache::thrift::TBase {
 public:

  ChannelDomain(const ChannelDomain&);
  ChannelDomain& operator=(const ChannelDomain&);
  ChannelDomain() : host(), removed(0) {
  }

  virtual ~ChannelDomain() noexcept;
  std::string host;
  bool removed;

  _ChannelDomain__isset __isset;

  void __set_host(const std::string& val);

  void __set_removed(const bool val);

  bool operator == (const ChannelDomain & rhs) const
  {
    if (!(host == rhs.host))
      return false;
    if (!(removed == rhs.removed))
      return false;
    return true;
  }
  bool operator != (const ChannelDomain &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelDomain & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ChannelDomain &a, ChannelDomain &b);

std::ostream& operator<<(std::ostream& out, const ChannelDomain& obj);

typedef struct _E2EENegotiationResult__isset {
  _E2EENegotiationResult__isset() : allowedTypes(false), publicKey(false) {}
  bool allowedTypes :1;
  bool publicKey :1;
} _E2EENegotiationResult__isset;

class E2EENegotiationResult : public virtual ::apache::thrift::TBase {
 public:

  E2EENegotiationResult(const E2EENegotiationResult&);
  E2EENegotiationResult& operator=(const E2EENegotiationResult&);
  E2EENegotiationResult() {
  }

  virtual ~E2EENegotiationResult() noexcept;
  std::set<ContentType::type>  allowedTypes;
  E2EEPublicKey publicKey;

  _E2EENegotiationResult__isset __isset;

  void __set_allowedTypes(const std::set<ContentType::type> & val);

  void __set_publicKey(const E2EEPublicKey& val);

  bool operator == (const E2EENegotiationResult & rhs) const
  {
    if (!(allowedTypes == rhs.allowedTypes))
      return false;
    if (!(publicKey == rhs.publicKey))
      return false;
    return true;
  }
  bool operator != (const E2EENegotiationResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const E2EENegotiationResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(E2EENegotiationResult &a, E2EENegotiationResult &b);

std::ostream& operator<<(std::ostream& out, const E2EENegotiationResult& obj);

typedef struct _OTPResult__isset {
  _OTPResult__isset() : otpId(false), otp(false) {}
  bool otpId :1;
  bool otp :1;
} _OTPResult__isset;

class OTPResult : public virtual ::apache::thrift::TBase {
 public:

  OTPResult(const OTPResult&);
  OTPResult& operator=(const OTPResult&);
  OTPResult() : otpId(), otp() {
  }

  virtual ~OTPResult() noexcept;
  std::string otpId;
  std::string otp;

  _OTPResult__isset __isset;

  void __set_otpId(const std::string& val);

  void __set_otp(const std::string& val);

  bool operator == (const OTPResult & rhs) const
  {
    if (!(otpId == rhs.otpId))
      return false;
    if (!(otp == rhs.otp))
      return false;
    return true;
  }
  bool operator != (const OTPResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OTPResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(OTPResult &a, OTPResult &b);

std::ostream& operator<<(std::ostream& out, const OTPResult& obj);

typedef struct _Square__isset {
  _Square__isset() : mid(false), name(false), welcomeMessage(false), profileImageObsHash(false), desc(false), searchable(false), type(false), categoryID(false), invitationURL(false), revision(false), ableToUseInvitationTicket(false), state(false) {}
  bool mid :1;
  bool name :1;
  bool welcomeMessage :1;
  bool profileImageObsHash :1;
  bool desc :1;
  bool searchable :1;
  bool type :1;
  bool categoryID :1;
  bool invitationURL :1;
  bool revision :1;
  bool ableToUseInvitationTicket :1;
  bool state :1;
} _Square__isset;

class Square : public virtual ::apache::thrift::TBase {
 public:

  Square(const Square&);
  Square& operator=(const Square&);
  Square() : mid(), name(), welcomeMessage(), profileImageObsHash(), desc(), searchable(0), type((SquareType::type)0), categoryID(0), invitationURL(), revision(0), ableToUseInvitationTicket(0), state((SquareState::type)0) {
  }

  virtual ~Square() noexcept;
  std::string mid;
  std::string name;
  std::string welcomeMessage;
  std::string profileImageObsHash;
  std::string desc;
  bool searchable;
  /**
   * 
   * @see SquareType
   */
  SquareType::type type;
  int32_t categoryID;
  std::string invitationURL;
  int64_t revision;
  bool ableToUseInvitationTicket;
  /**
   * 
   * @see SquareState
   */
  SquareState::type state;

  _Square__isset __isset;

  void __set_mid(const std::string& val);

  void __set_name(const std::string& val);

  void __set_welcomeMessage(const std::string& val);

  void __set_profileImageObsHash(const std::string& val);

  void __set_desc(const std::string& val);

  void __set_searchable(const bool val);

  void __set_type(const SquareType::type val);

  void __set_categoryID(const int32_t val);

  void __set_invitationURL(const std::string& val);

  void __set_revision(const int64_t val);

  void __set_ableToUseInvitationTicket(const bool val);

  void __set_state(const SquareState::type val);

  bool operator == (const Square & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(welcomeMessage == rhs.welcomeMessage))
      return false;
    if (!(profileImageObsHash == rhs.profileImageObsHash))
      return false;
    if (!(desc == rhs.desc))
      return false;
    if (!(searchable == rhs.searchable))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(categoryID == rhs.categoryID))
      return false;
    if (!(invitationURL == rhs.invitationURL))
      return false;
    if (!(revision == rhs.revision))
      return false;
    if (!(ableToUseInvitationTicket == rhs.ableToUseInvitationTicket))
      return false;
    if (!(state == rhs.state))
      return false;
    return true;
  }
  bool operator != (const Square &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Square & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Square &a, Square &b);

std::ostream& operator<<(std::ostream& out, const Square& obj);

typedef struct _SquareAuthority__isset {
  _SquareAuthority__isset() : squareMid(false), updateSquareProfile(false), inviteNewMember(false), approveJoinRequest(false), createPost(false), createOpenSquareChat(false), deleteSquareChatOrPost(false), removeSquareMember(false), grantRole(false), enableInvitationTicket(false), revision(false) {}
  bool squareMid :1;
  bool updateSquareProfile :1;
  bool inviteNewMember :1;
  bool approveJoinRequest :1;
  bool createPost :1;
  bool createOpenSquareChat :1;
  bool deleteSquareChatOrPost :1;
  bool removeSquareMember :1;
  bool grantRole :1;
  bool enableInvitationTicket :1;
  bool revision :1;
} _SquareAuthority__isset;

class SquareAuthority : public virtual ::apache::thrift::TBase {
 public:

  SquareAuthority(const SquareAuthority&);
  SquareAuthority& operator=(const SquareAuthority&);
  SquareAuthority() : squareMid(), updateSquareProfile((SquareMemberRole::type)0), inviteNewMember((SquareMemberRole::type)0), approveJoinRequest((SquareMemberRole::type)0), createPost((SquareMemberRole::type)0), createOpenSquareChat((SquareMemberRole::type)0), deleteSquareChatOrPost((SquareMemberRole::type)0), removeSquareMember((SquareMemberRole::type)0), grantRole((SquareMemberRole::type)0), enableInvitationTicket((SquareMemberRole::type)0), revision(0) {
  }

  virtual ~SquareAuthority() noexcept;
  std::string squareMid;
  /**
   * 
   * @see SquareMemberRole
   */
  SquareMemberRole::type updateSquareProfile;
  /**
   * 
   * @see SquareMemberRole
   */
  SquareMemberRole::type inviteNewMember;
  /**
   * 
   * @see SquareMemberRole
   */
  SquareMemberRole::type approveJoinRequest;
  /**
   * 
   * @see SquareMemberRole
   */
  SquareMemberRole::type createPost;
  /**
   * 
   * @see SquareMemberRole
   */
  SquareMemberRole::type createOpenSquareChat;
  /**
   * 
   * @see SquareMemberRole
   */
  SquareMemberRole::type deleteSquareChatOrPost;
  /**
   * 
   * @see SquareMemberRole
   */
  SquareMemberRole::type removeSquareMember;
  /**
   * 
   * @see SquareMemberRole
   */
  SquareMemberRole::type grantRole;
  /**
   * 
   * @see SquareMemberRole
   */
  SquareMemberRole::type enableInvitationTicket;
  int64_t revision;

  _SquareAuthority__isset __isset;

  void __set_squareMid(const std::string& val);

  void __set_updateSquareProfile(const SquareMemberRole::type val);

  void __set_inviteNewMember(const SquareMemberRole::type val);

  void __set_approveJoinRequest(const SquareMemberRole::type val);

  void __set_createPost(const SquareMemberRole::type val);

  void __set_createOpenSquareChat(const SquareMemberRole::type val);

  void __set_deleteSquareChatOrPost(const SquareMemberRole::type val);

  void __set_removeSquareMember(const SquareMemberRole::type val);

  void __set_grantRole(const SquareMemberRole::type val);

  void __set_enableInvitationTicket(const SquareMemberRole::type val);

  void __set_revision(const int64_t val);

  bool operator == (const SquareAuthority & rhs) const
  {
    if (!(squareMid == rhs.squareMid))
      return false;
    if (!(updateSquareProfile == rhs.updateSquareProfile))
      return false;
    if (!(inviteNewMember == rhs.inviteNewMember))
      return false;
    if (!(approveJoinRequest == rhs.approveJoinRequest))
      return false;
    if (!(createPost == rhs.createPost))
      return false;
    if (!(createOpenSquareChat == rhs.createOpenSquareChat))
      return false;
    if (!(deleteSquareChatOrPost == rhs.deleteSquareChatOrPost))
      return false;
    if (!(removeSquareMember == rhs.removeSquareMember))
      return false;
    if (!(grantRole == rhs.grantRole))
      return false;
    if (!(enableInvitationTicket == rhs.enableInvitationTicket))
      return false;
    if (!(revision == rhs.revision))
      return false;
    return true;
  }
  bool operator != (const SquareAuthority &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareAuthority & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareAuthority &a, SquareAuthority &b);

std::ostream& operator<<(std::ostream& out, const SquareAuthority& obj);

typedef struct _SquarePreference__isset {
  _SquarePreference__isset() : favoriteTimestamp(false), notiForNewJoinRequest(false) {}
  bool favoriteTimestamp :1;
  bool notiForNewJoinRequest :1;
} _SquarePreference__isset;

class SquarePreference : public virtual ::apache::thrift::TBase {
 public:

  SquarePreference(const SquarePreference&);
  SquarePreference& operator=(const SquarePreference&);
  SquarePreference() : favoriteTimestamp(0), notiForNewJoinRequest(0) {
  }

  virtual ~SquarePreference() noexcept;
  int64_t favoriteTimestamp;
  bool notiForNewJoinRequest;

  _SquarePreference__isset __isset;

  void __set_favoriteTimestamp(const int64_t val);

  void __set_notiForNewJoinRequest(const bool val);

  bool operator == (const SquarePreference & rhs) const
  {
    if (!(favoriteTimestamp == rhs.favoriteTimestamp))
      return false;
    if (!(notiForNewJoinRequest == rhs.notiForNewJoinRequest))
      return false;
    return true;
  }
  bool operator != (const SquarePreference &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquarePreference & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquarePreference &a, SquarePreference &b);

std::ostream& operator<<(std::ostream& out, const SquarePreference& obj);

typedef struct _SquareMember__isset {
  _SquareMember__isset() : squareMemberMid(false), squareMid(false), displayName(false), profileImageObsHash(false), ableToReceiveMessage(false), membershipState(false), role(false), revision(false), preference(false), joinMessage(false) {}
  bool squareMemberMid :1;
  bool squareMid :1;
  bool displayName :1;
  bool profileImageObsHash :1;
  bool ableToReceiveMessage :1;
  bool membershipState :1;
  bool role :1;
  bool revision :1;
  bool preference :1;
  bool joinMessage :1;
} _SquareMember__isset;

class SquareMember : public virtual ::apache::thrift::TBase {
 public:

  SquareMember(const SquareMember&);
  SquareMember& operator=(const SquareMember&);
  SquareMember() : squareMemberMid(), squareMid(), displayName(), profileImageObsHash(), ableToReceiveMessage(0), membershipState((SquareMembershipState::type)0), role((SquareMemberRole::type)0), revision(0), joinMessage() {
  }

  virtual ~SquareMember() noexcept;
  std::string squareMemberMid;
  std::string squareMid;
  std::string displayName;
  std::string profileImageObsHash;
  bool ableToReceiveMessage;
  /**
   * 
   * @see SquareMembershipState
   */
  SquareMembershipState::type membershipState;
  /**
   * 
   * @see SquareMemberRole
   */
  SquareMemberRole::type role;
  int64_t revision;
  SquarePreference preference;
  std::string joinMessage;

  _SquareMember__isset __isset;

  void __set_squareMemberMid(const std::string& val);

  void __set_squareMid(const std::string& val);

  void __set_displayName(const std::string& val);

  void __set_profileImageObsHash(const std::string& val);

  void __set_ableToReceiveMessage(const bool val);

  void __set_membershipState(const SquareMembershipState::type val);

  void __set_role(const SquareMemberRole::type val);

  void __set_revision(const int64_t val);

  void __set_preference(const SquarePreference& val);

  void __set_joinMessage(const std::string& val);

  bool operator == (const SquareMember & rhs) const
  {
    if (!(squareMemberMid == rhs.squareMemberMid))
      return false;
    if (!(squareMid == rhs.squareMid))
      return false;
    if (!(displayName == rhs.displayName))
      return false;
    if (!(profileImageObsHash == rhs.profileImageObsHash))
      return false;
    if (!(ableToReceiveMessage == rhs.ableToReceiveMessage))
      return false;
    if (!(membershipState == rhs.membershipState))
      return false;
    if (!(role == rhs.role))
      return false;
    if (!(revision == rhs.revision))
      return false;
    if (!(preference == rhs.preference))
      return false;
    if (!(joinMessage == rhs.joinMessage))
      return false;
    return true;
  }
  bool operator != (const SquareMember &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareMember & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareMember &a, SquareMember &b);

std::ostream& operator<<(std::ostream& out, const SquareMember& obj);

typedef struct _SquareMemberRelation__isset {
  _SquareMemberRelation__isset() : state(false), revision(false) {}
  bool state :1;
  bool revision :1;
} _SquareMemberRelation__isset;

class SquareMemberRelation : public virtual ::apache::thrift::TBase {
 public:

  SquareMemberRelation(const SquareMemberRelation&);
  SquareMemberRelation& operator=(const SquareMemberRelation&);
  SquareMemberRelation() : state((SquareMemberRelationState::type)0), revision(0) {
  }

  virtual ~SquareMemberRelation() noexcept;
  /**
   * 
   * @see SquareMemberRelationState
   */
  SquareMemberRelationState::type state;
  int64_t revision;

  _SquareMemberRelation__isset __isset;

  void __set_state(const SquareMemberRelationState::type val);

  void __set_revision(const int64_t val);

  bool operator == (const SquareMemberRelation & rhs) const
  {
    if (!(state == rhs.state))
      return false;
    if (!(revision == rhs.revision))
      return false;
    return true;
  }
  bool operator != (const SquareMemberRelation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareMemberRelation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareMemberRelation &a, SquareMemberRelation &b);

std::ostream& operator<<(std::ostream& out, const SquareMemberRelation& obj);

typedef struct _SquareFeature__isset {
  _SquareFeature__isset() : controlState(false), booleanValue(false) {}
  bool controlState :1;
  bool booleanValue :1;
} _SquareFeature__isset;

class SquareFeature : public virtual ::apache::thrift::TBase {
 public:

  SquareFeature(const SquareFeature&);
  SquareFeature& operator=(const SquareFeature&);
  SquareFeature() : controlState((SquareFeatureControlState::type)0), booleanValue((BooleanState::type)0) {
  }

  virtual ~SquareFeature() noexcept;
  /**
   * 
   * @see SquareFeatureControlState
   */
  SquareFeatureControlState::type controlState;
  /**
   * 
   * @see BooleanState
   */
  BooleanState::type booleanValue;

  _SquareFeature__isset __isset;

  void __set_controlState(const SquareFeatureControlState::type val);

  void __set_booleanValue(const BooleanState::type val);

  bool operator == (const SquareFeature & rhs) const
  {
    if (!(controlState == rhs.controlState))
      return false;
    if (!(booleanValue == rhs.booleanValue))
      return false;
    return true;
  }
  bool operator != (const SquareFeature &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareFeature & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareFeature &a, SquareFeature &b);

std::ostream& operator<<(std::ostream& out, const SquareFeature& obj);

typedef struct _SquareFeatureSet__isset {
  _SquareFeatureSet__isset() : squareMid(false), revision(false), creatingSecretSquareChat(false), invitingIntoOpenSquareChat(false) {}
  bool squareMid :1;
  bool revision :1;
  bool creatingSecretSquareChat :1;
  bool invitingIntoOpenSquareChat :1;
} _SquareFeatureSet__isset;

class SquareFeatureSet : public virtual ::apache::thrift::TBase {
 public:

  SquareFeatureSet(const SquareFeatureSet&);
  SquareFeatureSet& operator=(const SquareFeatureSet&);
  SquareFeatureSet() : squareMid(), revision(0) {
  }

  virtual ~SquareFeatureSet() noexcept;
  std::string squareMid;
  int64_t revision;
  SquareFeature creatingSecretSquareChat;
  SquareFeature invitingIntoOpenSquareChat;

  _SquareFeatureSet__isset __isset;

  void __set_squareMid(const std::string& val);

  void __set_revision(const int64_t val);

  void __set_creatingSecretSquareChat(const SquareFeature& val);

  void __set_invitingIntoOpenSquareChat(const SquareFeature& val);

  bool operator == (const SquareFeatureSet & rhs) const
  {
    if (!(squareMid == rhs.squareMid))
      return false;
    if (!(revision == rhs.revision))
      return false;
    if (!(creatingSecretSquareChat == rhs.creatingSecretSquareChat))
      return false;
    if (!(invitingIntoOpenSquareChat == rhs.invitingIntoOpenSquareChat))
      return false;
    return true;
  }
  bool operator != (const SquareFeatureSet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareFeatureSet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareFeatureSet &a, SquareFeatureSet &b);

std::ostream& operator<<(std::ostream& out, const SquareFeatureSet& obj);

typedef struct _SquareStatus__isset {
  _SquareStatus__isset() : memberCount(false), joinRequestCount(false), lastJoinRequestAt(false), openChatCount(false) {}
  bool memberCount :1;
  bool joinRequestCount :1;
  bool lastJoinRequestAt :1;
  bool openChatCount :1;
} _SquareStatus__isset;

class SquareStatus : public virtual ::apache::thrift::TBase {
 public:

  SquareStatus(const SquareStatus&);
  SquareStatus& operator=(const SquareStatus&);
  SquareStatus() : memberCount(0), joinRequestCount(0), lastJoinRequestAt(0), openChatCount(0) {
  }

  virtual ~SquareStatus() noexcept;
  int32_t memberCount;
  int32_t joinRequestCount;
  int64_t lastJoinRequestAt;
  int32_t openChatCount;

  _SquareStatus__isset __isset;

  void __set_memberCount(const int32_t val);

  void __set_joinRequestCount(const int32_t val);

  void __set_lastJoinRequestAt(const int64_t val);

  void __set_openChatCount(const int32_t val);

  bool operator == (const SquareStatus & rhs) const
  {
    if (!(memberCount == rhs.memberCount))
      return false;
    if (!(joinRequestCount == rhs.joinRequestCount))
      return false;
    if (!(lastJoinRequestAt == rhs.lastJoinRequestAt))
      return false;
    if (!(openChatCount == rhs.openChatCount))
      return false;
    return true;
  }
  bool operator != (const SquareStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareStatus &a, SquareStatus &b);

std::ostream& operator<<(std::ostream& out, const SquareStatus& obj);

typedef struct _SquareChat__isset {
  _SquareChat__isset() : squareChatMid(false), squareMid(false), type(false), name(false), chatImageObsHash(false), squareChatRevision(false), maxMemberCount(false), state(false) {}
  bool squareChatMid :1;
  bool squareMid :1;
  bool type :1;
  bool name :1;
  bool chatImageObsHash :1;
  bool squareChatRevision :1;
  bool maxMemberCount :1;
  bool state :1;
} _SquareChat__isset;

class SquareChat : public virtual ::apache::thrift::TBase {
 public:

  SquareChat(const SquareChat&);
  SquareChat& operator=(const SquareChat&);
  SquareChat() : squareChatMid(), squareMid(), type((SquareChatType::type)0), name(), chatImageObsHash(), squareChatRevision(0), maxMemberCount(0), state((SquareChatState::type)0) {
  }

  virtual ~SquareChat() noexcept;
  std::string squareChatMid;
  std::string squareMid;
  /**
   * 
   * @see SquareChatType
   */
  SquareChatType::type type;
  std::string name;
  std::string chatImageObsHash;
  int64_t squareChatRevision;
  int32_t maxMemberCount;
  /**
   * 
   * @see SquareChatState
   */
  SquareChatState::type state;

  _SquareChat__isset __isset;

  void __set_squareChatMid(const std::string& val);

  void __set_squareMid(const std::string& val);

  void __set_type(const SquareChatType::type val);

  void __set_name(const std::string& val);

  void __set_chatImageObsHash(const std::string& val);

  void __set_squareChatRevision(const int64_t val);

  void __set_maxMemberCount(const int32_t val);

  void __set_state(const SquareChatState::type val);

  bool operator == (const SquareChat & rhs) const
  {
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    if (!(squareMid == rhs.squareMid))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(chatImageObsHash == rhs.chatImageObsHash))
      return false;
    if (!(squareChatRevision == rhs.squareChatRevision))
      return false;
    if (!(maxMemberCount == rhs.maxMemberCount))
      return false;
    if (!(state == rhs.state))
      return false;
    return true;
  }
  bool operator != (const SquareChat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareChat & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareChat &a, SquareChat &b);

std::ostream& operator<<(std::ostream& out, const SquareChat& obj);

typedef struct _NoteStatus__isset {
  _NoteStatus__isset() : noteCount(false), latestCreatedAt(false) {}
  bool noteCount :1;
  bool latestCreatedAt :1;
} _NoteStatus__isset;

class NoteStatus : public virtual ::apache::thrift::TBase {
 public:

  NoteStatus(const NoteStatus&);
  NoteStatus& operator=(const NoteStatus&);
  NoteStatus() : noteCount(0), latestCreatedAt(0) {
  }

  virtual ~NoteStatus() noexcept;
  int32_t noteCount;
  int64_t latestCreatedAt;

  _NoteStatus__isset __isset;

  void __set_noteCount(const int32_t val);

  void __set_latestCreatedAt(const int64_t val);

  bool operator == (const NoteStatus & rhs) const
  {
    if (!(noteCount == rhs.noteCount))
      return false;
    if (!(latestCreatedAt == rhs.latestCreatedAt))
      return false;
    return true;
  }
  bool operator != (const NoteStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NoteStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(NoteStatus &a, NoteStatus &b);

std::ostream& operator<<(std::ostream& out, const NoteStatus& obj);

typedef struct _SquareInfo__isset {
  _SquareInfo__isset() : square(false), squareStatus(false), squareNoteStatus(false) {}
  bool square :1;
  bool squareStatus :1;
  bool squareNoteStatus :1;
} _SquareInfo__isset;

class SquareInfo : public virtual ::apache::thrift::TBase {
 public:

  SquareInfo(const SquareInfo&);
  SquareInfo& operator=(const SquareInfo&);
  SquareInfo() {
  }

  virtual ~SquareInfo() noexcept;
  Square square;
  SquareStatus squareStatus;
  NoteStatus squareNoteStatus;

  _SquareInfo__isset __isset;

  void __set_square(const Square& val);

  void __set_squareStatus(const SquareStatus& val);

  void __set_squareNoteStatus(const NoteStatus& val);

  bool operator == (const SquareInfo & rhs) const
  {
    if (!(square == rhs.square))
      return false;
    if (!(squareStatus == rhs.squareStatus))
      return false;
    if (!(squareNoteStatus == rhs.squareNoteStatus))
      return false;
    return true;
  }
  bool operator != (const SquareInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareInfo &a, SquareInfo &b);

std::ostream& operator<<(std::ostream& out, const SquareInfo& obj);

typedef struct _BotUseInfo__isset {
  _BotUseInfo__isset() : botUseAgreementAccepted(false), botInFriends(false), primaryApplication(false), locale(false) {}
  bool botUseAgreementAccepted :1;
  bool botInFriends :1;
  bool primaryApplication :1;
  bool locale :1;
} _BotUseInfo__isset;

class BotUseInfo : public virtual ::apache::thrift::TBase {
 public:

  BotUseInfo(const BotUseInfo&);
  BotUseInfo& operator=(const BotUseInfo&);
  BotUseInfo() : botUseAgreementAccepted(0), botInFriends(0), primaryApplication(), locale() {
  }

  virtual ~BotUseInfo() noexcept;
  bool botUseAgreementAccepted;
  bool botInFriends;
  std::string primaryApplication;
  std::string locale;

  _BotUseInfo__isset __isset;

  void __set_botUseAgreementAccepted(const bool val);

  void __set_botInFriends(const bool val);

  void __set_primaryApplication(const std::string& val);

  void __set_locale(const std::string& val);

  bool operator == (const BotUseInfo & rhs) const
  {
    if (!(botUseAgreementAccepted == rhs.botUseAgreementAccepted))
      return false;
    if (!(botInFriends == rhs.botInFriends))
      return false;
    if (!(primaryApplication == rhs.primaryApplication))
      return false;
    if (!(locale == rhs.locale))
      return false;
    return true;
  }
  bool operator != (const BotUseInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BotUseInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BotUseInfo &a, BotUseInfo &b);

std::ostream& operator<<(std::ostream& out, const BotUseInfo& obj);

typedef struct _PaidCallAdCountry__isset {
  _PaidCallAdCountry__isset() : countryCode(false), rateDivision(false) {}
  bool countryCode :1;
  bool rateDivision :1;
} _PaidCallAdCountry__isset;

class PaidCallAdCountry : public virtual ::apache::thrift::TBase {
 public:

  PaidCallAdCountry(const PaidCallAdCountry&);
  PaidCallAdCountry& operator=(const PaidCallAdCountry&);
  PaidCallAdCountry() : countryCode(), rateDivision() {
  }

  virtual ~PaidCallAdCountry() noexcept;
  std::string countryCode;
  std::string rateDivision;

  _PaidCallAdCountry__isset __isset;

  void __set_countryCode(const std::string& val);

  void __set_rateDivision(const std::string& val);

  bool operator == (const PaidCallAdCountry & rhs) const
  {
    if (!(countryCode == rhs.countryCode))
      return false;
    if (!(rateDivision == rhs.rateDivision))
      return false;
    return true;
  }
  bool operator != (const PaidCallAdCountry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PaidCallAdCountry & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PaidCallAdCountry &a, PaidCallAdCountry &b);

std::ostream& operator<<(std::ostream& out, const PaidCallAdCountry& obj);

typedef struct _PaidCallAdResult__isset {
  _PaidCallAdResult__isset() : adRemains(false) {}
  bool adRemains :1;
} _PaidCallAdResult__isset;

class PaidCallAdResult : public virtual ::apache::thrift::TBase {
 public:

  PaidCallAdResult(const PaidCallAdResult&);
  PaidCallAdResult& operator=(const PaidCallAdResult&);
  PaidCallAdResult() : adRemains(0) {
  }

  virtual ~PaidCallAdResult() noexcept;
  int32_t adRemains;

  _PaidCallAdResult__isset __isset;

  void __set_adRemains(const int32_t val);

  bool operator == (const PaidCallAdResult & rhs) const
  {
    if (!(adRemains == rhs.adRemains))
      return false;
    return true;
  }
  bool operator != (const PaidCallAdResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PaidCallAdResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PaidCallAdResult &a, PaidCallAdResult &b);

std::ostream& operator<<(std::ostream& out, const PaidCallAdResult& obj);

typedef struct _PaidCallBalance__isset {
  _PaidCallBalance__isset() : productType(false), productName(false), unit(false), limitedPaidBalance(false), limitedFreeBalance(false), unlimitedPaidBalance(false), unlimitedFreeBalance(false), startTime(false), endTime(false), autopayEnabled(false) {}
  bool productType :1;
  bool productName :1;
  bool unit :1;
  bool limitedPaidBalance :1;
  bool limitedFreeBalance :1;
  bool unlimitedPaidBalance :1;
  bool unlimitedFreeBalance :1;
  bool startTime :1;
  bool endTime :1;
  bool autopayEnabled :1;
} _PaidCallBalance__isset;

class PaidCallBalance : public virtual ::apache::thrift::TBase {
 public:

  PaidCallBalance(const PaidCallBalance&);
  PaidCallBalance& operator=(const PaidCallBalance&);
  PaidCallBalance() : productType((PaidCallProductType::type)0), productName(), unit(), limitedPaidBalance(0), limitedFreeBalance(0), unlimitedPaidBalance(0), unlimitedFreeBalance(0), startTime(0), endTime(0), autopayEnabled(0) {
  }

  virtual ~PaidCallBalance() noexcept;
  /**
   * 
   * @see PaidCallProductType
   */
  PaidCallProductType::type productType;
  std::string productName;
  std::string unit;
  int32_t limitedPaidBalance;
  int32_t limitedFreeBalance;
  int32_t unlimitedPaidBalance;
  int32_t unlimitedFreeBalance;
  int64_t startTime;
  int64_t endTime;
  bool autopayEnabled;

  _PaidCallBalance__isset __isset;

  void __set_productType(const PaidCallProductType::type val);

  void __set_productName(const std::string& val);

  void __set_unit(const std::string& val);

  void __set_limitedPaidBalance(const int32_t val);

  void __set_limitedFreeBalance(const int32_t val);

  void __set_unlimitedPaidBalance(const int32_t val);

  void __set_unlimitedFreeBalance(const int32_t val);

  void __set_startTime(const int64_t val);

  void __set_endTime(const int64_t val);

  void __set_autopayEnabled(const bool val);

  bool operator == (const PaidCallBalance & rhs) const
  {
    if (!(productType == rhs.productType))
      return false;
    if (!(productName == rhs.productName))
      return false;
    if (!(unit == rhs.unit))
      return false;
    if (!(limitedPaidBalance == rhs.limitedPaidBalance))
      return false;
    if (!(limitedFreeBalance == rhs.limitedFreeBalance))
      return false;
    if (!(unlimitedPaidBalance == rhs.unlimitedPaidBalance))
      return false;
    if (!(unlimitedFreeBalance == rhs.unlimitedFreeBalance))
      return false;
    if (!(startTime == rhs.startTime))
      return false;
    if (!(endTime == rhs.endTime))
      return false;
    if (!(autopayEnabled == rhs.autopayEnabled))
      return false;
    return true;
  }
  bool operator != (const PaidCallBalance &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PaidCallBalance & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PaidCallBalance &a, PaidCallBalance &b);

std::ostream& operator<<(std::ostream& out, const PaidCallBalance& obj);

typedef struct _PaidCallCurrencyExchangeRate__isset {
  _PaidCallCurrencyExchangeRate__isset() : currencyCode(false), currencyName(false), currencySign(false), preferred(false), coinRate(false), creditRate(false) {}
  bool currencyCode :1;
  bool currencyName :1;
  bool currencySign :1;
  bool preferred :1;
  bool coinRate :1;
  bool creditRate :1;
} _PaidCallCurrencyExchangeRate__isset;

class PaidCallCurrencyExchangeRate : public virtual ::apache::thrift::TBase {
 public:

  PaidCallCurrencyExchangeRate(const PaidCallCurrencyExchangeRate&);
  PaidCallCurrencyExchangeRate& operator=(const PaidCallCurrencyExchangeRate&);
  PaidCallCurrencyExchangeRate() : currencyCode(), currencyName(), currencySign(), preferred(0), coinRate(), creditRate() {
  }

  virtual ~PaidCallCurrencyExchangeRate() noexcept;
  std::string currencyCode;
  std::string currencyName;
  std::string currencySign;
  bool preferred;
  std::string coinRate;
  std::string creditRate;

  _PaidCallCurrencyExchangeRate__isset __isset;

  void __set_currencyCode(const std::string& val);

  void __set_currencyName(const std::string& val);

  void __set_currencySign(const std::string& val);

  void __set_preferred(const bool val);

  void __set_coinRate(const std::string& val);

  void __set_creditRate(const std::string& val);

  bool operator == (const PaidCallCurrencyExchangeRate & rhs) const
  {
    if (!(currencyCode == rhs.currencyCode))
      return false;
    if (!(currencyName == rhs.currencyName))
      return false;
    if (!(currencySign == rhs.currencySign))
      return false;
    if (!(preferred == rhs.preferred))
      return false;
    if (!(coinRate == rhs.coinRate))
      return false;
    if (!(creditRate == rhs.creditRate))
      return false;
    return true;
  }
  bool operator != (const PaidCallCurrencyExchangeRate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PaidCallCurrencyExchangeRate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PaidCallCurrencyExchangeRate &a, PaidCallCurrencyExchangeRate &b);

std::ostream& operator<<(std::ostream& out, const PaidCallCurrencyExchangeRate& obj);

typedef struct _ExtendedProfileBirthday__isset {
  _ExtendedProfileBirthday__isset() : year(false), yearPrivacyLevelType(false), yearEnabled(false), day(false), dayPrivacyLevelType(false), dayEnabled(false) {}
  bool year :1;
  bool yearPrivacyLevelType :1;
  bool yearEnabled :1;
  bool day :1;
  bool dayPrivacyLevelType :1;
  bool dayEnabled :1;
} _ExtendedProfileBirthday__isset;

class ExtendedProfileBirthday : public virtual ::apache::thrift::TBase {
 public:

  ExtendedProfileBirthday(const ExtendedProfileBirthday&);
  ExtendedProfileBirthday& operator=(const ExtendedProfileBirthday&);
  ExtendedProfileBirthday() : year(), yearPrivacyLevelType((PrivacyLevelType::type)0), yearEnabled(0), day(), dayPrivacyLevelType((PrivacyLevelType::type)0), dayEnabled(0) {
  }

  virtual ~ExtendedProfileBirthday() noexcept;
  std::string year;
  /**
   * 
   * @see PrivacyLevelType
   */
  PrivacyLevelType::type yearPrivacyLevelType;
  bool yearEnabled;
  std::string day;
  /**
   * 
   * @see PrivacyLevelType
   */
  PrivacyLevelType::type dayPrivacyLevelType;
  bool dayEnabled;

  _ExtendedProfileBirthday__isset __isset;

  void __set_year(const std::string& val);

  void __set_yearPrivacyLevelType(const PrivacyLevelType::type val);

  void __set_yearEnabled(const bool val);

  void __set_day(const std::string& val);

  void __set_dayPrivacyLevelType(const PrivacyLevelType::type val);

  void __set_dayEnabled(const bool val);

  bool operator == (const ExtendedProfileBirthday & rhs) const
  {
    if (!(year == rhs.year))
      return false;
    if (!(yearPrivacyLevelType == rhs.yearPrivacyLevelType))
      return false;
    if (!(yearEnabled == rhs.yearEnabled))
      return false;
    if (!(day == rhs.day))
      return false;
    if (!(dayPrivacyLevelType == rhs.dayPrivacyLevelType))
      return false;
    if (!(dayEnabled == rhs.dayEnabled))
      return false;
    return true;
  }
  bool operator != (const ExtendedProfileBirthday &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExtendedProfileBirthday & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ExtendedProfileBirthday &a, ExtendedProfileBirthday &b);

std::ostream& operator<<(std::ostream& out, const ExtendedProfileBirthday& obj);

typedef struct _ExtendedProfile__isset {
  _ExtendedProfile__isset() : birthday(false) {}
  bool birthday :1;
} _ExtendedProfile__isset;

class ExtendedProfile : public virtual ::apache::thrift::TBase {
 public:

  ExtendedProfile(const ExtendedProfile&);
  ExtendedProfile& operator=(const ExtendedProfile&);
  ExtendedProfile() {
  }

  virtual ~ExtendedProfile() noexcept;
  ExtendedProfileBirthday birthday;

  _ExtendedProfile__isset __isset;

  void __set_birthday(const ExtendedProfileBirthday& val);

  bool operator == (const ExtendedProfile & rhs) const
  {
    if (!(birthday == rhs.birthday))
      return false;
    return true;
  }
  bool operator != (const ExtendedProfile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExtendedProfile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ExtendedProfile &a, ExtendedProfile &b);

std::ostream& operator<<(std::ostream& out, const ExtendedProfile& obj);

typedef struct _PaidCallDialing__isset {
  _PaidCallDialing__isset() : type(false), dialedNumber(false), serviceDomain(false), productType(false), productName(false), multipleProduct(false), callerIdStatus(false), balance(false), unit(false), rate(false), displayCode(false), calledNumber(false), calleeNationalNumber(false), calleeCallingCode(false), rateDivision(false), adMaxMin(false), adRemains(false), adSessionId(false) {}
  bool type :1;
  bool dialedNumber :1;
  bool serviceDomain :1;
  bool productType :1;
  bool productName :1;
  bool multipleProduct :1;
  bool callerIdStatus :1;
  bool balance :1;
  bool unit :1;
  bool rate :1;
  bool displayCode :1;
  bool calledNumber :1;
  bool calleeNationalNumber :1;
  bool calleeCallingCode :1;
  bool rateDivision :1;
  bool adMaxMin :1;
  bool adRemains :1;
  bool adSessionId :1;
} _PaidCallDialing__isset;

class PaidCallDialing : public virtual ::apache::thrift::TBase {
 public:

  PaidCallDialing(const PaidCallDialing&);
  PaidCallDialing& operator=(const PaidCallDialing&);
  PaidCallDialing() : type((PaidCallType::type)0), dialedNumber(), serviceDomain(), productType((PaidCallProductType::type)0), productName(), multipleProduct(0), callerIdStatus((PaidCallerIdStatus::type)0), balance(0), unit(), rate(0), displayCode(), calledNumber(), calleeNationalNumber(), calleeCallingCode(), rateDivision(), adMaxMin(0), adRemains(0), adSessionId() {
  }

  virtual ~PaidCallDialing() noexcept;
  /**
   * 
   * @see PaidCallType
   */
  PaidCallType::type type;
  std::string dialedNumber;
  std::string serviceDomain;
  /**
   * 
   * @see PaidCallProductType
   */
  PaidCallProductType::type productType;
  std::string productName;
  bool multipleProduct;
  /**
   * 
   * @see PaidCallerIdStatus
   */
  PaidCallerIdStatus::type callerIdStatus;
  int32_t balance;
  std::string unit;
  int32_t rate;
  std::string displayCode;
  std::string calledNumber;
  std::string calleeNationalNumber;
  std::string calleeCallingCode;
  std::string rateDivision;
  int32_t adMaxMin;
  int32_t adRemains;
  std::string adSessionId;

  _PaidCallDialing__isset __isset;

  void __set_type(const PaidCallType::type val);

  void __set_dialedNumber(const std::string& val);

  void __set_serviceDomain(const std::string& val);

  void __set_productType(const PaidCallProductType::type val);

  void __set_productName(const std::string& val);

  void __set_multipleProduct(const bool val);

  void __set_callerIdStatus(const PaidCallerIdStatus::type val);

  void __set_balance(const int32_t val);

  void __set_unit(const std::string& val);

  void __set_rate(const int32_t val);

  void __set_displayCode(const std::string& val);

  void __set_calledNumber(const std::string& val);

  void __set_calleeNationalNumber(const std::string& val);

  void __set_calleeCallingCode(const std::string& val);

  void __set_rateDivision(const std::string& val);

  void __set_adMaxMin(const int32_t val);

  void __set_adRemains(const int32_t val);

  void __set_adSessionId(const std::string& val);

  bool operator == (const PaidCallDialing & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(dialedNumber == rhs.dialedNumber))
      return false;
    if (!(serviceDomain == rhs.serviceDomain))
      return false;
    if (!(productType == rhs.productType))
      return false;
    if (!(productName == rhs.productName))
      return false;
    if (!(multipleProduct == rhs.multipleProduct))
      return false;
    if (!(callerIdStatus == rhs.callerIdStatus))
      return false;
    if (!(balance == rhs.balance))
      return false;
    if (!(unit == rhs.unit))
      return false;
    if (!(rate == rhs.rate))
      return false;
    if (!(displayCode == rhs.displayCode))
      return false;
    if (!(calledNumber == rhs.calledNumber))
      return false;
    if (!(calleeNationalNumber == rhs.calleeNationalNumber))
      return false;
    if (!(calleeCallingCode == rhs.calleeCallingCode))
      return false;
    if (!(rateDivision == rhs.rateDivision))
      return false;
    if (!(adMaxMin == rhs.adMaxMin))
      return false;
    if (!(adRemains == rhs.adRemains))
      return false;
    if (!(adSessionId == rhs.adSessionId))
      return false;
    return true;
  }
  bool operator != (const PaidCallDialing &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PaidCallDialing & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PaidCallDialing &a, PaidCallDialing &b);

std::ostream& operator<<(std::ostream& out, const PaidCallDialing& obj);

typedef struct _SpotItem__isset {
  _SpotItem__isset() : name(false), phone(false), category(false), mid(false), countryAreaCode(false), freePhoneCallable(false) {}
  bool name :1;
  bool phone :1;
  bool category :1;
  bool mid :1;
  bool countryAreaCode :1;
  bool freePhoneCallable :1;
} _SpotItem__isset;

class SpotItem : public virtual ::apache::thrift::TBase {
 public:

  SpotItem(const SpotItem&);
  SpotItem& operator=(const SpotItem&);
  SpotItem() : name(), phone(), category((SpotCategory::type)0), mid(), countryAreaCode(), freePhoneCallable(0) {
  }

  virtual ~SpotItem() noexcept;
  std::string name;
  std::string phone;
  /**
   * 
   * @see SpotCategory
   */
  SpotCategory::type category;
  std::string mid;
  std::string countryAreaCode;
  bool freePhoneCallable;

  _SpotItem__isset __isset;

  void __set_name(const std::string& val);

  void __set_phone(const std::string& val);

  void __set_category(const SpotCategory::type val);

  void __set_mid(const std::string& val);

  void __set_countryAreaCode(const std::string& val);

  void __set_freePhoneCallable(const bool val);

  bool operator == (const SpotItem & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(phone == rhs.phone))
      return false;
    if (!(category == rhs.category))
      return false;
    if (!(mid == rhs.mid))
      return false;
    if (!(countryAreaCode == rhs.countryAreaCode))
      return false;
    if (!(freePhoneCallable == rhs.freePhoneCallable))
      return false;
    return true;
  }
  bool operator != (const SpotItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SpotItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SpotItem &a, SpotItem &b);

std::ostream& operator<<(std::ostream& out, const SpotItem& obj);

typedef struct _SpotNearbyItem__isset {
  _SpotNearbyItem__isset() : spotItem(false), location(false) {}
  bool spotItem :1;
  bool location :1;
} _SpotNearbyItem__isset;

class SpotNearbyItem : public virtual ::apache::thrift::TBase {
 public:

  SpotNearbyItem(const SpotNearbyItem&);
  SpotNearbyItem& operator=(const SpotNearbyItem&);
  SpotNearbyItem() {
  }

  virtual ~SpotNearbyItem() noexcept;
  SpotItem spotItem;
  Location location;

  _SpotNearbyItem__isset __isset;

  void __set_spotItem(const SpotItem& val);

  void __set_location(const Location& val);

  bool operator == (const SpotNearbyItem & rhs) const
  {
    if (!(spotItem == rhs.spotItem))
      return false;
    if (!(location == rhs.location))
      return false;
    return true;
  }
  bool operator != (const SpotNearbyItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SpotNearbyItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SpotNearbyItem &a, SpotNearbyItem &b);

std::ostream& operator<<(std::ostream& out, const SpotNearbyItem& obj);

typedef struct _SpotNearbyResponse__isset {
  _SpotNearbyResponse__isset() : spotNearbyItems(false) {}
  bool spotNearbyItems :1;
} _SpotNearbyResponse__isset;

class SpotNearbyResponse : public virtual ::apache::thrift::TBase {
 public:

  SpotNearbyResponse(const SpotNearbyResponse&);
  SpotNearbyResponse& operator=(const SpotNearbyResponse&);
  SpotNearbyResponse() {
  }

  virtual ~SpotNearbyResponse() noexcept;
  std::vector<SpotNearbyItem>  spotNearbyItems;

  _SpotNearbyResponse__isset __isset;

  void __set_spotNearbyItems(const std::vector<SpotNearbyItem> & val);

  bool operator == (const SpotNearbyResponse & rhs) const
  {
    if (!(spotNearbyItems == rhs.spotNearbyItems))
      return false;
    return true;
  }
  bool operator != (const SpotNearbyResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SpotNearbyResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SpotNearbyResponse &a, SpotNearbyResponse &b);

std::ostream& operator<<(std::ostream& out, const SpotNearbyResponse& obj);

typedef struct _SpotPhoneNumberResponse__isset {
  _SpotPhoneNumberResponse__isset() : spotItems(false) {}
  bool spotItems :1;
} _SpotPhoneNumberResponse__isset;

class SpotPhoneNumberResponse : public virtual ::apache::thrift::TBase {
 public:

  SpotPhoneNumberResponse(const SpotPhoneNumberResponse&);
  SpotPhoneNumberResponse& operator=(const SpotPhoneNumberResponse&);
  SpotPhoneNumberResponse() {
  }

  virtual ~SpotPhoneNumberResponse() noexcept;
  std::vector<SpotItem>  spotItems;

  _SpotPhoneNumberResponse__isset __isset;

  void __set_spotItems(const std::vector<SpotItem> & val);

  bool operator == (const SpotPhoneNumberResponse & rhs) const
  {
    if (!(spotItems == rhs.spotItems))
      return false;
    return true;
  }
  bool operator != (const SpotPhoneNumberResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SpotPhoneNumberResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SpotPhoneNumberResponse &a, SpotPhoneNumberResponse &b);

std::ostream& operator<<(std::ostream& out, const SpotPhoneNumberResponse& obj);

typedef struct _PaidCallHistory__isset {
  _PaidCallHistory__isset() : seq(false), type(false), dialedNumber(false), calledNumber(false), toMid(false), toName(false), setupTime(false), startTime(false), endTime(false), duration(false), terminate(false), productType(false), charge(false), unit(false), result(false) {}
  bool seq :1;
  bool type :1;
  bool dialedNumber :1;
  bool calledNumber :1;
  bool toMid :1;
  bool toName :1;
  bool setupTime :1;
  bool startTime :1;
  bool endTime :1;
  bool duration :1;
  bool terminate :1;
  bool productType :1;
  bool charge :1;
  bool unit :1;
  bool result :1;
} _PaidCallHistory__isset;

class PaidCallHistory : public virtual ::apache::thrift::TBase {
 public:

  PaidCallHistory(const PaidCallHistory&);
  PaidCallHistory& operator=(const PaidCallHistory&);
  PaidCallHistory() : seq(0), type((PaidCallType::type)0), dialedNumber(), calledNumber(), toMid(), toName(), setupTime(0), startTime(0), endTime(0), duration(0), terminate(0), productType((PaidCallProductType::type)0), charge(0), unit(), result() {
  }

  virtual ~PaidCallHistory() noexcept;
  int64_t seq;
  /**
   * 
   * @see PaidCallType
   */
  PaidCallType::type type;
  std::string dialedNumber;
  std::string calledNumber;
  std::string toMid;
  std::string toName;
  int64_t setupTime;
  int64_t startTime;
  int64_t endTime;
  int64_t duration;
  int32_t terminate;
  /**
   * 
   * @see PaidCallProductType
   */
  PaidCallProductType::type productType;
  int32_t charge;
  std::string unit;
  std::string result;

  _PaidCallHistory__isset __isset;

  void __set_seq(const int64_t val);

  void __set_type(const PaidCallType::type val);

  void __set_dialedNumber(const std::string& val);

  void __set_calledNumber(const std::string& val);

  void __set_toMid(const std::string& val);

  void __set_toName(const std::string& val);

  void __set_setupTime(const int64_t val);

  void __set_startTime(const int64_t val);

  void __set_endTime(const int64_t val);

  void __set_duration(const int64_t val);

  void __set_terminate(const int32_t val);

  void __set_productType(const PaidCallProductType::type val);

  void __set_charge(const int32_t val);

  void __set_unit(const std::string& val);

  void __set_result(const std::string& val);

  bool operator == (const PaidCallHistory & rhs) const
  {
    if (!(seq == rhs.seq))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(dialedNumber == rhs.dialedNumber))
      return false;
    if (!(calledNumber == rhs.calledNumber))
      return false;
    if (!(toMid == rhs.toMid))
      return false;
    if (!(toName == rhs.toName))
      return false;
    if (!(setupTime == rhs.setupTime))
      return false;
    if (!(startTime == rhs.startTime))
      return false;
    if (!(endTime == rhs.endTime))
      return false;
    if (!(duration == rhs.duration))
      return false;
    if (!(terminate == rhs.terminate))
      return false;
    if (!(productType == rhs.productType))
      return false;
    if (!(charge == rhs.charge))
      return false;
    if (!(unit == rhs.unit))
      return false;
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const PaidCallHistory &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PaidCallHistory & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PaidCallHistory &a, PaidCallHistory &b);

std::ostream& operator<<(std::ostream& out, const PaidCallHistory& obj);

typedef struct _PaidCallHistoryResult__isset {
  _PaidCallHistoryResult__isset() : historys(false), hasNext(false) {}
  bool historys :1;
  bool hasNext :1;
} _PaidCallHistoryResult__isset;

class PaidCallHistoryResult : public virtual ::apache::thrift::TBase {
 public:

  PaidCallHistoryResult(const PaidCallHistoryResult&);
  PaidCallHistoryResult& operator=(const PaidCallHistoryResult&);
  PaidCallHistoryResult() : hasNext(0) {
  }

  virtual ~PaidCallHistoryResult() noexcept;
  std::vector<PaidCallHistory>  historys;
  bool hasNext;

  _PaidCallHistoryResult__isset __isset;

  void __set_historys(const std::vector<PaidCallHistory> & val);

  void __set_hasNext(const bool val);

  bool operator == (const PaidCallHistoryResult & rhs) const
  {
    if (!(historys == rhs.historys))
      return false;
    if (!(hasNext == rhs.hasNext))
      return false;
    return true;
  }
  bool operator != (const PaidCallHistoryResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PaidCallHistoryResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PaidCallHistoryResult &a, PaidCallHistoryResult &b);

std::ostream& operator<<(std::ostream& out, const PaidCallHistoryResult& obj);

typedef struct _PaidCallMetadataResult__isset {
  _PaidCallMetadataResult__isset() : currencyExchangeRates(false), recommendedCountryCodes(false), adCountries(false) {}
  bool currencyExchangeRates :1;
  bool recommendedCountryCodes :1;
  bool adCountries :1;
} _PaidCallMetadataResult__isset;

class PaidCallMetadataResult : public virtual ::apache::thrift::TBase {
 public:

  PaidCallMetadataResult(const PaidCallMetadataResult&);
  PaidCallMetadataResult& operator=(const PaidCallMetadataResult&);
  PaidCallMetadataResult() {
  }

  virtual ~PaidCallMetadataResult() noexcept;
  std::vector<PaidCallCurrencyExchangeRate>  currencyExchangeRates;
  std::vector<std::string>  recommendedCountryCodes;
  std::vector<PaidCallAdCountry>  adCountries;

  _PaidCallMetadataResult__isset __isset;

  void __set_currencyExchangeRates(const std::vector<PaidCallCurrencyExchangeRate> & val);

  void __set_recommendedCountryCodes(const std::vector<std::string> & val);

  void __set_adCountries(const std::vector<PaidCallAdCountry> & val);

  bool operator == (const PaidCallMetadataResult & rhs) const
  {
    if (!(currencyExchangeRates == rhs.currencyExchangeRates))
      return false;
    if (!(recommendedCountryCodes == rhs.recommendedCountryCodes))
      return false;
    if (!(adCountries == rhs.adCountries))
      return false;
    return true;
  }
  bool operator != (const PaidCallMetadataResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PaidCallMetadataResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PaidCallMetadataResult &a, PaidCallMetadataResult &b);

std::ostream& operator<<(std::ostream& out, const PaidCallMetadataResult& obj);

typedef struct _PaidCallRedeemResult__isset {
  _PaidCallRedeemResult__isset() : eventName(false), eventAmount(false) {}
  bool eventName :1;
  bool eventAmount :1;
} _PaidCallRedeemResult__isset;

class PaidCallRedeemResult : public virtual ::apache::thrift::TBase {
 public:

  PaidCallRedeemResult(const PaidCallRedeemResult&);
  PaidCallRedeemResult& operator=(const PaidCallRedeemResult&);
  PaidCallRedeemResult() : eventName(), eventAmount(0) {
  }

  virtual ~PaidCallRedeemResult() noexcept;
  std::string eventName;
  int32_t eventAmount;

  _PaidCallRedeemResult__isset __isset;

  void __set_eventName(const std::string& val);

  void __set_eventAmount(const int32_t val);

  bool operator == (const PaidCallRedeemResult & rhs) const
  {
    if (!(eventName == rhs.eventName))
      return false;
    if (!(eventAmount == rhs.eventAmount))
      return false;
    return true;
  }
  bool operator != (const PaidCallRedeemResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PaidCallRedeemResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PaidCallRedeemResult &a, PaidCallRedeemResult &b);

std::ostream& operator<<(std::ostream& out, const PaidCallRedeemResult& obj);

typedef struct _PaidCallResponse__isset {
  _PaidCallResponse__isset() : host(false), dialing(false), token(false), spotItems(false) {}
  bool host :1;
  bool dialing :1;
  bool token :1;
  bool spotItems :1;
} _PaidCallResponse__isset;

class PaidCallResponse : public virtual ::apache::thrift::TBase {
 public:

  PaidCallResponse(const PaidCallResponse&);
  PaidCallResponse& operator=(const PaidCallResponse&);
  PaidCallResponse() : token() {
  }

  virtual ~PaidCallResponse() noexcept;
  CallHost host;
  PaidCallDialing dialing;
  std::string token;
  std::vector<SpotItem>  spotItems;

  _PaidCallResponse__isset __isset;

  void __set_host(const CallHost& val);

  void __set_dialing(const PaidCallDialing& val);

  void __set_token(const std::string& val);

  void __set_spotItems(const std::vector<SpotItem> & val);

  bool operator == (const PaidCallResponse & rhs) const
  {
    if (!(host == rhs.host))
      return false;
    if (!(dialing == rhs.dialing))
      return false;
    if (!(token == rhs.token))
      return false;
    if (!(spotItems == rhs.spotItems))
      return false;
    return true;
  }
  bool operator != (const PaidCallResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PaidCallResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PaidCallResponse &a, PaidCallResponse &b);

std::ostream& operator<<(std::ostream& out, const PaidCallResponse& obj);

typedef struct _PaidCallUserRate__isset {
  _PaidCallUserRate__isset() : countryCode(false), rate(false), rateDivision(false), rateName(false) {}
  bool countryCode :1;
  bool rate :1;
  bool rateDivision :1;
  bool rateName :1;
} _PaidCallUserRate__isset;

class PaidCallUserRate : public virtual ::apache::thrift::TBase {
 public:

  PaidCallUserRate(const PaidCallUserRate&);
  PaidCallUserRate& operator=(const PaidCallUserRate&);
  PaidCallUserRate() : countryCode(), rate(0), rateDivision(), rateName() {
  }

  virtual ~PaidCallUserRate() noexcept;
  std::string countryCode;
  int32_t rate;
  std::string rateDivision;
  std::string rateName;

  _PaidCallUserRate__isset __isset;

  void __set_countryCode(const std::string& val);

  void __set_rate(const int32_t val);

  void __set_rateDivision(const std::string& val);

  void __set_rateName(const std::string& val);

  bool operator == (const PaidCallUserRate & rhs) const
  {
    if (!(countryCode == rhs.countryCode))
      return false;
    if (!(rate == rhs.rate))
      return false;
    if (!(rateDivision == rhs.rateDivision))
      return false;
    if (!(rateName == rhs.rateName))
      return false;
    return true;
  }
  bool operator != (const PaidCallUserRate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PaidCallUserRate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PaidCallUserRate &a, PaidCallUserRate &b);

std::ostream& operator<<(std::ostream& out, const PaidCallUserRate& obj);

typedef struct _ChannelInfo__isset {
  _ChannelInfo__isset() : channelId(false), name(false), entryPageUrl(false), descriptionText(false), provider(false), publicType(false), iconImage(false), permissions(false), iconThumbnailImage(false), channelConfigurations(false), lcsAllApiUsable(false), allowedPermissions(false), channelDomains(false), updatedTimestamp(false) {}
  bool channelId :1;
  bool name :1;
  bool entryPageUrl :1;
  bool descriptionText :1;
  bool provider :1;
  bool publicType :1;
  bool iconImage :1;
  bool permissions :1;
  bool iconThumbnailImage :1;
  bool channelConfigurations :1;
  bool lcsAllApiUsable :1;
  bool allowedPermissions :1;
  bool channelDomains :1;
  bool updatedTimestamp :1;
} _ChannelInfo__isset;

class ChannelInfo : public virtual ::apache::thrift::TBase {
 public:

  ChannelInfo(const ChannelInfo&);
  ChannelInfo& operator=(const ChannelInfo&);
  ChannelInfo() : channelId(), name(), entryPageUrl(), descriptionText(), publicType((PublicType::type)0), iconImage(), iconThumbnailImage(), lcsAllApiUsable(0), updatedTimestamp(0) {
  }

  virtual ~ChannelInfo() noexcept;
  std::string channelId;
  std::string name;
  std::string entryPageUrl;
  std::string descriptionText;
  ChannelProvider provider;
  /**
   * 
   * @see PublicType
   */
  PublicType::type publicType;
  std::string iconImage;
  std::vector<std::string>  permissions;
  std::string iconThumbnailImage;
  std::vector<ChannelConfiguration::type>  channelConfigurations;
  bool lcsAllApiUsable;
  std::set<ChannelPermission::type>  allowedPermissions;
  std::vector<ChannelDomain>  channelDomains;
  int64_t updatedTimestamp;

  _ChannelInfo__isset __isset;

  void __set_channelId(const std::string& val);

  void __set_name(const std::string& val);

  void __set_entryPageUrl(const std::string& val);

  void __set_descriptionText(const std::string& val);

  void __set_provider(const ChannelProvider& val);

  void __set_publicType(const PublicType::type val);

  void __set_iconImage(const std::string& val);

  void __set_permissions(const std::vector<std::string> & val);

  void __set_iconThumbnailImage(const std::string& val);

  void __set_channelConfigurations(const std::vector<ChannelConfiguration::type> & val);

  void __set_lcsAllApiUsable(const bool val);

  void __set_allowedPermissions(const std::set<ChannelPermission::type> & val);

  void __set_channelDomains(const std::vector<ChannelDomain> & val);

  void __set_updatedTimestamp(const int64_t val);

  bool operator == (const ChannelInfo & rhs) const
  {
    if (!(channelId == rhs.channelId))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(entryPageUrl == rhs.entryPageUrl))
      return false;
    if (!(descriptionText == rhs.descriptionText))
      return false;
    if (!(provider == rhs.provider))
      return false;
    if (!(publicType == rhs.publicType))
      return false;
    if (!(iconImage == rhs.iconImage))
      return false;
    if (!(permissions == rhs.permissions))
      return false;
    if (!(iconThumbnailImage == rhs.iconThumbnailImage))
      return false;
    if (!(channelConfigurations == rhs.channelConfigurations))
      return false;
    if (!(lcsAllApiUsable == rhs.lcsAllApiUsable))
      return false;
    if (!(allowedPermissions == rhs.allowedPermissions))
      return false;
    if (!(channelDomains == rhs.channelDomains))
      return false;
    if (!(updatedTimestamp == rhs.updatedTimestamp))
      return false;
    return true;
  }
  bool operator != (const ChannelInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ChannelInfo &a, ChannelInfo &b);

std::ostream& operator<<(std::ostream& out, const ChannelInfo& obj);

typedef struct _ApprovedChannelInfo__isset {
  _ApprovedChannelInfo__isset() : channelInfo(false), approvedAt(false) {}
  bool channelInfo :1;
  bool approvedAt :1;
} _ApprovedChannelInfo__isset;

class ApprovedChannelInfo : public virtual ::apache::thrift::TBase {
 public:

  ApprovedChannelInfo(const ApprovedChannelInfo&);
  ApprovedChannelInfo& operator=(const ApprovedChannelInfo&);
  ApprovedChannelInfo() : approvedAt(0) {
  }

  virtual ~ApprovedChannelInfo() noexcept;
  ChannelInfo channelInfo;
  int64_t approvedAt;

  _ApprovedChannelInfo__isset __isset;

  void __set_channelInfo(const ChannelInfo& val);

  void __set_approvedAt(const int64_t val);

  bool operator == (const ApprovedChannelInfo & rhs) const
  {
    if (!(channelInfo == rhs.channelInfo))
      return false;
    if (!(approvedAt == rhs.approvedAt))
      return false;
    return true;
  }
  bool operator != (const ApprovedChannelInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApprovedChannelInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ApprovedChannelInfo &a, ApprovedChannelInfo &b);

std::ostream& operator<<(std::ostream& out, const ApprovedChannelInfo& obj);

typedef struct _ApprovedChannelInfos__isset {
  _ApprovedChannelInfos__isset() : approvedChannelInfos(false), revision(false) {}
  bool approvedChannelInfos :1;
  bool revision :1;
} _ApprovedChannelInfos__isset;

class ApprovedChannelInfos : public virtual ::apache::thrift::TBase {
 public:

  ApprovedChannelInfos(const ApprovedChannelInfos&);
  ApprovedChannelInfos& operator=(const ApprovedChannelInfos&);
  ApprovedChannelInfos() : revision(0) {
  }

  virtual ~ApprovedChannelInfos() noexcept;
  std::vector<ApprovedChannelInfo>  approvedChannelInfos;
  int64_t revision;

  _ApprovedChannelInfos__isset __isset;

  void __set_approvedChannelInfos(const std::vector<ApprovedChannelInfo> & val);

  void __set_revision(const int64_t val);

  bool operator == (const ApprovedChannelInfos & rhs) const
  {
    if (!(approvedChannelInfos == rhs.approvedChannelInfos))
      return false;
    if (!(revision == rhs.revision))
      return false;
    return true;
  }
  bool operator != (const ApprovedChannelInfos &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApprovedChannelInfos & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ApprovedChannelInfos &a, ApprovedChannelInfos &b);

std::ostream& operator<<(std::ostream& out, const ApprovedChannelInfos& obj);

typedef struct _AuthQrcode__isset {
  _AuthQrcode__isset() : qrcode(false), verifier(false), callbackUrl(false) {}
  bool qrcode :1;
  bool verifier :1;
  bool callbackUrl :1;
} _AuthQrcode__isset;

class AuthQrcode : public virtual ::apache::thrift::TBase {
 public:

  AuthQrcode(const AuthQrcode&);
  AuthQrcode& operator=(const AuthQrcode&);
  AuthQrcode() : qrcode(), verifier(), callbackUrl() {
  }

  virtual ~AuthQrcode() noexcept;
  std::string qrcode;
  std::string verifier;
  std::string callbackUrl;

  _AuthQrcode__isset __isset;

  void __set_qrcode(const std::string& val);

  void __set_verifier(const std::string& val);

  void __set_callbackUrl(const std::string& val);

  bool operator == (const AuthQrcode & rhs) const
  {
    if (!(qrcode == rhs.qrcode))
      return false;
    if (!(verifier == rhs.verifier))
      return false;
    if (!(callbackUrl == rhs.callbackUrl))
      return false;
    return true;
  }
  bool operator != (const AuthQrcode &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthQrcode & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AuthQrcode &a, AuthQrcode &b);

std::ostream& operator<<(std::ostream& out, const AuthQrcode& obj);

typedef struct _AnalyticsInfo__isset {
  _AnalyticsInfo__isset() : gaSamplingRate(false), tmid(false) {}
  bool gaSamplingRate :1;
  bool tmid :1;
} _AnalyticsInfo__isset;

class AnalyticsInfo : public virtual ::apache::thrift::TBase {
 public:

  AnalyticsInfo(const AnalyticsInfo&);
  AnalyticsInfo& operator=(const AnalyticsInfo&);
  AnalyticsInfo() : gaSamplingRate(0), tmid() {
  }

  virtual ~AnalyticsInfo() noexcept;
  double gaSamplingRate;
  std::string tmid;

  _AnalyticsInfo__isset __isset;

  void __set_gaSamplingRate(const double val);

  void __set_tmid(const std::string& val);

  bool operator == (const AnalyticsInfo & rhs) const
  {
    if (!(gaSamplingRate == rhs.gaSamplingRate))
      return false;
    if (!(tmid == rhs.tmid))
      return false;
    return true;
  }
  bool operator != (const AnalyticsInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AnalyticsInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AnalyticsInfo &a, AnalyticsInfo &b);

std::ostream& operator<<(std::ostream& out, const AnalyticsInfo& obj);

typedef struct _ContactTransition__isset {
  _ContactTransition__isset() : ownerMid(false), targetMid(false), previousStatus(false), resultStatus(false) {}
  bool ownerMid :1;
  bool targetMid :1;
  bool previousStatus :1;
  bool resultStatus :1;
} _ContactTransition__isset;

class ContactTransition : public virtual ::apache::thrift::TBase {
 public:

  ContactTransition(const ContactTransition&);
  ContactTransition& operator=(const ContactTransition&);
  ContactTransition() : ownerMid(), targetMid(), previousStatus((ContactStatus::type)0), resultStatus((ContactStatus::type)0) {
  }

  virtual ~ContactTransition() noexcept;
  std::string ownerMid;
  std::string targetMid;
  /**
   * 
   * @see ContactStatus
   */
  ContactStatus::type previousStatus;
  /**
   * 
   * @see ContactStatus
   */
  ContactStatus::type resultStatus;

  _ContactTransition__isset __isset;

  void __set_ownerMid(const std::string& val);

  void __set_targetMid(const std::string& val);

  void __set_previousStatus(const ContactStatus::type val);

  void __set_resultStatus(const ContactStatus::type val);

  bool operator == (const ContactTransition & rhs) const
  {
    if (!(ownerMid == rhs.ownerMid))
      return false;
    if (!(targetMid == rhs.targetMid))
      return false;
    if (!(previousStatus == rhs.previousStatus))
      return false;
    if (!(resultStatus == rhs.resultStatus))
      return false;
    return true;
  }
  bool operator != (const ContactTransition &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContactTransition & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ContactTransition &a, ContactTransition &b);

std::ostream& operator<<(std::ostream& out, const ContactTransition& obj);

typedef struct _UserTicketResponse__isset {
  _UserTicketResponse__isset() : mid(false), userTicket(false) {}
  bool mid :1;
  bool userTicket :1;
} _UserTicketResponse__isset;

class UserTicketResponse : public virtual ::apache::thrift::TBase {
 public:

  UserTicketResponse(const UserTicketResponse&);
  UserTicketResponse& operator=(const UserTicketResponse&);
  UserTicketResponse() : mid(), userTicket() {
  }

  virtual ~UserTicketResponse() noexcept;
  std::string mid;
  std::string userTicket;

  _UserTicketResponse__isset __isset;

  void __set_mid(const std::string& val);

  void __set_userTicket(const std::string& val);

  bool operator == (const UserTicketResponse & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    if (!(userTicket == rhs.userTicket))
      return false;
    return true;
  }
  bool operator != (const UserTicketResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserTicketResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UserTicketResponse &a, UserTicketResponse &b);

std::ostream& operator<<(std::ostream& out, const UserTicketResponse& obj);

typedef struct _BuddyBanner__isset {
  _BuddyBanner__isset() : buddyBannerLinkType(false), buddyBannerLink(false), buddyBannerImageUrl(false) {}
  bool buddyBannerLinkType :1;
  bool buddyBannerLink :1;
  bool buddyBannerImageUrl :1;
} _BuddyBanner__isset;

class BuddyBanner : public virtual ::apache::thrift::TBase {
 public:

  BuddyBanner(const BuddyBanner&);
  BuddyBanner& operator=(const BuddyBanner&);
  BuddyBanner() : buddyBannerLinkType((BuddyBannerLinkType::type)0), buddyBannerLink(), buddyBannerImageUrl() {
  }

  virtual ~BuddyBanner() noexcept;
  /**
   * 
   * @see BuddyBannerLinkType
   */
  BuddyBannerLinkType::type buddyBannerLinkType;
  std::string buddyBannerLink;
  std::string buddyBannerImageUrl;

  _BuddyBanner__isset __isset;

  void __set_buddyBannerLinkType(const BuddyBannerLinkType::type val);

  void __set_buddyBannerLink(const std::string& val);

  void __set_buddyBannerImageUrl(const std::string& val);

  bool operator == (const BuddyBanner & rhs) const
  {
    if (!(buddyBannerLinkType == rhs.buddyBannerLinkType))
      return false;
    if (!(buddyBannerLink == rhs.buddyBannerLink))
      return false;
    if (!(buddyBannerImageUrl == rhs.buddyBannerImageUrl))
      return false;
    return true;
  }
  bool operator != (const BuddyBanner &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuddyBanner & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BuddyBanner &a, BuddyBanner &b);

std::ostream& operator<<(std::ostream& out, const BuddyBanner& obj);

typedef struct _BuddyDetail__isset {
  _BuddyDetail__isset() : mid(false), memberCount(false), onAir(false), businessAccount(false), addable(false), acceptableContentTypes(false), capableMyhome(false) {}
  bool mid :1;
  bool memberCount :1;
  bool onAir :1;
  bool businessAccount :1;
  bool addable :1;
  bool acceptableContentTypes :1;
  bool capableMyhome :1;
} _BuddyDetail__isset;

class BuddyDetail : public virtual ::apache::thrift::TBase {
 public:

  BuddyDetail(const BuddyDetail&);
  BuddyDetail& operator=(const BuddyDetail&);
  BuddyDetail() : mid(), memberCount(0), onAir(0), businessAccount(0), addable(0), capableMyhome(0) {
  }

  virtual ~BuddyDetail() noexcept;
  std::string mid;
  int64_t memberCount;
  bool onAir;
  bool businessAccount;
  bool addable;
  std::set<ContentType::type>  acceptableContentTypes;
  bool capableMyhome;

  _BuddyDetail__isset __isset;

  void __set_mid(const std::string& val);

  void __set_memberCount(const int64_t val);

  void __set_onAir(const bool val);

  void __set_businessAccount(const bool val);

  void __set_addable(const bool val);

  void __set_acceptableContentTypes(const std::set<ContentType::type> & val);

  void __set_capableMyhome(const bool val);

  bool operator == (const BuddyDetail & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    if (!(memberCount == rhs.memberCount))
      return false;
    if (!(onAir == rhs.onAir))
      return false;
    if (!(businessAccount == rhs.businessAccount))
      return false;
    if (!(addable == rhs.addable))
      return false;
    if (!(acceptableContentTypes == rhs.acceptableContentTypes))
      return false;
    if (!(capableMyhome == rhs.capableMyhome))
      return false;
    return true;
  }
  bool operator != (const BuddyDetail &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuddyDetail & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BuddyDetail &a, BuddyDetail &b);

std::ostream& operator<<(std::ostream& out, const BuddyDetail& obj);

typedef struct _Contact__isset {
  _Contact__isset() : mid(false), createdTime(false), type(false), status(false), relation(false), displayName(false), phoneticName(false), pictureStatus(false), thumbnailUrl(false), statusMessage(false), displayNameOverridden(false), favoriteTime(false), capableVoiceCall(false), capableVideoCall(false), capableMyhome(false), capableBuddy(false), attributes(false), settings(false), picturePath(false), recommendParams(false), friendRequestStatus(false), musicProfile(false), videoProfile(false) {}
  bool mid :1;
  bool createdTime :1;
  bool type :1;
  bool status :1;
  bool relation :1;
  bool displayName :1;
  bool phoneticName :1;
  bool pictureStatus :1;
  bool thumbnailUrl :1;
  bool statusMessage :1;
  bool displayNameOverridden :1;
  bool favoriteTime :1;
  bool capableVoiceCall :1;
  bool capableVideoCall :1;
  bool capableMyhome :1;
  bool capableBuddy :1;
  bool attributes :1;
  bool settings :1;
  bool picturePath :1;
  bool recommendParams :1;
  bool friendRequestStatus :1;
  bool musicProfile :1;
  bool videoProfile :1;
} _Contact__isset;

class Contact : public virtual ::apache::thrift::TBase {
 public:

  Contact(const Contact&);
  Contact& operator=(const Contact&);
  Contact() : mid(), createdTime(0), type((ContactType::type)0), status((ContactStatus::type)0), relation((ContactRelation::type)0), displayName(), phoneticName(), pictureStatus(), thumbnailUrl(), statusMessage(), displayNameOverridden(), favoriteTime(0), capableVoiceCall(0), capableVideoCall(0), capableMyhome(0), capableBuddy(0), attributes(0), settings(0), picturePath(), recommendParams(), friendRequestStatus((FriendRequestStatus::type)0), musicProfile(), videoProfile() {
  }

  virtual ~Contact() noexcept;
  std::string mid;
  int64_t createdTime;
  /**
   * 
   * @see ContactType
   */
  ContactType::type type;
  /**
   * 
   * @see ContactStatus
   */
  ContactStatus::type status;
  /**
   * 
   * @see ContactRelation
   */
  ContactRelation::type relation;
  std::string displayName;
  std::string phoneticName;
  std::string pictureStatus;
  std::string thumbnailUrl;
  std::string statusMessage;
  std::string displayNameOverridden;
  int64_t favoriteTime;
  bool capableVoiceCall;
  bool capableVideoCall;
  bool capableMyhome;
  bool capableBuddy;
  int32_t attributes;
  int64_t settings;
  std::string picturePath;
  std::string recommendParams;
  /**
   * 
   * @see FriendRequestStatus
   */
  FriendRequestStatus::type friendRequestStatus;
  std::string musicProfile;
  std::string videoProfile;

  _Contact__isset __isset;

  void __set_mid(const std::string& val);

  void __set_createdTime(const int64_t val);

  void __set_type(const ContactType::type val);

  void __set_status(const ContactStatus::type val);

  void __set_relation(const ContactRelation::type val);

  void __set_displayName(const std::string& val);

  void __set_phoneticName(const std::string& val);

  void __set_pictureStatus(const std::string& val);

  void __set_thumbnailUrl(const std::string& val);

  void __set_statusMessage(const std::string& val);

  void __set_displayNameOverridden(const std::string& val);

  void __set_favoriteTime(const int64_t val);

  void __set_capableVoiceCall(const bool val);

  void __set_capableVideoCall(const bool val);

  void __set_capableMyhome(const bool val);

  void __set_capableBuddy(const bool val);

  void __set_attributes(const int32_t val);

  void __set_settings(const int64_t val);

  void __set_picturePath(const std::string& val);

  void __set_recommendParams(const std::string& val);

  void __set_friendRequestStatus(const FriendRequestStatus::type val);

  void __set_musicProfile(const std::string& val);

  void __set_videoProfile(const std::string& val);

  bool operator == (const Contact & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    if (!(createdTime == rhs.createdTime))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(relation == rhs.relation))
      return false;
    if (!(displayName == rhs.displayName))
      return false;
    if (!(phoneticName == rhs.phoneticName))
      return false;
    if (!(pictureStatus == rhs.pictureStatus))
      return false;
    if (!(thumbnailUrl == rhs.thumbnailUrl))
      return false;
    if (!(statusMessage == rhs.statusMessage))
      return false;
    if (!(displayNameOverridden == rhs.displayNameOverridden))
      return false;
    if (!(favoriteTime == rhs.favoriteTime))
      return false;
    if (!(capableVoiceCall == rhs.capableVoiceCall))
      return false;
    if (!(capableVideoCall == rhs.capableVideoCall))
      return false;
    if (!(capableMyhome == rhs.capableMyhome))
      return false;
    if (!(capableBuddy == rhs.capableBuddy))
      return false;
    if (!(attributes == rhs.attributes))
      return false;
    if (!(settings == rhs.settings))
      return false;
    if (!(picturePath == rhs.picturePath))
      return false;
    if (!(recommendParams == rhs.recommendParams))
      return false;
    if (!(friendRequestStatus == rhs.friendRequestStatus))
      return false;
    if (!(musicProfile == rhs.musicProfile))
      return false;
    if (!(videoProfile == rhs.videoProfile))
      return false;
    return true;
  }
  bool operator != (const Contact &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Contact & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Contact &a, Contact &b);

std::ostream& operator<<(std::ostream& out, const Contact& obj);

typedef struct _BuddyList__isset {
  _BuddyList__isset() : classification(false), displayName(false), totalBuddyCount(false), popularContacts(false) {}
  bool classification :1;
  bool displayName :1;
  bool totalBuddyCount :1;
  bool popularContacts :1;
} _BuddyList__isset;

class BuddyList : public virtual ::apache::thrift::TBase {
 public:

  BuddyList(const BuddyList&);
  BuddyList& operator=(const BuddyList&);
  BuddyList() : classification(), displayName(), totalBuddyCount(0) {
  }

  virtual ~BuddyList() noexcept;
  std::string classification;
  std::string displayName;
  int32_t totalBuddyCount;
  std::vector<Contact>  popularContacts;

  _BuddyList__isset __isset;

  void __set_classification(const std::string& val);

  void __set_displayName(const std::string& val);

  void __set_totalBuddyCount(const int32_t val);

  void __set_popularContacts(const std::vector<Contact> & val);

  bool operator == (const BuddyList & rhs) const
  {
    if (!(classification == rhs.classification))
      return false;
    if (!(displayName == rhs.displayName))
      return false;
    if (!(totalBuddyCount == rhs.totalBuddyCount))
      return false;
    if (!(popularContacts == rhs.popularContacts))
      return false;
    return true;
  }
  bool operator != (const BuddyList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuddyList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BuddyList &a, BuddyList &b);

std::ostream& operator<<(std::ostream& out, const BuddyList& obj);

typedef struct _RegisterWithPhoneNumberResult__isset {
  _RegisterWithPhoneNumberResult__isset() : authToken(false), recommendEmailRegistration(false), certificate(false) {}
  bool authToken :1;
  bool recommendEmailRegistration :1;
  bool certificate :1;
} _RegisterWithPhoneNumberResult__isset;

class RegisterWithPhoneNumberResult : public virtual ::apache::thrift::TBase {
 public:

  RegisterWithPhoneNumberResult(const RegisterWithPhoneNumberResult&);
  RegisterWithPhoneNumberResult& operator=(const RegisterWithPhoneNumberResult&);
  RegisterWithPhoneNumberResult() : authToken(), recommendEmailRegistration(0), certificate() {
  }

  virtual ~RegisterWithPhoneNumberResult() noexcept;
  std::string authToken;
  bool recommendEmailRegistration;
  std::string certificate;

  _RegisterWithPhoneNumberResult__isset __isset;

  void __set_authToken(const std::string& val);

  void __set_recommendEmailRegistration(const bool val);

  void __set_certificate(const std::string& val);

  bool operator == (const RegisterWithPhoneNumberResult & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(recommendEmailRegistration == rhs.recommendEmailRegistration))
      return false;
    if (!(certificate == rhs.certificate))
      return false;
    return true;
  }
  bool operator != (const RegisterWithPhoneNumberResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegisterWithPhoneNumberResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RegisterWithPhoneNumberResult &a, RegisterWithPhoneNumberResult &b);

std::ostream& operator<<(std::ostream& out, const RegisterWithPhoneNumberResult& obj);

typedef struct _BuddyMessageRequest__isset {
  _BuddyMessageRequest__isset() : contentType(false), text(false), location(false), content(false), contentMetadata(false) {}
  bool contentType :1;
  bool text :1;
  bool location :1;
  bool content :1;
  bool contentMetadata :1;
} _BuddyMessageRequest__isset;

class BuddyMessageRequest : public virtual ::apache::thrift::TBase {
 public:

  BuddyMessageRequest(const BuddyMessageRequest&);
  BuddyMessageRequest& operator=(const BuddyMessageRequest&);
  BuddyMessageRequest() : contentType((ContentType::type)0), text(), content() {
  }

  virtual ~BuddyMessageRequest() noexcept;
  /**
   * 
   * @see ContentType
   */
  ContentType::type contentType;
  std::string text;
  Location location;
  std::string content;
  std::map<std::string, std::string>  contentMetadata;

  _BuddyMessageRequest__isset __isset;

  void __set_contentType(const ContentType::type val);

  void __set_text(const std::string& val);

  void __set_location(const Location& val);

  void __set_content(const std::string& val);

  void __set_contentMetadata(const std::map<std::string, std::string> & val);

  bool operator == (const BuddyMessageRequest & rhs) const
  {
    if (!(contentType == rhs.contentType))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(location == rhs.location))
      return false;
    if (!(content == rhs.content))
      return false;
    if (!(contentMetadata == rhs.contentMetadata))
      return false;
    return true;
  }
  bool operator != (const BuddyMessageRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuddyMessageRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BuddyMessageRequest &a, BuddyMessageRequest &b);

std::ostream& operator<<(std::ostream& out, const BuddyMessageRequest& obj);

typedef struct _BuddyOnAirUrls__isset {
  _BuddyOnAirUrls__isset() : hls(false), smoothStreaming(false) {}
  bool hls :1;
  bool smoothStreaming :1;
} _BuddyOnAirUrls__isset;

class BuddyOnAirUrls : public virtual ::apache::thrift::TBase {
 public:

  BuddyOnAirUrls(const BuddyOnAirUrls&);
  BuddyOnAirUrls& operator=(const BuddyOnAirUrls&);
  BuddyOnAirUrls() {
  }

  virtual ~BuddyOnAirUrls() noexcept;
  std::map<std::string, std::string>  hls;
  std::map<std::string, std::string>  smoothStreaming;

  _BuddyOnAirUrls__isset __isset;

  void __set_hls(const std::map<std::string, std::string> & val);

  void __set_smoothStreaming(const std::map<std::string, std::string> & val);

  bool operator == (const BuddyOnAirUrls & rhs) const
  {
    if (!(hls == rhs.hls))
      return false;
    if (!(smoothStreaming == rhs.smoothStreaming))
      return false;
    return true;
  }
  bool operator != (const BuddyOnAirUrls &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuddyOnAirUrls & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BuddyOnAirUrls &a, BuddyOnAirUrls &b);

std::ostream& operator<<(std::ostream& out, const BuddyOnAirUrls& obj);

typedef struct _BuddyOnAir__isset {
  _BuddyOnAir__isset() : mid(false), freshnessLifetime(false), onAirId(false), onAir(false), text(false), viewerCount(false), targetCount(false), onAirType(false), onAirUrls(false) {}
  bool mid :1;
  bool freshnessLifetime :1;
  bool onAirId :1;
  bool onAir :1;
  bool text :1;
  bool viewerCount :1;
  bool targetCount :1;
  bool onAirType :1;
  bool onAirUrls :1;
} _BuddyOnAir__isset;

class BuddyOnAir : public virtual ::apache::thrift::TBase {
 public:

  BuddyOnAir(const BuddyOnAir&);
  BuddyOnAir& operator=(const BuddyOnAir&);
  BuddyOnAir() : mid(), freshnessLifetime(0), onAirId(), onAir(0), text(), viewerCount(0), targetCount(0), onAirType((BuddyOnAirType::type)0) {
  }

  virtual ~BuddyOnAir() noexcept;
  std::string mid;
  int64_t freshnessLifetime;
  std::string onAirId;
  bool onAir;
  std::string text;
  int64_t viewerCount;
  int64_t targetCount;
  /**
   * 
   * @see BuddyOnAirType
   */
  BuddyOnAirType::type onAirType;
  BuddyOnAirUrls onAirUrls;

  _BuddyOnAir__isset __isset;

  void __set_mid(const std::string& val);

  void __set_freshnessLifetime(const int64_t val);

  void __set_onAirId(const std::string& val);

  void __set_onAir(const bool val);

  void __set_text(const std::string& val);

  void __set_viewerCount(const int64_t val);

  void __set_targetCount(const int64_t val);

  void __set_onAirType(const BuddyOnAirType::type val);

  void __set_onAirUrls(const BuddyOnAirUrls& val);

  bool operator == (const BuddyOnAir & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    if (!(freshnessLifetime == rhs.freshnessLifetime))
      return false;
    if (!(onAirId == rhs.onAirId))
      return false;
    if (!(onAir == rhs.onAir))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(viewerCount == rhs.viewerCount))
      return false;
    if (!(targetCount == rhs.targetCount))
      return false;
    if (!(onAirType == rhs.onAirType))
      return false;
    if (!(onAirUrls == rhs.onAirUrls))
      return false;
    return true;
  }
  bool operator != (const BuddyOnAir &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuddyOnAir & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BuddyOnAir &a, BuddyOnAir &b);

std::ostream& operator<<(std::ostream& out, const BuddyOnAir& obj);

typedef struct _BuddyProfile__isset {
  _BuddyProfile__isset() : buddyId(false), mid(false), searchId(false), displayName(false), statusMessage(false), contactCount(false) {}
  bool buddyId :1;
  bool mid :1;
  bool searchId :1;
  bool displayName :1;
  bool statusMessage :1;
  bool contactCount :1;
} _BuddyProfile__isset;

class BuddyProfile : public virtual ::apache::thrift::TBase {
 public:

  BuddyProfile(const BuddyProfile&);
  BuddyProfile& operator=(const BuddyProfile&);
  BuddyProfile() : buddyId(), mid(), searchId(), displayName(), statusMessage(), contactCount(0) {
  }

  virtual ~BuddyProfile() noexcept;
  std::string buddyId;
  std::string mid;
  std::string searchId;
  std::string displayName;
  std::string statusMessage;
  int64_t contactCount;

  _BuddyProfile__isset __isset;

  void __set_buddyId(const std::string& val);

  void __set_mid(const std::string& val);

  void __set_searchId(const std::string& val);

  void __set_displayName(const std::string& val);

  void __set_statusMessage(const std::string& val);

  void __set_contactCount(const int64_t val);

  bool operator == (const BuddyProfile & rhs) const
  {
    if (!(buddyId == rhs.buddyId))
      return false;
    if (!(mid == rhs.mid))
      return false;
    if (!(searchId == rhs.searchId))
      return false;
    if (!(displayName == rhs.displayName))
      return false;
    if (!(statusMessage == rhs.statusMessage))
      return false;
    if (!(contactCount == rhs.contactCount))
      return false;
    return true;
  }
  bool operator != (const BuddyProfile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuddyProfile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BuddyProfile &a, BuddyProfile &b);

std::ostream& operator<<(std::ostream& out, const BuddyProfile& obj);

typedef struct _CommitMessageResult__isset {
  _CommitMessageResult__isset() : message(false), code(false), reason(false), successCount(false), failCount(false), unregisterCount(false), blockCount(false) {}
  bool message :1;
  bool code :1;
  bool reason :1;
  bool successCount :1;
  bool failCount :1;
  bool unregisterCount :1;
  bool blockCount :1;
} _CommitMessageResult__isset;

class CommitMessageResult : public virtual ::apache::thrift::TBase {
 public:

  CommitMessageResult(const CommitMessageResult&);
  CommitMessageResult& operator=(const CommitMessageResult&);
  CommitMessageResult() : code((CommitMessageResultCode::type)0), reason(), successCount(0), failCount(0), unregisterCount(0), blockCount(0) {
  }

  virtual ~CommitMessageResult() noexcept;
  Message message;
  /**
   * 
   * @see CommitMessageResultCode
   */
  CommitMessageResultCode::type code;
  std::string reason;
  int64_t successCount;
  int64_t failCount;
  int64_t unregisterCount;
  int64_t blockCount;

  _CommitMessageResult__isset __isset;

  void __set_message(const Message& val);

  void __set_code(const CommitMessageResultCode::type val);

  void __set_reason(const std::string& val);

  void __set_successCount(const int64_t val);

  void __set_failCount(const int64_t val);

  void __set_unregisterCount(const int64_t val);

  void __set_blockCount(const int64_t val);

  bool operator == (const CommitMessageResult & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    if (!(code == rhs.code))
      return false;
    if (!(reason == rhs.reason))
      return false;
    if (!(successCount == rhs.successCount))
      return false;
    if (!(failCount == rhs.failCount))
      return false;
    if (!(unregisterCount == rhs.unregisterCount))
      return false;
    if (!(blockCount == rhs.blockCount))
      return false;
    return true;
  }
  bool operator != (const CommitMessageResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommitMessageResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CommitMessageResult &a, CommitMessageResult &b);

std::ostream& operator<<(std::ostream& out, const CommitMessageResult& obj);

typedef struct _BuddySearchResult__isset {
  _BuddySearchResult__isset() : mid(false), displayName(false), pictureStatus(false), picturePath(false), statusMessage(false), businessAccount(false) {}
  bool mid :1;
  bool displayName :1;
  bool pictureStatus :1;
  bool picturePath :1;
  bool statusMessage :1;
  bool businessAccount :1;
} _BuddySearchResult__isset;

class BuddySearchResult : public virtual ::apache::thrift::TBase {
 public:

  BuddySearchResult(const BuddySearchResult&);
  BuddySearchResult& operator=(const BuddySearchResult&);
  BuddySearchResult() : mid(), displayName(), pictureStatus(), picturePath(), statusMessage(), businessAccount(0) {
  }

  virtual ~BuddySearchResult() noexcept;
  std::string mid;
  std::string displayName;
  std::string pictureStatus;
  std::string picturePath;
  std::string statusMessage;
  bool businessAccount;

  _BuddySearchResult__isset __isset;

  void __set_mid(const std::string& val);

  void __set_displayName(const std::string& val);

  void __set_pictureStatus(const std::string& val);

  void __set_picturePath(const std::string& val);

  void __set_statusMessage(const std::string& val);

  void __set_businessAccount(const bool val);

  bool operator == (const BuddySearchResult & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    if (!(displayName == rhs.displayName))
      return false;
    if (!(pictureStatus == rhs.pictureStatus))
      return false;
    if (!(picturePath == rhs.picturePath))
      return false;
    if (!(statusMessage == rhs.statusMessage))
      return false;
    if (!(businessAccount == rhs.businessAccount))
      return false;
    return true;
  }
  bool operator != (const BuddySearchResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuddySearchResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BuddySearchResult &a, BuddySearchResult &b);

std::ostream& operator<<(std::ostream& out, const BuddySearchResult& obj);

typedef struct _SyncParamMid__isset {
  _SyncParamMid__isset() : mid(false), diff(false), revision(false) {}
  bool mid :1;
  bool diff :1;
  bool revision :1;
} _SyncParamMid__isset;

class SyncParamMid : public virtual ::apache::thrift::TBase {
 public:

  SyncParamMid(const SyncParamMid&);
  SyncParamMid& operator=(const SyncParamMid&);
  SyncParamMid() : mid(), diff((Diff::type)0), revision(0) {
  }

  virtual ~SyncParamMid() noexcept;
  std::string mid;
  /**
   * 
   * @see Diff
   */
  Diff::type diff;
  int64_t revision;

  _SyncParamMid__isset __isset;

  void __set_mid(const std::string& val);

  void __set_diff(const Diff::type val);

  void __set_revision(const int64_t val);

  bool operator == (const SyncParamMid & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    if (!(diff == rhs.diff))
      return false;
    if (!(revision == rhs.revision))
      return false;
    return true;
  }
  bool operator != (const SyncParamMid &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncParamMid & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SyncParamMid &a, SyncParamMid &b);

std::ostream& operator<<(std::ostream& out, const SyncParamMid& obj);

typedef struct _SIMInfo__isset {
  _SIMInfo__isset() : phoneNumber(false), countryCode(false) {}
  bool phoneNumber :1;
  bool countryCode :1;
} _SIMInfo__isset;

class SIMInfo : public virtual ::apache::thrift::TBase {
 public:

  SIMInfo(const SIMInfo&);
  SIMInfo& operator=(const SIMInfo&);
  SIMInfo() : phoneNumber(), countryCode() {
  }

  virtual ~SIMInfo() noexcept;
  std::string phoneNumber;
  std::string countryCode;

  _SIMInfo__isset __isset;

  void __set_phoneNumber(const std::string& val);

  void __set_countryCode(const std::string& val);

  bool operator == (const SIMInfo & rhs) const
  {
    if (!(phoneNumber == rhs.phoneNumber))
      return false;
    if (!(countryCode == rhs.countryCode))
      return false;
    return true;
  }
  bool operator != (const SIMInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SIMInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SIMInfo &a, SIMInfo &b);

std::ostream& operator<<(std::ostream& out, const SIMInfo& obj);

typedef struct _SyncParamContact__isset {
  _SyncParamContact__isset() : syncParamMid(false), contactStatus(false) {}
  bool syncParamMid :1;
  bool contactStatus :1;
} _SyncParamContact__isset;

class SyncParamContact : public virtual ::apache::thrift::TBase {
 public:

  SyncParamContact(const SyncParamContact&);
  SyncParamContact& operator=(const SyncParamContact&);
  SyncParamContact() : contactStatus((ContactStatus::type)0) {
  }

  virtual ~SyncParamContact() noexcept;
  SyncParamMid syncParamMid;
  /**
   * 
   * @see ContactStatus
   */
  ContactStatus::type contactStatus;

  _SyncParamContact__isset __isset;

  void __set_syncParamMid(const SyncParamMid& val);

  void __set_contactStatus(const ContactStatus::type val);

  bool operator == (const SyncParamContact & rhs) const
  {
    if (!(syncParamMid == rhs.syncParamMid))
      return false;
    if (!(contactStatus == rhs.contactStatus))
      return false;
    return true;
  }
  bool operator != (const SyncParamContact &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncParamContact & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SyncParamContact &a, SyncParamContact &b);

std::ostream& operator<<(std::ostream& out, const SyncParamContact& obj);

typedef struct _ChannelDomains__isset {
  _ChannelDomains__isset() : channelDomains(false), revision(false) {}
  bool channelDomains :1;
  bool revision :1;
} _ChannelDomains__isset;

class ChannelDomains : public virtual ::apache::thrift::TBase {
 public:

  ChannelDomains(const ChannelDomains&);
  ChannelDomains& operator=(const ChannelDomains&);
  ChannelDomains() : revision(0) {
  }

  virtual ~ChannelDomains() noexcept;
  std::vector<ChannelDomain>  channelDomains;
  int64_t revision;

  _ChannelDomains__isset __isset;

  void __set_channelDomains(const std::vector<ChannelDomain> & val);

  void __set_revision(const int64_t val);

  bool operator == (const ChannelDomains & rhs) const
  {
    if (!(channelDomains == rhs.channelDomains))
      return false;
    if (!(revision == rhs.revision))
      return false;
    return true;
  }
  bool operator != (const ChannelDomains &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelDomains & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ChannelDomains &a, ChannelDomains &b);

std::ostream& operator<<(std::ostream& out, const ChannelDomains& obj);

typedef struct _ProductCategory__isset {
  _ProductCategory__isset() : productCategoryId(false), title(false), productCount(false), newFlag(false) {}
  bool productCategoryId :1;
  bool title :1;
  bool productCount :1;
  bool newFlag :1;
} _ProductCategory__isset;

class ProductCategory : public virtual ::apache::thrift::TBase {
 public:

  ProductCategory(const ProductCategory&);
  ProductCategory& operator=(const ProductCategory&);
  ProductCategory() : productCategoryId(0), title(), productCount(0), newFlag(0) {
  }

  virtual ~ProductCategory() noexcept;
  int64_t productCategoryId;
  std::string title;
  int32_t productCount;
  bool newFlag;

  _ProductCategory__isset __isset;

  void __set_productCategoryId(const int64_t val);

  void __set_title(const std::string& val);

  void __set_productCount(const int32_t val);

  void __set_newFlag(const bool val);

  bool operator == (const ProductCategory & rhs) const
  {
    if (!(productCategoryId == rhs.productCategoryId))
      return false;
    if (!(title == rhs.title))
      return false;
    if (!(productCount == rhs.productCount))
      return false;
    if (!(newFlag == rhs.newFlag))
      return false;
    return true;
  }
  bool operator != (const ProductCategory &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProductCategory & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ProductCategory &a, ProductCategory &b);

std::ostream& operator<<(std::ostream& out, const ProductCategory& obj);

typedef struct _ChannelInfos__isset {
  _ChannelInfos__isset() : channelInfos(false), revision(false) {}
  bool channelInfos :1;
  bool revision :1;
} _ChannelInfos__isset;

class ChannelInfos : public virtual ::apache::thrift::TBase {
 public:

  ChannelInfos(const ChannelInfos&);
  ChannelInfos& operator=(const ChannelInfos&);
  ChannelInfos() : revision(0) {
  }

  virtual ~ChannelInfos() noexcept;
  std::vector<ChannelInfo>  channelInfos;
  int64_t revision;

  _ChannelInfos__isset __isset;

  void __set_channelInfos(const std::vector<ChannelInfo> & val);

  void __set_revision(const int64_t val);

  bool operator == (const ChannelInfos & rhs) const
  {
    if (!(channelInfos == rhs.channelInfos))
      return false;
    if (!(revision == rhs.revision))
      return false;
    return true;
  }
  bool operator != (const ChannelInfos &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelInfos & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ChannelInfos &a, ChannelInfos &b);

std::ostream& operator<<(std::ostream& out, const ChannelInfos& obj);

typedef struct _ChannelNotificationSetting__isset {
  _ChannelNotificationSetting__isset() : channelId(false), name(false), notificationReceivable(false), messageReceivable(false), showDefault(false) {}
  bool channelId :1;
  bool name :1;
  bool notificationReceivable :1;
  bool messageReceivable :1;
  bool showDefault :1;
} _ChannelNotificationSetting__isset;

class ChannelNotificationSetting : public virtual ::apache::thrift::TBase {
 public:

  ChannelNotificationSetting(const ChannelNotificationSetting&);
  ChannelNotificationSetting& operator=(const ChannelNotificationSetting&);
  ChannelNotificationSetting() : channelId(), name(), notificationReceivable(0), messageReceivable(0), showDefault(0) {
  }

  virtual ~ChannelNotificationSetting() noexcept;
  std::string channelId;
  std::string name;
  bool notificationReceivable;
  bool messageReceivable;
  bool showDefault;

  _ChannelNotificationSetting__isset __isset;

  void __set_channelId(const std::string& val);

  void __set_name(const std::string& val);

  void __set_notificationReceivable(const bool val);

  void __set_messageReceivable(const bool val);

  void __set_showDefault(const bool val);

  bool operator == (const ChannelNotificationSetting & rhs) const
  {
    if (!(channelId == rhs.channelId))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(notificationReceivable == rhs.notificationReceivable))
      return false;
    if (!(messageReceivable == rhs.messageReceivable))
      return false;
    if (!(showDefault == rhs.showDefault))
      return false;
    return true;
  }
  bool operator != (const ChannelNotificationSetting &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelNotificationSetting & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ChannelNotificationSetting &a, ChannelNotificationSetting &b);

std::ostream& operator<<(std::ostream& out, const ChannelNotificationSetting& obj);

typedef struct _ChannelSyncDatas__isset {
  _ChannelSyncDatas__isset() : channelInfos(false), channelDomains(false), revision(false), expires(false) {}
  bool channelInfos :1;
  bool channelDomains :1;
  bool revision :1;
  bool expires :1;
} _ChannelSyncDatas__isset;

class ChannelSyncDatas : public virtual ::apache::thrift::TBase {
 public:

  ChannelSyncDatas(const ChannelSyncDatas&);
  ChannelSyncDatas& operator=(const ChannelSyncDatas&);
  ChannelSyncDatas() : revision(0), expires(0) {
  }

  virtual ~ChannelSyncDatas() noexcept;
  std::vector<ChannelInfo>  channelInfos;
  std::vector<ChannelDomain>  channelDomains;
  int64_t revision;
  int64_t expires;

  _ChannelSyncDatas__isset __isset;

  void __set_channelInfos(const std::vector<ChannelInfo> & val);

  void __set_channelDomains(const std::vector<ChannelDomain> & val);

  void __set_revision(const int64_t val);

  void __set_expires(const int64_t val);

  bool operator == (const ChannelSyncDatas & rhs) const
  {
    if (!(channelInfos == rhs.channelInfos))
      return false;
    if (!(channelDomains == rhs.channelDomains))
      return false;
    if (!(revision == rhs.revision))
      return false;
    if (!(expires == rhs.expires))
      return false;
    return true;
  }
  bool operator != (const ChannelSyncDatas &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelSyncDatas & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ChannelSyncDatas &a, ChannelSyncDatas &b);

std::ostream& operator<<(std::ostream& out, const ChannelSyncDatas& obj);

typedef struct _NotiCenterEventData__isset {
  _NotiCenterEventData__isset() : id(false), to(false), from_(false), toChannel(false), fromChannel(false), eventType(false), createdTime(false), operationRevision(false), content(false), push(false) {}
  bool id :1;
  bool to :1;
  bool from_ :1;
  bool toChannel :1;
  bool fromChannel :1;
  bool eventType :1;
  bool createdTime :1;
  bool operationRevision :1;
  bool content :1;
  bool push :1;
} _NotiCenterEventData__isset;

class NotiCenterEventData : public virtual ::apache::thrift::TBase {
 public:

  NotiCenterEventData(const NotiCenterEventData&);
  NotiCenterEventData& operator=(const NotiCenterEventData&);
  NotiCenterEventData() : id(), to(), from_(), toChannel(), fromChannel(), eventType(), createdTime(0), operationRevision(0) {
  }

  virtual ~NotiCenterEventData() noexcept;
  std::string id;
  std::string to;
  std::string from_;
  std::string toChannel;
  std::string fromChannel;
  std::string eventType;
  int64_t createdTime;
  int64_t operationRevision;
  std::map<std::string, std::string>  content;
  std::map<std::string, std::string>  push;

  _NotiCenterEventData__isset __isset;

  void __set_id(const std::string& val);

  void __set_to(const std::string& val);

  void __set_from_(const std::string& val);

  void __set_toChannel(const std::string& val);

  void __set_fromChannel(const std::string& val);

  void __set_eventType(const std::string& val);

  void __set_createdTime(const int64_t val);

  void __set_operationRevision(const int64_t val);

  void __set_content(const std::map<std::string, std::string> & val);

  void __set_push(const std::map<std::string, std::string> & val);

  bool operator == (const NotiCenterEventData & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(to == rhs.to))
      return false;
    if (!(from_ == rhs.from_))
      return false;
    if (!(toChannel == rhs.toChannel))
      return false;
    if (!(fromChannel == rhs.fromChannel))
      return false;
    if (!(eventType == rhs.eventType))
      return false;
    if (!(createdTime == rhs.createdTime))
      return false;
    if (!(operationRevision == rhs.operationRevision))
      return false;
    if (!(content == rhs.content))
      return false;
    if (!(push == rhs.push))
      return false;
    return true;
  }
  bool operator != (const NotiCenterEventData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NotiCenterEventData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(NotiCenterEventData &a, NotiCenterEventData &b);

std::ostream& operator<<(std::ostream& out, const NotiCenterEventData& obj);

typedef struct _ChannelToken__isset {
  _ChannelToken__isset() : token(false), obsToken(false), expiration(false), refreshToken(false), channelAccessToken(false) {}
  bool token :1;
  bool obsToken :1;
  bool expiration :1;
  bool refreshToken :1;
  bool channelAccessToken :1;
} _ChannelToken__isset;

class ChannelToken : public virtual ::apache::thrift::TBase {
 public:

  ChannelToken(const ChannelToken&);
  ChannelToken& operator=(const ChannelToken&);
  ChannelToken() : token(), obsToken(), expiration(0), refreshToken(), channelAccessToken() {
  }

  virtual ~ChannelToken() noexcept;
  std::string token;
  std::string obsToken;
  int64_t expiration;
  std::string refreshToken;
  std::string channelAccessToken;

  _ChannelToken__isset __isset;

  void __set_token(const std::string& val);

  void __set_obsToken(const std::string& val);

  void __set_expiration(const int64_t val);

  void __set_refreshToken(const std::string& val);

  void __set_channelAccessToken(const std::string& val);

  bool operator == (const ChannelToken & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(obsToken == rhs.obsToken))
      return false;
    if (!(expiration == rhs.expiration))
      return false;
    if (!(refreshToken == rhs.refreshToken))
      return false;
    if (!(channelAccessToken == rhs.channelAccessToken))
      return false;
    return true;
  }
  bool operator != (const ChannelToken &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelToken & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ChannelToken &a, ChannelToken &b);

std::ostream& operator<<(std::ostream& out, const ChannelToken& obj);

typedef struct _ChannelSettings__isset {
  _ChannelSettings__isset() : unapprovedMessageReceivable(false) {}
  bool unapprovedMessageReceivable :1;
} _ChannelSettings__isset;

class ChannelSettings : public virtual ::apache::thrift::TBase {
 public:

  ChannelSettings(const ChannelSettings&);
  ChannelSettings& operator=(const ChannelSettings&);
  ChannelSettings() : unapprovedMessageReceivable(0) {
  }

  virtual ~ChannelSettings() noexcept;
  bool unapprovedMessageReceivable;

  _ChannelSettings__isset __isset;

  void __set_unapprovedMessageReceivable(const bool val);

  bool operator == (const ChannelSettings & rhs) const
  {
    if (!(unapprovedMessageReceivable == rhs.unapprovedMessageReceivable))
      return false;
    return true;
  }
  bool operator != (const ChannelSettings &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelSettings & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ChannelSettings &a, ChannelSettings &b);

std::ostream& operator<<(std::ostream& out, const ChannelSettings& obj);

typedef struct _ChannelIdWithLastUpdated__isset {
  _ChannelIdWithLastUpdated__isset() : channelId(false), lastUpdated(false) {}
  bool channelId :1;
  bool lastUpdated :1;
} _ChannelIdWithLastUpdated__isset;

class ChannelIdWithLastUpdated : public virtual ::apache::thrift::TBase {
 public:

  ChannelIdWithLastUpdated(const ChannelIdWithLastUpdated&);
  ChannelIdWithLastUpdated& operator=(const ChannelIdWithLastUpdated&);
  ChannelIdWithLastUpdated() : channelId(), lastUpdated(0) {
  }

  virtual ~ChannelIdWithLastUpdated() noexcept;
  std::string channelId;
  int64_t lastUpdated;

  _ChannelIdWithLastUpdated__isset __isset;

  void __set_channelId(const std::string& val);

  void __set_lastUpdated(const int64_t val);

  bool operator == (const ChannelIdWithLastUpdated & rhs) const
  {
    if (!(channelId == rhs.channelId))
      return false;
    if (!(lastUpdated == rhs.lastUpdated))
      return false;
    return true;
  }
  bool operator != (const ChannelIdWithLastUpdated &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelIdWithLastUpdated & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ChannelIdWithLastUpdated &a, ChannelIdWithLastUpdated &b);

std::ostream& operator<<(std::ostream& out, const ChannelIdWithLastUpdated& obj);

typedef struct _Coin__isset {
  _Coin__isset() : freeCoinBalance(false), payedCoinBalance(false), totalCoinBalance(false), rewardCoinBalance(false) {}
  bool freeCoinBalance :1;
  bool payedCoinBalance :1;
  bool totalCoinBalance :1;
  bool rewardCoinBalance :1;
} _Coin__isset;

class Coin : public virtual ::apache::thrift::TBase {
 public:

  Coin(const Coin&);
  Coin& operator=(const Coin&);
  Coin() : freeCoinBalance(0), payedCoinBalance(0), totalCoinBalance(0), rewardCoinBalance(0) {
  }

  virtual ~Coin() noexcept;
  int32_t freeCoinBalance;
  int32_t payedCoinBalance;
  int32_t totalCoinBalance;
  int32_t rewardCoinBalance;

  _Coin__isset __isset;

  void __set_freeCoinBalance(const int32_t val);

  void __set_payedCoinBalance(const int32_t val);

  void __set_totalCoinBalance(const int32_t val);

  void __set_rewardCoinBalance(const int32_t val);

  bool operator == (const Coin & rhs) const
  {
    if (!(freeCoinBalance == rhs.freeCoinBalance))
      return false;
    if (!(payedCoinBalance == rhs.payedCoinBalance))
      return false;
    if (!(totalCoinBalance == rhs.totalCoinBalance))
      return false;
    if (!(rewardCoinBalance == rhs.rewardCoinBalance))
      return false;
    return true;
  }
  bool operator != (const Coin &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Coin & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Coin &a, Coin &b);

std::ostream& operator<<(std::ostream& out, const Coin& obj);

typedef struct _CoinPayLoad__isset {
  _CoinPayLoad__isset() : payCoin(false), freeCoin(false), type(false), rewardCoin(false) {}
  bool payCoin :1;
  bool freeCoin :1;
  bool type :1;
  bool rewardCoin :1;
} _CoinPayLoad__isset;

class CoinPayLoad : public virtual ::apache::thrift::TBase {
 public:

  CoinPayLoad(const CoinPayLoad&);
  CoinPayLoad& operator=(const CoinPayLoad&);
  CoinPayLoad() : payCoin(0), freeCoin(0), type((PayloadType::type)0), rewardCoin(0) {
  }

  virtual ~CoinPayLoad() noexcept;
  int32_t payCoin;
  int32_t freeCoin;
  /**
   * 
   * @see PayloadType
   */
  PayloadType::type type;
  int32_t rewardCoin;

  _CoinPayLoad__isset __isset;

  void __set_payCoin(const int32_t val);

  void __set_freeCoin(const int32_t val);

  void __set_type(const PayloadType::type val);

  void __set_rewardCoin(const int32_t val);

  bool operator == (const CoinPayLoad & rhs) const
  {
    if (!(payCoin == rhs.payCoin))
      return false;
    if (!(freeCoin == rhs.freeCoin))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(rewardCoin == rhs.rewardCoin))
      return false;
    return true;
  }
  bool operator != (const CoinPayLoad &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CoinPayLoad & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CoinPayLoad &a, CoinPayLoad &b);

std::ostream& operator<<(std::ostream& out, const CoinPayLoad& obj);

typedef struct _CoinHistory__isset {
  _CoinHistory__isset() : payDate(false), coinBalance(false), coin(false), price(false), title(false), refund(false), paySeq(false), currency(false), currencySign(false), displayPrice(false), payload(false), channelId(false) {}
  bool payDate :1;
  bool coinBalance :1;
  bool coin :1;
  bool price :1;
  bool title :1;
  bool refund :1;
  bool paySeq :1;
  bool currency :1;
  bool currencySign :1;
  bool displayPrice :1;
  bool payload :1;
  bool channelId :1;
} _CoinHistory__isset;

class CoinHistory : public virtual ::apache::thrift::TBase {
 public:

  CoinHistory(const CoinHistory&);
  CoinHistory& operator=(const CoinHistory&);
  CoinHistory() : payDate(0), coinBalance(0), coin(0), price(), title(), refund(0), paySeq(), currency(), currencySign(), displayPrice(), channelId() {
  }

  virtual ~CoinHistory() noexcept;
  int64_t payDate;
  int32_t coinBalance;
  int32_t coin;
  std::string price;
  std::string title;
  bool refund;
  std::string paySeq;
  std::string currency;
  std::string currencySign;
  std::string displayPrice;
  CoinPayLoad payload;
  std::string channelId;

  _CoinHistory__isset __isset;

  void __set_payDate(const int64_t val);

  void __set_coinBalance(const int32_t val);

  void __set_coin(const int32_t val);

  void __set_price(const std::string& val);

  void __set_title(const std::string& val);

  void __set_refund(const bool val);

  void __set_paySeq(const std::string& val);

  void __set_currency(const std::string& val);

  void __set_currencySign(const std::string& val);

  void __set_displayPrice(const std::string& val);

  void __set_payload(const CoinPayLoad& val);

  void __set_channelId(const std::string& val);

  bool operator == (const CoinHistory & rhs) const
  {
    if (!(payDate == rhs.payDate))
      return false;
    if (!(coinBalance == rhs.coinBalance))
      return false;
    if (!(coin == rhs.coin))
      return false;
    if (!(price == rhs.price))
      return false;
    if (!(title == rhs.title))
      return false;
    if (!(refund == rhs.refund))
      return false;
    if (!(paySeq == rhs.paySeq))
      return false;
    if (!(currency == rhs.currency))
      return false;
    if (!(currencySign == rhs.currencySign))
      return false;
    if (!(displayPrice == rhs.displayPrice))
      return false;
    if (!(payload == rhs.payload))
      return false;
    if (!(channelId == rhs.channelId))
      return false;
    return true;
  }
  bool operator != (const CoinHistory &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CoinHistory & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CoinHistory &a, CoinHistory &b);

std::ostream& operator<<(std::ostream& out, const CoinHistory& obj);

typedef struct _CoinHistoryCondition__isset {
  _CoinHistoryCondition__isset() : start(false), size(false), language(false), eddt(false), appStoreCode(false) {}
  bool start :1;
  bool size :1;
  bool language :1;
  bool eddt :1;
  bool appStoreCode :1;
} _CoinHistoryCondition__isset;

class CoinHistoryCondition : public virtual ::apache::thrift::TBase {
 public:

  CoinHistoryCondition(const CoinHistoryCondition&);
  CoinHistoryCondition& operator=(const CoinHistoryCondition&);
  CoinHistoryCondition() : start(0), size(0), language(), eddt(), appStoreCode((PaymentType::type)0) {
  }

  virtual ~CoinHistoryCondition() noexcept;
  int64_t start;
  int32_t size;
  std::string language;
  std::string eddt;
  /**
   * 
   * @see PaymentType
   */
  PaymentType::type appStoreCode;

  _CoinHistoryCondition__isset __isset;

  void __set_start(const int64_t val);

  void __set_size(const int32_t val);

  void __set_language(const std::string& val);

  void __set_eddt(const std::string& val);

  void __set_appStoreCode(const PaymentType::type val);

  bool operator == (const CoinHistoryCondition & rhs) const
  {
    if (!(start == rhs.start))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(language == rhs.language))
      return false;
    if (!(eddt == rhs.eddt))
      return false;
    if (!(appStoreCode == rhs.appStoreCode))
      return false;
    return true;
  }
  bool operator != (const CoinHistoryCondition &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CoinHistoryCondition & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CoinHistoryCondition &a, CoinHistoryCondition &b);

std::ostream& operator<<(std::ostream& out, const CoinHistoryCondition& obj);

typedef struct _CoinHistoryResult__isset {
  _CoinHistoryResult__isset() : historys(false), balance(false), hasNext(false) {}
  bool historys :1;
  bool balance :1;
  bool hasNext :1;
} _CoinHistoryResult__isset;

class CoinHistoryResult : public virtual ::apache::thrift::TBase {
 public:

  CoinHistoryResult(const CoinHistoryResult&);
  CoinHistoryResult& operator=(const CoinHistoryResult&);
  CoinHistoryResult() : hasNext(0) {
  }

  virtual ~CoinHistoryResult() noexcept;
  std::vector<CoinHistory>  historys;
  Coin balance;
  bool hasNext;

  _CoinHistoryResult__isset __isset;

  void __set_historys(const std::vector<CoinHistory> & val);

  void __set_balance(const Coin& val);

  void __set_hasNext(const bool val);

  bool operator == (const CoinHistoryResult & rhs) const
  {
    if (!(historys == rhs.historys))
      return false;
    if (!(balance == rhs.balance))
      return false;
    if (!(hasNext == rhs.hasNext))
      return false;
    return true;
  }
  bool operator != (const CoinHistoryResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CoinHistoryResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CoinHistoryResult &a, CoinHistoryResult &b);

std::ostream& operator<<(std::ostream& out, const CoinHistoryResult& obj);

typedef struct _CoinProductItem__isset {
  _CoinProductItem__isset() : itemId(false), coin(false), freeCoin(false), currency(false), price(false), displayPrice(false), name(false), desc(false) {}
  bool itemId :1;
  bool coin :1;
  bool freeCoin :1;
  bool currency :1;
  bool price :1;
  bool displayPrice :1;
  bool name :1;
  bool desc :1;
} _CoinProductItem__isset;

class CoinProductItem : public virtual ::apache::thrift::TBase {
 public:

  CoinProductItem(const CoinProductItem&);
  CoinProductItem& operator=(const CoinProductItem&);
  CoinProductItem() : itemId(), coin(0), freeCoin(0), currency(), price(), displayPrice(), name(), desc() {
  }

  virtual ~CoinProductItem() noexcept;
  std::string itemId;
  int32_t coin;
  int32_t freeCoin;
  std::string currency;
  std::string price;
  std::string displayPrice;
  std::string name;
  std::string desc;

  _CoinProductItem__isset __isset;

  void __set_itemId(const std::string& val);

  void __set_coin(const int32_t val);

  void __set_freeCoin(const int32_t val);

  void __set_currency(const std::string& val);

  void __set_price(const std::string& val);

  void __set_displayPrice(const std::string& val);

  void __set_name(const std::string& val);

  void __set_desc(const std::string& val);

  bool operator == (const CoinProductItem & rhs) const
  {
    if (!(itemId == rhs.itemId))
      return false;
    if (!(coin == rhs.coin))
      return false;
    if (!(freeCoin == rhs.freeCoin))
      return false;
    if (!(currency == rhs.currency))
      return false;
    if (!(price == rhs.price))
      return false;
    if (!(displayPrice == rhs.displayPrice))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(desc == rhs.desc))
      return false;
    return true;
  }
  bool operator != (const CoinProductItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CoinProductItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CoinProductItem &a, CoinProductItem &b);

std::ostream& operator<<(std::ostream& out, const CoinProductItem& obj);

typedef struct _CoinPurchaseConfirm__isset {
  _CoinPurchaseConfirm__isset() : orderId(false), appStoreCode(false), receipt(false), signature(false), seller(false), requestType(false), ignoreReceipt(false) {}
  bool orderId :1;
  bool appStoreCode :1;
  bool receipt :1;
  bool signature :1;
  bool seller :1;
  bool requestType :1;
  bool ignoreReceipt :1;
} _CoinPurchaseConfirm__isset;

class CoinPurchaseConfirm : public virtual ::apache::thrift::TBase {
 public:

  CoinPurchaseConfirm(const CoinPurchaseConfirm&);
  CoinPurchaseConfirm& operator=(const CoinPurchaseConfirm&);
  CoinPurchaseConfirm() : orderId(), appStoreCode((PaymentType::type)0), receipt(), signature(), seller(), requestType(), ignoreReceipt(0) {
  }

  virtual ~CoinPurchaseConfirm() noexcept;
  std::string orderId;
  /**
   * 
   * @see PaymentType
   */
  PaymentType::type appStoreCode;
  std::string receipt;
  std::string signature;
  std::string seller;
  std::string requestType;
  bool ignoreReceipt;

  _CoinPurchaseConfirm__isset __isset;

  void __set_orderId(const std::string& val);

  void __set_appStoreCode(const PaymentType::type val);

  void __set_receipt(const std::string& val);

  void __set_signature(const std::string& val);

  void __set_seller(const std::string& val);

  void __set_requestType(const std::string& val);

  void __set_ignoreReceipt(const bool val);

  bool operator == (const CoinPurchaseConfirm & rhs) const
  {
    if (!(orderId == rhs.orderId))
      return false;
    if (!(appStoreCode == rhs.appStoreCode))
      return false;
    if (!(receipt == rhs.receipt))
      return false;
    if (!(signature == rhs.signature))
      return false;
    if (!(seller == rhs.seller))
      return false;
    if (!(requestType == rhs.requestType))
      return false;
    if (!(ignoreReceipt == rhs.ignoreReceipt))
      return false;
    return true;
  }
  bool operator != (const CoinPurchaseConfirm &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CoinPurchaseConfirm & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CoinPurchaseConfirm &a, CoinPurchaseConfirm &b);

std::ostream& operator<<(std::ostream& out, const CoinPurchaseConfirm& obj);

typedef struct _CoinPurchaseReservation__isset {
  _CoinPurchaseReservation__isset() : productId(false), country(false), currency(false), price(false), appStoreCode(false), language(false), pgCode(false), redirectUrl(false) {}
  bool productId :1;
  bool country :1;
  bool currency :1;
  bool price :1;
  bool appStoreCode :1;
  bool language :1;
  bool pgCode :1;
  bool redirectUrl :1;
} _CoinPurchaseReservation__isset;

class CoinPurchaseReservation : public virtual ::apache::thrift::TBase {
 public:

  CoinPurchaseReservation(const CoinPurchaseReservation&);
  CoinPurchaseReservation& operator=(const CoinPurchaseReservation&);
  CoinPurchaseReservation() : productId(), country(), currency(), price(), appStoreCode((PaymentType::type)0), language(), pgCode((PaymentPgType::type)0), redirectUrl() {
  }

  virtual ~CoinPurchaseReservation() noexcept;
  std::string productId;
  std::string country;
  std::string currency;
  std::string price;
  /**
   * 
   * @see PaymentType
   */
  PaymentType::type appStoreCode;
  std::string language;
  /**
   * 
   * @see PaymentPgType
   */
  PaymentPgType::type pgCode;
  std::string redirectUrl;

  _CoinPurchaseReservation__isset __isset;

  void __set_productId(const std::string& val);

  void __set_country(const std::string& val);

  void __set_currency(const std::string& val);

  void __set_price(const std::string& val);

  void __set_appStoreCode(const PaymentType::type val);

  void __set_language(const std::string& val);

  void __set_pgCode(const PaymentPgType::type val);

  void __set_redirectUrl(const std::string& val);

  bool operator == (const CoinPurchaseReservation & rhs) const
  {
    if (!(productId == rhs.productId))
      return false;
    if (!(country == rhs.country))
      return false;
    if (!(currency == rhs.currency))
      return false;
    if (!(price == rhs.price))
      return false;
    if (!(appStoreCode == rhs.appStoreCode))
      return false;
    if (!(language == rhs.language))
      return false;
    if (!(pgCode == rhs.pgCode))
      return false;
    if (!(redirectUrl == rhs.redirectUrl))
      return false;
    return true;
  }
  bool operator != (const CoinPurchaseReservation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CoinPurchaseReservation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CoinPurchaseReservation &a, CoinPurchaseReservation &b);

std::ostream& operator<<(std::ostream& out, const CoinPurchaseReservation& obj);

typedef struct _CoinUseReservationItem__isset {
  _CoinUseReservationItem__isset() : itemId(false), itemName(false), amount(false) {}
  bool itemId :1;
  bool itemName :1;
  bool amount :1;
} _CoinUseReservationItem__isset;

class CoinUseReservationItem : public virtual ::apache::thrift::TBase {
 public:

  CoinUseReservationItem(const CoinUseReservationItem&);
  CoinUseReservationItem& operator=(const CoinUseReservationItem&);
  CoinUseReservationItem() : itemId(), itemName(), amount(0) {
  }

  virtual ~CoinUseReservationItem() noexcept;
  std::string itemId;
  std::string itemName;
  int32_t amount;

  _CoinUseReservationItem__isset __isset;

  void __set_itemId(const std::string& val);

  void __set_itemName(const std::string& val);

  void __set_amount(const int32_t val);

  bool operator == (const CoinUseReservationItem & rhs) const
  {
    if (!(itemId == rhs.itemId))
      return false;
    if (!(itemName == rhs.itemName))
      return false;
    if (!(amount == rhs.amount))
      return false;
    return true;
  }
  bool operator != (const CoinUseReservationItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CoinUseReservationItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CoinUseReservationItem &a, CoinUseReservationItem &b);

std::ostream& operator<<(std::ostream& out, const CoinUseReservationItem& obj);

typedef struct _CoinUseReservation__isset {
  _CoinUseReservation__isset() : channelId(false), shopOrderId(false), appStoreCode(false), items(false), country(false) {}
  bool channelId :1;
  bool shopOrderId :1;
  bool appStoreCode :1;
  bool items :1;
  bool country :1;
} _CoinUseReservation__isset;

class CoinUseReservation : public virtual ::apache::thrift::TBase {
 public:

  CoinUseReservation(const CoinUseReservation&);
  CoinUseReservation& operator=(const CoinUseReservation&);
  CoinUseReservation() : channelId(), shopOrderId(), appStoreCode((PaymentType::type)0), country() {
  }

  virtual ~CoinUseReservation() noexcept;
  std::string channelId;
  std::string shopOrderId;
  /**
   * 
   * @see PaymentType
   */
  PaymentType::type appStoreCode;
  std::vector<CoinUseReservationItem>  items;
  std::string country;

  _CoinUseReservation__isset __isset;

  void __set_channelId(const std::string& val);

  void __set_shopOrderId(const std::string& val);

  void __set_appStoreCode(const PaymentType::type val);

  void __set_items(const std::vector<CoinUseReservationItem> & val);

  void __set_country(const std::string& val);

  bool operator == (const CoinUseReservation & rhs) const
  {
    if (!(channelId == rhs.channelId))
      return false;
    if (!(shopOrderId == rhs.shopOrderId))
      return false;
    if (!(appStoreCode == rhs.appStoreCode))
      return false;
    if (!(items == rhs.items))
      return false;
    if (!(country == rhs.country))
      return false;
    return true;
  }
  bool operator != (const CoinUseReservation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CoinUseReservation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CoinUseReservation &a, CoinUseReservation &b);

std::ostream& operator<<(std::ostream& out, const CoinUseReservation& obj);

typedef struct _CompactContact__isset {
  _CompactContact__isset() : mid(false), createdTime(false), modifiedTime(false), status(false), settings(false), displayNameOverridden(false) {}
  bool mid :1;
  bool createdTime :1;
  bool modifiedTime :1;
  bool status :1;
  bool settings :1;
  bool displayNameOverridden :1;
} _CompactContact__isset;

class CompactContact : public virtual ::apache::thrift::TBase {
 public:

  CompactContact(const CompactContact&);
  CompactContact& operator=(const CompactContact&);
  CompactContact() : mid(), createdTime(0), modifiedTime(0), status((ContactStatus::type)0), settings(0), displayNameOverridden() {
  }

  virtual ~CompactContact() noexcept;
  std::string mid;
  int64_t createdTime;
  int64_t modifiedTime;
  /**
   * 
   * @see ContactStatus
   */
  ContactStatus::type status;
  int64_t settings;
  std::string displayNameOverridden;

  _CompactContact__isset __isset;

  void __set_mid(const std::string& val);

  void __set_createdTime(const int64_t val);

  void __set_modifiedTime(const int64_t val);

  void __set_status(const ContactStatus::type val);

  void __set_settings(const int64_t val);

  void __set_displayNameOverridden(const std::string& val);

  bool operator == (const CompactContact & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    if (!(createdTime == rhs.createdTime))
      return false;
    if (!(modifiedTime == rhs.modifiedTime))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(settings == rhs.settings))
      return false;
    if (!(displayNameOverridden == rhs.displayNameOverridden))
      return false;
    return true;
  }
  bool operator != (const CompactContact &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CompactContact & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CompactContact &a, CompactContact &b);

std::ostream& operator<<(std::ostream& out, const CompactContact& obj);

typedef struct _ContactModification__isset {
  _ContactModification__isset() : type(false), luid(false), phones(false), emails(false), userids(false) {}
  bool type :1;
  bool luid :1;
  bool phones :1;
  bool emails :1;
  bool userids :1;
} _ContactModification__isset;

class ContactModification : public virtual ::apache::thrift::TBase {
 public:

  ContactModification(const ContactModification&);
  ContactModification& operator=(const ContactModification&);
  ContactModification() : type((ModificationType::type)0), luid() {
  }

  virtual ~ContactModification() noexcept;
  /**
   * 
   * @see ModificationType
   */
  ModificationType::type type;
  std::string luid;
  std::vector<std::string>  phones;
  std::vector<std::string>  emails;
  std::vector<std::string>  userids;

  _ContactModification__isset __isset;

  void __set_type(const ModificationType::type val);

  void __set_luid(const std::string& val);

  void __set_phones(const std::vector<std::string> & val);

  void __set_emails(const std::vector<std::string> & val);

  void __set_userids(const std::vector<std::string> & val);

  bool operator == (const ContactModification & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(luid == rhs.luid))
      return false;
    if (!(phones == rhs.phones))
      return false;
    if (!(emails == rhs.emails))
      return false;
    if (!(userids == rhs.userids))
      return false;
    return true;
  }
  bool operator != (const ContactModification &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContactModification & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ContactModification &a, ContactModification &b);

std::ostream& operator<<(std::ostream& out, const ContactModification& obj);

typedef struct _ContactRegistration__isset {
  _ContactRegistration__isset() : contact(false), luid(false), contactType(false), contactKey(false) {}
  bool contact :1;
  bool luid :1;
  bool contactType :1;
  bool contactKey :1;
} _ContactRegistration__isset;

class ContactRegistration : public virtual ::apache::thrift::TBase {
 public:

  ContactRegistration(const ContactRegistration&);
  ContactRegistration& operator=(const ContactRegistration&);
  ContactRegistration() : luid(), contactType((ContactType::type)0), contactKey() {
  }

  virtual ~ContactRegistration() noexcept;
  Contact contact;
  std::string luid;
  /**
   * 
   * @see ContactType
   */
  ContactType::type contactType;
  std::string contactKey;

  _ContactRegistration__isset __isset;

  void __set_contact(const Contact& val);

  void __set_luid(const std::string& val);

  void __set_contactType(const ContactType::type val);

  void __set_contactKey(const std::string& val);

  bool operator == (const ContactRegistration & rhs) const
  {
    if (!(contact == rhs.contact))
      return false;
    if (!(luid == rhs.luid))
      return false;
    if (!(contactType == rhs.contactType))
      return false;
    if (!(contactKey == rhs.contactKey))
      return false;
    return true;
  }
  bool operator != (const ContactRegistration &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContactRegistration & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ContactRegistration &a, ContactRegistration &b);

std::ostream& operator<<(std::ostream& out, const ContactRegistration& obj);

typedef struct _ContactReport__isset {
  _ContactReport__isset() : mid(false), exists(false), contact(false) {}
  bool mid :1;
  bool exists :1;
  bool contact :1;
} _ContactReport__isset;

class ContactReport : public virtual ::apache::thrift::TBase {
 public:

  ContactReport(const ContactReport&);
  ContactReport& operator=(const ContactReport&);
  ContactReport() : mid(), exists(0) {
  }

  virtual ~ContactReport() noexcept;
  std::string mid;
  bool exists;
  Contact contact;

  _ContactReport__isset __isset;

  void __set_mid(const std::string& val);

  void __set_exists(const bool val);

  void __set_contact(const Contact& val);

  bool operator == (const ContactReport & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    if (!(exists == rhs.exists))
      return false;
    if (!(contact == rhs.contact))
      return false;
    return true;
  }
  bool operator != (const ContactReport &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContactReport & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ContactReport &a, ContactReport &b);

std::ostream& operator<<(std::ostream& out, const ContactReport& obj);

typedef struct _ContactReportResult__isset {
  _ContactReportResult__isset() : mid(false), exists(false) {}
  bool mid :1;
  bool exists :1;
} _ContactReportResult__isset;

class ContactReportResult : public virtual ::apache::thrift::TBase {
 public:

  ContactReportResult(const ContactReportResult&);
  ContactReportResult& operator=(const ContactReportResult&);
  ContactReportResult() : mid(), exists(0) {
  }

  virtual ~ContactReportResult() noexcept;
  std::string mid;
  bool exists;

  _ContactReportResult__isset __isset;

  void __set_mid(const std::string& val);

  void __set_exists(const bool val);

  bool operator == (const ContactReportResult & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    if (!(exists == rhs.exists))
      return false;
    return true;
  }
  bool operator != (const ContactReportResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContactReportResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ContactReportResult &a, ContactReportResult &b);

std::ostream& operator<<(std::ostream& out, const ContactReportResult& obj);

typedef struct _DeviceInfo__isset {
  _DeviceInfo__isset() : deviceName(false), systemName(false), systemVersion(false), model(false), carrierCode(false), carrierName(false), applicationType(false) {}
  bool deviceName :1;
  bool systemName :1;
  bool systemVersion :1;
  bool model :1;
  bool carrierCode :1;
  bool carrierName :1;
  bool applicationType :1;
} _DeviceInfo__isset;

class DeviceInfo : public virtual ::apache::thrift::TBase {
 public:

  DeviceInfo(const DeviceInfo&);
  DeviceInfo& operator=(const DeviceInfo&);
  DeviceInfo() : deviceName(), systemName(), systemVersion(), model(), carrierCode((CarrierCode::type)0), carrierName(), applicationType((ApplicationType::type)0) {
  }

  virtual ~DeviceInfo() noexcept;
  std::string deviceName;
  std::string systemName;
  std::string systemVersion;
  std::string model;
  /**
   * 
   * @see CarrierCode
   */
  CarrierCode::type carrierCode;
  std::string carrierName;
  /**
   * 
   * @see ApplicationType
   */
  ApplicationType::type applicationType;

  _DeviceInfo__isset __isset;

  void __set_deviceName(const std::string& val);

  void __set_systemName(const std::string& val);

  void __set_systemVersion(const std::string& val);

  void __set_model(const std::string& val);

  void __set_carrierCode(const CarrierCode::type val);

  void __set_carrierName(const std::string& val);

  void __set_applicationType(const ApplicationType::type val);

  bool operator == (const DeviceInfo & rhs) const
  {
    if (!(deviceName == rhs.deviceName))
      return false;
    if (!(systemName == rhs.systemName))
      return false;
    if (!(systemVersion == rhs.systemVersion))
      return false;
    if (!(model == rhs.model))
      return false;
    if (!(carrierCode == rhs.carrierCode))
      return false;
    if (!(carrierName == rhs.carrierName))
      return false;
    if (!(applicationType == rhs.applicationType))
      return false;
    return true;
  }
  bool operator != (const DeviceInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeviceInfo &a, DeviceInfo &b);

std::ostream& operator<<(std::ostream& out, const DeviceInfo& obj);

typedef struct _EmailConfirmation__isset {
  _EmailConfirmation__isset() : usePasswordSet(false), email(false), password(false), ignoreDuplication(false) {}
  bool usePasswordSet :1;
  bool email :1;
  bool password :1;
  bool ignoreDuplication :1;
} _EmailConfirmation__isset;

class EmailConfirmation : public virtual ::apache::thrift::TBase {
 public:

  EmailConfirmation(const EmailConfirmation&);
  EmailConfirmation& operator=(const EmailConfirmation&);
  EmailConfirmation() : usePasswordSet(0), email(), password(), ignoreDuplication(0) {
  }

  virtual ~EmailConfirmation() noexcept;
  bool usePasswordSet;
  std::string email;
  std::string password;
  bool ignoreDuplication;

  _EmailConfirmation__isset __isset;

  void __set_usePasswordSet(const bool val);

  void __set_email(const std::string& val);

  void __set_password(const std::string& val);

  void __set_ignoreDuplication(const bool val);

  bool operator == (const EmailConfirmation & rhs) const
  {
    if (!(usePasswordSet == rhs.usePasswordSet))
      return false;
    if (!(email == rhs.email))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(ignoreDuplication == rhs.ignoreDuplication))
      return false;
    return true;
  }
  bool operator != (const EmailConfirmation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EmailConfirmation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(EmailConfirmation &a, EmailConfirmation &b);

std::ostream& operator<<(std::ostream& out, const EmailConfirmation& obj);

typedef struct _EmailConfirmationSession__isset {
  _EmailConfirmationSession__isset() : emailConfirmationType(false), verifier(false), targetEmail(false) {}
  bool emailConfirmationType :1;
  bool verifier :1;
  bool targetEmail :1;
} _EmailConfirmationSession__isset;

class EmailConfirmationSession : public virtual ::apache::thrift::TBase {
 public:

  EmailConfirmationSession(const EmailConfirmationSession&);
  EmailConfirmationSession& operator=(const EmailConfirmationSession&);
  EmailConfirmationSession() : emailConfirmationType((EmailConfirmationType::type)0), verifier(), targetEmail() {
  }

  virtual ~EmailConfirmationSession() noexcept;
  /**
   * 
   * @see EmailConfirmationType
   */
  EmailConfirmationType::type emailConfirmationType;
  std::string verifier;
  std::string targetEmail;

  _EmailConfirmationSession__isset __isset;

  void __set_emailConfirmationType(const EmailConfirmationType::type val);

  void __set_verifier(const std::string& val);

  void __set_targetEmail(const std::string& val);

  bool operator == (const EmailConfirmationSession & rhs) const
  {
    if (!(emailConfirmationType == rhs.emailConfirmationType))
      return false;
    if (!(verifier == rhs.verifier))
      return false;
    if (!(targetEmail == rhs.targetEmail))
      return false;
    return true;
  }
  bool operator != (const EmailConfirmationSession &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EmailConfirmationSession & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(EmailConfirmationSession &a, EmailConfirmationSession &b);

std::ostream& operator<<(std::ostream& out, const EmailConfirmationSession& obj);

typedef struct _FriendChannelMatrix__isset {
  _FriendChannelMatrix__isset() : channelId(false), representMid(false), count(false), point(false) {}
  bool channelId :1;
  bool representMid :1;
  bool count :1;
  bool point :1;
} _FriendChannelMatrix__isset;

class FriendChannelMatrix : public virtual ::apache::thrift::TBase {
 public:

  FriendChannelMatrix(const FriendChannelMatrix&);
  FriendChannelMatrix& operator=(const FriendChannelMatrix&);
  FriendChannelMatrix() : channelId(), representMid(), count(0), point(0) {
  }

  virtual ~FriendChannelMatrix() noexcept;
  std::string channelId;
  std::string representMid;
  int32_t count;
  int32_t point;

  _FriendChannelMatrix__isset __isset;

  void __set_channelId(const std::string& val);

  void __set_representMid(const std::string& val);

  void __set_count(const int32_t val);

  void __set_point(const int32_t val);

  bool operator == (const FriendChannelMatrix & rhs) const
  {
    if (!(channelId == rhs.channelId))
      return false;
    if (!(representMid == rhs.representMid))
      return false;
    if (!(count == rhs.count))
      return false;
    if (!(point == rhs.point))
      return false;
    return true;
  }
  bool operator != (const FriendChannelMatrix &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FriendChannelMatrix & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FriendChannelMatrix &a, FriendChannelMatrix &b);

std::ostream& operator<<(std::ostream& out, const FriendChannelMatrix& obj);

typedef struct _FriendChannelMatricesResponse__isset {
  _FriendChannelMatricesResponse__isset() : expires(false), matrices(false) {}
  bool expires :1;
  bool matrices :1;
} _FriendChannelMatricesResponse__isset;

class FriendChannelMatricesResponse : public virtual ::apache::thrift::TBase {
 public:

  FriendChannelMatricesResponse(const FriendChannelMatricesResponse&);
  FriendChannelMatricesResponse& operator=(const FriendChannelMatricesResponse&);
  FriendChannelMatricesResponse() : expires(0) {
  }

  virtual ~FriendChannelMatricesResponse() noexcept;
  int64_t expires;
  std::vector<FriendChannelMatrix>  matrices;

  _FriendChannelMatricesResponse__isset __isset;

  void __set_expires(const int64_t val);

  void __set_matrices(const std::vector<FriendChannelMatrix> & val);

  bool operator == (const FriendChannelMatricesResponse & rhs) const
  {
    if (!(expires == rhs.expires))
      return false;
    if (!(matrices == rhs.matrices))
      return false;
    return true;
  }
  bool operator != (const FriendChannelMatricesResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FriendChannelMatricesResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FriendChannelMatricesResponse &a, FriendChannelMatricesResponse &b);

std::ostream& operator<<(std::ostream& out, const FriendChannelMatricesResponse& obj);

typedef struct _FriendRequest__isset {
  _FriendRequest__isset() : eMid(false), mid(false), direction(false), method(false), param(false), timestamp(false), seqId(false), displayName(false), picturePath(false), pictureStatus(false) {}
  bool eMid :1;
  bool mid :1;
  bool direction :1;
  bool method :1;
  bool param :1;
  bool timestamp :1;
  bool seqId :1;
  bool displayName :1;
  bool picturePath :1;
  bool pictureStatus :1;
} _FriendRequest__isset;

class FriendRequest : public virtual ::apache::thrift::TBase {
 public:

  FriendRequest(const FriendRequest&);
  FriendRequest& operator=(const FriendRequest&);
  FriendRequest() : eMid(), mid(), direction((FriendRequestDirection::type)0), method((FriendRequestMethod::type)0), param(), timestamp(0), seqId(0), displayName(), picturePath(), pictureStatus() {
  }

  virtual ~FriendRequest() noexcept;
  std::string eMid;
  std::string mid;
  /**
   * 
   * @see FriendRequestDirection
   */
  FriendRequestDirection::type direction;
  /**
   * 
   * @see FriendRequestMethod
   */
  FriendRequestMethod::type method;
  std::string param;
  int64_t timestamp;
  int64_t seqId;
  std::string displayName;
  std::string picturePath;
  std::string pictureStatus;

  _FriendRequest__isset __isset;

  void __set_eMid(const std::string& val);

  void __set_mid(const std::string& val);

  void __set_direction(const FriendRequestDirection::type val);

  void __set_method(const FriendRequestMethod::type val);

  void __set_param(const std::string& val);

  void __set_timestamp(const int64_t val);

  void __set_seqId(const int64_t val);

  void __set_displayName(const std::string& val);

  void __set_picturePath(const std::string& val);

  void __set_pictureStatus(const std::string& val);

  bool operator == (const FriendRequest & rhs) const
  {
    if (!(eMid == rhs.eMid))
      return false;
    if (!(mid == rhs.mid))
      return false;
    if (!(direction == rhs.direction))
      return false;
    if (!(method == rhs.method))
      return false;
    if (!(param == rhs.param))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(seqId == rhs.seqId))
      return false;
    if (!(displayName == rhs.displayName))
      return false;
    if (!(picturePath == rhs.picturePath))
      return false;
    if (!(pictureStatus == rhs.pictureStatus))
      return false;
    return true;
  }
  bool operator != (const FriendRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FriendRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FriendRequest &a, FriendRequest &b);

std::ostream& operator<<(std::ostream& out, const FriendRequest& obj);

typedef struct _FriendRequestsInfo__isset {
  _FriendRequestsInfo__isset() : totalIncomingCount(false), totalOutgoingCount(false), recentIncomings(false), recentOutgoings(false), totalIncomingLimit(false), totalOutgoingLimit(false) {}
  bool totalIncomingCount :1;
  bool totalOutgoingCount :1;
  bool recentIncomings :1;
  bool recentOutgoings :1;
  bool totalIncomingLimit :1;
  bool totalOutgoingLimit :1;
} _FriendRequestsInfo__isset;

class FriendRequestsInfo : public virtual ::apache::thrift::TBase {
 public:

  FriendRequestsInfo(const FriendRequestsInfo&);
  FriendRequestsInfo& operator=(const FriendRequestsInfo&);
  FriendRequestsInfo() : totalIncomingCount(0), totalOutgoingCount(0), totalIncomingLimit(0), totalOutgoingLimit(0) {
  }

  virtual ~FriendRequestsInfo() noexcept;
  int32_t totalIncomingCount;
  int32_t totalOutgoingCount;
  std::vector<FriendRequest>  recentIncomings;
  std::vector<FriendRequest>  recentOutgoings;
  int32_t totalIncomingLimit;
  int32_t totalOutgoingLimit;

  _FriendRequestsInfo__isset __isset;

  void __set_totalIncomingCount(const int32_t val);

  void __set_totalOutgoingCount(const int32_t val);

  void __set_recentIncomings(const std::vector<FriendRequest> & val);

  void __set_recentOutgoings(const std::vector<FriendRequest> & val);

  void __set_totalIncomingLimit(const int32_t val);

  void __set_totalOutgoingLimit(const int32_t val);

  bool operator == (const FriendRequestsInfo & rhs) const
  {
    if (!(totalIncomingCount == rhs.totalIncomingCount))
      return false;
    if (!(totalOutgoingCount == rhs.totalOutgoingCount))
      return false;
    if (!(recentIncomings == rhs.recentIncomings))
      return false;
    if (!(recentOutgoings == rhs.recentOutgoings))
      return false;
    if (!(totalIncomingLimit == rhs.totalIncomingLimit))
      return false;
    if (!(totalOutgoingLimit == rhs.totalOutgoingLimit))
      return false;
    return true;
  }
  bool operator != (const FriendRequestsInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FriendRequestsInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FriendRequestsInfo &a, FriendRequestsInfo &b);

std::ostream& operator<<(std::ostream& out, const FriendRequestsInfo& obj);

typedef struct _Geolocation__isset {
  _Geolocation__isset() : longitude(false), latitude(false) {}
  bool longitude :1;
  bool latitude :1;
} _Geolocation__isset;

class Geolocation : public virtual ::apache::thrift::TBase {
 public:

  Geolocation(const Geolocation&);
  Geolocation& operator=(const Geolocation&);
  Geolocation() : longitude(0), latitude(0) {
  }

  virtual ~Geolocation() noexcept;
  double longitude;
  double latitude;

  _Geolocation__isset __isset;

  void __set_longitude(const double val);

  void __set_latitude(const double val);

  bool operator == (const Geolocation & rhs) const
  {
    if (!(longitude == rhs.longitude))
      return false;
    if (!(latitude == rhs.latitude))
      return false;
    return true;
  }
  bool operator != (const Geolocation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Geolocation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Geolocation &a, Geolocation &b);

std::ostream& operator<<(std::ostream& out, const Geolocation& obj);

typedef struct _NotificationTarget__isset {
  _NotificationTarget__isset() : applicationType(false), applicationVersion(false), region(false) {}
  bool applicationType :1;
  bool applicationVersion :1;
  bool region :1;
} _NotificationTarget__isset;

class NotificationTarget : public virtual ::apache::thrift::TBase {
 public:

  NotificationTarget(const NotificationTarget&);
  NotificationTarget& operator=(const NotificationTarget&);
  NotificationTarget() : applicationType(), applicationVersion(), region() {
  }

  virtual ~NotificationTarget() noexcept;
  std::string applicationType;
  std::string applicationVersion;
  std::string region;

  _NotificationTarget__isset __isset;

  void __set_applicationType(const std::string& val);

  void __set_applicationVersion(const std::string& val);

  void __set_region(const std::string& val);

  bool operator == (const NotificationTarget & rhs) const
  {
    if (!(applicationType == rhs.applicationType))
      return false;
    if (!(applicationVersion == rhs.applicationVersion))
      return false;
    if (!(region == rhs.region))
      return false;
    return true;
  }
  bool operator != (const NotificationTarget &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NotificationTarget & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(NotificationTarget &a, NotificationTarget &b);

std::ostream& operator<<(std::ostream& out, const NotificationTarget& obj);

typedef struct _GlobalEvent__isset {
  _GlobalEvent__isset() : key(false), targets(false), createdTime(false), data(false), maxDelay(false) {}
  bool key :1;
  bool targets :1;
  bool createdTime :1;
  bool data :1;
  bool maxDelay :1;
} _GlobalEvent__isset;

class GlobalEvent : public virtual ::apache::thrift::TBase {
 public:

  GlobalEvent(const GlobalEvent&);
  GlobalEvent& operator=(const GlobalEvent&);
  GlobalEvent() : key(), createdTime(0), data(0), maxDelay(0) {
  }

  virtual ~GlobalEvent() noexcept;
  std::string key;
  std::vector<NotificationTarget>  targets;
  int64_t createdTime;
  int64_t data;
  int32_t maxDelay;

  _GlobalEvent__isset __isset;

  void __set_key(const std::string& val);

  void __set_targets(const std::vector<NotificationTarget> & val);

  void __set_createdTime(const int64_t val);

  void __set_data(const int64_t val);

  void __set_maxDelay(const int32_t val);

  bool operator == (const GlobalEvent & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(targets == rhs.targets))
      return false;
    if (!(createdTime == rhs.createdTime))
      return false;
    if (!(data == rhs.data))
      return false;
    if (!(maxDelay == rhs.maxDelay))
      return false;
    return true;
  }
  bool operator != (const GlobalEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GlobalEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GlobalEvent &a, GlobalEvent &b);

std::ostream& operator<<(std::ostream& out, const GlobalEvent& obj);

typedef struct _GroupPreference__isset {
  _GroupPreference__isset() : invitationTicket(false), favoriteTimestamp(false) {}
  bool invitationTicket :1;
  bool favoriteTimestamp :1;
} _GroupPreference__isset;

class GroupPreference : public virtual ::apache::thrift::TBase {
 public:

  GroupPreference(const GroupPreference&);
  GroupPreference& operator=(const GroupPreference&);
  GroupPreference() : invitationTicket(), favoriteTimestamp(0) {
  }

  virtual ~GroupPreference() noexcept;
  std::string invitationTicket;
  int64_t favoriteTimestamp;

  _GroupPreference__isset __isset;

  void __set_invitationTicket(const std::string& val);

  void __set_favoriteTimestamp(const int64_t val);

  bool operator == (const GroupPreference & rhs) const
  {
    if (!(invitationTicket == rhs.invitationTicket))
      return false;
    if (!(favoriteTimestamp == rhs.favoriteTimestamp))
      return false;
    return true;
  }
  bool operator != (const GroupPreference &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GroupPreference & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GroupPreference &a, GroupPreference &b);

std::ostream& operator<<(std::ostream& out, const GroupPreference& obj);

typedef struct _Group__isset {
  _Group__isset() : id(false), createdTime(false), name(false), pictureStatus(false), preventedJoinByTicket(false), groupPreference(false), members(false), creator(false), invitee(false), notificationDisabled(false) {}
  bool id :1;
  bool createdTime :1;
  bool name :1;
  bool pictureStatus :1;
  bool preventedJoinByTicket :1;
  bool groupPreference :1;
  bool members :1;
  bool creator :1;
  bool invitee :1;
  bool notificationDisabled :1;
} _Group__isset;

class Group : public virtual ::apache::thrift::TBase {
 public:

  Group(const Group&);
  Group& operator=(const Group&);
  Group() : id(), createdTime(0), name(), pictureStatus(), preventedJoinByTicket(0), notificationDisabled(0) {
  }

  virtual ~Group() noexcept;
  std::string id;
  int64_t createdTime;
  std::string name;
  std::string pictureStatus;
  bool preventedJoinByTicket;
  GroupPreference groupPreference;
  std::vector<Contact>  members;
  Contact creator;
  std::vector<Contact>  invitee;
  bool notificationDisabled;

  _Group__isset __isset;

  void __set_id(const std::string& val);

  void __set_createdTime(const int64_t val);

  void __set_name(const std::string& val);

  void __set_pictureStatus(const std::string& val);

  void __set_preventedJoinByTicket(const bool val);

  void __set_groupPreference(const GroupPreference& val);

  void __set_members(const std::vector<Contact> & val);

  void __set_creator(const Contact& val);

  void __set_invitee(const std::vector<Contact> & val);

  void __set_notificationDisabled(const bool val);

  bool operator == (const Group & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(createdTime == rhs.createdTime))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(pictureStatus == rhs.pictureStatus))
      return false;
    if (!(preventedJoinByTicket == rhs.preventedJoinByTicket))
      return false;
    if (!(groupPreference == rhs.groupPreference))
      return false;
    if (!(members == rhs.members))
      return false;
    if (!(creator == rhs.creator))
      return false;
    if (!(invitee == rhs.invitee))
      return false;
    if (!(notificationDisabled == rhs.notificationDisabled))
      return false;
    return true;
  }
  bool operator != (const Group &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Group & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Group &a, Group &b);

std::ostream& operator<<(std::ostream& out, const Group& obj);

typedef struct _IdentityCredential__isset {
  _IdentityCredential__isset() : provider(false), identifier(false), password(false) {}
  bool provider :1;
  bool identifier :1;
  bool password :1;
} _IdentityCredential__isset;

class IdentityCredential : public virtual ::apache::thrift::TBase {
 public:

  IdentityCredential(const IdentityCredential&);
  IdentityCredential& operator=(const IdentityCredential&);
  IdentityCredential() : provider((IdentityProvider::type)0), identifier(), password() {
  }

  virtual ~IdentityCredential() noexcept;
  /**
   * 
   * @see IdentityProvider
   */
  IdentityProvider::type provider;
  std::string identifier;
  std::string password;

  _IdentityCredential__isset __isset;

  void __set_provider(const IdentityProvider::type val);

  void __set_identifier(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const IdentityCredential & rhs) const
  {
    if (!(provider == rhs.provider))
      return false;
    if (!(identifier == rhs.identifier))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const IdentityCredential &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IdentityCredential & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(IdentityCredential &a, IdentityCredential &b);

std::ostream& operator<<(std::ostream& out, const IdentityCredential& obj);

typedef struct _LastReadMessageId__isset {
  _LastReadMessageId__isset() : mid(false), lastReadMessageId(false) {}
  bool mid :1;
  bool lastReadMessageId :1;
} _LastReadMessageId__isset;

class LastReadMessageId : public virtual ::apache::thrift::TBase {
 public:

  LastReadMessageId(const LastReadMessageId&);
  LastReadMessageId& operator=(const LastReadMessageId&);
  LastReadMessageId() : mid(), lastReadMessageId() {
  }

  virtual ~LastReadMessageId() noexcept;
  std::string mid;
  std::string lastReadMessageId;

  _LastReadMessageId__isset __isset;

  void __set_mid(const std::string& val);

  void __set_lastReadMessageId(const std::string& val);

  bool operator == (const LastReadMessageId & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    if (!(lastReadMessageId == rhs.lastReadMessageId))
      return false;
    return true;
  }
  bool operator != (const LastReadMessageId &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LastReadMessageId & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LastReadMessageId &a, LastReadMessageId &b);

std::ostream& operator<<(std::ostream& out, const LastReadMessageId& obj);

typedef struct _LastReadMessageIds__isset {
  _LastReadMessageIds__isset() : chatId(false), lastReadMessageIds(false) {}
  bool chatId :1;
  bool lastReadMessageIds :1;
} _LastReadMessageIds__isset;

class LastReadMessageIds : public virtual ::apache::thrift::TBase {
 public:

  LastReadMessageIds(const LastReadMessageIds&);
  LastReadMessageIds& operator=(const LastReadMessageIds&);
  LastReadMessageIds() : chatId() {
  }

  virtual ~LastReadMessageIds() noexcept;
  std::string chatId;
  std::vector<LastReadMessageId>  lastReadMessageIds;

  _LastReadMessageIds__isset __isset;

  void __set_chatId(const std::string& val);

  void __set_lastReadMessageIds(const std::vector<LastReadMessageId> & val);

  bool operator == (const LastReadMessageIds & rhs) const
  {
    if (!(chatId == rhs.chatId))
      return false;
    if (!(lastReadMessageIds == rhs.lastReadMessageIds))
      return false;
    return true;
  }
  bool operator != (const LastReadMessageIds &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LastReadMessageIds & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LastReadMessageIds &a, LastReadMessageIds &b);

std::ostream& operator<<(std::ostream& out, const LastReadMessageIds& obj);

typedef struct _VerificationSessionData__isset {
  _VerificationSessionData__isset() : sessionId(false), method(false), callback(false), normalizedPhone(false), countryCode(false), nationalSignificantNumber(false), availableVerificationMethods(false) {}
  bool sessionId :1;
  bool method :1;
  bool callback :1;
  bool normalizedPhone :1;
  bool countryCode :1;
  bool nationalSignificantNumber :1;
  bool availableVerificationMethods :1;
} _VerificationSessionData__isset;

class VerificationSessionData : public virtual ::apache::thrift::TBase {
 public:

  VerificationSessionData(const VerificationSessionData&);
  VerificationSessionData& operator=(const VerificationSessionData&);
  VerificationSessionData() : sessionId(), method((VerificationMethod::type)0), callback(), normalizedPhone(), countryCode(), nationalSignificantNumber() {
  }

  virtual ~VerificationSessionData() noexcept;
  std::string sessionId;
  /**
   * 
   * @see VerificationMethod
   */
  VerificationMethod::type method;
  std::string callback;
  std::string normalizedPhone;
  std::string countryCode;
  std::string nationalSignificantNumber;
  std::vector<VerificationMethod::type>  availableVerificationMethods;

  _VerificationSessionData__isset __isset;

  void __set_sessionId(const std::string& val);

  void __set_method(const VerificationMethod::type val);

  void __set_callback(const std::string& val);

  void __set_normalizedPhone(const std::string& val);

  void __set_countryCode(const std::string& val);

  void __set_nationalSignificantNumber(const std::string& val);

  void __set_availableVerificationMethods(const std::vector<VerificationMethod::type> & val);

  bool operator == (const VerificationSessionData & rhs) const
  {
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(method == rhs.method))
      return false;
    if (!(callback == rhs.callback))
      return false;
    if (!(normalizedPhone == rhs.normalizedPhone))
      return false;
    if (!(countryCode == rhs.countryCode))
      return false;
    if (!(nationalSignificantNumber == rhs.nationalSignificantNumber))
      return false;
    if (!(availableVerificationMethods == rhs.availableVerificationMethods))
      return false;
    return true;
  }
  bool operator != (const VerificationSessionData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VerificationSessionData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(VerificationSessionData &a, VerificationSessionData &b);

std::ostream& operator<<(std::ostream& out, const VerificationSessionData& obj);

typedef struct _LoginResult__isset {
  _LoginResult__isset() : authToken(false), certificate(false), verifier(false), pinCode(false), type(false), lastPrimaryBindTime(false), displayMessage(false), sessionForSMSConfirm(false) {}
  bool authToken :1;
  bool certificate :1;
  bool verifier :1;
  bool pinCode :1;
  bool type :1;
  bool lastPrimaryBindTime :1;
  bool displayMessage :1;
  bool sessionForSMSConfirm :1;
} _LoginResult__isset;

class LoginResult : public virtual ::apache::thrift::TBase {
 public:

  LoginResult(const LoginResult&);
  LoginResult& operator=(const LoginResult&);
  LoginResult() : authToken(), certificate(), verifier(), pinCode(), type((LoginResultType::type)0), lastPrimaryBindTime(0), displayMessage() {
  }

  virtual ~LoginResult() noexcept;
  std::string authToken;
  std::string certificate;
  std::string verifier;
  std::string pinCode;
  /**
   * 
   * @see LoginResultType
   */
  LoginResultType::type type;
  int64_t lastPrimaryBindTime;
  std::string displayMessage;
  VerificationSessionData sessionForSMSConfirm;

  _LoginResult__isset __isset;

  void __set_authToken(const std::string& val);

  void __set_certificate(const std::string& val);

  void __set_verifier(const std::string& val);

  void __set_pinCode(const std::string& val);

  void __set_type(const LoginResultType::type val);

  void __set_lastPrimaryBindTime(const int64_t val);

  void __set_displayMessage(const std::string& val);

  void __set_sessionForSMSConfirm(const VerificationSessionData& val);

  bool operator == (const LoginResult & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(certificate == rhs.certificate))
      return false;
    if (!(verifier == rhs.verifier))
      return false;
    if (!(pinCode == rhs.pinCode))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(lastPrimaryBindTime == rhs.lastPrimaryBindTime))
      return false;
    if (!(displayMessage == rhs.displayMessage))
      return false;
    if (!(sessionForSMSConfirm == rhs.sessionForSMSConfirm))
      return false;
    return true;
  }
  bool operator != (const LoginResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LoginResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LoginResult &a, LoginResult &b);

std::ostream& operator<<(std::ostream& out, const LoginResult& obj);

typedef struct _LoginRequest__isset {
  _LoginRequest__isset() : type(false), identityProvider(false), identifier(false), password(false), keepLoggedIn(false), accessLocation(false), systemName(false), certificate(false), verifier(false), secret(false), e2eeVersion(false) {}
  bool type :1;
  bool identityProvider :1;
  bool identifier :1;
  bool password :1;
  bool keepLoggedIn :1;
  bool accessLocation :1;
  bool systemName :1;
  bool certificate :1;
  bool verifier :1;
  bool secret :1;
  bool e2eeVersion :1;
} _LoginRequest__isset;

class LoginRequest : public virtual ::apache::thrift::TBase {
 public:

  LoginRequest(const LoginRequest&);
  LoginRequest& operator=(const LoginRequest&);
  LoginRequest() : type(0), identityProvider(0), identifier(), password(), keepLoggedIn(0), accessLocation(), systemName(), certificate(), verifier(), secret(), e2eeVersion(0) {
  }

  virtual ~LoginRequest() noexcept;
  int32_t type;
  int32_t identityProvider;
  std::string identifier;
  std::string password;
  bool keepLoggedIn;
  std::string accessLocation;
  std::string systemName;
  std::string certificate;
  std::string verifier;
  std::string secret;
  int32_t e2eeVersion;

  _LoginRequest__isset __isset;

  void __set_type(const int32_t val);

  void __set_identityProvider(const int32_t val);

  void __set_identifier(const std::string& val);

  void __set_password(const std::string& val);

  void __set_keepLoggedIn(const bool val);

  void __set_accessLocation(const std::string& val);

  void __set_systemName(const std::string& val);

  void __set_certificate(const std::string& val);

  void __set_verifier(const std::string& val);

  void __set_secret(const std::string& val);

  void __set_e2eeVersion(const int32_t val);

  bool operator == (const LoginRequest & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(identityProvider == rhs.identityProvider))
      return false;
    if (!(identifier == rhs.identifier))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(keepLoggedIn == rhs.keepLoggedIn))
      return false;
    if (!(accessLocation == rhs.accessLocation))
      return false;
    if (!(systemName == rhs.systemName))
      return false;
    if (!(certificate == rhs.certificate))
      return false;
    if (!(verifier == rhs.verifier))
      return false;
    if (!(secret == rhs.secret))
      return false;
    if (!(e2eeVersion == rhs.e2eeVersion))
      return false;
    return true;
  }
  bool operator != (const LoginRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LoginRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LoginRequest &a, LoginRequest &b);

std::ostream& operator<<(std::ostream& out, const LoginRequest& obj);

typedef struct _LoginSession__isset {
  _LoginSession__isset() : tokenKey(false), expirationTime(false), applicationType(false), systemName(false), accessLocation(false) {}
  bool tokenKey :1;
  bool expirationTime :1;
  bool applicationType :1;
  bool systemName :1;
  bool accessLocation :1;
} _LoginSession__isset;

class LoginSession : public virtual ::apache::thrift::TBase {
 public:

  LoginSession(const LoginSession&);
  LoginSession& operator=(const LoginSession&);
  LoginSession() : tokenKey(), expirationTime(0), applicationType((ApplicationType::type)0), systemName(), accessLocation() {
  }

  virtual ~LoginSession() noexcept;
  std::string tokenKey;
  int64_t expirationTime;
  /**
   * 
   * @see ApplicationType
   */
  ApplicationType::type applicationType;
  std::string systemName;
  std::string accessLocation;

  _LoginSession__isset __isset;

  void __set_tokenKey(const std::string& val);

  void __set_expirationTime(const int64_t val);

  void __set_applicationType(const ApplicationType::type val);

  void __set_systemName(const std::string& val);

  void __set_accessLocation(const std::string& val);

  bool operator == (const LoginSession & rhs) const
  {
    if (!(tokenKey == rhs.tokenKey))
      return false;
    if (!(expirationTime == rhs.expirationTime))
      return false;
    if (!(applicationType == rhs.applicationType))
      return false;
    if (!(systemName == rhs.systemName))
      return false;
    if (!(accessLocation == rhs.accessLocation))
      return false;
    return true;
  }
  bool operator != (const LoginSession &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LoginSession & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LoginSession &a, LoginSession &b);

std::ostream& operator<<(std::ostream& out, const LoginSession& obj);

typedef struct _Message__isset {
  _Message__isset() : _from(false), to(false), toType(false), id(false), createdTime(false), deliveredTime(false), text(false), location(false), hasContent(false), contentType(false), contentPreview(false), contentMetadata(false), sessionId(false), chunks(false), relatedMessageId(false), messageRelationType(false), readCount(false), relatedMessageServiceCode(false) {}
  bool _from :1;
  bool to :1;
  bool toType :1;
  bool id :1;
  bool createdTime :1;
  bool deliveredTime :1;
  bool text :1;
  bool location :1;
  bool hasContent :1;
  bool contentType :1;
  bool contentPreview :1;
  bool contentMetadata :1;
  bool sessionId :1;
  bool chunks :1;
  bool relatedMessageId :1;
  bool messageRelationType :1;
  bool readCount :1;
  bool relatedMessageServiceCode :1;
} _Message__isset;

class Message : public virtual ::apache::thrift::TBase {
 public:

  Message(const Message&);
  Message& operator=(const Message&);
  Message() : _from(), to(), toType((MIDType::type)0), id(), createdTime(0), deliveredTime(0), text(), hasContent(0), contentType((ContentType::type)0), contentPreview(), sessionId(0), relatedMessageId(), messageRelationType((MessageRelationType::type)0), readCount(0), relatedMessageServiceCode((ServiceCode::type)0) {
  }

  virtual ~Message() noexcept;
  std::string _from;
  std::string to;
  /**
   * 
   * @see MIDType
   */
  MIDType::type toType;
  std::string id;
  int64_t createdTime;
  int64_t deliveredTime;
  std::string text;
  Location location;
  bool hasContent;
  /**
   * 
   * @see ContentType
   */
  ContentType::type contentType;
  std::string contentPreview;
  std::map<std::string, std::string>  contentMetadata;
  int8_t sessionId;
  std::vector<std::string>  chunks;
  std::string relatedMessageId;
  /**
   * 
   * @see MessageRelationType
   */
  MessageRelationType::type messageRelationType;
  int64_t readCount;
  /**
   * 
   * @see ServiceCode
   */
  ServiceCode::type relatedMessageServiceCode;

  _Message__isset __isset;

  void __set__from(const std::string& val);

  void __set_to(const std::string& val);

  void __set_toType(const MIDType::type val);

  void __set_id(const std::string& val);

  void __set_createdTime(const int64_t val);

  void __set_deliveredTime(const int64_t val);

  void __set_text(const std::string& val);

  void __set_location(const Location& val);

  void __set_hasContent(const bool val);

  void __set_contentType(const ContentType::type val);

  void __set_contentPreview(const std::string& val);

  void __set_contentMetadata(const std::map<std::string, std::string> & val);

  void __set_sessionId(const int8_t val);

  void __set_chunks(const std::vector<std::string> & val);

  void __set_relatedMessageId(const std::string& val);

  void __set_messageRelationType(const MessageRelationType::type val);

  void __set_readCount(const int64_t val);

  void __set_relatedMessageServiceCode(const ServiceCode::type val);

  bool operator == (const Message & rhs) const
  {
    if (!(_from == rhs._from))
      return false;
    if (!(to == rhs.to))
      return false;
    if (!(toType == rhs.toType))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(createdTime == rhs.createdTime))
      return false;
    if (!(deliveredTime == rhs.deliveredTime))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(location == rhs.location))
      return false;
    if (!(hasContent == rhs.hasContent))
      return false;
    if (!(contentType == rhs.contentType))
      return false;
    if (!(contentPreview == rhs.contentPreview))
      return false;
    if (!(contentMetadata == rhs.contentMetadata))
      return false;
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(chunks == rhs.chunks))
      return false;
    if (!(relatedMessageId == rhs.relatedMessageId))
      return false;
    if (!(messageRelationType == rhs.messageRelationType))
      return false;
    if (!(readCount == rhs.readCount))
      return false;
    if (!(relatedMessageServiceCode == rhs.relatedMessageServiceCode))
      return false;
    return true;
  }
  bool operator != (const Message &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Message & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Message &a, Message &b);

std::ostream& operator<<(std::ostream& out, const Message& obj);

typedef struct _SquareMessage__isset {
  _SquareMessage__isset() : message(false), fromType(false), squareMessageRevision(false) {}
  bool message :1;
  bool fromType :1;
  bool squareMessageRevision :1;
} _SquareMessage__isset;

class SquareMessage : public virtual ::apache::thrift::TBase {
 public:

  SquareMessage(const SquareMessage&);
  SquareMessage& operator=(const SquareMessage&);
  SquareMessage() : fromType((MIDType::type)0), squareMessageRevision(0) {
  }

  virtual ~SquareMessage() noexcept;
  Message message;
  /**
   * 
   * @see MIDType
   */
  MIDType::type fromType;
  int64_t squareMessageRevision;

  _SquareMessage__isset __isset;

  void __set_message(const Message& val);

  void __set_fromType(const MIDType::type val);

  void __set_squareMessageRevision(const int64_t val);

  bool operator == (const SquareMessage & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    if (!(fromType == rhs.fromType))
      return false;
    if (!(squareMessageRevision == rhs.squareMessageRevision))
      return false;
    return true;
  }
  bool operator != (const SquareMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareMessage &a, SquareMessage &b);

std::ostream& operator<<(std::ostream& out, const SquareMessage& obj);

typedef struct _SquareChatStatusWithoutMessage__isset {
  _SquareChatStatusWithoutMessage__isset() : memberCount(false), unreadMessageCount(false) {}
  bool memberCount :1;
  bool unreadMessageCount :1;
} _SquareChatStatusWithoutMessage__isset;

class SquareChatStatusWithoutMessage : public virtual ::apache::thrift::TBase {
 public:

  SquareChatStatusWithoutMessage(const SquareChatStatusWithoutMessage&);
  SquareChatStatusWithoutMessage& operator=(const SquareChatStatusWithoutMessage&);
  SquareChatStatusWithoutMessage() : memberCount(0), unreadMessageCount(0) {
  }

  virtual ~SquareChatStatusWithoutMessage() noexcept;
  int32_t memberCount;
  int32_t unreadMessageCount;

  _SquareChatStatusWithoutMessage__isset __isset;

  void __set_memberCount(const int32_t val);

  void __set_unreadMessageCount(const int32_t val);

  bool operator == (const SquareChatStatusWithoutMessage & rhs) const
  {
    if (!(memberCount == rhs.memberCount))
      return false;
    if (!(unreadMessageCount == rhs.unreadMessageCount))
      return false;
    return true;
  }
  bool operator != (const SquareChatStatusWithoutMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareChatStatusWithoutMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareChatStatusWithoutMessage &a, SquareChatStatusWithoutMessage &b);

std::ostream& operator<<(std::ostream& out, const SquareChatStatusWithoutMessage& obj);

typedef struct _SquareChatStatus__isset {
  _SquareChatStatus__isset() : lastMessage(false), senderDisplayName(false), otherStatus(false) {}
  bool lastMessage :1;
  bool senderDisplayName :1;
  bool otherStatus :1;
} _SquareChatStatus__isset;

class SquareChatStatus : public virtual ::apache::thrift::TBase {
 public:

  SquareChatStatus(const SquareChatStatus&);
  SquareChatStatus& operator=(const SquareChatStatus&);
  SquareChatStatus() : senderDisplayName() {
  }

  virtual ~SquareChatStatus() noexcept;
  SquareMessage lastMessage;
  std::string senderDisplayName;
  SquareChatStatusWithoutMessage otherStatus;

  _SquareChatStatus__isset __isset;

  void __set_lastMessage(const SquareMessage& val);

  void __set_senderDisplayName(const std::string& val);

  void __set_otherStatus(const SquareChatStatusWithoutMessage& val);

  bool operator == (const SquareChatStatus & rhs) const
  {
    if (!(lastMessage == rhs.lastMessage))
      return false;
    if (!(senderDisplayName == rhs.senderDisplayName))
      return false;
    if (!(otherStatus == rhs.otherStatus))
      return false;
    return true;
  }
  bool operator != (const SquareChatStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareChatStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareChatStatus &a, SquareChatStatus &b);

std::ostream& operator<<(std::ostream& out, const SquareChatStatus& obj);

typedef struct _SquareChatMember__isset {
  _SquareChatMember__isset() : squareMemberMid(false), squareChatMid(false), revision(false), membershipState(false), notificationForMessage(false) {}
  bool squareMemberMid :1;
  bool squareChatMid :1;
  bool revision :1;
  bool membershipState :1;
  bool notificationForMessage :1;
} _SquareChatMember__isset;

class SquareChatMember : public virtual ::apache::thrift::TBase {
 public:

  SquareChatMember(const SquareChatMember&);
  SquareChatMember& operator=(const SquareChatMember&);
  SquareChatMember() : squareMemberMid(), squareChatMid(), revision(0), membershipState((SquareChatMembershipState::type)0), notificationForMessage(0) {
  }

  virtual ~SquareChatMember() noexcept;
  std::string squareMemberMid;
  std::string squareChatMid;
  int64_t revision;
  /**
   * 
   * @see SquareChatMembershipState
   */
  SquareChatMembershipState::type membershipState;
  bool notificationForMessage;

  _SquareChatMember__isset __isset;

  void __set_squareMemberMid(const std::string& val);

  void __set_squareChatMid(const std::string& val);

  void __set_revision(const int64_t val);

  void __set_membershipState(const SquareChatMembershipState::type val);

  void __set_notificationForMessage(const bool val);

  bool operator == (const SquareChatMember & rhs) const
  {
    if (!(squareMemberMid == rhs.squareMemberMid))
      return false;
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    if (!(revision == rhs.revision))
      return false;
    if (!(membershipState == rhs.membershipState))
      return false;
    if (!(notificationForMessage == rhs.notificationForMessage))
      return false;
    return true;
  }
  bool operator != (const SquareChatMember &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareChatMember & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareChatMember &a, SquareChatMember &b);

std::ostream& operator<<(std::ostream& out, const SquareChatMember& obj);

typedef struct _MessageOperation__isset {
  _MessageOperation__isset() : revision(false), createdTime(false), type(false), reqSeq(false), status(false), param1(false), param2(false), param3(false), message(false) {}
  bool revision :1;
  bool createdTime :1;
  bool type :1;
  bool reqSeq :1;
  bool status :1;
  bool param1 :1;
  bool param2 :1;
  bool param3 :1;
  bool message :1;
} _MessageOperation__isset;

class MessageOperation : public virtual ::apache::thrift::TBase {
 public:

  MessageOperation(const MessageOperation&);
  MessageOperation& operator=(const MessageOperation&);
  MessageOperation() : revision(0), createdTime(0), type((MessageOperationType::type)0), reqSeq(0), status((OpStatus::type)0), param1(), param2(), param3() {
  }

  virtual ~MessageOperation() noexcept;
  int64_t revision;
  int64_t createdTime;
  /**
   * 
   * @see MessageOperationType
   */
  MessageOperationType::type type;
  int32_t reqSeq;
  /**
   * 
   * @see OpStatus
   */
  OpStatus::type status;
  std::string param1;
  std::string param2;
  std::string param3;
  Message message;

  _MessageOperation__isset __isset;

  void __set_revision(const int64_t val);

  void __set_createdTime(const int64_t val);

  void __set_type(const MessageOperationType::type val);

  void __set_reqSeq(const int32_t val);

  void __set_status(const OpStatus::type val);

  void __set_param1(const std::string& val);

  void __set_param2(const std::string& val);

  void __set_param3(const std::string& val);

  void __set_message(const Message& val);

  bool operator == (const MessageOperation & rhs) const
  {
    if (!(revision == rhs.revision))
      return false;
    if (!(createdTime == rhs.createdTime))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(param1 == rhs.param1))
      return false;
    if (!(param2 == rhs.param2))
      return false;
    if (!(param3 == rhs.param3))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const MessageOperation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageOperation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MessageOperation &a, MessageOperation &b);

std::ostream& operator<<(std::ostream& out, const MessageOperation& obj);

typedef struct _MessageOperations__isset {
  _MessageOperations__isset() : operations(false), endFlag(false) {}
  bool operations :1;
  bool endFlag :1;
} _MessageOperations__isset;

class MessageOperations : public virtual ::apache::thrift::TBase {
 public:

  MessageOperations(const MessageOperations&);
  MessageOperations& operator=(const MessageOperations&);
  MessageOperations() : endFlag(0) {
  }

  virtual ~MessageOperations() noexcept;
  std::vector<MessageOperation>  operations;
  bool endFlag;

  _MessageOperations__isset __isset;

  void __set_operations(const std::vector<MessageOperation> & val);

  void __set_endFlag(const bool val);

  bool operator == (const MessageOperations & rhs) const
  {
    if (!(operations == rhs.operations))
      return false;
    if (!(endFlag == rhs.endFlag))
      return false;
    return true;
  }
  bool operator != (const MessageOperations &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageOperations & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MessageOperations &a, MessageOperations &b);

std::ostream& operator<<(std::ostream& out, const MessageOperations& obj);

typedef struct _MessageStoreResult__isset {
  _MessageStoreResult__isset() : requestId(false), messageIds(false) {}
  bool requestId :1;
  bool messageIds :1;
} _MessageStoreResult__isset;

class MessageStoreResult : public virtual ::apache::thrift::TBase {
 public:

  MessageStoreResult(const MessageStoreResult&);
  MessageStoreResult& operator=(const MessageStoreResult&);
  MessageStoreResult() : requestId() {
  }

  virtual ~MessageStoreResult() noexcept;
  std::string requestId;
  std::vector<std::string>  messageIds;

  _MessageStoreResult__isset __isset;

  void __set_requestId(const std::string& val);

  void __set_messageIds(const std::vector<std::string> & val);

  bool operator == (const MessageStoreResult & rhs) const
  {
    if (!(requestId == rhs.requestId))
      return false;
    if (!(messageIds == rhs.messageIds))
      return false;
    return true;
  }
  bool operator != (const MessageStoreResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageStoreResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MessageStoreResult &a, MessageStoreResult &b);

std::ostream& operator<<(std::ostream& out, const MessageStoreResult& obj);

typedef struct _MetaProfile__isset {
  _MetaProfile__isset() : createTime(false), regionCode(false), identities(false) {}
  bool createTime :1;
  bool regionCode :1;
  bool identities :1;
} _MetaProfile__isset;

class MetaProfile : public virtual ::apache::thrift::TBase {
 public:

  MetaProfile(const MetaProfile&);
  MetaProfile& operator=(const MetaProfile&);
  MetaProfile() : createTime(0), regionCode() {
  }

  virtual ~MetaProfile() noexcept;
  int64_t createTime;
  std::string regionCode;
  std::map<RegistrationType::type, std::string>  identities;

  _MetaProfile__isset __isset;

  void __set_createTime(const int64_t val);

  void __set_regionCode(const std::string& val);

  void __set_identities(const std::map<RegistrationType::type, std::string> & val);

  bool operator == (const MetaProfile & rhs) const
  {
    if (!(createTime == rhs.createTime))
      return false;
    if (!(regionCode == rhs.regionCode))
      return false;
    if (!(identities == rhs.identities))
      return false;
    return true;
  }
  bool operator != (const MetaProfile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MetaProfile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MetaProfile &a, MetaProfile &b);

std::ostream& operator<<(std::ostream& out, const MetaProfile& obj);

typedef struct _NotificationItem__isset {
  _NotificationItem__isset() : id(false), _from(false), to(false), fromChannel(false), toChannel(false), revision(false), createdTime(false), content(false) {}
  bool id :1;
  bool _from :1;
  bool to :1;
  bool fromChannel :1;
  bool toChannel :1;
  bool revision :1;
  bool createdTime :1;
  bool content :1;
} _NotificationItem__isset;

class NotificationItem : public virtual ::apache::thrift::TBase {
 public:

  NotificationItem(const NotificationItem&);
  NotificationItem& operator=(const NotificationItem&);
  NotificationItem() : id(), _from(), to(), fromChannel(), toChannel(), revision(0), createdTime(0) {
  }

  virtual ~NotificationItem() noexcept;
  std::string id;
  std::string _from;
  std::string to;
  std::string fromChannel;
  std::string toChannel;
  int64_t revision;
  int64_t createdTime;
  std::map<std::string, std::string>  content;

  _NotificationItem__isset __isset;

  void __set_id(const std::string& val);

  void __set__from(const std::string& val);

  void __set_to(const std::string& val);

  void __set_fromChannel(const std::string& val);

  void __set_toChannel(const std::string& val);

  void __set_revision(const int64_t val);

  void __set_createdTime(const int64_t val);

  void __set_content(const std::map<std::string, std::string> & val);

  bool operator == (const NotificationItem & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(_from == rhs._from))
      return false;
    if (!(to == rhs.to))
      return false;
    if (!(fromChannel == rhs.fromChannel))
      return false;
    if (!(toChannel == rhs.toChannel))
      return false;
    if (!(revision == rhs.revision))
      return false;
    if (!(createdTime == rhs.createdTime))
      return false;
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const NotificationItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NotificationItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(NotificationItem &a, NotificationItem &b);

std::ostream& operator<<(std::ostream& out, const NotificationItem& obj);

typedef struct _NotificationFetchResult__isset {
  _NotificationFetchResult__isset() : fetchMode(false), itemList(false) {}
  bool fetchMode :1;
  bool itemList :1;
} _NotificationFetchResult__isset;

class NotificationFetchResult : public virtual ::apache::thrift::TBase {
 public:

  NotificationFetchResult(const NotificationFetchResult&);
  NotificationFetchResult& operator=(const NotificationFetchResult&);
  NotificationFetchResult() : fetchMode((NotificationItemFetchMode::type)0) {
  }

  virtual ~NotificationFetchResult() noexcept;
  /**
   * 
   * @see NotificationItemFetchMode
   */
  NotificationItemFetchMode::type fetchMode;
  std::vector<NotificationItem>  itemList;

  _NotificationFetchResult__isset __isset;

  void __set_fetchMode(const NotificationItemFetchMode::type val);

  void __set_itemList(const std::vector<NotificationItem> & val);

  bool operator == (const NotificationFetchResult & rhs) const
  {
    if (!(fetchMode == rhs.fetchMode))
      return false;
    if (!(itemList == rhs.itemList))
      return false;
    return true;
  }
  bool operator != (const NotificationFetchResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NotificationFetchResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(NotificationFetchResult &a, NotificationFetchResult &b);

std::ostream& operator<<(std::ostream& out, const NotificationFetchResult& obj);

typedef struct _Operation__isset {
  _Operation__isset() : revision(false), createdTime(false), type(false), reqSeq(false), checksum(false), status(false), param1(false), param2(false), param3(false), message(false) {}
  bool revision :1;
  bool createdTime :1;
  bool type :1;
  bool reqSeq :1;
  bool checksum :1;
  bool status :1;
  bool param1 :1;
  bool param2 :1;
  bool param3 :1;
  bool message :1;
} _Operation__isset;

class Operation : public virtual ::apache::thrift::TBase {
 public:

  Operation(const Operation&);
  Operation& operator=(const Operation&);
  Operation() : revision(0), createdTime(0), type((OpType::type)0), reqSeq(0), checksum(), status((OpStatus::type)0), param1(), param2(), param3() {
  }

  virtual ~Operation() noexcept;
  int64_t revision;
  int64_t createdTime;
  /**
   * 
   * @see OpType
   */
  OpType::type type;
  int32_t reqSeq;
  std::string checksum;
  /**
   * 
   * @see OpStatus
   */
  OpStatus::type status;
  std::string param1;
  std::string param2;
  std::string param3;
  Message message;

  _Operation__isset __isset;

  void __set_revision(const int64_t val);

  void __set_createdTime(const int64_t val);

  void __set_type(const OpType::type val);

  void __set_reqSeq(const int32_t val);

  void __set_checksum(const std::string& val);

  void __set_status(const OpStatus::type val);

  void __set_param1(const std::string& val);

  void __set_param2(const std::string& val);

  void __set_param3(const std::string& val);

  void __set_message(const Message& val);

  bool operator == (const Operation & rhs) const
  {
    if (!(revision == rhs.revision))
      return false;
    if (!(createdTime == rhs.createdTime))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(checksum == rhs.checksum))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(param1 == rhs.param1))
      return false;
    if (!(param2 == rhs.param2))
      return false;
    if (!(param3 == rhs.param3))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const Operation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Operation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Operation &a, Operation &b);

std::ostream& operator<<(std::ostream& out, const Operation& obj);

typedef struct _PaymentReservation__isset {
  _PaymentReservation__isset() : receiverMid(false), productId(false), language(false), location(false), currency(false), price(false), appStoreCode(false), messageText(false), messageTemplate(false), packageId(false) {}
  bool receiverMid :1;
  bool productId :1;
  bool language :1;
  bool location :1;
  bool currency :1;
  bool price :1;
  bool appStoreCode :1;
  bool messageText :1;
  bool messageTemplate :1;
  bool packageId :1;
} _PaymentReservation__isset;

class PaymentReservation : public virtual ::apache::thrift::TBase {
 public:

  PaymentReservation(const PaymentReservation&);
  PaymentReservation& operator=(const PaymentReservation&);
  PaymentReservation() : receiverMid(), productId(), language(), location(), currency(), price(), appStoreCode((PaymentType::type)0), messageText(), messageTemplate(0), packageId(0) {
  }

  virtual ~PaymentReservation() noexcept;
  std::string receiverMid;
  std::string productId;
  std::string language;
  std::string location;
  std::string currency;
  std::string price;
  /**
   * 
   * @see PaymentType
   */
  PaymentType::type appStoreCode;
  std::string messageText;
  int32_t messageTemplate;
  int64_t packageId;

  _PaymentReservation__isset __isset;

  void __set_receiverMid(const std::string& val);

  void __set_productId(const std::string& val);

  void __set_language(const std::string& val);

  void __set_location(const std::string& val);

  void __set_currency(const std::string& val);

  void __set_price(const std::string& val);

  void __set_appStoreCode(const PaymentType::type val);

  void __set_messageText(const std::string& val);

  void __set_messageTemplate(const int32_t val);

  void __set_packageId(const int64_t val);

  bool operator == (const PaymentReservation & rhs) const
  {
    if (!(receiverMid == rhs.receiverMid))
      return false;
    if (!(productId == rhs.productId))
      return false;
    if (!(language == rhs.language))
      return false;
    if (!(location == rhs.location))
      return false;
    if (!(currency == rhs.currency))
      return false;
    if (!(price == rhs.price))
      return false;
    if (!(appStoreCode == rhs.appStoreCode))
      return false;
    if (!(messageText == rhs.messageText))
      return false;
    if (!(messageTemplate == rhs.messageTemplate))
      return false;
    if (!(packageId == rhs.packageId))
      return false;
    return true;
  }
  bool operator != (const PaymentReservation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PaymentReservation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PaymentReservation &a, PaymentReservation &b);

std::ostream& operator<<(std::ostream& out, const PaymentReservation& obj);

typedef struct _PaymentReservationResult__isset {
  _PaymentReservationResult__isset() : orderId(false), confirmUrl(false), extras(false) {}
  bool orderId :1;
  bool confirmUrl :1;
  bool extras :1;
} _PaymentReservationResult__isset;

class PaymentReservationResult : public virtual ::apache::thrift::TBase {
 public:

  PaymentReservationResult(const PaymentReservationResult&);
  PaymentReservationResult& operator=(const PaymentReservationResult&);
  PaymentReservationResult() : orderId(), confirmUrl() {
  }

  virtual ~PaymentReservationResult() noexcept;
  std::string orderId;
  std::string confirmUrl;
  std::map<std::string, std::string>  extras;

  _PaymentReservationResult__isset __isset;

  void __set_orderId(const std::string& val);

  void __set_confirmUrl(const std::string& val);

  void __set_extras(const std::map<std::string, std::string> & val);

  bool operator == (const PaymentReservationResult & rhs) const
  {
    if (!(orderId == rhs.orderId))
      return false;
    if (!(confirmUrl == rhs.confirmUrl))
      return false;
    if (!(extras == rhs.extras))
      return false;
    return true;
  }
  bool operator != (const PaymentReservationResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PaymentReservationResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PaymentReservationResult &a, PaymentReservationResult &b);

std::ostream& operator<<(std::ostream& out, const PaymentReservationResult& obj);

typedef struct _Product__isset {
  _Product__isset() : productId(false), packageId(false), version(false), authorName(false), onSale(false), validDays(false), saleType(false), copyright(false), title(false), descriptionText(false), shopOrderId(false), fromMid(false), toMid(false), validUntil(false), priceTier(false), price(false), currency(false), currencySymbol(false), paymentType(false), createDate(false), ownFlag(false), eventType(false), urlSchema(false), downloadUrl(false), buddyMid(false), publishSince(false), newFlag(false), missionFlag(false), categories(false), missionButtonText(false), missionShortDescription(false), authorId(false), grantedByDefault(false), displayOrder(false), availableForPresent(false), availableForMyself(false), hasAnimation(false), hasSound(false), recommendationsEnabled(false), stickerResourceType(false) {}
  bool productId :1;
  bool packageId :1;
  bool version :1;
  bool authorName :1;
  bool onSale :1;
  bool validDays :1;
  bool saleType :1;
  bool copyright :1;
  bool title :1;
  bool descriptionText :1;
  bool shopOrderId :1;
  bool fromMid :1;
  bool toMid :1;
  bool validUntil :1;
  bool priceTier :1;
  bool price :1;
  bool currency :1;
  bool currencySymbol :1;
  bool paymentType :1;
  bool createDate :1;
  bool ownFlag :1;
  bool eventType :1;
  bool urlSchema :1;
  bool downloadUrl :1;
  bool buddyMid :1;
  bool publishSince :1;
  bool newFlag :1;
  bool missionFlag :1;
  bool categories :1;
  bool missionButtonText :1;
  bool missionShortDescription :1;
  bool authorId :1;
  bool grantedByDefault :1;
  bool displayOrder :1;
  bool availableForPresent :1;
  bool availableForMyself :1;
  bool hasAnimation :1;
  bool hasSound :1;
  bool recommendationsEnabled :1;
  bool stickerResourceType :1;
} _Product__isset;

class Product : public virtual ::apache::thrift::TBase {
 public:

  Product(const Product&);
  Product& operator=(const Product&);
  Product() : productId(), packageId(0), version(0), authorName(), onSale(0), validDays(0), saleType(0), copyright(), title(), descriptionText(), shopOrderId(0), fromMid(), toMid(), validUntil(0), priceTier(0), price(), currency(), currencySymbol(), paymentType((PaymentType::type)0), createDate(0), ownFlag(0), eventType((ProductEventType::type)0), urlSchema(), downloadUrl(), buddyMid(), publishSince(0), newFlag(0), missionFlag(0), missionButtonText(), missionShortDescription(), authorId(), grantedByDefault(0), displayOrder(0), availableForPresent(0), availableForMyself(0), hasAnimation(0), hasSound(0), recommendationsEnabled(0), stickerResourceType((StickerResourceType::type)0) {
  }

  virtual ~Product() noexcept;
  std::string productId;
  int64_t packageId;
  int32_t version;
  std::string authorName;
  bool onSale;
  int32_t validDays;
  int32_t saleType;
  std::string copyright;
  std::string title;
  std::string descriptionText;
  int64_t shopOrderId;
  std::string fromMid;
  std::string toMid;
  int64_t validUntil;
  int32_t priceTier;
  std::string price;
  std::string currency;
  std::string currencySymbol;
  /**
   * 
   * @see PaymentType
   */
  PaymentType::type paymentType;
  int64_t createDate;
  bool ownFlag;
  /**
   * 
   * @see ProductEventType
   */
  ProductEventType::type eventType;
  std::string urlSchema;
  std::string downloadUrl;
  std::string buddyMid;
  int64_t publishSince;
  bool newFlag;
  bool missionFlag;
  std::vector<ProductCategory>  categories;
  std::string missionButtonText;
  std::string missionShortDescription;
  std::string authorId;
  bool grantedByDefault;
  int32_t displayOrder;
  bool availableForPresent;
  bool availableForMyself;
  bool hasAnimation;
  bool hasSound;
  bool recommendationsEnabled;
  /**
   * 
   * @see StickerResourceType
   */
  StickerResourceType::type stickerResourceType;

  _Product__isset __isset;

  void __set_productId(const std::string& val);

  void __set_packageId(const int64_t val);

  void __set_version(const int32_t val);

  void __set_authorName(const std::string& val);

  void __set_onSale(const bool val);

  void __set_validDays(const int32_t val);

  void __set_saleType(const int32_t val);

  void __set_copyright(const std::string& val);

  void __set_title(const std::string& val);

  void __set_descriptionText(const std::string& val);

  void __set_shopOrderId(const int64_t val);

  void __set_fromMid(const std::string& val);

  void __set_toMid(const std::string& val);

  void __set_validUntil(const int64_t val);

  void __set_priceTier(const int32_t val);

  void __set_price(const std::string& val);

  void __set_currency(const std::string& val);

  void __set_currencySymbol(const std::string& val);

  void __set_paymentType(const PaymentType::type val);

  void __set_createDate(const int64_t val);

  void __set_ownFlag(const bool val);

  void __set_eventType(const ProductEventType::type val);

  void __set_urlSchema(const std::string& val);

  void __set_downloadUrl(const std::string& val);

  void __set_buddyMid(const std::string& val);

  void __set_publishSince(const int64_t val);

  void __set_newFlag(const bool val);

  void __set_missionFlag(const bool val);

  void __set_categories(const std::vector<ProductCategory> & val);

  void __set_missionButtonText(const std::string& val);

  void __set_missionShortDescription(const std::string& val);

  void __set_authorId(const std::string& val);

  void __set_grantedByDefault(const bool val);

  void __set_displayOrder(const int32_t val);

  void __set_availableForPresent(const bool val);

  void __set_availableForMyself(const bool val);

  void __set_hasAnimation(const bool val);

  void __set_hasSound(const bool val);

  void __set_recommendationsEnabled(const bool val);

  void __set_stickerResourceType(const StickerResourceType::type val);

  bool operator == (const Product & rhs) const
  {
    if (!(productId == rhs.productId))
      return false;
    if (!(packageId == rhs.packageId))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(authorName == rhs.authorName))
      return false;
    if (!(onSale == rhs.onSale))
      return false;
    if (!(validDays == rhs.validDays))
      return false;
    if (!(saleType == rhs.saleType))
      return false;
    if (!(copyright == rhs.copyright))
      return false;
    if (!(title == rhs.title))
      return false;
    if (!(descriptionText == rhs.descriptionText))
      return false;
    if (!(shopOrderId == rhs.shopOrderId))
      return false;
    if (!(fromMid == rhs.fromMid))
      return false;
    if (!(toMid == rhs.toMid))
      return false;
    if (!(validUntil == rhs.validUntil))
      return false;
    if (!(priceTier == rhs.priceTier))
      return false;
    if (!(price == rhs.price))
      return false;
    if (!(currency == rhs.currency))
      return false;
    if (!(currencySymbol == rhs.currencySymbol))
      return false;
    if (!(paymentType == rhs.paymentType))
      return false;
    if (!(createDate == rhs.createDate))
      return false;
    if (!(ownFlag == rhs.ownFlag))
      return false;
    if (!(eventType == rhs.eventType))
      return false;
    if (!(urlSchema == rhs.urlSchema))
      return false;
    if (!(downloadUrl == rhs.downloadUrl))
      return false;
    if (!(buddyMid == rhs.buddyMid))
      return false;
    if (!(publishSince == rhs.publishSince))
      return false;
    if (!(newFlag == rhs.newFlag))
      return false;
    if (!(missionFlag == rhs.missionFlag))
      return false;
    if (!(categories == rhs.categories))
      return false;
    if (!(missionButtonText == rhs.missionButtonText))
      return false;
    if (!(missionShortDescription == rhs.missionShortDescription))
      return false;
    if (!(authorId == rhs.authorId))
      return false;
    if (!(grantedByDefault == rhs.grantedByDefault))
      return false;
    if (!(displayOrder == rhs.displayOrder))
      return false;
    if (!(availableForPresent == rhs.availableForPresent))
      return false;
    if (!(availableForMyself == rhs.availableForMyself))
      return false;
    if (!(hasAnimation == rhs.hasAnimation))
      return false;
    if (!(hasSound == rhs.hasSound))
      return false;
    if (!(recommendationsEnabled == rhs.recommendationsEnabled))
      return false;
    if (!(stickerResourceType == rhs.stickerResourceType))
      return false;
    return true;
  }
  bool operator != (const Product &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Product & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Product &a, Product &b);

std::ostream& operator<<(std::ostream& out, const Product& obj);

typedef struct _ProductList__isset {
  _ProductList__isset() : hasNext(false), bannerSequence(false), bannerTargetType(false), bannerTargetPath(false), productList(false), bannerLang(false) {}
  bool hasNext :1;
  bool bannerSequence :1;
  bool bannerTargetType :1;
  bool bannerTargetPath :1;
  bool productList :1;
  bool bannerLang :1;
} _ProductList__isset;

class ProductList : public virtual ::apache::thrift::TBase {
 public:

  ProductList(const ProductList&);
  ProductList& operator=(const ProductList&);
  ProductList() : hasNext(0), bannerSequence(0), bannerTargetType((ProductBannerLinkType::type)0), bannerTargetPath(), bannerLang() {
  }

  virtual ~ProductList() noexcept;
  bool hasNext;
  int64_t bannerSequence;
  /**
   * 
   * @see ProductBannerLinkType
   */
  ProductBannerLinkType::type bannerTargetType;
  std::string bannerTargetPath;
  std::vector<Product>  productList;
  std::string bannerLang;

  _ProductList__isset __isset;

  void __set_hasNext(const bool val);

  void __set_bannerSequence(const int64_t val);

  void __set_bannerTargetType(const ProductBannerLinkType::type val);

  void __set_bannerTargetPath(const std::string& val);

  void __set_productList(const std::vector<Product> & val);

  void __set_bannerLang(const std::string& val);

  bool operator == (const ProductList & rhs) const
  {
    if (!(hasNext == rhs.hasNext))
      return false;
    if (!(bannerSequence == rhs.bannerSequence))
      return false;
    if (!(bannerTargetType == rhs.bannerTargetType))
      return false;
    if (!(bannerTargetPath == rhs.bannerTargetPath))
      return false;
    if (!(productList == rhs.productList))
      return false;
    if (!(bannerLang == rhs.bannerLang))
      return false;
    return true;
  }
  bool operator != (const ProductList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProductList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ProductList &a, ProductList &b);

std::ostream& operator<<(std::ostream& out, const ProductList& obj);

typedef struct _StickerIdRange__isset {
  _StickerIdRange__isset() : start(false), size(false) {}
  bool start :1;
  bool size :1;
} _StickerIdRange__isset;

class StickerIdRange : public virtual ::apache::thrift::TBase {
 public:

  StickerIdRange(const StickerIdRange&);
  StickerIdRange& operator=(const StickerIdRange&);
  StickerIdRange() : start(0), size(0) {
  }

  virtual ~StickerIdRange() noexcept;
  int64_t start;
  int32_t size;

  _StickerIdRange__isset __isset;

  void __set_start(const int64_t val);

  void __set_size(const int32_t val);

  bool operator == (const StickerIdRange & rhs) const
  {
    if (!(start == rhs.start))
      return false;
    if (!(size == rhs.size))
      return false;
    return true;
  }
  bool operator != (const StickerIdRange &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StickerIdRange & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(StickerIdRange &a, StickerIdRange &b);

std::ostream& operator<<(std::ostream& out, const StickerIdRange& obj);

typedef struct _ProductSimple__isset {
  _ProductSimple__isset() : productId(false), packageId(false), version(false), onSale(false), validUntil(false), stickerIdRanges(false), grantedByDefault(false), displayOrder(false) {}
  bool productId :1;
  bool packageId :1;
  bool version :1;
  bool onSale :1;
  bool validUntil :1;
  bool stickerIdRanges :1;
  bool grantedByDefault :1;
  bool displayOrder :1;
} _ProductSimple__isset;

class ProductSimple : public virtual ::apache::thrift::TBase {
 public:

  ProductSimple(const ProductSimple&);
  ProductSimple& operator=(const ProductSimple&);
  ProductSimple() : productId(), packageId(0), version(0), onSale(0), validUntil(0), grantedByDefault(0), displayOrder(0) {
  }

  virtual ~ProductSimple() noexcept;
  std::string productId;
  int64_t packageId;
  int32_t version;
  bool onSale;
  int64_t validUntil;
  std::vector<StickerIdRange>  stickerIdRanges;
  bool grantedByDefault;
  int32_t displayOrder;

  _ProductSimple__isset __isset;

  void __set_productId(const std::string& val);

  void __set_packageId(const int64_t val);

  void __set_version(const int32_t val);

  void __set_onSale(const bool val);

  void __set_validUntil(const int64_t val);

  void __set_stickerIdRanges(const std::vector<StickerIdRange> & val);

  void __set_grantedByDefault(const bool val);

  void __set_displayOrder(const int32_t val);

  bool operator == (const ProductSimple & rhs) const
  {
    if (!(productId == rhs.productId))
      return false;
    if (!(packageId == rhs.packageId))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(onSale == rhs.onSale))
      return false;
    if (!(validUntil == rhs.validUntil))
      return false;
    if (!(stickerIdRanges == rhs.stickerIdRanges))
      return false;
    if (!(grantedByDefault == rhs.grantedByDefault))
      return false;
    if (!(displayOrder == rhs.displayOrder))
      return false;
    return true;
  }
  bool operator != (const ProductSimple &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProductSimple & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ProductSimple &a, ProductSimple &b);

std::ostream& operator<<(std::ostream& out, const ProductSimple& obj);

typedef struct _ProductSimpleList__isset {
  _ProductSimpleList__isset() : hasNext(false), reinvokeHour(false), lastVersionSeq(false), productList(false), recentNewReleaseDate(false), recentEventReleaseDate(false) {}
  bool hasNext :1;
  bool reinvokeHour :1;
  bool lastVersionSeq :1;
  bool productList :1;
  bool recentNewReleaseDate :1;
  bool recentEventReleaseDate :1;
} _ProductSimpleList__isset;

class ProductSimpleList : public virtual ::apache::thrift::TBase {
 public:

  ProductSimpleList(const ProductSimpleList&);
  ProductSimpleList& operator=(const ProductSimpleList&);
  ProductSimpleList() : hasNext(0), reinvokeHour(0), lastVersionSeq(0), recentNewReleaseDate(0), recentEventReleaseDate(0) {
  }

  virtual ~ProductSimpleList() noexcept;
  bool hasNext;
  int32_t reinvokeHour;
  int64_t lastVersionSeq;
  std::vector<ProductSimple>  productList;
  int64_t recentNewReleaseDate;
  int64_t recentEventReleaseDate;

  _ProductSimpleList__isset __isset;

  void __set_hasNext(const bool val);

  void __set_reinvokeHour(const int32_t val);

  void __set_lastVersionSeq(const int64_t val);

  void __set_productList(const std::vector<ProductSimple> & val);

  void __set_recentNewReleaseDate(const int64_t val);

  void __set_recentEventReleaseDate(const int64_t val);

  bool operator == (const ProductSimpleList & rhs) const
  {
    if (!(hasNext == rhs.hasNext))
      return false;
    if (!(reinvokeHour == rhs.reinvokeHour))
      return false;
    if (!(lastVersionSeq == rhs.lastVersionSeq))
      return false;
    if (!(productList == rhs.productList))
      return false;
    if (!(recentNewReleaseDate == rhs.recentNewReleaseDate))
      return false;
    if (!(recentEventReleaseDate == rhs.recentEventReleaseDate))
      return false;
    return true;
  }
  bool operator != (const ProductSimpleList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProductSimpleList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ProductSimpleList &a, ProductSimpleList &b);

std::ostream& operator<<(std::ostream& out, const ProductSimpleList& obj);

typedef struct _Profile__isset {
  _Profile__isset() : mid(false), userid(false), phone(false), email(false), regionCode(false), displayName(false), phoneticName(false), pictureStatus(false), thumbnailUrl(false), statusMessage(false), allowSearchByUserid(false), allowSearchByEmail(false), picturePath(false), musicProfile(false), videoProfile(false) {}
  bool mid :1;
  bool userid :1;
  bool phone :1;
  bool email :1;
  bool regionCode :1;
  bool displayName :1;
  bool phoneticName :1;
  bool pictureStatus :1;
  bool thumbnailUrl :1;
  bool statusMessage :1;
  bool allowSearchByUserid :1;
  bool allowSearchByEmail :1;
  bool picturePath :1;
  bool musicProfile :1;
  bool videoProfile :1;
} _Profile__isset;

class Profile : public virtual ::apache::thrift::TBase {
 public:

  Profile(const Profile&);
  Profile& operator=(const Profile&);
  Profile() : mid(), userid(), phone(), email(), regionCode(), displayName(), phoneticName(), pictureStatus(), thumbnailUrl(), statusMessage(), allowSearchByUserid(0), allowSearchByEmail(0), picturePath(), musicProfile(), videoProfile() {
  }

  virtual ~Profile() noexcept;
  std::string mid;
  std::string userid;
  std::string phone;
  std::string email;
  std::string regionCode;
  std::string displayName;
  std::string phoneticName;
  std::string pictureStatus;
  std::string thumbnailUrl;
  std::string statusMessage;
  bool allowSearchByUserid;
  bool allowSearchByEmail;
  std::string picturePath;
  std::string musicProfile;
  std::string videoProfile;

  _Profile__isset __isset;

  void __set_mid(const std::string& val);

  void __set_userid(const std::string& val);

  void __set_phone(const std::string& val);

  void __set_email(const std::string& val);

  void __set_regionCode(const std::string& val);

  void __set_displayName(const std::string& val);

  void __set_phoneticName(const std::string& val);

  void __set_pictureStatus(const std::string& val);

  void __set_thumbnailUrl(const std::string& val);

  void __set_statusMessage(const std::string& val);

  void __set_allowSearchByUserid(const bool val);

  void __set_allowSearchByEmail(const bool val);

  void __set_picturePath(const std::string& val);

  void __set_musicProfile(const std::string& val);

  void __set_videoProfile(const std::string& val);

  bool operator == (const Profile & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    if (!(userid == rhs.userid))
      return false;
    if (!(phone == rhs.phone))
      return false;
    if (!(email == rhs.email))
      return false;
    if (!(regionCode == rhs.regionCode))
      return false;
    if (!(displayName == rhs.displayName))
      return false;
    if (!(phoneticName == rhs.phoneticName))
      return false;
    if (!(pictureStatus == rhs.pictureStatus))
      return false;
    if (!(thumbnailUrl == rhs.thumbnailUrl))
      return false;
    if (!(statusMessage == rhs.statusMessage))
      return false;
    if (!(allowSearchByUserid == rhs.allowSearchByUserid))
      return false;
    if (!(allowSearchByEmail == rhs.allowSearchByEmail))
      return false;
    if (!(picturePath == rhs.picturePath))
      return false;
    if (!(musicProfile == rhs.musicProfile))
      return false;
    if (!(videoProfile == rhs.videoProfile))
      return false;
    return true;
  }
  bool operator != (const Profile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Profile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Profile &a, Profile &b);

std::ostream& operator<<(std::ostream& out, const Profile& obj);

typedef struct _ProximityMatchCandidateResult__isset {
  _ProximityMatchCandidateResult__isset() : users(false), buddies(false) {}
  bool users :1;
  bool buddies :1;
} _ProximityMatchCandidateResult__isset;

class ProximityMatchCandidateResult : public virtual ::apache::thrift::TBase {
 public:

  ProximityMatchCandidateResult(const ProximityMatchCandidateResult&);
  ProximityMatchCandidateResult& operator=(const ProximityMatchCandidateResult&);
  ProximityMatchCandidateResult() {
  }

  virtual ~ProximityMatchCandidateResult() noexcept;
  std::vector<Contact>  users;
  std::vector<Contact>  buddies;

  _ProximityMatchCandidateResult__isset __isset;

  void __set_users(const std::vector<Contact> & val);

  void __set_buddies(const std::vector<Contact> & val);

  bool operator == (const ProximityMatchCandidateResult & rhs) const
  {
    if (!(users == rhs.users))
      return false;
    if (!(buddies == rhs.buddies))
      return false;
    return true;
  }
  bool operator != (const ProximityMatchCandidateResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProximityMatchCandidateResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ProximityMatchCandidateResult &a, ProximityMatchCandidateResult &b);

std::ostream& operator<<(std::ostream& out, const ProximityMatchCandidateResult& obj);

typedef struct _RegisterWithSnsIdResult__isset {
  _RegisterWithSnsIdResult__isset() : authToken(false), userCreated(false) {}
  bool authToken :1;
  bool userCreated :1;
} _RegisterWithSnsIdResult__isset;

class RegisterWithSnsIdResult : public virtual ::apache::thrift::TBase {
 public:

  RegisterWithSnsIdResult(const RegisterWithSnsIdResult&);
  RegisterWithSnsIdResult& operator=(const RegisterWithSnsIdResult&);
  RegisterWithSnsIdResult() : authToken(), userCreated(0) {
  }

  virtual ~RegisterWithSnsIdResult() noexcept;
  std::string authToken;
  bool userCreated;

  _RegisterWithSnsIdResult__isset __isset;

  void __set_authToken(const std::string& val);

  void __set_userCreated(const bool val);

  bool operator == (const RegisterWithSnsIdResult & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(userCreated == rhs.userCreated))
      return false;
    return true;
  }
  bool operator != (const RegisterWithSnsIdResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegisterWithSnsIdResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RegisterWithSnsIdResult &a, RegisterWithSnsIdResult &b);

std::ostream& operator<<(std::ostream& out, const RegisterWithSnsIdResult& obj);

typedef struct _RequestTokenResponse__isset {
  _RequestTokenResponse__isset() : requestToken(false), returnUrl(false) {}
  bool requestToken :1;
  bool returnUrl :1;
} _RequestTokenResponse__isset;

class RequestTokenResponse : public virtual ::apache::thrift::TBase {
 public:

  RequestTokenResponse(const RequestTokenResponse&);
  RequestTokenResponse& operator=(const RequestTokenResponse&);
  RequestTokenResponse() : requestToken(), returnUrl() {
  }

  virtual ~RequestTokenResponse() noexcept;
  std::string requestToken;
  std::string returnUrl;

  _RequestTokenResponse__isset __isset;

  void __set_requestToken(const std::string& val);

  void __set_returnUrl(const std::string& val);

  bool operator == (const RequestTokenResponse & rhs) const
  {
    if (!(requestToken == rhs.requestToken))
      return false;
    if (!(returnUrl == rhs.returnUrl))
      return false;
    return true;
  }
  bool operator != (const RequestTokenResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestTokenResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RequestTokenResponse &a, RequestTokenResponse &b);

std::ostream& operator<<(std::ostream& out, const RequestTokenResponse& obj);

typedef struct _Room__isset {
  _Room__isset() : mid(false), createdTime(false), contacts(false), notificationDisabled(false), memberMids(false) {}
  bool mid :1;
  bool createdTime :1;
  bool contacts :1;
  bool notificationDisabled :1;
  bool memberMids :1;
} _Room__isset;

class Room : public virtual ::apache::thrift::TBase {
 public:

  Room(const Room&);
  Room& operator=(const Room&);
  Room() : mid(), createdTime(0), notificationDisabled(0) {
  }

  virtual ~Room() noexcept;
  std::string mid;
  int64_t createdTime;
  std::vector<Contact>  contacts;
  bool notificationDisabled;
  std::vector<std::string>  memberMids;

  _Room__isset __isset;

  void __set_mid(const std::string& val);

  void __set_createdTime(const int64_t val);

  void __set_contacts(const std::vector<Contact> & val);

  void __set_notificationDisabled(const bool val);

  void __set_memberMids(const std::vector<std::string> & val);

  bool operator == (const Room & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    if (!(createdTime == rhs.createdTime))
      return false;
    if (!(contacts == rhs.contacts))
      return false;
    if (!(notificationDisabled == rhs.notificationDisabled))
      return false;
    if (!(memberMids == rhs.memberMids))
      return false;
    return true;
  }
  bool operator != (const Room &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Room & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Room &a, Room &b);

std::ostream& operator<<(std::ostream& out, const Room& obj);

typedef struct _SuggestDictionary__isset {
  _SuggestDictionary__isset() : language(false), name(false) {}
  bool language :1;
  bool name :1;
} _SuggestDictionary__isset;

class SuggestDictionary : public virtual ::apache::thrift::TBase {
 public:

  SuggestDictionary(const SuggestDictionary&);
  SuggestDictionary& operator=(const SuggestDictionary&);
  SuggestDictionary() : language(), name() {
  }

  virtual ~SuggestDictionary() noexcept;
  std::string language;
  std::string name;

  _SuggestDictionary__isset __isset;

  void __set_language(const std::string& val);

  void __set_name(const std::string& val);

  bool operator == (const SuggestDictionary & rhs) const
  {
    if (!(language == rhs.language))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const SuggestDictionary &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuggestDictionary & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SuggestDictionary &a, SuggestDictionary &b);

std::ostream& operator<<(std::ostream& out, const SuggestDictionary& obj);

typedef struct _SuggestItemDictionaryIncrement__isset {
  _SuggestItemDictionaryIncrement__isset() : status(false), revision(false), scheme(false), data(false) {}
  bool status :1;
  bool revision :1;
  bool scheme :1;
  bool data :1;
} _SuggestItemDictionaryIncrement__isset;

class SuggestItemDictionaryIncrement : public virtual ::apache::thrift::TBase {
 public:

  SuggestItemDictionaryIncrement(const SuggestItemDictionaryIncrement&);
  SuggestItemDictionaryIncrement& operator=(const SuggestItemDictionaryIncrement&);
  SuggestItemDictionaryIncrement() : status((SuggestDictionaryIncrementStatus::type)0), revision(0), scheme(), data() {
  }

  virtual ~SuggestItemDictionaryIncrement() noexcept;
  SuggestDictionaryIncrementStatus status;
  int64_t revision;
  std::string scheme;
  std::string data;

  _SuggestItemDictionaryIncrement__isset __isset;

  void __set_status(const SuggestDictionaryIncrementStatus val);

  void __set_revision(const int64_t val);

  void __set_scheme(const std::string& val);

  void __set_data(const std::string& val);

  bool operator == (const SuggestItemDictionaryIncrement & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(revision == rhs.revision))
      return false;
    if (!(scheme == rhs.scheme))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const SuggestItemDictionaryIncrement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuggestItemDictionaryIncrement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SuggestItemDictionaryIncrement &a, SuggestItemDictionaryIncrement &b);

std::ostream& operator<<(std::ostream& out, const SuggestItemDictionaryIncrement& obj);

typedef struct _SuggestTagDictionaryIncrement__isset {
  _SuggestTagDictionaryIncrement__isset() : status(false), language(false), revision(false), scheme(false), data(false) {}
  bool status :1;
  bool language :1;
  bool revision :1;
  bool scheme :1;
  bool data :1;
} _SuggestTagDictionaryIncrement__isset;

class SuggestTagDictionaryIncrement : public virtual ::apache::thrift::TBase {
 public:

  SuggestTagDictionaryIncrement(const SuggestTagDictionaryIncrement&);
  SuggestTagDictionaryIncrement& operator=(const SuggestTagDictionaryIncrement&);
  SuggestTagDictionaryIncrement() : status((SuggestDictionaryIncrementStatus::type)0), language(), revision(0), scheme(), data() {
  }

  virtual ~SuggestTagDictionaryIncrement() noexcept;
  SuggestDictionaryIncrementStatus status;
  std::string language;
  int64_t revision;
  std::string scheme;
  std::string data;

  _SuggestTagDictionaryIncrement__isset __isset;

  void __set_status(const SuggestDictionaryIncrementStatus val);

  void __set_language(const std::string& val);

  void __set_revision(const int64_t val);

  void __set_scheme(const std::string& val);

  void __set_data(const std::string& val);

  bool operator == (const SuggestTagDictionaryIncrement & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(language == rhs.language))
      return false;
    if (!(revision == rhs.revision))
      return false;
    if (!(scheme == rhs.scheme))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const SuggestTagDictionaryIncrement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuggestTagDictionaryIncrement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SuggestTagDictionaryIncrement &a, SuggestTagDictionaryIncrement &b);

std::ostream& operator<<(std::ostream& out, const SuggestTagDictionaryIncrement& obj);

typedef struct _SuggestDictionaryIncrements__isset {
  _SuggestDictionaryIncrements__isset() : itemIncrement(false), tagIncrements(false) {}
  bool itemIncrement :1;
  bool tagIncrements :1;
} _SuggestDictionaryIncrements__isset;

class SuggestDictionaryIncrements : public virtual ::apache::thrift::TBase {
 public:

  SuggestDictionaryIncrements(const SuggestDictionaryIncrements&);
  SuggestDictionaryIncrements& operator=(const SuggestDictionaryIncrements&);
  SuggestDictionaryIncrements() {
  }

  virtual ~SuggestDictionaryIncrements() noexcept;
  SuggestItemDictionaryIncrement itemIncrement;
  std::vector<SuggestTagDictionaryIncrement>  tagIncrements;

  _SuggestDictionaryIncrements__isset __isset;

  void __set_itemIncrement(const SuggestItemDictionaryIncrement& val);

  void __set_tagIncrements(const std::vector<SuggestTagDictionaryIncrement> & val);

  bool operator == (const SuggestDictionaryIncrements & rhs) const
  {
    if (!(itemIncrement == rhs.itemIncrement))
      return false;
    if (!(tagIncrements == rhs.tagIncrements))
      return false;
    return true;
  }
  bool operator != (const SuggestDictionaryIncrements &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuggestDictionaryIncrements & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SuggestDictionaryIncrements &a, SuggestDictionaryIncrements &b);

std::ostream& operator<<(std::ostream& out, const SuggestDictionaryIncrements& obj);

typedef struct _SuggestItemDictionaryRevision__isset {
  _SuggestItemDictionaryRevision__isset() : revision(false), scheme(false) {}
  bool revision :1;
  bool scheme :1;
} _SuggestItemDictionaryRevision__isset;

class SuggestItemDictionaryRevision : public virtual ::apache::thrift::TBase {
 public:

  SuggestItemDictionaryRevision(const SuggestItemDictionaryRevision&);
  SuggestItemDictionaryRevision& operator=(const SuggestItemDictionaryRevision&);
  SuggestItemDictionaryRevision() : revision(0), scheme() {
  }

  virtual ~SuggestItemDictionaryRevision() noexcept;
  int64_t revision;
  std::string scheme;

  _SuggestItemDictionaryRevision__isset __isset;

  void __set_revision(const int64_t val);

  void __set_scheme(const std::string& val);

  bool operator == (const SuggestItemDictionaryRevision & rhs) const
  {
    if (!(revision == rhs.revision))
      return false;
    if (!(scheme == rhs.scheme))
      return false;
    return true;
  }
  bool operator != (const SuggestItemDictionaryRevision &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuggestItemDictionaryRevision & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SuggestItemDictionaryRevision &a, SuggestItemDictionaryRevision &b);

std::ostream& operator<<(std::ostream& out, const SuggestItemDictionaryRevision& obj);

typedef struct _SuggestTagDictionaryRevision__isset {
  _SuggestTagDictionaryRevision__isset() : language(false), revision(false), scheme(false) {}
  bool language :1;
  bool revision :1;
  bool scheme :1;
} _SuggestTagDictionaryRevision__isset;

class SuggestTagDictionaryRevision : public virtual ::apache::thrift::TBase {
 public:

  SuggestTagDictionaryRevision(const SuggestTagDictionaryRevision&);
  SuggestTagDictionaryRevision& operator=(const SuggestTagDictionaryRevision&);
  SuggestTagDictionaryRevision() : language(), revision(0), scheme() {
  }

  virtual ~SuggestTagDictionaryRevision() noexcept;
  std::string language;
  int64_t revision;
  std::string scheme;

  _SuggestTagDictionaryRevision__isset __isset;

  void __set_language(const std::string& val);

  void __set_revision(const int64_t val);

  void __set_scheme(const std::string& val);

  bool operator == (const SuggestTagDictionaryRevision & rhs) const
  {
    if (!(language == rhs.language))
      return false;
    if (!(revision == rhs.revision))
      return false;
    if (!(scheme == rhs.scheme))
      return false;
    return true;
  }
  bool operator != (const SuggestTagDictionaryRevision &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuggestTagDictionaryRevision & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SuggestTagDictionaryRevision &a, SuggestTagDictionaryRevision &b);

std::ostream& operator<<(std::ostream& out, const SuggestTagDictionaryRevision& obj);

typedef struct _SuggestDictionaryRevisions__isset {
  _SuggestDictionaryRevisions__isset() : itemRevision(false), tagRevisions(false) {}
  bool itemRevision :1;
  bool tagRevisions :1;
} _SuggestDictionaryRevisions__isset;

class SuggestDictionaryRevisions : public virtual ::apache::thrift::TBase {
 public:

  SuggestDictionaryRevisions(const SuggestDictionaryRevisions&);
  SuggestDictionaryRevisions& operator=(const SuggestDictionaryRevisions&);
  SuggestDictionaryRevisions() {
  }

  virtual ~SuggestDictionaryRevisions() noexcept;
  SuggestItemDictionaryRevision itemRevision;
  std::vector<SuggestTagDictionaryRevision>  tagRevisions;

  _SuggestDictionaryRevisions__isset __isset;

  void __set_itemRevision(const SuggestItemDictionaryRevision& val);

  void __set_tagRevisions(const std::vector<SuggestTagDictionaryRevision> & val);

  bool operator == (const SuggestDictionaryRevisions & rhs) const
  {
    if (!(itemRevision == rhs.itemRevision))
      return false;
    if (!(tagRevisions == rhs.tagRevisions))
      return false;
    return true;
  }
  bool operator != (const SuggestDictionaryRevisions &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuggestDictionaryRevisions & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SuggestDictionaryRevisions &a, SuggestDictionaryRevisions &b);

std::ostream& operator<<(std::ostream& out, const SuggestDictionaryRevisions& obj);

typedef struct _SuggestDictionarySettings__isset {
  _SuggestDictionarySettings__isset() : revision(false), newRevision(false), dictionaries(false), preloadedDictionaries(false) {}
  bool revision :1;
  bool newRevision :1;
  bool dictionaries :1;
  bool preloadedDictionaries :1;
} _SuggestDictionarySettings__isset;

class SuggestDictionarySettings : public virtual ::apache::thrift::TBase {
 public:

  SuggestDictionarySettings(const SuggestDictionarySettings&);
  SuggestDictionarySettings& operator=(const SuggestDictionarySettings&);
  SuggestDictionarySettings() : revision(0), newRevision(0) {
  }

  virtual ~SuggestDictionarySettings() noexcept;
  int64_t revision;
  int64_t newRevision;
  std::vector<SuggestDictionary>  dictionaries;
  std::vector<std::string>  preloadedDictionaries;

  _SuggestDictionarySettings__isset __isset;

  void __set_revision(const int64_t val);

  void __set_newRevision(const int64_t val);

  void __set_dictionaries(const std::vector<SuggestDictionary> & val);

  void __set_preloadedDictionaries(const std::vector<std::string> & val);

  bool operator == (const SuggestDictionarySettings & rhs) const
  {
    if (!(revision == rhs.revision))
      return false;
    if (!(newRevision == rhs.newRevision))
      return false;
    if (!(dictionaries == rhs.dictionaries))
      return false;
    if (!(preloadedDictionaries == rhs.preloadedDictionaries))
      return false;
    return true;
  }
  bool operator != (const SuggestDictionarySettings &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SuggestDictionarySettings & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SuggestDictionarySettings &a, SuggestDictionarySettings &b);

std::ostream& operator<<(std::ostream& out, const SuggestDictionarySettings& obj);

typedef struct _PhoneInfoForChannel__isset {
  _PhoneInfoForChannel__isset() : mid(false), normalizedPhoneNumber(false), allowedToSearchByPhoneNumber(false), allowedToReceiveMessageFromNonFriend(false), region(false) {}
  bool mid :1;
  bool normalizedPhoneNumber :1;
  bool allowedToSearchByPhoneNumber :1;
  bool allowedToReceiveMessageFromNonFriend :1;
  bool region :1;
} _PhoneInfoForChannel__isset;

class PhoneInfoForChannel : public virtual ::apache::thrift::TBase {
 public:

  PhoneInfoForChannel(const PhoneInfoForChannel&);
  PhoneInfoForChannel& operator=(const PhoneInfoForChannel&);
  PhoneInfoForChannel() : mid(), normalizedPhoneNumber(), allowedToSearchByPhoneNumber(0), allowedToReceiveMessageFromNonFriend(0), region() {
  }

  virtual ~PhoneInfoForChannel() noexcept;
  std::string mid;
  std::string normalizedPhoneNumber;
  bool allowedToSearchByPhoneNumber;
  bool allowedToReceiveMessageFromNonFriend;
  std::string region;

  _PhoneInfoForChannel__isset __isset;

  void __set_mid(const std::string& val);

  void __set_normalizedPhoneNumber(const std::string& val);

  void __set_allowedToSearchByPhoneNumber(const bool val);

  void __set_allowedToReceiveMessageFromNonFriend(const bool val);

  void __set_region(const std::string& val);

  bool operator == (const PhoneInfoForChannel & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    if (!(normalizedPhoneNumber == rhs.normalizedPhoneNumber))
      return false;
    if (!(allowedToSearchByPhoneNumber == rhs.allowedToSearchByPhoneNumber))
      return false;
    if (!(allowedToReceiveMessageFromNonFriend == rhs.allowedToReceiveMessageFromNonFriend))
      return false;
    if (!(region == rhs.region))
      return false;
    return true;
  }
  bool operator != (const PhoneInfoForChannel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PhoneInfoForChannel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PhoneInfoForChannel &a, PhoneInfoForChannel &b);

std::ostream& operator<<(std::ostream& out, const PhoneInfoForChannel& obj);

typedef struct _PhoneVerificationResult__isset {
  _PhoneVerificationResult__isset() : verificationResult(false), accountMigrationCheckType(false), recommendAddFriends(false) {}
  bool verificationResult :1;
  bool accountMigrationCheckType :1;
  bool recommendAddFriends :1;
} _PhoneVerificationResult__isset;

class PhoneVerificationResult : public virtual ::apache::thrift::TBase {
 public:

  PhoneVerificationResult(const PhoneVerificationResult&);
  PhoneVerificationResult& operator=(const PhoneVerificationResult&);
  PhoneVerificationResult() : verificationResult((VerificationResult::type)0), accountMigrationCheckType((AccountMigrationCheckType::type)0), recommendAddFriends(0) {
  }

  virtual ~PhoneVerificationResult() noexcept;
  /**
   * 
   * @see VerificationResult
   */
  VerificationResult::type verificationResult;
  /**
   * 
   * @see AccountMigrationCheckType
   */
  AccountMigrationCheckType::type accountMigrationCheckType;
  bool recommendAddFriends;

  _PhoneVerificationResult__isset __isset;

  void __set_verificationResult(const VerificationResult::type val);

  void __set_accountMigrationCheckType(const AccountMigrationCheckType::type val);

  void __set_recommendAddFriends(const bool val);

  bool operator == (const PhoneVerificationResult & rhs) const
  {
    if (!(verificationResult == rhs.verificationResult))
      return false;
    if (!(accountMigrationCheckType == rhs.accountMigrationCheckType))
      return false;
    if (!(recommendAddFriends == rhs.recommendAddFriends))
      return false;
    return true;
  }
  bool operator != (const PhoneVerificationResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PhoneVerificationResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PhoneVerificationResult &a, PhoneVerificationResult &b);

std::ostream& operator<<(std::ostream& out, const PhoneVerificationResult& obj);

typedef struct _PlaceSearchInfo__isset {
  _PlaceSearchInfo__isset() : name(false), address(false), latitude(false), longitude(false) {}
  bool name :1;
  bool address :1;
  bool latitude :1;
  bool longitude :1;
} _PlaceSearchInfo__isset;

class PlaceSearchInfo : public virtual ::apache::thrift::TBase {
 public:

  PlaceSearchInfo(const PlaceSearchInfo&);
  PlaceSearchInfo& operator=(const PlaceSearchInfo&);
  PlaceSearchInfo() : name(), address(), latitude(0), longitude(0) {
  }

  virtual ~PlaceSearchInfo() noexcept;
  std::string name;
  std::string address;
  double latitude;
  double longitude;

  _PlaceSearchInfo__isset __isset;

  void __set_name(const std::string& val);

  void __set_address(const std::string& val);

  void __set_latitude(const double val);

  void __set_longitude(const double val);

  bool operator == (const PlaceSearchInfo & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(address == rhs.address))
      return false;
    if (!(latitude == rhs.latitude))
      return false;
    if (!(longitude == rhs.longitude))
      return false;
    return true;
  }
  bool operator != (const PlaceSearchInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlaceSearchInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PlaceSearchInfo &a, PlaceSearchInfo &b);

std::ostream& operator<<(std::ostream& out, const PlaceSearchInfo& obj);

typedef struct _RSAKey__isset {
  _RSAKey__isset() : keynm(false), nvalue(false), evalue(false), sessionKey(false) {}
  bool keynm :1;
  bool nvalue :1;
  bool evalue :1;
  bool sessionKey :1;
} _RSAKey__isset;

class RSAKey : public virtual ::apache::thrift::TBase {
 public:

  RSAKey(const RSAKey&);
  RSAKey& operator=(const RSAKey&);
  RSAKey() : keynm(), nvalue(), evalue(), sessionKey() {
  }

  virtual ~RSAKey() noexcept;
  std::string keynm;
  std::string nvalue;
  std::string evalue;
  std::string sessionKey;

  _RSAKey__isset __isset;

  void __set_keynm(const std::string& val);

  void __set_nvalue(const std::string& val);

  void __set_evalue(const std::string& val);

  void __set_sessionKey(const std::string& val);

  bool operator == (const RSAKey & rhs) const
  {
    if (!(keynm == rhs.keynm))
      return false;
    if (!(nvalue == rhs.nvalue))
      return false;
    if (!(evalue == rhs.evalue))
      return false;
    if (!(sessionKey == rhs.sessionKey))
      return false;
    return true;
  }
  bool operator != (const RSAKey &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RSAKey & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RSAKey &a, RSAKey &b);

std::ostream& operator<<(std::ostream& out, const RSAKey& obj);

typedef struct _SecurityCenterResult__isset {
  _SecurityCenterResult__isset() : uri(false), token(false), cookiePath(false), skip(false) {}
  bool uri :1;
  bool token :1;
  bool cookiePath :1;
  bool skip :1;
} _SecurityCenterResult__isset;

class SecurityCenterResult : public virtual ::apache::thrift::TBase {
 public:

  SecurityCenterResult(const SecurityCenterResult&);
  SecurityCenterResult& operator=(const SecurityCenterResult&);
  SecurityCenterResult() : uri(), token(), cookiePath(), skip(0) {
  }

  virtual ~SecurityCenterResult() noexcept;
  std::string uri;
  std::string token;
  std::string cookiePath;
  bool skip;

  _SecurityCenterResult__isset __isset;

  void __set_uri(const std::string& val);

  void __set_token(const std::string& val);

  void __set_cookiePath(const std::string& val);

  void __set_skip(const bool val);

  bool operator == (const SecurityCenterResult & rhs) const
  {
    if (!(uri == rhs.uri))
      return false;
    if (!(token == rhs.token))
      return false;
    if (!(cookiePath == rhs.cookiePath))
      return false;
    if (!(skip == rhs.skip))
      return false;
    return true;
  }
  bool operator != (const SecurityCenterResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SecurityCenterResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SecurityCenterResult &a, SecurityCenterResult &b);

std::ostream& operator<<(std::ostream& out, const SecurityCenterResult& obj);

typedef struct _SendBuddyMessageResult__isset {
  _SendBuddyMessageResult__isset() : requestId(false), state(false), messageId(false), eventNo(false), receiverCount(false), successCount(false), failCount(false), cancelCount(false), blockCount(false), unregisterCount(false), timestamp(false), message(false) {}
  bool requestId :1;
  bool state :1;
  bool messageId :1;
  bool eventNo :1;
  bool receiverCount :1;
  bool successCount :1;
  bool failCount :1;
  bool cancelCount :1;
  bool blockCount :1;
  bool unregisterCount :1;
  bool timestamp :1;
  bool message :1;
} _SendBuddyMessageResult__isset;

class SendBuddyMessageResult : public virtual ::apache::thrift::TBase {
 public:

  SendBuddyMessageResult(const SendBuddyMessageResult&);
  SendBuddyMessageResult& operator=(const SendBuddyMessageResult&);
  SendBuddyMessageResult() : requestId(), state((BuddyResultState::type)0), messageId(), eventNo(0), receiverCount(0), successCount(0), failCount(0), cancelCount(0), blockCount(0), unregisterCount(0), timestamp(0), message() {
  }

  virtual ~SendBuddyMessageResult() noexcept;
  std::string requestId;
  /**
   * 
   * @see BuddyResultState
   */
  BuddyResultState::type state;
  std::string messageId;
  int32_t eventNo;
  int64_t receiverCount;
  int64_t successCount;
  int64_t failCount;
  int64_t cancelCount;
  int64_t blockCount;
  int64_t unregisterCount;
  int64_t timestamp;
  std::string message;

  _SendBuddyMessageResult__isset __isset;

  void __set_requestId(const std::string& val);

  void __set_state(const BuddyResultState::type val);

  void __set_messageId(const std::string& val);

  void __set_eventNo(const int32_t val);

  void __set_receiverCount(const int64_t val);

  void __set_successCount(const int64_t val);

  void __set_failCount(const int64_t val);

  void __set_cancelCount(const int64_t val);

  void __set_blockCount(const int64_t val);

  void __set_unregisterCount(const int64_t val);

  void __set_timestamp(const int64_t val);

  void __set_message(const std::string& val);

  bool operator == (const SendBuddyMessageResult & rhs) const
  {
    if (!(requestId == rhs.requestId))
      return false;
    if (!(state == rhs.state))
      return false;
    if (!(messageId == rhs.messageId))
      return false;
    if (!(eventNo == rhs.eventNo))
      return false;
    if (!(receiverCount == rhs.receiverCount))
      return false;
    if (!(successCount == rhs.successCount))
      return false;
    if (!(failCount == rhs.failCount))
      return false;
    if (!(cancelCount == rhs.cancelCount))
      return false;
    if (!(blockCount == rhs.blockCount))
      return false;
    if (!(unregisterCount == rhs.unregisterCount))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const SendBuddyMessageResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SendBuddyMessageResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SendBuddyMessageResult &a, SendBuddyMessageResult &b);

std::ostream& operator<<(std::ostream& out, const SendBuddyMessageResult& obj);

typedef struct _SetBuddyOnAirResult__isset {
  _SetBuddyOnAirResult__isset() : requestId(false), state(false), eventNo(false), receiverCount(false), successCount(false), failCount(false), cancelCount(false), unregisterCount(false), timestamp(false), message(false) {}
  bool requestId :1;
  bool state :1;
  bool eventNo :1;
  bool receiverCount :1;
  bool successCount :1;
  bool failCount :1;
  bool cancelCount :1;
  bool unregisterCount :1;
  bool timestamp :1;
  bool message :1;
} _SetBuddyOnAirResult__isset;

class SetBuddyOnAirResult : public virtual ::apache::thrift::TBase {
 public:

  SetBuddyOnAirResult(const SetBuddyOnAirResult&);
  SetBuddyOnAirResult& operator=(const SetBuddyOnAirResult&);
  SetBuddyOnAirResult() : requestId(), state((BuddyResultState::type)0), eventNo(0), receiverCount(0), successCount(0), failCount(0), cancelCount(0), unregisterCount(0), timestamp(0), message() {
  }

  virtual ~SetBuddyOnAirResult() noexcept;
  std::string requestId;
  /**
   * 
   * @see BuddyResultState
   */
  BuddyResultState::type state;
  int32_t eventNo;
  int64_t receiverCount;
  int64_t successCount;
  int64_t failCount;
  int64_t cancelCount;
  int64_t unregisterCount;
  int64_t timestamp;
  std::string message;

  _SetBuddyOnAirResult__isset __isset;

  void __set_requestId(const std::string& val);

  void __set_state(const BuddyResultState::type val);

  void __set_eventNo(const int32_t val);

  void __set_receiverCount(const int64_t val);

  void __set_successCount(const int64_t val);

  void __set_failCount(const int64_t val);

  void __set_cancelCount(const int64_t val);

  void __set_unregisterCount(const int64_t val);

  void __set_timestamp(const int64_t val);

  void __set_message(const std::string& val);

  bool operator == (const SetBuddyOnAirResult & rhs) const
  {
    if (!(requestId == rhs.requestId))
      return false;
    if (!(state == rhs.state))
      return false;
    if (!(eventNo == rhs.eventNo))
      return false;
    if (!(receiverCount == rhs.receiverCount))
      return false;
    if (!(successCount == rhs.successCount))
      return false;
    if (!(failCount == rhs.failCount))
      return false;
    if (!(cancelCount == rhs.cancelCount))
      return false;
    if (!(unregisterCount == rhs.unregisterCount))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const SetBuddyOnAirResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetBuddyOnAirResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SetBuddyOnAirResult &a, SetBuddyOnAirResult &b);

std::ostream& operator<<(std::ostream& out, const SetBuddyOnAirResult& obj);

typedef struct _Settings__isset {
  _Settings__isset() : notificationEnable(false), notificationMuteExpiration(false), notificationNewMessage(false), notificationGroupInvitation(false), notificationShowMessage(false), notificationIncomingCall(false), notificationSoundMessage(false), notificationSoundGroup(false), notificationDisabledWithSub(false), privacySyncContacts(false), privacySearchByPhoneNumber(false), privacySearchByUserid(false), privacySearchByEmail(false), privacyAllowSecondaryDeviceLogin(false), privacyProfileImagePostToMyhome(false), privacyReceiveMessagesFromNotFriend(false), contactMyTicket(false), identityProvider(false), identityIdentifier(false), snsAccounts(false), phoneRegistration(false), emailConfirmationStatus(false), preferenceLocale(false), customModes(false), e2eeEnable(false), hitokotoBackupRequested(false), privacyProfileMusicPostToMyhome(false), privacyAllowNearby(false), agreementNearbyTime(false), agreementSquareTime(false), notificationMention(false), botUseAgreementAcceptedAt(false) {}
  bool notificationEnable :1;
  bool notificationMuteExpiration :1;
  bool notificationNewMessage :1;
  bool notificationGroupInvitation :1;
  bool notificationShowMessage :1;
  bool notificationIncomingCall :1;
  bool notificationSoundMessage :1;
  bool notificationSoundGroup :1;
  bool notificationDisabledWithSub :1;
  bool privacySyncContacts :1;
  bool privacySearchByPhoneNumber :1;
  bool privacySearchByUserid :1;
  bool privacySearchByEmail :1;
  bool privacyAllowSecondaryDeviceLogin :1;
  bool privacyProfileImagePostToMyhome :1;
  bool privacyReceiveMessagesFromNotFriend :1;
  bool contactMyTicket :1;
  bool identityProvider :1;
  bool identityIdentifier :1;
  bool snsAccounts :1;
  bool phoneRegistration :1;
  bool emailConfirmationStatus :1;
  bool preferenceLocale :1;
  bool customModes :1;
  bool e2eeEnable :1;
  bool hitokotoBackupRequested :1;
  bool privacyProfileMusicPostToMyhome :1;
  bool privacyAllowNearby :1;
  bool agreementNearbyTime :1;
  bool agreementSquareTime :1;
  bool notificationMention :1;
  bool botUseAgreementAcceptedAt :1;
} _Settings__isset;

class Settings : public virtual ::apache::thrift::TBase {
 public:

  Settings(const Settings&);
  Settings& operator=(const Settings&);
  Settings() : notificationEnable(0), notificationMuteExpiration(0), notificationNewMessage(0), notificationGroupInvitation(0), notificationShowMessage(0), notificationIncomingCall(0), notificationSoundMessage(), notificationSoundGroup(), notificationDisabledWithSub(0), privacySyncContacts(0), privacySearchByPhoneNumber(0), privacySearchByUserid(0), privacySearchByEmail(0), privacyAllowSecondaryDeviceLogin(0), privacyProfileImagePostToMyhome(0), privacyReceiveMessagesFromNotFriend(0), contactMyTicket(), identityProvider((IdentityProvider::type)0), identityIdentifier(), phoneRegistration(0), emailConfirmationStatus((EmailConfirmationStatus::type)0), preferenceLocale(), e2eeEnable(0), hitokotoBackupRequested(0), privacyProfileMusicPostToMyhome(0), privacyAllowNearby(0), agreementNearbyTime(0), agreementSquareTime(0), notificationMention(0), botUseAgreementAcceptedAt(0) {
  }

  virtual ~Settings() noexcept;
  bool notificationEnable;
  int64_t notificationMuteExpiration;
  bool notificationNewMessage;
  bool notificationGroupInvitation;
  bool notificationShowMessage;
  bool notificationIncomingCall;
  std::string notificationSoundMessage;
  std::string notificationSoundGroup;
  bool notificationDisabledWithSub;
  bool privacySyncContacts;
  bool privacySearchByPhoneNumber;
  bool privacySearchByUserid;
  bool privacySearchByEmail;
  bool privacyAllowSecondaryDeviceLogin;
  bool privacyProfileImagePostToMyhome;
  bool privacyReceiveMessagesFromNotFriend;
  std::string contactMyTicket;
  /**
   * 
   * @see IdentityProvider
   */
  IdentityProvider::type identityProvider;
  std::string identityIdentifier;
  std::map<SnsIdType::type, std::string>  snsAccounts;
  bool phoneRegistration;
  /**
   * 
   * @see EmailConfirmationStatus
   */
  EmailConfirmationStatus::type emailConfirmationStatus;
  std::string preferenceLocale;
  std::map<CustomMode::type, std::string>  customModes;
  bool e2eeEnable;
  bool hitokotoBackupRequested;
  bool privacyProfileMusicPostToMyhome;
  bool privacyAllowNearby;
  int64_t agreementNearbyTime;
  int64_t agreementSquareTime;
  bool notificationMention;
  int64_t botUseAgreementAcceptedAt;

  _Settings__isset __isset;

  void __set_notificationEnable(const bool val);

  void __set_notificationMuteExpiration(const int64_t val);

  void __set_notificationNewMessage(const bool val);

  void __set_notificationGroupInvitation(const bool val);

  void __set_notificationShowMessage(const bool val);

  void __set_notificationIncomingCall(const bool val);

  void __set_notificationSoundMessage(const std::string& val);

  void __set_notificationSoundGroup(const std::string& val);

  void __set_notificationDisabledWithSub(const bool val);

  void __set_privacySyncContacts(const bool val);

  void __set_privacySearchByPhoneNumber(const bool val);

  void __set_privacySearchByUserid(const bool val);

  void __set_privacySearchByEmail(const bool val);

  void __set_privacyAllowSecondaryDeviceLogin(const bool val);

  void __set_privacyProfileImagePostToMyhome(const bool val);

  void __set_privacyReceiveMessagesFromNotFriend(const bool val);

  void __set_contactMyTicket(const std::string& val);

  void __set_identityProvider(const IdentityProvider::type val);

  void __set_identityIdentifier(const std::string& val);

  void __set_snsAccounts(const std::map<SnsIdType::type, std::string> & val);

  void __set_phoneRegistration(const bool val);

  void __set_emailConfirmationStatus(const EmailConfirmationStatus::type val);

  void __set_preferenceLocale(const std::string& val);

  void __set_customModes(const std::map<CustomMode::type, std::string> & val);

  void __set_e2eeEnable(const bool val);

  void __set_hitokotoBackupRequested(const bool val);

  void __set_privacyProfileMusicPostToMyhome(const bool val);

  void __set_privacyAllowNearby(const bool val);

  void __set_agreementNearbyTime(const int64_t val);

  void __set_agreementSquareTime(const int64_t val);

  void __set_notificationMention(const bool val);

  void __set_botUseAgreementAcceptedAt(const int64_t val);

  bool operator == (const Settings & rhs) const
  {
    if (!(notificationEnable == rhs.notificationEnable))
      return false;
    if (!(notificationMuteExpiration == rhs.notificationMuteExpiration))
      return false;
    if (!(notificationNewMessage == rhs.notificationNewMessage))
      return false;
    if (!(notificationGroupInvitation == rhs.notificationGroupInvitation))
      return false;
    if (!(notificationShowMessage == rhs.notificationShowMessage))
      return false;
    if (!(notificationIncomingCall == rhs.notificationIncomingCall))
      return false;
    if (!(notificationSoundMessage == rhs.notificationSoundMessage))
      return false;
    if (!(notificationSoundGroup == rhs.notificationSoundGroup))
      return false;
    if (!(notificationDisabledWithSub == rhs.notificationDisabledWithSub))
      return false;
    if (!(privacySyncContacts == rhs.privacySyncContacts))
      return false;
    if (!(privacySearchByPhoneNumber == rhs.privacySearchByPhoneNumber))
      return false;
    if (!(privacySearchByUserid == rhs.privacySearchByUserid))
      return false;
    if (!(privacySearchByEmail == rhs.privacySearchByEmail))
      return false;
    if (!(privacyAllowSecondaryDeviceLogin == rhs.privacyAllowSecondaryDeviceLogin))
      return false;
    if (!(privacyProfileImagePostToMyhome == rhs.privacyProfileImagePostToMyhome))
      return false;
    if (!(privacyReceiveMessagesFromNotFriend == rhs.privacyReceiveMessagesFromNotFriend))
      return false;
    if (!(contactMyTicket == rhs.contactMyTicket))
      return false;
    if (!(identityProvider == rhs.identityProvider))
      return false;
    if (!(identityIdentifier == rhs.identityIdentifier))
      return false;
    if (!(snsAccounts == rhs.snsAccounts))
      return false;
    if (!(phoneRegistration == rhs.phoneRegistration))
      return false;
    if (!(emailConfirmationStatus == rhs.emailConfirmationStatus))
      return false;
    if (!(preferenceLocale == rhs.preferenceLocale))
      return false;
    if (!(customModes == rhs.customModes))
      return false;
    if (!(e2eeEnable == rhs.e2eeEnable))
      return false;
    if (!(hitokotoBackupRequested == rhs.hitokotoBackupRequested))
      return false;
    if (!(privacyProfileMusicPostToMyhome == rhs.privacyProfileMusicPostToMyhome))
      return false;
    if (!(privacyAllowNearby == rhs.privacyAllowNearby))
      return false;
    if (!(agreementNearbyTime == rhs.agreementNearbyTime))
      return false;
    if (!(agreementSquareTime == rhs.agreementSquareTime))
      return false;
    if (!(notificationMention == rhs.notificationMention))
      return false;
    if (!(botUseAgreementAcceptedAt == rhs.botUseAgreementAcceptedAt))
      return false;
    return true;
  }
  bool operator != (const Settings &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Settings & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Settings &a, Settings &b);

std::ostream& operator<<(std::ostream& out, const Settings& obj);

typedef struct _SimpleChannelClient__isset {
  _SimpleChannelClient__isset() : applicationType(false), applicationVersion(false), locale(false) {}
  bool applicationType :1;
  bool applicationVersion :1;
  bool locale :1;
} _SimpleChannelClient__isset;

class SimpleChannelClient : public virtual ::apache::thrift::TBase {
 public:

  SimpleChannelClient(const SimpleChannelClient&);
  SimpleChannelClient& operator=(const SimpleChannelClient&);
  SimpleChannelClient() : applicationType(), applicationVersion(), locale() {
  }

  virtual ~SimpleChannelClient() noexcept;
  std::string applicationType;
  std::string applicationVersion;
  std::string locale;

  _SimpleChannelClient__isset __isset;

  void __set_applicationType(const std::string& val);

  void __set_applicationVersion(const std::string& val);

  void __set_locale(const std::string& val);

  bool operator == (const SimpleChannelClient & rhs) const
  {
    if (!(applicationType == rhs.applicationType))
      return false;
    if (!(applicationVersion == rhs.applicationVersion))
      return false;
    if (!(locale == rhs.locale))
      return false;
    return true;
  }
  bool operator != (const SimpleChannelClient &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleChannelClient & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SimpleChannelClient &a, SimpleChannelClient &b);

std::ostream& operator<<(std::ostream& out, const SimpleChannelClient& obj);

typedef struct _SimpleChannelContact__isset {
  _SimpleChannelContact__isset() : mid(false), displayName(false), pictureStatus(false), picturePath(false), statusMessage(false) {}
  bool mid :1;
  bool displayName :1;
  bool pictureStatus :1;
  bool picturePath :1;
  bool statusMessage :1;
} _SimpleChannelContact__isset;

class SimpleChannelContact : public virtual ::apache::thrift::TBase {
 public:

  SimpleChannelContact(const SimpleChannelContact&);
  SimpleChannelContact& operator=(const SimpleChannelContact&);
  SimpleChannelContact() : mid(), displayName(), pictureStatus(), picturePath(), statusMessage() {
  }

  virtual ~SimpleChannelContact() noexcept;
  std::string mid;
  std::string displayName;
  std::string pictureStatus;
  std::string picturePath;
  std::string statusMessage;

  _SimpleChannelContact__isset __isset;

  void __set_mid(const std::string& val);

  void __set_displayName(const std::string& val);

  void __set_pictureStatus(const std::string& val);

  void __set_picturePath(const std::string& val);

  void __set_statusMessage(const std::string& val);

  bool operator == (const SimpleChannelContact & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    if (!(displayName == rhs.displayName))
      return false;
    if (!(pictureStatus == rhs.pictureStatus))
      return false;
    if (!(picturePath == rhs.picturePath))
      return false;
    if (!(statusMessage == rhs.statusMessage))
      return false;
    return true;
  }
  bool operator != (const SimpleChannelContact &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleChannelContact & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SimpleChannelContact &a, SimpleChannelContact &b);

std::ostream& operator<<(std::ostream& out, const SimpleChannelContact& obj);

typedef struct _SnsFriend__isset {
  _SnsFriend__isset() : snsUserId(false), snsUserName(false), snsIdType(false) {}
  bool snsUserId :1;
  bool snsUserName :1;
  bool snsIdType :1;
} _SnsFriend__isset;

class SnsFriend : public virtual ::apache::thrift::TBase {
 public:

  SnsFriend(const SnsFriend&);
  SnsFriend& operator=(const SnsFriend&);
  SnsFriend() : snsUserId(), snsUserName(), snsIdType((SnsIdType::type)0) {
  }

  virtual ~SnsFriend() noexcept;
  std::string snsUserId;
  std::string snsUserName;
  /**
   * 
   * @see SnsIdType
   */
  SnsIdType::type snsIdType;

  _SnsFriend__isset __isset;

  void __set_snsUserId(const std::string& val);

  void __set_snsUserName(const std::string& val);

  void __set_snsIdType(const SnsIdType::type val);

  bool operator == (const SnsFriend & rhs) const
  {
    if (!(snsUserId == rhs.snsUserId))
      return false;
    if (!(snsUserName == rhs.snsUserName))
      return false;
    if (!(snsIdType == rhs.snsIdType))
      return false;
    return true;
  }
  bool operator != (const SnsFriend &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnsFriend & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SnsFriend &a, SnsFriend &b);

std::ostream& operator<<(std::ostream& out, const SnsFriend& obj);

typedef struct _SnsFriendContactRegistration__isset {
  _SnsFriendContactRegistration__isset() : contact(false), snsIdType(false), snsUserId(false) {}
  bool contact :1;
  bool snsIdType :1;
  bool snsUserId :1;
} _SnsFriendContactRegistration__isset;

class SnsFriendContactRegistration : public virtual ::apache::thrift::TBase {
 public:

  SnsFriendContactRegistration(const SnsFriendContactRegistration&);
  SnsFriendContactRegistration& operator=(const SnsFriendContactRegistration&);
  SnsFriendContactRegistration() : snsIdType((SnsIdType::type)0), snsUserId() {
  }

  virtual ~SnsFriendContactRegistration() noexcept;
  Contact contact;
  /**
   * 
   * @see SnsIdType
   */
  SnsIdType::type snsIdType;
  std::string snsUserId;

  _SnsFriendContactRegistration__isset __isset;

  void __set_contact(const Contact& val);

  void __set_snsIdType(const SnsIdType::type val);

  void __set_snsUserId(const std::string& val);

  bool operator == (const SnsFriendContactRegistration & rhs) const
  {
    if (!(contact == rhs.contact))
      return false;
    if (!(snsIdType == rhs.snsIdType))
      return false;
    if (!(snsUserId == rhs.snsUserId))
      return false;
    return true;
  }
  bool operator != (const SnsFriendContactRegistration &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnsFriendContactRegistration & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SnsFriendContactRegistration &a, SnsFriendContactRegistration &b);

std::ostream& operator<<(std::ostream& out, const SnsFriendContactRegistration& obj);

typedef struct _SnsFriendModification__isset {
  _SnsFriendModification__isset() : type(false), snsFriend(false) {}
  bool type :1;
  bool snsFriend :1;
} _SnsFriendModification__isset;

class SnsFriendModification : public virtual ::apache::thrift::TBase {
 public:

  SnsFriendModification(const SnsFriendModification&);
  SnsFriendModification& operator=(const SnsFriendModification&);
  SnsFriendModification() : type((ModificationType::type)0) {
  }

  virtual ~SnsFriendModification() noexcept;
  /**
   * 
   * @see ModificationType
   */
  ModificationType::type type;
  SnsFriend snsFriend;

  _SnsFriendModification__isset __isset;

  void __set_type(const ModificationType::type val);

  void __set_snsFriend(const SnsFriend& val);

  bool operator == (const SnsFriendModification & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(snsFriend == rhs.snsFriend))
      return false;
    return true;
  }
  bool operator != (const SnsFriendModification &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnsFriendModification & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SnsFriendModification &a, SnsFriendModification &b);

std::ostream& operator<<(std::ostream& out, const SnsFriendModification& obj);

typedef struct _SnsFriends__isset {
  _SnsFriends__isset() : snsFriends(false), hasMore(false) {}
  bool snsFriends :1;
  bool hasMore :1;
} _SnsFriends__isset;

class SnsFriends : public virtual ::apache::thrift::TBase {
 public:

  SnsFriends(const SnsFriends&);
  SnsFriends& operator=(const SnsFriends&);
  SnsFriends() : hasMore(0) {
  }

  virtual ~SnsFriends() noexcept;
  std::vector<SnsFriend>  snsFriends;
  bool hasMore;

  _SnsFriends__isset __isset;

  void __set_snsFriends(const std::vector<SnsFriend> & val);

  void __set_hasMore(const bool val);

  bool operator == (const SnsFriends & rhs) const
  {
    if (!(snsFriends == rhs.snsFriends))
      return false;
    if (!(hasMore == rhs.hasMore))
      return false;
    return true;
  }
  bool operator != (const SnsFriends &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnsFriends & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SnsFriends &a, SnsFriends &b);

std::ostream& operator<<(std::ostream& out, const SnsFriends& obj);

typedef struct _SnsIdUserStatus__isset {
  _SnsIdUserStatus__isset() : userExisting(false), phoneNumberRegistered(false), sameDevice(false) {}
  bool userExisting :1;
  bool phoneNumberRegistered :1;
  bool sameDevice :1;
} _SnsIdUserStatus__isset;

class SnsIdUserStatus : public virtual ::apache::thrift::TBase {
 public:

  SnsIdUserStatus(const SnsIdUserStatus&);
  SnsIdUserStatus& operator=(const SnsIdUserStatus&);
  SnsIdUserStatus() : userExisting(0), phoneNumberRegistered(0), sameDevice(0) {
  }

  virtual ~SnsIdUserStatus() noexcept;
  bool userExisting;
  bool phoneNumberRegistered;
  bool sameDevice;

  _SnsIdUserStatus__isset __isset;

  void __set_userExisting(const bool val);

  void __set_phoneNumberRegistered(const bool val);

  void __set_sameDevice(const bool val);

  bool operator == (const SnsIdUserStatus & rhs) const
  {
    if (!(userExisting == rhs.userExisting))
      return false;
    if (!(phoneNumberRegistered == rhs.phoneNumberRegistered))
      return false;
    if (!(sameDevice == rhs.sameDevice))
      return false;
    return true;
  }
  bool operator != (const SnsIdUserStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnsIdUserStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SnsIdUserStatus &a, SnsIdUserStatus &b);

std::ostream& operator<<(std::ostream& out, const SnsIdUserStatus& obj);

typedef struct _SnsProfile__isset {
  _SnsProfile__isset() : snsUserId(false), snsUserName(false), email(false), thumbnailUrl(false) {}
  bool snsUserId :1;
  bool snsUserName :1;
  bool email :1;
  bool thumbnailUrl :1;
} _SnsProfile__isset;

class SnsProfile : public virtual ::apache::thrift::TBase {
 public:

  SnsProfile(const SnsProfile&);
  SnsProfile& operator=(const SnsProfile&);
  SnsProfile() : snsUserId(), snsUserName(), email(), thumbnailUrl() {
  }

  virtual ~SnsProfile() noexcept;
  std::string snsUserId;
  std::string snsUserName;
  std::string email;
  std::string thumbnailUrl;

  _SnsProfile__isset __isset;

  void __set_snsUserId(const std::string& val);

  void __set_snsUserName(const std::string& val);

  void __set_email(const std::string& val);

  void __set_thumbnailUrl(const std::string& val);

  bool operator == (const SnsProfile & rhs) const
  {
    if (!(snsUserId == rhs.snsUserId))
      return false;
    if (!(snsUserName == rhs.snsUserName))
      return false;
    if (!(email == rhs.email))
      return false;
    if (!(thumbnailUrl == rhs.thumbnailUrl))
      return false;
    return true;
  }
  bool operator != (const SnsProfile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnsProfile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SnsProfile &a, SnsProfile &b);

std::ostream& operator<<(std::ostream& out, const SnsProfile& obj);

typedef struct _SystemConfiguration__isset {
  _SystemConfiguration__isset() : endpoint(false), endpointSsl(false), updateUrl(false), c2dmAccount(false), nniServer(false) {}
  bool endpoint :1;
  bool endpointSsl :1;
  bool updateUrl :1;
  bool c2dmAccount :1;
  bool nniServer :1;
} _SystemConfiguration__isset;

class SystemConfiguration : public virtual ::apache::thrift::TBase {
 public:

  SystemConfiguration(const SystemConfiguration&);
  SystemConfiguration& operator=(const SystemConfiguration&);
  SystemConfiguration() : endpoint(), endpointSsl(), updateUrl(), c2dmAccount(), nniServer() {
  }

  virtual ~SystemConfiguration() noexcept;
  std::string endpoint;
  std::string endpointSsl;
  std::string updateUrl;
  std::string c2dmAccount;
  std::string nniServer;

  _SystemConfiguration__isset __isset;

  void __set_endpoint(const std::string& val);

  void __set_endpointSsl(const std::string& val);

  void __set_updateUrl(const std::string& val);

  void __set_c2dmAccount(const std::string& val);

  void __set_nniServer(const std::string& val);

  bool operator == (const SystemConfiguration & rhs) const
  {
    if (!(endpoint == rhs.endpoint))
      return false;
    if (!(endpointSsl == rhs.endpointSsl))
      return false;
    if (!(updateUrl == rhs.updateUrl))
      return false;
    if (!(c2dmAccount == rhs.c2dmAccount))
      return false;
    if (!(nniServer == rhs.nniServer))
      return false;
    return true;
  }
  bool operator != (const SystemConfiguration &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SystemConfiguration & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SystemConfiguration &a, SystemConfiguration &b);

std::ostream& operator<<(std::ostream& out, const SystemConfiguration& obj);

typedef struct _Ticket__isset {
  _Ticket__isset() : id(false), expirationTime(false), maxUseCount(false) {}
  bool id :1;
  bool expirationTime :1;
  bool maxUseCount :1;
} _Ticket__isset;

class Ticket : public virtual ::apache::thrift::TBase {
 public:

  Ticket(const Ticket&);
  Ticket& operator=(const Ticket&);
  Ticket() : id(), expirationTime(0), maxUseCount(0) {
  }

  virtual ~Ticket() noexcept;
  std::string id;
  int64_t expirationTime;
  int32_t maxUseCount;

  _Ticket__isset __isset;

  void __set_id(const std::string& val);

  void __set_expirationTime(const int64_t val);

  void __set_maxUseCount(const int32_t val);

  bool operator == (const Ticket & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(expirationTime == rhs.expirationTime))
      return false;
    if (!(maxUseCount == rhs.maxUseCount))
      return false;
    return true;
  }
  bool operator != (const Ticket &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Ticket & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Ticket &a, Ticket &b);

std::ostream& operator<<(std::ostream& out, const Ticket& obj);

typedef struct _TMessageBox__isset {
  _TMessageBox__isset() : id(false), channelId(false), lastSeq(false), unreadCount(false), lastModifiedTime(false), status(false), midType(false), lastMessages(false) {}
  bool id :1;
  bool channelId :1;
  bool lastSeq :1;
  bool unreadCount :1;
  bool lastModifiedTime :1;
  bool status :1;
  bool midType :1;
  bool lastMessages :1;
} _TMessageBox__isset;

class TMessageBox : public virtual ::apache::thrift::TBase {
 public:

  TMessageBox(const TMessageBox&);
  TMessageBox& operator=(const TMessageBox&);
  TMessageBox() : id(), channelId(), lastSeq(0), unreadCount(0), lastModifiedTime(0), status(0), midType((MIDType::type)0) {
  }

  virtual ~TMessageBox() noexcept;
  std::string id;
  std::string channelId;
  int64_t lastSeq;
  int64_t unreadCount;
  int64_t lastModifiedTime;
  int32_t status;
  /**
   * 
   * @see MIDType
   */
  MIDType::type midType;
  std::vector<Message>  lastMessages;

  _TMessageBox__isset __isset;

  void __set_id(const std::string& val);

  void __set_channelId(const std::string& val);

  void __set_lastSeq(const int64_t val);

  void __set_unreadCount(const int64_t val);

  void __set_lastModifiedTime(const int64_t val);

  void __set_status(const int32_t val);

  void __set_midType(const MIDType::type val);

  void __set_lastMessages(const std::vector<Message> & val);

  bool operator == (const TMessageBox & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(channelId == rhs.channelId))
      return false;
    if (!(lastSeq == rhs.lastSeq))
      return false;
    if (!(unreadCount == rhs.unreadCount))
      return false;
    if (!(lastModifiedTime == rhs.lastModifiedTime))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(midType == rhs.midType))
      return false;
    if (!(lastMessages == rhs.lastMessages))
      return false;
    return true;
  }
  bool operator != (const TMessageBox &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TMessageBox & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TMessageBox &a, TMessageBox &b);

std::ostream& operator<<(std::ostream& out, const TMessageBox& obj);

typedef struct _TMessageBoxWrapUp__isset {
  _TMessageBoxWrapUp__isset() : messageBox(false), name(false), contacts(false), pictureRevision(false) {}
  bool messageBox :1;
  bool name :1;
  bool contacts :1;
  bool pictureRevision :1;
} _TMessageBoxWrapUp__isset;

class TMessageBoxWrapUp : public virtual ::apache::thrift::TBase {
 public:

  TMessageBoxWrapUp(const TMessageBoxWrapUp&);
  TMessageBoxWrapUp& operator=(const TMessageBoxWrapUp&);
  TMessageBoxWrapUp() : name(), pictureRevision() {
  }

  virtual ~TMessageBoxWrapUp() noexcept;
  TMessageBox messageBox;
  std::string name;
  std::vector<Contact>  contacts;
  std::string pictureRevision;

  _TMessageBoxWrapUp__isset __isset;

  void __set_messageBox(const TMessageBox& val);

  void __set_name(const std::string& val);

  void __set_contacts(const std::vector<Contact> & val);

  void __set_pictureRevision(const std::string& val);

  bool operator == (const TMessageBoxWrapUp & rhs) const
  {
    if (!(messageBox == rhs.messageBox))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(contacts == rhs.contacts))
      return false;
    if (!(pictureRevision == rhs.pictureRevision))
      return false;
    return true;
  }
  bool operator != (const TMessageBoxWrapUp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TMessageBoxWrapUp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TMessageBoxWrapUp &a, TMessageBoxWrapUp &b);

std::ostream& operator<<(std::ostream& out, const TMessageBoxWrapUp& obj);

typedef struct _TMessageBoxWrapUpResponse__isset {
  _TMessageBoxWrapUpResponse__isset() : messageBoxWrapUpList(false), totalSize(false) {}
  bool messageBoxWrapUpList :1;
  bool totalSize :1;
} _TMessageBoxWrapUpResponse__isset;

class TMessageBoxWrapUpResponse : public virtual ::apache::thrift::TBase {
 public:

  TMessageBoxWrapUpResponse(const TMessageBoxWrapUpResponse&);
  TMessageBoxWrapUpResponse& operator=(const TMessageBoxWrapUpResponse&);
  TMessageBoxWrapUpResponse() : totalSize(0) {
  }

  virtual ~TMessageBoxWrapUpResponse() noexcept;
  std::vector<TMessageBoxWrapUp>  messageBoxWrapUpList;
  int32_t totalSize;

  _TMessageBoxWrapUpResponse__isset __isset;

  void __set_messageBoxWrapUpList(const std::vector<TMessageBoxWrapUp> & val);

  void __set_totalSize(const int32_t val);

  bool operator == (const TMessageBoxWrapUpResponse & rhs) const
  {
    if (!(messageBoxWrapUpList == rhs.messageBoxWrapUpList))
      return false;
    if (!(totalSize == rhs.totalSize))
      return false;
    return true;
  }
  bool operator != (const TMessageBoxWrapUpResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TMessageBoxWrapUpResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TMessageBoxWrapUpResponse &a, TMessageBoxWrapUpResponse &b);

std::ostream& operator<<(std::ostream& out, const TMessageBoxWrapUpResponse& obj);

typedef struct _TMessageReadRangeEntry__isset {
  _TMessageReadRangeEntry__isset() : startMessageId(false), endMessageId(false), startTime(false), endTime(false) {}
  bool startMessageId :1;
  bool endMessageId :1;
  bool startTime :1;
  bool endTime :1;
} _TMessageReadRangeEntry__isset;

class TMessageReadRangeEntry : public virtual ::apache::thrift::TBase {
 public:

  TMessageReadRangeEntry(const TMessageReadRangeEntry&);
  TMessageReadRangeEntry& operator=(const TMessageReadRangeEntry&);
  TMessageReadRangeEntry() : startMessageId(0), endMessageId(0), startTime(0), endTime(0) {
  }

  virtual ~TMessageReadRangeEntry() noexcept;
  int64_t startMessageId;
  int64_t endMessageId;
  int64_t startTime;
  int64_t endTime;

  _TMessageReadRangeEntry__isset __isset;

  void __set_startMessageId(const int64_t val);

  void __set_endMessageId(const int64_t val);

  void __set_startTime(const int64_t val);

  void __set_endTime(const int64_t val);

  bool operator == (const TMessageReadRangeEntry & rhs) const
  {
    if (!(startMessageId == rhs.startMessageId))
      return false;
    if (!(endMessageId == rhs.endMessageId))
      return false;
    if (!(startTime == rhs.startTime))
      return false;
    if (!(endTime == rhs.endTime))
      return false;
    return true;
  }
  bool operator != (const TMessageReadRangeEntry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TMessageReadRangeEntry & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TMessageReadRangeEntry &a, TMessageReadRangeEntry &b);

std::ostream& operator<<(std::ostream& out, const TMessageReadRangeEntry& obj);

typedef struct _TMessageReadRange__isset {
  _TMessageReadRange__isset() : chatId(false), ranges(false) {}
  bool chatId :1;
  bool ranges :1;
} _TMessageReadRange__isset;

class TMessageReadRange : public virtual ::apache::thrift::TBase {
 public:

  TMessageReadRange(const TMessageReadRange&);
  TMessageReadRange& operator=(const TMessageReadRange&);
  TMessageReadRange() : chatId() {
  }

  virtual ~TMessageReadRange() noexcept;
  std::string chatId;
  std::map<std::string, std::vector<TMessageReadRangeEntry> >  ranges;

  _TMessageReadRange__isset __isset;

  void __set_chatId(const std::string& val);

  void __set_ranges(const std::map<std::string, std::vector<TMessageReadRangeEntry> > & val);

  bool operator == (const TMessageReadRange & rhs) const
  {
    if (!(chatId == rhs.chatId))
      return false;
    if (!(ranges == rhs.ranges))
      return false;
    return true;
  }
  bool operator != (const TMessageReadRange &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TMessageReadRange & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TMessageReadRange &a, TMessageReadRange &b);

std::ostream& operator<<(std::ostream& out, const TMessageReadRange& obj);

typedef struct _ChatRoomAnnouncementContents__isset {
  _ChatRoomAnnouncementContents__isset() : displayFields(false), text(false), link(false), thumbnail(false) {}
  bool displayFields :1;
  bool text :1;
  bool link :1;
  bool thumbnail :1;
} _ChatRoomAnnouncementContents__isset;

class ChatRoomAnnouncementContents : public virtual ::apache::thrift::TBase {
 public:

  ChatRoomAnnouncementContents(const ChatRoomAnnouncementContents&);
  ChatRoomAnnouncementContents& operator=(const ChatRoomAnnouncementContents&);
  ChatRoomAnnouncementContents() : displayFields(0), text(), link(), thumbnail() {
  }

  virtual ~ChatRoomAnnouncementContents() noexcept;
  int32_t displayFields;
  std::string text;
  std::string link;
  std::string thumbnail;

  _ChatRoomAnnouncementContents__isset __isset;

  void __set_displayFields(const int32_t val);

  void __set_text(const std::string& val);

  void __set_link(const std::string& val);

  void __set_thumbnail(const std::string& val);

  bool operator == (const ChatRoomAnnouncementContents & rhs) const
  {
    if (!(displayFields == rhs.displayFields))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(link == rhs.link))
      return false;
    if (!(thumbnail == rhs.thumbnail))
      return false;
    return true;
  }
  bool operator != (const ChatRoomAnnouncementContents &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatRoomAnnouncementContents & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ChatRoomAnnouncementContents &a, ChatRoomAnnouncementContents &b);

std::ostream& operator<<(std::ostream& out, const ChatRoomAnnouncementContents& obj);

typedef struct _ChatRoomAnnouncement__isset {
  _ChatRoomAnnouncement__isset() : announcementSeq(false), type(false), contents(false), creatorMid(false), createdTime(false) {}
  bool announcementSeq :1;
  bool type :1;
  bool contents :1;
  bool creatorMid :1;
  bool createdTime :1;
} _ChatRoomAnnouncement__isset;

class ChatRoomAnnouncement : public virtual ::apache::thrift::TBase {
 public:

  ChatRoomAnnouncement(const ChatRoomAnnouncement&);
  ChatRoomAnnouncement& operator=(const ChatRoomAnnouncement&);
  ChatRoomAnnouncement() : announcementSeq(0), type((ChatRoomAnnouncementType::type)0), creatorMid(), createdTime(0) {
  }

  virtual ~ChatRoomAnnouncement() noexcept;
  int64_t announcementSeq;
  /**
   * 
   * @see ChatRoomAnnouncementType
   */
  ChatRoomAnnouncementType::type type;
  ChatRoomAnnouncementContents contents;
  std::string creatorMid;
  int64_t createdTime;

  _ChatRoomAnnouncement__isset __isset;

  void __set_announcementSeq(const int64_t val);

  void __set_type(const ChatRoomAnnouncementType::type val);

  void __set_contents(const ChatRoomAnnouncementContents& val);

  void __set_creatorMid(const std::string& val);

  void __set_createdTime(const int64_t val);

  bool operator == (const ChatRoomAnnouncement & rhs) const
  {
    if (!(announcementSeq == rhs.announcementSeq))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(contents == rhs.contents))
      return false;
    if (!(creatorMid == rhs.creatorMid))
      return false;
    if (!(createdTime == rhs.createdTime))
      return false;
    return true;
  }
  bool operator != (const ChatRoomAnnouncement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatRoomAnnouncement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ChatRoomAnnouncement &a, ChatRoomAnnouncement &b);

std::ostream& operator<<(std::ostream& out, const ChatRoomAnnouncement& obj);

typedef struct _ErrorExtraInfo__isset {
  _ErrorExtraInfo__isset() : preconditionFailedExtraInfo(false) {}
  bool preconditionFailedExtraInfo :1;
} _ErrorExtraInfo__isset;

class ErrorExtraInfo : public virtual ::apache::thrift::TBase {
 public:

  ErrorExtraInfo(const ErrorExtraInfo&);
  ErrorExtraInfo& operator=(const ErrorExtraInfo&);
  ErrorExtraInfo() : preconditionFailedExtraInfo((PreconditionFailedExtraInfo::type)0) {
  }

  virtual ~ErrorExtraInfo() noexcept;
  /**
   * 
   * @see PreconditionFailedExtraInfo
   */
  PreconditionFailedExtraInfo::type preconditionFailedExtraInfo;

  _ErrorExtraInfo__isset __isset;

  void __set_preconditionFailedExtraInfo(const PreconditionFailedExtraInfo::type val);

  bool operator == (const ErrorExtraInfo & rhs) const
  {
    if (!(preconditionFailedExtraInfo == rhs.preconditionFailedExtraInfo))
      return false;
    return true;
  }
  bool operator != (const ErrorExtraInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ErrorExtraInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ErrorExtraInfo &a, ErrorExtraInfo &b);

std::ostream& operator<<(std::ostream& out, const ErrorExtraInfo& obj);

typedef struct _SyncRelations__isset {
  _SyncRelations__isset() : syncAll(false), syncParamContact(false), syncParamMid(false) {}
  bool syncAll :1;
  bool syncParamContact :1;
  bool syncParamMid :1;
} _SyncRelations__isset;

class SyncRelations : public virtual ::apache::thrift::TBase {
 public:

  SyncRelations(const SyncRelations&);
  SyncRelations& operator=(const SyncRelations&);
  SyncRelations() : syncAll(0) {
  }

  virtual ~SyncRelations() noexcept;
  bool syncAll;
  std::vector<SyncParamContact>  syncParamContact;
  std::vector<SyncParamMid>  syncParamMid;

  _SyncRelations__isset __isset;

  void __set_syncAll(const bool val);

  void __set_syncParamContact(const std::vector<SyncParamContact> & val);

  void __set_syncParamMid(const std::vector<SyncParamMid> & val);

  bool operator == (const SyncRelations & rhs) const
  {
    if (!(syncAll == rhs.syncAll))
      return false;
    if (!(syncParamContact == rhs.syncParamContact))
      return false;
    if (!(syncParamMid == rhs.syncParamMid))
      return false;
    return true;
  }
  bool operator != (const SyncRelations &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncRelations & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SyncRelations &a, SyncRelations &b);

std::ostream& operator<<(std::ostream& out, const SyncRelations& obj);

typedef struct _SyncScope__isset {
  _SyncScope__isset() : syncProfile(false), syncSettings(false), syncSticker(false), syncThemeShop(false), contact(false), group(false), room(false), chat(false) {}
  bool syncProfile :1;
  bool syncSettings :1;
  bool syncSticker :1;
  bool syncThemeShop :1;
  bool contact :1;
  bool group :1;
  bool room :1;
  bool chat :1;
} _SyncScope__isset;

class SyncScope : public virtual ::apache::thrift::TBase {
 public:

  SyncScope(const SyncScope&);
  SyncScope& operator=(const SyncScope&);
  SyncScope() : syncProfile(0), syncSettings(0), syncSticker(0), syncThemeShop(0) {
  }

  virtual ~SyncScope() noexcept;
  bool syncProfile;
  bool syncSettings;
  bool syncSticker;
  bool syncThemeShop;
  SyncRelations contact;
  SyncRelations group;
  SyncRelations room;
  SyncRelations chat;

  _SyncScope__isset __isset;

  void __set_syncProfile(const bool val);

  void __set_syncSettings(const bool val);

  void __set_syncSticker(const bool val);

  void __set_syncThemeShop(const bool val);

  void __set_contact(const SyncRelations& val);

  void __set_group(const SyncRelations& val);

  void __set_room(const SyncRelations& val);

  void __set_chat(const SyncRelations& val);

  bool operator == (const SyncScope & rhs) const
  {
    if (!(syncProfile == rhs.syncProfile))
      return false;
    if (!(syncSettings == rhs.syncSettings))
      return false;
    if (!(syncSticker == rhs.syncSticker))
      return false;
    if (!(syncThemeShop == rhs.syncThemeShop))
      return false;
    if (!(contact == rhs.contact))
      return false;
    if (!(group == rhs.group))
      return false;
    if (!(room == rhs.room))
      return false;
    if (!(chat == rhs.chat))
      return false;
    return true;
  }
  bool operator != (const SyncScope &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncScope & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SyncScope &a, SyncScope &b);

std::ostream& operator<<(std::ostream& out, const SyncScope& obj);

typedef struct _JoinSquareResponse__isset {
  _JoinSquareResponse__isset() : square(false), squareAuthority(false), squareStatus(false), squareMember(false), squareFeatureSet(false), noteStatus(false) {}
  bool square :1;
  bool squareAuthority :1;
  bool squareStatus :1;
  bool squareMember :1;
  bool squareFeatureSet :1;
  bool noteStatus :1;
} _JoinSquareResponse__isset;

class JoinSquareResponse : public virtual ::apache::thrift::TBase {
 public:

  JoinSquareResponse(const JoinSquareResponse&);
  JoinSquareResponse& operator=(const JoinSquareResponse&);
  JoinSquareResponse() {
  }

  virtual ~JoinSquareResponse() noexcept;
  Square square;
  SquareAuthority squareAuthority;
  SquareStatus squareStatus;
  SquareMember squareMember;
  SquareFeatureSet squareFeatureSet;
  NoteStatus noteStatus;

  _JoinSquareResponse__isset __isset;

  void __set_square(const Square& val);

  void __set_squareAuthority(const SquareAuthority& val);

  void __set_squareStatus(const SquareStatus& val);

  void __set_squareMember(const SquareMember& val);

  void __set_squareFeatureSet(const SquareFeatureSet& val);

  void __set_noteStatus(const NoteStatus& val);

  bool operator == (const JoinSquareResponse & rhs) const
  {
    if (!(square == rhs.square))
      return false;
    if (!(squareAuthority == rhs.squareAuthority))
      return false;
    if (!(squareStatus == rhs.squareStatus))
      return false;
    if (!(squareMember == rhs.squareMember))
      return false;
    if (!(squareFeatureSet == rhs.squareFeatureSet))
      return false;
    if (!(noteStatus == rhs.noteStatus))
      return false;
    return true;
  }
  bool operator != (const JoinSquareResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const JoinSquareResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(JoinSquareResponse &a, JoinSquareResponse &b);

std::ostream& operator<<(std::ostream& out, const JoinSquareResponse& obj);

typedef struct _JoinSquareRequest__isset {
  _JoinSquareRequest__isset() : squareMid(false), member(false) {}
  bool squareMid :1;
  bool member :1;
} _JoinSquareRequest__isset;

class JoinSquareRequest : public virtual ::apache::thrift::TBase {
 public:

  JoinSquareRequest(const JoinSquareRequest&);
  JoinSquareRequest& operator=(const JoinSquareRequest&);
  JoinSquareRequest() : squareMid() {
  }

  virtual ~JoinSquareRequest() noexcept;
  std::string squareMid;
  SquareMember member;

  _JoinSquareRequest__isset __isset;

  void __set_squareMid(const std::string& val);

  void __set_member(const SquareMember& val);

  bool operator == (const JoinSquareRequest & rhs) const
  {
    if (!(squareMid == rhs.squareMid))
      return false;
    if (!(member == rhs.member))
      return false;
    return true;
  }
  bool operator != (const JoinSquareRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const JoinSquareRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(JoinSquareRequest &a, JoinSquareRequest &b);

std::ostream& operator<<(std::ostream& out, const JoinSquareRequest& obj);

typedef struct _JoinSquareChatResponse__isset {
  _JoinSquareChatResponse__isset() : squareChat(false), squareChatStatus(false), squareChatMember(false) {}
  bool squareChat :1;
  bool squareChatStatus :1;
  bool squareChatMember :1;
} _JoinSquareChatResponse__isset;

class JoinSquareChatResponse : public virtual ::apache::thrift::TBase {
 public:

  JoinSquareChatResponse(const JoinSquareChatResponse&);
  JoinSquareChatResponse& operator=(const JoinSquareChatResponse&);
  JoinSquareChatResponse() {
  }

  virtual ~JoinSquareChatResponse() noexcept;
  SquareChat squareChat;
  SquareChatStatus squareChatStatus;
  SquareChatMember squareChatMember;

  _JoinSquareChatResponse__isset __isset;

  void __set_squareChat(const SquareChat& val);

  void __set_squareChatStatus(const SquareChatStatus& val);

  void __set_squareChatMember(const SquareChatMember& val);

  bool operator == (const JoinSquareChatResponse & rhs) const
  {
    if (!(squareChat == rhs.squareChat))
      return false;
    if (!(squareChatStatus == rhs.squareChatStatus))
      return false;
    if (!(squareChatMember == rhs.squareChatMember))
      return false;
    return true;
  }
  bool operator != (const JoinSquareChatResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const JoinSquareChatResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(JoinSquareChatResponse &a, JoinSquareChatResponse &b);

std::ostream& operator<<(std::ostream& out, const JoinSquareChatResponse& obj);

typedef struct _JoinSquareChatRequest__isset {
  _JoinSquareChatRequest__isset() : squareChatMid(false) {}
  bool squareChatMid :1;
} _JoinSquareChatRequest__isset;

class JoinSquareChatRequest : public virtual ::apache::thrift::TBase {
 public:

  JoinSquareChatRequest(const JoinSquareChatRequest&);
  JoinSquareChatRequest& operator=(const JoinSquareChatRequest&);
  JoinSquareChatRequest() : squareChatMid() {
  }

  virtual ~JoinSquareChatRequest() noexcept;
  std::string squareChatMid;

  _JoinSquareChatRequest__isset __isset;

  void __set_squareChatMid(const std::string& val);

  bool operator == (const JoinSquareChatRequest & rhs) const
  {
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    return true;
  }
  bool operator != (const JoinSquareChatRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const JoinSquareChatRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(JoinSquareChatRequest &a, JoinSquareChatRequest &b);

std::ostream& operator<<(std::ostream& out, const JoinSquareChatRequest& obj);

typedef struct _SendMessageResponse__isset {
  _SendMessageResponse__isset() : createdSquareMessage(false) {}
  bool createdSquareMessage :1;
} _SendMessageResponse__isset;

class SendMessageResponse : public virtual ::apache::thrift::TBase {
 public:

  SendMessageResponse(const SendMessageResponse&);
  SendMessageResponse& operator=(const SendMessageResponse&);
  SendMessageResponse() {
  }

  virtual ~SendMessageResponse() noexcept;
  SquareMessage createdSquareMessage;

  _SendMessageResponse__isset __isset;

  void __set_createdSquareMessage(const SquareMessage& val);

  bool operator == (const SendMessageResponse & rhs) const
  {
    if (!(createdSquareMessage == rhs.createdSquareMessage))
      return false;
    return true;
  }
  bool operator != (const SendMessageResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SendMessageResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SendMessageResponse &a, SendMessageResponse &b);

std::ostream& operator<<(std::ostream& out, const SendMessageResponse& obj);

typedef struct _SendMessageRequest__isset {
  _SendMessageRequest__isset() : reqSeq(false), squareChatMid(false), squareMessage(false) {}
  bool reqSeq :1;
  bool squareChatMid :1;
  bool squareMessage :1;
} _SendMessageRequest__isset;

class SendMessageRequest : public virtual ::apache::thrift::TBase {
 public:

  SendMessageRequest(const SendMessageRequest&);
  SendMessageRequest& operator=(const SendMessageRequest&);
  SendMessageRequest() : reqSeq(0), squareChatMid() {
  }

  virtual ~SendMessageRequest() noexcept;
  int32_t reqSeq;
  std::string squareChatMid;
  SquareMessage squareMessage;

  _SendMessageRequest__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_squareChatMid(const std::string& val);

  void __set_squareMessage(const SquareMessage& val);

  bool operator == (const SendMessageRequest & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    if (!(squareMessage == rhs.squareMessage))
      return false;
    return true;
  }
  bool operator != (const SendMessageRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SendMessageRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SendMessageRequest &a, SendMessageRequest &b);

std::ostream& operator<<(std::ostream& out, const SendMessageRequest& obj);

typedef struct _MarkAsReadRequest__isset {
  _MarkAsReadRequest__isset() : squareChatMid(false), messageId(false) {}
  bool squareChatMid :1;
  bool messageId :1;
} _MarkAsReadRequest__isset;

class MarkAsReadRequest : public virtual ::apache::thrift::TBase {
 public:

  MarkAsReadRequest(const MarkAsReadRequest&);
  MarkAsReadRequest& operator=(const MarkAsReadRequest&);
  MarkAsReadRequest() : squareChatMid(), messageId() {
  }

  virtual ~MarkAsReadRequest() noexcept;
  std::string squareChatMid;
  std::string messageId;

  _MarkAsReadRequest__isset __isset;

  void __set_squareChatMid(const std::string& val);

  void __set_messageId(const std::string& val);

  bool operator == (const MarkAsReadRequest & rhs) const
  {
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    if (!(messageId == rhs.messageId))
      return false;
    return true;
  }
  bool operator != (const MarkAsReadRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MarkAsReadRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MarkAsReadRequest &a, MarkAsReadRequest &b);

std::ostream& operator<<(std::ostream& out, const MarkAsReadRequest& obj);


class MarkAsReadResponse : public virtual ::apache::thrift::TBase {
 public:

  MarkAsReadResponse(const MarkAsReadResponse&);
  MarkAsReadResponse& operator=(const MarkAsReadResponse&);
  MarkAsReadResponse() {
  }

  virtual ~MarkAsReadResponse() noexcept;

  bool operator == (const MarkAsReadResponse & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MarkAsReadResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MarkAsReadResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MarkAsReadResponse &a, MarkAsReadResponse &b);

std::ostream& operator<<(std::ostream& out, const MarkAsReadResponse& obj);

typedef struct _SubscriptionState__isset {
  _SubscriptionState__isset() : subscriptionId(false), ttlMillis(false) {}
  bool subscriptionId :1;
  bool ttlMillis :1;
} _SubscriptionState__isset;

class SubscriptionState : public virtual ::apache::thrift::TBase {
 public:

  SubscriptionState(const SubscriptionState&);
  SubscriptionState& operator=(const SubscriptionState&);
  SubscriptionState() : subscriptionId(0), ttlMillis(0) {
  }

  virtual ~SubscriptionState() noexcept;
  int64_t subscriptionId;
  int64_t ttlMillis;

  _SubscriptionState__isset __isset;

  void __set_subscriptionId(const int64_t val);

  void __set_ttlMillis(const int64_t val);

  bool operator == (const SubscriptionState & rhs) const
  {
    if (!(subscriptionId == rhs.subscriptionId))
      return false;
    if (!(ttlMillis == rhs.ttlMillis))
      return false;
    return true;
  }
  bool operator != (const SubscriptionState &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SubscriptionState & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SubscriptionState &a, SubscriptionState &b);

std::ostream& operator<<(std::ostream& out, const SubscriptionState& obj);

typedef struct _ApproveSquareMembersResponse__isset {
  _ApproveSquareMembersResponse__isset() : approvedMembers(false), status(false) {}
  bool approvedMembers :1;
  bool status :1;
} _ApproveSquareMembersResponse__isset;

class ApproveSquareMembersResponse : public virtual ::apache::thrift::TBase {
 public:

  ApproveSquareMembersResponse(const ApproveSquareMembersResponse&);
  ApproveSquareMembersResponse& operator=(const ApproveSquareMembersResponse&);
  ApproveSquareMembersResponse() {
  }

  virtual ~ApproveSquareMembersResponse() noexcept;
  std::vector<SquareMember>  approvedMembers;
  SquareStatus status;

  _ApproveSquareMembersResponse__isset __isset;

  void __set_approvedMembers(const std::vector<SquareMember> & val);

  void __set_status(const SquareStatus& val);

  bool operator == (const ApproveSquareMembersResponse & rhs) const
  {
    if (!(approvedMembers == rhs.approvedMembers))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const ApproveSquareMembersResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApproveSquareMembersResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ApproveSquareMembersResponse &a, ApproveSquareMembersResponse &b);

std::ostream& operator<<(std::ostream& out, const ApproveSquareMembersResponse& obj);

typedef struct _ApproveSquareMembersRequest__isset {
  _ApproveSquareMembersRequest__isset() : squareMid(false), requestedMemberMids(false) {}
  bool squareMid :1;
  bool requestedMemberMids :1;
} _ApproveSquareMembersRequest__isset;

class ApproveSquareMembersRequest : public virtual ::apache::thrift::TBase {
 public:

  ApproveSquareMembersRequest(const ApproveSquareMembersRequest&);
  ApproveSquareMembersRequest& operator=(const ApproveSquareMembersRequest&);
  ApproveSquareMembersRequest() : squareMid() {
  }

  virtual ~ApproveSquareMembersRequest() noexcept;
  std::string squareMid;
  std::vector<std::string>  requestedMemberMids;

  _ApproveSquareMembersRequest__isset __isset;

  void __set_squareMid(const std::string& val);

  void __set_requestedMemberMids(const std::vector<std::string> & val);

  bool operator == (const ApproveSquareMembersRequest & rhs) const
  {
    if (!(squareMid == rhs.squareMid))
      return false;
    if (!(requestedMemberMids == rhs.requestedMemberMids))
      return false;
    return true;
  }
  bool operator != (const ApproveSquareMembersRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApproveSquareMembersRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ApproveSquareMembersRequest &a, ApproveSquareMembersRequest &b);

std::ostream& operator<<(std::ostream& out, const ApproveSquareMembersRequest& obj);

typedef struct _CreateSquareChatResponse__isset {
  _CreateSquareChatResponse__isset() : squareChat(false), squareChatStatus(false), squareChatMember(false) {}
  bool squareChat :1;
  bool squareChatStatus :1;
  bool squareChatMember :1;
} _CreateSquareChatResponse__isset;

class CreateSquareChatResponse : public virtual ::apache::thrift::TBase {
 public:

  CreateSquareChatResponse(const CreateSquareChatResponse&);
  CreateSquareChatResponse& operator=(const CreateSquareChatResponse&);
  CreateSquareChatResponse() {
  }

  virtual ~CreateSquareChatResponse() noexcept;
  SquareChat squareChat;
  SquareChatStatus squareChatStatus;
  SquareChatMember squareChatMember;

  _CreateSquareChatResponse__isset __isset;

  void __set_squareChat(const SquareChat& val);

  void __set_squareChatStatus(const SquareChatStatus& val);

  void __set_squareChatMember(const SquareChatMember& val);

  bool operator == (const CreateSquareChatResponse & rhs) const
  {
    if (!(squareChat == rhs.squareChat))
      return false;
    if (!(squareChatStatus == rhs.squareChatStatus))
      return false;
    if (!(squareChatMember == rhs.squareChatMember))
      return false;
    return true;
  }
  bool operator != (const CreateSquareChatResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateSquareChatResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CreateSquareChatResponse &a, CreateSquareChatResponse &b);

std::ostream& operator<<(std::ostream& out, const CreateSquareChatResponse& obj);

typedef struct _CreateSquareChatRequest__isset {
  _CreateSquareChatRequest__isset() : reqSeq(false), squareChat(false), squareMemberMids(false) {}
  bool reqSeq :1;
  bool squareChat :1;
  bool squareMemberMids :1;
} _CreateSquareChatRequest__isset;

class CreateSquareChatRequest : public virtual ::apache::thrift::TBase {
 public:

  CreateSquareChatRequest(const CreateSquareChatRequest&);
  CreateSquareChatRequest& operator=(const CreateSquareChatRequest&);
  CreateSquareChatRequest() : reqSeq(0) {
  }

  virtual ~CreateSquareChatRequest() noexcept;
  int32_t reqSeq;
  SquareChat squareChat;
  std::vector<std::string>  squareMemberMids;

  _CreateSquareChatRequest__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_squareChat(const SquareChat& val);

  void __set_squareMemberMids(const std::vector<std::string> & val);

  bool operator == (const CreateSquareChatRequest & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(squareChat == rhs.squareChat))
      return false;
    if (!(squareMemberMids == rhs.squareMemberMids))
      return false;
    return true;
  }
  bool operator != (const CreateSquareChatRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateSquareChatRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CreateSquareChatRequest &a, CreateSquareChatRequest &b);

std::ostream& operator<<(std::ostream& out, const CreateSquareChatRequest& obj);

typedef struct _CreateSquareResponse__isset {
  _CreateSquareResponse__isset() : square(false), creator(false), authority(false), status(false) {}
  bool square :1;
  bool creator :1;
  bool authority :1;
  bool status :1;
} _CreateSquareResponse__isset;

class CreateSquareResponse : public virtual ::apache::thrift::TBase {
 public:

  CreateSquareResponse(const CreateSquareResponse&);
  CreateSquareResponse& operator=(const CreateSquareResponse&);
  CreateSquareResponse() {
  }

  virtual ~CreateSquareResponse() noexcept;
  Square square;
  SquareMember creator;
  SquareAuthority authority;
  SquareStatus status;

  _CreateSquareResponse__isset __isset;

  void __set_square(const Square& val);

  void __set_creator(const SquareMember& val);

  void __set_authority(const SquareAuthority& val);

  void __set_status(const SquareStatus& val);

  bool operator == (const CreateSquareResponse & rhs) const
  {
    if (!(square == rhs.square))
      return false;
    if (!(creator == rhs.creator))
      return false;
    if (!(authority == rhs.authority))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const CreateSquareResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateSquareResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CreateSquareResponse &a, CreateSquareResponse &b);

std::ostream& operator<<(std::ostream& out, const CreateSquareResponse& obj);

typedef struct _CreateSquareRequest__isset {
  _CreateSquareRequest__isset() : reqSeq(false), square(false), creator(false) {}
  bool reqSeq :1;
  bool square :1;
  bool creator :1;
} _CreateSquareRequest__isset;

class CreateSquareRequest : public virtual ::apache::thrift::TBase {
 public:

  CreateSquareRequest(const CreateSquareRequest&);
  CreateSquareRequest& operator=(const CreateSquareRequest&);
  CreateSquareRequest() : reqSeq(0) {
  }

  virtual ~CreateSquareRequest() noexcept;
  int32_t reqSeq;
  Square square;
  SquareMember creator;

  _CreateSquareRequest__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_square(const Square& val);

  void __set_creator(const SquareMember& val);

  bool operator == (const CreateSquareRequest & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(square == rhs.square))
      return false;
    if (!(creator == rhs.creator))
      return false;
    return true;
  }
  bool operator != (const CreateSquareRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateSquareRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CreateSquareRequest &a, CreateSquareRequest &b);

std::ostream& operator<<(std::ostream& out, const CreateSquareRequest& obj);


class DeleteSquareResponse : public virtual ::apache::thrift::TBase {
 public:

  DeleteSquareResponse(const DeleteSquareResponse&);
  DeleteSquareResponse& operator=(const DeleteSquareResponse&);
  DeleteSquareResponse() {
  }

  virtual ~DeleteSquareResponse() noexcept;

  bool operator == (const DeleteSquareResponse & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DeleteSquareResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteSquareResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeleteSquareResponse &a, DeleteSquareResponse &b);

std::ostream& operator<<(std::ostream& out, const DeleteSquareResponse& obj);

typedef struct _DeleteSquareRequest__isset {
  _DeleteSquareRequest__isset() : mid(false), revision(false) {}
  bool mid :1;
  bool revision :1;
} _DeleteSquareRequest__isset;

class DeleteSquareRequest : public virtual ::apache::thrift::TBase {
 public:

  DeleteSquareRequest(const DeleteSquareRequest&);
  DeleteSquareRequest& operator=(const DeleteSquareRequest&);
  DeleteSquareRequest() : mid(), revision(0) {
  }

  virtual ~DeleteSquareRequest() noexcept;
  std::string mid;
  int64_t revision;

  _DeleteSquareRequest__isset __isset;

  void __set_mid(const std::string& val);

  void __set_revision(const int64_t val);

  bool operator == (const DeleteSquareRequest & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    if (!(revision == rhs.revision))
      return false;
    return true;
  }
  bool operator != (const DeleteSquareRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteSquareRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeleteSquareRequest &a, DeleteSquareRequest &b);

std::ostream& operator<<(std::ostream& out, const DeleteSquareRequest& obj);


class DestroyMessageResponse : public virtual ::apache::thrift::TBase {
 public:

  DestroyMessageResponse(const DestroyMessageResponse&);
  DestroyMessageResponse& operator=(const DestroyMessageResponse&);
  DestroyMessageResponse() {
  }

  virtual ~DestroyMessageResponse() noexcept;

  bool operator == (const DestroyMessageResponse & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DestroyMessageResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DestroyMessageResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DestroyMessageResponse &a, DestroyMessageResponse &b);

std::ostream& operator<<(std::ostream& out, const DestroyMessageResponse& obj);

typedef struct _DestroyMessageRequest__isset {
  _DestroyMessageRequest__isset() : squareChatMid(false), messageId(false) {}
  bool squareChatMid :1;
  bool messageId :1;
} _DestroyMessageRequest__isset;

class DestroyMessageRequest : public virtual ::apache::thrift::TBase {
 public:

  DestroyMessageRequest(const DestroyMessageRequest&);
  DestroyMessageRequest& operator=(const DestroyMessageRequest&);
  DestroyMessageRequest() : squareChatMid(), messageId() {
  }

  virtual ~DestroyMessageRequest() noexcept;
  std::string squareChatMid;
  std::string messageId;

  _DestroyMessageRequest__isset __isset;

  void __set_squareChatMid(const std::string& val);

  void __set_messageId(const std::string& val);

  bool operator == (const DestroyMessageRequest & rhs) const
  {
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    if (!(messageId == rhs.messageId))
      return false;
    return true;
  }
  bool operator != (const DestroyMessageRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DestroyMessageRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DestroyMessageRequest &a, DestroyMessageRequest &b);

std::ostream& operator<<(std::ostream& out, const DestroyMessageRequest& obj);

typedef struct _GetSquareChatMembersRequest__isset {
  _GetSquareChatMembersRequest__isset() : squareChatMid(false), continuationToken(false), limit(false) {}
  bool squareChatMid :1;
  bool continuationToken :1;
  bool limit :1;
} _GetSquareChatMembersRequest__isset;

class GetSquareChatMembersRequest : public virtual ::apache::thrift::TBase {
 public:

  GetSquareChatMembersRequest(const GetSquareChatMembersRequest&);
  GetSquareChatMembersRequest& operator=(const GetSquareChatMembersRequest&);
  GetSquareChatMembersRequest() : squareChatMid(), continuationToken(), limit(0) {
  }

  virtual ~GetSquareChatMembersRequest() noexcept;
  std::string squareChatMid;
  std::string continuationToken;
  int32_t limit;

  _GetSquareChatMembersRequest__isset __isset;

  void __set_squareChatMid(const std::string& val);

  void __set_continuationToken(const std::string& val);

  void __set_limit(const int32_t val);

  bool operator == (const GetSquareChatMembersRequest & rhs) const
  {
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    if (!(continuationToken == rhs.continuationToken))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const GetSquareChatMembersRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetSquareChatMembersRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetSquareChatMembersRequest &a, GetSquareChatMembersRequest &b);

std::ostream& operator<<(std::ostream& out, const GetSquareChatMembersRequest& obj);

typedef struct _GetSquareChatMembersResponse__isset {
  _GetSquareChatMembersResponse__isset() : squareChatMembers(false), continuationToken(false) {}
  bool squareChatMembers :1;
  bool continuationToken :1;
} _GetSquareChatMembersResponse__isset;

class GetSquareChatMembersResponse : public virtual ::apache::thrift::TBase {
 public:

  GetSquareChatMembersResponse(const GetSquareChatMembersResponse&);
  GetSquareChatMembersResponse& operator=(const GetSquareChatMembersResponse&);
  GetSquareChatMembersResponse() : continuationToken() {
  }

  virtual ~GetSquareChatMembersResponse() noexcept;
  SquareMember squareChatMembers;
  std::string continuationToken;

  _GetSquareChatMembersResponse__isset __isset;

  void __set_squareChatMembers(const SquareMember& val);

  void __set_continuationToken(const std::string& val);

  bool operator == (const GetSquareChatMembersResponse & rhs) const
  {
    if (!(squareChatMembers == rhs.squareChatMembers))
      return false;
    if (!(continuationToken == rhs.continuationToken))
      return false;
    return true;
  }
  bool operator != (const GetSquareChatMembersResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetSquareChatMembersResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetSquareChatMembersResponse &a, GetSquareChatMembersResponse &b);

std::ostream& operator<<(std::ostream& out, const GetSquareChatMembersResponse& obj);

typedef struct _GetSquareChatStatusRequest__isset {
  _GetSquareChatStatusRequest__isset() : squareChatMid(false) {}
  bool squareChatMid :1;
} _GetSquareChatStatusRequest__isset;

class GetSquareChatStatusRequest : public virtual ::apache::thrift::TBase {
 public:

  GetSquareChatStatusRequest(const GetSquareChatStatusRequest&);
  GetSquareChatStatusRequest& operator=(const GetSquareChatStatusRequest&);
  GetSquareChatStatusRequest() : squareChatMid() {
  }

  virtual ~GetSquareChatStatusRequest() noexcept;
  std::string squareChatMid;

  _GetSquareChatStatusRequest__isset __isset;

  void __set_squareChatMid(const std::string& val);

  bool operator == (const GetSquareChatStatusRequest & rhs) const
  {
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    return true;
  }
  bool operator != (const GetSquareChatStatusRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetSquareChatStatusRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetSquareChatStatusRequest &a, GetSquareChatStatusRequest &b);

std::ostream& operator<<(std::ostream& out, const GetSquareChatStatusRequest& obj);

typedef struct _GetSquareChatStatusResponse__isset {
  _GetSquareChatStatusResponse__isset() : chatStatus(false) {}
  bool chatStatus :1;
} _GetSquareChatStatusResponse__isset;

class GetSquareChatStatusResponse : public virtual ::apache::thrift::TBase {
 public:

  GetSquareChatStatusResponse(const GetSquareChatStatusResponse&);
  GetSquareChatStatusResponse& operator=(const GetSquareChatStatusResponse&);
  GetSquareChatStatusResponse() {
  }

  virtual ~GetSquareChatStatusResponse() noexcept;
  SquareChatStatus chatStatus;

  _GetSquareChatStatusResponse__isset __isset;

  void __set_chatStatus(const SquareChatStatus& val);

  bool operator == (const GetSquareChatStatusResponse & rhs) const
  {
    if (!(chatStatus == rhs.chatStatus))
      return false;
    return true;
  }
  bool operator != (const GetSquareChatStatusResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetSquareChatStatusResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetSquareChatStatusResponse &a, GetSquareChatStatusResponse &b);

std::ostream& operator<<(std::ostream& out, const GetSquareChatStatusResponse& obj);

typedef struct _GetSquareChatRequest__isset {
  _GetSquareChatRequest__isset() : squareChatMid(false) {}
  bool squareChatMid :1;
} _GetSquareChatRequest__isset;

class GetSquareChatRequest : public virtual ::apache::thrift::TBase {
 public:

  GetSquareChatRequest(const GetSquareChatRequest&);
  GetSquareChatRequest& operator=(const GetSquareChatRequest&);
  GetSquareChatRequest() : squareChatMid() {
  }

  virtual ~GetSquareChatRequest() noexcept;
  std::string squareChatMid;

  _GetSquareChatRequest__isset __isset;

  void __set_squareChatMid(const std::string& val);

  bool operator == (const GetSquareChatRequest & rhs) const
  {
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    return true;
  }
  bool operator != (const GetSquareChatRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetSquareChatRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetSquareChatRequest &a, GetSquareChatRequest &b);

std::ostream& operator<<(std::ostream& out, const GetSquareChatRequest& obj);

typedef struct _GetSquareChatResponse__isset {
  _GetSquareChatResponse__isset() : squareChat(false), squareChatMember(false), squareChatStatus(false) {}
  bool squareChat :1;
  bool squareChatMember :1;
  bool squareChatStatus :1;
} _GetSquareChatResponse__isset;

class GetSquareChatResponse : public virtual ::apache::thrift::TBase {
 public:

  GetSquareChatResponse(const GetSquareChatResponse&);
  GetSquareChatResponse& operator=(const GetSquareChatResponse&);
  GetSquareChatResponse() {
  }

  virtual ~GetSquareChatResponse() noexcept;
  SquareChat squareChat;
  SquareChatMember squareChatMember;
  SquareChatStatus squareChatStatus;

  _GetSquareChatResponse__isset __isset;

  void __set_squareChat(const SquareChat& val);

  void __set_squareChatMember(const SquareChatMember& val);

  void __set_squareChatStatus(const SquareChatStatus& val);

  bool operator == (const GetSquareChatResponse & rhs) const
  {
    if (!(squareChat == rhs.squareChat))
      return false;
    if (!(squareChatMember == rhs.squareChatMember))
      return false;
    if (!(squareChatStatus == rhs.squareChatStatus))
      return false;
    return true;
  }
  bool operator != (const GetSquareChatResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetSquareChatResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetSquareChatResponse &a, GetSquareChatResponse &b);

std::ostream& operator<<(std::ostream& out, const GetSquareChatResponse& obj);

typedef struct _GetSquareAuthorityRequest__isset {
  _GetSquareAuthorityRequest__isset() : squareMid(false) {}
  bool squareMid :1;
} _GetSquareAuthorityRequest__isset;

class GetSquareAuthorityRequest : public virtual ::apache::thrift::TBase {
 public:

  GetSquareAuthorityRequest(const GetSquareAuthorityRequest&);
  GetSquareAuthorityRequest& operator=(const GetSquareAuthorityRequest&);
  GetSquareAuthorityRequest() : squareMid() {
  }

  virtual ~GetSquareAuthorityRequest() noexcept;
  std::string squareMid;

  _GetSquareAuthorityRequest__isset __isset;

  void __set_squareMid(const std::string& val);

  bool operator == (const GetSquareAuthorityRequest & rhs) const
  {
    if (!(squareMid == rhs.squareMid))
      return false;
    return true;
  }
  bool operator != (const GetSquareAuthorityRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetSquareAuthorityRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetSquareAuthorityRequest &a, GetSquareAuthorityRequest &b);

std::ostream& operator<<(std::ostream& out, const GetSquareAuthorityRequest& obj);

typedef struct _GetSquareAuthorityResponse__isset {
  _GetSquareAuthorityResponse__isset() : authority(false) {}
  bool authority :1;
} _GetSquareAuthorityResponse__isset;

class GetSquareAuthorityResponse : public virtual ::apache::thrift::TBase {
 public:

  GetSquareAuthorityResponse(const GetSquareAuthorityResponse&);
  GetSquareAuthorityResponse& operator=(const GetSquareAuthorityResponse&);
  GetSquareAuthorityResponse() {
  }

  virtual ~GetSquareAuthorityResponse() noexcept;
  SquareAuthority authority;

  _GetSquareAuthorityResponse__isset __isset;

  void __set_authority(const SquareAuthority& val);

  bool operator == (const GetSquareAuthorityResponse & rhs) const
  {
    if (!(authority == rhs.authority))
      return false;
    return true;
  }
  bool operator != (const GetSquareAuthorityResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetSquareAuthorityResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetSquareAuthorityResponse &a, GetSquareAuthorityResponse &b);

std::ostream& operator<<(std::ostream& out, const GetSquareAuthorityResponse& obj);

typedef struct _GetJoinedSquaresRequest__isset {
  _GetJoinedSquaresRequest__isset() : continuationToken(false), limit(false) {}
  bool continuationToken :1;
  bool limit :1;
} _GetJoinedSquaresRequest__isset;

class GetJoinedSquaresRequest : public virtual ::apache::thrift::TBase {
 public:

  GetJoinedSquaresRequest(const GetJoinedSquaresRequest&);
  GetJoinedSquaresRequest& operator=(const GetJoinedSquaresRequest&);
  GetJoinedSquaresRequest() : continuationToken(), limit(0) {
  }

  virtual ~GetJoinedSquaresRequest() noexcept;
  std::string continuationToken;
  int32_t limit;

  _GetJoinedSquaresRequest__isset __isset;

  void __set_continuationToken(const std::string& val);

  void __set_limit(const int32_t val);

  bool operator == (const GetJoinedSquaresRequest & rhs) const
  {
    if (!(continuationToken == rhs.continuationToken))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const GetJoinedSquaresRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetJoinedSquaresRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetJoinedSquaresRequest &a, GetJoinedSquaresRequest &b);

std::ostream& operator<<(std::ostream& out, const GetJoinedSquaresRequest& obj);

typedef struct _GetJoinedSquaresResponse__isset {
  _GetJoinedSquaresResponse__isset() : squares(false), members(false), authorities(false), statuses(false), continuationToken(false), noteStatuses(false) {}
  bool squares :1;
  bool members :1;
  bool authorities :1;
  bool statuses :1;
  bool continuationToken :1;
  bool noteStatuses :1;
} _GetJoinedSquaresResponse__isset;

class GetJoinedSquaresResponse : public virtual ::apache::thrift::TBase {
 public:

  GetJoinedSquaresResponse(const GetJoinedSquaresResponse&);
  GetJoinedSquaresResponse& operator=(const GetJoinedSquaresResponse&);
  GetJoinedSquaresResponse() : continuationToken() {
  }

  virtual ~GetJoinedSquaresResponse() noexcept;
  std::vector<Square>  squares;
  std::map<std::string, SquareMember>  members;
  std::map<std::string, SquareAuthority>  authorities;
  std::map<std::string, SquareStatus>  statuses;
  std::string continuationToken;
  std::map<std::string, NoteStatus>  noteStatuses;

  _GetJoinedSquaresResponse__isset __isset;

  void __set_squares(const std::vector<Square> & val);

  void __set_members(const std::map<std::string, SquareMember> & val);

  void __set_authorities(const std::map<std::string, SquareAuthority> & val);

  void __set_statuses(const std::map<std::string, SquareStatus> & val);

  void __set_continuationToken(const std::string& val);

  void __set_noteStatuses(const std::map<std::string, NoteStatus> & val);

  bool operator == (const GetJoinedSquaresResponse & rhs) const
  {
    if (!(squares == rhs.squares))
      return false;
    if (!(members == rhs.members))
      return false;
    if (!(authorities == rhs.authorities))
      return false;
    if (!(statuses == rhs.statuses))
      return false;
    if (!(continuationToken == rhs.continuationToken))
      return false;
    if (!(noteStatuses == rhs.noteStatuses))
      return false;
    return true;
  }
  bool operator != (const GetJoinedSquaresResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetJoinedSquaresResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetJoinedSquaresResponse &a, GetJoinedSquaresResponse &b);

std::ostream& operator<<(std::ostream& out, const GetJoinedSquaresResponse& obj);

typedef struct _GetJoinableSquareChatsRequest__isset {
  _GetJoinableSquareChatsRequest__isset() : squareMid(false), continuationToken(false), limit(false) {}
  bool squareMid :1;
  bool continuationToken :1;
  bool limit :1;
} _GetJoinableSquareChatsRequest__isset;

class GetJoinableSquareChatsRequest : public virtual ::apache::thrift::TBase {
 public:

  GetJoinableSquareChatsRequest(const GetJoinableSquareChatsRequest&);
  GetJoinableSquareChatsRequest& operator=(const GetJoinableSquareChatsRequest&);
  GetJoinableSquareChatsRequest() : squareMid(), continuationToken(), limit(0) {
  }

  virtual ~GetJoinableSquareChatsRequest() noexcept;
  std::string squareMid;
  std::string continuationToken;
  int32_t limit;

  _GetJoinableSquareChatsRequest__isset __isset;

  void __set_squareMid(const std::string& val);

  void __set_continuationToken(const std::string& val);

  void __set_limit(const int32_t val);

  bool operator == (const GetJoinableSquareChatsRequest & rhs) const
  {
    if (!(squareMid == rhs.squareMid))
      return false;
    if (!(continuationToken == rhs.continuationToken))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const GetJoinableSquareChatsRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetJoinableSquareChatsRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetJoinableSquareChatsRequest &a, GetJoinableSquareChatsRequest &b);

std::ostream& operator<<(std::ostream& out, const GetJoinableSquareChatsRequest& obj);

typedef struct _GetJoinableSquareChatsResponse__isset {
  _GetJoinableSquareChatsResponse__isset() : squareChats(false), continuationToken(false), totalSquareChatCount(false), squareChatStatuses(false) {}
  bool squareChats :1;
  bool continuationToken :1;
  bool totalSquareChatCount :1;
  bool squareChatStatuses :1;
} _GetJoinableSquareChatsResponse__isset;

class GetJoinableSquareChatsResponse : public virtual ::apache::thrift::TBase {
 public:

  GetJoinableSquareChatsResponse(const GetJoinableSquareChatsResponse&);
  GetJoinableSquareChatsResponse& operator=(const GetJoinableSquareChatsResponse&);
  GetJoinableSquareChatsResponse() : continuationToken(), totalSquareChatCount(0) {
  }

  virtual ~GetJoinableSquareChatsResponse() noexcept;
  std::vector<SquareChat>  squareChats;
  std::string continuationToken;
  int32_t totalSquareChatCount;
  std::map<std::string, SquareChatStatus>  squareChatStatuses;

  _GetJoinableSquareChatsResponse__isset __isset;

  void __set_squareChats(const std::vector<SquareChat> & val);

  void __set_continuationToken(const std::string& val);

  void __set_totalSquareChatCount(const int32_t val);

  void __set_squareChatStatuses(const std::map<std::string, SquareChatStatus> & val);

  bool operator == (const GetJoinableSquareChatsResponse & rhs) const
  {
    if (!(squareChats == rhs.squareChats))
      return false;
    if (!(continuationToken == rhs.continuationToken))
      return false;
    if (!(totalSquareChatCount == rhs.totalSquareChatCount))
      return false;
    if (!(squareChatStatuses == rhs.squareChatStatuses))
      return false;
    return true;
  }
  bool operator != (const GetJoinableSquareChatsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetJoinableSquareChatsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetJoinableSquareChatsResponse &a, GetJoinableSquareChatsResponse &b);

std::ostream& operator<<(std::ostream& out, const GetJoinableSquareChatsResponse& obj);

typedef struct _GetInvitationTicketUrlRequest__isset {
  _GetInvitationTicketUrlRequest__isset() : mid(false) {}
  bool mid :1;
} _GetInvitationTicketUrlRequest__isset;

class GetInvitationTicketUrlRequest : public virtual ::apache::thrift::TBase {
 public:

  GetInvitationTicketUrlRequest(const GetInvitationTicketUrlRequest&);
  GetInvitationTicketUrlRequest& operator=(const GetInvitationTicketUrlRequest&);
  GetInvitationTicketUrlRequest() : mid() {
  }

  virtual ~GetInvitationTicketUrlRequest() noexcept;
  std::string mid;

  _GetInvitationTicketUrlRequest__isset __isset;

  void __set_mid(const std::string& val);

  bool operator == (const GetInvitationTicketUrlRequest & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    return true;
  }
  bool operator != (const GetInvitationTicketUrlRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetInvitationTicketUrlRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetInvitationTicketUrlRequest &a, GetInvitationTicketUrlRequest &b);

std::ostream& operator<<(std::ostream& out, const GetInvitationTicketUrlRequest& obj);

typedef struct _GetInvitationTicketUrlResponse__isset {
  _GetInvitationTicketUrlResponse__isset() : invitationURL(false) {}
  bool invitationURL :1;
} _GetInvitationTicketUrlResponse__isset;

class GetInvitationTicketUrlResponse : public virtual ::apache::thrift::TBase {
 public:

  GetInvitationTicketUrlResponse(const GetInvitationTicketUrlResponse&);
  GetInvitationTicketUrlResponse& operator=(const GetInvitationTicketUrlResponse&);
  GetInvitationTicketUrlResponse() : invitationURL() {
  }

  virtual ~GetInvitationTicketUrlResponse() noexcept;
  std::string invitationURL;

  _GetInvitationTicketUrlResponse__isset __isset;

  void __set_invitationURL(const std::string& val);

  bool operator == (const GetInvitationTicketUrlResponse & rhs) const
  {
    if (!(invitationURL == rhs.invitationURL))
      return false;
    return true;
  }
  bool operator != (const GetInvitationTicketUrlResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetInvitationTicketUrlResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetInvitationTicketUrlResponse &a, GetInvitationTicketUrlResponse &b);

std::ostream& operator<<(std::ostream& out, const GetInvitationTicketUrlResponse& obj);

typedef struct _LeaveSquareRequest__isset {
  _LeaveSquareRequest__isset() : squareMid(false) {}
  bool squareMid :1;
} _LeaveSquareRequest__isset;

class LeaveSquareRequest : public virtual ::apache::thrift::TBase {
 public:

  LeaveSquareRequest(const LeaveSquareRequest&);
  LeaveSquareRequest& operator=(const LeaveSquareRequest&);
  LeaveSquareRequest() : squareMid() {
  }

  virtual ~LeaveSquareRequest() noexcept;
  std::string squareMid;

  _LeaveSquareRequest__isset __isset;

  void __set_squareMid(const std::string& val);

  bool operator == (const LeaveSquareRequest & rhs) const
  {
    if (!(squareMid == rhs.squareMid))
      return false;
    return true;
  }
  bool operator != (const LeaveSquareRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LeaveSquareRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LeaveSquareRequest &a, LeaveSquareRequest &b);

std::ostream& operator<<(std::ostream& out, const LeaveSquareRequest& obj);


class LeaveSquareResponse : public virtual ::apache::thrift::TBase {
 public:

  LeaveSquareResponse(const LeaveSquareResponse&);
  LeaveSquareResponse& operator=(const LeaveSquareResponse&);
  LeaveSquareResponse() {
  }

  virtual ~LeaveSquareResponse() noexcept;

  bool operator == (const LeaveSquareResponse & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LeaveSquareResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LeaveSquareResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LeaveSquareResponse &a, LeaveSquareResponse &b);

std::ostream& operator<<(std::ostream& out, const LeaveSquareResponse& obj);

typedef struct _LeaveSquareChatRequest__isset {
  _LeaveSquareChatRequest__isset() : squareChatMid(false), sayGoodbye(false), squareChatMemberRevision(false) {}
  bool squareChatMid :1;
  bool sayGoodbye :1;
  bool squareChatMemberRevision :1;
} _LeaveSquareChatRequest__isset;

class LeaveSquareChatRequest : public virtual ::apache::thrift::TBase {
 public:

  LeaveSquareChatRequest(const LeaveSquareChatRequest&);
  LeaveSquareChatRequest& operator=(const LeaveSquareChatRequest&);
  LeaveSquareChatRequest() : squareChatMid(), sayGoodbye(0), squareChatMemberRevision(0) {
  }

  virtual ~LeaveSquareChatRequest() noexcept;
  std::string squareChatMid;
  bool sayGoodbye;
  int64_t squareChatMemberRevision;

  _LeaveSquareChatRequest__isset __isset;

  void __set_squareChatMid(const std::string& val);

  void __set_sayGoodbye(const bool val);

  void __set_squareChatMemberRevision(const int64_t val);

  bool operator == (const LeaveSquareChatRequest & rhs) const
  {
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    if (!(sayGoodbye == rhs.sayGoodbye))
      return false;
    if (!(squareChatMemberRevision == rhs.squareChatMemberRevision))
      return false;
    return true;
  }
  bool operator != (const LeaveSquareChatRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LeaveSquareChatRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LeaveSquareChatRequest &a, LeaveSquareChatRequest &b);

std::ostream& operator<<(std::ostream& out, const LeaveSquareChatRequest& obj);


class LeaveSquareChatResponse : public virtual ::apache::thrift::TBase {
 public:

  LeaveSquareChatResponse(const LeaveSquareChatResponse&);
  LeaveSquareChatResponse& operator=(const LeaveSquareChatResponse&);
  LeaveSquareChatResponse() {
  }

  virtual ~LeaveSquareChatResponse() noexcept;

  bool operator == (const LeaveSquareChatResponse & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LeaveSquareChatResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LeaveSquareChatResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LeaveSquareChatResponse &a, LeaveSquareChatResponse &b);

std::ostream& operator<<(std::ostream& out, const LeaveSquareChatResponse& obj);

typedef struct _SquareMemberSearchOption__isset {
  _SquareMemberSearchOption__isset() : membershipState(false), memberRoles(false), displayName(false), ableToReceiveMessage(false), ableToReceiveFriendRequest(false), chatMidToExcludeMembers(false), includingMe(false) {}
  bool membershipState :1;
  bool memberRoles :1;
  bool displayName :1;
  bool ableToReceiveMessage :1;
  bool ableToReceiveFriendRequest :1;
  bool chatMidToExcludeMembers :1;
  bool includingMe :1;
} _SquareMemberSearchOption__isset;

class SquareMemberSearchOption : public virtual ::apache::thrift::TBase {
 public:

  SquareMemberSearchOption(const SquareMemberSearchOption&);
  SquareMemberSearchOption& operator=(const SquareMemberSearchOption&);
  SquareMemberSearchOption() : membershipState((SquareMembershipState::type)0), displayName(), ableToReceiveMessage((BooleanState::type)0), ableToReceiveFriendRequest((BooleanState::type)0), chatMidToExcludeMembers(), includingMe(0) {
  }

  virtual ~SquareMemberSearchOption() noexcept;
  /**
   * 
   * @see SquareMembershipState
   */
  SquareMembershipState::type membershipState;
  std::set<SquareMemberRole::type>  memberRoles;
  std::string displayName;
  /**
   * 
   * @see BooleanState
   */
  BooleanState::type ableToReceiveMessage;
  /**
   * 
   * @see BooleanState
   */
  BooleanState::type ableToReceiveFriendRequest;
  std::string chatMidToExcludeMembers;
  bool includingMe;

  _SquareMemberSearchOption__isset __isset;

  void __set_membershipState(const SquareMembershipState::type val);

  void __set_memberRoles(const std::set<SquareMemberRole::type> & val);

  void __set_displayName(const std::string& val);

  void __set_ableToReceiveMessage(const BooleanState::type val);

  void __set_ableToReceiveFriendRequest(const BooleanState::type val);

  void __set_chatMidToExcludeMembers(const std::string& val);

  void __set_includingMe(const bool val);

  bool operator == (const SquareMemberSearchOption & rhs) const
  {
    if (!(membershipState == rhs.membershipState))
      return false;
    if (!(memberRoles == rhs.memberRoles))
      return false;
    if (!(displayName == rhs.displayName))
      return false;
    if (!(ableToReceiveMessage == rhs.ableToReceiveMessage))
      return false;
    if (!(ableToReceiveFriendRequest == rhs.ableToReceiveFriendRequest))
      return false;
    if (!(chatMidToExcludeMembers == rhs.chatMidToExcludeMembers))
      return false;
    if (!(includingMe == rhs.includingMe))
      return false;
    return true;
  }
  bool operator != (const SquareMemberSearchOption &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareMemberSearchOption & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareMemberSearchOption &a, SquareMemberSearchOption &b);

std::ostream& operator<<(std::ostream& out, const SquareMemberSearchOption& obj);

typedef struct _SearchSquareMembersRequest__isset {
  _SearchSquareMembersRequest__isset() : squareMid(false), searchOption(false), continuationToken(false), limit(false) {}
  bool squareMid :1;
  bool searchOption :1;
  bool continuationToken :1;
  bool limit :1;
} _SearchSquareMembersRequest__isset;

class SearchSquareMembersRequest : public virtual ::apache::thrift::TBase {
 public:

  SearchSquareMembersRequest(const SearchSquareMembersRequest&);
  SearchSquareMembersRequest& operator=(const SearchSquareMembersRequest&);
  SearchSquareMembersRequest() : squareMid(), continuationToken(), limit(0) {
  }

  virtual ~SearchSquareMembersRequest() noexcept;
  std::string squareMid;
  SquareMemberSearchOption searchOption;
  std::string continuationToken;
  int32_t limit;

  _SearchSquareMembersRequest__isset __isset;

  void __set_squareMid(const std::string& val);

  void __set_searchOption(const SquareMemberSearchOption& val);

  void __set_continuationToken(const std::string& val);

  void __set_limit(const int32_t val);

  bool operator == (const SearchSquareMembersRequest & rhs) const
  {
    if (!(squareMid == rhs.squareMid))
      return false;
    if (!(searchOption == rhs.searchOption))
      return false;
    if (!(continuationToken == rhs.continuationToken))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const SearchSquareMembersRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SearchSquareMembersRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SearchSquareMembersRequest &a, SearchSquareMembersRequest &b);

std::ostream& operator<<(std::ostream& out, const SearchSquareMembersRequest& obj);

typedef struct _SearchSquareMembersResponse__isset {
  _SearchSquareMembersResponse__isset() : members(false), revision(false), continuationToken(false), totalCount(false) {}
  bool members :1;
  bool revision :1;
  bool continuationToken :1;
  bool totalCount :1;
} _SearchSquareMembersResponse__isset;

class SearchSquareMembersResponse : public virtual ::apache::thrift::TBase {
 public:

  SearchSquareMembersResponse(const SearchSquareMembersResponse&);
  SearchSquareMembersResponse& operator=(const SearchSquareMembersResponse&);
  SearchSquareMembersResponse() : revision(0), continuationToken(), totalCount(0) {
  }

  virtual ~SearchSquareMembersResponse() noexcept;
  std::vector<SquareMember>  members;
  int64_t revision;
  std::string continuationToken;
  int32_t totalCount;

  _SearchSquareMembersResponse__isset __isset;

  void __set_members(const std::vector<SquareMember> & val);

  void __set_revision(const int64_t val);

  void __set_continuationToken(const std::string& val);

  void __set_totalCount(const int32_t val);

  bool operator == (const SearchSquareMembersResponse & rhs) const
  {
    if (!(members == rhs.members))
      return false;
    if (!(revision == rhs.revision))
      return false;
    if (!(continuationToken == rhs.continuationToken))
      return false;
    if (!(totalCount == rhs.totalCount))
      return false;
    return true;
  }
  bool operator != (const SearchSquareMembersResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SearchSquareMembersResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SearchSquareMembersResponse &a, SearchSquareMembersResponse &b);

std::ostream& operator<<(std::ostream& out, const SearchSquareMembersResponse& obj);

typedef struct _FindSquareByInvitationTicketRequest__isset {
  _FindSquareByInvitationTicketRequest__isset() : invitationTicket(false) {}
  bool invitationTicket :1;
} _FindSquareByInvitationTicketRequest__isset;

class FindSquareByInvitationTicketRequest : public virtual ::apache::thrift::TBase {
 public:

  FindSquareByInvitationTicketRequest(const FindSquareByInvitationTicketRequest&);
  FindSquareByInvitationTicketRequest& operator=(const FindSquareByInvitationTicketRequest&);
  FindSquareByInvitationTicketRequest() : invitationTicket() {
  }

  virtual ~FindSquareByInvitationTicketRequest() noexcept;
  std::string invitationTicket;

  _FindSquareByInvitationTicketRequest__isset __isset;

  void __set_invitationTicket(const std::string& val);

  bool operator == (const FindSquareByInvitationTicketRequest & rhs) const
  {
    if (!(invitationTicket == rhs.invitationTicket))
      return false;
    return true;
  }
  bool operator != (const FindSquareByInvitationTicketRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FindSquareByInvitationTicketRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FindSquareByInvitationTicketRequest &a, FindSquareByInvitationTicketRequest &b);

std::ostream& operator<<(std::ostream& out, const FindSquareByInvitationTicketRequest& obj);

typedef struct _FindSquareByInvitationTicketResponse__isset {
  _FindSquareByInvitationTicketResponse__isset() : square(false), myMembership(false), squareAuthority(false), squareStatus(false) {}
  bool square :1;
  bool myMembership :1;
  bool squareAuthority :1;
  bool squareStatus :1;
} _FindSquareByInvitationTicketResponse__isset;

class FindSquareByInvitationTicketResponse : public virtual ::apache::thrift::TBase {
 public:

  FindSquareByInvitationTicketResponse(const FindSquareByInvitationTicketResponse&);
  FindSquareByInvitationTicketResponse& operator=(const FindSquareByInvitationTicketResponse&);
  FindSquareByInvitationTicketResponse() {
  }

  virtual ~FindSquareByInvitationTicketResponse() noexcept;
  Square square;
  SquareMember myMembership;
  SquareAuthority squareAuthority;
  SquareStatus squareStatus;

  _FindSquareByInvitationTicketResponse__isset __isset;

  void __set_square(const Square& val);

  void __set_myMembership(const SquareMember& val);

  void __set_squareAuthority(const SquareAuthority& val);

  void __set_squareStatus(const SquareStatus& val);

  bool operator == (const FindSquareByInvitationTicketResponse & rhs) const
  {
    if (!(square == rhs.square))
      return false;
    if (!(myMembership == rhs.myMembership))
      return false;
    if (!(squareAuthority == rhs.squareAuthority))
      return false;
    if (!(squareStatus == rhs.squareStatus))
      return false;
    return true;
  }
  bool operator != (const FindSquareByInvitationTicketResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FindSquareByInvitationTicketResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FindSquareByInvitationTicketResponse &a, FindSquareByInvitationTicketResponse &b);

std::ostream& operator<<(std::ostream& out, const FindSquareByInvitationTicketResponse& obj);

typedef struct _SquareEventReceiveMessage__isset {
  _SquareEventReceiveMessage__isset() : squareChatMid(false), squareMessage(false) {}
  bool squareChatMid :1;
  bool squareMessage :1;
} _SquareEventReceiveMessage__isset;

class SquareEventReceiveMessage : public virtual ::apache::thrift::TBase {
 public:

  SquareEventReceiveMessage(const SquareEventReceiveMessage&);
  SquareEventReceiveMessage& operator=(const SquareEventReceiveMessage&);
  SquareEventReceiveMessage() : squareChatMid() {
  }

  virtual ~SquareEventReceiveMessage() noexcept;
  std::string squareChatMid;
  SquareMessage squareMessage;

  _SquareEventReceiveMessage__isset __isset;

  void __set_squareChatMid(const std::string& val);

  void __set_squareMessage(const SquareMessage& val);

  bool operator == (const SquareEventReceiveMessage & rhs) const
  {
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    if (!(squareMessage == rhs.squareMessage))
      return false;
    return true;
  }
  bool operator != (const SquareEventReceiveMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareEventReceiveMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareEventReceiveMessage &a, SquareEventReceiveMessage &b);

std::ostream& operator<<(std::ostream& out, const SquareEventReceiveMessage& obj);

typedef struct _SquareEventSendMessage__isset {
  _SquareEventSendMessage__isset() : squareChatMid(false), squareMessage(false), reqSeq(false) {}
  bool squareChatMid :1;
  bool squareMessage :1;
  bool reqSeq :1;
} _SquareEventSendMessage__isset;

class SquareEventSendMessage : public virtual ::apache::thrift::TBase {
 public:

  SquareEventSendMessage(const SquareEventSendMessage&);
  SquareEventSendMessage& operator=(const SquareEventSendMessage&);
  SquareEventSendMessage() : squareChatMid(), reqSeq(0) {
  }

  virtual ~SquareEventSendMessage() noexcept;
  std::string squareChatMid;
  SquareMessage squareMessage;
  int32_t reqSeq;

  _SquareEventSendMessage__isset __isset;

  void __set_squareChatMid(const std::string& val);

  void __set_squareMessage(const SquareMessage& val);

  void __set_reqSeq(const int32_t val);

  bool operator == (const SquareEventSendMessage & rhs) const
  {
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    if (!(squareMessage == rhs.squareMessage))
      return false;
    if (!(reqSeq == rhs.reqSeq))
      return false;
    return true;
  }
  bool operator != (const SquareEventSendMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareEventSendMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareEventSendMessage &a, SquareEventSendMessage &b);

std::ostream& operator<<(std::ostream& out, const SquareEventSendMessage& obj);

typedef struct _SquareEventNotifiedJoinSquareChat__isset {
  _SquareEventNotifiedJoinSquareChat__isset() : squareChatMid(false), joinedMember(false) {}
  bool squareChatMid :1;
  bool joinedMember :1;
} _SquareEventNotifiedJoinSquareChat__isset;

class SquareEventNotifiedJoinSquareChat : public virtual ::apache::thrift::TBase {
 public:

  SquareEventNotifiedJoinSquareChat(const SquareEventNotifiedJoinSquareChat&);
  SquareEventNotifiedJoinSquareChat& operator=(const SquareEventNotifiedJoinSquareChat&);
  SquareEventNotifiedJoinSquareChat() : squareChatMid() {
  }

  virtual ~SquareEventNotifiedJoinSquareChat() noexcept;
  std::string squareChatMid;
  SquareMember joinedMember;

  _SquareEventNotifiedJoinSquareChat__isset __isset;

  void __set_squareChatMid(const std::string& val);

  void __set_joinedMember(const SquareMember& val);

  bool operator == (const SquareEventNotifiedJoinSquareChat & rhs) const
  {
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    if (!(joinedMember == rhs.joinedMember))
      return false;
    return true;
  }
  bool operator != (const SquareEventNotifiedJoinSquareChat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareEventNotifiedJoinSquareChat & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareEventNotifiedJoinSquareChat &a, SquareEventNotifiedJoinSquareChat &b);

std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedJoinSquareChat& obj);

typedef struct _SquareEventNotifiedInviteIntoSquareChat__isset {
  _SquareEventNotifiedInviteIntoSquareChat__isset() : squareChatMid(false), invitees(false), invitor(false), invitorRelation(false) {}
  bool squareChatMid :1;
  bool invitees :1;
  bool invitor :1;
  bool invitorRelation :1;
} _SquareEventNotifiedInviteIntoSquareChat__isset;

class SquareEventNotifiedInviteIntoSquareChat : public virtual ::apache::thrift::TBase {
 public:

  SquareEventNotifiedInviteIntoSquareChat(const SquareEventNotifiedInviteIntoSquareChat&);
  SquareEventNotifiedInviteIntoSquareChat& operator=(const SquareEventNotifiedInviteIntoSquareChat&);
  SquareEventNotifiedInviteIntoSquareChat() : squareChatMid() {
  }

  virtual ~SquareEventNotifiedInviteIntoSquareChat() noexcept;
  std::string squareChatMid;
  std::vector<SquareMember>  invitees;
  SquareMember invitor;
  SquareMemberRelation invitorRelation;

  _SquareEventNotifiedInviteIntoSquareChat__isset __isset;

  void __set_squareChatMid(const std::string& val);

  void __set_invitees(const std::vector<SquareMember> & val);

  void __set_invitor(const SquareMember& val);

  void __set_invitorRelation(const SquareMemberRelation& val);

  bool operator == (const SquareEventNotifiedInviteIntoSquareChat & rhs) const
  {
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    if (!(invitees == rhs.invitees))
      return false;
    if (!(invitor == rhs.invitor))
      return false;
    if (!(invitorRelation == rhs.invitorRelation))
      return false;
    return true;
  }
  bool operator != (const SquareEventNotifiedInviteIntoSquareChat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareEventNotifiedInviteIntoSquareChat & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareEventNotifiedInviteIntoSquareChat &a, SquareEventNotifiedInviteIntoSquareChat &b);

std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedInviteIntoSquareChat& obj);

typedef struct _SquareEventNotifiedLeaveSquareChat__isset {
  _SquareEventNotifiedLeaveSquareChat__isset() : squareChatMid(false), squareMemberMid(false), sayGoodbye(false), squareMember(false) {}
  bool squareChatMid :1;
  bool squareMemberMid :1;
  bool sayGoodbye :1;
  bool squareMember :1;
} _SquareEventNotifiedLeaveSquareChat__isset;

class SquareEventNotifiedLeaveSquareChat : public virtual ::apache::thrift::TBase {
 public:

  SquareEventNotifiedLeaveSquareChat(const SquareEventNotifiedLeaveSquareChat&);
  SquareEventNotifiedLeaveSquareChat& operator=(const SquareEventNotifiedLeaveSquareChat&);
  SquareEventNotifiedLeaveSquareChat() : squareChatMid(), squareMemberMid(), sayGoodbye(0) {
  }

  virtual ~SquareEventNotifiedLeaveSquareChat() noexcept;
  std::string squareChatMid;
  std::string squareMemberMid;
  bool sayGoodbye;
  SquareMember squareMember;

  _SquareEventNotifiedLeaveSquareChat__isset __isset;

  void __set_squareChatMid(const std::string& val);

  void __set_squareMemberMid(const std::string& val);

  void __set_sayGoodbye(const bool val);

  void __set_squareMember(const SquareMember& val);

  bool operator == (const SquareEventNotifiedLeaveSquareChat & rhs) const
  {
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    if (!(squareMemberMid == rhs.squareMemberMid))
      return false;
    if (!(sayGoodbye == rhs.sayGoodbye))
      return false;
    if (!(squareMember == rhs.squareMember))
      return false;
    return true;
  }
  bool operator != (const SquareEventNotifiedLeaveSquareChat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareEventNotifiedLeaveSquareChat & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareEventNotifiedLeaveSquareChat &a, SquareEventNotifiedLeaveSquareChat &b);

std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedLeaveSquareChat& obj);

typedef struct _SquareEventNotifiedDestroyMessage__isset {
  _SquareEventNotifiedDestroyMessage__isset() : squareChatMid(false), messageId(false) {}
  bool squareChatMid :1;
  bool messageId :1;
} _SquareEventNotifiedDestroyMessage__isset;

class SquareEventNotifiedDestroyMessage : public virtual ::apache::thrift::TBase {
 public:

  SquareEventNotifiedDestroyMessage(const SquareEventNotifiedDestroyMessage&);
  SquareEventNotifiedDestroyMessage& operator=(const SquareEventNotifiedDestroyMessage&);
  SquareEventNotifiedDestroyMessage() : squareChatMid(), messageId() {
  }

  virtual ~SquareEventNotifiedDestroyMessage() noexcept;
  std::string squareChatMid;
  std::string messageId;

  _SquareEventNotifiedDestroyMessage__isset __isset;

  void __set_squareChatMid(const std::string& val);

  void __set_messageId(const std::string& val);

  bool operator == (const SquareEventNotifiedDestroyMessage & rhs) const
  {
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    if (!(messageId == rhs.messageId))
      return false;
    return true;
  }
  bool operator != (const SquareEventNotifiedDestroyMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareEventNotifiedDestroyMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareEventNotifiedDestroyMessage &a, SquareEventNotifiedDestroyMessage &b);

std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedDestroyMessage& obj);

typedef struct _SquareEventNotifiedMarkAsRead__isset {
  _SquareEventNotifiedMarkAsRead__isset() : squareChatMid(false), sMemberMid(false), messageId(false) {}
  bool squareChatMid :1;
  bool sMemberMid :1;
  bool messageId :1;
} _SquareEventNotifiedMarkAsRead__isset;

class SquareEventNotifiedMarkAsRead : public virtual ::apache::thrift::TBase {
 public:

  SquareEventNotifiedMarkAsRead(const SquareEventNotifiedMarkAsRead&);
  SquareEventNotifiedMarkAsRead& operator=(const SquareEventNotifiedMarkAsRead&);
  SquareEventNotifiedMarkAsRead() : squareChatMid(), sMemberMid(), messageId() {
  }

  virtual ~SquareEventNotifiedMarkAsRead() noexcept;
  std::string squareChatMid;
  std::string sMemberMid;
  std::string messageId;

  _SquareEventNotifiedMarkAsRead__isset __isset;

  void __set_squareChatMid(const std::string& val);

  void __set_sMemberMid(const std::string& val);

  void __set_messageId(const std::string& val);

  bool operator == (const SquareEventNotifiedMarkAsRead & rhs) const
  {
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    if (!(sMemberMid == rhs.sMemberMid))
      return false;
    if (!(messageId == rhs.messageId))
      return false;
    return true;
  }
  bool operator != (const SquareEventNotifiedMarkAsRead &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareEventNotifiedMarkAsRead & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareEventNotifiedMarkAsRead &a, SquareEventNotifiedMarkAsRead &b);

std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedMarkAsRead& obj);

typedef struct _SquareEventNotifiedUpdateSquareMemberProfile__isset {
  _SquareEventNotifiedUpdateSquareMemberProfile__isset() : squareChatMid(false), squareMember(false) {}
  bool squareChatMid :1;
  bool squareMember :1;
} _SquareEventNotifiedUpdateSquareMemberProfile__isset;

class SquareEventNotifiedUpdateSquareMemberProfile : public virtual ::apache::thrift::TBase {
 public:

  SquareEventNotifiedUpdateSquareMemberProfile(const SquareEventNotifiedUpdateSquareMemberProfile&);
  SquareEventNotifiedUpdateSquareMemberProfile& operator=(const SquareEventNotifiedUpdateSquareMemberProfile&);
  SquareEventNotifiedUpdateSquareMemberProfile() : squareChatMid() {
  }

  virtual ~SquareEventNotifiedUpdateSquareMemberProfile() noexcept;
  std::string squareChatMid;
  SquareMember squareMember;

  _SquareEventNotifiedUpdateSquareMemberProfile__isset __isset;

  void __set_squareChatMid(const std::string& val);

  void __set_squareMember(const SquareMember& val);

  bool operator == (const SquareEventNotifiedUpdateSquareMemberProfile & rhs) const
  {
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    if (!(squareMember == rhs.squareMember))
      return false;
    return true;
  }
  bool operator != (const SquareEventNotifiedUpdateSquareMemberProfile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareEventNotifiedUpdateSquareMemberProfile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareEventNotifiedUpdateSquareMemberProfile &a, SquareEventNotifiedUpdateSquareMemberProfile &b);

std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedUpdateSquareMemberProfile& obj);

typedef struct _SquareEventNotifiedKickoutFromSquare__isset {
  _SquareEventNotifiedKickoutFromSquare__isset() : squareChatMid(false), kickees(false) {}
  bool squareChatMid :1;
  bool kickees :1;
} _SquareEventNotifiedKickoutFromSquare__isset;

class SquareEventNotifiedKickoutFromSquare : public virtual ::apache::thrift::TBase {
 public:

  SquareEventNotifiedKickoutFromSquare(const SquareEventNotifiedKickoutFromSquare&);
  SquareEventNotifiedKickoutFromSquare& operator=(const SquareEventNotifiedKickoutFromSquare&);
  SquareEventNotifiedKickoutFromSquare() : squareChatMid() {
  }

  virtual ~SquareEventNotifiedKickoutFromSquare() noexcept;
  std::string squareChatMid;
  std::vector<SquareMember>  kickees;

  _SquareEventNotifiedKickoutFromSquare__isset __isset;

  void __set_squareChatMid(const std::string& val);

  void __set_kickees(const std::vector<SquareMember> & val);

  bool operator == (const SquareEventNotifiedKickoutFromSquare & rhs) const
  {
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    if (!(kickees == rhs.kickees))
      return false;
    return true;
  }
  bool operator != (const SquareEventNotifiedKickoutFromSquare &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareEventNotifiedKickoutFromSquare & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareEventNotifiedKickoutFromSquare &a, SquareEventNotifiedKickoutFromSquare &b);

std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedKickoutFromSquare& obj);

typedef struct _SquareEventNotifiedShutdownSquare__isset {
  _SquareEventNotifiedShutdownSquare__isset() : squareChatMid(false), square(false) {}
  bool squareChatMid :1;
  bool square :1;
} _SquareEventNotifiedShutdownSquare__isset;

class SquareEventNotifiedShutdownSquare : public virtual ::apache::thrift::TBase {
 public:

  SquareEventNotifiedShutdownSquare(const SquareEventNotifiedShutdownSquare&);
  SquareEventNotifiedShutdownSquare& operator=(const SquareEventNotifiedShutdownSquare&);
  SquareEventNotifiedShutdownSquare() : squareChatMid() {
  }

  virtual ~SquareEventNotifiedShutdownSquare() noexcept;
  std::string squareChatMid;
  Square square;

  _SquareEventNotifiedShutdownSquare__isset __isset;

  void __set_squareChatMid(const std::string& val);

  void __set_square(const Square& val);

  bool operator == (const SquareEventNotifiedShutdownSquare & rhs) const
  {
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    if (!(square == rhs.square))
      return false;
    return true;
  }
  bool operator != (const SquareEventNotifiedShutdownSquare &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareEventNotifiedShutdownSquare & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareEventNotifiedShutdownSquare &a, SquareEventNotifiedShutdownSquare &b);

std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedShutdownSquare& obj);

typedef struct _SquareEventNotifiedDeleteSquareChat__isset {
  _SquareEventNotifiedDeleteSquareChat__isset() : squareChat(false) {}
  bool squareChat :1;
} _SquareEventNotifiedDeleteSquareChat__isset;

class SquareEventNotifiedDeleteSquareChat : public virtual ::apache::thrift::TBase {
 public:

  SquareEventNotifiedDeleteSquareChat(const SquareEventNotifiedDeleteSquareChat&);
  SquareEventNotifiedDeleteSquareChat& operator=(const SquareEventNotifiedDeleteSquareChat&);
  SquareEventNotifiedDeleteSquareChat() {
  }

  virtual ~SquareEventNotifiedDeleteSquareChat() noexcept;
  SquareChat squareChat;

  _SquareEventNotifiedDeleteSquareChat__isset __isset;

  void __set_squareChat(const SquareChat& val);

  bool operator == (const SquareEventNotifiedDeleteSquareChat & rhs) const
  {
    if (!(squareChat == rhs.squareChat))
      return false;
    return true;
  }
  bool operator != (const SquareEventNotifiedDeleteSquareChat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareEventNotifiedDeleteSquareChat & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareEventNotifiedDeleteSquareChat &a, SquareEventNotifiedDeleteSquareChat &b);

std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedDeleteSquareChat& obj);

typedef struct _SquareEventNotifiedUpdateSquareChatProfileName__isset {
  _SquareEventNotifiedUpdateSquareChatProfileName__isset() : squareChatMid(false), editor(false), updatedChatName(false) {}
  bool squareChatMid :1;
  bool editor :1;
  bool updatedChatName :1;
} _SquareEventNotifiedUpdateSquareChatProfileName__isset;

class SquareEventNotifiedUpdateSquareChatProfileName : public virtual ::apache::thrift::TBase {
 public:

  SquareEventNotifiedUpdateSquareChatProfileName(const SquareEventNotifiedUpdateSquareChatProfileName&);
  SquareEventNotifiedUpdateSquareChatProfileName& operator=(const SquareEventNotifiedUpdateSquareChatProfileName&);
  SquareEventNotifiedUpdateSquareChatProfileName() : squareChatMid(), updatedChatName() {
  }

  virtual ~SquareEventNotifiedUpdateSquareChatProfileName() noexcept;
  std::string squareChatMid;
  SquareMember editor;
  std::string updatedChatName;

  _SquareEventNotifiedUpdateSquareChatProfileName__isset __isset;

  void __set_squareChatMid(const std::string& val);

  void __set_editor(const SquareMember& val);

  void __set_updatedChatName(const std::string& val);

  bool operator == (const SquareEventNotifiedUpdateSquareChatProfileName & rhs) const
  {
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    if (!(editor == rhs.editor))
      return false;
    if (!(updatedChatName == rhs.updatedChatName))
      return false;
    return true;
  }
  bool operator != (const SquareEventNotifiedUpdateSquareChatProfileName &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareEventNotifiedUpdateSquareChatProfileName & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareEventNotifiedUpdateSquareChatProfileName &a, SquareEventNotifiedUpdateSquareChatProfileName &b);

std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedUpdateSquareChatProfileName& obj);

typedef struct _SquareEventNotifiedUpdateSquareChatProfileImage__isset {
  _SquareEventNotifiedUpdateSquareChatProfileImage__isset() : squareChatMid(false), editor(false) {}
  bool squareChatMid :1;
  bool editor :1;
} _SquareEventNotifiedUpdateSquareChatProfileImage__isset;

class SquareEventNotifiedUpdateSquareChatProfileImage : public virtual ::apache::thrift::TBase {
 public:

  SquareEventNotifiedUpdateSquareChatProfileImage(const SquareEventNotifiedUpdateSquareChatProfileImage&);
  SquareEventNotifiedUpdateSquareChatProfileImage& operator=(const SquareEventNotifiedUpdateSquareChatProfileImage&);
  SquareEventNotifiedUpdateSquareChatProfileImage() : squareChatMid() {
  }

  virtual ~SquareEventNotifiedUpdateSquareChatProfileImage() noexcept;
  std::string squareChatMid;
  SquareMember editor;

  _SquareEventNotifiedUpdateSquareChatProfileImage__isset __isset;

  void __set_squareChatMid(const std::string& val);

  void __set_editor(const SquareMember& val);

  bool operator == (const SquareEventNotifiedUpdateSquareChatProfileImage & rhs) const
  {
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    if (!(editor == rhs.editor))
      return false;
    return true;
  }
  bool operator != (const SquareEventNotifiedUpdateSquareChatProfileImage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareEventNotifiedUpdateSquareChatProfileImage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareEventNotifiedUpdateSquareChatProfileImage &a, SquareEventNotifiedUpdateSquareChatProfileImage &b);

std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedUpdateSquareChatProfileImage& obj);

typedef struct _SquareEventNotifiedUpdateSquareChatStatus__isset {
  _SquareEventNotifiedUpdateSquareChatStatus__isset() : squareChatMid(false), statusWithoutMessage(false) {}
  bool squareChatMid :1;
  bool statusWithoutMessage :1;
} _SquareEventNotifiedUpdateSquareChatStatus__isset;

class SquareEventNotifiedUpdateSquareChatStatus : public virtual ::apache::thrift::TBase {
 public:

  SquareEventNotifiedUpdateSquareChatStatus(const SquareEventNotifiedUpdateSquareChatStatus&);
  SquareEventNotifiedUpdateSquareChatStatus& operator=(const SquareEventNotifiedUpdateSquareChatStatus&);
  SquareEventNotifiedUpdateSquareChatStatus() : squareChatMid() {
  }

  virtual ~SquareEventNotifiedUpdateSquareChatStatus() noexcept;
  std::string squareChatMid;
  SquareChatStatusWithoutMessage statusWithoutMessage;

  _SquareEventNotifiedUpdateSquareChatStatus__isset __isset;

  void __set_squareChatMid(const std::string& val);

  void __set_statusWithoutMessage(const SquareChatStatusWithoutMessage& val);

  bool operator == (const SquareEventNotifiedUpdateSquareChatStatus & rhs) const
  {
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    if (!(statusWithoutMessage == rhs.statusWithoutMessage))
      return false;
    return true;
  }
  bool operator != (const SquareEventNotifiedUpdateSquareChatStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareEventNotifiedUpdateSquareChatStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareEventNotifiedUpdateSquareChatStatus &a, SquareEventNotifiedUpdateSquareChatStatus &b);

std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedUpdateSquareChatStatus& obj);

typedef struct _SquareEventNotifiedUpdateSquareStatus__isset {
  _SquareEventNotifiedUpdateSquareStatus__isset() : squareMid(false), squareStatus(false) {}
  bool squareMid :1;
  bool squareStatus :1;
} _SquareEventNotifiedUpdateSquareStatus__isset;

class SquareEventNotifiedUpdateSquareStatus : public virtual ::apache::thrift::TBase {
 public:

  SquareEventNotifiedUpdateSquareStatus(const SquareEventNotifiedUpdateSquareStatus&);
  SquareEventNotifiedUpdateSquareStatus& operator=(const SquareEventNotifiedUpdateSquareStatus&);
  SquareEventNotifiedUpdateSquareStatus() : squareMid() {
  }

  virtual ~SquareEventNotifiedUpdateSquareStatus() noexcept;
  std::string squareMid;
  SquareStatus squareStatus;

  _SquareEventNotifiedUpdateSquareStatus__isset __isset;

  void __set_squareMid(const std::string& val);

  void __set_squareStatus(const SquareStatus& val);

  bool operator == (const SquareEventNotifiedUpdateSquareStatus & rhs) const
  {
    if (!(squareMid == rhs.squareMid))
      return false;
    if (!(squareStatus == rhs.squareStatus))
      return false;
    return true;
  }
  bool operator != (const SquareEventNotifiedUpdateSquareStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareEventNotifiedUpdateSquareStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareEventNotifiedUpdateSquareStatus &a, SquareEventNotifiedUpdateSquareStatus &b);

std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedUpdateSquareStatus& obj);

typedef struct _SquareEventNotifiedCreateSquareMember__isset {
  _SquareEventNotifiedCreateSquareMember__isset() : square(false), squareAuthority(false), squareStatus(false), squareMember(false), squareFeatureSet(false) {}
  bool square :1;
  bool squareAuthority :1;
  bool squareStatus :1;
  bool squareMember :1;
  bool squareFeatureSet :1;
} _SquareEventNotifiedCreateSquareMember__isset;

class SquareEventNotifiedCreateSquareMember : public virtual ::apache::thrift::TBase {
 public:

  SquareEventNotifiedCreateSquareMember(const SquareEventNotifiedCreateSquareMember&);
  SquareEventNotifiedCreateSquareMember& operator=(const SquareEventNotifiedCreateSquareMember&);
  SquareEventNotifiedCreateSquareMember() {
  }

  virtual ~SquareEventNotifiedCreateSquareMember() noexcept;
  Square square;
  SquareAuthority squareAuthority;
  SquareStatus squareStatus;
  SquareMember squareMember;
  SquareFeatureSet squareFeatureSet;

  _SquareEventNotifiedCreateSquareMember__isset __isset;

  void __set_square(const Square& val);

  void __set_squareAuthority(const SquareAuthority& val);

  void __set_squareStatus(const SquareStatus& val);

  void __set_squareMember(const SquareMember& val);

  void __set_squareFeatureSet(const SquareFeatureSet& val);

  bool operator == (const SquareEventNotifiedCreateSquareMember & rhs) const
  {
    if (!(square == rhs.square))
      return false;
    if (!(squareAuthority == rhs.squareAuthority))
      return false;
    if (!(squareStatus == rhs.squareStatus))
      return false;
    if (!(squareMember == rhs.squareMember))
      return false;
    if (!(squareFeatureSet == rhs.squareFeatureSet))
      return false;
    return true;
  }
  bool operator != (const SquareEventNotifiedCreateSquareMember &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareEventNotifiedCreateSquareMember & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareEventNotifiedCreateSquareMember &a, SquareEventNotifiedCreateSquareMember &b);

std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedCreateSquareMember& obj);

typedef struct _SquareEventNotifiedCreateSquareChatMember__isset {
  _SquareEventNotifiedCreateSquareChatMember__isset() : squareChatMid(false), squareMemberMid(false), squareChatMember(false) {}
  bool squareChatMid :1;
  bool squareMemberMid :1;
  bool squareChatMember :1;
} _SquareEventNotifiedCreateSquareChatMember__isset;

class SquareEventNotifiedCreateSquareChatMember : public virtual ::apache::thrift::TBase {
 public:

  SquareEventNotifiedCreateSquareChatMember(const SquareEventNotifiedCreateSquareChatMember&);
  SquareEventNotifiedCreateSquareChatMember& operator=(const SquareEventNotifiedCreateSquareChatMember&);
  SquareEventNotifiedCreateSquareChatMember() : squareChatMid(), squareMemberMid() {
  }

  virtual ~SquareEventNotifiedCreateSquareChatMember() noexcept;
  std::string squareChatMid;
  std::string squareMemberMid;
  SquareChatMember squareChatMember;

  _SquareEventNotifiedCreateSquareChatMember__isset __isset;

  void __set_squareChatMid(const std::string& val);

  void __set_squareMemberMid(const std::string& val);

  void __set_squareChatMember(const SquareChatMember& val);

  bool operator == (const SquareEventNotifiedCreateSquareChatMember & rhs) const
  {
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    if (!(squareMemberMid == rhs.squareMemberMid))
      return false;
    if (!(squareChatMember == rhs.squareChatMember))
      return false;
    return true;
  }
  bool operator != (const SquareEventNotifiedCreateSquareChatMember &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareEventNotifiedCreateSquareChatMember & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareEventNotifiedCreateSquareChatMember &a, SquareEventNotifiedCreateSquareChatMember &b);

std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedCreateSquareChatMember& obj);

typedef struct _SquareEventNotifiedUpdateSquareMemberRelation__isset {
  _SquareEventNotifiedUpdateSquareMemberRelation__isset() : squareMid(false), myMemberMid(false), targetSquareMemberMid(false), squareMemberRelation(false) {}
  bool squareMid :1;
  bool myMemberMid :1;
  bool targetSquareMemberMid :1;
  bool squareMemberRelation :1;
} _SquareEventNotifiedUpdateSquareMemberRelation__isset;

class SquareEventNotifiedUpdateSquareMemberRelation : public virtual ::apache::thrift::TBase {
 public:

  SquareEventNotifiedUpdateSquareMemberRelation(const SquareEventNotifiedUpdateSquareMemberRelation&);
  SquareEventNotifiedUpdateSquareMemberRelation& operator=(const SquareEventNotifiedUpdateSquareMemberRelation&);
  SquareEventNotifiedUpdateSquareMemberRelation() : squareMid(), myMemberMid(), targetSquareMemberMid() {
  }

  virtual ~SquareEventNotifiedUpdateSquareMemberRelation() noexcept;
  std::string squareMid;
  std::string myMemberMid;
  std::string targetSquareMemberMid;
  SquareMemberRelation squareMemberRelation;

  _SquareEventNotifiedUpdateSquareMemberRelation__isset __isset;

  void __set_squareMid(const std::string& val);

  void __set_myMemberMid(const std::string& val);

  void __set_targetSquareMemberMid(const std::string& val);

  void __set_squareMemberRelation(const SquareMemberRelation& val);

  bool operator == (const SquareEventNotifiedUpdateSquareMemberRelation & rhs) const
  {
    if (!(squareMid == rhs.squareMid))
      return false;
    if (!(myMemberMid == rhs.myMemberMid))
      return false;
    if (!(targetSquareMemberMid == rhs.targetSquareMemberMid))
      return false;
    if (!(squareMemberRelation == rhs.squareMemberRelation))
      return false;
    return true;
  }
  bool operator != (const SquareEventNotifiedUpdateSquareMemberRelation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareEventNotifiedUpdateSquareMemberRelation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareEventNotifiedUpdateSquareMemberRelation &a, SquareEventNotifiedUpdateSquareMemberRelation &b);

std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedUpdateSquareMemberRelation& obj);

typedef struct _SquareEventNotifiedUpdateSquare__isset {
  _SquareEventNotifiedUpdateSquare__isset() : squareMid(false), square(false) {}
  bool squareMid :1;
  bool square :1;
} _SquareEventNotifiedUpdateSquare__isset;

class SquareEventNotifiedUpdateSquare : public virtual ::apache::thrift::TBase {
 public:

  SquareEventNotifiedUpdateSquare(const SquareEventNotifiedUpdateSquare&);
  SquareEventNotifiedUpdateSquare& operator=(const SquareEventNotifiedUpdateSquare&);
  SquareEventNotifiedUpdateSquare() : squareMid() {
  }

  virtual ~SquareEventNotifiedUpdateSquare() noexcept;
  std::string squareMid;
  Square square;

  _SquareEventNotifiedUpdateSquare__isset __isset;

  void __set_squareMid(const std::string& val);

  void __set_square(const Square& val);

  bool operator == (const SquareEventNotifiedUpdateSquare & rhs) const
  {
    if (!(squareMid == rhs.squareMid))
      return false;
    if (!(square == rhs.square))
      return false;
    return true;
  }
  bool operator != (const SquareEventNotifiedUpdateSquare &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareEventNotifiedUpdateSquare & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareEventNotifiedUpdateSquare &a, SquareEventNotifiedUpdateSquare &b);

std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedUpdateSquare& obj);

typedef struct _SquareEventNotifiedUpdateSquareMember__isset {
  _SquareEventNotifiedUpdateSquareMember__isset() : squareMid(false), squareMemberMid(false), squareMember(false) {}
  bool squareMid :1;
  bool squareMemberMid :1;
  bool squareMember :1;
} _SquareEventNotifiedUpdateSquareMember__isset;

class SquareEventNotifiedUpdateSquareMember : public virtual ::apache::thrift::TBase {
 public:

  SquareEventNotifiedUpdateSquareMember(const SquareEventNotifiedUpdateSquareMember&);
  SquareEventNotifiedUpdateSquareMember& operator=(const SquareEventNotifiedUpdateSquareMember&);
  SquareEventNotifiedUpdateSquareMember() : squareMid(), squareMemberMid() {
  }

  virtual ~SquareEventNotifiedUpdateSquareMember() noexcept;
  std::string squareMid;
  std::string squareMemberMid;
  SquareMember squareMember;

  _SquareEventNotifiedUpdateSquareMember__isset __isset;

  void __set_squareMid(const std::string& val);

  void __set_squareMemberMid(const std::string& val);

  void __set_squareMember(const SquareMember& val);

  bool operator == (const SquareEventNotifiedUpdateSquareMember & rhs) const
  {
    if (!(squareMid == rhs.squareMid))
      return false;
    if (!(squareMemberMid == rhs.squareMemberMid))
      return false;
    if (!(squareMember == rhs.squareMember))
      return false;
    return true;
  }
  bool operator != (const SquareEventNotifiedUpdateSquareMember &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareEventNotifiedUpdateSquareMember & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareEventNotifiedUpdateSquareMember &a, SquareEventNotifiedUpdateSquareMember &b);

std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedUpdateSquareMember& obj);

typedef struct _SquareEventNotifiedUpdateSquareChat__isset {
  _SquareEventNotifiedUpdateSquareChat__isset() : squareMid(false), squareChatMid(false), squareChat(false) {}
  bool squareMid :1;
  bool squareChatMid :1;
  bool squareChat :1;
} _SquareEventNotifiedUpdateSquareChat__isset;

class SquareEventNotifiedUpdateSquareChat : public virtual ::apache::thrift::TBase {
 public:

  SquareEventNotifiedUpdateSquareChat(const SquareEventNotifiedUpdateSquareChat&);
  SquareEventNotifiedUpdateSquareChat& operator=(const SquareEventNotifiedUpdateSquareChat&);
  SquareEventNotifiedUpdateSquareChat() : squareMid(), squareChatMid() {
  }

  virtual ~SquareEventNotifiedUpdateSquareChat() noexcept;
  std::string squareMid;
  std::string squareChatMid;
  SquareChat squareChat;

  _SquareEventNotifiedUpdateSquareChat__isset __isset;

  void __set_squareMid(const std::string& val);

  void __set_squareChatMid(const std::string& val);

  void __set_squareChat(const SquareChat& val);

  bool operator == (const SquareEventNotifiedUpdateSquareChat & rhs) const
  {
    if (!(squareMid == rhs.squareMid))
      return false;
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    if (!(squareChat == rhs.squareChat))
      return false;
    return true;
  }
  bool operator != (const SquareEventNotifiedUpdateSquareChat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareEventNotifiedUpdateSquareChat & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareEventNotifiedUpdateSquareChat &a, SquareEventNotifiedUpdateSquareChat &b);

std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedUpdateSquareChat& obj);

typedef struct _SquareEventNotificationJoinRequest__isset {
  _SquareEventNotificationJoinRequest__isset() : squareMid(false), squareName(false), requestMemberName(false), profileImageObsHash(false) {}
  bool squareMid :1;
  bool squareName :1;
  bool requestMemberName :1;
  bool profileImageObsHash :1;
} _SquareEventNotificationJoinRequest__isset;

class SquareEventNotificationJoinRequest : public virtual ::apache::thrift::TBase {
 public:

  SquareEventNotificationJoinRequest(const SquareEventNotificationJoinRequest&);
  SquareEventNotificationJoinRequest& operator=(const SquareEventNotificationJoinRequest&);
  SquareEventNotificationJoinRequest() : squareMid(), squareName(), requestMemberName(), profileImageObsHash() {
  }

  virtual ~SquareEventNotificationJoinRequest() noexcept;
  std::string squareMid;
  std::string squareName;
  std::string requestMemberName;
  std::string profileImageObsHash;

  _SquareEventNotificationJoinRequest__isset __isset;

  void __set_squareMid(const std::string& val);

  void __set_squareName(const std::string& val);

  void __set_requestMemberName(const std::string& val);

  void __set_profileImageObsHash(const std::string& val);

  bool operator == (const SquareEventNotificationJoinRequest & rhs) const
  {
    if (!(squareMid == rhs.squareMid))
      return false;
    if (!(squareName == rhs.squareName))
      return false;
    if (!(requestMemberName == rhs.requestMemberName))
      return false;
    if (!(profileImageObsHash == rhs.profileImageObsHash))
      return false;
    return true;
  }
  bool operator != (const SquareEventNotificationJoinRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareEventNotificationJoinRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareEventNotificationJoinRequest &a, SquareEventNotificationJoinRequest &b);

std::ostream& operator<<(std::ostream& out, const SquareEventNotificationJoinRequest& obj);

typedef struct _SquareEventNotificationMemberUpdate__isset {
  _SquareEventNotificationMemberUpdate__isset() : squareMid(false), squareName(false), profileImageObsHash(false) {}
  bool squareMid :1;
  bool squareName :1;
  bool profileImageObsHash :1;
} _SquareEventNotificationMemberUpdate__isset;

class SquareEventNotificationMemberUpdate : public virtual ::apache::thrift::TBase {
 public:

  SquareEventNotificationMemberUpdate(const SquareEventNotificationMemberUpdate&);
  SquareEventNotificationMemberUpdate& operator=(const SquareEventNotificationMemberUpdate&);
  SquareEventNotificationMemberUpdate() : squareMid(), squareName(), profileImageObsHash() {
  }

  virtual ~SquareEventNotificationMemberUpdate() noexcept;
  std::string squareMid;
  std::string squareName;
  std::string profileImageObsHash;

  _SquareEventNotificationMemberUpdate__isset __isset;

  void __set_squareMid(const std::string& val);

  void __set_squareName(const std::string& val);

  void __set_profileImageObsHash(const std::string& val);

  bool operator == (const SquareEventNotificationMemberUpdate & rhs) const
  {
    if (!(squareMid == rhs.squareMid))
      return false;
    if (!(squareName == rhs.squareName))
      return false;
    if (!(profileImageObsHash == rhs.profileImageObsHash))
      return false;
    return true;
  }
  bool operator != (const SquareEventNotificationMemberUpdate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareEventNotificationMemberUpdate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareEventNotificationMemberUpdate &a, SquareEventNotificationMemberUpdate &b);

std::ostream& operator<<(std::ostream& out, const SquareEventNotificationMemberUpdate& obj);

typedef struct _SquareEventNotificationSquareDelete__isset {
  _SquareEventNotificationSquareDelete__isset() : squareMid(false), squareName(false), profileImageObsHash(false) {}
  bool squareMid :1;
  bool squareName :1;
  bool profileImageObsHash :1;
} _SquareEventNotificationSquareDelete__isset;

class SquareEventNotificationSquareDelete : public virtual ::apache::thrift::TBase {
 public:

  SquareEventNotificationSquareDelete(const SquareEventNotificationSquareDelete&);
  SquareEventNotificationSquareDelete& operator=(const SquareEventNotificationSquareDelete&);
  SquareEventNotificationSquareDelete() : squareMid(), squareName(), profileImageObsHash() {
  }

  virtual ~SquareEventNotificationSquareDelete() noexcept;
  std::string squareMid;
  std::string squareName;
  std::string profileImageObsHash;

  _SquareEventNotificationSquareDelete__isset __isset;

  void __set_squareMid(const std::string& val);

  void __set_squareName(const std::string& val);

  void __set_profileImageObsHash(const std::string& val);

  bool operator == (const SquareEventNotificationSquareDelete & rhs) const
  {
    if (!(squareMid == rhs.squareMid))
      return false;
    if (!(squareName == rhs.squareName))
      return false;
    if (!(profileImageObsHash == rhs.profileImageObsHash))
      return false;
    return true;
  }
  bool operator != (const SquareEventNotificationSquareDelete &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareEventNotificationSquareDelete & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareEventNotificationSquareDelete &a, SquareEventNotificationSquareDelete &b);

std::ostream& operator<<(std::ostream& out, const SquareEventNotificationSquareDelete& obj);

typedef struct _SquareEventNotificationSquareChatDelete__isset {
  _SquareEventNotificationSquareChatDelete__isset() : squareChatMid(false), squareChatName(false), profileImageObsHash(false) {}
  bool squareChatMid :1;
  bool squareChatName :1;
  bool profileImageObsHash :1;
} _SquareEventNotificationSquareChatDelete__isset;

class SquareEventNotificationSquareChatDelete : public virtual ::apache::thrift::TBase {
 public:

  SquareEventNotificationSquareChatDelete(const SquareEventNotificationSquareChatDelete&);
  SquareEventNotificationSquareChatDelete& operator=(const SquareEventNotificationSquareChatDelete&);
  SquareEventNotificationSquareChatDelete() : squareChatMid(), squareChatName(), profileImageObsHash() {
  }

  virtual ~SquareEventNotificationSquareChatDelete() noexcept;
  std::string squareChatMid;
  std::string squareChatName;
  std::string profileImageObsHash;

  _SquareEventNotificationSquareChatDelete__isset __isset;

  void __set_squareChatMid(const std::string& val);

  void __set_squareChatName(const std::string& val);

  void __set_profileImageObsHash(const std::string& val);

  bool operator == (const SquareEventNotificationSquareChatDelete & rhs) const
  {
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    if (!(squareChatName == rhs.squareChatName))
      return false;
    if (!(profileImageObsHash == rhs.profileImageObsHash))
      return false;
    return true;
  }
  bool operator != (const SquareEventNotificationSquareChatDelete &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareEventNotificationSquareChatDelete & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareEventNotificationSquareChatDelete &a, SquareEventNotificationSquareChatDelete &b);

std::ostream& operator<<(std::ostream& out, const SquareEventNotificationSquareChatDelete& obj);

typedef struct _SquareEventNotificationMessage__isset {
  _SquareEventNotificationMessage__isset() : squareChatMid(false), squareMessage(false), senderDisplayName(false), unreadCount(false), requiredToFetchChatEvents(false) {}
  bool squareChatMid :1;
  bool squareMessage :1;
  bool senderDisplayName :1;
  bool unreadCount :1;
  bool requiredToFetchChatEvents :1;
} _SquareEventNotificationMessage__isset;

class SquareEventNotificationMessage : public virtual ::apache::thrift::TBase {
 public:

  SquareEventNotificationMessage(const SquareEventNotificationMessage&);
  SquareEventNotificationMessage& operator=(const SquareEventNotificationMessage&);
  SquareEventNotificationMessage() : squareChatMid(), senderDisplayName(), unreadCount(0), requiredToFetchChatEvents(0) {
  }

  virtual ~SquareEventNotificationMessage() noexcept;
  std::string squareChatMid;
  SquareMessage squareMessage;
  std::string senderDisplayName;
  int32_t unreadCount;
  bool requiredToFetchChatEvents;

  _SquareEventNotificationMessage__isset __isset;

  void __set_squareChatMid(const std::string& val);

  void __set_squareMessage(const SquareMessage& val);

  void __set_senderDisplayName(const std::string& val);

  void __set_unreadCount(const int32_t val);

  void __set_requiredToFetchChatEvents(const bool val);

  bool operator == (const SquareEventNotificationMessage & rhs) const
  {
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    if (!(squareMessage == rhs.squareMessage))
      return false;
    if (!(senderDisplayName == rhs.senderDisplayName))
      return false;
    if (!(unreadCount == rhs.unreadCount))
      return false;
    if (!(requiredToFetchChatEvents == rhs.requiredToFetchChatEvents))
      return false;
    return true;
  }
  bool operator != (const SquareEventNotificationMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareEventNotificationMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareEventNotificationMessage &a, SquareEventNotificationMessage &b);

std::ostream& operator<<(std::ostream& out, const SquareEventNotificationMessage& obj);

typedef struct _SquareEventNotifiedUpdateSquareChatMember__isset {
  _SquareEventNotifiedUpdateSquareChatMember__isset() : squareChatMid(false), squareMemberMid(false), squareChatMember(false) {}
  bool squareChatMid :1;
  bool squareMemberMid :1;
  bool squareChatMember :1;
} _SquareEventNotifiedUpdateSquareChatMember__isset;

class SquareEventNotifiedUpdateSquareChatMember : public virtual ::apache::thrift::TBase {
 public:

  SquareEventNotifiedUpdateSquareChatMember(const SquareEventNotifiedUpdateSquareChatMember&);
  SquareEventNotifiedUpdateSquareChatMember& operator=(const SquareEventNotifiedUpdateSquareChatMember&);
  SquareEventNotifiedUpdateSquareChatMember() : squareChatMid(), squareMemberMid() {
  }

  virtual ~SquareEventNotifiedUpdateSquareChatMember() noexcept;
  std::string squareChatMid;
  std::string squareMemberMid;
  SquareChatMember squareChatMember;

  _SquareEventNotifiedUpdateSquareChatMember__isset __isset;

  void __set_squareChatMid(const std::string& val);

  void __set_squareMemberMid(const std::string& val);

  void __set_squareChatMember(const SquareChatMember& val);

  bool operator == (const SquareEventNotifiedUpdateSquareChatMember & rhs) const
  {
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    if (!(squareMemberMid == rhs.squareMemberMid))
      return false;
    if (!(squareChatMember == rhs.squareChatMember))
      return false;
    return true;
  }
  bool operator != (const SquareEventNotifiedUpdateSquareChatMember &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareEventNotifiedUpdateSquareChatMember & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareEventNotifiedUpdateSquareChatMember &a, SquareEventNotifiedUpdateSquareChatMember &b);

std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedUpdateSquareChatMember& obj);

typedef struct _SquareEventNotifiedUpdateSquareAuthority__isset {
  _SquareEventNotifiedUpdateSquareAuthority__isset() : squareMid(false), squareAuthority(false) {}
  bool squareMid :1;
  bool squareAuthority :1;
} _SquareEventNotifiedUpdateSquareAuthority__isset;

class SquareEventNotifiedUpdateSquareAuthority : public virtual ::apache::thrift::TBase {
 public:

  SquareEventNotifiedUpdateSquareAuthority(const SquareEventNotifiedUpdateSquareAuthority&);
  SquareEventNotifiedUpdateSquareAuthority& operator=(const SquareEventNotifiedUpdateSquareAuthority&);
  SquareEventNotifiedUpdateSquareAuthority() : squareMid() {
  }

  virtual ~SquareEventNotifiedUpdateSquareAuthority() noexcept;
  std::string squareMid;
  SquareAuthority squareAuthority;

  _SquareEventNotifiedUpdateSquareAuthority__isset __isset;

  void __set_squareMid(const std::string& val);

  void __set_squareAuthority(const SquareAuthority& val);

  bool operator == (const SquareEventNotifiedUpdateSquareAuthority & rhs) const
  {
    if (!(squareMid == rhs.squareMid))
      return false;
    if (!(squareAuthority == rhs.squareAuthority))
      return false;
    return true;
  }
  bool operator != (const SquareEventNotifiedUpdateSquareAuthority &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareEventNotifiedUpdateSquareAuthority & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareEventNotifiedUpdateSquareAuthority &a, SquareEventNotifiedUpdateSquareAuthority &b);

std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedUpdateSquareAuthority& obj);

typedef struct _SquareEventNotifiedUpdateSquareFeatureSet__isset {
  _SquareEventNotifiedUpdateSquareFeatureSet__isset() : squareFeatureSet(false) {}
  bool squareFeatureSet :1;
} _SquareEventNotifiedUpdateSquareFeatureSet__isset;

class SquareEventNotifiedUpdateSquareFeatureSet : public virtual ::apache::thrift::TBase {
 public:

  SquareEventNotifiedUpdateSquareFeatureSet(const SquareEventNotifiedUpdateSquareFeatureSet&);
  SquareEventNotifiedUpdateSquareFeatureSet& operator=(const SquareEventNotifiedUpdateSquareFeatureSet&);
  SquareEventNotifiedUpdateSquareFeatureSet() {
  }

  virtual ~SquareEventNotifiedUpdateSquareFeatureSet() noexcept;
  SquareFeatureSet squareFeatureSet;

  _SquareEventNotifiedUpdateSquareFeatureSet__isset __isset;

  void __set_squareFeatureSet(const SquareFeatureSet& val);

  bool operator == (const SquareEventNotifiedUpdateSquareFeatureSet & rhs) const
  {
    if (!(squareFeatureSet == rhs.squareFeatureSet))
      return false;
    return true;
  }
  bool operator != (const SquareEventNotifiedUpdateSquareFeatureSet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareEventNotifiedUpdateSquareFeatureSet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareEventNotifiedUpdateSquareFeatureSet &a, SquareEventNotifiedUpdateSquareFeatureSet &b);

std::ostream& operator<<(std::ostream& out, const SquareEventNotifiedUpdateSquareFeatureSet& obj);

typedef struct _SquareEventPayload__isset {
  _SquareEventPayload__isset() : receiveMessage(false), sendMessage(false), notifiedJoinSquareChat(false), notifiedInviteIntoSquareChat(false), notifiedLeaveSquareChat(false), notifiedDestroyMessage(false), notifiedMarkAsRead(false), notifiedUpdateSquareMemberProfile(false), notifiedKickoutFromSquare(false), notifiedShutdownSquare(false), notifiedDeleteSquareChat(false), notifiedUpdateSquareChatProfileName(false), notifiedUpdateSquareChatProfileImage(false), notifiedUpdateSquareStatus(false), notifiedUpdateSquareChatStatus(false), notifiedCreateSquareMember(false), notifiedCreateSquareChatMember(false), notifiedUpdateSquareMemberRelation(false), notifiedUpdateSquare(false), notifiedUpdateSquareMember(false), notifiedUpdateSquareChat(false), notificationJoinRequest(false), notificationJoined(false), notificationPromoteCoadmin(false), notificationPromoteAdmin(false), notificationDemoteMember(false), notificationKickedOut(false), notificationSquareDelete(false), notificationSquareChatDelete(false), notificationMessage(false), notifiedUpdateSquareChatMember(false), notifiedUpdateSquareAuthority(false), notifiedUpdateSquareFeatureSet(false) {}
  bool receiveMessage :1;
  bool sendMessage :1;
  bool notifiedJoinSquareChat :1;
  bool notifiedInviteIntoSquareChat :1;
  bool notifiedLeaveSquareChat :1;
  bool notifiedDestroyMessage :1;
  bool notifiedMarkAsRead :1;
  bool notifiedUpdateSquareMemberProfile :1;
  bool notifiedKickoutFromSquare :1;
  bool notifiedShutdownSquare :1;
  bool notifiedDeleteSquareChat :1;
  bool notifiedUpdateSquareChatProfileName :1;
  bool notifiedUpdateSquareChatProfileImage :1;
  bool notifiedUpdateSquareStatus :1;
  bool notifiedUpdateSquareChatStatus :1;
  bool notifiedCreateSquareMember :1;
  bool notifiedCreateSquareChatMember :1;
  bool notifiedUpdateSquareMemberRelation :1;
  bool notifiedUpdateSquare :1;
  bool notifiedUpdateSquareMember :1;
  bool notifiedUpdateSquareChat :1;
  bool notificationJoinRequest :1;
  bool notificationJoined :1;
  bool notificationPromoteCoadmin :1;
  bool notificationPromoteAdmin :1;
  bool notificationDemoteMember :1;
  bool notificationKickedOut :1;
  bool notificationSquareDelete :1;
  bool notificationSquareChatDelete :1;
  bool notificationMessage :1;
  bool notifiedUpdateSquareChatMember :1;
  bool notifiedUpdateSquareAuthority :1;
  bool notifiedUpdateSquareFeatureSet :1;
} _SquareEventPayload__isset;

class SquareEventPayload : public virtual ::apache::thrift::TBase {
 public:

  SquareEventPayload(const SquareEventPayload&);
  SquareEventPayload& operator=(const SquareEventPayload&);
  SquareEventPayload() {
  }

  virtual ~SquareEventPayload() noexcept;
  SquareEventReceiveMessage receiveMessage;
  SquareEventSendMessage sendMessage;
  SquareEventNotifiedJoinSquareChat notifiedJoinSquareChat;
  SquareEventNotifiedInviteIntoSquareChat notifiedInviteIntoSquareChat;
  SquareEventNotifiedLeaveSquareChat notifiedLeaveSquareChat;
  SquareEventNotifiedDestroyMessage notifiedDestroyMessage;
  SquareEventNotifiedMarkAsRead notifiedMarkAsRead;
  SquareEventNotifiedUpdateSquareMemberProfile notifiedUpdateSquareMemberProfile;
  SquareEventNotifiedKickoutFromSquare notifiedKickoutFromSquare;
  SquareEventNotifiedShutdownSquare notifiedShutdownSquare;
  SquareEventNotifiedDeleteSquareChat notifiedDeleteSquareChat;
  SquareEventNotifiedUpdateSquareChatProfileName notifiedUpdateSquareChatProfileName;
  SquareEventNotifiedUpdateSquareChatProfileImage notifiedUpdateSquareChatProfileImage;
  SquareEventNotifiedUpdateSquareStatus notifiedUpdateSquareStatus;
  SquareEventNotifiedUpdateSquareChatStatus notifiedUpdateSquareChatStatus;
  SquareEventNotifiedCreateSquareMember notifiedCreateSquareMember;
  SquareEventNotifiedCreateSquareChatMember notifiedCreateSquareChatMember;
  SquareEventNotifiedUpdateSquareMemberRelation notifiedUpdateSquareMemberRelation;
  SquareEventNotifiedUpdateSquare notifiedUpdateSquare;
  SquareEventNotifiedUpdateSquareMember notifiedUpdateSquareMember;
  SquareEventNotifiedUpdateSquareChat notifiedUpdateSquareChat;
  SquareEventNotificationJoinRequest notificationJoinRequest;
  SquareEventNotificationMemberUpdate notificationJoined;
  SquareEventNotificationMemberUpdate notificationPromoteCoadmin;
  SquareEventNotificationMemberUpdate notificationPromoteAdmin;
  SquareEventNotificationMemberUpdate notificationDemoteMember;
  SquareEventNotificationMemberUpdate notificationKickedOut;
  SquareEventNotificationSquareDelete notificationSquareDelete;
  SquareEventNotificationSquareChatDelete notificationSquareChatDelete;
  SquareEventNotificationMessage notificationMessage;
  SquareEventNotifiedUpdateSquareChatMember notifiedUpdateSquareChatMember;
  SquareEventNotifiedUpdateSquareAuthority notifiedUpdateSquareAuthority;
  SquareEventNotifiedUpdateSquareFeatureSet notifiedUpdateSquareFeatureSet;

  _SquareEventPayload__isset __isset;

  void __set_receiveMessage(const SquareEventReceiveMessage& val);

  void __set_sendMessage(const SquareEventSendMessage& val);

  void __set_notifiedJoinSquareChat(const SquareEventNotifiedJoinSquareChat& val);

  void __set_notifiedInviteIntoSquareChat(const SquareEventNotifiedInviteIntoSquareChat& val);

  void __set_notifiedLeaveSquareChat(const SquareEventNotifiedLeaveSquareChat& val);

  void __set_notifiedDestroyMessage(const SquareEventNotifiedDestroyMessage& val);

  void __set_notifiedMarkAsRead(const SquareEventNotifiedMarkAsRead& val);

  void __set_notifiedUpdateSquareMemberProfile(const SquareEventNotifiedUpdateSquareMemberProfile& val);

  void __set_notifiedKickoutFromSquare(const SquareEventNotifiedKickoutFromSquare& val);

  void __set_notifiedShutdownSquare(const SquareEventNotifiedShutdownSquare& val);

  void __set_notifiedDeleteSquareChat(const SquareEventNotifiedDeleteSquareChat& val);

  void __set_notifiedUpdateSquareChatProfileName(const SquareEventNotifiedUpdateSquareChatProfileName& val);

  void __set_notifiedUpdateSquareChatProfileImage(const SquareEventNotifiedUpdateSquareChatProfileImage& val);

  void __set_notifiedUpdateSquareStatus(const SquareEventNotifiedUpdateSquareStatus& val);

  void __set_notifiedUpdateSquareChatStatus(const SquareEventNotifiedUpdateSquareChatStatus& val);

  void __set_notifiedCreateSquareMember(const SquareEventNotifiedCreateSquareMember& val);

  void __set_notifiedCreateSquareChatMember(const SquareEventNotifiedCreateSquareChatMember& val);

  void __set_notifiedUpdateSquareMemberRelation(const SquareEventNotifiedUpdateSquareMemberRelation& val);

  void __set_notifiedUpdateSquare(const SquareEventNotifiedUpdateSquare& val);

  void __set_notifiedUpdateSquareMember(const SquareEventNotifiedUpdateSquareMember& val);

  void __set_notifiedUpdateSquareChat(const SquareEventNotifiedUpdateSquareChat& val);

  void __set_notificationJoinRequest(const SquareEventNotificationJoinRequest& val);

  void __set_notificationJoined(const SquareEventNotificationMemberUpdate& val);

  void __set_notificationPromoteCoadmin(const SquareEventNotificationMemberUpdate& val);

  void __set_notificationPromoteAdmin(const SquareEventNotificationMemberUpdate& val);

  void __set_notificationDemoteMember(const SquareEventNotificationMemberUpdate& val);

  void __set_notificationKickedOut(const SquareEventNotificationMemberUpdate& val);

  void __set_notificationSquareDelete(const SquareEventNotificationSquareDelete& val);

  void __set_notificationSquareChatDelete(const SquareEventNotificationSquareChatDelete& val);

  void __set_notificationMessage(const SquareEventNotificationMessage& val);

  void __set_notifiedUpdateSquareChatMember(const SquareEventNotifiedUpdateSquareChatMember& val);

  void __set_notifiedUpdateSquareAuthority(const SquareEventNotifiedUpdateSquareAuthority& val);

  void __set_notifiedUpdateSquareFeatureSet(const SquareEventNotifiedUpdateSquareFeatureSet& val);

  bool operator == (const SquareEventPayload & rhs) const
  {
    if (!(receiveMessage == rhs.receiveMessage))
      return false;
    if (!(sendMessage == rhs.sendMessage))
      return false;
    if (!(notifiedJoinSquareChat == rhs.notifiedJoinSquareChat))
      return false;
    if (!(notifiedInviteIntoSquareChat == rhs.notifiedInviteIntoSquareChat))
      return false;
    if (!(notifiedLeaveSquareChat == rhs.notifiedLeaveSquareChat))
      return false;
    if (!(notifiedDestroyMessage == rhs.notifiedDestroyMessage))
      return false;
    if (!(notifiedMarkAsRead == rhs.notifiedMarkAsRead))
      return false;
    if (!(notifiedUpdateSquareMemberProfile == rhs.notifiedUpdateSquareMemberProfile))
      return false;
    if (!(notifiedKickoutFromSquare == rhs.notifiedKickoutFromSquare))
      return false;
    if (!(notifiedShutdownSquare == rhs.notifiedShutdownSquare))
      return false;
    if (!(notifiedDeleteSquareChat == rhs.notifiedDeleteSquareChat))
      return false;
    if (!(notifiedUpdateSquareChatProfileName == rhs.notifiedUpdateSquareChatProfileName))
      return false;
    if (!(notifiedUpdateSquareChatProfileImage == rhs.notifiedUpdateSquareChatProfileImage))
      return false;
    if (!(notifiedUpdateSquareStatus == rhs.notifiedUpdateSquareStatus))
      return false;
    if (!(notifiedUpdateSquareChatStatus == rhs.notifiedUpdateSquareChatStatus))
      return false;
    if (!(notifiedCreateSquareMember == rhs.notifiedCreateSquareMember))
      return false;
    if (!(notifiedCreateSquareChatMember == rhs.notifiedCreateSquareChatMember))
      return false;
    if (!(notifiedUpdateSquareMemberRelation == rhs.notifiedUpdateSquareMemberRelation))
      return false;
    if (!(notifiedUpdateSquare == rhs.notifiedUpdateSquare))
      return false;
    if (!(notifiedUpdateSquareMember == rhs.notifiedUpdateSquareMember))
      return false;
    if (!(notifiedUpdateSquareChat == rhs.notifiedUpdateSquareChat))
      return false;
    if (!(notificationJoinRequest == rhs.notificationJoinRequest))
      return false;
    if (!(notificationJoined == rhs.notificationJoined))
      return false;
    if (!(notificationPromoteCoadmin == rhs.notificationPromoteCoadmin))
      return false;
    if (!(notificationPromoteAdmin == rhs.notificationPromoteAdmin))
      return false;
    if (!(notificationDemoteMember == rhs.notificationDemoteMember))
      return false;
    if (!(notificationKickedOut == rhs.notificationKickedOut))
      return false;
    if (!(notificationSquareDelete == rhs.notificationSquareDelete))
      return false;
    if (!(notificationSquareChatDelete == rhs.notificationSquareChatDelete))
      return false;
    if (!(notificationMessage == rhs.notificationMessage))
      return false;
    if (!(notifiedUpdateSquareChatMember == rhs.notifiedUpdateSquareChatMember))
      return false;
    if (!(notifiedUpdateSquareAuthority == rhs.notifiedUpdateSquareAuthority))
      return false;
    if (!(notifiedUpdateSquareFeatureSet == rhs.notifiedUpdateSquareFeatureSet))
      return false;
    return true;
  }
  bool operator != (const SquareEventPayload &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareEventPayload & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareEventPayload &a, SquareEventPayload &b);

std::ostream& operator<<(std::ostream& out, const SquareEventPayload& obj);

typedef struct _SquareEvent__isset {
  _SquareEvent__isset() : createdTime(false), type(false), payload(false), syncToken(false), eventStatus(false) {}
  bool createdTime :1;
  bool type :1;
  bool payload :1;
  bool syncToken :1;
  bool eventStatus :1;
} _SquareEvent__isset;

class SquareEvent : public virtual ::apache::thrift::TBase {
 public:

  SquareEvent(const SquareEvent&);
  SquareEvent& operator=(const SquareEvent&);
  SquareEvent() : createdTime(0), type((SquareEventType::type)0), syncToken(), eventStatus((SquareEventStatus::type)0) {
  }

  virtual ~SquareEvent() noexcept;
  int64_t createdTime;
  /**
   * 
   * @see SquareEventType
   */
  SquareEventType::type type;
  SquareEventPayload payload;
  std::string syncToken;
  /**
   * 
   * @see SquareEventStatus
   */
  SquareEventStatus::type eventStatus;

  _SquareEvent__isset __isset;

  void __set_createdTime(const int64_t val);

  void __set_type(const SquareEventType::type val);

  void __set_payload(const SquareEventPayload& val);

  void __set_syncToken(const std::string& val);

  void __set_eventStatus(const SquareEventStatus::type val);

  bool operator == (const SquareEvent & rhs) const
  {
    if (!(createdTime == rhs.createdTime))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(payload == rhs.payload))
      return false;
    if (!(syncToken == rhs.syncToken))
      return false;
    if (!(eventStatus == rhs.eventStatus))
      return false;
    return true;
  }
  bool operator != (const SquareEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SquareEvent &a, SquareEvent &b);

std::ostream& operator<<(std::ostream& out, const SquareEvent& obj);

typedef struct _FetchMyEventsRequest__isset {
  _FetchMyEventsRequest__isset() : subscriptionId(false), syncToken(false), limit(false), continuationToken(false) {}
  bool subscriptionId :1;
  bool syncToken :1;
  bool limit :1;
  bool continuationToken :1;
} _FetchMyEventsRequest__isset;

class FetchMyEventsRequest : public virtual ::apache::thrift::TBase {
 public:

  FetchMyEventsRequest(const FetchMyEventsRequest&);
  FetchMyEventsRequest& operator=(const FetchMyEventsRequest&);
  FetchMyEventsRequest() : subscriptionId(0), syncToken(), limit(0), continuationToken() {
  }

  virtual ~FetchMyEventsRequest() noexcept;
  int64_t subscriptionId;
  std::string syncToken;
  int32_t limit;
  std::string continuationToken;

  _FetchMyEventsRequest__isset __isset;

  void __set_subscriptionId(const int64_t val);

  void __set_syncToken(const std::string& val);

  void __set_limit(const int32_t val);

  void __set_continuationToken(const std::string& val);

  bool operator == (const FetchMyEventsRequest & rhs) const
  {
    if (!(subscriptionId == rhs.subscriptionId))
      return false;
    if (!(syncToken == rhs.syncToken))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(continuationToken == rhs.continuationToken))
      return false;
    return true;
  }
  bool operator != (const FetchMyEventsRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FetchMyEventsRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FetchMyEventsRequest &a, FetchMyEventsRequest &b);

std::ostream& operator<<(std::ostream& out, const FetchMyEventsRequest& obj);

typedef struct _FetchMyEventsResponse__isset {
  _FetchMyEventsResponse__isset() : subscription(false), events(false), syncToken(false), continuationToken(false) {}
  bool subscription :1;
  bool events :1;
  bool syncToken :1;
  bool continuationToken :1;
} _FetchMyEventsResponse__isset;

class FetchMyEventsResponse : public virtual ::apache::thrift::TBase {
 public:

  FetchMyEventsResponse(const FetchMyEventsResponse&);
  FetchMyEventsResponse& operator=(const FetchMyEventsResponse&);
  FetchMyEventsResponse() : syncToken(), continuationToken() {
  }

  virtual ~FetchMyEventsResponse() noexcept;
  SubscriptionState subscription;
  std::vector<SquareEvent>  events;
  std::string syncToken;
  std::string continuationToken;

  _FetchMyEventsResponse__isset __isset;

  void __set_subscription(const SubscriptionState& val);

  void __set_events(const std::vector<SquareEvent> & val);

  void __set_syncToken(const std::string& val);

  void __set_continuationToken(const std::string& val);

  bool operator == (const FetchMyEventsResponse & rhs) const
  {
    if (!(subscription == rhs.subscription))
      return false;
    if (!(events == rhs.events))
      return false;
    if (!(syncToken == rhs.syncToken))
      return false;
    if (!(continuationToken == rhs.continuationToken))
      return false;
    return true;
  }
  bool operator != (const FetchMyEventsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FetchMyEventsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FetchMyEventsResponse &a, FetchMyEventsResponse &b);

std::ostream& operator<<(std::ostream& out, const FetchMyEventsResponse& obj);

typedef struct _FetchSquareChatEventsRequest__isset {
  _FetchSquareChatEventsRequest__isset() : subscriptionId(false), squareChatMid(false), syncToken(false), limit(false), direction(false) {}
  bool subscriptionId :1;
  bool squareChatMid :1;
  bool syncToken :1;
  bool limit :1;
  bool direction :1;
} _FetchSquareChatEventsRequest__isset;

class FetchSquareChatEventsRequest : public virtual ::apache::thrift::TBase {
 public:

  FetchSquareChatEventsRequest(const FetchSquareChatEventsRequest&);
  FetchSquareChatEventsRequest& operator=(const FetchSquareChatEventsRequest&);
  FetchSquareChatEventsRequest() : subscriptionId(0), squareChatMid(), syncToken(), limit(0), direction((FetchDirection::type)0) {
  }

  virtual ~FetchSquareChatEventsRequest() noexcept;
  int64_t subscriptionId;
  std::string squareChatMid;
  std::string syncToken;
  int32_t limit;
  /**
   * 
   * @see FetchDirection
   */
  FetchDirection::type direction;

  _FetchSquareChatEventsRequest__isset __isset;

  void __set_subscriptionId(const int64_t val);

  void __set_squareChatMid(const std::string& val);

  void __set_syncToken(const std::string& val);

  void __set_limit(const int32_t val);

  void __set_direction(const FetchDirection::type val);

  bool operator == (const FetchSquareChatEventsRequest & rhs) const
  {
    if (!(subscriptionId == rhs.subscriptionId))
      return false;
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    if (!(syncToken == rhs.syncToken))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(direction == rhs.direction))
      return false;
    return true;
  }
  bool operator != (const FetchSquareChatEventsRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FetchSquareChatEventsRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FetchSquareChatEventsRequest &a, FetchSquareChatEventsRequest &b);

std::ostream& operator<<(std::ostream& out, const FetchSquareChatEventsRequest& obj);

typedef struct _FetchSquareChatEventsResponse__isset {
  _FetchSquareChatEventsResponse__isset() : subscription(false), events(false), syncToken(false), continuationToken(false) {}
  bool subscription :1;
  bool events :1;
  bool syncToken :1;
  bool continuationToken :1;
} _FetchSquareChatEventsResponse__isset;

class FetchSquareChatEventsResponse : public virtual ::apache::thrift::TBase {
 public:

  FetchSquareChatEventsResponse(const FetchSquareChatEventsResponse&);
  FetchSquareChatEventsResponse& operator=(const FetchSquareChatEventsResponse&);
  FetchSquareChatEventsResponse() : syncToken(), continuationToken() {
  }

  virtual ~FetchSquareChatEventsResponse() noexcept;
  SubscriptionState subscription;
  std::vector<SquareEvent>  events;
  std::string syncToken;
  std::string continuationToken;

  _FetchSquareChatEventsResponse__isset __isset;

  void __set_subscription(const SubscriptionState& val);

  void __set_events(const std::vector<SquareEvent> & val);

  void __set_syncToken(const std::string& val);

  void __set_continuationToken(const std::string& val);

  bool operator == (const FetchSquareChatEventsResponse & rhs) const
  {
    if (!(subscription == rhs.subscription))
      return false;
    if (!(events == rhs.events))
      return false;
    if (!(syncToken == rhs.syncToken))
      return false;
    if (!(continuationToken == rhs.continuationToken))
      return false;
    return true;
  }
  bool operator != (const FetchSquareChatEventsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FetchSquareChatEventsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FetchSquareChatEventsResponse &a, FetchSquareChatEventsResponse &b);

std::ostream& operator<<(std::ostream& out, const FetchSquareChatEventsResponse& obj);

typedef struct _InviteToSquareRequest__isset {
  _InviteToSquareRequest__isset() : squareMid(false), invitees(false), squareChatMid(false) {}
  bool squareMid :1;
  bool invitees :1;
  bool squareChatMid :1;
} _InviteToSquareRequest__isset;

class InviteToSquareRequest : public virtual ::apache::thrift::TBase {
 public:

  InviteToSquareRequest(const InviteToSquareRequest&);
  InviteToSquareRequest& operator=(const InviteToSquareRequest&);
  InviteToSquareRequest() : squareMid(), squareChatMid() {
  }

  virtual ~InviteToSquareRequest() noexcept;
  std::string squareMid;
  std::vector<std::string>  invitees;
  std::string squareChatMid;

  _InviteToSquareRequest__isset __isset;

  void __set_squareMid(const std::string& val);

  void __set_invitees(const std::vector<std::string> & val);

  void __set_squareChatMid(const std::string& val);

  bool operator == (const InviteToSquareRequest & rhs) const
  {
    if (!(squareMid == rhs.squareMid))
      return false;
    if (!(invitees == rhs.invitees))
      return false;
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    return true;
  }
  bool operator != (const InviteToSquareRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InviteToSquareRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(InviteToSquareRequest &a, InviteToSquareRequest &b);

std::ostream& operator<<(std::ostream& out, const InviteToSquareRequest& obj);


class InviteToSquareResponse : public virtual ::apache::thrift::TBase {
 public:

  InviteToSquareResponse(const InviteToSquareResponse&);
  InviteToSquareResponse& operator=(const InviteToSquareResponse&);
  InviteToSquareResponse() {
  }

  virtual ~InviteToSquareResponse() noexcept;

  bool operator == (const InviteToSquareResponse & /* rhs */) const
  {
    return true;
  }
  bool operator != (const InviteToSquareResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InviteToSquareResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(InviteToSquareResponse &a, InviteToSquareResponse &b);

std::ostream& operator<<(std::ostream& out, const InviteToSquareResponse& obj);

typedef struct _InviteToSquareChatRequest__isset {
  _InviteToSquareChatRequest__isset() : inviteeMids(false), squareChatMid(false) {}
  bool inviteeMids :1;
  bool squareChatMid :1;
} _InviteToSquareChatRequest__isset;

class InviteToSquareChatRequest : public virtual ::apache::thrift::TBase {
 public:

  InviteToSquareChatRequest(const InviteToSquareChatRequest&);
  InviteToSquareChatRequest& operator=(const InviteToSquareChatRequest&);
  InviteToSquareChatRequest() : squareChatMid() {
  }

  virtual ~InviteToSquareChatRequest() noexcept;
  std::vector<std::string>  inviteeMids;
  std::string squareChatMid;

  _InviteToSquareChatRequest__isset __isset;

  void __set_inviteeMids(const std::vector<std::string> & val);

  void __set_squareChatMid(const std::string& val);

  bool operator == (const InviteToSquareChatRequest & rhs) const
  {
    if (!(inviteeMids == rhs.inviteeMids))
      return false;
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    return true;
  }
  bool operator != (const InviteToSquareChatRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InviteToSquareChatRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(InviteToSquareChatRequest &a, InviteToSquareChatRequest &b);

std::ostream& operator<<(std::ostream& out, const InviteToSquareChatRequest& obj);

typedef struct _InviteToSquareChatResponse__isset {
  _InviteToSquareChatResponse__isset() : inviteeMids(false) {}
  bool inviteeMids :1;
} _InviteToSquareChatResponse__isset;

class InviteToSquareChatResponse : public virtual ::apache::thrift::TBase {
 public:

  InviteToSquareChatResponse(const InviteToSquareChatResponse&);
  InviteToSquareChatResponse& operator=(const InviteToSquareChatResponse&);
  InviteToSquareChatResponse() {
  }

  virtual ~InviteToSquareChatResponse() noexcept;
  std::vector<std::string>  inviteeMids;

  _InviteToSquareChatResponse__isset __isset;

  void __set_inviteeMids(const std::vector<std::string> & val);

  bool operator == (const InviteToSquareChatResponse & rhs) const
  {
    if (!(inviteeMids == rhs.inviteeMids))
      return false;
    return true;
  }
  bool operator != (const InviteToSquareChatResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InviteToSquareChatResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(InviteToSquareChatResponse &a, InviteToSquareChatResponse &b);

std::ostream& operator<<(std::ostream& out, const InviteToSquareChatResponse& obj);

typedef struct _GetSquareMemberRequest__isset {
  _GetSquareMemberRequest__isset() : squareMemberMid(false) {}
  bool squareMemberMid :1;
} _GetSquareMemberRequest__isset;

class GetSquareMemberRequest : public virtual ::apache::thrift::TBase {
 public:

  GetSquareMemberRequest(const GetSquareMemberRequest&);
  GetSquareMemberRequest& operator=(const GetSquareMemberRequest&);
  GetSquareMemberRequest() : squareMemberMid() {
  }

  virtual ~GetSquareMemberRequest() noexcept;
  std::string squareMemberMid;

  _GetSquareMemberRequest__isset __isset;

  void __set_squareMemberMid(const std::string& val);

  bool operator == (const GetSquareMemberRequest & rhs) const
  {
    if (!(squareMemberMid == rhs.squareMemberMid))
      return false;
    return true;
  }
  bool operator != (const GetSquareMemberRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetSquareMemberRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetSquareMemberRequest &a, GetSquareMemberRequest &b);

std::ostream& operator<<(std::ostream& out, const GetSquareMemberRequest& obj);

typedef struct _GetSquareMemberResponse__isset {
  _GetSquareMemberResponse__isset() : squareMember(false), relation(false), oneOnOneChatMid(false) {}
  bool squareMember :1;
  bool relation :1;
  bool oneOnOneChatMid :1;
} _GetSquareMemberResponse__isset;

class GetSquareMemberResponse : public virtual ::apache::thrift::TBase {
 public:

  GetSquareMemberResponse(const GetSquareMemberResponse&);
  GetSquareMemberResponse& operator=(const GetSquareMemberResponse&);
  GetSquareMemberResponse() : oneOnOneChatMid() {
  }

  virtual ~GetSquareMemberResponse() noexcept;
  SquareMember squareMember;
  SquareMemberRelation relation;
  std::string oneOnOneChatMid;

  _GetSquareMemberResponse__isset __isset;

  void __set_squareMember(const SquareMember& val);

  void __set_relation(const SquareMemberRelation& val);

  void __set_oneOnOneChatMid(const std::string& val);

  bool operator == (const GetSquareMemberResponse & rhs) const
  {
    if (!(squareMember == rhs.squareMember))
      return false;
    if (!(relation == rhs.relation))
      return false;
    if (!(oneOnOneChatMid == rhs.oneOnOneChatMid))
      return false;
    return true;
  }
  bool operator != (const GetSquareMemberResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetSquareMemberResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetSquareMemberResponse &a, GetSquareMemberResponse &b);

std::ostream& operator<<(std::ostream& out, const GetSquareMemberResponse& obj);

typedef struct _GetSquareMembersRequest__isset {
  _GetSquareMembersRequest__isset() : mids(false) {}
  bool mids :1;
} _GetSquareMembersRequest__isset;

class GetSquareMembersRequest : public virtual ::apache::thrift::TBase {
 public:

  GetSquareMembersRequest(const GetSquareMembersRequest&);
  GetSquareMembersRequest& operator=(const GetSquareMembersRequest&);
  GetSquareMembersRequest() {
  }

  virtual ~GetSquareMembersRequest() noexcept;
  std::set<std::string>  mids;

  _GetSquareMembersRequest__isset __isset;

  void __set_mids(const std::set<std::string> & val);

  bool operator == (const GetSquareMembersRequest & rhs) const
  {
    if (!(mids == rhs.mids))
      return false;
    return true;
  }
  bool operator != (const GetSquareMembersRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetSquareMembersRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetSquareMembersRequest &a, GetSquareMembersRequest &b);

std::ostream& operator<<(std::ostream& out, const GetSquareMembersRequest& obj);

typedef struct _GetSquareMembersResponse__isset {
  _GetSquareMembersResponse__isset() : members(false) {}
  bool members :1;
} _GetSquareMembersResponse__isset;

class GetSquareMembersResponse : public virtual ::apache::thrift::TBase {
 public:

  GetSquareMembersResponse(const GetSquareMembersResponse&);
  GetSquareMembersResponse& operator=(const GetSquareMembersResponse&);
  GetSquareMembersResponse() {
  }

  virtual ~GetSquareMembersResponse() noexcept;
  SquareMember members;

  _GetSquareMembersResponse__isset __isset;

  void __set_members(const SquareMember& val);

  bool operator == (const GetSquareMembersResponse & rhs) const
  {
    if (!(members == rhs.members))
      return false;
    return true;
  }
  bool operator != (const GetSquareMembersResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetSquareMembersResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetSquareMembersResponse &a, GetSquareMembersResponse &b);

std::ostream& operator<<(std::ostream& out, const GetSquareMembersResponse& obj);

typedef struct _GetSquareMemberRelationsRequest__isset {
  _GetSquareMemberRelationsRequest__isset() : state(false), continuationToken(false), limit(false) {}
  bool state :1;
  bool continuationToken :1;
  bool limit :1;
} _GetSquareMemberRelationsRequest__isset;

class GetSquareMemberRelationsRequest : public virtual ::apache::thrift::TBase {
 public:

  GetSquareMemberRelationsRequest(const GetSquareMemberRelationsRequest&);
  GetSquareMemberRelationsRequest& operator=(const GetSquareMemberRelationsRequest&);
  GetSquareMemberRelationsRequest() : state((SquareMemberRelationState::type)0), continuationToken(), limit(0) {
  }

  virtual ~GetSquareMemberRelationsRequest() noexcept;
  /**
   * 
   * @see SquareMemberRelationState
   */
  SquareMemberRelationState::type state;
  std::string continuationToken;
  int32_t limit;

  _GetSquareMemberRelationsRequest__isset __isset;

  void __set_state(const SquareMemberRelationState::type val);

  void __set_continuationToken(const std::string& val);

  void __set_limit(const int32_t val);

  bool operator == (const GetSquareMemberRelationsRequest & rhs) const
  {
    if (!(state == rhs.state))
      return false;
    if (!(continuationToken == rhs.continuationToken))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const GetSquareMemberRelationsRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetSquareMemberRelationsRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetSquareMemberRelationsRequest &a, GetSquareMemberRelationsRequest &b);

std::ostream& operator<<(std::ostream& out, const GetSquareMemberRelationsRequest& obj);

typedef struct _GetSquareMemberRelationsResponse__isset {
  _GetSquareMemberRelationsResponse__isset() : squareMembers(false), relations(false), continuationToken(false) {}
  bool squareMembers :1;
  bool relations :1;
  bool continuationToken :1;
} _GetSquareMemberRelationsResponse__isset;

class GetSquareMemberRelationsResponse : public virtual ::apache::thrift::TBase {
 public:

  GetSquareMemberRelationsResponse(const GetSquareMemberRelationsResponse&);
  GetSquareMemberRelationsResponse& operator=(const GetSquareMemberRelationsResponse&);
  GetSquareMemberRelationsResponse() : continuationToken() {
  }

  virtual ~GetSquareMemberRelationsResponse() noexcept;
  std::vector<SquareMember>  squareMembers;
  std::map<std::string, SquareMemberRelation>  relations;
  std::string continuationToken;

  _GetSquareMemberRelationsResponse__isset __isset;

  void __set_squareMembers(const std::vector<SquareMember> & val);

  void __set_relations(const std::map<std::string, SquareMemberRelation> & val);

  void __set_continuationToken(const std::string& val);

  bool operator == (const GetSquareMemberRelationsResponse & rhs) const
  {
    if (!(squareMembers == rhs.squareMembers))
      return false;
    if (!(relations == rhs.relations))
      return false;
    if (!(continuationToken == rhs.continuationToken))
      return false;
    return true;
  }
  bool operator != (const GetSquareMemberRelationsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetSquareMemberRelationsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetSquareMemberRelationsResponse &a, GetSquareMemberRelationsResponse &b);

std::ostream& operator<<(std::ostream& out, const GetSquareMemberRelationsResponse& obj);

typedef struct _GetSquareMemberRelationRequest__isset {
  _GetSquareMemberRelationRequest__isset() : squareMid(false), targetSquareMemberMid(false) {}
  bool squareMid :1;
  bool targetSquareMemberMid :1;
} _GetSquareMemberRelationRequest__isset;

class GetSquareMemberRelationRequest : public virtual ::apache::thrift::TBase {
 public:

  GetSquareMemberRelationRequest(const GetSquareMemberRelationRequest&);
  GetSquareMemberRelationRequest& operator=(const GetSquareMemberRelationRequest&);
  GetSquareMemberRelationRequest() : squareMid(), targetSquareMemberMid() {
  }

  virtual ~GetSquareMemberRelationRequest() noexcept;
  std::string squareMid;
  std::string targetSquareMemberMid;

  _GetSquareMemberRelationRequest__isset __isset;

  void __set_squareMid(const std::string& val);

  void __set_targetSquareMemberMid(const std::string& val);

  bool operator == (const GetSquareMemberRelationRequest & rhs) const
  {
    if (!(squareMid == rhs.squareMid))
      return false;
    if (!(targetSquareMemberMid == rhs.targetSquareMemberMid))
      return false;
    return true;
  }
  bool operator != (const GetSquareMemberRelationRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetSquareMemberRelationRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetSquareMemberRelationRequest &a, GetSquareMemberRelationRequest &b);

std::ostream& operator<<(std::ostream& out, const GetSquareMemberRelationRequest& obj);

typedef struct _GetSquareMemberRelationResponse__isset {
  _GetSquareMemberRelationResponse__isset() : squareMid(false), targetSquareMemberMid(false), relation(false) {}
  bool squareMid :1;
  bool targetSquareMemberMid :1;
  bool relation :1;
} _GetSquareMemberRelationResponse__isset;

class GetSquareMemberRelationResponse : public virtual ::apache::thrift::TBase {
 public:

  GetSquareMemberRelationResponse(const GetSquareMemberRelationResponse&);
  GetSquareMemberRelationResponse& operator=(const GetSquareMemberRelationResponse&);
  GetSquareMemberRelationResponse() : squareMid(), targetSquareMemberMid() {
  }

  virtual ~GetSquareMemberRelationResponse() noexcept;
  std::string squareMid;
  std::string targetSquareMemberMid;
  SquareMemberRelation relation;

  _GetSquareMemberRelationResponse__isset __isset;

  void __set_squareMid(const std::string& val);

  void __set_targetSquareMemberMid(const std::string& val);

  void __set_relation(const SquareMemberRelation& val);

  bool operator == (const GetSquareMemberRelationResponse & rhs) const
  {
    if (!(squareMid == rhs.squareMid))
      return false;
    if (!(targetSquareMemberMid == rhs.targetSquareMemberMid))
      return false;
    if (!(relation == rhs.relation))
      return false;
    return true;
  }
  bool operator != (const GetSquareMemberRelationResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetSquareMemberRelationResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetSquareMemberRelationResponse &a, GetSquareMemberRelationResponse &b);

std::ostream& operator<<(std::ostream& out, const GetSquareMemberRelationResponse& obj);

typedef struct _Category__isset {
  _Category__isset() : id(false), name(false) {}
  bool id :1;
  bool name :1;
} _Category__isset;

class Category : public virtual ::apache::thrift::TBase {
 public:

  Category(const Category&);
  Category& operator=(const Category&);
  Category() : id(0), name() {
  }

  virtual ~Category() noexcept;
  int32_t id;
  std::string name;

  _Category__isset __isset;

  void __set_id(const int32_t val);

  void __set_name(const std::string& val);

  bool operator == (const Category & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const Category &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Category & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Category &a, Category &b);

std::ostream& operator<<(std::ostream& out, const Category& obj);


class GetSquareCategoriesRequest : public virtual ::apache::thrift::TBase {
 public:

  GetSquareCategoriesRequest(const GetSquareCategoriesRequest&);
  GetSquareCategoriesRequest& operator=(const GetSquareCategoriesRequest&);
  GetSquareCategoriesRequest() {
  }

  virtual ~GetSquareCategoriesRequest() noexcept;

  bool operator == (const GetSquareCategoriesRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GetSquareCategoriesRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetSquareCategoriesRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetSquareCategoriesRequest &a, GetSquareCategoriesRequest &b);

std::ostream& operator<<(std::ostream& out, const GetSquareCategoriesRequest& obj);

typedef struct _GetSquareCategoriesResponse__isset {
  _GetSquareCategoriesResponse__isset() : categoryList(false) {}
  bool categoryList :1;
} _GetSquareCategoriesResponse__isset;

class GetSquareCategoriesResponse : public virtual ::apache::thrift::TBase {
 public:

  GetSquareCategoriesResponse(const GetSquareCategoriesResponse&);
  GetSquareCategoriesResponse& operator=(const GetSquareCategoriesResponse&);
  GetSquareCategoriesResponse() {
  }

  virtual ~GetSquareCategoriesResponse() noexcept;
  std::vector<Category>  categoryList;

  _GetSquareCategoriesResponse__isset __isset;

  void __set_categoryList(const std::vector<Category> & val);

  bool operator == (const GetSquareCategoriesResponse & rhs) const
  {
    if (!(categoryList == rhs.categoryList))
      return false;
    return true;
  }
  bool operator != (const GetSquareCategoriesResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetSquareCategoriesResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetSquareCategoriesResponse &a, GetSquareCategoriesResponse &b);

std::ostream& operator<<(std::ostream& out, const GetSquareCategoriesResponse& obj);

typedef struct _UpdateSquareRequest__isset {
  _UpdateSquareRequest__isset() : updatedAttrs(false), square(false) {}
  bool updatedAttrs :1;
  bool square :1;
} _UpdateSquareRequest__isset;

class UpdateSquareRequest : public virtual ::apache::thrift::TBase {
 public:

  UpdateSquareRequest(const UpdateSquareRequest&);
  UpdateSquareRequest& operator=(const UpdateSquareRequest&);
  UpdateSquareRequest() {
  }

  virtual ~UpdateSquareRequest() noexcept;
  std::set<SquareAttribute::type>  updatedAttrs;
  Square square;

  _UpdateSquareRequest__isset __isset;

  void __set_updatedAttrs(const std::set<SquareAttribute::type> & val);

  void __set_square(const Square& val);

  bool operator == (const UpdateSquareRequest & rhs) const
  {
    if (!(updatedAttrs == rhs.updatedAttrs))
      return false;
    if (!(square == rhs.square))
      return false;
    return true;
  }
  bool operator != (const UpdateSquareRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateSquareRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UpdateSquareRequest &a, UpdateSquareRequest &b);

std::ostream& operator<<(std::ostream& out, const UpdateSquareRequest& obj);

typedef struct _UpdateSquareResponse__isset {
  _UpdateSquareResponse__isset() : updatedAttrs(false), square(false) {}
  bool updatedAttrs :1;
  bool square :1;
} _UpdateSquareResponse__isset;

class UpdateSquareResponse : public virtual ::apache::thrift::TBase {
 public:

  UpdateSquareResponse(const UpdateSquareResponse&);
  UpdateSquareResponse& operator=(const UpdateSquareResponse&);
  UpdateSquareResponse() {
  }

  virtual ~UpdateSquareResponse() noexcept;
  std::set<SquareAttribute::type>  updatedAttrs;
  Square square;

  _UpdateSquareResponse__isset __isset;

  void __set_updatedAttrs(const std::set<SquareAttribute::type> & val);

  void __set_square(const Square& val);

  bool operator == (const UpdateSquareResponse & rhs) const
  {
    if (!(updatedAttrs == rhs.updatedAttrs))
      return false;
    if (!(square == rhs.square))
      return false;
    return true;
  }
  bool operator != (const UpdateSquareResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateSquareResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UpdateSquareResponse &a, UpdateSquareResponse &b);

std::ostream& operator<<(std::ostream& out, const UpdateSquareResponse& obj);

typedef struct _SearchSquaresRequest__isset {
  _SearchSquaresRequest__isset() : query(false), continuationToken(false), limit(false) {}
  bool query :1;
  bool continuationToken :1;
  bool limit :1;
} _SearchSquaresRequest__isset;

class SearchSquaresRequest : public virtual ::apache::thrift::TBase {
 public:

  SearchSquaresRequest(const SearchSquaresRequest&);
  SearchSquaresRequest& operator=(const SearchSquaresRequest&);
  SearchSquaresRequest() : query(), continuationToken(), limit(0) {
  }

  virtual ~SearchSquaresRequest() noexcept;
  std::string query;
  std::string continuationToken;
  int32_t limit;

  _SearchSquaresRequest__isset __isset;

  void __set_query(const std::string& val);

  void __set_continuationToken(const std::string& val);

  void __set_limit(const int32_t val);

  bool operator == (const SearchSquaresRequest & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    if (!(continuationToken == rhs.continuationToken))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const SearchSquaresRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SearchSquaresRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SearchSquaresRequest &a, SearchSquaresRequest &b);

std::ostream& operator<<(std::ostream& out, const SearchSquaresRequest& obj);

typedef struct _SearchSquaresResponse__isset {
  _SearchSquaresResponse__isset() : squares(false), squareStatuses(false), myMemberships(false), continuationToken(false), noteStatuses(false) {}
  bool squares :1;
  bool squareStatuses :1;
  bool myMemberships :1;
  bool continuationToken :1;
  bool noteStatuses :1;
} _SearchSquaresResponse__isset;

class SearchSquaresResponse : public virtual ::apache::thrift::TBase {
 public:

  SearchSquaresResponse(const SearchSquaresResponse&);
  SearchSquaresResponse& operator=(const SearchSquaresResponse&);
  SearchSquaresResponse() : continuationToken() {
  }

  virtual ~SearchSquaresResponse() noexcept;
  std::vector<Square>  squares;
  std::map<std::string, SquareStatus>  squareStatuses;
  std::map<std::string, SquareMember>  myMemberships;
  std::string continuationToken;
  std::map<std::string, NoteStatus>  noteStatuses;

  _SearchSquaresResponse__isset __isset;

  void __set_squares(const std::vector<Square> & val);

  void __set_squareStatuses(const std::map<std::string, SquareStatus> & val);

  void __set_myMemberships(const std::map<std::string, SquareMember> & val);

  void __set_continuationToken(const std::string& val);

  void __set_noteStatuses(const std::map<std::string, NoteStatus> & val);

  bool operator == (const SearchSquaresResponse & rhs) const
  {
    if (!(squares == rhs.squares))
      return false;
    if (!(squareStatuses == rhs.squareStatuses))
      return false;
    if (!(myMemberships == rhs.myMemberships))
      return false;
    if (!(continuationToken == rhs.continuationToken))
      return false;
    if (!(noteStatuses == rhs.noteStatuses))
      return false;
    return true;
  }
  bool operator != (const SearchSquaresResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SearchSquaresResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SearchSquaresResponse &a, SearchSquaresResponse &b);

std::ostream& operator<<(std::ostream& out, const SearchSquaresResponse& obj);

typedef struct _GetSquareFeatureSetRequest__isset {
  _GetSquareFeatureSetRequest__isset() : squareMid(false) {}
  bool squareMid :1;
} _GetSquareFeatureSetRequest__isset;

class GetSquareFeatureSetRequest : public virtual ::apache::thrift::TBase {
 public:

  GetSquareFeatureSetRequest(const GetSquareFeatureSetRequest&);
  GetSquareFeatureSetRequest& operator=(const GetSquareFeatureSetRequest&);
  GetSquareFeatureSetRequest() : squareMid() {
  }

  virtual ~GetSquareFeatureSetRequest() noexcept;
  std::string squareMid;

  _GetSquareFeatureSetRequest__isset __isset;

  void __set_squareMid(const std::string& val);

  bool operator == (const GetSquareFeatureSetRequest & rhs) const
  {
    if (!(squareMid == rhs.squareMid))
      return false;
    return true;
  }
  bool operator != (const GetSquareFeatureSetRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetSquareFeatureSetRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetSquareFeatureSetRequest &a, GetSquareFeatureSetRequest &b);

std::ostream& operator<<(std::ostream& out, const GetSquareFeatureSetRequest& obj);

typedef struct _GetSquareFeatureSetResponse__isset {
  _GetSquareFeatureSetResponse__isset() : squareFeatureSet(false) {}
  bool squareFeatureSet :1;
} _GetSquareFeatureSetResponse__isset;

class GetSquareFeatureSetResponse : public virtual ::apache::thrift::TBase {
 public:

  GetSquareFeatureSetResponse(const GetSquareFeatureSetResponse&);
  GetSquareFeatureSetResponse& operator=(const GetSquareFeatureSetResponse&);
  GetSquareFeatureSetResponse() {
  }

  virtual ~GetSquareFeatureSetResponse() noexcept;
  SquareFeatureSet squareFeatureSet;

  _GetSquareFeatureSetResponse__isset __isset;

  void __set_squareFeatureSet(const SquareFeatureSet& val);

  bool operator == (const GetSquareFeatureSetResponse & rhs) const
  {
    if (!(squareFeatureSet == rhs.squareFeatureSet))
      return false;
    return true;
  }
  bool operator != (const GetSquareFeatureSetResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetSquareFeatureSetResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetSquareFeatureSetResponse &a, GetSquareFeatureSetResponse &b);

std::ostream& operator<<(std::ostream& out, const GetSquareFeatureSetResponse& obj);

typedef struct _UpdateSquareFeatureSetRequest__isset {
  _UpdateSquareFeatureSetRequest__isset() : updateAttributes(false), squareFeatureSet(false) {}
  bool updateAttributes :1;
  bool squareFeatureSet :1;
} _UpdateSquareFeatureSetRequest__isset;

class UpdateSquareFeatureSetRequest : public virtual ::apache::thrift::TBase {
 public:

  UpdateSquareFeatureSetRequest(const UpdateSquareFeatureSetRequest&);
  UpdateSquareFeatureSetRequest& operator=(const UpdateSquareFeatureSetRequest&);
  UpdateSquareFeatureSetRequest() {
  }

  virtual ~UpdateSquareFeatureSetRequest() noexcept;
  std::set<SquareFeatureSetAttribute::type>  updateAttributes;
  SquareFeatureSet squareFeatureSet;

  _UpdateSquareFeatureSetRequest__isset __isset;

  void __set_updateAttributes(const std::set<SquareFeatureSetAttribute::type> & val);

  void __set_squareFeatureSet(const SquareFeatureSet& val);

  bool operator == (const UpdateSquareFeatureSetRequest & rhs) const
  {
    if (!(updateAttributes == rhs.updateAttributes))
      return false;
    if (!(squareFeatureSet == rhs.squareFeatureSet))
      return false;
    return true;
  }
  bool operator != (const UpdateSquareFeatureSetRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateSquareFeatureSetRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UpdateSquareFeatureSetRequest &a, UpdateSquareFeatureSetRequest &b);

std::ostream& operator<<(std::ostream& out, const UpdateSquareFeatureSetRequest& obj);

typedef struct _UpdateSquareFeatureSetResponse__isset {
  _UpdateSquareFeatureSetResponse__isset() : updateAttributes(false), squareFeatureSet(false) {}
  bool updateAttributes :1;
  bool squareFeatureSet :1;
} _UpdateSquareFeatureSetResponse__isset;

class UpdateSquareFeatureSetResponse : public virtual ::apache::thrift::TBase {
 public:

  UpdateSquareFeatureSetResponse(const UpdateSquareFeatureSetResponse&);
  UpdateSquareFeatureSetResponse& operator=(const UpdateSquareFeatureSetResponse&);
  UpdateSquareFeatureSetResponse() {
  }

  virtual ~UpdateSquareFeatureSetResponse() noexcept;
  std::set<SquareFeatureSetAttribute::type>  updateAttributes;
  SquareFeatureSet squareFeatureSet;

  _UpdateSquareFeatureSetResponse__isset __isset;

  void __set_updateAttributes(const std::set<SquareFeatureSetAttribute::type> & val);

  void __set_squareFeatureSet(const SquareFeatureSet& val);

  bool operator == (const UpdateSquareFeatureSetResponse & rhs) const
  {
    if (!(updateAttributes == rhs.updateAttributes))
      return false;
    if (!(squareFeatureSet == rhs.squareFeatureSet))
      return false;
    return true;
  }
  bool operator != (const UpdateSquareFeatureSetResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateSquareFeatureSetResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UpdateSquareFeatureSetResponse &a, UpdateSquareFeatureSetResponse &b);

std::ostream& operator<<(std::ostream& out, const UpdateSquareFeatureSetResponse& obj);

typedef struct _UpdateSquareMemberRequest__isset {
  _UpdateSquareMemberRequest__isset() : updatedAttrs(false), updatedPreferenceAttrs(false), squareMember(false) {}
  bool updatedAttrs :1;
  bool updatedPreferenceAttrs :1;
  bool squareMember :1;
} _UpdateSquareMemberRequest__isset;

class UpdateSquareMemberRequest : public virtual ::apache::thrift::TBase {
 public:

  UpdateSquareMemberRequest(const UpdateSquareMemberRequest&);
  UpdateSquareMemberRequest& operator=(const UpdateSquareMemberRequest&);
  UpdateSquareMemberRequest() {
  }

  virtual ~UpdateSquareMemberRequest() noexcept;
  std::set<SquareMemberAttribute::type>  updatedAttrs;
  std::set<SquarePreferenceAttribute::type>  updatedPreferenceAttrs;
  SquareMember squareMember;

  _UpdateSquareMemberRequest__isset __isset;

  void __set_updatedAttrs(const std::set<SquareMemberAttribute::type> & val);

  void __set_updatedPreferenceAttrs(const std::set<SquarePreferenceAttribute::type> & val);

  void __set_squareMember(const SquareMember& val);

  bool operator == (const UpdateSquareMemberRequest & rhs) const
  {
    if (!(updatedAttrs == rhs.updatedAttrs))
      return false;
    if (!(updatedPreferenceAttrs == rhs.updatedPreferenceAttrs))
      return false;
    if (!(squareMember == rhs.squareMember))
      return false;
    return true;
  }
  bool operator != (const UpdateSquareMemberRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateSquareMemberRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UpdateSquareMemberRequest &a, UpdateSquareMemberRequest &b);

std::ostream& operator<<(std::ostream& out, const UpdateSquareMemberRequest& obj);

typedef struct _UpdateSquareMemberResponse__isset {
  _UpdateSquareMemberResponse__isset() : updatedAttrs(false), squareMember(false), updatedPreferenceAttrs(false) {}
  bool updatedAttrs :1;
  bool squareMember :1;
  bool updatedPreferenceAttrs :1;
} _UpdateSquareMemberResponse__isset;

class UpdateSquareMemberResponse : public virtual ::apache::thrift::TBase {
 public:

  UpdateSquareMemberResponse(const UpdateSquareMemberResponse&);
  UpdateSquareMemberResponse& operator=(const UpdateSquareMemberResponse&);
  UpdateSquareMemberResponse() {
  }

  virtual ~UpdateSquareMemberResponse() noexcept;
  std::set<SquareMemberAttribute::type>  updatedAttrs;
  SquareMember squareMember;
  std::set<SquarePreferenceAttribute::type>  updatedPreferenceAttrs;

  _UpdateSquareMemberResponse__isset __isset;

  void __set_updatedAttrs(const std::set<SquareMemberAttribute::type> & val);

  void __set_squareMember(const SquareMember& val);

  void __set_updatedPreferenceAttrs(const std::set<SquarePreferenceAttribute::type> & val);

  bool operator == (const UpdateSquareMemberResponse & rhs) const
  {
    if (!(updatedAttrs == rhs.updatedAttrs))
      return false;
    if (!(squareMember == rhs.squareMember))
      return false;
    if (!(updatedPreferenceAttrs == rhs.updatedPreferenceAttrs))
      return false;
    return true;
  }
  bool operator != (const UpdateSquareMemberResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateSquareMemberResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UpdateSquareMemberResponse &a, UpdateSquareMemberResponse &b);

std::ostream& operator<<(std::ostream& out, const UpdateSquareMemberResponse& obj);

typedef struct _UpdateSquareMembersRequest__isset {
  _UpdateSquareMembersRequest__isset() : updatedAttrs(false), members(false) {}
  bool updatedAttrs :1;
  bool members :1;
} _UpdateSquareMembersRequest__isset;

class UpdateSquareMembersRequest : public virtual ::apache::thrift::TBase {
 public:

  UpdateSquareMembersRequest(const UpdateSquareMembersRequest&);
  UpdateSquareMembersRequest& operator=(const UpdateSquareMembersRequest&);
  UpdateSquareMembersRequest() {
  }

  virtual ~UpdateSquareMembersRequest() noexcept;
  std::set<SquareMemberAttribute::type>  updatedAttrs;
  std::vector<SquareMember>  members;

  _UpdateSquareMembersRequest__isset __isset;

  void __set_updatedAttrs(const std::set<SquareMemberAttribute::type> & val);

  void __set_members(const std::vector<SquareMember> & val);

  bool operator == (const UpdateSquareMembersRequest & rhs) const
  {
    if (!(updatedAttrs == rhs.updatedAttrs))
      return false;
    if (!(members == rhs.members))
      return false;
    return true;
  }
  bool operator != (const UpdateSquareMembersRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateSquareMembersRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UpdateSquareMembersRequest &a, UpdateSquareMembersRequest &b);

std::ostream& operator<<(std::ostream& out, const UpdateSquareMembersRequest& obj);

typedef struct _UpdateSquareMembersResponse__isset {
  _UpdateSquareMembersResponse__isset() : updatedAttrs(false), editor(false), members(false) {}
  bool updatedAttrs :1;
  bool editor :1;
  bool members :1;
} _UpdateSquareMembersResponse__isset;

class UpdateSquareMembersResponse : public virtual ::apache::thrift::TBase {
 public:

  UpdateSquareMembersResponse(const UpdateSquareMembersResponse&);
  UpdateSquareMembersResponse& operator=(const UpdateSquareMembersResponse&);
  UpdateSquareMembersResponse() {
  }

  virtual ~UpdateSquareMembersResponse() noexcept;
  std::set<SquareMemberAttribute::type>  updatedAttrs;
  SquareMember editor;
  std::map<std::string, SquareMember>  members;

  _UpdateSquareMembersResponse__isset __isset;

  void __set_updatedAttrs(const std::set<SquareMemberAttribute::type> & val);

  void __set_editor(const SquareMember& val);

  void __set_members(const std::map<std::string, SquareMember> & val);

  bool operator == (const UpdateSquareMembersResponse & rhs) const
  {
    if (!(updatedAttrs == rhs.updatedAttrs))
      return false;
    if (!(editor == rhs.editor))
      return false;
    if (!(members == rhs.members))
      return false;
    return true;
  }
  bool operator != (const UpdateSquareMembersResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateSquareMembersResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UpdateSquareMembersResponse &a, UpdateSquareMembersResponse &b);

std::ostream& operator<<(std::ostream& out, const UpdateSquareMembersResponse& obj);

typedef struct _RejectSquareMembersRequest__isset {
  _RejectSquareMembersRequest__isset() : squareMid(false), requestedMemberMids(false) {}
  bool squareMid :1;
  bool requestedMemberMids :1;
} _RejectSquareMembersRequest__isset;

class RejectSquareMembersRequest : public virtual ::apache::thrift::TBase {
 public:

  RejectSquareMembersRequest(const RejectSquareMembersRequest&);
  RejectSquareMembersRequest& operator=(const RejectSquareMembersRequest&);
  RejectSquareMembersRequest() : squareMid() {
  }

  virtual ~RejectSquareMembersRequest() noexcept;
  std::string squareMid;
  std::vector<std::string>  requestedMemberMids;

  _RejectSquareMembersRequest__isset __isset;

  void __set_squareMid(const std::string& val);

  void __set_requestedMemberMids(const std::vector<std::string> & val);

  bool operator == (const RejectSquareMembersRequest & rhs) const
  {
    if (!(squareMid == rhs.squareMid))
      return false;
    if (!(requestedMemberMids == rhs.requestedMemberMids))
      return false;
    return true;
  }
  bool operator != (const RejectSquareMembersRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RejectSquareMembersRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RejectSquareMembersRequest &a, RejectSquareMembersRequest &b);

std::ostream& operator<<(std::ostream& out, const RejectSquareMembersRequest& obj);

typedef struct _RejectSquareMembersResponse__isset {
  _RejectSquareMembersResponse__isset() : rejectedMembers(false), status(false) {}
  bool rejectedMembers :1;
  bool status :1;
} _RejectSquareMembersResponse__isset;

class RejectSquareMembersResponse : public virtual ::apache::thrift::TBase {
 public:

  RejectSquareMembersResponse(const RejectSquareMembersResponse&);
  RejectSquareMembersResponse& operator=(const RejectSquareMembersResponse&);
  RejectSquareMembersResponse() {
  }

  virtual ~RejectSquareMembersResponse() noexcept;
  std::vector<SquareMember>  rejectedMembers;
  SquareStatus status;

  _RejectSquareMembersResponse__isset __isset;

  void __set_rejectedMembers(const std::vector<SquareMember> & val);

  void __set_status(const SquareStatus& val);

  bool operator == (const RejectSquareMembersResponse & rhs) const
  {
    if (!(rejectedMembers == rhs.rejectedMembers))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const RejectSquareMembersResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RejectSquareMembersResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RejectSquareMembersResponse &a, RejectSquareMembersResponse &b);

std::ostream& operator<<(std::ostream& out, const RejectSquareMembersResponse& obj);

typedef struct _RemoveSubscriptionsRequest__isset {
  _RemoveSubscriptionsRequest__isset() : unsubscriptions(false) {}
  bool unsubscriptions :1;
} _RemoveSubscriptionsRequest__isset;

class RemoveSubscriptionsRequest : public virtual ::apache::thrift::TBase {
 public:

  RemoveSubscriptionsRequest(const RemoveSubscriptionsRequest&);
  RemoveSubscriptionsRequest& operator=(const RemoveSubscriptionsRequest&);
  RemoveSubscriptionsRequest() {
  }

  virtual ~RemoveSubscriptionsRequest() noexcept;
  std::vector<int64_t>  unsubscriptions;

  _RemoveSubscriptionsRequest__isset __isset;

  void __set_unsubscriptions(const std::vector<int64_t> & val);

  bool operator == (const RemoveSubscriptionsRequest & rhs) const
  {
    if (!(unsubscriptions == rhs.unsubscriptions))
      return false;
    return true;
  }
  bool operator != (const RemoveSubscriptionsRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoveSubscriptionsRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RemoveSubscriptionsRequest &a, RemoveSubscriptionsRequest &b);

std::ostream& operator<<(std::ostream& out, const RemoveSubscriptionsRequest& obj);


class RemoveSubscriptionsResponse : public virtual ::apache::thrift::TBase {
 public:

  RemoveSubscriptionsResponse(const RemoveSubscriptionsResponse&);
  RemoveSubscriptionsResponse& operator=(const RemoveSubscriptionsResponse&);
  RemoveSubscriptionsResponse() {
  }

  virtual ~RemoveSubscriptionsResponse() noexcept;

  bool operator == (const RemoveSubscriptionsResponse & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RemoveSubscriptionsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoveSubscriptionsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RemoveSubscriptionsResponse &a, RemoveSubscriptionsResponse &b);

std::ostream& operator<<(std::ostream& out, const RemoveSubscriptionsResponse& obj);

typedef struct _RefreshSubscriptionsRequest__isset {
  _RefreshSubscriptionsRequest__isset() : subscriptions(false) {}
  bool subscriptions :1;
} _RefreshSubscriptionsRequest__isset;

class RefreshSubscriptionsRequest : public virtual ::apache::thrift::TBase {
 public:

  RefreshSubscriptionsRequest(const RefreshSubscriptionsRequest&);
  RefreshSubscriptionsRequest& operator=(const RefreshSubscriptionsRequest&);
  RefreshSubscriptionsRequest() {
  }

  virtual ~RefreshSubscriptionsRequest() noexcept;
  std::vector<int64_t>  subscriptions;

  _RefreshSubscriptionsRequest__isset __isset;

  void __set_subscriptions(const std::vector<int64_t> & val);

  bool operator == (const RefreshSubscriptionsRequest & rhs) const
  {
    if (!(subscriptions == rhs.subscriptions))
      return false;
    return true;
  }
  bool operator != (const RefreshSubscriptionsRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RefreshSubscriptionsRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RefreshSubscriptionsRequest &a, RefreshSubscriptionsRequest &b);

std::ostream& operator<<(std::ostream& out, const RefreshSubscriptionsRequest& obj);

typedef struct _RefreshSubscriptionsResponse__isset {
  _RefreshSubscriptionsResponse__isset() : ttlMillis(false), subscriptionStates(false) {}
  bool ttlMillis :1;
  bool subscriptionStates :1;
} _RefreshSubscriptionsResponse__isset;

class RefreshSubscriptionsResponse : public virtual ::apache::thrift::TBase {
 public:

  RefreshSubscriptionsResponse(const RefreshSubscriptionsResponse&);
  RefreshSubscriptionsResponse& operator=(const RefreshSubscriptionsResponse&);
  RefreshSubscriptionsResponse() : ttlMillis(0) {
  }

  virtual ~RefreshSubscriptionsResponse() noexcept;
  int64_t ttlMillis;
  std::map<int64_t, SubscriptionState>  subscriptionStates;

  _RefreshSubscriptionsResponse__isset __isset;

  void __set_ttlMillis(const int64_t val);

  void __set_subscriptionStates(const std::map<int64_t, SubscriptionState> & val);

  bool operator == (const RefreshSubscriptionsResponse & rhs) const
  {
    if (!(ttlMillis == rhs.ttlMillis))
      return false;
    if (!(subscriptionStates == rhs.subscriptionStates))
      return false;
    return true;
  }
  bool operator != (const RefreshSubscriptionsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RefreshSubscriptionsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RefreshSubscriptionsResponse &a, RefreshSubscriptionsResponse &b);

std::ostream& operator<<(std::ostream& out, const RefreshSubscriptionsResponse& obj);

typedef struct _UpdateSquareChatRequest__isset {
  _UpdateSquareChatRequest__isset() : updatedAttrs(false), squareChat(false) {}
  bool updatedAttrs :1;
  bool squareChat :1;
} _UpdateSquareChatRequest__isset;

class UpdateSquareChatRequest : public virtual ::apache::thrift::TBase {
 public:

  UpdateSquareChatRequest(const UpdateSquareChatRequest&);
  UpdateSquareChatRequest& operator=(const UpdateSquareChatRequest&);
  UpdateSquareChatRequest() {
  }

  virtual ~UpdateSquareChatRequest() noexcept;
  std::set<SquareChatAttribute::type>  updatedAttrs;
  SquareChat squareChat;

  _UpdateSquareChatRequest__isset __isset;

  void __set_updatedAttrs(const std::set<SquareChatAttribute::type> & val);

  void __set_squareChat(const SquareChat& val);

  bool operator == (const UpdateSquareChatRequest & rhs) const
  {
    if (!(updatedAttrs == rhs.updatedAttrs))
      return false;
    if (!(squareChat == rhs.squareChat))
      return false;
    return true;
  }
  bool operator != (const UpdateSquareChatRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateSquareChatRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UpdateSquareChatRequest &a, UpdateSquareChatRequest &b);

std::ostream& operator<<(std::ostream& out, const UpdateSquareChatRequest& obj);

typedef struct _UpdateSquareChatResponse__isset {
  _UpdateSquareChatResponse__isset() : updatedAttrs(false), squareChat(false) {}
  bool updatedAttrs :1;
  bool squareChat :1;
} _UpdateSquareChatResponse__isset;

class UpdateSquareChatResponse : public virtual ::apache::thrift::TBase {
 public:

  UpdateSquareChatResponse(const UpdateSquareChatResponse&);
  UpdateSquareChatResponse& operator=(const UpdateSquareChatResponse&);
  UpdateSquareChatResponse() {
  }

  virtual ~UpdateSquareChatResponse() noexcept;
  std::set<SquareChatAttribute::type>  updatedAttrs;
  SquareChat squareChat;

  _UpdateSquareChatResponse__isset __isset;

  void __set_updatedAttrs(const std::set<SquareChatAttribute::type> & val);

  void __set_squareChat(const SquareChat& val);

  bool operator == (const UpdateSquareChatResponse & rhs) const
  {
    if (!(updatedAttrs == rhs.updatedAttrs))
      return false;
    if (!(squareChat == rhs.squareChat))
      return false;
    return true;
  }
  bool operator != (const UpdateSquareChatResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateSquareChatResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UpdateSquareChatResponse &a, UpdateSquareChatResponse &b);

std::ostream& operator<<(std::ostream& out, const UpdateSquareChatResponse& obj);

typedef struct _DeleteSquareChatRequest__isset {
  _DeleteSquareChatRequest__isset() : squareChatMid(false), revision(false) {}
  bool squareChatMid :1;
  bool revision :1;
} _DeleteSquareChatRequest__isset;

class DeleteSquareChatRequest : public virtual ::apache::thrift::TBase {
 public:

  DeleteSquareChatRequest(const DeleteSquareChatRequest&);
  DeleteSquareChatRequest& operator=(const DeleteSquareChatRequest&);
  DeleteSquareChatRequest() : squareChatMid(), revision(0) {
  }

  virtual ~DeleteSquareChatRequest() noexcept;
  std::string squareChatMid;
  int64_t revision;

  _DeleteSquareChatRequest__isset __isset;

  void __set_squareChatMid(const std::string& val);

  void __set_revision(const int64_t val);

  bool operator == (const DeleteSquareChatRequest & rhs) const
  {
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    if (!(revision == rhs.revision))
      return false;
    return true;
  }
  bool operator != (const DeleteSquareChatRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteSquareChatRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeleteSquareChatRequest &a, DeleteSquareChatRequest &b);

std::ostream& operator<<(std::ostream& out, const DeleteSquareChatRequest& obj);


class DeleteSquareChatResponse : public virtual ::apache::thrift::TBase {
 public:

  DeleteSquareChatResponse(const DeleteSquareChatResponse&);
  DeleteSquareChatResponse& operator=(const DeleteSquareChatResponse&);
  DeleteSquareChatResponse() {
  }

  virtual ~DeleteSquareChatResponse() noexcept;

  bool operator == (const DeleteSquareChatResponse & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DeleteSquareChatResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteSquareChatResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeleteSquareChatResponse &a, DeleteSquareChatResponse &b);

std::ostream& operator<<(std::ostream& out, const DeleteSquareChatResponse& obj);

typedef struct _UpdateSquareChatMemberRequest__isset {
  _UpdateSquareChatMemberRequest__isset() : updatedAttrs(false), chatMember(false) {}
  bool updatedAttrs :1;
  bool chatMember :1;
} _UpdateSquareChatMemberRequest__isset;

class UpdateSquareChatMemberRequest : public virtual ::apache::thrift::TBase {
 public:

  UpdateSquareChatMemberRequest(const UpdateSquareChatMemberRequest&);
  UpdateSquareChatMemberRequest& operator=(const UpdateSquareChatMemberRequest&);
  UpdateSquareChatMemberRequest() {
  }

  virtual ~UpdateSquareChatMemberRequest() noexcept;
  std::set<SquareChatMemberAttribute::type>  updatedAttrs;
  SquareChatMember chatMember;

  _UpdateSquareChatMemberRequest__isset __isset;

  void __set_updatedAttrs(const std::set<SquareChatMemberAttribute::type> & val);

  void __set_chatMember(const SquareChatMember& val);

  bool operator == (const UpdateSquareChatMemberRequest & rhs) const
  {
    if (!(updatedAttrs == rhs.updatedAttrs))
      return false;
    if (!(chatMember == rhs.chatMember))
      return false;
    return true;
  }
  bool operator != (const UpdateSquareChatMemberRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateSquareChatMemberRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UpdateSquareChatMemberRequest &a, UpdateSquareChatMemberRequest &b);

std::ostream& operator<<(std::ostream& out, const UpdateSquareChatMemberRequest& obj);

typedef struct _UpdateSquareChatMemberResponse__isset {
  _UpdateSquareChatMemberResponse__isset() : updatedChatMember(false) {}
  bool updatedChatMember :1;
} _UpdateSquareChatMemberResponse__isset;

class UpdateSquareChatMemberResponse : public virtual ::apache::thrift::TBase {
 public:

  UpdateSquareChatMemberResponse(const UpdateSquareChatMemberResponse&);
  UpdateSquareChatMemberResponse& operator=(const UpdateSquareChatMemberResponse&);
  UpdateSquareChatMemberResponse() {
  }

  virtual ~UpdateSquareChatMemberResponse() noexcept;
  SquareChatMember updatedChatMember;

  _UpdateSquareChatMemberResponse__isset __isset;

  void __set_updatedChatMember(const SquareChatMember& val);

  bool operator == (const UpdateSquareChatMemberResponse & rhs) const
  {
    if (!(updatedChatMember == rhs.updatedChatMember))
      return false;
    return true;
  }
  bool operator != (const UpdateSquareChatMemberResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateSquareChatMemberResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UpdateSquareChatMemberResponse &a, UpdateSquareChatMemberResponse &b);

std::ostream& operator<<(std::ostream& out, const UpdateSquareChatMemberResponse& obj);

typedef struct _UpdateSquareAuthorityRequest__isset {
  _UpdateSquareAuthorityRequest__isset() : updateAttributes(false), authority(false) {}
  bool updateAttributes :1;
  bool authority :1;
} _UpdateSquareAuthorityRequest__isset;

class UpdateSquareAuthorityRequest : public virtual ::apache::thrift::TBase {
 public:

  UpdateSquareAuthorityRequest(const UpdateSquareAuthorityRequest&);
  UpdateSquareAuthorityRequest& operator=(const UpdateSquareAuthorityRequest&);
  UpdateSquareAuthorityRequest() {
  }

  virtual ~UpdateSquareAuthorityRequest() noexcept;
  std::set<SquareAuthorityAttribute::type>  updateAttributes;
  SquareAuthority authority;

  _UpdateSquareAuthorityRequest__isset __isset;

  void __set_updateAttributes(const std::set<SquareAuthorityAttribute::type> & val);

  void __set_authority(const SquareAuthority& val);

  bool operator == (const UpdateSquareAuthorityRequest & rhs) const
  {
    if (!(updateAttributes == rhs.updateAttributes))
      return false;
    if (!(authority == rhs.authority))
      return false;
    return true;
  }
  bool operator != (const UpdateSquareAuthorityRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateSquareAuthorityRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UpdateSquareAuthorityRequest &a, UpdateSquareAuthorityRequest &b);

std::ostream& operator<<(std::ostream& out, const UpdateSquareAuthorityRequest& obj);

typedef struct _UpdateSquareAuthorityResponse__isset {
  _UpdateSquareAuthorityResponse__isset() : updatdAttributes(false), authority(false) {}
  bool updatdAttributes :1;
  bool authority :1;
} _UpdateSquareAuthorityResponse__isset;

class UpdateSquareAuthorityResponse : public virtual ::apache::thrift::TBase {
 public:

  UpdateSquareAuthorityResponse(const UpdateSquareAuthorityResponse&);
  UpdateSquareAuthorityResponse& operator=(const UpdateSquareAuthorityResponse&);
  UpdateSquareAuthorityResponse() {
  }

  virtual ~UpdateSquareAuthorityResponse() noexcept;
  std::set<SquareAuthorityAttribute::type>  updatdAttributes;
  SquareAuthority authority;

  _UpdateSquareAuthorityResponse__isset __isset;

  void __set_updatdAttributes(const std::set<SquareAuthorityAttribute::type> & val);

  void __set_authority(const SquareAuthority& val);

  bool operator == (const UpdateSquareAuthorityResponse & rhs) const
  {
    if (!(updatdAttributes == rhs.updatdAttributes))
      return false;
    if (!(authority == rhs.authority))
      return false;
    return true;
  }
  bool operator != (const UpdateSquareAuthorityResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateSquareAuthorityResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UpdateSquareAuthorityResponse &a, UpdateSquareAuthorityResponse &b);

std::ostream& operator<<(std::ostream& out, const UpdateSquareAuthorityResponse& obj);

typedef struct _UpdateSquareMemberRelationRequest__isset {
  _UpdateSquareMemberRelationRequest__isset() : squareMid(false), targetSquareMemberMid(false), updatedAttrs(false), relation(false) {}
  bool squareMid :1;
  bool targetSquareMemberMid :1;
  bool updatedAttrs :1;
  bool relation :1;
} _UpdateSquareMemberRelationRequest__isset;

class UpdateSquareMemberRelationRequest : public virtual ::apache::thrift::TBase {
 public:

  UpdateSquareMemberRelationRequest(const UpdateSquareMemberRelationRequest&);
  UpdateSquareMemberRelationRequest& operator=(const UpdateSquareMemberRelationRequest&);
  UpdateSquareMemberRelationRequest() : squareMid(), targetSquareMemberMid() {
  }

  virtual ~UpdateSquareMemberRelationRequest() noexcept;
  std::string squareMid;
  std::string targetSquareMemberMid;
  std::set<SquareMemberRelationAttribute::type>  updatedAttrs;
  SquareMemberRelation relation;

  _UpdateSquareMemberRelationRequest__isset __isset;

  void __set_squareMid(const std::string& val);

  void __set_targetSquareMemberMid(const std::string& val);

  void __set_updatedAttrs(const std::set<SquareMemberRelationAttribute::type> & val);

  void __set_relation(const SquareMemberRelation& val);

  bool operator == (const UpdateSquareMemberRelationRequest & rhs) const
  {
    if (!(squareMid == rhs.squareMid))
      return false;
    if (!(targetSquareMemberMid == rhs.targetSquareMemberMid))
      return false;
    if (!(updatedAttrs == rhs.updatedAttrs))
      return false;
    if (!(relation == rhs.relation))
      return false;
    return true;
  }
  bool operator != (const UpdateSquareMemberRelationRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateSquareMemberRelationRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UpdateSquareMemberRelationRequest &a, UpdateSquareMemberRelationRequest &b);

std::ostream& operator<<(std::ostream& out, const UpdateSquareMemberRelationRequest& obj);

typedef struct _UpdateSquareMemberRelationResponse__isset {
  _UpdateSquareMemberRelationResponse__isset() : squareMid(false), targetSquareMemberMid(false), updatedAttrs(false), relation(false) {}
  bool squareMid :1;
  bool targetSquareMemberMid :1;
  bool updatedAttrs :1;
  bool relation :1;
} _UpdateSquareMemberRelationResponse__isset;

class UpdateSquareMemberRelationResponse : public virtual ::apache::thrift::TBase {
 public:

  UpdateSquareMemberRelationResponse(const UpdateSquareMemberRelationResponse&);
  UpdateSquareMemberRelationResponse& operator=(const UpdateSquareMemberRelationResponse&);
  UpdateSquareMemberRelationResponse() : squareMid(), targetSquareMemberMid() {
  }

  virtual ~UpdateSquareMemberRelationResponse() noexcept;
  std::string squareMid;
  std::string targetSquareMemberMid;
  std::set<SquareMemberRelationAttribute::type>  updatedAttrs;
  SquareMemberRelation relation;

  _UpdateSquareMemberRelationResponse__isset __isset;

  void __set_squareMid(const std::string& val);

  void __set_targetSquareMemberMid(const std::string& val);

  void __set_updatedAttrs(const std::set<SquareMemberRelationAttribute::type> & val);

  void __set_relation(const SquareMemberRelation& val);

  bool operator == (const UpdateSquareMemberRelationResponse & rhs) const
  {
    if (!(squareMid == rhs.squareMid))
      return false;
    if (!(targetSquareMemberMid == rhs.targetSquareMemberMid))
      return false;
    if (!(updatedAttrs == rhs.updatedAttrs))
      return false;
    if (!(relation == rhs.relation))
      return false;
    return true;
  }
  bool operator != (const UpdateSquareMemberRelationResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateSquareMemberRelationResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UpdateSquareMemberRelationResponse &a, UpdateSquareMemberRelationResponse &b);

std::ostream& operator<<(std::ostream& out, const UpdateSquareMemberRelationResponse& obj);

typedef struct _ReportSquareRequest__isset {
  _ReportSquareRequest__isset() : squareMid(false), reportType(false), otherReason(false) {}
  bool squareMid :1;
  bool reportType :1;
  bool otherReason :1;
} _ReportSquareRequest__isset;

class ReportSquareRequest : public virtual ::apache::thrift::TBase {
 public:

  ReportSquareRequest(const ReportSquareRequest&);
  ReportSquareRequest& operator=(const ReportSquareRequest&);
  ReportSquareRequest() : squareMid(), reportType((ReportType::type)0), otherReason() {
  }

  virtual ~ReportSquareRequest() noexcept;
  std::string squareMid;
  /**
   * 
   * @see ReportType
   */
  ReportType::type reportType;
  std::string otherReason;

  _ReportSquareRequest__isset __isset;

  void __set_squareMid(const std::string& val);

  void __set_reportType(const ReportType::type val);

  void __set_otherReason(const std::string& val);

  bool operator == (const ReportSquareRequest & rhs) const
  {
    if (!(squareMid == rhs.squareMid))
      return false;
    if (!(reportType == rhs.reportType))
      return false;
    if (!(otherReason == rhs.otherReason))
      return false;
    return true;
  }
  bool operator != (const ReportSquareRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReportSquareRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ReportSquareRequest &a, ReportSquareRequest &b);

std::ostream& operator<<(std::ostream& out, const ReportSquareRequest& obj);


class ReportSquareResponse : public virtual ::apache::thrift::TBase {
 public:

  ReportSquareResponse(const ReportSquareResponse&);
  ReportSquareResponse& operator=(const ReportSquareResponse&);
  ReportSquareResponse() {
  }

  virtual ~ReportSquareResponse() noexcept;

  bool operator == (const ReportSquareResponse & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ReportSquareResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReportSquareResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ReportSquareResponse &a, ReportSquareResponse &b);

std::ostream& operator<<(std::ostream& out, const ReportSquareResponse& obj);

typedef struct _ReportSquareChatRequest__isset {
  _ReportSquareChatRequest__isset() : squareMid(false), squareChatMid(false), reportType(false), otherReason(false) {}
  bool squareMid :1;
  bool squareChatMid :1;
  bool reportType :1;
  bool otherReason :1;
} _ReportSquareChatRequest__isset;

class ReportSquareChatRequest : public virtual ::apache::thrift::TBase {
 public:

  ReportSquareChatRequest(const ReportSquareChatRequest&);
  ReportSquareChatRequest& operator=(const ReportSquareChatRequest&);
  ReportSquareChatRequest() : squareMid(), squareChatMid(), reportType((ReportType::type)0), otherReason() {
  }

  virtual ~ReportSquareChatRequest() noexcept;
  std::string squareMid;
  std::string squareChatMid;
  /**
   * 
   * @see ReportType
   */
  ReportType::type reportType;
  std::string otherReason;

  _ReportSquareChatRequest__isset __isset;

  void __set_squareMid(const std::string& val);

  void __set_squareChatMid(const std::string& val);

  void __set_reportType(const ReportType::type val);

  void __set_otherReason(const std::string& val);

  bool operator == (const ReportSquareChatRequest & rhs) const
  {
    if (!(squareMid == rhs.squareMid))
      return false;
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    if (!(reportType == rhs.reportType))
      return false;
    if (!(otherReason == rhs.otherReason))
      return false;
    return true;
  }
  bool operator != (const ReportSquareChatRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReportSquareChatRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ReportSquareChatRequest &a, ReportSquareChatRequest &b);

std::ostream& operator<<(std::ostream& out, const ReportSquareChatRequest& obj);


class ReportSquareChatResponse : public virtual ::apache::thrift::TBase {
 public:

  ReportSquareChatResponse(const ReportSquareChatResponse&);
  ReportSquareChatResponse& operator=(const ReportSquareChatResponse&);
  ReportSquareChatResponse() {
  }

  virtual ~ReportSquareChatResponse() noexcept;

  bool operator == (const ReportSquareChatResponse & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ReportSquareChatResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReportSquareChatResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ReportSquareChatResponse &a, ReportSquareChatResponse &b);

std::ostream& operator<<(std::ostream& out, const ReportSquareChatResponse& obj);

typedef struct _ReportSquareMessageRequest__isset {
  _ReportSquareMessageRequest__isset() : squareMid(false), squareChatMid(false), squareMessageId(false), reportType(false), otherReason(false) {}
  bool squareMid :1;
  bool squareChatMid :1;
  bool squareMessageId :1;
  bool reportType :1;
  bool otherReason :1;
} _ReportSquareMessageRequest__isset;

class ReportSquareMessageRequest : public virtual ::apache::thrift::TBase {
 public:

  ReportSquareMessageRequest(const ReportSquareMessageRequest&);
  ReportSquareMessageRequest& operator=(const ReportSquareMessageRequest&);
  ReportSquareMessageRequest() : squareMid(), squareChatMid(), squareMessageId(), reportType((ReportType::type)0), otherReason() {
  }

  virtual ~ReportSquareMessageRequest() noexcept;
  std::string squareMid;
  std::string squareChatMid;
  std::string squareMessageId;
  /**
   * 
   * @see ReportType
   */
  ReportType::type reportType;
  std::string otherReason;

  _ReportSquareMessageRequest__isset __isset;

  void __set_squareMid(const std::string& val);

  void __set_squareChatMid(const std::string& val);

  void __set_squareMessageId(const std::string& val);

  void __set_reportType(const ReportType::type val);

  void __set_otherReason(const std::string& val);

  bool operator == (const ReportSquareMessageRequest & rhs) const
  {
    if (!(squareMid == rhs.squareMid))
      return false;
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    if (!(squareMessageId == rhs.squareMessageId))
      return false;
    if (!(reportType == rhs.reportType))
      return false;
    if (!(otherReason == rhs.otherReason))
      return false;
    return true;
  }
  bool operator != (const ReportSquareMessageRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReportSquareMessageRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ReportSquareMessageRequest &a, ReportSquareMessageRequest &b);

std::ostream& operator<<(std::ostream& out, const ReportSquareMessageRequest& obj);


class ReportSquareMessageResponse : public virtual ::apache::thrift::TBase {
 public:

  ReportSquareMessageResponse(const ReportSquareMessageResponse&);
  ReportSquareMessageResponse& operator=(const ReportSquareMessageResponse&);
  ReportSquareMessageResponse() {
  }

  virtual ~ReportSquareMessageResponse() noexcept;

  bool operator == (const ReportSquareMessageResponse & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ReportSquareMessageResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReportSquareMessageResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ReportSquareMessageResponse &a, ReportSquareMessageResponse &b);

std::ostream& operator<<(std::ostream& out, const ReportSquareMessageResponse& obj);

typedef struct _ReportSquareMemberRequest__isset {
  _ReportSquareMemberRequest__isset() : squareMemberMid(false), reportType(false), otherReason(false), squareChatMid(false) {}
  bool squareMemberMid :1;
  bool reportType :1;
  bool otherReason :1;
  bool squareChatMid :1;
} _ReportSquareMemberRequest__isset;

class ReportSquareMemberRequest : public virtual ::apache::thrift::TBase {
 public:

  ReportSquareMemberRequest(const ReportSquareMemberRequest&);
  ReportSquareMemberRequest& operator=(const ReportSquareMemberRequest&);
  ReportSquareMemberRequest() : squareMemberMid(), reportType((ReportType::type)0), otherReason(), squareChatMid() {
  }

  virtual ~ReportSquareMemberRequest() noexcept;
  std::string squareMemberMid;
  /**
   * 
   * @see ReportType
   */
  ReportType::type reportType;
  std::string otherReason;
  std::string squareChatMid;

  _ReportSquareMemberRequest__isset __isset;

  void __set_squareMemberMid(const std::string& val);

  void __set_reportType(const ReportType::type val);

  void __set_otherReason(const std::string& val);

  void __set_squareChatMid(const std::string& val);

  bool operator == (const ReportSquareMemberRequest & rhs) const
  {
    if (!(squareMemberMid == rhs.squareMemberMid))
      return false;
    if (!(reportType == rhs.reportType))
      return false;
    if (!(otherReason == rhs.otherReason))
      return false;
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    return true;
  }
  bool operator != (const ReportSquareMemberRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReportSquareMemberRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ReportSquareMemberRequest &a, ReportSquareMemberRequest &b);

std::ostream& operator<<(std::ostream& out, const ReportSquareMemberRequest& obj);


class ReportSquareMemberResponse : public virtual ::apache::thrift::TBase {
 public:

  ReportSquareMemberResponse(const ReportSquareMemberResponse&);
  ReportSquareMemberResponse& operator=(const ReportSquareMemberResponse&);
  ReportSquareMemberResponse() {
  }

  virtual ~ReportSquareMemberResponse() noexcept;

  bool operator == (const ReportSquareMemberResponse & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ReportSquareMemberResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReportSquareMemberResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ReportSquareMemberResponse &a, ReportSquareMemberResponse &b);

std::ostream& operator<<(std::ostream& out, const ReportSquareMemberResponse& obj);

typedef struct _GetSquareRequest__isset {
  _GetSquareRequest__isset() : mid(false) {}
  bool mid :1;
} _GetSquareRequest__isset;

class GetSquareRequest : public virtual ::apache::thrift::TBase {
 public:

  GetSquareRequest(const GetSquareRequest&);
  GetSquareRequest& operator=(const GetSquareRequest&);
  GetSquareRequest() : mid() {
  }

  virtual ~GetSquareRequest() noexcept;
  std::string mid;

  _GetSquareRequest__isset __isset;

  void __set_mid(const std::string& val);

  bool operator == (const GetSquareRequest & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    return true;
  }
  bool operator != (const GetSquareRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetSquareRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetSquareRequest &a, GetSquareRequest &b);

std::ostream& operator<<(std::ostream& out, const GetSquareRequest& obj);

typedef struct _GetSquareResponse__isset {
  _GetSquareResponse__isset() : square(false), myMembership(false), squareAuthority(false), squareStatus(false), squareFeatureSet(false), noteStatus(false) {}
  bool square :1;
  bool myMembership :1;
  bool squareAuthority :1;
  bool squareStatus :1;
  bool squareFeatureSet :1;
  bool noteStatus :1;
} _GetSquareResponse__isset;

class GetSquareResponse : public virtual ::apache::thrift::TBase {
 public:

  GetSquareResponse(const GetSquareResponse&);
  GetSquareResponse& operator=(const GetSquareResponse&);
  GetSquareResponse() {
  }

  virtual ~GetSquareResponse() noexcept;
  Square square;
  SquareMember myMembership;
  SquareAuthority squareAuthority;
  SquareStatus squareStatus;
  SquareFeatureSet squareFeatureSet;
  NoteStatus noteStatus;

  _GetSquareResponse__isset __isset;

  void __set_square(const Square& val);

  void __set_myMembership(const SquareMember& val);

  void __set_squareAuthority(const SquareAuthority& val);

  void __set_squareStatus(const SquareStatus& val);

  void __set_squareFeatureSet(const SquareFeatureSet& val);

  void __set_noteStatus(const NoteStatus& val);

  bool operator == (const GetSquareResponse & rhs) const
  {
    if (!(square == rhs.square))
      return false;
    if (!(myMembership == rhs.myMembership))
      return false;
    if (!(squareAuthority == rhs.squareAuthority))
      return false;
    if (!(squareStatus == rhs.squareStatus))
      return false;
    if (!(squareFeatureSet == rhs.squareFeatureSet))
      return false;
    if (!(noteStatus == rhs.noteStatus))
      return false;
    return true;
  }
  bool operator != (const GetSquareResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetSquareResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetSquareResponse &a, GetSquareResponse &b);

std::ostream& operator<<(std::ostream& out, const GetSquareResponse& obj);

typedef struct _GetSquareStatusRequest__isset {
  _GetSquareStatusRequest__isset() : squareMid(false) {}
  bool squareMid :1;
} _GetSquareStatusRequest__isset;

class GetSquareStatusRequest : public virtual ::apache::thrift::TBase {
 public:

  GetSquareStatusRequest(const GetSquareStatusRequest&);
  GetSquareStatusRequest& operator=(const GetSquareStatusRequest&);
  GetSquareStatusRequest() : squareMid() {
  }

  virtual ~GetSquareStatusRequest() noexcept;
  std::string squareMid;

  _GetSquareStatusRequest__isset __isset;

  void __set_squareMid(const std::string& val);

  bool operator == (const GetSquareStatusRequest & rhs) const
  {
    if (!(squareMid == rhs.squareMid))
      return false;
    return true;
  }
  bool operator != (const GetSquareStatusRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetSquareStatusRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetSquareStatusRequest &a, GetSquareStatusRequest &b);

std::ostream& operator<<(std::ostream& out, const GetSquareStatusRequest& obj);

typedef struct _GetSquareStatusResponse__isset {
  _GetSquareStatusResponse__isset() : squareStatus(false) {}
  bool squareStatus :1;
} _GetSquareStatusResponse__isset;

class GetSquareStatusResponse : public virtual ::apache::thrift::TBase {
 public:

  GetSquareStatusResponse(const GetSquareStatusResponse&);
  GetSquareStatusResponse& operator=(const GetSquareStatusResponse&);
  GetSquareStatusResponse() {
  }

  virtual ~GetSquareStatusResponse() noexcept;
  SquareStatus squareStatus;

  _GetSquareStatusResponse__isset __isset;

  void __set_squareStatus(const SquareStatus& val);

  bool operator == (const GetSquareStatusResponse & rhs) const
  {
    if (!(squareStatus == rhs.squareStatus))
      return false;
    return true;
  }
  bool operator != (const GetSquareStatusResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetSquareStatusResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetSquareStatusResponse &a, GetSquareStatusResponse &b);

std::ostream& operator<<(std::ostream& out, const GetSquareStatusResponse& obj);

typedef struct _GetNoteStatusRequest__isset {
  _GetNoteStatusRequest__isset() : squareMid(false) {}
  bool squareMid :1;
} _GetNoteStatusRequest__isset;

class GetNoteStatusRequest : public virtual ::apache::thrift::TBase {
 public:

  GetNoteStatusRequest(const GetNoteStatusRequest&);
  GetNoteStatusRequest& operator=(const GetNoteStatusRequest&);
  GetNoteStatusRequest() : squareMid() {
  }

  virtual ~GetNoteStatusRequest() noexcept;
  std::string squareMid;

  _GetNoteStatusRequest__isset __isset;

  void __set_squareMid(const std::string& val);

  bool operator == (const GetNoteStatusRequest & rhs) const
  {
    if (!(squareMid == rhs.squareMid))
      return false;
    return true;
  }
  bool operator != (const GetNoteStatusRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetNoteStatusRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetNoteStatusRequest &a, GetNoteStatusRequest &b);

std::ostream& operator<<(std::ostream& out, const GetNoteStatusRequest& obj);

typedef struct _GetNoteStatusResponse__isset {
  _GetNoteStatusResponse__isset() : squareMid(false), status(false) {}
  bool squareMid :1;
  bool status :1;
} _GetNoteStatusResponse__isset;

class GetNoteStatusResponse : public virtual ::apache::thrift::TBase {
 public:

  GetNoteStatusResponse(const GetNoteStatusResponse&);
  GetNoteStatusResponse& operator=(const GetNoteStatusResponse&);
  GetNoteStatusResponse() : squareMid() {
  }

  virtual ~GetNoteStatusResponse() noexcept;
  std::string squareMid;
  NoteStatus status;

  _GetNoteStatusResponse__isset __isset;

  void __set_squareMid(const std::string& val);

  void __set_status(const NoteStatus& val);

  bool operator == (const GetNoteStatusResponse & rhs) const
  {
    if (!(squareMid == rhs.squareMid))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const GetNoteStatusResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetNoteStatusResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetNoteStatusResponse &a, GetNoteStatusResponse &b);

std::ostream& operator<<(std::ostream& out, const GetNoteStatusResponse& obj);

typedef struct _CreateSquareChatAnnouncementRequest__isset {
  _CreateSquareChatAnnouncementRequest__isset() : reqSeq(false), squareChatMid(false), squareChatAnnouncement(false) {}
  bool reqSeq :1;
  bool squareChatMid :1;
  bool squareChatAnnouncement :1;
} _CreateSquareChatAnnouncementRequest__isset;

class CreateSquareChatAnnouncementRequest : public virtual ::apache::thrift::TBase {
 public:

  CreateSquareChatAnnouncementRequest(const CreateSquareChatAnnouncementRequest&);
  CreateSquareChatAnnouncementRequest& operator=(const CreateSquareChatAnnouncementRequest&);
  CreateSquareChatAnnouncementRequest() : reqSeq(0), squareChatMid() {
  }

  virtual ~CreateSquareChatAnnouncementRequest() noexcept;
  int32_t reqSeq;
  std::string squareChatMid;
  SquareChatAnnouncement squareChatAnnouncement;

  _CreateSquareChatAnnouncementRequest__isset __isset;

  void __set_reqSeq(const int32_t val);

  void __set_squareChatMid(const std::string& val);

  void __set_squareChatAnnouncement(const SquareChatAnnouncement& val);

  bool operator == (const CreateSquareChatAnnouncementRequest & rhs) const
  {
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    if (!(squareChatAnnouncement == rhs.squareChatAnnouncement))
      return false;
    return true;
  }
  bool operator != (const CreateSquareChatAnnouncementRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateSquareChatAnnouncementRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CreateSquareChatAnnouncementRequest &a, CreateSquareChatAnnouncementRequest &b);

std::ostream& operator<<(std::ostream& out, const CreateSquareChatAnnouncementRequest& obj);

typedef struct _CreateSquareChatAnnouncementResponse__isset {
  _CreateSquareChatAnnouncementResponse__isset() : announcement(false) {}
  bool announcement :1;
} _CreateSquareChatAnnouncementResponse__isset;

class CreateSquareChatAnnouncementResponse : public virtual ::apache::thrift::TBase {
 public:

  CreateSquareChatAnnouncementResponse(const CreateSquareChatAnnouncementResponse&);
  CreateSquareChatAnnouncementResponse& operator=(const CreateSquareChatAnnouncementResponse&);
  CreateSquareChatAnnouncementResponse() {
  }

  virtual ~CreateSquareChatAnnouncementResponse() noexcept;
  SquareChatAnnouncement announcement;

  _CreateSquareChatAnnouncementResponse__isset __isset;

  void __set_announcement(const SquareChatAnnouncement& val);

  bool operator == (const CreateSquareChatAnnouncementResponse & rhs) const
  {
    if (!(announcement == rhs.announcement))
      return false;
    return true;
  }
  bool operator != (const CreateSquareChatAnnouncementResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateSquareChatAnnouncementResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CreateSquareChatAnnouncementResponse &a, CreateSquareChatAnnouncementResponse &b);

std::ostream& operator<<(std::ostream& out, const CreateSquareChatAnnouncementResponse& obj);

typedef struct _DeleteSquareChatAnnouncementRequest__isset {
  _DeleteSquareChatAnnouncementRequest__isset() : squareChatMid(false), announcementSeq(false) {}
  bool squareChatMid :1;
  bool announcementSeq :1;
} _DeleteSquareChatAnnouncementRequest__isset;

class DeleteSquareChatAnnouncementRequest : public virtual ::apache::thrift::TBase {
 public:

  DeleteSquareChatAnnouncementRequest(const DeleteSquareChatAnnouncementRequest&);
  DeleteSquareChatAnnouncementRequest& operator=(const DeleteSquareChatAnnouncementRequest&);
  DeleteSquareChatAnnouncementRequest() : squareChatMid(), announcementSeq(0) {
  }

  virtual ~DeleteSquareChatAnnouncementRequest() noexcept;
  std::string squareChatMid;
  int64_t announcementSeq;

  _DeleteSquareChatAnnouncementRequest__isset __isset;

  void __set_squareChatMid(const std::string& val);

  void __set_announcementSeq(const int64_t val);

  bool operator == (const DeleteSquareChatAnnouncementRequest & rhs) const
  {
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    if (!(announcementSeq == rhs.announcementSeq))
      return false;
    return true;
  }
  bool operator != (const DeleteSquareChatAnnouncementRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteSquareChatAnnouncementRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeleteSquareChatAnnouncementRequest &a, DeleteSquareChatAnnouncementRequest &b);

std::ostream& operator<<(std::ostream& out, const DeleteSquareChatAnnouncementRequest& obj);


class DeleteSquareChatAnnouncementResponse : public virtual ::apache::thrift::TBase {
 public:

  DeleteSquareChatAnnouncementResponse(const DeleteSquareChatAnnouncementResponse&);
  DeleteSquareChatAnnouncementResponse& operator=(const DeleteSquareChatAnnouncementResponse&);
  DeleteSquareChatAnnouncementResponse() {
  }

  virtual ~DeleteSquareChatAnnouncementResponse() noexcept;

  bool operator == (const DeleteSquareChatAnnouncementResponse & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DeleteSquareChatAnnouncementResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteSquareChatAnnouncementResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeleteSquareChatAnnouncementResponse &a, DeleteSquareChatAnnouncementResponse &b);

std::ostream& operator<<(std::ostream& out, const DeleteSquareChatAnnouncementResponse& obj);

typedef struct _GetSquareChatAnnouncementsRequest__isset {
  _GetSquareChatAnnouncementsRequest__isset() : squareChatMid(false) {}
  bool squareChatMid :1;
} _GetSquareChatAnnouncementsRequest__isset;

class GetSquareChatAnnouncementsRequest : public virtual ::apache::thrift::TBase {
 public:

  GetSquareChatAnnouncementsRequest(const GetSquareChatAnnouncementsRequest&);
  GetSquareChatAnnouncementsRequest& operator=(const GetSquareChatAnnouncementsRequest&);
  GetSquareChatAnnouncementsRequest() : squareChatMid() {
  }

  virtual ~GetSquareChatAnnouncementsRequest() noexcept;
  std::string squareChatMid;

  _GetSquareChatAnnouncementsRequest__isset __isset;

  void __set_squareChatMid(const std::string& val);

  bool operator == (const GetSquareChatAnnouncementsRequest & rhs) const
  {
    if (!(squareChatMid == rhs.squareChatMid))
      return false;
    return true;
  }
  bool operator != (const GetSquareChatAnnouncementsRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetSquareChatAnnouncementsRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetSquareChatAnnouncementsRequest &a, GetSquareChatAnnouncementsRequest &b);

std::ostream& operator<<(std::ostream& out, const GetSquareChatAnnouncementsRequest& obj);

typedef struct _GetSquareChatAnnouncementsResponse__isset {
  _GetSquareChatAnnouncementsResponse__isset() : announcements(false) {}
  bool announcements :1;
} _GetSquareChatAnnouncementsResponse__isset;

class GetSquareChatAnnouncementsResponse : public virtual ::apache::thrift::TBase {
 public:

  GetSquareChatAnnouncementsResponse(const GetSquareChatAnnouncementsResponse&);
  GetSquareChatAnnouncementsResponse& operator=(const GetSquareChatAnnouncementsResponse&);
  GetSquareChatAnnouncementsResponse() {
  }

  virtual ~GetSquareChatAnnouncementsResponse() noexcept;
  std::vector<SquareChatAnnouncement>  announcements;

  _GetSquareChatAnnouncementsResponse__isset __isset;

  void __set_announcements(const std::vector<SquareChatAnnouncement> & val);

  bool operator == (const GetSquareChatAnnouncementsResponse & rhs) const
  {
    if (!(announcements == rhs.announcements))
      return false;
    return true;
  }
  bool operator != (const GetSquareChatAnnouncementsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetSquareChatAnnouncementsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetSquareChatAnnouncementsResponse &a, GetSquareChatAnnouncementsResponse &b);

std::ostream& operator<<(std::ostream& out, const GetSquareChatAnnouncementsResponse& obj);

typedef struct _GetJoinedSquareChatsRequest__isset {
  _GetJoinedSquareChatsRequest__isset() : continuationToken(false), limit(false) {}
  bool continuationToken :1;
  bool limit :1;
} _GetJoinedSquareChatsRequest__isset;

class GetJoinedSquareChatsRequest : public virtual ::apache::thrift::TBase {
 public:

  GetJoinedSquareChatsRequest(const GetJoinedSquareChatsRequest&);
  GetJoinedSquareChatsRequest& operator=(const GetJoinedSquareChatsRequest&);
  GetJoinedSquareChatsRequest() : continuationToken(), limit(0) {
  }

  virtual ~GetJoinedSquareChatsRequest() noexcept;
  std::string continuationToken;
  int32_t limit;

  _GetJoinedSquareChatsRequest__isset __isset;

  void __set_continuationToken(const std::string& val);

  void __set_limit(const int32_t val);

  bool operator == (const GetJoinedSquareChatsRequest & rhs) const
  {
    if (!(continuationToken == rhs.continuationToken))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const GetJoinedSquareChatsRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetJoinedSquareChatsRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetJoinedSquareChatsRequest &a, GetJoinedSquareChatsRequest &b);

std::ostream& operator<<(std::ostream& out, const GetJoinedSquareChatsRequest& obj);

typedef struct _GetJoinedSquareChatsResponse__isset {
  _GetJoinedSquareChatsResponse__isset() : chats(false), chatMembers(false), statuses(false), continuationToken(false) {}
  bool chats :1;
  bool chatMembers :1;
  bool statuses :1;
  bool continuationToken :1;
} _GetJoinedSquareChatsResponse__isset;

class GetJoinedSquareChatsResponse : public virtual ::apache::thrift::TBase {
 public:

  GetJoinedSquareChatsResponse(const GetJoinedSquareChatsResponse&);
  GetJoinedSquareChatsResponse& operator=(const GetJoinedSquareChatsResponse&);
  GetJoinedSquareChatsResponse() : continuationToken() {
  }

  virtual ~GetJoinedSquareChatsResponse() noexcept;
  std::vector<SquareChat>  chats;
  std::map<std::string, SquareChatMember>  chatMembers;
  std::map<std::string, SquareChatStatus>  statuses;
  std::string continuationToken;

  _GetJoinedSquareChatsResponse__isset __isset;

  void __set_chats(const std::vector<SquareChat> & val);

  void __set_chatMembers(const std::map<std::string, SquareChatMember> & val);

  void __set_statuses(const std::map<std::string, SquareChatStatus> & val);

  void __set_continuationToken(const std::string& val);

  bool operator == (const GetJoinedSquareChatsResponse & rhs) const
  {
    if (!(chats == rhs.chats))
      return false;
    if (!(chatMembers == rhs.chatMembers))
      return false;
    if (!(statuses == rhs.statuses))
      return false;
    if (!(continuationToken == rhs.continuationToken))
      return false;
    return true;
  }
  bool operator != (const GetJoinedSquareChatsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetJoinedSquareChatsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetJoinedSquareChatsResponse &a, GetJoinedSquareChatsResponse &b);

std::ostream& operator<<(std::ostream& out, const GetJoinedSquareChatsResponse& obj);

typedef struct _TalkException__isset {
  _TalkException__isset() : code(false), reason(false), parameterMap(false) {}
  bool code :1;
  bool reason :1;
  bool parameterMap :1;
} _TalkException__isset;

class TalkException : public ::apache::thrift::TException {
 public:

  TalkException(const TalkException&);
  TalkException& operator=(const TalkException&);
  TalkException() : code((ErrorCode::type)0), reason() {
  }

  virtual ~TalkException() noexcept;
  /**
   * 
   * @see ErrorCode
   */
  ErrorCode::type code;
  std::string reason;
  std::map<std::string, std::string>  parameterMap;

  _TalkException__isset __isset;

  void __set_code(const ErrorCode::type val);

  void __set_reason(const std::string& val);

  void __set_parameterMap(const std::map<std::string, std::string> & val);

  bool operator == (const TalkException & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(reason == rhs.reason))
      return false;
    if (!(parameterMap == rhs.parameterMap))
      return false;
    return true;
  }
  bool operator != (const TalkException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const noexcept;
};

void swap(TalkException &a, TalkException &b);

std::ostream& operator<<(std::ostream& out, const TalkException& obj);

typedef struct _ShouldSyncException__isset {
  _ShouldSyncException__isset() : syncOpRevision(false), syncScope(false), syncReason(false), message(false) {}
  bool syncOpRevision :1;
  bool syncScope :1;
  bool syncReason :1;
  bool message :1;
} _ShouldSyncException__isset;

class ShouldSyncException : public ::apache::thrift::TException {
 public:

  ShouldSyncException(const ShouldSyncException&);
  ShouldSyncException& operator=(const ShouldSyncException&);
  ShouldSyncException() : syncOpRevision(0), syncReason((SyncTriggerReason::type)0), message() {
  }

  virtual ~ShouldSyncException() noexcept;
  int64_t syncOpRevision;
  SyncScope syncScope;
  /**
   * 
   * @see SyncTriggerReason
   */
  SyncTriggerReason::type syncReason;
  std::string message;

  _ShouldSyncException__isset __isset;

  void __set_syncOpRevision(const int64_t val);

  void __set_syncScope(const SyncScope& val);

  void __set_syncReason(const SyncTriggerReason::type val);

  void __set_message(const std::string& val);

  bool operator == (const ShouldSyncException & rhs) const
  {
    if (!(syncOpRevision == rhs.syncOpRevision))
      return false;
    if (!(syncScope == rhs.syncScope))
      return false;
    if (!(syncReason == rhs.syncReason))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ShouldSyncException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShouldSyncException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const noexcept;
};

void swap(ShouldSyncException &a, ShouldSyncException &b);

std::ostream& operator<<(std::ostream& out, const ShouldSyncException& obj);

typedef struct _PointException__isset {
  _PointException__isset() : code(false), reason(false), extra(false) {}
  bool code :1;
  bool reason :1;
  bool extra :1;
} _PointException__isset;

class PointException : public ::apache::thrift::TException {
 public:

  PointException(const PointException&);
  PointException& operator=(const PointException&);
  PointException() : code((PointErrorCode::type)0), reason() {
  }

  virtual ~PointException() noexcept;
  /**
   * 
   * @see PointErrorCode
   */
  PointErrorCode::type code;
  std::string reason;
  std::map<std::string, std::string>  extra;

  _PointException__isset __isset;

  void __set_code(const PointErrorCode::type val);

  void __set_reason(const std::string& val);

  void __set_extra(const std::map<std::string, std::string> & val);

  bool operator == (const PointException & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(reason == rhs.reason))
      return false;
    if (!(extra == rhs.extra))
      return false;
    return true;
  }
  bool operator != (const PointException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PointException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const noexcept;
};

void swap(PointException &a, PointException &b);

std::ostream& operator<<(std::ostream& out, const PointException& obj);

typedef struct _ChannelException__isset {
  _ChannelException__isset() : code(false), reason(false), parameterMap(false) {}
  bool code :1;
  bool reason :1;
  bool parameterMap :1;
} _ChannelException__isset;

class ChannelException : public ::apache::thrift::TException {
 public:

  ChannelException(const ChannelException&);
  ChannelException& operator=(const ChannelException&);
  ChannelException() : code((ChannelErrorCode::type)0), reason() {
  }

  virtual ~ChannelException() noexcept;
  /**
   * 
   * @see ChannelErrorCode
   */
  ChannelErrorCode::type code;
  std::string reason;
  std::map<std::string, std::string>  parameterMap;

  _ChannelException__isset __isset;

  void __set_code(const ChannelErrorCode::type val);

  void __set_reason(const std::string& val);

  void __set_parameterMap(const std::map<std::string, std::string> & val);

  bool operator == (const ChannelException & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(reason == rhs.reason))
      return false;
    if (!(parameterMap == rhs.parameterMap))
      return false;
    return true;
  }
  bool operator != (const ChannelException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const noexcept;
};

void swap(ChannelException &a, ChannelException &b);

std::ostream& operator<<(std::ostream& out, const ChannelException& obj);

typedef struct _SquareException__isset {
  _SquareException__isset() : errorCode(false), errorExtraInfo(false), reason(false) {}
  bool errorCode :1;
  bool errorExtraInfo :1;
  bool reason :1;
} _SquareException__isset;

class SquareException : public ::apache::thrift::TException {
 public:

  SquareException(const SquareException&);
  SquareException& operator=(const SquareException&);
  SquareException() : errorCode((SQErrorCode::type)0), reason() {
  }

  virtual ~SquareException() noexcept;
  /**
   * 
   * @see SQErrorCode
   */
  SQErrorCode::type errorCode;
  ErrorExtraInfo errorExtraInfo;
  std::string reason;

  _SquareException__isset __isset;

  void __set_errorCode(const SQErrorCode::type val);

  void __set_errorExtraInfo(const ErrorExtraInfo& val);

  void __set_reason(const std::string& val);

  bool operator == (const SquareException & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (!(errorExtraInfo == rhs.errorExtraInfo))
      return false;
    if (!(reason == rhs.reason))
      return false;
    return true;
  }
  bool operator != (const SquareException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SquareException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const noexcept;
};

void swap(SquareException &a, SquareException &b);

std::ostream& operator<<(std::ostream& out, const SquareException& obj);

typedef struct _UniversalNotificationServiceException__isset {
  _UniversalNotificationServiceException__isset() : code(false), reason(false), parameterMap(false) {}
  bool code :1;
  bool reason :1;
  bool parameterMap :1;
} _UniversalNotificationServiceException__isset;

class UniversalNotificationServiceException : public ::apache::thrift::TException {
 public:

  UniversalNotificationServiceException(const UniversalNotificationServiceException&);
  UniversalNotificationServiceException& operator=(const UniversalNotificationServiceException&);
  UniversalNotificationServiceException() : code((UniversalNotificationServiceErrorCode::type)0), reason() {
  }

  virtual ~UniversalNotificationServiceException() noexcept;
  /**
   * 
   * @see UniversalNotificationServiceErrorCode
   */
  UniversalNotificationServiceErrorCode::type code;
  std::string reason;
  std::map<std::string, std::string>  parameterMap;

  _UniversalNotificationServiceException__isset __isset;

  void __set_code(const UniversalNotificationServiceErrorCode::type val);

  void __set_reason(const std::string& val);

  void __set_parameterMap(const std::map<std::string, std::string> & val);

  bool operator == (const UniversalNotificationServiceException & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(reason == rhs.reason))
      return false;
    if (!(parameterMap == rhs.parameterMap))
      return false;
    return true;
  }
  bool operator != (const UniversalNotificationServiceException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UniversalNotificationServiceException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const noexcept;
};

void swap(UniversalNotificationServiceException &a, UniversalNotificationServiceException &b);

std::ostream& operator<<(std::ostream& out, const UniversalNotificationServiceException& obj);

typedef struct _UpdateBuddyProfileResult__isset {
  _UpdateBuddyProfileResult__isset() : requestId(false), state(false), eventNo(false), receiverCount(false), successCount(false), failCount(false), cancelCount(false), unregisterCount(false), timestamp(false), message(false) {}
  bool requestId :1;
  bool state :1;
  bool eventNo :1;
  bool receiverCount :1;
  bool successCount :1;
  bool failCount :1;
  bool cancelCount :1;
  bool unregisterCount :1;
  bool timestamp :1;
  bool message :1;
} _UpdateBuddyProfileResult__isset;

class UpdateBuddyProfileResult : public virtual ::apache::thrift::TBase {
 public:

  UpdateBuddyProfileResult(const UpdateBuddyProfileResult&);
  UpdateBuddyProfileResult& operator=(const UpdateBuddyProfileResult&);
  UpdateBuddyProfileResult() : requestId(), state((BuddyResultState::type)0), eventNo(0), receiverCount(0), successCount(0), failCount(0), cancelCount(0), unregisterCount(0), timestamp(0), message() {
  }

  virtual ~UpdateBuddyProfileResult() noexcept;
  std::string requestId;
  /**
   * 
   * @see BuddyResultState
   */
  BuddyResultState::type state;
  int32_t eventNo;
  int64_t receiverCount;
  int64_t successCount;
  int64_t failCount;
  int64_t cancelCount;
  int64_t unregisterCount;
  int64_t timestamp;
  std::string message;

  _UpdateBuddyProfileResult__isset __isset;

  void __set_requestId(const std::string& val);

  void __set_state(const BuddyResultState::type val);

  void __set_eventNo(const int32_t val);

  void __set_receiverCount(const int64_t val);

  void __set_successCount(const int64_t val);

  void __set_failCount(const int64_t val);

  void __set_cancelCount(const int64_t val);

  void __set_unregisterCount(const int64_t val);

  void __set_timestamp(const int64_t val);

  void __set_message(const std::string& val);

  bool operator == (const UpdateBuddyProfileResult & rhs) const
  {
    if (!(requestId == rhs.requestId))
      return false;
    if (!(state == rhs.state))
      return false;
    if (!(eventNo == rhs.eventNo))
      return false;
    if (!(receiverCount == rhs.receiverCount))
      return false;
    if (!(successCount == rhs.successCount))
      return false;
    if (!(failCount == rhs.failCount))
      return false;
    if (!(cancelCount == rhs.cancelCount))
      return false;
    if (!(unregisterCount == rhs.unregisterCount))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const UpdateBuddyProfileResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateBuddyProfileResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UpdateBuddyProfileResult &a, UpdateBuddyProfileResult &b);

std::ostream& operator<<(std::ostream& out, const UpdateBuddyProfileResult& obj);

typedef struct _UserAuthStatus__isset {
  _UserAuthStatus__isset() : phoneNumberRegistered(false), registeredSnsIdTypes(false) {}
  bool phoneNumberRegistered :1;
  bool registeredSnsIdTypes :1;
} _UserAuthStatus__isset;

class UserAuthStatus : public virtual ::apache::thrift::TBase {
 public:

  UserAuthStatus(const UserAuthStatus&);
  UserAuthStatus& operator=(const UserAuthStatus&);
  UserAuthStatus() : phoneNumberRegistered(0) {
  }

  virtual ~UserAuthStatus() noexcept;
  bool phoneNumberRegistered;
  std::vector<SnsIdType::type>  registeredSnsIdTypes;

  _UserAuthStatus__isset __isset;

  void __set_phoneNumberRegistered(const bool val);

  void __set_registeredSnsIdTypes(const std::vector<SnsIdType::type> & val);

  bool operator == (const UserAuthStatus & rhs) const
  {
    if (!(phoneNumberRegistered == rhs.phoneNumberRegistered))
      return false;
    if (!(registeredSnsIdTypes == rhs.registeredSnsIdTypes))
      return false;
    return true;
  }
  bool operator != (const UserAuthStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserAuthStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UserAuthStatus &a, UserAuthStatus &b);

std::ostream& operator<<(std::ostream& out, const UserAuthStatus& obj);

typedef struct _WapInvitation__isset {
  _WapInvitation__isset() : type(false), inviteeEmail(false), inviterMid(false), roomMid(false) {}
  bool type :1;
  bool inviteeEmail :1;
  bool inviterMid :1;
  bool roomMid :1;
} _WapInvitation__isset;

class WapInvitation : public virtual ::apache::thrift::TBase {
 public:

  WapInvitation(const WapInvitation&);
  WapInvitation& operator=(const WapInvitation&);
  WapInvitation() : type((WapInvitationType::type)0), inviteeEmail(), inviterMid(), roomMid() {
  }

  virtual ~WapInvitation() noexcept;
  /**
   * 
   * @see WapInvitationType
   */
  WapInvitationType::type type;
  std::string inviteeEmail;
  std::string inviterMid;
  std::string roomMid;

  _WapInvitation__isset __isset;

  void __set_type(const WapInvitationType::type val);

  void __set_inviteeEmail(const std::string& val);

  void __set_inviterMid(const std::string& val);

  void __set_roomMid(const std::string& val);

  bool operator == (const WapInvitation & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(inviteeEmail == rhs.inviteeEmail))
      return false;
    if (!(inviterMid == rhs.inviterMid))
      return false;
    if (!(roomMid == rhs.roomMid))
      return false;
    return true;
  }
  bool operator != (const WapInvitation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WapInvitation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WapInvitation &a, WapInvitation &b);

std::ostream& operator<<(std::ostream& out, const WapInvitation& obj);

typedef struct _GroupCall__isset {
  _GroupCall__isset() : online(false), chatMid(false), hostMids(false), memberMids(false), started(false), mediaType(false) {}
  bool online :1;
  bool chatMid :1;
  bool hostMids :1;
  bool memberMids :1;
  bool started :1;
  bool mediaType :1;
} _GroupCall__isset;

class GroupCall : public virtual ::apache::thrift::TBase {
 public:

  GroupCall(const GroupCall&);
  GroupCall& operator=(const GroupCall&);
  GroupCall() : online(0), chatMid(), hostMids(), started(0), mediaType((GroupCallMediaType::type)0) {
  }

  virtual ~GroupCall() noexcept;
  bool online;
  std::string chatMid;
  std::string hostMids;
  std::vector<std::string>  memberMids;
  int64_t started;
  /**
   * 
   * @see GroupCallMediaType
   */
  GroupCallMediaType::type mediaType;

  _GroupCall__isset __isset;

  void __set_online(const bool val);

  void __set_chatMid(const std::string& val);

  void __set_hostMids(const std::string& val);

  void __set_memberMids(const std::vector<std::string> & val);

  void __set_started(const int64_t val);

  void __set_mediaType(const GroupCallMediaType::type val);

  bool operator == (const GroupCall & rhs) const
  {
    if (!(online == rhs.online))
      return false;
    if (!(chatMid == rhs.chatMid))
      return false;
    if (!(hostMids == rhs.hostMids))
      return false;
    if (!(memberMids == rhs.memberMids))
      return false;
    if (!(started == rhs.started))
      return false;
    if (!(mediaType == rhs.mediaType))
      return false;
    return true;
  }
  bool operator != (const GroupCall &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GroupCall & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GroupCall &a, GroupCall &b);

std::ostream& operator<<(std::ostream& out, const GroupCall& obj);

typedef struct _GroupCallRoute__isset {
  _GroupCallRoute__isset() : token(false), cscf(false), mix(false) {}
  bool token :1;
  bool cscf :1;
  bool mix :1;
} _GroupCallRoute__isset;

class GroupCallRoute : public virtual ::apache::thrift::TBase {
 public:

  GroupCallRoute(const GroupCallRoute&);
  GroupCallRoute& operator=(const GroupCallRoute&);
  GroupCallRoute() : token() {
  }

  virtual ~GroupCallRoute() noexcept;
  std::string token;
  CallHost cscf;
  CallHost mix;

  _GroupCallRoute__isset __isset;

  void __set_token(const std::string& val);

  void __set_cscf(const CallHost& val);

  void __set_mix(const CallHost& val);

  bool operator == (const GroupCallRoute & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(cscf == rhs.cscf))
      return false;
    if (!(mix == rhs.mix))
      return false;
    return true;
  }
  bool operator != (const GroupCallRoute &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GroupCallRoute & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GroupCallRoute &a, GroupCallRoute &b);

std::ostream& operator<<(std::ostream& out, const GroupCallRoute& obj);



#endif
