// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "BotService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class BotServiceHandler : virtual public BotServiceIf {
 public:
  BotServiceHandler() {
    // Your initialization goes here
  }

  void notifyLeaveGroup(const std::string& groupMid) {
    // Your implementation goes here
    printf("notifyLeaveGroup\n");
  }

  void notifyLeaveRoom(const std::string& roomMid) {
    // Your implementation goes here
    printf("notifyLeaveRoom\n");
  }

  void getBotUseInfo(BotUseInfo& _return, const std::string& botMid) {
    // Your implementation goes here
    printf("getBotUseInfo\n");
  }

  void sendChatCheckedByWatermark(const int32_t seq, const std::string& mid, const int64_t watermark, const int32_t sessionId) {
    // Your implementation goes here
    printf("sendChatCheckedByWatermark\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::apache::thrift::stdcxx::shared_ptr<BotServiceHandler> handler(new BotServiceHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new BotServiceProcessor(handler));
  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

