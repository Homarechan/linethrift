/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef UniversalNotificationService_H
#define UniversalNotificationService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "line_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class UniversalNotificationServiceIf {
 public:
  virtual ~UniversalNotificationServiceIf() {}
  virtual void notify(const GlobalEvent& event) = 0;
};

class UniversalNotificationServiceIfFactory {
 public:
  typedef UniversalNotificationServiceIf Handler;

  virtual ~UniversalNotificationServiceIfFactory() {}

  virtual UniversalNotificationServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(UniversalNotificationServiceIf* /* handler */) = 0;
};

class UniversalNotificationServiceIfSingletonFactory : virtual public UniversalNotificationServiceIfFactory {
 public:
  UniversalNotificationServiceIfSingletonFactory(const ::std::shared_ptr<UniversalNotificationServiceIf>& iface) : iface_(iface) {}
  virtual ~UniversalNotificationServiceIfSingletonFactory() {}

  virtual UniversalNotificationServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(UniversalNotificationServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<UniversalNotificationServiceIf> iface_;
};

class UniversalNotificationServiceNull : virtual public UniversalNotificationServiceIf {
 public:
  virtual ~UniversalNotificationServiceNull() {}
  void notify(const GlobalEvent& /* event */) {
    return;
  }
};

typedef struct _UniversalNotificationService_notify_args__isset {
  _UniversalNotificationService_notify_args__isset() : event(false) {}
  bool event :1;
} _UniversalNotificationService_notify_args__isset;

class UniversalNotificationService_notify_args {
 public:

  UniversalNotificationService_notify_args(const UniversalNotificationService_notify_args&);
  UniversalNotificationService_notify_args& operator=(const UniversalNotificationService_notify_args&);
  UniversalNotificationService_notify_args() {
  }

  virtual ~UniversalNotificationService_notify_args() noexcept;
  GlobalEvent event;

  _UniversalNotificationService_notify_args__isset __isset;

  void __set_event(const GlobalEvent& val);

  bool operator == (const UniversalNotificationService_notify_args & rhs) const
  {
    if (!(event == rhs.event))
      return false;
    return true;
  }
  bool operator != (const UniversalNotificationService_notify_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UniversalNotificationService_notify_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UniversalNotificationService_notify_pargs {
 public:


  virtual ~UniversalNotificationService_notify_pargs() noexcept;
  const GlobalEvent* event;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UniversalNotificationService_notify_result__isset {
  _UniversalNotificationService_notify_result__isset() : e(false) {}
  bool e :1;
} _UniversalNotificationService_notify_result__isset;

class UniversalNotificationService_notify_result {
 public:

  UniversalNotificationService_notify_result(const UniversalNotificationService_notify_result&);
  UniversalNotificationService_notify_result& operator=(const UniversalNotificationService_notify_result&);
  UniversalNotificationService_notify_result() {
  }

  virtual ~UniversalNotificationService_notify_result() noexcept;
  UniversalNotificationServiceException e;

  _UniversalNotificationService_notify_result__isset __isset;

  void __set_e(const UniversalNotificationServiceException& val);

  bool operator == (const UniversalNotificationService_notify_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const UniversalNotificationService_notify_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UniversalNotificationService_notify_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UniversalNotificationService_notify_presult__isset {
  _UniversalNotificationService_notify_presult__isset() : e(false) {}
  bool e :1;
} _UniversalNotificationService_notify_presult__isset;

class UniversalNotificationService_notify_presult {
 public:


  virtual ~UniversalNotificationService_notify_presult() noexcept;
  UniversalNotificationServiceException e;

  _UniversalNotificationService_notify_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class UniversalNotificationServiceClient : virtual public UniversalNotificationServiceIf {
 public:
  UniversalNotificationServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  UniversalNotificationServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void notify(const GlobalEvent& event);
  void send_notify(const GlobalEvent& event);
  void recv_notify();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class UniversalNotificationServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<UniversalNotificationServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (UniversalNotificationServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_notify(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  UniversalNotificationServiceProcessor(::std::shared_ptr<UniversalNotificationServiceIf> iface) :
    iface_(iface) {
    processMap_["notify"] = &UniversalNotificationServiceProcessor::process_notify;
  }

  virtual ~UniversalNotificationServiceProcessor() {}
};

class UniversalNotificationServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  UniversalNotificationServiceProcessorFactory(const ::std::shared_ptr< UniversalNotificationServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< UniversalNotificationServiceIfFactory > handlerFactory_;
};

class UniversalNotificationServiceMultiface : virtual public UniversalNotificationServiceIf {
 public:
  UniversalNotificationServiceMultiface(std::vector<std::shared_ptr<UniversalNotificationServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~UniversalNotificationServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<UniversalNotificationServiceIf> > ifaces_;
  UniversalNotificationServiceMultiface() {}
  void add(::std::shared_ptr<UniversalNotificationServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void notify(const GlobalEvent& event) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->notify(event);
    }
    ifaces_[i]->notify(event);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class UniversalNotificationServiceConcurrentClient : virtual public UniversalNotificationServiceIf {
 public:
  UniversalNotificationServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  UniversalNotificationServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void notify(const GlobalEvent& event);
  int32_t send_notify(const GlobalEvent& event);
  void recv_notify(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
