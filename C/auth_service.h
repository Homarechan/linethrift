/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AUTH_SERVICE_H
#define AUTH_SERVICE_H

#include <thrift/c_glib/processor/thrift_dispatch_processor.h>

#include "line_types.h"

/* AuthService service interface */
typedef struct _AuthServiceIf AuthServiceIf;  /* dummy object */

struct _AuthServiceIfInterface
{
  GTypeInterface parent;

  gboolean (*normalize_phone_number) (AuthServiceIf *iface, gchar ** _return, const gchar * countryCode, const gchar * phoneNumber, const gchar * countryCodeHint, TalkException ** e, GError **error);
  gboolean (*respond_e2_e_e_login_request) (AuthServiceIf *iface, const gchar * verifier, const E2EEPublicKey * publicKey, const GByteArray * encryptedKeyChain, const GByteArray * hashKeyChain, const ErrorCode errorCode, TalkException ** e, GError **error);
  gboolean (*confirm_e2_e_e_login) (AuthServiceIf *iface, gchar ** _return, const gchar * verifier, const GByteArray * deviceSecret, TalkException ** e, GError **error);
  gboolean (*logout_z) (AuthServiceIf *iface, TalkException ** e, GError **error);
  gboolean (*login_z) (AuthServiceIf *iface, LoginResult ** _return, const LoginRequest * loginRequest, TalkException ** e, GError **error);
  gboolean (*issue_token_for_account_migration_settings) (AuthServiceIf *iface, SecurityCenterResult ** _return, const gboolean enforce, TalkException ** e, GError **error);
  gboolean (*issue_token_for_account_migration) (AuthServiceIf *iface, SecurityCenterResult ** _return, const gchar * migrationSessionId, TalkException ** e, GError **error);
  gboolean (*verify_qrcode_with_e2_e_e) (AuthServiceIf *iface, gchar ** _return, const gchar * verifier, const gchar * pinCode, const ErrorCode errorCode, const E2EEPublicKey * publicKey, const GByteArray * encryptedKeyChain, const GByteArray * hashKeyChain, TalkException ** e, GError **error);
};
typedef struct _AuthServiceIfInterface AuthServiceIfInterface;

GType auth_service_if_get_type (void);
#define TYPE_AUTH_SERVICE_IF (auth_service_if_get_type())
#define AUTH_SERVICE_IF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_AUTH_SERVICE_IF, AuthServiceIf))
#define IS_AUTH_SERVICE_IF(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_AUTH_SERVICE_IF))
#define AUTH_SERVICE_IF_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), TYPE_AUTH_SERVICE_IF, AuthServiceIfInterface))

gboolean auth_service_if_normalize_phone_number (AuthServiceIf *iface, gchar ** _return, const gchar * countryCode, const gchar * phoneNumber, const gchar * countryCodeHint, TalkException ** e, GError **error);
gboolean auth_service_if_respond_e2_e_e_login_request (AuthServiceIf *iface, const gchar * verifier, const E2EEPublicKey * publicKey, const GByteArray * encryptedKeyChain, const GByteArray * hashKeyChain, const ErrorCode errorCode, TalkException ** e, GError **error);
gboolean auth_service_if_confirm_e2_e_e_login (AuthServiceIf *iface, gchar ** _return, const gchar * verifier, const GByteArray * deviceSecret, TalkException ** e, GError **error);
gboolean auth_service_if_logout_z (AuthServiceIf *iface, TalkException ** e, GError **error);
gboolean auth_service_if_login_z (AuthServiceIf *iface, LoginResult ** _return, const LoginRequest * loginRequest, TalkException ** e, GError **error);
gboolean auth_service_if_issue_token_for_account_migration_settings (AuthServiceIf *iface, SecurityCenterResult ** _return, const gboolean enforce, TalkException ** e, GError **error);
gboolean auth_service_if_issue_token_for_account_migration (AuthServiceIf *iface, SecurityCenterResult ** _return, const gchar * migrationSessionId, TalkException ** e, GError **error);
gboolean auth_service_if_verify_qrcode_with_e2_e_e (AuthServiceIf *iface, gchar ** _return, const gchar * verifier, const gchar * pinCode, const ErrorCode errorCode, const E2EEPublicKey * publicKey, const GByteArray * encryptedKeyChain, const GByteArray * hashKeyChain, TalkException ** e, GError **error);

/* AuthService service client */
struct _AuthServiceClient
{
  GObject parent;

  ThriftProtocol *input_protocol;
  ThriftProtocol *output_protocol;
};
typedef struct _AuthServiceClient AuthServiceClient;

struct _AuthServiceClientClass
{
  GObjectClass parent;
};
typedef struct _AuthServiceClientClass AuthServiceClientClass;

GType auth_service_client_get_type (void);
#define TYPE_AUTH_SERVICE_CLIENT (auth_service_client_get_type())
#define AUTH_SERVICE_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_AUTH_SERVICE_CLIENT, AuthServiceClient))
#define AUTH_SERVICE_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_AUTH_SERVICE_CLIENT, AuthServiceClientClass))
#define AUTH_SERVICE_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_AUTH_SERVICE_CLIENT))
#define AUTH_SERVICE_IS_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_AUTH_SERVICE_CLIENT))
#define AUTH_SERVICE_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_AUTH_SERVICE_CLIENT, AuthServiceClientClass))

gboolean auth_service_client_normalize_phone_number (AuthServiceIf * iface, gchar ** _return, const gchar * countryCode, const gchar * phoneNumber, const gchar * countryCodeHint, TalkException ** e, GError ** error);
gboolean auth_service_client_send_normalize_phone_number (AuthServiceIf * iface, const gchar * countryCode, const gchar * phoneNumber, const gchar * countryCodeHint, GError ** error);
gboolean auth_service_client_recv_normalize_phone_number (AuthServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean auth_service_client_respond_e2_e_e_login_request (AuthServiceIf * iface, const gchar * verifier, const E2EEPublicKey * publicKey, const GByteArray * encryptedKeyChain, const GByteArray * hashKeyChain, const ErrorCode errorCode, TalkException ** e, GError ** error);
gboolean auth_service_client_send_respond_e2_e_e_login_request (AuthServiceIf * iface, const gchar * verifier, const E2EEPublicKey * publicKey, const GByteArray * encryptedKeyChain, const GByteArray * hashKeyChain, const ErrorCode errorCode, GError ** error);
gboolean auth_service_client_recv_respond_e2_e_e_login_request (AuthServiceIf * iface, TalkException ** e, GError ** error);
gboolean auth_service_client_confirm_e2_e_e_login (AuthServiceIf * iface, gchar ** _return, const gchar * verifier, const GByteArray * deviceSecret, TalkException ** e, GError ** error);
gboolean auth_service_client_send_confirm_e2_e_e_login (AuthServiceIf * iface, const gchar * verifier, const GByteArray * deviceSecret, GError ** error);
gboolean auth_service_client_recv_confirm_e2_e_e_login (AuthServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean auth_service_client_logout_z (AuthServiceIf * iface, TalkException ** e, GError ** error);
gboolean auth_service_client_send_logout_z (AuthServiceIf * iface, GError ** error);
gboolean auth_service_client_recv_logout_z (AuthServiceIf * iface, TalkException ** e, GError ** error);
gboolean auth_service_client_login_z (AuthServiceIf * iface, LoginResult ** _return, const LoginRequest * loginRequest, TalkException ** e, GError ** error);
gboolean auth_service_client_send_login_z (AuthServiceIf * iface, const LoginRequest * loginRequest, GError ** error);
gboolean auth_service_client_recv_login_z (AuthServiceIf * iface, LoginResult ** _return, TalkException ** e, GError ** error);
gboolean auth_service_client_issue_token_for_account_migration_settings (AuthServiceIf * iface, SecurityCenterResult ** _return, const gboolean enforce, TalkException ** e, GError ** error);
gboolean auth_service_client_send_issue_token_for_account_migration_settings (AuthServiceIf * iface, const gboolean enforce, GError ** error);
gboolean auth_service_client_recv_issue_token_for_account_migration_settings (AuthServiceIf * iface, SecurityCenterResult ** _return, TalkException ** e, GError ** error);
gboolean auth_service_client_issue_token_for_account_migration (AuthServiceIf * iface, SecurityCenterResult ** _return, const gchar * migrationSessionId, TalkException ** e, GError ** error);
gboolean auth_service_client_send_issue_token_for_account_migration (AuthServiceIf * iface, const gchar * migrationSessionId, GError ** error);
gboolean auth_service_client_recv_issue_token_for_account_migration (AuthServiceIf * iface, SecurityCenterResult ** _return, TalkException ** e, GError ** error);
gboolean auth_service_client_verify_qrcode_with_e2_e_e (AuthServiceIf * iface, gchar ** _return, const gchar * verifier, const gchar * pinCode, const ErrorCode errorCode, const E2EEPublicKey * publicKey, const GByteArray * encryptedKeyChain, const GByteArray * hashKeyChain, TalkException ** e, GError ** error);
gboolean auth_service_client_send_verify_qrcode_with_e2_e_e (AuthServiceIf * iface, const gchar * verifier, const gchar * pinCode, const ErrorCode errorCode, const E2EEPublicKey * publicKey, const GByteArray * encryptedKeyChain, const GByteArray * hashKeyChain, GError ** error);
gboolean auth_service_client_recv_verify_qrcode_with_e2_e_e (AuthServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
void auth_service_client_set_property (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);
void auth_service_client_get_property (GObject *object, guint property_id, GValue *value, GParamSpec *pspec);

/* AuthService handler (abstract base class) */
struct _AuthServiceHandler
{
  GObject parent;
};
typedef struct _AuthServiceHandler AuthServiceHandler;

struct _AuthServiceHandlerClass
{
  GObjectClass parent;

  gboolean (*normalize_phone_number) (AuthServiceIf *iface, gchar ** _return, const gchar * countryCode, const gchar * phoneNumber, const gchar * countryCodeHint, TalkException ** e, GError **error);
  gboolean (*respond_e2_e_e_login_request) (AuthServiceIf *iface, const gchar * verifier, const E2EEPublicKey * publicKey, const GByteArray * encryptedKeyChain, const GByteArray * hashKeyChain, const ErrorCode errorCode, TalkException ** e, GError **error);
  gboolean (*confirm_e2_e_e_login) (AuthServiceIf *iface, gchar ** _return, const gchar * verifier, const GByteArray * deviceSecret, TalkException ** e, GError **error);
  gboolean (*logout_z) (AuthServiceIf *iface, TalkException ** e, GError **error);
  gboolean (*login_z) (AuthServiceIf *iface, LoginResult ** _return, const LoginRequest * loginRequest, TalkException ** e, GError **error);
  gboolean (*issue_token_for_account_migration_settings) (AuthServiceIf *iface, SecurityCenterResult ** _return, const gboolean enforce, TalkException ** e, GError **error);
  gboolean (*issue_token_for_account_migration) (AuthServiceIf *iface, SecurityCenterResult ** _return, const gchar * migrationSessionId, TalkException ** e, GError **error);
  gboolean (*verify_qrcode_with_e2_e_e) (AuthServiceIf *iface, gchar ** _return, const gchar * verifier, const gchar * pinCode, const ErrorCode errorCode, const E2EEPublicKey * publicKey, const GByteArray * encryptedKeyChain, const GByteArray * hashKeyChain, TalkException ** e, GError **error);
};
typedef struct _AuthServiceHandlerClass AuthServiceHandlerClass;

GType auth_service_handler_get_type (void);
#define TYPE_AUTH_SERVICE_HANDLER (auth_service_handler_get_type())
#define AUTH_SERVICE_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_AUTH_SERVICE_HANDLER, AuthServiceHandler))
#define IS_AUTH_SERVICE_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_AUTH_SERVICE_HANDLER))
#define AUTH_SERVICE_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_AUTH_SERVICE_HANDLER, AuthServiceHandlerClass))
#define IS_AUTH_SERVICE_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_AUTH_SERVICE_HANDLER))
#define AUTH_SERVICE_HANDLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_AUTH_SERVICE_HANDLER, AuthServiceHandlerClass))

gboolean auth_service_handler_normalize_phone_number (AuthServiceIf *iface, gchar ** _return, const gchar * countryCode, const gchar * phoneNumber, const gchar * countryCodeHint, TalkException ** e, GError **error);
gboolean auth_service_handler_respond_e2_e_e_login_request (AuthServiceIf *iface, const gchar * verifier, const E2EEPublicKey * publicKey, const GByteArray * encryptedKeyChain, const GByteArray * hashKeyChain, const ErrorCode errorCode, TalkException ** e, GError **error);
gboolean auth_service_handler_confirm_e2_e_e_login (AuthServiceIf *iface, gchar ** _return, const gchar * verifier, const GByteArray * deviceSecret, TalkException ** e, GError **error);
gboolean auth_service_handler_logout_z (AuthServiceIf *iface, TalkException ** e, GError **error);
gboolean auth_service_handler_login_z (AuthServiceIf *iface, LoginResult ** _return, const LoginRequest * loginRequest, TalkException ** e, GError **error);
gboolean auth_service_handler_issue_token_for_account_migration_settings (AuthServiceIf *iface, SecurityCenterResult ** _return, const gboolean enforce, TalkException ** e, GError **error);
gboolean auth_service_handler_issue_token_for_account_migration (AuthServiceIf *iface, SecurityCenterResult ** _return, const gchar * migrationSessionId, TalkException ** e, GError **error);
gboolean auth_service_handler_verify_qrcode_with_e2_e_e (AuthServiceIf *iface, gchar ** _return, const gchar * verifier, const gchar * pinCode, const ErrorCode errorCode, const E2EEPublicKey * publicKey, const GByteArray * encryptedKeyChain, const GByteArray * hashKeyChain, TalkException ** e, GError **error);

/* AuthService processor */
struct _AuthServiceProcessor
{
  ThriftDispatchProcessor parent;

  /* protected */
  AuthServiceHandler *handler;
  GHashTable *process_map;
};
typedef struct _AuthServiceProcessor AuthServiceProcessor;

struct _AuthServiceProcessorClass
{
  ThriftDispatchProcessorClass parent;

  /* protected */
  gboolean (*dispatch_call) (ThriftDispatchProcessor *processor,
                             ThriftProtocol *in,
                             ThriftProtocol *out,
                             gchar *fname,
                             gint32 seqid,
                             GError **error);
};
typedef struct _AuthServiceProcessorClass AuthServiceProcessorClass;

GType auth_service_processor_get_type (void);
#define TYPE_AUTH_SERVICE_PROCESSOR (auth_service_processor_get_type())
#define AUTH_SERVICE_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_AUTH_SERVICE_PROCESSOR, AuthServiceProcessor))
#define IS_AUTH_SERVICE_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_AUTH_SERVICE_PROCESSOR))
#define AUTH_SERVICE_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_AUTH_SERVICE_PROCESSOR, AuthServiceProcessorClass))
#define IS_AUTH_SERVICE_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_AUTH_SERVICE_PROCESSOR))
#define AUTH_SERVICE_PROCESSOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_AUTH_SERVICE_PROCESSOR, AuthServiceProcessorClass))

#endif /* AUTH_SERVICE_H */
