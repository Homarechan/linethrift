/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CHANNEL_APPLICATION_PROVIDED_SERVICE_H
#define CHANNEL_APPLICATION_PROVIDED_SERVICE_H

#include <thrift/c_glib/processor/thrift_dispatch_processor.h>

#include "line_types.h"

/* ChannelApplicationProvidedService service interface */
typedef struct _ChannelApplicationProvidedServiceIf ChannelApplicationProvidedServiceIf;  /* dummy object */

struct _ChannelApplicationProvidedServiceIfInterface
{
  GTypeInterface parent;

  gboolean (*active_buddy_subscriber_count) (ChannelApplicationProvidedServiceIf *iface, gint64* _return, TalkException ** e, GError **error);
  gboolean (*add_operation_for_channel) (ChannelApplicationProvidedServiceIf *iface, const OpType opType, const gchar * param1, const gchar * param2, const gchar * param3, TalkException ** e, GError **error);
  gboolean (*display_buddy_subscriber_count) (ChannelApplicationProvidedServiceIf *iface, gint64* _return, TalkException ** e, GError **error);
  gboolean (*find_contact_by_userid_without_abuse_block_for_channel) (ChannelApplicationProvidedServiceIf *iface, Contact ** _return, const gchar * userid, TalkException ** e, GError **error);
  gboolean (*get_all_contact_ids_for_channel) (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_compact_contacts) (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, const gint64 lastModifiedTimestamp, TalkException ** e, GError **error);
  gboolean (*get_contacts_for_channel) (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, const GPtrArray * ids, TalkException ** e, GError **error);
  gboolean (*get_display_name) (ChannelApplicationProvidedServiceIf *iface, gchar ** _return, const gchar * mid, TalkException ** e, GError **error);
  gboolean (*get_favorite_mids_for_channel) (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_friend_mids) (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_group_member_mids) (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, const gchar * groupId, TalkException ** e, GError **error);
  gboolean (*get_groups_for_channel) (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, const GPtrArray * groupIds, TalkException ** e, GError **error);
  gboolean (*get_identity_credential) (ChannelApplicationProvidedServiceIf *iface, IdentityCredential ** _return, TalkException ** e, GError **error);
  gboolean (*get_joined_group_ids_for_channel) (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_meta_profile) (ChannelApplicationProvidedServiceIf *iface, MetaProfile ** _return, TalkException ** e, GError **error);
  gboolean (*get_mid) (ChannelApplicationProvidedServiceIf *iface, gchar ** _return, TalkException ** e, GError **error);
  gboolean (*get_primary_client_for_channel) (ChannelApplicationProvidedServiceIf *iface, SimpleChannelClient ** _return, TalkException ** e, GError **error);
  gboolean (*get_profile_for_channel) (ChannelApplicationProvidedServiceIf *iface, Profile ** _return, TalkException ** e, GError **error);
  gboolean (*get_simple_channel_contacts) (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, const GPtrArray * ids, TalkException ** e, GError **error);
  gboolean (*get_user_country_for_billing) (ChannelApplicationProvidedServiceIf *iface, gchar ** _return, const gchar * country, const gchar * remoteIp, TalkException ** e, GError **error);
  gboolean (*get_user_create_time) (ChannelApplicationProvidedServiceIf *iface, gint64* _return, TalkException ** e, GError **error);
  gboolean (*get_user_identities) (ChannelApplicationProvidedServiceIf *iface, GHashTable ** _return, TalkException ** e, GError **error);
  gboolean (*get_user_language) (ChannelApplicationProvidedServiceIf *iface, gchar ** _return, TalkException ** e, GError **error);
  gboolean (*get_user_mids_who_added_me) (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*is_group_member) (ChannelApplicationProvidedServiceIf *iface, gboolean* _return, const gchar * groupId, TalkException ** e, GError **error);
  gboolean (*is_in_contact) (ChannelApplicationProvidedServiceIf *iface, gboolean* _return, const gchar * mid, TalkException ** e, GError **error);
  gboolean (*register_channel_c_p) (ChannelApplicationProvidedServiceIf *iface, gchar ** _return, const gchar * cpId, const gchar * registerPassword, TalkException ** e, GError **error);
  gboolean (*remove_notification_status) (ChannelApplicationProvidedServiceIf *iface, const NotificationStatus notificationStatus, TalkException ** e, GError **error);
  gboolean (*send_message_for_channel) (ChannelApplicationProvidedServiceIf *iface, Message ** _return, const Message * message, TalkException ** e, GError **error);
  gboolean (*send_pin_code_operation) (ChannelApplicationProvidedServiceIf *iface, const gchar * verifier, TalkException ** e, GError **error);
  gboolean (*update_profile_attribute_for_channel) (ChannelApplicationProvidedServiceIf *iface, const ProfileAttribute profileAttribute, const gchar * value, TalkException ** e, GError **error);
};
typedef struct _ChannelApplicationProvidedServiceIfInterface ChannelApplicationProvidedServiceIfInterface;

GType channel_application_provided_service_if_get_type (void);
#define TYPE_CHANNEL_APPLICATION_PROVIDED_SERVICE_IF (channel_application_provided_service_if_get_type())
#define CHANNEL_APPLICATION_PROVIDED_SERVICE_IF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CHANNEL_APPLICATION_PROVIDED_SERVICE_IF, ChannelApplicationProvidedServiceIf))
#define IS_CHANNEL_APPLICATION_PROVIDED_SERVICE_IF(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CHANNEL_APPLICATION_PROVIDED_SERVICE_IF))
#define CHANNEL_APPLICATION_PROVIDED_SERVICE_IF_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), TYPE_CHANNEL_APPLICATION_PROVIDED_SERVICE_IF, ChannelApplicationProvidedServiceIfInterface))

gboolean channel_application_provided_service_if_active_buddy_subscriber_count (ChannelApplicationProvidedServiceIf *iface, gint64* _return, TalkException ** e, GError **error);
gboolean channel_application_provided_service_if_add_operation_for_channel (ChannelApplicationProvidedServiceIf *iface, const OpType opType, const gchar * param1, const gchar * param2, const gchar * param3, TalkException ** e, GError **error);
gboolean channel_application_provided_service_if_display_buddy_subscriber_count (ChannelApplicationProvidedServiceIf *iface, gint64* _return, TalkException ** e, GError **error);
gboolean channel_application_provided_service_if_find_contact_by_userid_without_abuse_block_for_channel (ChannelApplicationProvidedServiceIf *iface, Contact ** _return, const gchar * userid, TalkException ** e, GError **error);
gboolean channel_application_provided_service_if_get_all_contact_ids_for_channel (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean channel_application_provided_service_if_get_compact_contacts (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, const gint64 lastModifiedTimestamp, TalkException ** e, GError **error);
gboolean channel_application_provided_service_if_get_contacts_for_channel (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, const GPtrArray * ids, TalkException ** e, GError **error);
gboolean channel_application_provided_service_if_get_display_name (ChannelApplicationProvidedServiceIf *iface, gchar ** _return, const gchar * mid, TalkException ** e, GError **error);
gboolean channel_application_provided_service_if_get_favorite_mids_for_channel (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean channel_application_provided_service_if_get_friend_mids (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean channel_application_provided_service_if_get_group_member_mids (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, const gchar * groupId, TalkException ** e, GError **error);
gboolean channel_application_provided_service_if_get_groups_for_channel (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, const GPtrArray * groupIds, TalkException ** e, GError **error);
gboolean channel_application_provided_service_if_get_identity_credential (ChannelApplicationProvidedServiceIf *iface, IdentityCredential ** _return, TalkException ** e, GError **error);
gboolean channel_application_provided_service_if_get_joined_group_ids_for_channel (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean channel_application_provided_service_if_get_meta_profile (ChannelApplicationProvidedServiceIf *iface, MetaProfile ** _return, TalkException ** e, GError **error);
gboolean channel_application_provided_service_if_get_mid (ChannelApplicationProvidedServiceIf *iface, gchar ** _return, TalkException ** e, GError **error);
gboolean channel_application_provided_service_if_get_primary_client_for_channel (ChannelApplicationProvidedServiceIf *iface, SimpleChannelClient ** _return, TalkException ** e, GError **error);
gboolean channel_application_provided_service_if_get_profile_for_channel (ChannelApplicationProvidedServiceIf *iface, Profile ** _return, TalkException ** e, GError **error);
gboolean channel_application_provided_service_if_get_simple_channel_contacts (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, const GPtrArray * ids, TalkException ** e, GError **error);
gboolean channel_application_provided_service_if_get_user_country_for_billing (ChannelApplicationProvidedServiceIf *iface, gchar ** _return, const gchar * country, const gchar * remoteIp, TalkException ** e, GError **error);
gboolean channel_application_provided_service_if_get_user_create_time (ChannelApplicationProvidedServiceIf *iface, gint64* _return, TalkException ** e, GError **error);
gboolean channel_application_provided_service_if_get_user_identities (ChannelApplicationProvidedServiceIf *iface, GHashTable ** _return, TalkException ** e, GError **error);
gboolean channel_application_provided_service_if_get_user_language (ChannelApplicationProvidedServiceIf *iface, gchar ** _return, TalkException ** e, GError **error);
gboolean channel_application_provided_service_if_get_user_mids_who_added_me (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean channel_application_provided_service_if_is_group_member (ChannelApplicationProvidedServiceIf *iface, gboolean* _return, const gchar * groupId, TalkException ** e, GError **error);
gboolean channel_application_provided_service_if_is_in_contact (ChannelApplicationProvidedServiceIf *iface, gboolean* _return, const gchar * mid, TalkException ** e, GError **error);
gboolean channel_application_provided_service_if_register_channel_c_p (ChannelApplicationProvidedServiceIf *iface, gchar ** _return, const gchar * cpId, const gchar * registerPassword, TalkException ** e, GError **error);
gboolean channel_application_provided_service_if_remove_notification_status (ChannelApplicationProvidedServiceIf *iface, const NotificationStatus notificationStatus, TalkException ** e, GError **error);
gboolean channel_application_provided_service_if_send_message_for_channel (ChannelApplicationProvidedServiceIf *iface, Message ** _return, const Message * message, TalkException ** e, GError **error);
gboolean channel_application_provided_service_if_send_pin_code_operation (ChannelApplicationProvidedServiceIf *iface, const gchar * verifier, TalkException ** e, GError **error);
gboolean channel_application_provided_service_if_update_profile_attribute_for_channel (ChannelApplicationProvidedServiceIf *iface, const ProfileAttribute profileAttribute, const gchar * value, TalkException ** e, GError **error);

/* ChannelApplicationProvidedService service client */
struct _ChannelApplicationProvidedServiceClient
{
  GObject parent;

  ThriftProtocol *input_protocol;
  ThriftProtocol *output_protocol;
};
typedef struct _ChannelApplicationProvidedServiceClient ChannelApplicationProvidedServiceClient;

struct _ChannelApplicationProvidedServiceClientClass
{
  GObjectClass parent;
};
typedef struct _ChannelApplicationProvidedServiceClientClass ChannelApplicationProvidedServiceClientClass;

GType channel_application_provided_service_client_get_type (void);
#define TYPE_CHANNEL_APPLICATION_PROVIDED_SERVICE_CLIENT (channel_application_provided_service_client_get_type())
#define CHANNEL_APPLICATION_PROVIDED_SERVICE_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CHANNEL_APPLICATION_PROVIDED_SERVICE_CLIENT, ChannelApplicationProvidedServiceClient))
#define CHANNEL_APPLICATION_PROVIDED_SERVICE_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_CHANNEL_APPLICATION_PROVIDED_SERVICE_CLIENT, ChannelApplicationProvidedServiceClientClass))
#define CHANNEL_APPLICATION_PROVIDED_SERVICE_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CHANNEL_APPLICATION_PROVIDED_SERVICE_CLIENT))
#define CHANNEL_APPLICATION_PROVIDED_SERVICE_IS_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_CHANNEL_APPLICATION_PROVIDED_SERVICE_CLIENT))
#define CHANNEL_APPLICATION_PROVIDED_SERVICE_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_CHANNEL_APPLICATION_PROVIDED_SERVICE_CLIENT, ChannelApplicationProvidedServiceClientClass))

gboolean channel_application_provided_service_client_active_buddy_subscriber_count (ChannelApplicationProvidedServiceIf * iface, gint64* _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_send_active_buddy_subscriber_count (ChannelApplicationProvidedServiceIf * iface, GError ** error);
gboolean channel_application_provided_service_client_recv_active_buddy_subscriber_count (ChannelApplicationProvidedServiceIf * iface, gint64* _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_add_operation_for_channel (ChannelApplicationProvidedServiceIf * iface, const OpType opType, const gchar * param1, const gchar * param2, const gchar * param3, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_send_add_operation_for_channel (ChannelApplicationProvidedServiceIf * iface, const OpType opType, const gchar * param1, const gchar * param2, const gchar * param3, GError ** error);
gboolean channel_application_provided_service_client_recv_add_operation_for_channel (ChannelApplicationProvidedServiceIf * iface, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_display_buddy_subscriber_count (ChannelApplicationProvidedServiceIf * iface, gint64* _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_send_display_buddy_subscriber_count (ChannelApplicationProvidedServiceIf * iface, GError ** error);
gboolean channel_application_provided_service_client_recv_display_buddy_subscriber_count (ChannelApplicationProvidedServiceIf * iface, gint64* _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_find_contact_by_userid_without_abuse_block_for_channel (ChannelApplicationProvidedServiceIf * iface, Contact ** _return, const gchar * userid, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_send_find_contact_by_userid_without_abuse_block_for_channel (ChannelApplicationProvidedServiceIf * iface, const gchar * userid, GError ** error);
gboolean channel_application_provided_service_client_recv_find_contact_by_userid_without_abuse_block_for_channel (ChannelApplicationProvidedServiceIf * iface, Contact ** _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_get_all_contact_ids_for_channel (ChannelApplicationProvidedServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_send_get_all_contact_ids_for_channel (ChannelApplicationProvidedServiceIf * iface, GError ** error);
gboolean channel_application_provided_service_client_recv_get_all_contact_ids_for_channel (ChannelApplicationProvidedServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_get_compact_contacts (ChannelApplicationProvidedServiceIf * iface, GPtrArray ** _return, const gint64 lastModifiedTimestamp, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_send_get_compact_contacts (ChannelApplicationProvidedServiceIf * iface, const gint64 lastModifiedTimestamp, GError ** error);
gboolean channel_application_provided_service_client_recv_get_compact_contacts (ChannelApplicationProvidedServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_get_contacts_for_channel (ChannelApplicationProvidedServiceIf * iface, GPtrArray ** _return, const GPtrArray * ids, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_send_get_contacts_for_channel (ChannelApplicationProvidedServiceIf * iface, const GPtrArray * ids, GError ** error);
gboolean channel_application_provided_service_client_recv_get_contacts_for_channel (ChannelApplicationProvidedServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_get_display_name (ChannelApplicationProvidedServiceIf * iface, gchar ** _return, const gchar * mid, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_send_get_display_name (ChannelApplicationProvidedServiceIf * iface, const gchar * mid, GError ** error);
gboolean channel_application_provided_service_client_recv_get_display_name (ChannelApplicationProvidedServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_get_favorite_mids_for_channel (ChannelApplicationProvidedServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_send_get_favorite_mids_for_channel (ChannelApplicationProvidedServiceIf * iface, GError ** error);
gboolean channel_application_provided_service_client_recv_get_favorite_mids_for_channel (ChannelApplicationProvidedServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_get_friend_mids (ChannelApplicationProvidedServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_send_get_friend_mids (ChannelApplicationProvidedServiceIf * iface, GError ** error);
gboolean channel_application_provided_service_client_recv_get_friend_mids (ChannelApplicationProvidedServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_get_group_member_mids (ChannelApplicationProvidedServiceIf * iface, GPtrArray ** _return, const gchar * groupId, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_send_get_group_member_mids (ChannelApplicationProvidedServiceIf * iface, const gchar * groupId, GError ** error);
gboolean channel_application_provided_service_client_recv_get_group_member_mids (ChannelApplicationProvidedServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_get_groups_for_channel (ChannelApplicationProvidedServiceIf * iface, GPtrArray ** _return, const GPtrArray * groupIds, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_send_get_groups_for_channel (ChannelApplicationProvidedServiceIf * iface, const GPtrArray * groupIds, GError ** error);
gboolean channel_application_provided_service_client_recv_get_groups_for_channel (ChannelApplicationProvidedServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_get_identity_credential (ChannelApplicationProvidedServiceIf * iface, IdentityCredential ** _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_send_get_identity_credential (ChannelApplicationProvidedServiceIf * iface, GError ** error);
gboolean channel_application_provided_service_client_recv_get_identity_credential (ChannelApplicationProvidedServiceIf * iface, IdentityCredential ** _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_get_joined_group_ids_for_channel (ChannelApplicationProvidedServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_send_get_joined_group_ids_for_channel (ChannelApplicationProvidedServiceIf * iface, GError ** error);
gboolean channel_application_provided_service_client_recv_get_joined_group_ids_for_channel (ChannelApplicationProvidedServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_get_meta_profile (ChannelApplicationProvidedServiceIf * iface, MetaProfile ** _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_send_get_meta_profile (ChannelApplicationProvidedServiceIf * iface, GError ** error);
gboolean channel_application_provided_service_client_recv_get_meta_profile (ChannelApplicationProvidedServiceIf * iface, MetaProfile ** _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_get_mid (ChannelApplicationProvidedServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_send_get_mid (ChannelApplicationProvidedServiceIf * iface, GError ** error);
gboolean channel_application_provided_service_client_recv_get_mid (ChannelApplicationProvidedServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_get_primary_client_for_channel (ChannelApplicationProvidedServiceIf * iface, SimpleChannelClient ** _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_send_get_primary_client_for_channel (ChannelApplicationProvidedServiceIf * iface, GError ** error);
gboolean channel_application_provided_service_client_recv_get_primary_client_for_channel (ChannelApplicationProvidedServiceIf * iface, SimpleChannelClient ** _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_get_profile_for_channel (ChannelApplicationProvidedServiceIf * iface, Profile ** _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_send_get_profile_for_channel (ChannelApplicationProvidedServiceIf * iface, GError ** error);
gboolean channel_application_provided_service_client_recv_get_profile_for_channel (ChannelApplicationProvidedServiceIf * iface, Profile ** _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_get_simple_channel_contacts (ChannelApplicationProvidedServiceIf * iface, GPtrArray ** _return, const GPtrArray * ids, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_send_get_simple_channel_contacts (ChannelApplicationProvidedServiceIf * iface, const GPtrArray * ids, GError ** error);
gboolean channel_application_provided_service_client_recv_get_simple_channel_contacts (ChannelApplicationProvidedServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_get_user_country_for_billing (ChannelApplicationProvidedServiceIf * iface, gchar ** _return, const gchar * country, const gchar * remoteIp, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_send_get_user_country_for_billing (ChannelApplicationProvidedServiceIf * iface, const gchar * country, const gchar * remoteIp, GError ** error);
gboolean channel_application_provided_service_client_recv_get_user_country_for_billing (ChannelApplicationProvidedServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_get_user_create_time (ChannelApplicationProvidedServiceIf * iface, gint64* _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_send_get_user_create_time (ChannelApplicationProvidedServiceIf * iface, GError ** error);
gboolean channel_application_provided_service_client_recv_get_user_create_time (ChannelApplicationProvidedServiceIf * iface, gint64* _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_get_user_identities (ChannelApplicationProvidedServiceIf * iface, GHashTable ** _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_send_get_user_identities (ChannelApplicationProvidedServiceIf * iface, GError ** error);
gboolean channel_application_provided_service_client_recv_get_user_identities (ChannelApplicationProvidedServiceIf * iface, GHashTable ** _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_get_user_language (ChannelApplicationProvidedServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_send_get_user_language (ChannelApplicationProvidedServiceIf * iface, GError ** error);
gboolean channel_application_provided_service_client_recv_get_user_language (ChannelApplicationProvidedServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_get_user_mids_who_added_me (ChannelApplicationProvidedServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_send_get_user_mids_who_added_me (ChannelApplicationProvidedServiceIf * iface, GError ** error);
gboolean channel_application_provided_service_client_recv_get_user_mids_who_added_me (ChannelApplicationProvidedServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_is_group_member (ChannelApplicationProvidedServiceIf * iface, gboolean* _return, const gchar * groupId, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_send_is_group_member (ChannelApplicationProvidedServiceIf * iface, const gchar * groupId, GError ** error);
gboolean channel_application_provided_service_client_recv_is_group_member (ChannelApplicationProvidedServiceIf * iface, gboolean* _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_is_in_contact (ChannelApplicationProvidedServiceIf * iface, gboolean* _return, const gchar * mid, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_send_is_in_contact (ChannelApplicationProvidedServiceIf * iface, const gchar * mid, GError ** error);
gboolean channel_application_provided_service_client_recv_is_in_contact (ChannelApplicationProvidedServiceIf * iface, gboolean* _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_register_channel_c_p (ChannelApplicationProvidedServiceIf * iface, gchar ** _return, const gchar * cpId, const gchar * registerPassword, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_send_register_channel_c_p (ChannelApplicationProvidedServiceIf * iface, const gchar * cpId, const gchar * registerPassword, GError ** error);
gboolean channel_application_provided_service_client_recv_register_channel_c_p (ChannelApplicationProvidedServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_remove_notification_status (ChannelApplicationProvidedServiceIf * iface, const NotificationStatus notificationStatus, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_send_remove_notification_status (ChannelApplicationProvidedServiceIf * iface, const NotificationStatus notificationStatus, GError ** error);
gboolean channel_application_provided_service_client_recv_remove_notification_status (ChannelApplicationProvidedServiceIf * iface, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_send_message_for_channel (ChannelApplicationProvidedServiceIf * iface, Message ** _return, const Message * message, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_send_send_message_for_channel (ChannelApplicationProvidedServiceIf * iface, const Message * message, GError ** error);
gboolean channel_application_provided_service_client_recv_send_message_for_channel (ChannelApplicationProvidedServiceIf * iface, Message ** _return, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_send_pin_code_operation (ChannelApplicationProvidedServiceIf * iface, const gchar * verifier, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_send_send_pin_code_operation (ChannelApplicationProvidedServiceIf * iface, const gchar * verifier, GError ** error);
gboolean channel_application_provided_service_client_recv_send_pin_code_operation (ChannelApplicationProvidedServiceIf * iface, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_update_profile_attribute_for_channel (ChannelApplicationProvidedServiceIf * iface, const ProfileAttribute profileAttribute, const gchar * value, TalkException ** e, GError ** error);
gboolean channel_application_provided_service_client_send_update_profile_attribute_for_channel (ChannelApplicationProvidedServiceIf * iface, const ProfileAttribute profileAttribute, const gchar * value, GError ** error);
gboolean channel_application_provided_service_client_recv_update_profile_attribute_for_channel (ChannelApplicationProvidedServiceIf * iface, TalkException ** e, GError ** error);
void channel_application_provided_service_client_set_property (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);
void channel_application_provided_service_client_get_property (GObject *object, guint property_id, GValue *value, GParamSpec *pspec);

/* ChannelApplicationProvidedService handler (abstract base class) */
struct _ChannelApplicationProvidedServiceHandler
{
  GObject parent;
};
typedef struct _ChannelApplicationProvidedServiceHandler ChannelApplicationProvidedServiceHandler;

struct _ChannelApplicationProvidedServiceHandlerClass
{
  GObjectClass parent;

  gboolean (*active_buddy_subscriber_count) (ChannelApplicationProvidedServiceIf *iface, gint64* _return, TalkException ** e, GError **error);
  gboolean (*add_operation_for_channel) (ChannelApplicationProvidedServiceIf *iface, const OpType opType, const gchar * param1, const gchar * param2, const gchar * param3, TalkException ** e, GError **error);
  gboolean (*display_buddy_subscriber_count) (ChannelApplicationProvidedServiceIf *iface, gint64* _return, TalkException ** e, GError **error);
  gboolean (*find_contact_by_userid_without_abuse_block_for_channel) (ChannelApplicationProvidedServiceIf *iface, Contact ** _return, const gchar * userid, TalkException ** e, GError **error);
  gboolean (*get_all_contact_ids_for_channel) (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_compact_contacts) (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, const gint64 lastModifiedTimestamp, TalkException ** e, GError **error);
  gboolean (*get_contacts_for_channel) (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, const GPtrArray * ids, TalkException ** e, GError **error);
  gboolean (*get_display_name) (ChannelApplicationProvidedServiceIf *iface, gchar ** _return, const gchar * mid, TalkException ** e, GError **error);
  gboolean (*get_favorite_mids_for_channel) (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_friend_mids) (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_group_member_mids) (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, const gchar * groupId, TalkException ** e, GError **error);
  gboolean (*get_groups_for_channel) (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, const GPtrArray * groupIds, TalkException ** e, GError **error);
  gboolean (*get_identity_credential) (ChannelApplicationProvidedServiceIf *iface, IdentityCredential ** _return, TalkException ** e, GError **error);
  gboolean (*get_joined_group_ids_for_channel) (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_meta_profile) (ChannelApplicationProvidedServiceIf *iface, MetaProfile ** _return, TalkException ** e, GError **error);
  gboolean (*get_mid) (ChannelApplicationProvidedServiceIf *iface, gchar ** _return, TalkException ** e, GError **error);
  gboolean (*get_primary_client_for_channel) (ChannelApplicationProvidedServiceIf *iface, SimpleChannelClient ** _return, TalkException ** e, GError **error);
  gboolean (*get_profile_for_channel) (ChannelApplicationProvidedServiceIf *iface, Profile ** _return, TalkException ** e, GError **error);
  gboolean (*get_simple_channel_contacts) (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, const GPtrArray * ids, TalkException ** e, GError **error);
  gboolean (*get_user_country_for_billing) (ChannelApplicationProvidedServiceIf *iface, gchar ** _return, const gchar * country, const gchar * remoteIp, TalkException ** e, GError **error);
  gboolean (*get_user_create_time) (ChannelApplicationProvidedServiceIf *iface, gint64* _return, TalkException ** e, GError **error);
  gboolean (*get_user_identities) (ChannelApplicationProvidedServiceIf *iface, GHashTable ** _return, TalkException ** e, GError **error);
  gboolean (*get_user_language) (ChannelApplicationProvidedServiceIf *iface, gchar ** _return, TalkException ** e, GError **error);
  gboolean (*get_user_mids_who_added_me) (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*is_group_member) (ChannelApplicationProvidedServiceIf *iface, gboolean* _return, const gchar * groupId, TalkException ** e, GError **error);
  gboolean (*is_in_contact) (ChannelApplicationProvidedServiceIf *iface, gboolean* _return, const gchar * mid, TalkException ** e, GError **error);
  gboolean (*register_channel_c_p) (ChannelApplicationProvidedServiceIf *iface, gchar ** _return, const gchar * cpId, const gchar * registerPassword, TalkException ** e, GError **error);
  gboolean (*remove_notification_status) (ChannelApplicationProvidedServiceIf *iface, const NotificationStatus notificationStatus, TalkException ** e, GError **error);
  gboolean (*send_message_for_channel) (ChannelApplicationProvidedServiceIf *iface, Message ** _return, const Message * message, TalkException ** e, GError **error);
  gboolean (*send_pin_code_operation) (ChannelApplicationProvidedServiceIf *iface, const gchar * verifier, TalkException ** e, GError **error);
  gboolean (*update_profile_attribute_for_channel) (ChannelApplicationProvidedServiceIf *iface, const ProfileAttribute profileAttribute, const gchar * value, TalkException ** e, GError **error);
};
typedef struct _ChannelApplicationProvidedServiceHandlerClass ChannelApplicationProvidedServiceHandlerClass;

GType channel_application_provided_service_handler_get_type (void);
#define TYPE_CHANNEL_APPLICATION_PROVIDED_SERVICE_HANDLER (channel_application_provided_service_handler_get_type())
#define CHANNEL_APPLICATION_PROVIDED_SERVICE_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CHANNEL_APPLICATION_PROVIDED_SERVICE_HANDLER, ChannelApplicationProvidedServiceHandler))
#define IS_CHANNEL_APPLICATION_PROVIDED_SERVICE_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CHANNEL_APPLICATION_PROVIDED_SERVICE_HANDLER))
#define CHANNEL_APPLICATION_PROVIDED_SERVICE_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_CHANNEL_APPLICATION_PROVIDED_SERVICE_HANDLER, ChannelApplicationProvidedServiceHandlerClass))
#define IS_CHANNEL_APPLICATION_PROVIDED_SERVICE_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_CHANNEL_APPLICATION_PROVIDED_SERVICE_HANDLER))
#define CHANNEL_APPLICATION_PROVIDED_SERVICE_HANDLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_CHANNEL_APPLICATION_PROVIDED_SERVICE_HANDLER, ChannelApplicationProvidedServiceHandlerClass))

gboolean channel_application_provided_service_handler_active_buddy_subscriber_count (ChannelApplicationProvidedServiceIf *iface, gint64* _return, TalkException ** e, GError **error);
gboolean channel_application_provided_service_handler_add_operation_for_channel (ChannelApplicationProvidedServiceIf *iface, const OpType opType, const gchar * param1, const gchar * param2, const gchar * param3, TalkException ** e, GError **error);
gboolean channel_application_provided_service_handler_display_buddy_subscriber_count (ChannelApplicationProvidedServiceIf *iface, gint64* _return, TalkException ** e, GError **error);
gboolean channel_application_provided_service_handler_find_contact_by_userid_without_abuse_block_for_channel (ChannelApplicationProvidedServiceIf *iface, Contact ** _return, const gchar * userid, TalkException ** e, GError **error);
gboolean channel_application_provided_service_handler_get_all_contact_ids_for_channel (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean channel_application_provided_service_handler_get_compact_contacts (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, const gint64 lastModifiedTimestamp, TalkException ** e, GError **error);
gboolean channel_application_provided_service_handler_get_contacts_for_channel (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, const GPtrArray * ids, TalkException ** e, GError **error);
gboolean channel_application_provided_service_handler_get_display_name (ChannelApplicationProvidedServiceIf *iface, gchar ** _return, const gchar * mid, TalkException ** e, GError **error);
gboolean channel_application_provided_service_handler_get_favorite_mids_for_channel (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean channel_application_provided_service_handler_get_friend_mids (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean channel_application_provided_service_handler_get_group_member_mids (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, const gchar * groupId, TalkException ** e, GError **error);
gboolean channel_application_provided_service_handler_get_groups_for_channel (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, const GPtrArray * groupIds, TalkException ** e, GError **error);
gboolean channel_application_provided_service_handler_get_identity_credential (ChannelApplicationProvidedServiceIf *iface, IdentityCredential ** _return, TalkException ** e, GError **error);
gboolean channel_application_provided_service_handler_get_joined_group_ids_for_channel (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean channel_application_provided_service_handler_get_meta_profile (ChannelApplicationProvidedServiceIf *iface, MetaProfile ** _return, TalkException ** e, GError **error);
gboolean channel_application_provided_service_handler_get_mid (ChannelApplicationProvidedServiceIf *iface, gchar ** _return, TalkException ** e, GError **error);
gboolean channel_application_provided_service_handler_get_primary_client_for_channel (ChannelApplicationProvidedServiceIf *iface, SimpleChannelClient ** _return, TalkException ** e, GError **error);
gboolean channel_application_provided_service_handler_get_profile_for_channel (ChannelApplicationProvidedServiceIf *iface, Profile ** _return, TalkException ** e, GError **error);
gboolean channel_application_provided_service_handler_get_simple_channel_contacts (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, const GPtrArray * ids, TalkException ** e, GError **error);
gboolean channel_application_provided_service_handler_get_user_country_for_billing (ChannelApplicationProvidedServiceIf *iface, gchar ** _return, const gchar * country, const gchar * remoteIp, TalkException ** e, GError **error);
gboolean channel_application_provided_service_handler_get_user_create_time (ChannelApplicationProvidedServiceIf *iface, gint64* _return, TalkException ** e, GError **error);
gboolean channel_application_provided_service_handler_get_user_identities (ChannelApplicationProvidedServiceIf *iface, GHashTable ** _return, TalkException ** e, GError **error);
gboolean channel_application_provided_service_handler_get_user_language (ChannelApplicationProvidedServiceIf *iface, gchar ** _return, TalkException ** e, GError **error);
gboolean channel_application_provided_service_handler_get_user_mids_who_added_me (ChannelApplicationProvidedServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean channel_application_provided_service_handler_is_group_member (ChannelApplicationProvidedServiceIf *iface, gboolean* _return, const gchar * groupId, TalkException ** e, GError **error);
gboolean channel_application_provided_service_handler_is_in_contact (ChannelApplicationProvidedServiceIf *iface, gboolean* _return, const gchar * mid, TalkException ** e, GError **error);
gboolean channel_application_provided_service_handler_register_channel_c_p (ChannelApplicationProvidedServiceIf *iface, gchar ** _return, const gchar * cpId, const gchar * registerPassword, TalkException ** e, GError **error);
gboolean channel_application_provided_service_handler_remove_notification_status (ChannelApplicationProvidedServiceIf *iface, const NotificationStatus notificationStatus, TalkException ** e, GError **error);
gboolean channel_application_provided_service_handler_send_message_for_channel (ChannelApplicationProvidedServiceIf *iface, Message ** _return, const Message * message, TalkException ** e, GError **error);
gboolean channel_application_provided_service_handler_send_pin_code_operation (ChannelApplicationProvidedServiceIf *iface, const gchar * verifier, TalkException ** e, GError **error);
gboolean channel_application_provided_service_handler_update_profile_attribute_for_channel (ChannelApplicationProvidedServiceIf *iface, const ProfileAttribute profileAttribute, const gchar * value, TalkException ** e, GError **error);

/* ChannelApplicationProvidedService processor */
struct _ChannelApplicationProvidedServiceProcessor
{
  ThriftDispatchProcessor parent;

  /* protected */
  ChannelApplicationProvidedServiceHandler *handler;
  GHashTable *process_map;
};
typedef struct _ChannelApplicationProvidedServiceProcessor ChannelApplicationProvidedServiceProcessor;

struct _ChannelApplicationProvidedServiceProcessorClass
{
  ThriftDispatchProcessorClass parent;

  /* protected */
  gboolean (*dispatch_call) (ThriftDispatchProcessor *processor,
                             ThriftProtocol *in,
                             ThriftProtocol *out,
                             gchar *fname,
                             gint32 seqid,
                             GError **error);
};
typedef struct _ChannelApplicationProvidedServiceProcessorClass ChannelApplicationProvidedServiceProcessorClass;

GType channel_application_provided_service_processor_get_type (void);
#define TYPE_CHANNEL_APPLICATION_PROVIDED_SERVICE_PROCESSOR (channel_application_provided_service_processor_get_type())
#define CHANNEL_APPLICATION_PROVIDED_SERVICE_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CHANNEL_APPLICATION_PROVIDED_SERVICE_PROCESSOR, ChannelApplicationProvidedServiceProcessor))
#define IS_CHANNEL_APPLICATION_PROVIDED_SERVICE_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CHANNEL_APPLICATION_PROVIDED_SERVICE_PROCESSOR))
#define CHANNEL_APPLICATION_PROVIDED_SERVICE_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_CHANNEL_APPLICATION_PROVIDED_SERVICE_PROCESSOR, ChannelApplicationProvidedServiceProcessorClass))
#define IS_CHANNEL_APPLICATION_PROVIDED_SERVICE_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_CHANNEL_APPLICATION_PROVIDED_SERVICE_PROCESSOR))
#define CHANNEL_APPLICATION_PROVIDED_SERVICE_PROCESSOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_CHANNEL_APPLICATION_PROVIDED_SERVICE_PROCESSOR, ChannelApplicationProvidedServiceProcessorClass))

#endif /* CHANNEL_APPLICATION_PROVIDED_SERVICE_H */
