/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SHOP_SERVICE_H
#define SHOP_SERVICE_H

#include <thrift/c_glib/processor/thrift_dispatch_processor.h>

#include "line_types.h"

/* ShopService service interface */
typedef struct _ShopServiceIf ShopServiceIf;  /* dummy object */

struct _ShopServiceIfInterface
{
  GTypeInterface parent;

  gboolean (*buy_coin_product) (ShopServiceIf *iface, const PaymentReservation * paymentReservation, TalkException ** e, GError **error);
  gboolean (*buy_free_product) (ShopServiceIf *iface, const gchar * receiverMid, const gchar * productId, const gint32 messageTemplate, const gchar * language, const gchar * country, const gint64 packageId, TalkException ** e, GError **error);
  gboolean (*buy_mustbuy_product) (ShopServiceIf *iface, const gchar * receiverMid, const gchar * productId, const gint32 messageTemplate, const gchar * language, const gchar * country, const gint64 packageId, const gchar * serialNumber, TalkException ** e, GError **error);
  gboolean (*check_can_receive_present) (ShopServiceIf *iface, const gchar * recipientMid, const gint64 packageId, const gchar * language, const gchar * country, TalkException ** e, GError **error);
  gboolean (*get_active_purchases) (ShopServiceIf *iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError **error);
  gboolean (*get_active_purchase_versions) (ShopServiceIf *iface, ProductSimpleList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError **error);
  gboolean (*get_coin_products) (ShopServiceIf *iface, GPtrArray ** _return, const PaymentType appStoreCode, const gchar * country, const gchar * language, TalkException ** e, GError **error);
  gboolean (*get_coin_products_by_pg_code) (ShopServiceIf *iface, GPtrArray ** _return, const PaymentType appStoreCode, const PaymentPgType pgCode, const gchar * country, const gchar * language, TalkException ** e, GError **error);
  gboolean (*get_coin_purchase_history) (ShopServiceIf *iface, CoinHistoryResult ** _return, const CoinHistoryCondition * request, TalkException ** e, GError **error);
  gboolean (*get_coin_use_and_refund_history) (ShopServiceIf *iface, CoinHistoryResult ** _return, const CoinHistoryCondition * request, TalkException ** e, GError **error);
  gboolean (*get_downloads) (ShopServiceIf *iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError **error);
  gboolean (*get_event_packages) (ShopServiceIf *iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError **error);
  gboolean (*get_newly_released_packages) (ShopServiceIf *iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError **error);
  gboolean (*get_popular_packages) (ShopServiceIf *iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError **error);
  gboolean (*get_presents_received) (ShopServiceIf *iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError **error);
  gboolean (*get_presents_sent) (ShopServiceIf *iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError **error);
  gboolean (*get_product) (ShopServiceIf *iface, Product ** _return, const gint64 packageID, const gchar * language, const gchar * country, TalkException ** e, GError **error);
  gboolean (*get_product_list) (ShopServiceIf *iface, ProductList ** _return, const GPtrArray * productIdList, const gchar * language, const gchar * country, TalkException ** e, GError **error);
  gboolean (*get_product_list_with_carrier) (ShopServiceIf *iface, ProductList ** _return, const GPtrArray * productIdList, const gchar * language, const gchar * country, const gchar * carrierCode, TalkException ** e, GError **error);
  gboolean (*get_product_with_carrier) (ShopServiceIf *iface, Product ** _return, const gint64 packageID, const gchar * language, const gchar * country, const gchar * carrierCode, TalkException ** e, GError **error);
  gboolean (*get_purchase_history) (ShopServiceIf *iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError **error);
  gboolean (*get_total_balance) (ShopServiceIf *iface, Coin ** _return, const PaymentType appStoreCode, TalkException ** e, GError **error);
  gboolean (*notify_downloaded) (ShopServiceIf *iface, gint64* _return, const gint64 packageId, const gchar * language, TalkException ** e, GError **error);
  gboolean (*reserve_coin_purchase) (ShopServiceIf *iface, PaymentReservationResult ** _return, const CoinPurchaseReservation * request, TalkException ** e, GError **error);
  gboolean (*reserve_payment) (ShopServiceIf *iface, PaymentReservationResult ** _return, const PaymentReservation * paymentReservation, TalkException ** e, GError **error);
};
typedef struct _ShopServiceIfInterface ShopServiceIfInterface;

GType shop_service_if_get_type (void);
#define TYPE_SHOP_SERVICE_IF (shop_service_if_get_type())
#define SHOP_SERVICE_IF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SHOP_SERVICE_IF, ShopServiceIf))
#define IS_SHOP_SERVICE_IF(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SHOP_SERVICE_IF))
#define SHOP_SERVICE_IF_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), TYPE_SHOP_SERVICE_IF, ShopServiceIfInterface))

gboolean shop_service_if_buy_coin_product (ShopServiceIf *iface, const PaymentReservation * paymentReservation, TalkException ** e, GError **error);
gboolean shop_service_if_buy_free_product (ShopServiceIf *iface, const gchar * receiverMid, const gchar * productId, const gint32 messageTemplate, const gchar * language, const gchar * country, const gint64 packageId, TalkException ** e, GError **error);
gboolean shop_service_if_buy_mustbuy_product (ShopServiceIf *iface, const gchar * receiverMid, const gchar * productId, const gint32 messageTemplate, const gchar * language, const gchar * country, const gint64 packageId, const gchar * serialNumber, TalkException ** e, GError **error);
gboolean shop_service_if_check_can_receive_present (ShopServiceIf *iface, const gchar * recipientMid, const gint64 packageId, const gchar * language, const gchar * country, TalkException ** e, GError **error);
gboolean shop_service_if_get_active_purchases (ShopServiceIf *iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError **error);
gboolean shop_service_if_get_active_purchase_versions (ShopServiceIf *iface, ProductSimpleList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError **error);
gboolean shop_service_if_get_coin_products (ShopServiceIf *iface, GPtrArray ** _return, const PaymentType appStoreCode, const gchar * country, const gchar * language, TalkException ** e, GError **error);
gboolean shop_service_if_get_coin_products_by_pg_code (ShopServiceIf *iface, GPtrArray ** _return, const PaymentType appStoreCode, const PaymentPgType pgCode, const gchar * country, const gchar * language, TalkException ** e, GError **error);
gboolean shop_service_if_get_coin_purchase_history (ShopServiceIf *iface, CoinHistoryResult ** _return, const CoinHistoryCondition * request, TalkException ** e, GError **error);
gboolean shop_service_if_get_coin_use_and_refund_history (ShopServiceIf *iface, CoinHistoryResult ** _return, const CoinHistoryCondition * request, TalkException ** e, GError **error);
gboolean shop_service_if_get_downloads (ShopServiceIf *iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError **error);
gboolean shop_service_if_get_event_packages (ShopServiceIf *iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError **error);
gboolean shop_service_if_get_newly_released_packages (ShopServiceIf *iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError **error);
gboolean shop_service_if_get_popular_packages (ShopServiceIf *iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError **error);
gboolean shop_service_if_get_presents_received (ShopServiceIf *iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError **error);
gboolean shop_service_if_get_presents_sent (ShopServiceIf *iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError **error);
gboolean shop_service_if_get_product (ShopServiceIf *iface, Product ** _return, const gint64 packageID, const gchar * language, const gchar * country, TalkException ** e, GError **error);
gboolean shop_service_if_get_product_list (ShopServiceIf *iface, ProductList ** _return, const GPtrArray * productIdList, const gchar * language, const gchar * country, TalkException ** e, GError **error);
gboolean shop_service_if_get_product_list_with_carrier (ShopServiceIf *iface, ProductList ** _return, const GPtrArray * productIdList, const gchar * language, const gchar * country, const gchar * carrierCode, TalkException ** e, GError **error);
gboolean shop_service_if_get_product_with_carrier (ShopServiceIf *iface, Product ** _return, const gint64 packageID, const gchar * language, const gchar * country, const gchar * carrierCode, TalkException ** e, GError **error);
gboolean shop_service_if_get_purchase_history (ShopServiceIf *iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError **error);
gboolean shop_service_if_get_total_balance (ShopServiceIf *iface, Coin ** _return, const PaymentType appStoreCode, TalkException ** e, GError **error);
gboolean shop_service_if_notify_downloaded (ShopServiceIf *iface, gint64* _return, const gint64 packageId, const gchar * language, TalkException ** e, GError **error);
gboolean shop_service_if_reserve_coin_purchase (ShopServiceIf *iface, PaymentReservationResult ** _return, const CoinPurchaseReservation * request, TalkException ** e, GError **error);
gboolean shop_service_if_reserve_payment (ShopServiceIf *iface, PaymentReservationResult ** _return, const PaymentReservation * paymentReservation, TalkException ** e, GError **error);

/* ShopService service client */
struct _ShopServiceClient
{
  GObject parent;

  ThriftProtocol *input_protocol;
  ThriftProtocol *output_protocol;
};
typedef struct _ShopServiceClient ShopServiceClient;

struct _ShopServiceClientClass
{
  GObjectClass parent;
};
typedef struct _ShopServiceClientClass ShopServiceClientClass;

GType shop_service_client_get_type (void);
#define TYPE_SHOP_SERVICE_CLIENT (shop_service_client_get_type())
#define SHOP_SERVICE_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SHOP_SERVICE_CLIENT, ShopServiceClient))
#define SHOP_SERVICE_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_SHOP_SERVICE_CLIENT, ShopServiceClientClass))
#define SHOP_SERVICE_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SHOP_SERVICE_CLIENT))
#define SHOP_SERVICE_IS_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SHOP_SERVICE_CLIENT))
#define SHOP_SERVICE_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SHOP_SERVICE_CLIENT, ShopServiceClientClass))

gboolean shop_service_client_buy_coin_product (ShopServiceIf * iface, const PaymentReservation * paymentReservation, TalkException ** e, GError ** error);
gboolean shop_service_client_send_buy_coin_product (ShopServiceIf * iface, const PaymentReservation * paymentReservation, GError ** error);
gboolean shop_service_client_recv_buy_coin_product (ShopServiceIf * iface, TalkException ** e, GError ** error);
gboolean shop_service_client_buy_free_product (ShopServiceIf * iface, const gchar * receiverMid, const gchar * productId, const gint32 messageTemplate, const gchar * language, const gchar * country, const gint64 packageId, TalkException ** e, GError ** error);
gboolean shop_service_client_send_buy_free_product (ShopServiceIf * iface, const gchar * receiverMid, const gchar * productId, const gint32 messageTemplate, const gchar * language, const gchar * country, const gint64 packageId, GError ** error);
gboolean shop_service_client_recv_buy_free_product (ShopServiceIf * iface, TalkException ** e, GError ** error);
gboolean shop_service_client_buy_mustbuy_product (ShopServiceIf * iface, const gchar * receiverMid, const gchar * productId, const gint32 messageTemplate, const gchar * language, const gchar * country, const gint64 packageId, const gchar * serialNumber, TalkException ** e, GError ** error);
gboolean shop_service_client_send_buy_mustbuy_product (ShopServiceIf * iface, const gchar * receiverMid, const gchar * productId, const gint32 messageTemplate, const gchar * language, const gchar * country, const gint64 packageId, const gchar * serialNumber, GError ** error);
gboolean shop_service_client_recv_buy_mustbuy_product (ShopServiceIf * iface, TalkException ** e, GError ** error);
gboolean shop_service_client_check_can_receive_present (ShopServiceIf * iface, const gchar * recipientMid, const gint64 packageId, const gchar * language, const gchar * country, TalkException ** e, GError ** error);
gboolean shop_service_client_send_check_can_receive_present (ShopServiceIf * iface, const gchar * recipientMid, const gint64 packageId, const gchar * language, const gchar * country, GError ** error);
gboolean shop_service_client_recv_check_can_receive_present (ShopServiceIf * iface, TalkException ** e, GError ** error);
gboolean shop_service_client_get_active_purchases (ShopServiceIf * iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError ** error);
gboolean shop_service_client_send_get_active_purchases (ShopServiceIf * iface, const gint64 start, const gint32 size, const gchar * language, const gchar * country, GError ** error);
gboolean shop_service_client_recv_get_active_purchases (ShopServiceIf * iface, ProductList ** _return, TalkException ** e, GError ** error);
gboolean shop_service_client_get_active_purchase_versions (ShopServiceIf * iface, ProductSimpleList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError ** error);
gboolean shop_service_client_send_get_active_purchase_versions (ShopServiceIf * iface, const gint64 start, const gint32 size, const gchar * language, const gchar * country, GError ** error);
gboolean shop_service_client_recv_get_active_purchase_versions (ShopServiceIf * iface, ProductSimpleList ** _return, TalkException ** e, GError ** error);
gboolean shop_service_client_get_coin_products (ShopServiceIf * iface, GPtrArray ** _return, const PaymentType appStoreCode, const gchar * country, const gchar * language, TalkException ** e, GError ** error);
gboolean shop_service_client_send_get_coin_products (ShopServiceIf * iface, const PaymentType appStoreCode, const gchar * country, const gchar * language, GError ** error);
gboolean shop_service_client_recv_get_coin_products (ShopServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean shop_service_client_get_coin_products_by_pg_code (ShopServiceIf * iface, GPtrArray ** _return, const PaymentType appStoreCode, const PaymentPgType pgCode, const gchar * country, const gchar * language, TalkException ** e, GError ** error);
gboolean shop_service_client_send_get_coin_products_by_pg_code (ShopServiceIf * iface, const PaymentType appStoreCode, const PaymentPgType pgCode, const gchar * country, const gchar * language, GError ** error);
gboolean shop_service_client_recv_get_coin_products_by_pg_code (ShopServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean shop_service_client_get_coin_purchase_history (ShopServiceIf * iface, CoinHistoryResult ** _return, const CoinHistoryCondition * request, TalkException ** e, GError ** error);
gboolean shop_service_client_send_get_coin_purchase_history (ShopServiceIf * iface, const CoinHistoryCondition * request, GError ** error);
gboolean shop_service_client_recv_get_coin_purchase_history (ShopServiceIf * iface, CoinHistoryResult ** _return, TalkException ** e, GError ** error);
gboolean shop_service_client_get_coin_use_and_refund_history (ShopServiceIf * iface, CoinHistoryResult ** _return, const CoinHistoryCondition * request, TalkException ** e, GError ** error);
gboolean shop_service_client_send_get_coin_use_and_refund_history (ShopServiceIf * iface, const CoinHistoryCondition * request, GError ** error);
gboolean shop_service_client_recv_get_coin_use_and_refund_history (ShopServiceIf * iface, CoinHistoryResult ** _return, TalkException ** e, GError ** error);
gboolean shop_service_client_get_downloads (ShopServiceIf * iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError ** error);
gboolean shop_service_client_send_get_downloads (ShopServiceIf * iface, const gint64 start, const gint32 size, const gchar * language, const gchar * country, GError ** error);
gboolean shop_service_client_recv_get_downloads (ShopServiceIf * iface, ProductList ** _return, TalkException ** e, GError ** error);
gboolean shop_service_client_get_event_packages (ShopServiceIf * iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError ** error);
gboolean shop_service_client_send_get_event_packages (ShopServiceIf * iface, const gint64 start, const gint32 size, const gchar * language, const gchar * country, GError ** error);
gboolean shop_service_client_recv_get_event_packages (ShopServiceIf * iface, ProductList ** _return, TalkException ** e, GError ** error);
gboolean shop_service_client_get_newly_released_packages (ShopServiceIf * iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError ** error);
gboolean shop_service_client_send_get_newly_released_packages (ShopServiceIf * iface, const gint64 start, const gint32 size, const gchar * language, const gchar * country, GError ** error);
gboolean shop_service_client_recv_get_newly_released_packages (ShopServiceIf * iface, ProductList ** _return, TalkException ** e, GError ** error);
gboolean shop_service_client_get_popular_packages (ShopServiceIf * iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError ** error);
gboolean shop_service_client_send_get_popular_packages (ShopServiceIf * iface, const gint64 start, const gint32 size, const gchar * language, const gchar * country, GError ** error);
gboolean shop_service_client_recv_get_popular_packages (ShopServiceIf * iface, ProductList ** _return, TalkException ** e, GError ** error);
gboolean shop_service_client_get_presents_received (ShopServiceIf * iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError ** error);
gboolean shop_service_client_send_get_presents_received (ShopServiceIf * iface, const gint64 start, const gint32 size, const gchar * language, const gchar * country, GError ** error);
gboolean shop_service_client_recv_get_presents_received (ShopServiceIf * iface, ProductList ** _return, TalkException ** e, GError ** error);
gboolean shop_service_client_get_presents_sent (ShopServiceIf * iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError ** error);
gboolean shop_service_client_send_get_presents_sent (ShopServiceIf * iface, const gint64 start, const gint32 size, const gchar * language, const gchar * country, GError ** error);
gboolean shop_service_client_recv_get_presents_sent (ShopServiceIf * iface, ProductList ** _return, TalkException ** e, GError ** error);
gboolean shop_service_client_get_product (ShopServiceIf * iface, Product ** _return, const gint64 packageID, const gchar * language, const gchar * country, TalkException ** e, GError ** error);
gboolean shop_service_client_send_get_product (ShopServiceIf * iface, const gint64 packageID, const gchar * language, const gchar * country, GError ** error);
gboolean shop_service_client_recv_get_product (ShopServiceIf * iface, Product ** _return, TalkException ** e, GError ** error);
gboolean shop_service_client_get_product_list (ShopServiceIf * iface, ProductList ** _return, const GPtrArray * productIdList, const gchar * language, const gchar * country, TalkException ** e, GError ** error);
gboolean shop_service_client_send_get_product_list (ShopServiceIf * iface, const GPtrArray * productIdList, const gchar * language, const gchar * country, GError ** error);
gboolean shop_service_client_recv_get_product_list (ShopServiceIf * iface, ProductList ** _return, TalkException ** e, GError ** error);
gboolean shop_service_client_get_product_list_with_carrier (ShopServiceIf * iface, ProductList ** _return, const GPtrArray * productIdList, const gchar * language, const gchar * country, const gchar * carrierCode, TalkException ** e, GError ** error);
gboolean shop_service_client_send_get_product_list_with_carrier (ShopServiceIf * iface, const GPtrArray * productIdList, const gchar * language, const gchar * country, const gchar * carrierCode, GError ** error);
gboolean shop_service_client_recv_get_product_list_with_carrier (ShopServiceIf * iface, ProductList ** _return, TalkException ** e, GError ** error);
gboolean shop_service_client_get_product_with_carrier (ShopServiceIf * iface, Product ** _return, const gint64 packageID, const gchar * language, const gchar * country, const gchar * carrierCode, TalkException ** e, GError ** error);
gboolean shop_service_client_send_get_product_with_carrier (ShopServiceIf * iface, const gint64 packageID, const gchar * language, const gchar * country, const gchar * carrierCode, GError ** error);
gboolean shop_service_client_recv_get_product_with_carrier (ShopServiceIf * iface, Product ** _return, TalkException ** e, GError ** error);
gboolean shop_service_client_get_purchase_history (ShopServiceIf * iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError ** error);
gboolean shop_service_client_send_get_purchase_history (ShopServiceIf * iface, const gint64 start, const gint32 size, const gchar * language, const gchar * country, GError ** error);
gboolean shop_service_client_recv_get_purchase_history (ShopServiceIf * iface, ProductList ** _return, TalkException ** e, GError ** error);
gboolean shop_service_client_get_total_balance (ShopServiceIf * iface, Coin ** _return, const PaymentType appStoreCode, TalkException ** e, GError ** error);
gboolean shop_service_client_send_get_total_balance (ShopServiceIf * iface, const PaymentType appStoreCode, GError ** error);
gboolean shop_service_client_recv_get_total_balance (ShopServiceIf * iface, Coin ** _return, TalkException ** e, GError ** error);
gboolean shop_service_client_notify_downloaded (ShopServiceIf * iface, gint64* _return, const gint64 packageId, const gchar * language, TalkException ** e, GError ** error);
gboolean shop_service_client_send_notify_downloaded (ShopServiceIf * iface, const gint64 packageId, const gchar * language, GError ** error);
gboolean shop_service_client_recv_notify_downloaded (ShopServiceIf * iface, gint64* _return, TalkException ** e, GError ** error);
gboolean shop_service_client_reserve_coin_purchase (ShopServiceIf * iface, PaymentReservationResult ** _return, const CoinPurchaseReservation * request, TalkException ** e, GError ** error);
gboolean shop_service_client_send_reserve_coin_purchase (ShopServiceIf * iface, const CoinPurchaseReservation * request, GError ** error);
gboolean shop_service_client_recv_reserve_coin_purchase (ShopServiceIf * iface, PaymentReservationResult ** _return, TalkException ** e, GError ** error);
gboolean shop_service_client_reserve_payment (ShopServiceIf * iface, PaymentReservationResult ** _return, const PaymentReservation * paymentReservation, TalkException ** e, GError ** error);
gboolean shop_service_client_send_reserve_payment (ShopServiceIf * iface, const PaymentReservation * paymentReservation, GError ** error);
gboolean shop_service_client_recv_reserve_payment (ShopServiceIf * iface, PaymentReservationResult ** _return, TalkException ** e, GError ** error);
void shop_service_client_set_property (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);
void shop_service_client_get_property (GObject *object, guint property_id, GValue *value, GParamSpec *pspec);

/* ShopService handler (abstract base class) */
struct _ShopServiceHandler
{
  GObject parent;
};
typedef struct _ShopServiceHandler ShopServiceHandler;

struct _ShopServiceHandlerClass
{
  GObjectClass parent;

  gboolean (*buy_coin_product) (ShopServiceIf *iface, const PaymentReservation * paymentReservation, TalkException ** e, GError **error);
  gboolean (*buy_free_product) (ShopServiceIf *iface, const gchar * receiverMid, const gchar * productId, const gint32 messageTemplate, const gchar * language, const gchar * country, const gint64 packageId, TalkException ** e, GError **error);
  gboolean (*buy_mustbuy_product) (ShopServiceIf *iface, const gchar * receiverMid, const gchar * productId, const gint32 messageTemplate, const gchar * language, const gchar * country, const gint64 packageId, const gchar * serialNumber, TalkException ** e, GError **error);
  gboolean (*check_can_receive_present) (ShopServiceIf *iface, const gchar * recipientMid, const gint64 packageId, const gchar * language, const gchar * country, TalkException ** e, GError **error);
  gboolean (*get_active_purchases) (ShopServiceIf *iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError **error);
  gboolean (*get_active_purchase_versions) (ShopServiceIf *iface, ProductSimpleList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError **error);
  gboolean (*get_coin_products) (ShopServiceIf *iface, GPtrArray ** _return, const PaymentType appStoreCode, const gchar * country, const gchar * language, TalkException ** e, GError **error);
  gboolean (*get_coin_products_by_pg_code) (ShopServiceIf *iface, GPtrArray ** _return, const PaymentType appStoreCode, const PaymentPgType pgCode, const gchar * country, const gchar * language, TalkException ** e, GError **error);
  gboolean (*get_coin_purchase_history) (ShopServiceIf *iface, CoinHistoryResult ** _return, const CoinHistoryCondition * request, TalkException ** e, GError **error);
  gboolean (*get_coin_use_and_refund_history) (ShopServiceIf *iface, CoinHistoryResult ** _return, const CoinHistoryCondition * request, TalkException ** e, GError **error);
  gboolean (*get_downloads) (ShopServiceIf *iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError **error);
  gboolean (*get_event_packages) (ShopServiceIf *iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError **error);
  gboolean (*get_newly_released_packages) (ShopServiceIf *iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError **error);
  gboolean (*get_popular_packages) (ShopServiceIf *iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError **error);
  gboolean (*get_presents_received) (ShopServiceIf *iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError **error);
  gboolean (*get_presents_sent) (ShopServiceIf *iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError **error);
  gboolean (*get_product) (ShopServiceIf *iface, Product ** _return, const gint64 packageID, const gchar * language, const gchar * country, TalkException ** e, GError **error);
  gboolean (*get_product_list) (ShopServiceIf *iface, ProductList ** _return, const GPtrArray * productIdList, const gchar * language, const gchar * country, TalkException ** e, GError **error);
  gboolean (*get_product_list_with_carrier) (ShopServiceIf *iface, ProductList ** _return, const GPtrArray * productIdList, const gchar * language, const gchar * country, const gchar * carrierCode, TalkException ** e, GError **error);
  gboolean (*get_product_with_carrier) (ShopServiceIf *iface, Product ** _return, const gint64 packageID, const gchar * language, const gchar * country, const gchar * carrierCode, TalkException ** e, GError **error);
  gboolean (*get_purchase_history) (ShopServiceIf *iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError **error);
  gboolean (*get_total_balance) (ShopServiceIf *iface, Coin ** _return, const PaymentType appStoreCode, TalkException ** e, GError **error);
  gboolean (*notify_downloaded) (ShopServiceIf *iface, gint64* _return, const gint64 packageId, const gchar * language, TalkException ** e, GError **error);
  gboolean (*reserve_coin_purchase) (ShopServiceIf *iface, PaymentReservationResult ** _return, const CoinPurchaseReservation * request, TalkException ** e, GError **error);
  gboolean (*reserve_payment) (ShopServiceIf *iface, PaymentReservationResult ** _return, const PaymentReservation * paymentReservation, TalkException ** e, GError **error);
};
typedef struct _ShopServiceHandlerClass ShopServiceHandlerClass;

GType shop_service_handler_get_type (void);
#define TYPE_SHOP_SERVICE_HANDLER (shop_service_handler_get_type())
#define SHOP_SERVICE_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SHOP_SERVICE_HANDLER, ShopServiceHandler))
#define IS_SHOP_SERVICE_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SHOP_SERVICE_HANDLER))
#define SHOP_SERVICE_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_SHOP_SERVICE_HANDLER, ShopServiceHandlerClass))
#define IS_SHOP_SERVICE_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SHOP_SERVICE_HANDLER))
#define SHOP_SERVICE_HANDLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SHOP_SERVICE_HANDLER, ShopServiceHandlerClass))

gboolean shop_service_handler_buy_coin_product (ShopServiceIf *iface, const PaymentReservation * paymentReservation, TalkException ** e, GError **error);
gboolean shop_service_handler_buy_free_product (ShopServiceIf *iface, const gchar * receiverMid, const gchar * productId, const gint32 messageTemplate, const gchar * language, const gchar * country, const gint64 packageId, TalkException ** e, GError **error);
gboolean shop_service_handler_buy_mustbuy_product (ShopServiceIf *iface, const gchar * receiverMid, const gchar * productId, const gint32 messageTemplate, const gchar * language, const gchar * country, const gint64 packageId, const gchar * serialNumber, TalkException ** e, GError **error);
gboolean shop_service_handler_check_can_receive_present (ShopServiceIf *iface, const gchar * recipientMid, const gint64 packageId, const gchar * language, const gchar * country, TalkException ** e, GError **error);
gboolean shop_service_handler_get_active_purchases (ShopServiceIf *iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError **error);
gboolean shop_service_handler_get_active_purchase_versions (ShopServiceIf *iface, ProductSimpleList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError **error);
gboolean shop_service_handler_get_coin_products (ShopServiceIf *iface, GPtrArray ** _return, const PaymentType appStoreCode, const gchar * country, const gchar * language, TalkException ** e, GError **error);
gboolean shop_service_handler_get_coin_products_by_pg_code (ShopServiceIf *iface, GPtrArray ** _return, const PaymentType appStoreCode, const PaymentPgType pgCode, const gchar * country, const gchar * language, TalkException ** e, GError **error);
gboolean shop_service_handler_get_coin_purchase_history (ShopServiceIf *iface, CoinHistoryResult ** _return, const CoinHistoryCondition * request, TalkException ** e, GError **error);
gboolean shop_service_handler_get_coin_use_and_refund_history (ShopServiceIf *iface, CoinHistoryResult ** _return, const CoinHistoryCondition * request, TalkException ** e, GError **error);
gboolean shop_service_handler_get_downloads (ShopServiceIf *iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError **error);
gboolean shop_service_handler_get_event_packages (ShopServiceIf *iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError **error);
gboolean shop_service_handler_get_newly_released_packages (ShopServiceIf *iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError **error);
gboolean shop_service_handler_get_popular_packages (ShopServiceIf *iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError **error);
gboolean shop_service_handler_get_presents_received (ShopServiceIf *iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError **error);
gboolean shop_service_handler_get_presents_sent (ShopServiceIf *iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError **error);
gboolean shop_service_handler_get_product (ShopServiceIf *iface, Product ** _return, const gint64 packageID, const gchar * language, const gchar * country, TalkException ** e, GError **error);
gboolean shop_service_handler_get_product_list (ShopServiceIf *iface, ProductList ** _return, const GPtrArray * productIdList, const gchar * language, const gchar * country, TalkException ** e, GError **error);
gboolean shop_service_handler_get_product_list_with_carrier (ShopServiceIf *iface, ProductList ** _return, const GPtrArray * productIdList, const gchar * language, const gchar * country, const gchar * carrierCode, TalkException ** e, GError **error);
gboolean shop_service_handler_get_product_with_carrier (ShopServiceIf *iface, Product ** _return, const gint64 packageID, const gchar * language, const gchar * country, const gchar * carrierCode, TalkException ** e, GError **error);
gboolean shop_service_handler_get_purchase_history (ShopServiceIf *iface, ProductList ** _return, const gint64 start, const gint32 size, const gchar * language, const gchar * country, TalkException ** e, GError **error);
gboolean shop_service_handler_get_total_balance (ShopServiceIf *iface, Coin ** _return, const PaymentType appStoreCode, TalkException ** e, GError **error);
gboolean shop_service_handler_notify_downloaded (ShopServiceIf *iface, gint64* _return, const gint64 packageId, const gchar * language, TalkException ** e, GError **error);
gboolean shop_service_handler_reserve_coin_purchase (ShopServiceIf *iface, PaymentReservationResult ** _return, const CoinPurchaseReservation * request, TalkException ** e, GError **error);
gboolean shop_service_handler_reserve_payment (ShopServiceIf *iface, PaymentReservationResult ** _return, const PaymentReservation * paymentReservation, TalkException ** e, GError **error);

/* ShopService processor */
struct _ShopServiceProcessor
{
  ThriftDispatchProcessor parent;

  /* protected */
  ShopServiceHandler *handler;
  GHashTable *process_map;
};
typedef struct _ShopServiceProcessor ShopServiceProcessor;

struct _ShopServiceProcessorClass
{
  ThriftDispatchProcessorClass parent;

  /* protected */
  gboolean (*dispatch_call) (ThriftDispatchProcessor *processor,
                             ThriftProtocol *in,
                             ThriftProtocol *out,
                             gchar *fname,
                             gint32 seqid,
                             GError **error);
};
typedef struct _ShopServiceProcessorClass ShopServiceProcessorClass;

GType shop_service_processor_get_type (void);
#define TYPE_SHOP_SERVICE_PROCESSOR (shop_service_processor_get_type())
#define SHOP_SERVICE_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SHOP_SERVICE_PROCESSOR, ShopServiceProcessor))
#define IS_SHOP_SERVICE_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SHOP_SERVICE_PROCESSOR))
#define SHOP_SERVICE_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_SHOP_SERVICE_PROCESSOR, ShopServiceProcessorClass))
#define IS_SHOP_SERVICE_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SHOP_SERVICE_PROCESSOR))
#define SHOP_SERVICE_PROCESSOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SHOP_SERVICE_PROCESSOR, ShopServiceProcessorClass))

#endif /* SHOP_SERVICE_H */
