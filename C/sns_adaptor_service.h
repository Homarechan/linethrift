/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SNS_ADAPTOR_SERVICE_H
#define SNS_ADAPTOR_SERVICE_H

#include <thrift/c_glib/processor/thrift_dispatch_processor.h>

#include "line_types.h"

/* SnsAdaptorService service interface */
typedef struct _SnsAdaptorServiceIf SnsAdaptorServiceIf;  /* dummy object */

struct _SnsAdaptorServiceIfInterface
{
  GTypeInterface parent;

  gboolean (*get_sns_friends) (SnsAdaptorServiceIf *iface, SnsFriends ** _return, const SnsIdType snsIdType, const gchar * snsAccessToken, const gint32 startIdx, const gint32 limit, TalkException ** e, GError **error);
  gboolean (*get_sns_my_profile) (SnsAdaptorServiceIf *iface, SnsProfile ** _return, const SnsIdType snsIdType, const gchar * snsAccessToken, TalkException ** e, GError **error);
  gboolean (*post_sns_invitation_message) (SnsAdaptorServiceIf *iface, const SnsIdType snsIdType, const gchar * snsAccessToken, const gchar * toSnsUserId, TalkException ** e, GError **error);
};
typedef struct _SnsAdaptorServiceIfInterface SnsAdaptorServiceIfInterface;

GType sns_adaptor_service_if_get_type (void);
#define TYPE_SNS_ADAPTOR_SERVICE_IF (sns_adaptor_service_if_get_type())
#define SNS_ADAPTOR_SERVICE_IF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SNS_ADAPTOR_SERVICE_IF, SnsAdaptorServiceIf))
#define IS_SNS_ADAPTOR_SERVICE_IF(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SNS_ADAPTOR_SERVICE_IF))
#define SNS_ADAPTOR_SERVICE_IF_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), TYPE_SNS_ADAPTOR_SERVICE_IF, SnsAdaptorServiceIfInterface))

gboolean sns_adaptor_service_if_get_sns_friends (SnsAdaptorServiceIf *iface, SnsFriends ** _return, const SnsIdType snsIdType, const gchar * snsAccessToken, const gint32 startIdx, const gint32 limit, TalkException ** e, GError **error);
gboolean sns_adaptor_service_if_get_sns_my_profile (SnsAdaptorServiceIf *iface, SnsProfile ** _return, const SnsIdType snsIdType, const gchar * snsAccessToken, TalkException ** e, GError **error);
gboolean sns_adaptor_service_if_post_sns_invitation_message (SnsAdaptorServiceIf *iface, const SnsIdType snsIdType, const gchar * snsAccessToken, const gchar * toSnsUserId, TalkException ** e, GError **error);

/* SnsAdaptorService service client */
struct _SnsAdaptorServiceClient
{
  GObject parent;

  ThriftProtocol *input_protocol;
  ThriftProtocol *output_protocol;
};
typedef struct _SnsAdaptorServiceClient SnsAdaptorServiceClient;

struct _SnsAdaptorServiceClientClass
{
  GObjectClass parent;
};
typedef struct _SnsAdaptorServiceClientClass SnsAdaptorServiceClientClass;

GType sns_adaptor_service_client_get_type (void);
#define TYPE_SNS_ADAPTOR_SERVICE_CLIENT (sns_adaptor_service_client_get_type())
#define SNS_ADAPTOR_SERVICE_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SNS_ADAPTOR_SERVICE_CLIENT, SnsAdaptorServiceClient))
#define SNS_ADAPTOR_SERVICE_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_SNS_ADAPTOR_SERVICE_CLIENT, SnsAdaptorServiceClientClass))
#define SNS_ADAPTOR_SERVICE_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SNS_ADAPTOR_SERVICE_CLIENT))
#define SNS_ADAPTOR_SERVICE_IS_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SNS_ADAPTOR_SERVICE_CLIENT))
#define SNS_ADAPTOR_SERVICE_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SNS_ADAPTOR_SERVICE_CLIENT, SnsAdaptorServiceClientClass))

gboolean sns_adaptor_service_client_get_sns_friends (SnsAdaptorServiceIf * iface, SnsFriends ** _return, const SnsIdType snsIdType, const gchar * snsAccessToken, const gint32 startIdx, const gint32 limit, TalkException ** e, GError ** error);
gboolean sns_adaptor_service_client_send_get_sns_friends (SnsAdaptorServiceIf * iface, const SnsIdType snsIdType, const gchar * snsAccessToken, const gint32 startIdx, const gint32 limit, GError ** error);
gboolean sns_adaptor_service_client_recv_get_sns_friends (SnsAdaptorServiceIf * iface, SnsFriends ** _return, TalkException ** e, GError ** error);
gboolean sns_adaptor_service_client_get_sns_my_profile (SnsAdaptorServiceIf * iface, SnsProfile ** _return, const SnsIdType snsIdType, const gchar * snsAccessToken, TalkException ** e, GError ** error);
gboolean sns_adaptor_service_client_send_get_sns_my_profile (SnsAdaptorServiceIf * iface, const SnsIdType snsIdType, const gchar * snsAccessToken, GError ** error);
gboolean sns_adaptor_service_client_recv_get_sns_my_profile (SnsAdaptorServiceIf * iface, SnsProfile ** _return, TalkException ** e, GError ** error);
gboolean sns_adaptor_service_client_post_sns_invitation_message (SnsAdaptorServiceIf * iface, const SnsIdType snsIdType, const gchar * snsAccessToken, const gchar * toSnsUserId, TalkException ** e, GError ** error);
gboolean sns_adaptor_service_client_send_post_sns_invitation_message (SnsAdaptorServiceIf * iface, const SnsIdType snsIdType, const gchar * snsAccessToken, const gchar * toSnsUserId, GError ** error);
gboolean sns_adaptor_service_client_recv_post_sns_invitation_message (SnsAdaptorServiceIf * iface, TalkException ** e, GError ** error);
void sns_adaptor_service_client_set_property (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);
void sns_adaptor_service_client_get_property (GObject *object, guint property_id, GValue *value, GParamSpec *pspec);

/* SnsAdaptorService handler (abstract base class) */
struct _SnsAdaptorServiceHandler
{
  GObject parent;
};
typedef struct _SnsAdaptorServiceHandler SnsAdaptorServiceHandler;

struct _SnsAdaptorServiceHandlerClass
{
  GObjectClass parent;

  gboolean (*get_sns_friends) (SnsAdaptorServiceIf *iface, SnsFriends ** _return, const SnsIdType snsIdType, const gchar * snsAccessToken, const gint32 startIdx, const gint32 limit, TalkException ** e, GError **error);
  gboolean (*get_sns_my_profile) (SnsAdaptorServiceIf *iface, SnsProfile ** _return, const SnsIdType snsIdType, const gchar * snsAccessToken, TalkException ** e, GError **error);
  gboolean (*post_sns_invitation_message) (SnsAdaptorServiceIf *iface, const SnsIdType snsIdType, const gchar * snsAccessToken, const gchar * toSnsUserId, TalkException ** e, GError **error);
};
typedef struct _SnsAdaptorServiceHandlerClass SnsAdaptorServiceHandlerClass;

GType sns_adaptor_service_handler_get_type (void);
#define TYPE_SNS_ADAPTOR_SERVICE_HANDLER (sns_adaptor_service_handler_get_type())
#define SNS_ADAPTOR_SERVICE_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SNS_ADAPTOR_SERVICE_HANDLER, SnsAdaptorServiceHandler))
#define IS_SNS_ADAPTOR_SERVICE_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SNS_ADAPTOR_SERVICE_HANDLER))
#define SNS_ADAPTOR_SERVICE_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_SNS_ADAPTOR_SERVICE_HANDLER, SnsAdaptorServiceHandlerClass))
#define IS_SNS_ADAPTOR_SERVICE_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SNS_ADAPTOR_SERVICE_HANDLER))
#define SNS_ADAPTOR_SERVICE_HANDLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SNS_ADAPTOR_SERVICE_HANDLER, SnsAdaptorServiceHandlerClass))

gboolean sns_adaptor_service_handler_get_sns_friends (SnsAdaptorServiceIf *iface, SnsFriends ** _return, const SnsIdType snsIdType, const gchar * snsAccessToken, const gint32 startIdx, const gint32 limit, TalkException ** e, GError **error);
gboolean sns_adaptor_service_handler_get_sns_my_profile (SnsAdaptorServiceIf *iface, SnsProfile ** _return, const SnsIdType snsIdType, const gchar * snsAccessToken, TalkException ** e, GError **error);
gboolean sns_adaptor_service_handler_post_sns_invitation_message (SnsAdaptorServiceIf *iface, const SnsIdType snsIdType, const gchar * snsAccessToken, const gchar * toSnsUserId, TalkException ** e, GError **error);

/* SnsAdaptorService processor */
struct _SnsAdaptorServiceProcessor
{
  ThriftDispatchProcessor parent;

  /* protected */
  SnsAdaptorServiceHandler *handler;
  GHashTable *process_map;
};
typedef struct _SnsAdaptorServiceProcessor SnsAdaptorServiceProcessor;

struct _SnsAdaptorServiceProcessorClass
{
  ThriftDispatchProcessorClass parent;

  /* protected */
  gboolean (*dispatch_call) (ThriftDispatchProcessor *processor,
                             ThriftProtocol *in,
                             ThriftProtocol *out,
                             gchar *fname,
                             gint32 seqid,
                             GError **error);
};
typedef struct _SnsAdaptorServiceProcessorClass SnsAdaptorServiceProcessorClass;

GType sns_adaptor_service_processor_get_type (void);
#define TYPE_SNS_ADAPTOR_SERVICE_PROCESSOR (sns_adaptor_service_processor_get_type())
#define SNS_ADAPTOR_SERVICE_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SNS_ADAPTOR_SERVICE_PROCESSOR, SnsAdaptorServiceProcessor))
#define IS_SNS_ADAPTOR_SERVICE_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SNS_ADAPTOR_SERVICE_PROCESSOR))
#define SNS_ADAPTOR_SERVICE_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_SNS_ADAPTOR_SERVICE_PROCESSOR, SnsAdaptorServiceProcessorClass))
#define IS_SNS_ADAPTOR_SERVICE_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SNS_ADAPTOR_SERVICE_PROCESSOR))
#define SNS_ADAPTOR_SERVICE_PROCESSOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SNS_ADAPTOR_SERVICE_PROCESSOR, SnsAdaptorServiceProcessorClass))

#endif /* SNS_ADAPTOR_SERVICE_H */
