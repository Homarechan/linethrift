/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MESSAGE_SERVICE_H
#define MESSAGE_SERVICE_H

#include <thrift/c_glib/processor/thrift_dispatch_processor.h>

#include "line_types.h"

/* MessageService service interface */
typedef struct _MessageServiceIf MessageServiceIf;  /* dummy object */

struct _MessageServiceIfInterface
{
  GTypeInterface parent;

  gboolean (*fetch_message_operations) (MessageServiceIf *iface, MessageOperations ** _return, const gint64 localRevision, const gint64 lastOpTimestamp, const gint32 count, TalkException ** e, GError **error);
  gboolean (*get_last_read_message_ids) (MessageServiceIf *iface, LastReadMessageIds ** _return, const gchar * chatId, TalkException ** e, GError **error);
  gboolean (*multi_get_last_read_message_ids) (MessageServiceIf *iface, GPtrArray ** _return, const GPtrArray * chatIds, TalkException ** e, GError **error);
};
typedef struct _MessageServiceIfInterface MessageServiceIfInterface;

GType message_service_if_get_type (void);
#define TYPE_MESSAGE_SERVICE_IF (message_service_if_get_type())
#define MESSAGE_SERVICE_IF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MESSAGE_SERVICE_IF, MessageServiceIf))
#define IS_MESSAGE_SERVICE_IF(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MESSAGE_SERVICE_IF))
#define MESSAGE_SERVICE_IF_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), TYPE_MESSAGE_SERVICE_IF, MessageServiceIfInterface))

gboolean message_service_if_fetch_message_operations (MessageServiceIf *iface, MessageOperations ** _return, const gint64 localRevision, const gint64 lastOpTimestamp, const gint32 count, TalkException ** e, GError **error);
gboolean message_service_if_get_last_read_message_ids (MessageServiceIf *iface, LastReadMessageIds ** _return, const gchar * chatId, TalkException ** e, GError **error);
gboolean message_service_if_multi_get_last_read_message_ids (MessageServiceIf *iface, GPtrArray ** _return, const GPtrArray * chatIds, TalkException ** e, GError **error);

/* MessageService service client */
struct _MessageServiceClient
{
  GObject parent;

  ThriftProtocol *input_protocol;
  ThriftProtocol *output_protocol;
};
typedef struct _MessageServiceClient MessageServiceClient;

struct _MessageServiceClientClass
{
  GObjectClass parent;
};
typedef struct _MessageServiceClientClass MessageServiceClientClass;

GType message_service_client_get_type (void);
#define TYPE_MESSAGE_SERVICE_CLIENT (message_service_client_get_type())
#define MESSAGE_SERVICE_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MESSAGE_SERVICE_CLIENT, MessageServiceClient))
#define MESSAGE_SERVICE_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_MESSAGE_SERVICE_CLIENT, MessageServiceClientClass))
#define MESSAGE_SERVICE_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MESSAGE_SERVICE_CLIENT))
#define MESSAGE_SERVICE_IS_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_MESSAGE_SERVICE_CLIENT))
#define MESSAGE_SERVICE_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MESSAGE_SERVICE_CLIENT, MessageServiceClientClass))

gboolean message_service_client_fetch_message_operations (MessageServiceIf * iface, MessageOperations ** _return, const gint64 localRevision, const gint64 lastOpTimestamp, const gint32 count, TalkException ** e, GError ** error);
gboolean message_service_client_send_fetch_message_operations (MessageServiceIf * iface, const gint64 localRevision, const gint64 lastOpTimestamp, const gint32 count, GError ** error);
gboolean message_service_client_recv_fetch_message_operations (MessageServiceIf * iface, MessageOperations ** _return, TalkException ** e, GError ** error);
gboolean message_service_client_get_last_read_message_ids (MessageServiceIf * iface, LastReadMessageIds ** _return, const gchar * chatId, TalkException ** e, GError ** error);
gboolean message_service_client_send_get_last_read_message_ids (MessageServiceIf * iface, const gchar * chatId, GError ** error);
gboolean message_service_client_recv_get_last_read_message_ids (MessageServiceIf * iface, LastReadMessageIds ** _return, TalkException ** e, GError ** error);
gboolean message_service_client_multi_get_last_read_message_ids (MessageServiceIf * iface, GPtrArray ** _return, const GPtrArray * chatIds, TalkException ** e, GError ** error);
gboolean message_service_client_send_multi_get_last_read_message_ids (MessageServiceIf * iface, const GPtrArray * chatIds, GError ** error);
gboolean message_service_client_recv_multi_get_last_read_message_ids (MessageServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
void message_service_client_set_property (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);
void message_service_client_get_property (GObject *object, guint property_id, GValue *value, GParamSpec *pspec);

/* MessageService handler (abstract base class) */
struct _MessageServiceHandler
{
  GObject parent;
};
typedef struct _MessageServiceHandler MessageServiceHandler;

struct _MessageServiceHandlerClass
{
  GObjectClass parent;

  gboolean (*fetch_message_operations) (MessageServiceIf *iface, MessageOperations ** _return, const gint64 localRevision, const gint64 lastOpTimestamp, const gint32 count, TalkException ** e, GError **error);
  gboolean (*get_last_read_message_ids) (MessageServiceIf *iface, LastReadMessageIds ** _return, const gchar * chatId, TalkException ** e, GError **error);
  gboolean (*multi_get_last_read_message_ids) (MessageServiceIf *iface, GPtrArray ** _return, const GPtrArray * chatIds, TalkException ** e, GError **error);
};
typedef struct _MessageServiceHandlerClass MessageServiceHandlerClass;

GType message_service_handler_get_type (void);
#define TYPE_MESSAGE_SERVICE_HANDLER (message_service_handler_get_type())
#define MESSAGE_SERVICE_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MESSAGE_SERVICE_HANDLER, MessageServiceHandler))
#define IS_MESSAGE_SERVICE_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MESSAGE_SERVICE_HANDLER))
#define MESSAGE_SERVICE_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_MESSAGE_SERVICE_HANDLER, MessageServiceHandlerClass))
#define IS_MESSAGE_SERVICE_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_MESSAGE_SERVICE_HANDLER))
#define MESSAGE_SERVICE_HANDLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MESSAGE_SERVICE_HANDLER, MessageServiceHandlerClass))

gboolean message_service_handler_fetch_message_operations (MessageServiceIf *iface, MessageOperations ** _return, const gint64 localRevision, const gint64 lastOpTimestamp, const gint32 count, TalkException ** e, GError **error);
gboolean message_service_handler_get_last_read_message_ids (MessageServiceIf *iface, LastReadMessageIds ** _return, const gchar * chatId, TalkException ** e, GError **error);
gboolean message_service_handler_multi_get_last_read_message_ids (MessageServiceIf *iface, GPtrArray ** _return, const GPtrArray * chatIds, TalkException ** e, GError **error);

/* MessageService processor */
struct _MessageServiceProcessor
{
  ThriftDispatchProcessor parent;

  /* protected */
  MessageServiceHandler *handler;
  GHashTable *process_map;
};
typedef struct _MessageServiceProcessor MessageServiceProcessor;

struct _MessageServiceProcessorClass
{
  ThriftDispatchProcessorClass parent;

  /* protected */
  gboolean (*dispatch_call) (ThriftDispatchProcessor *processor,
                             ThriftProtocol *in,
                             ThriftProtocol *out,
                             gchar *fname,
                             gint32 seqid,
                             GError **error);
};
typedef struct _MessageServiceProcessorClass MessageServiceProcessorClass;

GType message_service_processor_get_type (void);
#define TYPE_MESSAGE_SERVICE_PROCESSOR (message_service_processor_get_type())
#define MESSAGE_SERVICE_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MESSAGE_SERVICE_PROCESSOR, MessageServiceProcessor))
#define IS_MESSAGE_SERVICE_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MESSAGE_SERVICE_PROCESSOR))
#define MESSAGE_SERVICE_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_MESSAGE_SERVICE_PROCESSOR, MessageServiceProcessorClass))
#define IS_MESSAGE_SERVICE_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_MESSAGE_SERVICE_PROCESSOR))
#define MESSAGE_SERVICE_PROCESSOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MESSAGE_SERVICE_PROCESSOR, MessageServiceProcessorClass))

#endif /* MESSAGE_SERVICE_H */
