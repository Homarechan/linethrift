/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TALK_SERVICE_H
#define TALK_SERVICE_H

#include <thrift/c_glib/processor/thrift_dispatch_processor.h>

#include "line_types.h"

/* TalkService service interface */
typedef struct _TalkServiceIf TalkServiceIf;  /* dummy object */

struct _TalkServiceIfInterface
{
  GTypeInterface parent;

  gboolean (*get_chat_room_announcements_bulk) (TalkServiceIf *iface, GHashTable ** _return, const GPtrArray * chatRoomMids, TalkException ** e, GError **error);
  gboolean (*get_chat_room_announcements) (TalkServiceIf *iface, GPtrArray ** _return, const gchar * chatRoomMid, TalkException ** e, GError **error);
  gboolean (*create_chat_room_announcement) (TalkServiceIf *iface, ChatRoomAnnouncement ** _return, const gint32 reqSeq, const gchar * chatRoomMid, const ChatRoomAnnouncementType type, const ChatRoomAnnouncementContents * contents, TalkException ** e, GError **error);
  gboolean (*remove_chat_room_announcement) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * chatRoomMid, const gint64 announcementSeq, TalkException ** e, GError **error);
  gboolean (*unsend_message) (TalkServiceIf *iface, const gint32 seq, const gchar * messageId, TalkException ** e, GError **error);
  gboolean (*get_group_without_members) (TalkServiceIf *iface, Group ** _return, const gchar * groupId, TalkException ** e, GError **error);
  gboolean (*request_resend_message) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * senderMid, const gchar * messageId, TalkException ** e, GError **error);
  gboolean (*respond_resend_message) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * receiverMid, const gchar * originalMessageId, const Message * resendMessage, const ErrorCode errorCode, TalkException ** e, GError **error);
  gboolean (*accept_group_invitation) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * groupId, TalkException ** e, GError **error);
  gboolean (*accept_group_invitation_by_ticket) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * GroupMid, const gchar * ticketId, TalkException ** e, GError **error);
  gboolean (*accept_proximity_matches) (TalkServiceIf *iface, const gchar * sessionId, const GHashTable * ids, TalkException ** e, GError **error);
  gboolean (*acquire_call_route) (TalkServiceIf *iface, GPtrArray ** _return, const gchar * to, TalkException ** e, GError **error);
  gboolean (*acquire_call_ticket) (TalkServiceIf *iface, gchar ** _return, const gchar * to, TalkException ** e, GError **error);
  gboolean (*acquire_encrypted_access_token) (TalkServiceIf *iface, gchar ** _return, const FeatureType featureType, TalkException ** e, GError **error);
  gboolean (*add_sns_id) (TalkServiceIf *iface, gchar ** _return, const SnsIdType snsIdType, const gchar * snsAccessToken, TalkException ** e, GError **error);
  gboolean (*block_contact) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * id, TalkException ** e, GError **error);
  gboolean (*block_recommendation) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * id, TalkException ** e, GError **error);
  gboolean (*cancel_group_invitation) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * groupId, const GPtrArray * contactIds, TalkException ** e, GError **error);
  gboolean (*change_verification_method) (TalkServiceIf *iface, VerificationSessionData ** _return, const gchar * sessionId, const VerificationMethod method, TalkException ** e, GError **error);
  gboolean (*clear_identity_credential) (TalkServiceIf *iface, TalkException ** e, GError **error);
  gboolean (*clear_message_box) (TalkServiceIf *iface, const gchar * channelId, const gchar * messageBoxId, TalkException ** e, GError **error);
  gboolean (*close_proximity_match) (TalkServiceIf *iface, const gchar * sessionId, TalkException ** e, GError **error);
  gboolean (*commit_send_message) (TalkServiceIf *iface, GHashTable ** _return, const gint32 seq, const gchar * messageId, const GPtrArray * receiverMids, TalkException ** e, GError **error);
  gboolean (*commit_send_messages) (TalkServiceIf *iface, GHashTable ** _return, const gint32 seq, const GPtrArray * messageIds, const GPtrArray * receiverMids, TalkException ** e, GError **error);
  gboolean (*commit_update_profile) (TalkServiceIf *iface, GHashTable ** _return, const gint32 seq, const GArray * attrs, const GPtrArray * receiverMids, TalkException ** e, GError **error);
  gboolean (*confirm_email) (TalkServiceIf *iface, const gchar * verifier, const gchar * pinCode, TalkException ** e, GError **error);
  gboolean (*create_group) (TalkServiceIf *iface, Group ** _return, const gint32 seq, const gchar * name, const GPtrArray * contactIds, TalkException ** e, GError **error);
  gboolean (*create_qrcode_base64_image) (TalkServiceIf *iface, gchar ** _return, const gchar * url, const gchar * characterSet, const gint32 imageSize, const gint32 x, const gint32 y, const gint32 width, const gint32 height, TalkException ** e, GError **error);
  gboolean (*create_room) (TalkServiceIf *iface, Room ** _return, const gint32 reqSeq, const GPtrArray * contactIds, TalkException ** e, GError **error);
  gboolean (*create_session) (TalkServiceIf *iface, gchar ** _return, TalkException ** e, GError **error);
  gboolean (*fetch_announcements) (TalkServiceIf *iface, GPtrArray ** _return, const gint32 lastFetchedIndex, TalkException ** e, GError **error);
  gboolean (*fetch_messages) (TalkServiceIf *iface, GPtrArray ** _return, const gint64 localTs, const gint32 count, TalkException ** e, GError **error);
  gboolean (*fetch_operations) (TalkServiceIf *iface, GPtrArray ** _return, const gint64 localRev, const gint32 count, ShouldSyncException ** e, GError **error);
  gboolean (*fetch_ops) (TalkServiceIf *iface, GPtrArray ** _return, const gint64 localRev, const gint32 count, const gint64 globalRev, const gint64 individualRev, ShouldSyncException ** e, GError **error);
  gboolean (*find_and_add_contacts_by_email) (TalkServiceIf *iface, GHashTable ** _return, const gint32 reqSeq, const GHashTable * emails, TalkException ** e, GError **error);
  gboolean (*find_and_add_contacts_by_mid) (TalkServiceIf *iface, GHashTable ** _return, const gint32 reqSeq, const gchar * mid, const ContactType type, const gchar * reference, TalkException ** e, GError **error);
  gboolean (*find_group_by_ticket_v2) (TalkServiceIf *iface, Group ** _return, const gchar * ticketId, TalkException ** e, GError **error);
  gboolean (*find_and_add_contacts_by_phone) (TalkServiceIf *iface, GHashTable ** _return, const gint32 reqSeq, const GHashTable * phones, TalkException ** e, GError **error);
  gboolean (*get_friend_requests) (TalkServiceIf *iface, GPtrArray ** _return, const FriendRequestDirection direction, const gint64 lastSeenSeqId, TalkException ** e, GError **error);
  gboolean (*remove_friend_request) (TalkServiceIf *iface, const FriendRequestDirection direction, const gchar * midOrEMid, TalkException ** e, GError **error);
  gboolean (*find_and_add_contacts_by_userid) (TalkServiceIf *iface, GHashTable ** _return, const gint32 reqSeq, const gchar * userid, TalkException ** e, GError **error);
  gboolean (*find_contact_by_userid) (TalkServiceIf *iface, Contact ** _return, const gchar * userid, TalkException ** e, GError **error);
  gboolean (*find_contact_by_user_ticket) (TalkServiceIf *iface, Contact ** _return, const gchar * ticketIdWithTag, TalkException ** e, GError **error);
  gboolean (*find_contacts_by_email) (TalkServiceIf *iface, GHashTable ** _return, const GHashTable * emails, TalkException ** e, GError **error);
  gboolean (*find_contacts_by_phone) (TalkServiceIf *iface, GHashTable ** _return, const GHashTable * phones, TalkException ** e, GError **error);
  gboolean (*find_sns_id_user_status) (TalkServiceIf *iface, SnsIdUserStatus ** _return, const SnsIdType snsIdType, const gchar * snsAccessToken, const gchar * udidHash, TalkException ** e, GError **error);
  gboolean (*finish_update_verification) (TalkServiceIf *iface, const gchar * sessionId, TalkException ** e, GError **error);
  gboolean (*generate_user_ticket) (TalkServiceIf *iface, Ticket ** _return, const gint64 expirationTime, const gint32 maxUseCount, TalkException ** e, GError **error);
  gboolean (*destroy_message) (TalkServiceIf *iface, const gint32 seq, const gchar * chatId, const gchar * messageId, const gint8 sessionId, TalkException ** e, GError **error);
  gboolean (*get_accepted_proximity_matches) (TalkServiceIf *iface, GHashTable ** _return, const gchar * sessionId, TalkException ** e, GError **error);
  gboolean (*get_active_buddy_subscriber_ids) (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_all_contact_ids) (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_auth_qrcode) (TalkServiceIf *iface, AuthQrcode ** _return, const gboolean keepLoggedIn, const gchar * systemName, TalkException ** e, GError **error);
  gboolean (*get_blocked_contact_ids) (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*register_with_phone_number) (TalkServiceIf *iface, RegisterWithPhoneNumberResult ** _return, const gchar * sessionId, const gchar * migrationPincodeSessionId, TalkException ** e, GError **error);
  gboolean (*register_with_phone_number_and_password) (TalkServiceIf *iface, RegisterWithPhoneNumberResult ** _return, const gchar * sessionId, const gchar * keynm, const gchar * encrypted, TalkException ** e, GError **error);
  gboolean (*get_analytics_info) (TalkServiceIf *iface, AnalyticsInfo ** _return, TalkException ** e, GError **error);
  gboolean (*report_client_statistics) (TalkServiceIf *iface, const gint32 reqSeq, const ReportCategory category, const gint32 count, TalkException ** e, GError **error);
  gboolean (*verify_phone_number_for_login) (TalkServiceIf *iface, gchar ** _return, const gchar * verifierFromPhone, const gchar * pinCodeForPhone, const gchar * verifierFromLogin, TalkException ** e, GError **error);
  gboolean (*verify_phone_number) (TalkServiceIf *iface, PhoneVerificationResult ** _return, const gchar * sessionId, const gchar * pinCode, const gchar * udidHash, const gchar * migrationPincodeSessionId, const gchar * oldUdidHash, TalkException ** e, GError **error);
  gboolean (*get_blocked_contact_ids_by_range) (TalkServiceIf *iface, GPtrArray ** _return, const gint32 start, const gint32 count, TalkException ** e, GError **error);
  gboolean (*get_blocked_recommendation_ids) (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_buddy_blocker_ids) (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_buddy_location) (TalkServiceIf *iface, Geolocation ** _return, const gchar * mid, const gint32 index, TalkException ** e, GError **error);
  gboolean (*get_compact_contacts_modified_since) (TalkServiceIf *iface, GPtrArray ** _return, const gint64 timestamp, TalkException ** e, GError **error);
  gboolean (*get_compact_group) (TalkServiceIf *iface, Group ** _return, const gchar * groupId, TalkException ** e, GError **error);
  gboolean (*get_compact_room) (TalkServiceIf *iface, Room ** _return, const gchar * roomId, TalkException ** e, GError **error);
  gboolean (*get_contact) (TalkServiceIf *iface, Contact ** _return, const gchar * id, TalkException ** e, GError **error);
  gboolean (*get_contacts) (TalkServiceIf *iface, GPtrArray ** _return, const GPtrArray * ids, TalkException ** e, GError **error);
  gboolean (*get_contact_with_friend_request_status) (TalkServiceIf *iface, Contact ** _return, const gchar * id, TalkException ** e, GError **error);
  gboolean (*get_country_with_request_ip) (TalkServiceIf *iface, gchar ** _return, TalkException ** e, GError **error);
  gboolean (*get_favorite_mids) (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_group) (TalkServiceIf *iface, Group ** _return, const gchar * groupId, TalkException ** e, GError **error);
  gboolean (*get_group_ids_invited) (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_group_ids_joined) (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_groups) (TalkServiceIf *iface, GPtrArray ** _return, const GPtrArray * groupIds, TalkException ** e, GError **error);
  gboolean (*get_hidden_contact_mids) (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_identity_identifier) (TalkServiceIf *iface, gchar ** _return, TalkException ** e, GError **error);
  gboolean (*get_last_announcement_index) (TalkServiceIf *iface, gint32* _return, TalkException ** e, GError **error);
  gboolean (*get_last_op_revision) (TalkServiceIf *iface, gint64* _return, TalkException ** e, GError **error);
  gboolean (*get_suggest_revisions) (TalkServiceIf *iface, SuggestDictionaryRevisions ** _return, TalkException ** e, GError **error);
  gboolean (*get_previous_messages_v2_with_read_count) (TalkServiceIf *iface, GPtrArray ** _return, const gchar * messageBoxId, const MessageBoxV2MessageId * endMessageId, const gint32 messagesCount, TalkException ** e, GError **error);
  gboolean (*get_message_box) (TalkServiceIf *iface, TMessageBox ** _return, const gchar * channelId, const gchar * messageBoxId, const gint32 lastMessagesCount, TalkException ** e, GError **error);
  gboolean (*get_message_box_compact_wrap_up) (TalkServiceIf *iface, TMessageBoxWrapUp ** _return, const gchar * mid, TalkException ** e, GError **error);
  gboolean (*get_message_box_compact_wrap_up_list) (TalkServiceIf *iface, TMessageBoxWrapUpResponse ** _return, const gint32 start, const gint32 messageBoxCount, TalkException ** e, GError **error);
  gboolean (*get_message_box_list) (TalkServiceIf *iface, GPtrArray ** _return, const gchar * channelId, const gint32 lastMessagesCount, TalkException ** e, GError **error);
  gboolean (*get_message_box_list_by_status) (TalkServiceIf *iface, GPtrArray ** _return, const gchar * channelId, const gint32 lastMessagesCount, const gint32 status, TalkException ** e, GError **error);
  gboolean (*get_message_box_wrap_up) (TalkServiceIf *iface, TMessageBoxWrapUp ** _return, const gchar * mid, TalkException ** e, GError **error);
  gboolean (*get_message_box_wrap_up_list) (TalkServiceIf *iface, TMessageBoxWrapUpResponse ** _return, const gint32 start, const gint32 messageBoxCount, TalkException ** e, GError **error);
  gboolean (*get_messages_by_sequence_number) (TalkServiceIf *iface, GPtrArray ** _return, const gchar * channelId, const gchar * messageBoxId, const gint64 startSeq, const gint64 endSeq, TalkException ** e, GError **error);
  gboolean (*get_next_messages) (TalkServiceIf *iface, GPtrArray ** _return, const gchar * messageBoxId, const gint64 startSeq, const gint32 messagesCount, TalkException ** e, GError **error);
  gboolean (*get_notification_policy) (TalkServiceIf *iface, GArray ** _return, const CarrierCode carrier, TalkException ** e, GError **error);
  gboolean (*get_previous_messages) (TalkServiceIf *iface, GPtrArray ** _return, const gchar * messageBoxId, const gint64 endSeq, const gint32 messagesCount, TalkException ** e, GError **error);
  gboolean (*get_profile) (TalkServiceIf *iface, Profile ** _return, TalkException ** e, GError **error);
  gboolean (*get_proximity_match_candidate_list) (TalkServiceIf *iface, ProximityMatchCandidateResult ** _return, const gchar * sessionId, TalkException ** e, GError **error);
  gboolean (*get_proximity_match_candidates) (TalkServiceIf *iface, GHashTable ** _return, const gchar * sessionId, TalkException ** e, GError **error);
  gboolean (*get_recent_messages) (TalkServiceIf *iface, GPtrArray ** _return, const gchar * messageBoxId, const gint32 messagesCount, TalkException ** e, GError **error);
  gboolean (*get_recommendation_ids) (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_room) (TalkServiceIf *iface, Room ** _return, const gchar * roomId, TalkException ** e, GError **error);
  gboolean (*get_r_s_a_key_info) (TalkServiceIf *iface, RSAKey ** _return, const IdentityProvider provider, TalkException ** e, GError **error);
  gboolean (*get_server_time) (TalkServiceIf *iface, gint64* _return, TalkException ** e, GError **error);
  gboolean (*get_sessions) (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_settings) (TalkServiceIf *iface, Settings ** _return, TalkException ** e, GError **error);
  gboolean (*get_groups_v2) (TalkServiceIf *iface, GPtrArray ** _return, const GPtrArray * groupIds, TalkException ** e, GError **error);
  gboolean (*get_settings_attributes) (TalkServiceIf *iface, Settings ** _return, const gint32 attrBitset, TalkException ** e, GError **error);
  gboolean (*get_system_configuration) (TalkServiceIf *iface, SystemConfiguration ** _return, TalkException ** e, GError **error);
  gboolean (*get_user_ticket) (TalkServiceIf *iface, Ticket ** _return, TalkException ** e, GError **error);
  gboolean (*get_wap_invitation) (TalkServiceIf *iface, WapInvitation ** _return, const gchar * invitationHash, TalkException ** e, GError **error);
  gboolean (*invalidate_user_ticket) (TalkServiceIf *iface, TalkException ** e, GError **error);
  gboolean (*invite_friends_by_sms) (TalkServiceIf *iface, const GPtrArray * phoneNumberList, TalkException ** e, GError **error);
  gboolean (*invite_into_group) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * groupId, const GPtrArray * contactIds, TalkException ** e, GError **error);
  gboolean (*invite_into_room) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * roomId, const GPtrArray * contactIds, TalkException ** e, GError **error);
  gboolean (*invite_via_email) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * email, const gchar * name, TalkException ** e, GError **error);
  gboolean (*is_identity_identifier_available) (TalkServiceIf *iface, gboolean* _return, const IdentityProvider provider, const gchar * identifier, TalkException ** e, GError **error);
  gboolean (*is_userid_available) (TalkServiceIf *iface, gboolean* _return, const gchar * userid, TalkException ** e, GError **error);
  gboolean (*kickout_from_group) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * groupId, const GPtrArray * contactIds, TalkException ** e, GError **error);
  gboolean (*reissue_group_ticket) (TalkServiceIf *iface, gchar ** _return, const gchar * groupMid, TalkException ** e, GError **error);
  gboolean (*find_group_by_ticket) (TalkServiceIf *iface, Group ** _return, const gchar * ticketId, TalkException ** e, GError **error);
  gboolean (*leave_group) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * groupId, TalkException ** e, GError **error);
  gboolean (*leave_room) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * roomId, TalkException ** e, GError **error);
  gboolean (*login_with_identity_credential) (TalkServiceIf *iface, gchar ** _return, const IdentityProvider identityProvider, const gchar * identifier, const gchar * password, const gboolean keepLoggedIn, const gchar * accessLocation, const gchar * systemName, const gchar * certificate, TalkException ** e, GError **error);
  gboolean (*login_with_identity_credential_for_certificate) (TalkServiceIf *iface, LoginResult ** _return, const IdentityProvider identityProvider, const gchar * identifier, const gchar * password, const gboolean keepLoggedIn, const gchar * accessLocation, const gchar * systemName, const gchar * certificate, TalkException ** e, GError **error);
  gboolean (*login_with_verifier) (TalkServiceIf *iface, gchar ** _return, const gchar * verifier, TalkException ** e, GError **error);
  gboolean (*login_with_verifier_for_cerificate) (TalkServiceIf *iface, LoginResult ** _return, const gchar * verifier, TalkException ** e, GError **error);
  gboolean (*login_with_verifier_for_certificate) (TalkServiceIf *iface, LoginResult ** _return, const gchar * verifier, TalkException ** e, GError **error);
  gboolean (*logout) (TalkServiceIf *iface, TalkException ** e, GError **error);
  gboolean (*logout_session) (TalkServiceIf *iface, const gchar * tokenKey, TalkException ** e, GError **error);
  gboolean (*noop) (TalkServiceIf *iface, TalkException ** e, GError **error);
  gboolean (*notified_redirect) (TalkServiceIf *iface, const GHashTable * paramMap, TalkException ** e, GError **error);
  gboolean (*notify_buddy_on_air) (TalkServiceIf *iface, GHashTable ** _return, const gint32 seq, const GPtrArray * receiverMids, TalkException ** e, GError **error);
  gboolean (*notify_individual_event) (TalkServiceIf *iface, const NotificationStatus notificationStatus, const GPtrArray * receiverMids, TalkException ** e, GError **error);
  gboolean (*notify_installed) (TalkServiceIf *iface, const gchar * udidHash, const gchar * applicationTypeWithExtensions, TalkException ** e, GError **error);
  gboolean (*notify_registration_complete) (TalkServiceIf *iface, const gchar * udidHash, const gchar * applicationTypeWithExtensions, TalkException ** e, GError **error);
  gboolean (*notify_sleep) (TalkServiceIf *iface, const gint64 lastRev, const gint32 badge, TalkException ** e, GError **error);
  gboolean (*notify_updated) (TalkServiceIf *iface, const gint64 lastRev, const DeviceInfo * deviceInfo, TalkException ** e, GError **error);
  gboolean (*open_proximity_match) (TalkServiceIf *iface, gchar ** _return, const Location * location, TalkException ** e, GError **error);
  gboolean (*register_buddy_user) (TalkServiceIf *iface, gchar ** _return, const gchar * buddyId, const gchar * registrarPassword, TalkException ** e, GError **error);
  gboolean (*register_buddy_userid) (TalkServiceIf *iface, const gint32 seq, const gchar * userid, TalkException ** e, GError **error);
  gboolean (*register_device) (TalkServiceIf *iface, gchar ** _return, const gchar * sessionId, TalkException ** e, GError **error);
  gboolean (*register_device_with_identity_credential) (TalkServiceIf *iface, gchar ** _return, const gchar * sessionId, const IdentityProvider provider, const gchar * identifier, const gchar * verifier, TalkException ** e, GError **error);
  gboolean (*register_device_without_phone_number) (TalkServiceIf *iface, gchar ** _return, const gchar * region, const gchar * udidHash, const DeviceInfo * deviceInfo, TalkException ** e, GError **error);
  gboolean (*register_device_without_phone_number_with_identity_credential) (TalkServiceIf *iface, gchar ** _return, const gchar * region, const gchar * udidHash, const DeviceInfo * deviceInfo, const IdentityProvider provider, const gchar * identifier, const gchar * verifier, const gchar * mid, const gchar * migrationPincodeSessionId, TalkException ** e, GError **error);
  gboolean (*register_userid) (TalkServiceIf *iface, gboolean* _return, const gint32 reqSeq, const gchar * userid, TalkException ** e, GError **error);
  gboolean (*register_wap_device) (TalkServiceIf *iface, gchar ** _return, const gchar * invitationHash, const gchar * guidHash, const gchar * email, const DeviceInfo * deviceInfo, TalkException ** e, GError **error);
  gboolean (*register_with_existing_sns_id_and_identity_credential) (TalkServiceIf *iface, gchar ** _return, const IdentityCredential * identityCredential, const gchar * region, const gchar * udidHash, const DeviceInfo * deviceInfo, TalkException ** e, GError **error);
  gboolean (*register_with_sns_id) (TalkServiceIf *iface, RegisterWithSnsIdResult ** _return, const SnsIdType snsIdType, const gchar * snsAccessToken, const gchar * region, const gchar * udidHash, const DeviceInfo * deviceInfo, const gchar * mid, TalkException ** e, GError **error);
  gboolean (*register_with_sns_id_and_identity_credential) (TalkServiceIf *iface, gchar ** _return, const SnsIdType snsIdType, const gchar * snsAccessToken, const IdentityCredential * identityCredential, const gchar * region, const gchar * udidHash, const DeviceInfo * deviceInfo, TalkException ** e, GError **error);
  gboolean (*reissue_device_credential) (TalkServiceIf *iface, gchar ** _return, TalkException ** e, GError **error);
  gboolean (*reissue_user_ticket) (TalkServiceIf *iface, gchar ** _return, const gint64 expirationTime, const gint32 maxUseCount, TalkException ** e, GError **error);
  gboolean (*get_message_read_range) (TalkServiceIf *iface, GPtrArray ** _return, const GPtrArray * chatIds, TalkException ** e, GError **error);
  gboolean (*reject_group_invitation) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * groupId, TalkException ** e, GError **error);
  gboolean (*release_session) (TalkServiceIf *iface, TalkException ** e, GError **error);
  gboolean (*remove_all_messages) (TalkServiceIf *iface, const gint32 seq, const gchar * lastMessageId, TalkException ** e, GError **error);
  gboolean (*remove_buddy_location) (TalkServiceIf *iface, const gchar * mid, const gint32 index, TalkException ** e, GError **error);
  gboolean (*remove_message) (TalkServiceIf *iface, gboolean* _return, const gchar * messageId, TalkException ** e, GError **error);
  gboolean (*make_user_add_myself_as_contact) (TalkServiceIf *iface, ContactTransition ** _return, const gchar * contactOwnerMid, TalkException ** e, GError **error);
  gboolean (*remove_message_from_my_home) (TalkServiceIf *iface, gboolean* _return, const gchar * messageId, TalkException ** e, GError **error);
  gboolean (*remove_sns_id) (TalkServiceIf *iface, gchar ** _return, const SnsIdType snsIdType, TalkException ** e, GError **error);
  gboolean (*report) (TalkServiceIf *iface, const gint64 syncOpRevision, const SyncCategory category, const gchar * report, TalkException ** e, GError **error);
  gboolean (*report_contacts) (TalkServiceIf *iface, GPtrArray ** _return, const gint64 syncOpRevision, const SyncCategory category, const GPtrArray * contactReports, const SyncActionType actionType, TalkException ** e, GError **error);
  gboolean (*report_groups) (TalkServiceIf *iface, const gint64 syncOpRevision, const GPtrArray * groups, TalkException ** e, GError **error);
  gboolean (*report_profile) (TalkServiceIf *iface, const gint64 syncOpRevision, const Profile * profile, TalkException ** e, GError **error);
  gboolean (*report_rooms) (TalkServiceIf *iface, const gint64 syncOpRevision, const GPtrArray * rooms, TalkException ** e, GError **error);
  gboolean (*find_and_add_contact_by_meta_tag) (TalkServiceIf *iface, Contact ** _return, const gint32 reqSeq, const gchar * userid, const gchar * reference, TalkException ** e, GError **error);
  gboolean (*report_settings) (TalkServiceIf *iface, const gint64 syncOpRevision, const Settings * settings, TalkException ** e, GError **error);
  gboolean (*report_spam) (TalkServiceIf *iface, const gchar * chatMid, const GPtrArray * memberMids, const GArray * spammerReasons, const GPtrArray * senderMids, const GPtrArray * spamMessageIds, const GPtrArray * spamMessages, TalkException ** e, GError **error);
  gboolean (*report_spammer) (TalkServiceIf *iface, const gchar * spammerMid, const GArray * spammerReasons, const GPtrArray * spamMessageIds, TalkException ** e, GError **error);
  gboolean (*request_account_password_reset) (TalkServiceIf *iface, const IdentityProvider provider, const gchar * identifier, const gchar * locale, TalkException ** e, GError **error);
  gboolean (*request_email_confirmation) (TalkServiceIf *iface, EmailConfirmationSession ** _return, const EmailConfirmation * emailConfirmation, TalkException ** e, GError **error);
  gboolean (*request_identity_unbind) (TalkServiceIf *iface, const IdentityProvider provider, const gchar * identifier, TalkException ** e, GError **error);
  gboolean (*resend_email_confirmation) (TalkServiceIf *iface, EmailConfirmationSession ** _return, const gchar * verifier, TalkException ** e, GError **error);
  gboolean (*resend_pin_code) (TalkServiceIf *iface, const gchar * sessionId, TalkException ** e, GError **error);
  gboolean (*resend_pin_code_by_s_m_s) (TalkServiceIf *iface, const gchar * sessionId, TalkException ** e, GError **error);
  gboolean (*send_chat_checked) (TalkServiceIf *iface, const gint32 seq, const gchar * consumer, const gchar * lastMessageId, TalkException ** e, GError **error);
  gboolean (*send_message_await_commit) (TalkServiceIf *iface, CommitMessageResult ** _return, const gint32 seq, const Message * message, TalkException ** e, GError **error);
  gboolean (*send_chat_removed) (TalkServiceIf *iface, const gint32 seq, const gchar * consumer, const gchar * lastMessageId, TalkException ** e, GError **error);
  gboolean (*send_content_preview_updated) (TalkServiceIf *iface, GHashTable ** _return, const gint32 esq, const gchar * messageId, const GPtrArray * receiverMids, TalkException ** e, GError **error);
  gboolean (*send_content_receipt) (TalkServiceIf *iface, const gint32 seq, const gchar * consumer, const gchar * messageId, TalkException ** e, GError **error);
  gboolean (*send_dummy_push) (TalkServiceIf *iface, TalkException ** e, GError **error);
  gboolean (*remove_e2_e_e_public_key) (TalkServiceIf *iface, const E2EEPublicKey * publicKey, TalkException ** e, GError **error);
  gboolean (*negotiate_e2_e_e_public_key) (TalkServiceIf *iface, E2EENegotiationResult ** _return, const gchar * mid, TalkException ** e, GError **error);
  gboolean (*get_e2_e_e_public_key) (TalkServiceIf *iface, E2EEPublicKey ** _return, const gchar * mid, const gint32 version, const gint32 keyId, TalkException ** e, GError **error);
  gboolean (*request_e2_e_e_key_exchange) (TalkServiceIf *iface, const gint32 reqSeq, const GByteArray * temporalPublicKey, const E2EEPublicKey * publicKey, const GByteArray * verifier, TalkException ** e, GError **error);
  gboolean (*get_last_e2_e_e_public_keys) (TalkServiceIf *iface, GHashTable ** _return, const gchar * chatMid, TalkException ** e, GError **error);
  gboolean (*register_e2_e_e_public_key) (TalkServiceIf *iface, E2EEPublicKey ** _return, const gint32 reqSeq, const E2EEPublicKey * publicKey, TalkException ** e, GError **error);
  gboolean (*get_e2_e_e_public_keys) (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_e2_e_e_public_keys_ex) (TalkServiceIf *iface, GPtrArray ** _return, const gboolean ignoreE2EEStatus, TalkException ** e, GError **error);
  gboolean (*get_read_message_ops_in_bulk) (TalkServiceIf *iface, GPtrArray ** _return, const GPtrArray * chatIds, TalkException ** e, GError **error);
  gboolean (*send_event) (TalkServiceIf *iface, Message ** _return, const gint32 seq, const Message * message, TalkException ** e, GError **error);
  gboolean (*send_message) (TalkServiceIf *iface, Message ** _return, const gint32 seq, const Message * message, TalkException ** e, GError **error);
  gboolean (*send_message_ignored) (TalkServiceIf *iface, const gint32 seq, const gchar * consumer, const GPtrArray * messageIds, TalkException ** e, GError **error);
  gboolean (*send_message_receipt) (TalkServiceIf *iface, const gint32 seq, const gchar * consumer, const GPtrArray * messageIds, TalkException ** e, GError **error);
  gboolean (*find_contact_by_meta_tag) (TalkServiceIf *iface, Contact ** _return, const gchar * userid, const gchar * reference, TalkException ** e, GError **error);
  gboolean (*send_message_to_my_home) (TalkServiceIf *iface, Message ** _return, const gint32 seq, const Message * message, TalkException ** e, GError **error);
  gboolean (*set_buddy_location) (TalkServiceIf *iface, const gchar * mid, const gint32 index, const Geolocation * location, TalkException ** e, GError **error);
  gboolean (*set_identity_credential) (TalkServiceIf *iface, const gchar * identifier, const gchar * verifier, const IdentityProvider provider, TalkException ** e, GError **error);
  gboolean (*set_notifications_enabled) (TalkServiceIf *iface, const gint32 reqSeq, const MIDType type, const gchar * target, const gboolean enablement, TalkException ** e, GError **error);
  gboolean (*start_update_verification) (TalkServiceIf *iface, VerificationSessionData ** _return, const gchar * region, const CarrierCode carrier, const gchar * phone, const gchar * udidHash, const DeviceInfo * deviceInfo, const gchar * networkCode, const gchar * locale, TalkException ** e, GError **error);
  gboolean (*start_verification) (TalkServiceIf *iface, VerificationSessionData ** _return, const gchar * region, const CarrierCode carrier, const gchar * phone, const gchar * udidHash, const DeviceInfo * deviceInfo, const gchar * networkCode, const gchar * mid, const gchar * locale, const SIMInfo * simInfo, const gchar * oldUdidHash, TalkException ** e, GError **error);
  gboolean (*update_group_preference_attribute) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * groupMid, const GHashTable * updatedAttrs, TalkException ** e, GError **error);
  gboolean (*create_room_v2) (TalkServiceIf *iface, Room ** _return, const gint32 reqSeq, const GPtrArray * contactIds, TalkException ** e, GError **error);
  gboolean (*store_update_profile_attribute) (TalkServiceIf *iface, const gint32 seq, const ProfileAttribute profileAttribute, const gchar * value, TalkException ** e, GError **error);
  gboolean (*sync_contact_by_sns_ids) (TalkServiceIf *iface, GPtrArray ** _return, const gint32 reqSeq, const GPtrArray * modifications, TalkException ** e, GError **error);
  gboolean (*sync_contacts) (TalkServiceIf *iface, GHashTable ** _return, const gint32 reqSeq, const GPtrArray * localContacts, TalkException ** e, GError **error);
  gboolean (*try_send_message) (TalkServiceIf *iface, Message ** _return, const gint32 seq, const Message * message, TalkException ** e, GError **error);
  gboolean (*get_next_messages_v2) (TalkServiceIf *iface, GPtrArray ** _return, const gchar * messageBoxId, const MessageBoxV2MessageId * startMessageId, const gint32 messagesCount, TalkException ** e, GError **error);
  gboolean (*get_message_box_compact_wrap_up_v2) (TalkServiceIf *iface, TMessageBoxWrapUp ** _return, const gchar * messageBoxId, TalkException ** e, GError **error);
  gboolean (*get_recent_messages_v2) (TalkServiceIf *iface, GPtrArray ** _return, const gchar * messageBoxId, const gint32 messagesCount, TalkException ** e, GError **error);
  gboolean (*validate_contacts_on_bot) (TalkServiceIf *iface, GHashTable ** _return, const GPtrArray * contacts, TalkException ** e, GError **error);
  gboolean (*try_friend_request) (TalkServiceIf *iface, const gchar * midOrEMid, const FriendRequestMethod method, const gchar * friendRequestParams, TalkException ** e, GError **error);
  gboolean (*unblock_contact) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * id, TalkException ** e, GError **error);
  gboolean (*unblock_recommendation) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * id, TalkException ** e, GError **error);
  gboolean (*unregister_user_and_device) (TalkServiceIf *iface, gchar ** _return, TalkException ** e, GError **error);
  gboolean (*update_apns_device_token) (TalkServiceIf *iface, const GByteArray * apnsDeviceToken, TalkException ** e, GError **error);
  gboolean (*update_buddy_setting) (TalkServiceIf *iface, const gchar * key, const gchar * value, TalkException ** e, GError **error);
  gboolean (*update_c2_d_m_registration_id) (TalkServiceIf *iface, const gchar * registrationId, TalkException ** e, GError **error);
  gboolean (*update_contact_setting) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * mid, const ContactSetting flag, const gchar * value, TalkException ** e, GError **error);
  gboolean (*update_custom_mode_settings) (TalkServiceIf *iface, const CustomMode customMode, const GHashTable * paramMap, TalkException ** e, GError **error);
  gboolean (*update_device_info) (TalkServiceIf *iface, const gchar * deviceUid, const DeviceInfo * deviceInfo, TalkException ** e, GError **error);
  gboolean (*update_group) (TalkServiceIf *iface, const gint32 reqSeq, const Group * group, TalkException ** e, GError **error);
  gboolean (*update_notification_token) (TalkServiceIf *iface, const NotificationType type, const gchar * token, TalkException ** e, GError **error);
  gboolean (*update_notification_token_with_bytes) (TalkServiceIf *iface, const NotificationType type, const GByteArray * token, TalkException ** e, GError **error);
  gboolean (*update_profile) (TalkServiceIf *iface, const gint32 reqSeq, const Profile * profile, TalkException ** e, GError **error);
  gboolean (*update_profile_attribute) (TalkServiceIf *iface, const gint32 reqSeq, const ProfileAttribute attr, const gchar * value, TalkException ** e, GError **error);
  gboolean (*update_region) (TalkServiceIf *iface, const gchar * region, TalkException ** e, GError **error);
  gboolean (*update_settings) (TalkServiceIf *iface, const gint32 reqSeq, const Settings * settings, TalkException ** e, GError **error);
  gboolean (*update_settings2) (TalkServiceIf *iface, gint32* _return, const gint32 reqSeq, const Settings * settings, TalkException ** e, GError **error);
  gboolean (*update_settings_attribute) (TalkServiceIf *iface, const gint32 reqSeq, const SettingsAttribute attr, const gchar * value, TalkException ** e, GError **error);
  gboolean (*update_settings_attributes) (TalkServiceIf *iface, gint32* _return, const gint32 reqSeq, const gint32 attrBitset, const Settings * settings, TalkException ** e, GError **error);
  gboolean (*verify_identity_credential) (TalkServiceIf *iface, const IdentityProvider identityProvider, const gchar * identifier, const gchar * password, TalkException ** e, GError **error);
  gboolean (*verify_identity_credential_with_result) (TalkServiceIf *iface, UserAuthStatus ** _return, const IdentityCredential * identityCredential, TalkException ** e, GError **error);
  gboolean (*verify_phone) (TalkServiceIf *iface, VerificationResult* _return, const gchar * sessionId, const gchar * pinCode, const gchar * udidHash, TalkException ** e, GError **error);
  gboolean (*verify_qrcode) (TalkServiceIf *iface, gchar ** _return, const gchar * verifier, const gchar * pinCode, TalkException ** e, GError **error);
};
typedef struct _TalkServiceIfInterface TalkServiceIfInterface;

GType talk_service_if_get_type (void);
#define TYPE_TALK_SERVICE_IF (talk_service_if_get_type())
#define TALK_SERVICE_IF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_TALK_SERVICE_IF, TalkServiceIf))
#define IS_TALK_SERVICE_IF(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_TALK_SERVICE_IF))
#define TALK_SERVICE_IF_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), TYPE_TALK_SERVICE_IF, TalkServiceIfInterface))

gboolean talk_service_if_get_chat_room_announcements_bulk (TalkServiceIf *iface, GHashTable ** _return, const GPtrArray * chatRoomMids, TalkException ** e, GError **error);
gboolean talk_service_if_get_chat_room_announcements (TalkServiceIf *iface, GPtrArray ** _return, const gchar * chatRoomMid, TalkException ** e, GError **error);
gboolean talk_service_if_create_chat_room_announcement (TalkServiceIf *iface, ChatRoomAnnouncement ** _return, const gint32 reqSeq, const gchar * chatRoomMid, const ChatRoomAnnouncementType type, const ChatRoomAnnouncementContents * contents, TalkException ** e, GError **error);
gboolean talk_service_if_remove_chat_room_announcement (TalkServiceIf *iface, const gint32 reqSeq, const gchar * chatRoomMid, const gint64 announcementSeq, TalkException ** e, GError **error);
gboolean talk_service_if_unsend_message (TalkServiceIf *iface, const gint32 seq, const gchar * messageId, TalkException ** e, GError **error);
gboolean talk_service_if_get_group_without_members (TalkServiceIf *iface, Group ** _return, const gchar * groupId, TalkException ** e, GError **error);
gboolean talk_service_if_request_resend_message (TalkServiceIf *iface, const gint32 reqSeq, const gchar * senderMid, const gchar * messageId, TalkException ** e, GError **error);
gboolean talk_service_if_respond_resend_message (TalkServiceIf *iface, const gint32 reqSeq, const gchar * receiverMid, const gchar * originalMessageId, const Message * resendMessage, const ErrorCode errorCode, TalkException ** e, GError **error);
gboolean talk_service_if_accept_group_invitation (TalkServiceIf *iface, const gint32 reqSeq, const gchar * groupId, TalkException ** e, GError **error);
gboolean talk_service_if_accept_group_invitation_by_ticket (TalkServiceIf *iface, const gint32 reqSeq, const gchar * GroupMid, const gchar * ticketId, TalkException ** e, GError **error);
gboolean talk_service_if_accept_proximity_matches (TalkServiceIf *iface, const gchar * sessionId, const GHashTable * ids, TalkException ** e, GError **error);
gboolean talk_service_if_acquire_call_route (TalkServiceIf *iface, GPtrArray ** _return, const gchar * to, TalkException ** e, GError **error);
gboolean talk_service_if_acquire_call_ticket (TalkServiceIf *iface, gchar ** _return, const gchar * to, TalkException ** e, GError **error);
gboolean talk_service_if_acquire_encrypted_access_token (TalkServiceIf *iface, gchar ** _return, const FeatureType featureType, TalkException ** e, GError **error);
gboolean talk_service_if_add_sns_id (TalkServiceIf *iface, gchar ** _return, const SnsIdType snsIdType, const gchar * snsAccessToken, TalkException ** e, GError **error);
gboolean talk_service_if_block_contact (TalkServiceIf *iface, const gint32 reqSeq, const gchar * id, TalkException ** e, GError **error);
gboolean talk_service_if_block_recommendation (TalkServiceIf *iface, const gint32 reqSeq, const gchar * id, TalkException ** e, GError **error);
gboolean talk_service_if_cancel_group_invitation (TalkServiceIf *iface, const gint32 reqSeq, const gchar * groupId, const GPtrArray * contactIds, TalkException ** e, GError **error);
gboolean talk_service_if_change_verification_method (TalkServiceIf *iface, VerificationSessionData ** _return, const gchar * sessionId, const VerificationMethod method, TalkException ** e, GError **error);
gboolean talk_service_if_clear_identity_credential (TalkServiceIf *iface, TalkException ** e, GError **error);
gboolean talk_service_if_clear_message_box (TalkServiceIf *iface, const gchar * channelId, const gchar * messageBoxId, TalkException ** e, GError **error);
gboolean talk_service_if_close_proximity_match (TalkServiceIf *iface, const gchar * sessionId, TalkException ** e, GError **error);
gboolean talk_service_if_commit_send_message (TalkServiceIf *iface, GHashTable ** _return, const gint32 seq, const gchar * messageId, const GPtrArray * receiverMids, TalkException ** e, GError **error);
gboolean talk_service_if_commit_send_messages (TalkServiceIf *iface, GHashTable ** _return, const gint32 seq, const GPtrArray * messageIds, const GPtrArray * receiverMids, TalkException ** e, GError **error);
gboolean talk_service_if_commit_update_profile (TalkServiceIf *iface, GHashTable ** _return, const gint32 seq, const GArray * attrs, const GPtrArray * receiverMids, TalkException ** e, GError **error);
gboolean talk_service_if_confirm_email (TalkServiceIf *iface, const gchar * verifier, const gchar * pinCode, TalkException ** e, GError **error);
gboolean talk_service_if_create_group (TalkServiceIf *iface, Group ** _return, const gint32 seq, const gchar * name, const GPtrArray * contactIds, TalkException ** e, GError **error);
gboolean talk_service_if_create_qrcode_base64_image (TalkServiceIf *iface, gchar ** _return, const gchar * url, const gchar * characterSet, const gint32 imageSize, const gint32 x, const gint32 y, const gint32 width, const gint32 height, TalkException ** e, GError **error);
gboolean talk_service_if_create_room (TalkServiceIf *iface, Room ** _return, const gint32 reqSeq, const GPtrArray * contactIds, TalkException ** e, GError **error);
gboolean talk_service_if_create_session (TalkServiceIf *iface, gchar ** _return, TalkException ** e, GError **error);
gboolean talk_service_if_fetch_announcements (TalkServiceIf *iface, GPtrArray ** _return, const gint32 lastFetchedIndex, TalkException ** e, GError **error);
gboolean talk_service_if_fetch_messages (TalkServiceIf *iface, GPtrArray ** _return, const gint64 localTs, const gint32 count, TalkException ** e, GError **error);
gboolean talk_service_if_fetch_operations (TalkServiceIf *iface, GPtrArray ** _return, const gint64 localRev, const gint32 count, ShouldSyncException ** e, GError **error);
gboolean talk_service_if_fetch_ops (TalkServiceIf *iface, GPtrArray ** _return, const gint64 localRev, const gint32 count, const gint64 globalRev, const gint64 individualRev, ShouldSyncException ** e, GError **error);
gboolean talk_service_if_find_and_add_contacts_by_email (TalkServiceIf *iface, GHashTable ** _return, const gint32 reqSeq, const GHashTable * emails, TalkException ** e, GError **error);
gboolean talk_service_if_find_and_add_contacts_by_mid (TalkServiceIf *iface, GHashTable ** _return, const gint32 reqSeq, const gchar * mid, const ContactType type, const gchar * reference, TalkException ** e, GError **error);
gboolean talk_service_if_find_group_by_ticket_v2 (TalkServiceIf *iface, Group ** _return, const gchar * ticketId, TalkException ** e, GError **error);
gboolean talk_service_if_find_and_add_contacts_by_phone (TalkServiceIf *iface, GHashTable ** _return, const gint32 reqSeq, const GHashTable * phones, TalkException ** e, GError **error);
gboolean talk_service_if_get_friend_requests (TalkServiceIf *iface, GPtrArray ** _return, const FriendRequestDirection direction, const gint64 lastSeenSeqId, TalkException ** e, GError **error);
gboolean talk_service_if_remove_friend_request (TalkServiceIf *iface, const FriendRequestDirection direction, const gchar * midOrEMid, TalkException ** e, GError **error);
gboolean talk_service_if_find_and_add_contacts_by_userid (TalkServiceIf *iface, GHashTable ** _return, const gint32 reqSeq, const gchar * userid, TalkException ** e, GError **error);
gboolean talk_service_if_find_contact_by_userid (TalkServiceIf *iface, Contact ** _return, const gchar * userid, TalkException ** e, GError **error);
gboolean talk_service_if_find_contact_by_user_ticket (TalkServiceIf *iface, Contact ** _return, const gchar * ticketIdWithTag, TalkException ** e, GError **error);
gboolean talk_service_if_find_contacts_by_email (TalkServiceIf *iface, GHashTable ** _return, const GHashTable * emails, TalkException ** e, GError **error);
gboolean talk_service_if_find_contacts_by_phone (TalkServiceIf *iface, GHashTable ** _return, const GHashTable * phones, TalkException ** e, GError **error);
gboolean talk_service_if_find_sns_id_user_status (TalkServiceIf *iface, SnsIdUserStatus ** _return, const SnsIdType snsIdType, const gchar * snsAccessToken, const gchar * udidHash, TalkException ** e, GError **error);
gboolean talk_service_if_finish_update_verification (TalkServiceIf *iface, const gchar * sessionId, TalkException ** e, GError **error);
gboolean talk_service_if_generate_user_ticket (TalkServiceIf *iface, Ticket ** _return, const gint64 expirationTime, const gint32 maxUseCount, TalkException ** e, GError **error);
gboolean talk_service_if_destroy_message (TalkServiceIf *iface, const gint32 seq, const gchar * chatId, const gchar * messageId, const gint8 sessionId, TalkException ** e, GError **error);
gboolean talk_service_if_get_accepted_proximity_matches (TalkServiceIf *iface, GHashTable ** _return, const gchar * sessionId, TalkException ** e, GError **error);
gboolean talk_service_if_get_active_buddy_subscriber_ids (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean talk_service_if_get_all_contact_ids (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean talk_service_if_get_auth_qrcode (TalkServiceIf *iface, AuthQrcode ** _return, const gboolean keepLoggedIn, const gchar * systemName, TalkException ** e, GError **error);
gboolean talk_service_if_get_blocked_contact_ids (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean talk_service_if_register_with_phone_number (TalkServiceIf *iface, RegisterWithPhoneNumberResult ** _return, const gchar * sessionId, const gchar * migrationPincodeSessionId, TalkException ** e, GError **error);
gboolean talk_service_if_register_with_phone_number_and_password (TalkServiceIf *iface, RegisterWithPhoneNumberResult ** _return, const gchar * sessionId, const gchar * keynm, const gchar * encrypted, TalkException ** e, GError **error);
gboolean talk_service_if_get_analytics_info (TalkServiceIf *iface, AnalyticsInfo ** _return, TalkException ** e, GError **error);
gboolean talk_service_if_report_client_statistics (TalkServiceIf *iface, const gint32 reqSeq, const ReportCategory category, const gint32 count, TalkException ** e, GError **error);
gboolean talk_service_if_verify_phone_number_for_login (TalkServiceIf *iface, gchar ** _return, const gchar * verifierFromPhone, const gchar * pinCodeForPhone, const gchar * verifierFromLogin, TalkException ** e, GError **error);
gboolean talk_service_if_verify_phone_number (TalkServiceIf *iface, PhoneVerificationResult ** _return, const gchar * sessionId, const gchar * pinCode, const gchar * udidHash, const gchar * migrationPincodeSessionId, const gchar * oldUdidHash, TalkException ** e, GError **error);
gboolean talk_service_if_get_blocked_contact_ids_by_range (TalkServiceIf *iface, GPtrArray ** _return, const gint32 start, const gint32 count, TalkException ** e, GError **error);
gboolean talk_service_if_get_blocked_recommendation_ids (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean talk_service_if_get_buddy_blocker_ids (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean talk_service_if_get_buddy_location (TalkServiceIf *iface, Geolocation ** _return, const gchar * mid, const gint32 index, TalkException ** e, GError **error);
gboolean talk_service_if_get_compact_contacts_modified_since (TalkServiceIf *iface, GPtrArray ** _return, const gint64 timestamp, TalkException ** e, GError **error);
gboolean talk_service_if_get_compact_group (TalkServiceIf *iface, Group ** _return, const gchar * groupId, TalkException ** e, GError **error);
gboolean talk_service_if_get_compact_room (TalkServiceIf *iface, Room ** _return, const gchar * roomId, TalkException ** e, GError **error);
gboolean talk_service_if_get_contact (TalkServiceIf *iface, Contact ** _return, const gchar * id, TalkException ** e, GError **error);
gboolean talk_service_if_get_contacts (TalkServiceIf *iface, GPtrArray ** _return, const GPtrArray * ids, TalkException ** e, GError **error);
gboolean talk_service_if_get_contact_with_friend_request_status (TalkServiceIf *iface, Contact ** _return, const gchar * id, TalkException ** e, GError **error);
gboolean talk_service_if_get_country_with_request_ip (TalkServiceIf *iface, gchar ** _return, TalkException ** e, GError **error);
gboolean talk_service_if_get_favorite_mids (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean talk_service_if_get_group (TalkServiceIf *iface, Group ** _return, const gchar * groupId, TalkException ** e, GError **error);
gboolean talk_service_if_get_group_ids_invited (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean talk_service_if_get_group_ids_joined (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean talk_service_if_get_groups (TalkServiceIf *iface, GPtrArray ** _return, const GPtrArray * groupIds, TalkException ** e, GError **error);
gboolean talk_service_if_get_hidden_contact_mids (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean talk_service_if_get_identity_identifier (TalkServiceIf *iface, gchar ** _return, TalkException ** e, GError **error);
gboolean talk_service_if_get_last_announcement_index (TalkServiceIf *iface, gint32* _return, TalkException ** e, GError **error);
gboolean talk_service_if_get_last_op_revision (TalkServiceIf *iface, gint64* _return, TalkException ** e, GError **error);
gboolean talk_service_if_get_suggest_revisions (TalkServiceIf *iface, SuggestDictionaryRevisions ** _return, TalkException ** e, GError **error);
gboolean talk_service_if_get_previous_messages_v2_with_read_count (TalkServiceIf *iface, GPtrArray ** _return, const gchar * messageBoxId, const MessageBoxV2MessageId * endMessageId, const gint32 messagesCount, TalkException ** e, GError **error);
gboolean talk_service_if_get_message_box (TalkServiceIf *iface, TMessageBox ** _return, const gchar * channelId, const gchar * messageBoxId, const gint32 lastMessagesCount, TalkException ** e, GError **error);
gboolean talk_service_if_get_message_box_compact_wrap_up (TalkServiceIf *iface, TMessageBoxWrapUp ** _return, const gchar * mid, TalkException ** e, GError **error);
gboolean talk_service_if_get_message_box_compact_wrap_up_list (TalkServiceIf *iface, TMessageBoxWrapUpResponse ** _return, const gint32 start, const gint32 messageBoxCount, TalkException ** e, GError **error);
gboolean talk_service_if_get_message_box_list (TalkServiceIf *iface, GPtrArray ** _return, const gchar * channelId, const gint32 lastMessagesCount, TalkException ** e, GError **error);
gboolean talk_service_if_get_message_box_list_by_status (TalkServiceIf *iface, GPtrArray ** _return, const gchar * channelId, const gint32 lastMessagesCount, const gint32 status, TalkException ** e, GError **error);
gboolean talk_service_if_get_message_box_wrap_up (TalkServiceIf *iface, TMessageBoxWrapUp ** _return, const gchar * mid, TalkException ** e, GError **error);
gboolean talk_service_if_get_message_box_wrap_up_list (TalkServiceIf *iface, TMessageBoxWrapUpResponse ** _return, const gint32 start, const gint32 messageBoxCount, TalkException ** e, GError **error);
gboolean talk_service_if_get_messages_by_sequence_number (TalkServiceIf *iface, GPtrArray ** _return, const gchar * channelId, const gchar * messageBoxId, const gint64 startSeq, const gint64 endSeq, TalkException ** e, GError **error);
gboolean talk_service_if_get_next_messages (TalkServiceIf *iface, GPtrArray ** _return, const gchar * messageBoxId, const gint64 startSeq, const gint32 messagesCount, TalkException ** e, GError **error);
gboolean talk_service_if_get_notification_policy (TalkServiceIf *iface, GArray ** _return, const CarrierCode carrier, TalkException ** e, GError **error);
gboolean talk_service_if_get_previous_messages (TalkServiceIf *iface, GPtrArray ** _return, const gchar * messageBoxId, const gint64 endSeq, const gint32 messagesCount, TalkException ** e, GError **error);
gboolean talk_service_if_get_profile (TalkServiceIf *iface, Profile ** _return, TalkException ** e, GError **error);
gboolean talk_service_if_get_proximity_match_candidate_list (TalkServiceIf *iface, ProximityMatchCandidateResult ** _return, const gchar * sessionId, TalkException ** e, GError **error);
gboolean talk_service_if_get_proximity_match_candidates (TalkServiceIf *iface, GHashTable ** _return, const gchar * sessionId, TalkException ** e, GError **error);
gboolean talk_service_if_get_recent_messages (TalkServiceIf *iface, GPtrArray ** _return, const gchar * messageBoxId, const gint32 messagesCount, TalkException ** e, GError **error);
gboolean talk_service_if_get_recommendation_ids (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean talk_service_if_get_room (TalkServiceIf *iface, Room ** _return, const gchar * roomId, TalkException ** e, GError **error);
gboolean talk_service_if_get_r_s_a_key_info (TalkServiceIf *iface, RSAKey ** _return, const IdentityProvider provider, TalkException ** e, GError **error);
gboolean talk_service_if_get_server_time (TalkServiceIf *iface, gint64* _return, TalkException ** e, GError **error);
gboolean talk_service_if_get_sessions (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean talk_service_if_get_settings (TalkServiceIf *iface, Settings ** _return, TalkException ** e, GError **error);
gboolean talk_service_if_get_groups_v2 (TalkServiceIf *iface, GPtrArray ** _return, const GPtrArray * groupIds, TalkException ** e, GError **error);
gboolean talk_service_if_get_settings_attributes (TalkServiceIf *iface, Settings ** _return, const gint32 attrBitset, TalkException ** e, GError **error);
gboolean talk_service_if_get_system_configuration (TalkServiceIf *iface, SystemConfiguration ** _return, TalkException ** e, GError **error);
gboolean talk_service_if_get_user_ticket (TalkServiceIf *iface, Ticket ** _return, TalkException ** e, GError **error);
gboolean talk_service_if_get_wap_invitation (TalkServiceIf *iface, WapInvitation ** _return, const gchar * invitationHash, TalkException ** e, GError **error);
gboolean talk_service_if_invalidate_user_ticket (TalkServiceIf *iface, TalkException ** e, GError **error);
gboolean talk_service_if_invite_friends_by_sms (TalkServiceIf *iface, const GPtrArray * phoneNumberList, TalkException ** e, GError **error);
gboolean talk_service_if_invite_into_group (TalkServiceIf *iface, const gint32 reqSeq, const gchar * groupId, const GPtrArray * contactIds, TalkException ** e, GError **error);
gboolean talk_service_if_invite_into_room (TalkServiceIf *iface, const gint32 reqSeq, const gchar * roomId, const GPtrArray * contactIds, TalkException ** e, GError **error);
gboolean talk_service_if_invite_via_email (TalkServiceIf *iface, const gint32 reqSeq, const gchar * email, const gchar * name, TalkException ** e, GError **error);
gboolean talk_service_if_is_identity_identifier_available (TalkServiceIf *iface, gboolean* _return, const IdentityProvider provider, const gchar * identifier, TalkException ** e, GError **error);
gboolean talk_service_if_is_userid_available (TalkServiceIf *iface, gboolean* _return, const gchar * userid, TalkException ** e, GError **error);
gboolean talk_service_if_kickout_from_group (TalkServiceIf *iface, const gint32 reqSeq, const gchar * groupId, const GPtrArray * contactIds, TalkException ** e, GError **error);
gboolean talk_service_if_reissue_group_ticket (TalkServiceIf *iface, gchar ** _return, const gchar * groupMid, TalkException ** e, GError **error);
gboolean talk_service_if_find_group_by_ticket (TalkServiceIf *iface, Group ** _return, const gchar * ticketId, TalkException ** e, GError **error);
gboolean talk_service_if_leave_group (TalkServiceIf *iface, const gint32 reqSeq, const gchar * groupId, TalkException ** e, GError **error);
gboolean talk_service_if_leave_room (TalkServiceIf *iface, const gint32 reqSeq, const gchar * roomId, TalkException ** e, GError **error);
gboolean talk_service_if_login_with_identity_credential (TalkServiceIf *iface, gchar ** _return, const IdentityProvider identityProvider, const gchar * identifier, const gchar * password, const gboolean keepLoggedIn, const gchar * accessLocation, const gchar * systemName, const gchar * certificate, TalkException ** e, GError **error);
gboolean talk_service_if_login_with_identity_credential_for_certificate (TalkServiceIf *iface, LoginResult ** _return, const IdentityProvider identityProvider, const gchar * identifier, const gchar * password, const gboolean keepLoggedIn, const gchar * accessLocation, const gchar * systemName, const gchar * certificate, TalkException ** e, GError **error);
gboolean talk_service_if_login_with_verifier (TalkServiceIf *iface, gchar ** _return, const gchar * verifier, TalkException ** e, GError **error);
gboolean talk_service_if_login_with_verifier_for_cerificate (TalkServiceIf *iface, LoginResult ** _return, const gchar * verifier, TalkException ** e, GError **error);
gboolean talk_service_if_login_with_verifier_for_certificate (TalkServiceIf *iface, LoginResult ** _return, const gchar * verifier, TalkException ** e, GError **error);
gboolean talk_service_if_logout (TalkServiceIf *iface, TalkException ** e, GError **error);
gboolean talk_service_if_logout_session (TalkServiceIf *iface, const gchar * tokenKey, TalkException ** e, GError **error);
gboolean talk_service_if_noop (TalkServiceIf *iface, TalkException ** e, GError **error);
gboolean talk_service_if_notified_redirect (TalkServiceIf *iface, const GHashTable * paramMap, TalkException ** e, GError **error);
gboolean talk_service_if_notify_buddy_on_air (TalkServiceIf *iface, GHashTable ** _return, const gint32 seq, const GPtrArray * receiverMids, TalkException ** e, GError **error);
gboolean talk_service_if_notify_individual_event (TalkServiceIf *iface, const NotificationStatus notificationStatus, const GPtrArray * receiverMids, TalkException ** e, GError **error);
gboolean talk_service_if_notify_installed (TalkServiceIf *iface, const gchar * udidHash, const gchar * applicationTypeWithExtensions, TalkException ** e, GError **error);
gboolean talk_service_if_notify_registration_complete (TalkServiceIf *iface, const gchar * udidHash, const gchar * applicationTypeWithExtensions, TalkException ** e, GError **error);
gboolean talk_service_if_notify_sleep (TalkServiceIf *iface, const gint64 lastRev, const gint32 badge, TalkException ** e, GError **error);
gboolean talk_service_if_notify_updated (TalkServiceIf *iface, const gint64 lastRev, const DeviceInfo * deviceInfo, TalkException ** e, GError **error);
gboolean talk_service_if_open_proximity_match (TalkServiceIf *iface, gchar ** _return, const Location * location, TalkException ** e, GError **error);
gboolean talk_service_if_register_buddy_user (TalkServiceIf *iface, gchar ** _return, const gchar * buddyId, const gchar * registrarPassword, TalkException ** e, GError **error);
gboolean talk_service_if_register_buddy_userid (TalkServiceIf *iface, const gint32 seq, const gchar * userid, TalkException ** e, GError **error);
gboolean talk_service_if_register_device (TalkServiceIf *iface, gchar ** _return, const gchar * sessionId, TalkException ** e, GError **error);
gboolean talk_service_if_register_device_with_identity_credential (TalkServiceIf *iface, gchar ** _return, const gchar * sessionId, const IdentityProvider provider, const gchar * identifier, const gchar * verifier, TalkException ** e, GError **error);
gboolean talk_service_if_register_device_without_phone_number (TalkServiceIf *iface, gchar ** _return, const gchar * region, const gchar * udidHash, const DeviceInfo * deviceInfo, TalkException ** e, GError **error);
gboolean talk_service_if_register_device_without_phone_number_with_identity_credential (TalkServiceIf *iface, gchar ** _return, const gchar * region, const gchar * udidHash, const DeviceInfo * deviceInfo, const IdentityProvider provider, const gchar * identifier, const gchar * verifier, const gchar * mid, const gchar * migrationPincodeSessionId, TalkException ** e, GError **error);
gboolean talk_service_if_register_userid (TalkServiceIf *iface, gboolean* _return, const gint32 reqSeq, const gchar * userid, TalkException ** e, GError **error);
gboolean talk_service_if_register_wap_device (TalkServiceIf *iface, gchar ** _return, const gchar * invitationHash, const gchar * guidHash, const gchar * email, const DeviceInfo * deviceInfo, TalkException ** e, GError **error);
gboolean talk_service_if_register_with_existing_sns_id_and_identity_credential (TalkServiceIf *iface, gchar ** _return, const IdentityCredential * identityCredential, const gchar * region, const gchar * udidHash, const DeviceInfo * deviceInfo, TalkException ** e, GError **error);
gboolean talk_service_if_register_with_sns_id (TalkServiceIf *iface, RegisterWithSnsIdResult ** _return, const SnsIdType snsIdType, const gchar * snsAccessToken, const gchar * region, const gchar * udidHash, const DeviceInfo * deviceInfo, const gchar * mid, TalkException ** e, GError **error);
gboolean talk_service_if_register_with_sns_id_and_identity_credential (TalkServiceIf *iface, gchar ** _return, const SnsIdType snsIdType, const gchar * snsAccessToken, const IdentityCredential * identityCredential, const gchar * region, const gchar * udidHash, const DeviceInfo * deviceInfo, TalkException ** e, GError **error);
gboolean talk_service_if_reissue_device_credential (TalkServiceIf *iface, gchar ** _return, TalkException ** e, GError **error);
gboolean talk_service_if_reissue_user_ticket (TalkServiceIf *iface, gchar ** _return, const gint64 expirationTime, const gint32 maxUseCount, TalkException ** e, GError **error);
gboolean talk_service_if_get_message_read_range (TalkServiceIf *iface, GPtrArray ** _return, const GPtrArray * chatIds, TalkException ** e, GError **error);
gboolean talk_service_if_reject_group_invitation (TalkServiceIf *iface, const gint32 reqSeq, const gchar * groupId, TalkException ** e, GError **error);
gboolean talk_service_if_release_session (TalkServiceIf *iface, TalkException ** e, GError **error);
gboolean talk_service_if_remove_all_messages (TalkServiceIf *iface, const gint32 seq, const gchar * lastMessageId, TalkException ** e, GError **error);
gboolean talk_service_if_remove_buddy_location (TalkServiceIf *iface, const gchar * mid, const gint32 index, TalkException ** e, GError **error);
gboolean talk_service_if_remove_message (TalkServiceIf *iface, gboolean* _return, const gchar * messageId, TalkException ** e, GError **error);
gboolean talk_service_if_make_user_add_myself_as_contact (TalkServiceIf *iface, ContactTransition ** _return, const gchar * contactOwnerMid, TalkException ** e, GError **error);
gboolean talk_service_if_remove_message_from_my_home (TalkServiceIf *iface, gboolean* _return, const gchar * messageId, TalkException ** e, GError **error);
gboolean talk_service_if_remove_sns_id (TalkServiceIf *iface, gchar ** _return, const SnsIdType snsIdType, TalkException ** e, GError **error);
gboolean talk_service_if_report (TalkServiceIf *iface, const gint64 syncOpRevision, const SyncCategory category, const gchar * report, TalkException ** e, GError **error);
gboolean talk_service_if_report_contacts (TalkServiceIf *iface, GPtrArray ** _return, const gint64 syncOpRevision, const SyncCategory category, const GPtrArray * contactReports, const SyncActionType actionType, TalkException ** e, GError **error);
gboolean talk_service_if_report_groups (TalkServiceIf *iface, const gint64 syncOpRevision, const GPtrArray * groups, TalkException ** e, GError **error);
gboolean talk_service_if_report_profile (TalkServiceIf *iface, const gint64 syncOpRevision, const Profile * profile, TalkException ** e, GError **error);
gboolean talk_service_if_report_rooms (TalkServiceIf *iface, const gint64 syncOpRevision, const GPtrArray * rooms, TalkException ** e, GError **error);
gboolean talk_service_if_find_and_add_contact_by_meta_tag (TalkServiceIf *iface, Contact ** _return, const gint32 reqSeq, const gchar * userid, const gchar * reference, TalkException ** e, GError **error);
gboolean talk_service_if_report_settings (TalkServiceIf *iface, const gint64 syncOpRevision, const Settings * settings, TalkException ** e, GError **error);
gboolean talk_service_if_report_spam (TalkServiceIf *iface, const gchar * chatMid, const GPtrArray * memberMids, const GArray * spammerReasons, const GPtrArray * senderMids, const GPtrArray * spamMessageIds, const GPtrArray * spamMessages, TalkException ** e, GError **error);
gboolean talk_service_if_report_spammer (TalkServiceIf *iface, const gchar * spammerMid, const GArray * spammerReasons, const GPtrArray * spamMessageIds, TalkException ** e, GError **error);
gboolean talk_service_if_request_account_password_reset (TalkServiceIf *iface, const IdentityProvider provider, const gchar * identifier, const gchar * locale, TalkException ** e, GError **error);
gboolean talk_service_if_request_email_confirmation (TalkServiceIf *iface, EmailConfirmationSession ** _return, const EmailConfirmation * emailConfirmation, TalkException ** e, GError **error);
gboolean talk_service_if_request_identity_unbind (TalkServiceIf *iface, const IdentityProvider provider, const gchar * identifier, TalkException ** e, GError **error);
gboolean talk_service_if_resend_email_confirmation (TalkServiceIf *iface, EmailConfirmationSession ** _return, const gchar * verifier, TalkException ** e, GError **error);
gboolean talk_service_if_resend_pin_code (TalkServiceIf *iface, const gchar * sessionId, TalkException ** e, GError **error);
gboolean talk_service_if_resend_pin_code_by_s_m_s (TalkServiceIf *iface, const gchar * sessionId, TalkException ** e, GError **error);
gboolean talk_service_if_send_chat_checked (TalkServiceIf *iface, const gint32 seq, const gchar * consumer, const gchar * lastMessageId, TalkException ** e, GError **error);
gboolean talk_service_if_send_message_await_commit (TalkServiceIf *iface, CommitMessageResult ** _return, const gint32 seq, const Message * message, TalkException ** e, GError **error);
gboolean talk_service_if_send_chat_removed (TalkServiceIf *iface, const gint32 seq, const gchar * consumer, const gchar * lastMessageId, TalkException ** e, GError **error);
gboolean talk_service_if_send_content_preview_updated (TalkServiceIf *iface, GHashTable ** _return, const gint32 esq, const gchar * messageId, const GPtrArray * receiverMids, TalkException ** e, GError **error);
gboolean talk_service_if_send_content_receipt (TalkServiceIf *iface, const gint32 seq, const gchar * consumer, const gchar * messageId, TalkException ** e, GError **error);
gboolean talk_service_if_send_dummy_push (TalkServiceIf *iface, TalkException ** e, GError **error);
gboolean talk_service_if_remove_e2_e_e_public_key (TalkServiceIf *iface, const E2EEPublicKey * publicKey, TalkException ** e, GError **error);
gboolean talk_service_if_negotiate_e2_e_e_public_key (TalkServiceIf *iface, E2EENegotiationResult ** _return, const gchar * mid, TalkException ** e, GError **error);
gboolean talk_service_if_get_e2_e_e_public_key (TalkServiceIf *iface, E2EEPublicKey ** _return, const gchar * mid, const gint32 version, const gint32 keyId, TalkException ** e, GError **error);
gboolean talk_service_if_request_e2_e_e_key_exchange (TalkServiceIf *iface, const gint32 reqSeq, const GByteArray * temporalPublicKey, const E2EEPublicKey * publicKey, const GByteArray * verifier, TalkException ** e, GError **error);
gboolean talk_service_if_get_last_e2_e_e_public_keys (TalkServiceIf *iface, GHashTable ** _return, const gchar * chatMid, TalkException ** e, GError **error);
gboolean talk_service_if_register_e2_e_e_public_key (TalkServiceIf *iface, E2EEPublicKey ** _return, const gint32 reqSeq, const E2EEPublicKey * publicKey, TalkException ** e, GError **error);
gboolean talk_service_if_get_e2_e_e_public_keys (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean talk_service_if_get_e2_e_e_public_keys_ex (TalkServiceIf *iface, GPtrArray ** _return, const gboolean ignoreE2EEStatus, TalkException ** e, GError **error);
gboolean talk_service_if_get_read_message_ops_in_bulk (TalkServiceIf *iface, GPtrArray ** _return, const GPtrArray * chatIds, TalkException ** e, GError **error);
gboolean talk_service_if_send_event (TalkServiceIf *iface, Message ** _return, const gint32 seq, const Message * message, TalkException ** e, GError **error);
gboolean talk_service_if_send_message (TalkServiceIf *iface, Message ** _return, const gint32 seq, const Message * message, TalkException ** e, GError **error);
gboolean talk_service_if_send_message_ignored (TalkServiceIf *iface, const gint32 seq, const gchar * consumer, const GPtrArray * messageIds, TalkException ** e, GError **error);
gboolean talk_service_if_send_message_receipt (TalkServiceIf *iface, const gint32 seq, const gchar * consumer, const GPtrArray * messageIds, TalkException ** e, GError **error);
gboolean talk_service_if_find_contact_by_meta_tag (TalkServiceIf *iface, Contact ** _return, const gchar * userid, const gchar * reference, TalkException ** e, GError **error);
gboolean talk_service_if_send_message_to_my_home (TalkServiceIf *iface, Message ** _return, const gint32 seq, const Message * message, TalkException ** e, GError **error);
gboolean talk_service_if_set_buddy_location (TalkServiceIf *iface, const gchar * mid, const gint32 index, const Geolocation * location, TalkException ** e, GError **error);
gboolean talk_service_if_set_identity_credential (TalkServiceIf *iface, const gchar * identifier, const gchar * verifier, const IdentityProvider provider, TalkException ** e, GError **error);
gboolean talk_service_if_set_notifications_enabled (TalkServiceIf *iface, const gint32 reqSeq, const MIDType type, const gchar * target, const gboolean enablement, TalkException ** e, GError **error);
gboolean talk_service_if_start_update_verification (TalkServiceIf *iface, VerificationSessionData ** _return, const gchar * region, const CarrierCode carrier, const gchar * phone, const gchar * udidHash, const DeviceInfo * deviceInfo, const gchar * networkCode, const gchar * locale, TalkException ** e, GError **error);
gboolean talk_service_if_start_verification (TalkServiceIf *iface, VerificationSessionData ** _return, const gchar * region, const CarrierCode carrier, const gchar * phone, const gchar * udidHash, const DeviceInfo * deviceInfo, const gchar * networkCode, const gchar * mid, const gchar * locale, const SIMInfo * simInfo, const gchar * oldUdidHash, TalkException ** e, GError **error);
gboolean talk_service_if_update_group_preference_attribute (TalkServiceIf *iface, const gint32 reqSeq, const gchar * groupMid, const GHashTable * updatedAttrs, TalkException ** e, GError **error);
gboolean talk_service_if_create_room_v2 (TalkServiceIf *iface, Room ** _return, const gint32 reqSeq, const GPtrArray * contactIds, TalkException ** e, GError **error);
gboolean talk_service_if_store_update_profile_attribute (TalkServiceIf *iface, const gint32 seq, const ProfileAttribute profileAttribute, const gchar * value, TalkException ** e, GError **error);
gboolean talk_service_if_sync_contact_by_sns_ids (TalkServiceIf *iface, GPtrArray ** _return, const gint32 reqSeq, const GPtrArray * modifications, TalkException ** e, GError **error);
gboolean talk_service_if_sync_contacts (TalkServiceIf *iface, GHashTable ** _return, const gint32 reqSeq, const GPtrArray * localContacts, TalkException ** e, GError **error);
gboolean talk_service_if_try_send_message (TalkServiceIf *iface, Message ** _return, const gint32 seq, const Message * message, TalkException ** e, GError **error);
gboolean talk_service_if_get_next_messages_v2 (TalkServiceIf *iface, GPtrArray ** _return, const gchar * messageBoxId, const MessageBoxV2MessageId * startMessageId, const gint32 messagesCount, TalkException ** e, GError **error);
gboolean talk_service_if_get_message_box_compact_wrap_up_v2 (TalkServiceIf *iface, TMessageBoxWrapUp ** _return, const gchar * messageBoxId, TalkException ** e, GError **error);
gboolean talk_service_if_get_recent_messages_v2 (TalkServiceIf *iface, GPtrArray ** _return, const gchar * messageBoxId, const gint32 messagesCount, TalkException ** e, GError **error);
gboolean talk_service_if_validate_contacts_on_bot (TalkServiceIf *iface, GHashTable ** _return, const GPtrArray * contacts, TalkException ** e, GError **error);
gboolean talk_service_if_try_friend_request (TalkServiceIf *iface, const gchar * midOrEMid, const FriendRequestMethod method, const gchar * friendRequestParams, TalkException ** e, GError **error);
gboolean talk_service_if_unblock_contact (TalkServiceIf *iface, const gint32 reqSeq, const gchar * id, TalkException ** e, GError **error);
gboolean talk_service_if_unblock_recommendation (TalkServiceIf *iface, const gint32 reqSeq, const gchar * id, TalkException ** e, GError **error);
gboolean talk_service_if_unregister_user_and_device (TalkServiceIf *iface, gchar ** _return, TalkException ** e, GError **error);
gboolean talk_service_if_update_apns_device_token (TalkServiceIf *iface, const GByteArray * apnsDeviceToken, TalkException ** e, GError **error);
gboolean talk_service_if_update_buddy_setting (TalkServiceIf *iface, const gchar * key, const gchar * value, TalkException ** e, GError **error);
gboolean talk_service_if_update_c2_d_m_registration_id (TalkServiceIf *iface, const gchar * registrationId, TalkException ** e, GError **error);
gboolean talk_service_if_update_contact_setting (TalkServiceIf *iface, const gint32 reqSeq, const gchar * mid, const ContactSetting flag, const gchar * value, TalkException ** e, GError **error);
gboolean talk_service_if_update_custom_mode_settings (TalkServiceIf *iface, const CustomMode customMode, const GHashTable * paramMap, TalkException ** e, GError **error);
gboolean talk_service_if_update_device_info (TalkServiceIf *iface, const gchar * deviceUid, const DeviceInfo * deviceInfo, TalkException ** e, GError **error);
gboolean talk_service_if_update_group (TalkServiceIf *iface, const gint32 reqSeq, const Group * group, TalkException ** e, GError **error);
gboolean talk_service_if_update_notification_token (TalkServiceIf *iface, const NotificationType type, const gchar * token, TalkException ** e, GError **error);
gboolean talk_service_if_update_notification_token_with_bytes (TalkServiceIf *iface, const NotificationType type, const GByteArray * token, TalkException ** e, GError **error);
gboolean talk_service_if_update_profile (TalkServiceIf *iface, const gint32 reqSeq, const Profile * profile, TalkException ** e, GError **error);
gboolean talk_service_if_update_profile_attribute (TalkServiceIf *iface, const gint32 reqSeq, const ProfileAttribute attr, const gchar * value, TalkException ** e, GError **error);
gboolean talk_service_if_update_region (TalkServiceIf *iface, const gchar * region, TalkException ** e, GError **error);
gboolean talk_service_if_update_settings (TalkServiceIf *iface, const gint32 reqSeq, const Settings * settings, TalkException ** e, GError **error);
gboolean talk_service_if_update_settings2 (TalkServiceIf *iface, gint32* _return, const gint32 reqSeq, const Settings * settings, TalkException ** e, GError **error);
gboolean talk_service_if_update_settings_attribute (TalkServiceIf *iface, const gint32 reqSeq, const SettingsAttribute attr, const gchar * value, TalkException ** e, GError **error);
gboolean talk_service_if_update_settings_attributes (TalkServiceIf *iface, gint32* _return, const gint32 reqSeq, const gint32 attrBitset, const Settings * settings, TalkException ** e, GError **error);
gboolean talk_service_if_verify_identity_credential (TalkServiceIf *iface, const IdentityProvider identityProvider, const gchar * identifier, const gchar * password, TalkException ** e, GError **error);
gboolean talk_service_if_verify_identity_credential_with_result (TalkServiceIf *iface, UserAuthStatus ** _return, const IdentityCredential * identityCredential, TalkException ** e, GError **error);
gboolean talk_service_if_verify_phone (TalkServiceIf *iface, VerificationResult* _return, const gchar * sessionId, const gchar * pinCode, const gchar * udidHash, TalkException ** e, GError **error);
gboolean talk_service_if_verify_qrcode (TalkServiceIf *iface, gchar ** _return, const gchar * verifier, const gchar * pinCode, TalkException ** e, GError **error);

/* TalkService service client */
struct _TalkServiceClient
{
  GObject parent;

  ThriftProtocol *input_protocol;
  ThriftProtocol *output_protocol;
};
typedef struct _TalkServiceClient TalkServiceClient;

struct _TalkServiceClientClass
{
  GObjectClass parent;
};
typedef struct _TalkServiceClientClass TalkServiceClientClass;

GType talk_service_client_get_type (void);
#define TYPE_TALK_SERVICE_CLIENT (talk_service_client_get_type())
#define TALK_SERVICE_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_TALK_SERVICE_CLIENT, TalkServiceClient))
#define TALK_SERVICE_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_TALK_SERVICE_CLIENT, TalkServiceClientClass))
#define TALK_SERVICE_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_TALK_SERVICE_CLIENT))
#define TALK_SERVICE_IS_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_TALK_SERVICE_CLIENT))
#define TALK_SERVICE_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_TALK_SERVICE_CLIENT, TalkServiceClientClass))

gboolean talk_service_client_get_chat_room_announcements_bulk (TalkServiceIf * iface, GHashTable ** _return, const GPtrArray * chatRoomMids, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_chat_room_announcements_bulk (TalkServiceIf * iface, const GPtrArray * chatRoomMids, GError ** error);
gboolean talk_service_client_recv_get_chat_room_announcements_bulk (TalkServiceIf * iface, GHashTable ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_chat_room_announcements (TalkServiceIf * iface, GPtrArray ** _return, const gchar * chatRoomMid, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_chat_room_announcements (TalkServiceIf * iface, const gchar * chatRoomMid, GError ** error);
gboolean talk_service_client_recv_get_chat_room_announcements (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_create_chat_room_announcement (TalkServiceIf * iface, ChatRoomAnnouncement ** _return, const gint32 reqSeq, const gchar * chatRoomMid, const ChatRoomAnnouncementType type, const ChatRoomAnnouncementContents * contents, TalkException ** e, GError ** error);
gboolean talk_service_client_send_create_chat_room_announcement (TalkServiceIf * iface, const gint32 reqSeq, const gchar * chatRoomMid, const ChatRoomAnnouncementType type, const ChatRoomAnnouncementContents * contents, GError ** error);
gboolean talk_service_client_recv_create_chat_room_announcement (TalkServiceIf * iface, ChatRoomAnnouncement ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_remove_chat_room_announcement (TalkServiceIf * iface, const gint32 reqSeq, const gchar * chatRoomMid, const gint64 announcementSeq, TalkException ** e, GError ** error);
gboolean talk_service_client_send_remove_chat_room_announcement (TalkServiceIf * iface, const gint32 reqSeq, const gchar * chatRoomMid, const gint64 announcementSeq, GError ** error);
gboolean talk_service_client_recv_remove_chat_room_announcement (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_unsend_message (TalkServiceIf * iface, const gint32 seq, const gchar * messageId, TalkException ** e, GError ** error);
gboolean talk_service_client_send_unsend_message (TalkServiceIf * iface, const gint32 seq, const gchar * messageId, GError ** error);
gboolean talk_service_client_recv_unsend_message (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_get_group_without_members (TalkServiceIf * iface, Group ** _return, const gchar * groupId, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_group_without_members (TalkServiceIf * iface, const gchar * groupId, GError ** error);
gboolean talk_service_client_recv_get_group_without_members (TalkServiceIf * iface, Group ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_request_resend_message (TalkServiceIf * iface, const gint32 reqSeq, const gchar * senderMid, const gchar * messageId, TalkException ** e, GError ** error);
gboolean talk_service_client_send_request_resend_message (TalkServiceIf * iface, const gint32 reqSeq, const gchar * senderMid, const gchar * messageId, GError ** error);
gboolean talk_service_client_recv_request_resend_message (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_respond_resend_message (TalkServiceIf * iface, const gint32 reqSeq, const gchar * receiverMid, const gchar * originalMessageId, const Message * resendMessage, const ErrorCode errorCode, TalkException ** e, GError ** error);
gboolean talk_service_client_send_respond_resend_message (TalkServiceIf * iface, const gint32 reqSeq, const gchar * receiverMid, const gchar * originalMessageId, const Message * resendMessage, const ErrorCode errorCode, GError ** error);
gboolean talk_service_client_recv_respond_resend_message (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_accept_group_invitation (TalkServiceIf * iface, const gint32 reqSeq, const gchar * groupId, TalkException ** e, GError ** error);
gboolean talk_service_client_send_accept_group_invitation (TalkServiceIf * iface, const gint32 reqSeq, const gchar * groupId, GError ** error);
gboolean talk_service_client_recv_accept_group_invitation (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_accept_group_invitation_by_ticket (TalkServiceIf * iface, const gint32 reqSeq, const gchar * GroupMid, const gchar * ticketId, TalkException ** e, GError ** error);
gboolean talk_service_client_send_accept_group_invitation_by_ticket (TalkServiceIf * iface, const gint32 reqSeq, const gchar * GroupMid, const gchar * ticketId, GError ** error);
gboolean talk_service_client_recv_accept_group_invitation_by_ticket (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_accept_proximity_matches (TalkServiceIf * iface, const gchar * sessionId, const GHashTable * ids, TalkException ** e, GError ** error);
gboolean talk_service_client_send_accept_proximity_matches (TalkServiceIf * iface, const gchar * sessionId, const GHashTable * ids, GError ** error);
gboolean talk_service_client_recv_accept_proximity_matches (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_acquire_call_route (TalkServiceIf * iface, GPtrArray ** _return, const gchar * to, TalkException ** e, GError ** error);
gboolean talk_service_client_send_acquire_call_route (TalkServiceIf * iface, const gchar * to, GError ** error);
gboolean talk_service_client_recv_acquire_call_route (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_acquire_call_ticket (TalkServiceIf * iface, gchar ** _return, const gchar * to, TalkException ** e, GError ** error);
gboolean talk_service_client_send_acquire_call_ticket (TalkServiceIf * iface, const gchar * to, GError ** error);
gboolean talk_service_client_recv_acquire_call_ticket (TalkServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_acquire_encrypted_access_token (TalkServiceIf * iface, gchar ** _return, const FeatureType featureType, TalkException ** e, GError ** error);
gboolean talk_service_client_send_acquire_encrypted_access_token (TalkServiceIf * iface, const FeatureType featureType, GError ** error);
gboolean talk_service_client_recv_acquire_encrypted_access_token (TalkServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_add_sns_id (TalkServiceIf * iface, gchar ** _return, const SnsIdType snsIdType, const gchar * snsAccessToken, TalkException ** e, GError ** error);
gboolean talk_service_client_send_add_sns_id (TalkServiceIf * iface, const SnsIdType snsIdType, const gchar * snsAccessToken, GError ** error);
gboolean talk_service_client_recv_add_sns_id (TalkServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_block_contact (TalkServiceIf * iface, const gint32 reqSeq, const gchar * id, TalkException ** e, GError ** error);
gboolean talk_service_client_send_block_contact (TalkServiceIf * iface, const gint32 reqSeq, const gchar * id, GError ** error);
gboolean talk_service_client_recv_block_contact (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_block_recommendation (TalkServiceIf * iface, const gint32 reqSeq, const gchar * id, TalkException ** e, GError ** error);
gboolean talk_service_client_send_block_recommendation (TalkServiceIf * iface, const gint32 reqSeq, const gchar * id, GError ** error);
gboolean talk_service_client_recv_block_recommendation (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_cancel_group_invitation (TalkServiceIf * iface, const gint32 reqSeq, const gchar * groupId, const GPtrArray * contactIds, TalkException ** e, GError ** error);
gboolean talk_service_client_send_cancel_group_invitation (TalkServiceIf * iface, const gint32 reqSeq, const gchar * groupId, const GPtrArray * contactIds, GError ** error);
gboolean talk_service_client_recv_cancel_group_invitation (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_change_verification_method (TalkServiceIf * iface, VerificationSessionData ** _return, const gchar * sessionId, const VerificationMethod method, TalkException ** e, GError ** error);
gboolean talk_service_client_send_change_verification_method (TalkServiceIf * iface, const gchar * sessionId, const VerificationMethod method, GError ** error);
gboolean talk_service_client_recv_change_verification_method (TalkServiceIf * iface, VerificationSessionData ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_clear_identity_credential (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_send_clear_identity_credential (TalkServiceIf * iface, GError ** error);
gboolean talk_service_client_recv_clear_identity_credential (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_clear_message_box (TalkServiceIf * iface, const gchar * channelId, const gchar * messageBoxId, TalkException ** e, GError ** error);
gboolean talk_service_client_send_clear_message_box (TalkServiceIf * iface, const gchar * channelId, const gchar * messageBoxId, GError ** error);
gboolean talk_service_client_recv_clear_message_box (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_close_proximity_match (TalkServiceIf * iface, const gchar * sessionId, TalkException ** e, GError ** error);
gboolean talk_service_client_send_close_proximity_match (TalkServiceIf * iface, const gchar * sessionId, GError ** error);
gboolean talk_service_client_recv_close_proximity_match (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_commit_send_message (TalkServiceIf * iface, GHashTable ** _return, const gint32 seq, const gchar * messageId, const GPtrArray * receiverMids, TalkException ** e, GError ** error);
gboolean talk_service_client_send_commit_send_message (TalkServiceIf * iface, const gint32 seq, const gchar * messageId, const GPtrArray * receiverMids, GError ** error);
gboolean talk_service_client_recv_commit_send_message (TalkServiceIf * iface, GHashTable ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_commit_send_messages (TalkServiceIf * iface, GHashTable ** _return, const gint32 seq, const GPtrArray * messageIds, const GPtrArray * receiverMids, TalkException ** e, GError ** error);
gboolean talk_service_client_send_commit_send_messages (TalkServiceIf * iface, const gint32 seq, const GPtrArray * messageIds, const GPtrArray * receiverMids, GError ** error);
gboolean talk_service_client_recv_commit_send_messages (TalkServiceIf * iface, GHashTable ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_commit_update_profile (TalkServiceIf * iface, GHashTable ** _return, const gint32 seq, const GArray * attrs, const GPtrArray * receiverMids, TalkException ** e, GError ** error);
gboolean talk_service_client_send_commit_update_profile (TalkServiceIf * iface, const gint32 seq, const GArray * attrs, const GPtrArray * receiverMids, GError ** error);
gboolean talk_service_client_recv_commit_update_profile (TalkServiceIf * iface, GHashTable ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_confirm_email (TalkServiceIf * iface, const gchar * verifier, const gchar * pinCode, TalkException ** e, GError ** error);
gboolean talk_service_client_send_confirm_email (TalkServiceIf * iface, const gchar * verifier, const gchar * pinCode, GError ** error);
gboolean talk_service_client_recv_confirm_email (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_create_group (TalkServiceIf * iface, Group ** _return, const gint32 seq, const gchar * name, const GPtrArray * contactIds, TalkException ** e, GError ** error);
gboolean talk_service_client_send_create_group (TalkServiceIf * iface, const gint32 seq, const gchar * name, const GPtrArray * contactIds, GError ** error);
gboolean talk_service_client_recv_create_group (TalkServiceIf * iface, Group ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_create_qrcode_base64_image (TalkServiceIf * iface, gchar ** _return, const gchar * url, const gchar * characterSet, const gint32 imageSize, const gint32 x, const gint32 y, const gint32 width, const gint32 height, TalkException ** e, GError ** error);
gboolean talk_service_client_send_create_qrcode_base64_image (TalkServiceIf * iface, const gchar * url, const gchar * characterSet, const gint32 imageSize, const gint32 x, const gint32 y, const gint32 width, const gint32 height, GError ** error);
gboolean talk_service_client_recv_create_qrcode_base64_image (TalkServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_create_room (TalkServiceIf * iface, Room ** _return, const gint32 reqSeq, const GPtrArray * contactIds, TalkException ** e, GError ** error);
gboolean talk_service_client_send_create_room (TalkServiceIf * iface, const gint32 reqSeq, const GPtrArray * contactIds, GError ** error);
gboolean talk_service_client_recv_create_room (TalkServiceIf * iface, Room ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_create_session (TalkServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_send_create_session (TalkServiceIf * iface, GError ** error);
gboolean talk_service_client_recv_create_session (TalkServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_fetch_announcements (TalkServiceIf * iface, GPtrArray ** _return, const gint32 lastFetchedIndex, TalkException ** e, GError ** error);
gboolean talk_service_client_send_fetch_announcements (TalkServiceIf * iface, const gint32 lastFetchedIndex, GError ** error);
gboolean talk_service_client_recv_fetch_announcements (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_fetch_messages (TalkServiceIf * iface, GPtrArray ** _return, const gint64 localTs, const gint32 count, TalkException ** e, GError ** error);
gboolean talk_service_client_send_fetch_messages (TalkServiceIf * iface, const gint64 localTs, const gint32 count, GError ** error);
gboolean talk_service_client_recv_fetch_messages (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_fetch_operations (TalkServiceIf * iface, GPtrArray ** _return, const gint64 localRev, const gint32 count, ShouldSyncException ** e, GError ** error);
gboolean talk_service_client_send_fetch_operations (TalkServiceIf * iface, const gint64 localRev, const gint32 count, GError ** error);
gboolean talk_service_client_recv_fetch_operations (TalkServiceIf * iface, GPtrArray ** _return, ShouldSyncException ** e, GError ** error);
gboolean talk_service_client_fetch_ops (TalkServiceIf * iface, GPtrArray ** _return, const gint64 localRev, const gint32 count, const gint64 globalRev, const gint64 individualRev, ShouldSyncException ** e, GError ** error);
gboolean talk_service_client_send_fetch_ops (TalkServiceIf * iface, const gint64 localRev, const gint32 count, const gint64 globalRev, const gint64 individualRev, GError ** error);
gboolean talk_service_client_recv_fetch_ops (TalkServiceIf * iface, GPtrArray ** _return, ShouldSyncException ** e, GError ** error);
gboolean talk_service_client_find_and_add_contacts_by_email (TalkServiceIf * iface, GHashTable ** _return, const gint32 reqSeq, const GHashTable * emails, TalkException ** e, GError ** error);
gboolean talk_service_client_send_find_and_add_contacts_by_email (TalkServiceIf * iface, const gint32 reqSeq, const GHashTable * emails, GError ** error);
gboolean talk_service_client_recv_find_and_add_contacts_by_email (TalkServiceIf * iface, GHashTable ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_find_and_add_contacts_by_mid (TalkServiceIf * iface, GHashTable ** _return, const gint32 reqSeq, const gchar * mid, const ContactType type, const gchar * reference, TalkException ** e, GError ** error);
gboolean talk_service_client_send_find_and_add_contacts_by_mid (TalkServiceIf * iface, const gint32 reqSeq, const gchar * mid, const ContactType type, const gchar * reference, GError ** error);
gboolean talk_service_client_recv_find_and_add_contacts_by_mid (TalkServiceIf * iface, GHashTable ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_find_group_by_ticket_v2 (TalkServiceIf * iface, Group ** _return, const gchar * ticketId, TalkException ** e, GError ** error);
gboolean talk_service_client_send_find_group_by_ticket_v2 (TalkServiceIf * iface, const gchar * ticketId, GError ** error);
gboolean talk_service_client_recv_find_group_by_ticket_v2 (TalkServiceIf * iface, Group ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_find_and_add_contacts_by_phone (TalkServiceIf * iface, GHashTable ** _return, const gint32 reqSeq, const GHashTable * phones, TalkException ** e, GError ** error);
gboolean talk_service_client_send_find_and_add_contacts_by_phone (TalkServiceIf * iface, const gint32 reqSeq, const GHashTable * phones, GError ** error);
gboolean talk_service_client_recv_find_and_add_contacts_by_phone (TalkServiceIf * iface, GHashTable ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_friend_requests (TalkServiceIf * iface, GPtrArray ** _return, const FriendRequestDirection direction, const gint64 lastSeenSeqId, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_friend_requests (TalkServiceIf * iface, const FriendRequestDirection direction, const gint64 lastSeenSeqId, GError ** error);
gboolean talk_service_client_recv_get_friend_requests (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_remove_friend_request (TalkServiceIf * iface, const FriendRequestDirection direction, const gchar * midOrEMid, TalkException ** e, GError ** error);
gboolean talk_service_client_send_remove_friend_request (TalkServiceIf * iface, const FriendRequestDirection direction, const gchar * midOrEMid, GError ** error);
gboolean talk_service_client_recv_remove_friend_request (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_find_and_add_contacts_by_userid (TalkServiceIf * iface, GHashTable ** _return, const gint32 reqSeq, const gchar * userid, TalkException ** e, GError ** error);
gboolean talk_service_client_send_find_and_add_contacts_by_userid (TalkServiceIf * iface, const gint32 reqSeq, const gchar * userid, GError ** error);
gboolean talk_service_client_recv_find_and_add_contacts_by_userid (TalkServiceIf * iface, GHashTable ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_find_contact_by_userid (TalkServiceIf * iface, Contact ** _return, const gchar * userid, TalkException ** e, GError ** error);
gboolean talk_service_client_send_find_contact_by_userid (TalkServiceIf * iface, const gchar * userid, GError ** error);
gboolean talk_service_client_recv_find_contact_by_userid (TalkServiceIf * iface, Contact ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_find_contact_by_user_ticket (TalkServiceIf * iface, Contact ** _return, const gchar * ticketIdWithTag, TalkException ** e, GError ** error);
gboolean talk_service_client_send_find_contact_by_user_ticket (TalkServiceIf * iface, const gchar * ticketIdWithTag, GError ** error);
gboolean talk_service_client_recv_find_contact_by_user_ticket (TalkServiceIf * iface, Contact ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_find_contacts_by_email (TalkServiceIf * iface, GHashTable ** _return, const GHashTable * emails, TalkException ** e, GError ** error);
gboolean talk_service_client_send_find_contacts_by_email (TalkServiceIf * iface, const GHashTable * emails, GError ** error);
gboolean talk_service_client_recv_find_contacts_by_email (TalkServiceIf * iface, GHashTable ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_find_contacts_by_phone (TalkServiceIf * iface, GHashTable ** _return, const GHashTable * phones, TalkException ** e, GError ** error);
gboolean talk_service_client_send_find_contacts_by_phone (TalkServiceIf * iface, const GHashTable * phones, GError ** error);
gboolean talk_service_client_recv_find_contacts_by_phone (TalkServiceIf * iface, GHashTable ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_find_sns_id_user_status (TalkServiceIf * iface, SnsIdUserStatus ** _return, const SnsIdType snsIdType, const gchar * snsAccessToken, const gchar * udidHash, TalkException ** e, GError ** error);
gboolean talk_service_client_send_find_sns_id_user_status (TalkServiceIf * iface, const SnsIdType snsIdType, const gchar * snsAccessToken, const gchar * udidHash, GError ** error);
gboolean talk_service_client_recv_find_sns_id_user_status (TalkServiceIf * iface, SnsIdUserStatus ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_finish_update_verification (TalkServiceIf * iface, const gchar * sessionId, TalkException ** e, GError ** error);
gboolean talk_service_client_send_finish_update_verification (TalkServiceIf * iface, const gchar * sessionId, GError ** error);
gboolean talk_service_client_recv_finish_update_verification (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_generate_user_ticket (TalkServiceIf * iface, Ticket ** _return, const gint64 expirationTime, const gint32 maxUseCount, TalkException ** e, GError ** error);
gboolean talk_service_client_send_generate_user_ticket (TalkServiceIf * iface, const gint64 expirationTime, const gint32 maxUseCount, GError ** error);
gboolean talk_service_client_recv_generate_user_ticket (TalkServiceIf * iface, Ticket ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_destroy_message (TalkServiceIf * iface, const gint32 seq, const gchar * chatId, const gchar * messageId, const gint8 sessionId, TalkException ** e, GError ** error);
gboolean talk_service_client_send_destroy_message (TalkServiceIf * iface, const gint32 seq, const gchar * chatId, const gchar * messageId, const gint8 sessionId, GError ** error);
gboolean talk_service_client_recv_destroy_message (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_get_accepted_proximity_matches (TalkServiceIf * iface, GHashTable ** _return, const gchar * sessionId, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_accepted_proximity_matches (TalkServiceIf * iface, const gchar * sessionId, GError ** error);
gboolean talk_service_client_recv_get_accepted_proximity_matches (TalkServiceIf * iface, GHashTable ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_active_buddy_subscriber_ids (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_active_buddy_subscriber_ids (TalkServiceIf * iface, GError ** error);
gboolean talk_service_client_recv_get_active_buddy_subscriber_ids (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_all_contact_ids (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_all_contact_ids (TalkServiceIf * iface, GError ** error);
gboolean talk_service_client_recv_get_all_contact_ids (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_auth_qrcode (TalkServiceIf * iface, AuthQrcode ** _return, const gboolean keepLoggedIn, const gchar * systemName, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_auth_qrcode (TalkServiceIf * iface, const gboolean keepLoggedIn, const gchar * systemName, GError ** error);
gboolean talk_service_client_recv_get_auth_qrcode (TalkServiceIf * iface, AuthQrcode ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_blocked_contact_ids (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_blocked_contact_ids (TalkServiceIf * iface, GError ** error);
gboolean talk_service_client_recv_get_blocked_contact_ids (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_register_with_phone_number (TalkServiceIf * iface, RegisterWithPhoneNumberResult ** _return, const gchar * sessionId, const gchar * migrationPincodeSessionId, TalkException ** e, GError ** error);
gboolean talk_service_client_send_register_with_phone_number (TalkServiceIf * iface, const gchar * sessionId, const gchar * migrationPincodeSessionId, GError ** error);
gboolean talk_service_client_recv_register_with_phone_number (TalkServiceIf * iface, RegisterWithPhoneNumberResult ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_register_with_phone_number_and_password (TalkServiceIf * iface, RegisterWithPhoneNumberResult ** _return, const gchar * sessionId, const gchar * keynm, const gchar * encrypted, TalkException ** e, GError ** error);
gboolean talk_service_client_send_register_with_phone_number_and_password (TalkServiceIf * iface, const gchar * sessionId, const gchar * keynm, const gchar * encrypted, GError ** error);
gboolean talk_service_client_recv_register_with_phone_number_and_password (TalkServiceIf * iface, RegisterWithPhoneNumberResult ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_analytics_info (TalkServiceIf * iface, AnalyticsInfo ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_analytics_info (TalkServiceIf * iface, GError ** error);
gboolean talk_service_client_recv_get_analytics_info (TalkServiceIf * iface, AnalyticsInfo ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_report_client_statistics (TalkServiceIf * iface, const gint32 reqSeq, const ReportCategory category, const gint32 count, TalkException ** e, GError ** error);
gboolean talk_service_client_send_report_client_statistics (TalkServiceIf * iface, const gint32 reqSeq, const ReportCategory category, const gint32 count, GError ** error);
gboolean talk_service_client_recv_report_client_statistics (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_verify_phone_number_for_login (TalkServiceIf * iface, gchar ** _return, const gchar * verifierFromPhone, const gchar * pinCodeForPhone, const gchar * verifierFromLogin, TalkException ** e, GError ** error);
gboolean talk_service_client_send_verify_phone_number_for_login (TalkServiceIf * iface, const gchar * verifierFromPhone, const gchar * pinCodeForPhone, const gchar * verifierFromLogin, GError ** error);
gboolean talk_service_client_recv_verify_phone_number_for_login (TalkServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_verify_phone_number (TalkServiceIf * iface, PhoneVerificationResult ** _return, const gchar * sessionId, const gchar * pinCode, const gchar * udidHash, const gchar * migrationPincodeSessionId, const gchar * oldUdidHash, TalkException ** e, GError ** error);
gboolean talk_service_client_send_verify_phone_number (TalkServiceIf * iface, const gchar * sessionId, const gchar * pinCode, const gchar * udidHash, const gchar * migrationPincodeSessionId, const gchar * oldUdidHash, GError ** error);
gboolean talk_service_client_recv_verify_phone_number (TalkServiceIf * iface, PhoneVerificationResult ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_blocked_contact_ids_by_range (TalkServiceIf * iface, GPtrArray ** _return, const gint32 start, const gint32 count, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_blocked_contact_ids_by_range (TalkServiceIf * iface, const gint32 start, const gint32 count, GError ** error);
gboolean talk_service_client_recv_get_blocked_contact_ids_by_range (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_blocked_recommendation_ids (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_blocked_recommendation_ids (TalkServiceIf * iface, GError ** error);
gboolean talk_service_client_recv_get_blocked_recommendation_ids (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_buddy_blocker_ids (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_buddy_blocker_ids (TalkServiceIf * iface, GError ** error);
gboolean talk_service_client_recv_get_buddy_blocker_ids (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_buddy_location (TalkServiceIf * iface, Geolocation ** _return, const gchar * mid, const gint32 index, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_buddy_location (TalkServiceIf * iface, const gchar * mid, const gint32 index, GError ** error);
gboolean talk_service_client_recv_get_buddy_location (TalkServiceIf * iface, Geolocation ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_compact_contacts_modified_since (TalkServiceIf * iface, GPtrArray ** _return, const gint64 timestamp, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_compact_contacts_modified_since (TalkServiceIf * iface, const gint64 timestamp, GError ** error);
gboolean talk_service_client_recv_get_compact_contacts_modified_since (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_compact_group (TalkServiceIf * iface, Group ** _return, const gchar * groupId, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_compact_group (TalkServiceIf * iface, const gchar * groupId, GError ** error);
gboolean talk_service_client_recv_get_compact_group (TalkServiceIf * iface, Group ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_compact_room (TalkServiceIf * iface, Room ** _return, const gchar * roomId, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_compact_room (TalkServiceIf * iface, const gchar * roomId, GError ** error);
gboolean talk_service_client_recv_get_compact_room (TalkServiceIf * iface, Room ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_contact (TalkServiceIf * iface, Contact ** _return, const gchar * id, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_contact (TalkServiceIf * iface, const gchar * id, GError ** error);
gboolean talk_service_client_recv_get_contact (TalkServiceIf * iface, Contact ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_contacts (TalkServiceIf * iface, GPtrArray ** _return, const GPtrArray * ids, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_contacts (TalkServiceIf * iface, const GPtrArray * ids, GError ** error);
gboolean talk_service_client_recv_get_contacts (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_contact_with_friend_request_status (TalkServiceIf * iface, Contact ** _return, const gchar * id, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_contact_with_friend_request_status (TalkServiceIf * iface, const gchar * id, GError ** error);
gboolean talk_service_client_recv_get_contact_with_friend_request_status (TalkServiceIf * iface, Contact ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_country_with_request_ip (TalkServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_country_with_request_ip (TalkServiceIf * iface, GError ** error);
gboolean talk_service_client_recv_get_country_with_request_ip (TalkServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_favorite_mids (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_favorite_mids (TalkServiceIf * iface, GError ** error);
gboolean talk_service_client_recv_get_favorite_mids (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_group (TalkServiceIf * iface, Group ** _return, const gchar * groupId, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_group (TalkServiceIf * iface, const gchar * groupId, GError ** error);
gboolean talk_service_client_recv_get_group (TalkServiceIf * iface, Group ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_group_ids_invited (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_group_ids_invited (TalkServiceIf * iface, GError ** error);
gboolean talk_service_client_recv_get_group_ids_invited (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_group_ids_joined (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_group_ids_joined (TalkServiceIf * iface, GError ** error);
gboolean talk_service_client_recv_get_group_ids_joined (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_groups (TalkServiceIf * iface, GPtrArray ** _return, const GPtrArray * groupIds, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_groups (TalkServiceIf * iface, const GPtrArray * groupIds, GError ** error);
gboolean talk_service_client_recv_get_groups (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_hidden_contact_mids (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_hidden_contact_mids (TalkServiceIf * iface, GError ** error);
gboolean talk_service_client_recv_get_hidden_contact_mids (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_identity_identifier (TalkServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_identity_identifier (TalkServiceIf * iface, GError ** error);
gboolean talk_service_client_recv_get_identity_identifier (TalkServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_last_announcement_index (TalkServiceIf * iface, gint32* _return, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_last_announcement_index (TalkServiceIf * iface, GError ** error);
gboolean talk_service_client_recv_get_last_announcement_index (TalkServiceIf * iface, gint32* _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_last_op_revision (TalkServiceIf * iface, gint64* _return, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_last_op_revision (TalkServiceIf * iface, GError ** error);
gboolean talk_service_client_recv_get_last_op_revision (TalkServiceIf * iface, gint64* _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_suggest_revisions (TalkServiceIf * iface, SuggestDictionaryRevisions ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_suggest_revisions (TalkServiceIf * iface, GError ** error);
gboolean talk_service_client_recv_get_suggest_revisions (TalkServiceIf * iface, SuggestDictionaryRevisions ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_previous_messages_v2_with_read_count (TalkServiceIf * iface, GPtrArray ** _return, const gchar * messageBoxId, const MessageBoxV2MessageId * endMessageId, const gint32 messagesCount, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_previous_messages_v2_with_read_count (TalkServiceIf * iface, const gchar * messageBoxId, const MessageBoxV2MessageId * endMessageId, const gint32 messagesCount, GError ** error);
gboolean talk_service_client_recv_get_previous_messages_v2_with_read_count (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_message_box (TalkServiceIf * iface, TMessageBox ** _return, const gchar * channelId, const gchar * messageBoxId, const gint32 lastMessagesCount, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_message_box (TalkServiceIf * iface, const gchar * channelId, const gchar * messageBoxId, const gint32 lastMessagesCount, GError ** error);
gboolean talk_service_client_recv_get_message_box (TalkServiceIf * iface, TMessageBox ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_message_box_compact_wrap_up (TalkServiceIf * iface, TMessageBoxWrapUp ** _return, const gchar * mid, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_message_box_compact_wrap_up (TalkServiceIf * iface, const gchar * mid, GError ** error);
gboolean talk_service_client_recv_get_message_box_compact_wrap_up (TalkServiceIf * iface, TMessageBoxWrapUp ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_message_box_compact_wrap_up_list (TalkServiceIf * iface, TMessageBoxWrapUpResponse ** _return, const gint32 start, const gint32 messageBoxCount, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_message_box_compact_wrap_up_list (TalkServiceIf * iface, const gint32 start, const gint32 messageBoxCount, GError ** error);
gboolean talk_service_client_recv_get_message_box_compact_wrap_up_list (TalkServiceIf * iface, TMessageBoxWrapUpResponse ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_message_box_list (TalkServiceIf * iface, GPtrArray ** _return, const gchar * channelId, const gint32 lastMessagesCount, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_message_box_list (TalkServiceIf * iface, const gchar * channelId, const gint32 lastMessagesCount, GError ** error);
gboolean talk_service_client_recv_get_message_box_list (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_message_box_list_by_status (TalkServiceIf * iface, GPtrArray ** _return, const gchar * channelId, const gint32 lastMessagesCount, const gint32 status, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_message_box_list_by_status (TalkServiceIf * iface, const gchar * channelId, const gint32 lastMessagesCount, const gint32 status, GError ** error);
gboolean talk_service_client_recv_get_message_box_list_by_status (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_message_box_wrap_up (TalkServiceIf * iface, TMessageBoxWrapUp ** _return, const gchar * mid, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_message_box_wrap_up (TalkServiceIf * iface, const gchar * mid, GError ** error);
gboolean talk_service_client_recv_get_message_box_wrap_up (TalkServiceIf * iface, TMessageBoxWrapUp ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_message_box_wrap_up_list (TalkServiceIf * iface, TMessageBoxWrapUpResponse ** _return, const gint32 start, const gint32 messageBoxCount, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_message_box_wrap_up_list (TalkServiceIf * iface, const gint32 start, const gint32 messageBoxCount, GError ** error);
gboolean talk_service_client_recv_get_message_box_wrap_up_list (TalkServiceIf * iface, TMessageBoxWrapUpResponse ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_messages_by_sequence_number (TalkServiceIf * iface, GPtrArray ** _return, const gchar * channelId, const gchar * messageBoxId, const gint64 startSeq, const gint64 endSeq, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_messages_by_sequence_number (TalkServiceIf * iface, const gchar * channelId, const gchar * messageBoxId, const gint64 startSeq, const gint64 endSeq, GError ** error);
gboolean talk_service_client_recv_get_messages_by_sequence_number (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_next_messages (TalkServiceIf * iface, GPtrArray ** _return, const gchar * messageBoxId, const gint64 startSeq, const gint32 messagesCount, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_next_messages (TalkServiceIf * iface, const gchar * messageBoxId, const gint64 startSeq, const gint32 messagesCount, GError ** error);
gboolean talk_service_client_recv_get_next_messages (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_notification_policy (TalkServiceIf * iface, GArray ** _return, const CarrierCode carrier, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_notification_policy (TalkServiceIf * iface, const CarrierCode carrier, GError ** error);
gboolean talk_service_client_recv_get_notification_policy (TalkServiceIf * iface, GArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_previous_messages (TalkServiceIf * iface, GPtrArray ** _return, const gchar * messageBoxId, const gint64 endSeq, const gint32 messagesCount, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_previous_messages (TalkServiceIf * iface, const gchar * messageBoxId, const gint64 endSeq, const gint32 messagesCount, GError ** error);
gboolean talk_service_client_recv_get_previous_messages (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_profile (TalkServiceIf * iface, Profile ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_profile (TalkServiceIf * iface, GError ** error);
gboolean talk_service_client_recv_get_profile (TalkServiceIf * iface, Profile ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_proximity_match_candidate_list (TalkServiceIf * iface, ProximityMatchCandidateResult ** _return, const gchar * sessionId, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_proximity_match_candidate_list (TalkServiceIf * iface, const gchar * sessionId, GError ** error);
gboolean talk_service_client_recv_get_proximity_match_candidate_list (TalkServiceIf * iface, ProximityMatchCandidateResult ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_proximity_match_candidates (TalkServiceIf * iface, GHashTable ** _return, const gchar * sessionId, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_proximity_match_candidates (TalkServiceIf * iface, const gchar * sessionId, GError ** error);
gboolean talk_service_client_recv_get_proximity_match_candidates (TalkServiceIf * iface, GHashTable ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_recent_messages (TalkServiceIf * iface, GPtrArray ** _return, const gchar * messageBoxId, const gint32 messagesCount, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_recent_messages (TalkServiceIf * iface, const gchar * messageBoxId, const gint32 messagesCount, GError ** error);
gboolean talk_service_client_recv_get_recent_messages (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_recommendation_ids (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_recommendation_ids (TalkServiceIf * iface, GError ** error);
gboolean talk_service_client_recv_get_recommendation_ids (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_room (TalkServiceIf * iface, Room ** _return, const gchar * roomId, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_room (TalkServiceIf * iface, const gchar * roomId, GError ** error);
gboolean talk_service_client_recv_get_room (TalkServiceIf * iface, Room ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_r_s_a_key_info (TalkServiceIf * iface, RSAKey ** _return, const IdentityProvider provider, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_r_s_a_key_info (TalkServiceIf * iface, const IdentityProvider provider, GError ** error);
gboolean talk_service_client_recv_get_r_s_a_key_info (TalkServiceIf * iface, RSAKey ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_server_time (TalkServiceIf * iface, gint64* _return, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_server_time (TalkServiceIf * iface, GError ** error);
gboolean talk_service_client_recv_get_server_time (TalkServiceIf * iface, gint64* _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_sessions (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_sessions (TalkServiceIf * iface, GError ** error);
gboolean talk_service_client_recv_get_sessions (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_settings (TalkServiceIf * iface, Settings ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_settings (TalkServiceIf * iface, GError ** error);
gboolean talk_service_client_recv_get_settings (TalkServiceIf * iface, Settings ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_groups_v2 (TalkServiceIf * iface, GPtrArray ** _return, const GPtrArray * groupIds, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_groups_v2 (TalkServiceIf * iface, const GPtrArray * groupIds, GError ** error);
gboolean talk_service_client_recv_get_groups_v2 (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_settings_attributes (TalkServiceIf * iface, Settings ** _return, const gint32 attrBitset, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_settings_attributes (TalkServiceIf * iface, const gint32 attrBitset, GError ** error);
gboolean talk_service_client_recv_get_settings_attributes (TalkServiceIf * iface, Settings ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_system_configuration (TalkServiceIf * iface, SystemConfiguration ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_system_configuration (TalkServiceIf * iface, GError ** error);
gboolean talk_service_client_recv_get_system_configuration (TalkServiceIf * iface, SystemConfiguration ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_user_ticket (TalkServiceIf * iface, Ticket ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_user_ticket (TalkServiceIf * iface, GError ** error);
gboolean talk_service_client_recv_get_user_ticket (TalkServiceIf * iface, Ticket ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_wap_invitation (TalkServiceIf * iface, WapInvitation ** _return, const gchar * invitationHash, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_wap_invitation (TalkServiceIf * iface, const gchar * invitationHash, GError ** error);
gboolean talk_service_client_recv_get_wap_invitation (TalkServiceIf * iface, WapInvitation ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_invalidate_user_ticket (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_send_invalidate_user_ticket (TalkServiceIf * iface, GError ** error);
gboolean talk_service_client_recv_invalidate_user_ticket (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_invite_friends_by_sms (TalkServiceIf * iface, const GPtrArray * phoneNumberList, TalkException ** e, GError ** error);
gboolean talk_service_client_send_invite_friends_by_sms (TalkServiceIf * iface, const GPtrArray * phoneNumberList, GError ** error);
gboolean talk_service_client_recv_invite_friends_by_sms (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_invite_into_group (TalkServiceIf * iface, const gint32 reqSeq, const gchar * groupId, const GPtrArray * contactIds, TalkException ** e, GError ** error);
gboolean talk_service_client_send_invite_into_group (TalkServiceIf * iface, const gint32 reqSeq, const gchar * groupId, const GPtrArray * contactIds, GError ** error);
gboolean talk_service_client_recv_invite_into_group (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_invite_into_room (TalkServiceIf * iface, const gint32 reqSeq, const gchar * roomId, const GPtrArray * contactIds, TalkException ** e, GError ** error);
gboolean talk_service_client_send_invite_into_room (TalkServiceIf * iface, const gint32 reqSeq, const gchar * roomId, const GPtrArray * contactIds, GError ** error);
gboolean talk_service_client_recv_invite_into_room (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_invite_via_email (TalkServiceIf * iface, const gint32 reqSeq, const gchar * email, const gchar * name, TalkException ** e, GError ** error);
gboolean talk_service_client_send_invite_via_email (TalkServiceIf * iface, const gint32 reqSeq, const gchar * email, const gchar * name, GError ** error);
gboolean talk_service_client_recv_invite_via_email (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_is_identity_identifier_available (TalkServiceIf * iface, gboolean* _return, const IdentityProvider provider, const gchar * identifier, TalkException ** e, GError ** error);
gboolean talk_service_client_send_is_identity_identifier_available (TalkServiceIf * iface, const IdentityProvider provider, const gchar * identifier, GError ** error);
gboolean talk_service_client_recv_is_identity_identifier_available (TalkServiceIf * iface, gboolean* _return, TalkException ** e, GError ** error);
gboolean talk_service_client_is_userid_available (TalkServiceIf * iface, gboolean* _return, const gchar * userid, TalkException ** e, GError ** error);
gboolean talk_service_client_send_is_userid_available (TalkServiceIf * iface, const gchar * userid, GError ** error);
gboolean talk_service_client_recv_is_userid_available (TalkServiceIf * iface, gboolean* _return, TalkException ** e, GError ** error);
gboolean talk_service_client_kickout_from_group (TalkServiceIf * iface, const gint32 reqSeq, const gchar * groupId, const GPtrArray * contactIds, TalkException ** e, GError ** error);
gboolean talk_service_client_send_kickout_from_group (TalkServiceIf * iface, const gint32 reqSeq, const gchar * groupId, const GPtrArray * contactIds, GError ** error);
gboolean talk_service_client_recv_kickout_from_group (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_reissue_group_ticket (TalkServiceIf * iface, gchar ** _return, const gchar * groupMid, TalkException ** e, GError ** error);
gboolean talk_service_client_send_reissue_group_ticket (TalkServiceIf * iface, const gchar * groupMid, GError ** error);
gboolean talk_service_client_recv_reissue_group_ticket (TalkServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_find_group_by_ticket (TalkServiceIf * iface, Group ** _return, const gchar * ticketId, TalkException ** e, GError ** error);
gboolean talk_service_client_send_find_group_by_ticket (TalkServiceIf * iface, const gchar * ticketId, GError ** error);
gboolean talk_service_client_recv_find_group_by_ticket (TalkServiceIf * iface, Group ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_leave_group (TalkServiceIf * iface, const gint32 reqSeq, const gchar * groupId, TalkException ** e, GError ** error);
gboolean talk_service_client_send_leave_group (TalkServiceIf * iface, const gint32 reqSeq, const gchar * groupId, GError ** error);
gboolean talk_service_client_recv_leave_group (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_leave_room (TalkServiceIf * iface, const gint32 reqSeq, const gchar * roomId, TalkException ** e, GError ** error);
gboolean talk_service_client_send_leave_room (TalkServiceIf * iface, const gint32 reqSeq, const gchar * roomId, GError ** error);
gboolean talk_service_client_recv_leave_room (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_login_with_identity_credential (TalkServiceIf * iface, gchar ** _return, const IdentityProvider identityProvider, const gchar * identifier, const gchar * password, const gboolean keepLoggedIn, const gchar * accessLocation, const gchar * systemName, const gchar * certificate, TalkException ** e, GError ** error);
gboolean talk_service_client_send_login_with_identity_credential (TalkServiceIf * iface, const IdentityProvider identityProvider, const gchar * identifier, const gchar * password, const gboolean keepLoggedIn, const gchar * accessLocation, const gchar * systemName, const gchar * certificate, GError ** error);
gboolean talk_service_client_recv_login_with_identity_credential (TalkServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_login_with_identity_credential_for_certificate (TalkServiceIf * iface, LoginResult ** _return, const IdentityProvider identityProvider, const gchar * identifier, const gchar * password, const gboolean keepLoggedIn, const gchar * accessLocation, const gchar * systemName, const gchar * certificate, TalkException ** e, GError ** error);
gboolean talk_service_client_send_login_with_identity_credential_for_certificate (TalkServiceIf * iface, const IdentityProvider identityProvider, const gchar * identifier, const gchar * password, const gboolean keepLoggedIn, const gchar * accessLocation, const gchar * systemName, const gchar * certificate, GError ** error);
gboolean talk_service_client_recv_login_with_identity_credential_for_certificate (TalkServiceIf * iface, LoginResult ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_login_with_verifier (TalkServiceIf * iface, gchar ** _return, const gchar * verifier, TalkException ** e, GError ** error);
gboolean talk_service_client_send_login_with_verifier (TalkServiceIf * iface, const gchar * verifier, GError ** error);
gboolean talk_service_client_recv_login_with_verifier (TalkServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_login_with_verifier_for_cerificate (TalkServiceIf * iface, LoginResult ** _return, const gchar * verifier, TalkException ** e, GError ** error);
gboolean talk_service_client_send_login_with_verifier_for_cerificate (TalkServiceIf * iface, const gchar * verifier, GError ** error);
gboolean talk_service_client_recv_login_with_verifier_for_cerificate (TalkServiceIf * iface, LoginResult ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_login_with_verifier_for_certificate (TalkServiceIf * iface, LoginResult ** _return, const gchar * verifier, TalkException ** e, GError ** error);
gboolean talk_service_client_send_login_with_verifier_for_certificate (TalkServiceIf * iface, const gchar * verifier, GError ** error);
gboolean talk_service_client_recv_login_with_verifier_for_certificate (TalkServiceIf * iface, LoginResult ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_logout (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_send_logout (TalkServiceIf * iface, GError ** error);
gboolean talk_service_client_recv_logout (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_logout_session (TalkServiceIf * iface, const gchar * tokenKey, TalkException ** e, GError ** error);
gboolean talk_service_client_send_logout_session (TalkServiceIf * iface, const gchar * tokenKey, GError ** error);
gboolean talk_service_client_recv_logout_session (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_noop (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_send_noop (TalkServiceIf * iface, GError ** error);
gboolean talk_service_client_recv_noop (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_notified_redirect (TalkServiceIf * iface, const GHashTable * paramMap, TalkException ** e, GError ** error);
gboolean talk_service_client_send_notified_redirect (TalkServiceIf * iface, const GHashTable * paramMap, GError ** error);
gboolean talk_service_client_recv_notified_redirect (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_notify_buddy_on_air (TalkServiceIf * iface, GHashTable ** _return, const gint32 seq, const GPtrArray * receiverMids, TalkException ** e, GError ** error);
gboolean talk_service_client_send_notify_buddy_on_air (TalkServiceIf * iface, const gint32 seq, const GPtrArray * receiverMids, GError ** error);
gboolean talk_service_client_recv_notify_buddy_on_air (TalkServiceIf * iface, GHashTable ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_notify_individual_event (TalkServiceIf * iface, const NotificationStatus notificationStatus, const GPtrArray * receiverMids, TalkException ** e, GError ** error);
gboolean talk_service_client_send_notify_individual_event (TalkServiceIf * iface, const NotificationStatus notificationStatus, const GPtrArray * receiverMids, GError ** error);
gboolean talk_service_client_recv_notify_individual_event (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_notify_installed (TalkServiceIf * iface, const gchar * udidHash, const gchar * applicationTypeWithExtensions, TalkException ** e, GError ** error);
gboolean talk_service_client_send_notify_installed (TalkServiceIf * iface, const gchar * udidHash, const gchar * applicationTypeWithExtensions, GError ** error);
gboolean talk_service_client_recv_notify_installed (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_notify_registration_complete (TalkServiceIf * iface, const gchar * udidHash, const gchar * applicationTypeWithExtensions, TalkException ** e, GError ** error);
gboolean talk_service_client_send_notify_registration_complete (TalkServiceIf * iface, const gchar * udidHash, const gchar * applicationTypeWithExtensions, GError ** error);
gboolean talk_service_client_recv_notify_registration_complete (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_notify_sleep (TalkServiceIf * iface, const gint64 lastRev, const gint32 badge, TalkException ** e, GError ** error);
gboolean talk_service_client_send_notify_sleep (TalkServiceIf * iface, const gint64 lastRev, const gint32 badge, GError ** error);
gboolean talk_service_client_recv_notify_sleep (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_notify_updated (TalkServiceIf * iface, const gint64 lastRev, const DeviceInfo * deviceInfo, TalkException ** e, GError ** error);
gboolean talk_service_client_send_notify_updated (TalkServiceIf * iface, const gint64 lastRev, const DeviceInfo * deviceInfo, GError ** error);
gboolean talk_service_client_recv_notify_updated (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_open_proximity_match (TalkServiceIf * iface, gchar ** _return, const Location * location, TalkException ** e, GError ** error);
gboolean talk_service_client_send_open_proximity_match (TalkServiceIf * iface, const Location * location, GError ** error);
gboolean talk_service_client_recv_open_proximity_match (TalkServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_register_buddy_user (TalkServiceIf * iface, gchar ** _return, const gchar * buddyId, const gchar * registrarPassword, TalkException ** e, GError ** error);
gboolean talk_service_client_send_register_buddy_user (TalkServiceIf * iface, const gchar * buddyId, const gchar * registrarPassword, GError ** error);
gboolean talk_service_client_recv_register_buddy_user (TalkServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_register_buddy_userid (TalkServiceIf * iface, const gint32 seq, const gchar * userid, TalkException ** e, GError ** error);
gboolean talk_service_client_send_register_buddy_userid (TalkServiceIf * iface, const gint32 seq, const gchar * userid, GError ** error);
gboolean talk_service_client_recv_register_buddy_userid (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_register_device (TalkServiceIf * iface, gchar ** _return, const gchar * sessionId, TalkException ** e, GError ** error);
gboolean talk_service_client_send_register_device (TalkServiceIf * iface, const gchar * sessionId, GError ** error);
gboolean talk_service_client_recv_register_device (TalkServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_register_device_with_identity_credential (TalkServiceIf * iface, gchar ** _return, const gchar * sessionId, const IdentityProvider provider, const gchar * identifier, const gchar * verifier, TalkException ** e, GError ** error);
gboolean talk_service_client_send_register_device_with_identity_credential (TalkServiceIf * iface, const gchar * sessionId, const IdentityProvider provider, const gchar * identifier, const gchar * verifier, GError ** error);
gboolean talk_service_client_recv_register_device_with_identity_credential (TalkServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_register_device_without_phone_number (TalkServiceIf * iface, gchar ** _return, const gchar * region, const gchar * udidHash, const DeviceInfo * deviceInfo, TalkException ** e, GError ** error);
gboolean talk_service_client_send_register_device_without_phone_number (TalkServiceIf * iface, const gchar * region, const gchar * udidHash, const DeviceInfo * deviceInfo, GError ** error);
gboolean talk_service_client_recv_register_device_without_phone_number (TalkServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_register_device_without_phone_number_with_identity_credential (TalkServiceIf * iface, gchar ** _return, const gchar * region, const gchar * udidHash, const DeviceInfo * deviceInfo, const IdentityProvider provider, const gchar * identifier, const gchar * verifier, const gchar * mid, const gchar * migrationPincodeSessionId, TalkException ** e, GError ** error);
gboolean talk_service_client_send_register_device_without_phone_number_with_identity_credential (TalkServiceIf * iface, const gchar * region, const gchar * udidHash, const DeviceInfo * deviceInfo, const IdentityProvider provider, const gchar * identifier, const gchar * verifier, const gchar * mid, const gchar * migrationPincodeSessionId, GError ** error);
gboolean talk_service_client_recv_register_device_without_phone_number_with_identity_credential (TalkServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_register_userid (TalkServiceIf * iface, gboolean* _return, const gint32 reqSeq, const gchar * userid, TalkException ** e, GError ** error);
gboolean talk_service_client_send_register_userid (TalkServiceIf * iface, const gint32 reqSeq, const gchar * userid, GError ** error);
gboolean talk_service_client_recv_register_userid (TalkServiceIf * iface, gboolean* _return, TalkException ** e, GError ** error);
gboolean talk_service_client_register_wap_device (TalkServiceIf * iface, gchar ** _return, const gchar * invitationHash, const gchar * guidHash, const gchar * email, const DeviceInfo * deviceInfo, TalkException ** e, GError ** error);
gboolean talk_service_client_send_register_wap_device (TalkServiceIf * iface, const gchar * invitationHash, const gchar * guidHash, const gchar * email, const DeviceInfo * deviceInfo, GError ** error);
gboolean talk_service_client_recv_register_wap_device (TalkServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_register_with_existing_sns_id_and_identity_credential (TalkServiceIf * iface, gchar ** _return, const IdentityCredential * identityCredential, const gchar * region, const gchar * udidHash, const DeviceInfo * deviceInfo, TalkException ** e, GError ** error);
gboolean talk_service_client_send_register_with_existing_sns_id_and_identity_credential (TalkServiceIf * iface, const IdentityCredential * identityCredential, const gchar * region, const gchar * udidHash, const DeviceInfo * deviceInfo, GError ** error);
gboolean talk_service_client_recv_register_with_existing_sns_id_and_identity_credential (TalkServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_register_with_sns_id (TalkServiceIf * iface, RegisterWithSnsIdResult ** _return, const SnsIdType snsIdType, const gchar * snsAccessToken, const gchar * region, const gchar * udidHash, const DeviceInfo * deviceInfo, const gchar * mid, TalkException ** e, GError ** error);
gboolean talk_service_client_send_register_with_sns_id (TalkServiceIf * iface, const SnsIdType snsIdType, const gchar * snsAccessToken, const gchar * region, const gchar * udidHash, const DeviceInfo * deviceInfo, const gchar * mid, GError ** error);
gboolean talk_service_client_recv_register_with_sns_id (TalkServiceIf * iface, RegisterWithSnsIdResult ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_register_with_sns_id_and_identity_credential (TalkServiceIf * iface, gchar ** _return, const SnsIdType snsIdType, const gchar * snsAccessToken, const IdentityCredential * identityCredential, const gchar * region, const gchar * udidHash, const DeviceInfo * deviceInfo, TalkException ** e, GError ** error);
gboolean talk_service_client_send_register_with_sns_id_and_identity_credential (TalkServiceIf * iface, const SnsIdType snsIdType, const gchar * snsAccessToken, const IdentityCredential * identityCredential, const gchar * region, const gchar * udidHash, const DeviceInfo * deviceInfo, GError ** error);
gboolean talk_service_client_recv_register_with_sns_id_and_identity_credential (TalkServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_reissue_device_credential (TalkServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_send_reissue_device_credential (TalkServiceIf * iface, GError ** error);
gboolean talk_service_client_recv_reissue_device_credential (TalkServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_reissue_user_ticket (TalkServiceIf * iface, gchar ** _return, const gint64 expirationTime, const gint32 maxUseCount, TalkException ** e, GError ** error);
gboolean talk_service_client_send_reissue_user_ticket (TalkServiceIf * iface, const gint64 expirationTime, const gint32 maxUseCount, GError ** error);
gboolean talk_service_client_recv_reissue_user_ticket (TalkServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_message_read_range (TalkServiceIf * iface, GPtrArray ** _return, const GPtrArray * chatIds, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_message_read_range (TalkServiceIf * iface, const GPtrArray * chatIds, GError ** error);
gboolean talk_service_client_recv_get_message_read_range (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_reject_group_invitation (TalkServiceIf * iface, const gint32 reqSeq, const gchar * groupId, TalkException ** e, GError ** error);
gboolean talk_service_client_send_reject_group_invitation (TalkServiceIf * iface, const gint32 reqSeq, const gchar * groupId, GError ** error);
gboolean talk_service_client_recv_reject_group_invitation (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_release_session (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_send_release_session (TalkServiceIf * iface, GError ** error);
gboolean talk_service_client_recv_release_session (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_remove_all_messages (TalkServiceIf * iface, const gint32 seq, const gchar * lastMessageId, TalkException ** e, GError ** error);
gboolean talk_service_client_send_remove_all_messages (TalkServiceIf * iface, const gint32 seq, const gchar * lastMessageId, GError ** error);
gboolean talk_service_client_recv_remove_all_messages (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_remove_buddy_location (TalkServiceIf * iface, const gchar * mid, const gint32 index, TalkException ** e, GError ** error);
gboolean talk_service_client_send_remove_buddy_location (TalkServiceIf * iface, const gchar * mid, const gint32 index, GError ** error);
gboolean talk_service_client_recv_remove_buddy_location (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_remove_message (TalkServiceIf * iface, gboolean* _return, const gchar * messageId, TalkException ** e, GError ** error);
gboolean talk_service_client_send_remove_message (TalkServiceIf * iface, const gchar * messageId, GError ** error);
gboolean talk_service_client_recv_remove_message (TalkServiceIf * iface, gboolean* _return, TalkException ** e, GError ** error);
gboolean talk_service_client_make_user_add_myself_as_contact (TalkServiceIf * iface, ContactTransition ** _return, const gchar * contactOwnerMid, TalkException ** e, GError ** error);
gboolean talk_service_client_send_make_user_add_myself_as_contact (TalkServiceIf * iface, const gchar * contactOwnerMid, GError ** error);
gboolean talk_service_client_recv_make_user_add_myself_as_contact (TalkServiceIf * iface, ContactTransition ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_remove_message_from_my_home (TalkServiceIf * iface, gboolean* _return, const gchar * messageId, TalkException ** e, GError ** error);
gboolean talk_service_client_send_remove_message_from_my_home (TalkServiceIf * iface, const gchar * messageId, GError ** error);
gboolean talk_service_client_recv_remove_message_from_my_home (TalkServiceIf * iface, gboolean* _return, TalkException ** e, GError ** error);
gboolean talk_service_client_remove_sns_id (TalkServiceIf * iface, gchar ** _return, const SnsIdType snsIdType, TalkException ** e, GError ** error);
gboolean talk_service_client_send_remove_sns_id (TalkServiceIf * iface, const SnsIdType snsIdType, GError ** error);
gboolean talk_service_client_recv_remove_sns_id (TalkServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_report (TalkServiceIf * iface, const gint64 syncOpRevision, const SyncCategory category, const gchar * report, TalkException ** e, GError ** error);
gboolean talk_service_client_send_report (TalkServiceIf * iface, const gint64 syncOpRevision, const SyncCategory category, const gchar * report, GError ** error);
gboolean talk_service_client_recv_report (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_report_contacts (TalkServiceIf * iface, GPtrArray ** _return, const gint64 syncOpRevision, const SyncCategory category, const GPtrArray * contactReports, const SyncActionType actionType, TalkException ** e, GError ** error);
gboolean talk_service_client_send_report_contacts (TalkServiceIf * iface, const gint64 syncOpRevision, const SyncCategory category, const GPtrArray * contactReports, const SyncActionType actionType, GError ** error);
gboolean talk_service_client_recv_report_contacts (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_report_groups (TalkServiceIf * iface, const gint64 syncOpRevision, const GPtrArray * groups, TalkException ** e, GError ** error);
gboolean talk_service_client_send_report_groups (TalkServiceIf * iface, const gint64 syncOpRevision, const GPtrArray * groups, GError ** error);
gboolean talk_service_client_recv_report_groups (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_report_profile (TalkServiceIf * iface, const gint64 syncOpRevision, const Profile * profile, TalkException ** e, GError ** error);
gboolean talk_service_client_send_report_profile (TalkServiceIf * iface, const gint64 syncOpRevision, const Profile * profile, GError ** error);
gboolean talk_service_client_recv_report_profile (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_report_rooms (TalkServiceIf * iface, const gint64 syncOpRevision, const GPtrArray * rooms, TalkException ** e, GError ** error);
gboolean talk_service_client_send_report_rooms (TalkServiceIf * iface, const gint64 syncOpRevision, const GPtrArray * rooms, GError ** error);
gboolean talk_service_client_recv_report_rooms (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_find_and_add_contact_by_meta_tag (TalkServiceIf * iface, Contact ** _return, const gint32 reqSeq, const gchar * userid, const gchar * reference, TalkException ** e, GError ** error);
gboolean talk_service_client_send_find_and_add_contact_by_meta_tag (TalkServiceIf * iface, const gint32 reqSeq, const gchar * userid, const gchar * reference, GError ** error);
gboolean talk_service_client_recv_find_and_add_contact_by_meta_tag (TalkServiceIf * iface, Contact ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_report_settings (TalkServiceIf * iface, const gint64 syncOpRevision, const Settings * settings, TalkException ** e, GError ** error);
gboolean talk_service_client_send_report_settings (TalkServiceIf * iface, const gint64 syncOpRevision, const Settings * settings, GError ** error);
gboolean talk_service_client_recv_report_settings (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_report_spam (TalkServiceIf * iface, const gchar * chatMid, const GPtrArray * memberMids, const GArray * spammerReasons, const GPtrArray * senderMids, const GPtrArray * spamMessageIds, const GPtrArray * spamMessages, TalkException ** e, GError ** error);
gboolean talk_service_client_send_report_spam (TalkServiceIf * iface, const gchar * chatMid, const GPtrArray * memberMids, const GArray * spammerReasons, const GPtrArray * senderMids, const GPtrArray * spamMessageIds, const GPtrArray * spamMessages, GError ** error);
gboolean talk_service_client_recv_report_spam (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_report_spammer (TalkServiceIf * iface, const gchar * spammerMid, const GArray * spammerReasons, const GPtrArray * spamMessageIds, TalkException ** e, GError ** error);
gboolean talk_service_client_send_report_spammer (TalkServiceIf * iface, const gchar * spammerMid, const GArray * spammerReasons, const GPtrArray * spamMessageIds, GError ** error);
gboolean talk_service_client_recv_report_spammer (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_request_account_password_reset (TalkServiceIf * iface, const IdentityProvider provider, const gchar * identifier, const gchar * locale, TalkException ** e, GError ** error);
gboolean talk_service_client_send_request_account_password_reset (TalkServiceIf * iface, const IdentityProvider provider, const gchar * identifier, const gchar * locale, GError ** error);
gboolean talk_service_client_recv_request_account_password_reset (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_request_email_confirmation (TalkServiceIf * iface, EmailConfirmationSession ** _return, const EmailConfirmation * emailConfirmation, TalkException ** e, GError ** error);
gboolean talk_service_client_send_request_email_confirmation (TalkServiceIf * iface, const EmailConfirmation * emailConfirmation, GError ** error);
gboolean talk_service_client_recv_request_email_confirmation (TalkServiceIf * iface, EmailConfirmationSession ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_request_identity_unbind (TalkServiceIf * iface, const IdentityProvider provider, const gchar * identifier, TalkException ** e, GError ** error);
gboolean talk_service_client_send_request_identity_unbind (TalkServiceIf * iface, const IdentityProvider provider, const gchar * identifier, GError ** error);
gboolean talk_service_client_recv_request_identity_unbind (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_resend_email_confirmation (TalkServiceIf * iface, EmailConfirmationSession ** _return, const gchar * verifier, TalkException ** e, GError ** error);
gboolean talk_service_client_send_resend_email_confirmation (TalkServiceIf * iface, const gchar * verifier, GError ** error);
gboolean talk_service_client_recv_resend_email_confirmation (TalkServiceIf * iface, EmailConfirmationSession ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_resend_pin_code (TalkServiceIf * iface, const gchar * sessionId, TalkException ** e, GError ** error);
gboolean talk_service_client_send_resend_pin_code (TalkServiceIf * iface, const gchar * sessionId, GError ** error);
gboolean talk_service_client_recv_resend_pin_code (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_resend_pin_code_by_s_m_s (TalkServiceIf * iface, const gchar * sessionId, TalkException ** e, GError ** error);
gboolean talk_service_client_send_resend_pin_code_by_s_m_s (TalkServiceIf * iface, const gchar * sessionId, GError ** error);
gboolean talk_service_client_recv_resend_pin_code_by_s_m_s (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_send_chat_checked (TalkServiceIf * iface, const gint32 seq, const gchar * consumer, const gchar * lastMessageId, TalkException ** e, GError ** error);
gboolean talk_service_client_send_send_chat_checked (TalkServiceIf * iface, const gint32 seq, const gchar * consumer, const gchar * lastMessageId, GError ** error);
gboolean talk_service_client_recv_send_chat_checked (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_send_message_await_commit (TalkServiceIf * iface, CommitMessageResult ** _return, const gint32 seq, const Message * message, TalkException ** e, GError ** error);
gboolean talk_service_client_send_send_message_await_commit (TalkServiceIf * iface, const gint32 seq, const Message * message, GError ** error);
gboolean talk_service_client_recv_send_message_await_commit (TalkServiceIf * iface, CommitMessageResult ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_send_chat_removed (TalkServiceIf * iface, const gint32 seq, const gchar * consumer, const gchar * lastMessageId, TalkException ** e, GError ** error);
gboolean talk_service_client_send_send_chat_removed (TalkServiceIf * iface, const gint32 seq, const gchar * consumer, const gchar * lastMessageId, GError ** error);
gboolean talk_service_client_recv_send_chat_removed (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_send_content_preview_updated (TalkServiceIf * iface, GHashTable ** _return, const gint32 esq, const gchar * messageId, const GPtrArray * receiverMids, TalkException ** e, GError ** error);
gboolean talk_service_client_send_send_content_preview_updated (TalkServiceIf * iface, const gint32 esq, const gchar * messageId, const GPtrArray * receiverMids, GError ** error);
gboolean talk_service_client_recv_send_content_preview_updated (TalkServiceIf * iface, GHashTable ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_send_content_receipt (TalkServiceIf * iface, const gint32 seq, const gchar * consumer, const gchar * messageId, TalkException ** e, GError ** error);
gboolean talk_service_client_send_send_content_receipt (TalkServiceIf * iface, const gint32 seq, const gchar * consumer, const gchar * messageId, GError ** error);
gboolean talk_service_client_recv_send_content_receipt (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_send_dummy_push (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_send_send_dummy_push (TalkServiceIf * iface, GError ** error);
gboolean talk_service_client_recv_send_dummy_push (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_remove_e2_e_e_public_key (TalkServiceIf * iface, const E2EEPublicKey * publicKey, TalkException ** e, GError ** error);
gboolean talk_service_client_send_remove_e2_e_e_public_key (TalkServiceIf * iface, const E2EEPublicKey * publicKey, GError ** error);
gboolean talk_service_client_recv_remove_e2_e_e_public_key (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_negotiate_e2_e_e_public_key (TalkServiceIf * iface, E2EENegotiationResult ** _return, const gchar * mid, TalkException ** e, GError ** error);
gboolean talk_service_client_send_negotiate_e2_e_e_public_key (TalkServiceIf * iface, const gchar * mid, GError ** error);
gboolean talk_service_client_recv_negotiate_e2_e_e_public_key (TalkServiceIf * iface, E2EENegotiationResult ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_e2_e_e_public_key (TalkServiceIf * iface, E2EEPublicKey ** _return, const gchar * mid, const gint32 version, const gint32 keyId, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_e2_e_e_public_key (TalkServiceIf * iface, const gchar * mid, const gint32 version, const gint32 keyId, GError ** error);
gboolean talk_service_client_recv_get_e2_e_e_public_key (TalkServiceIf * iface, E2EEPublicKey ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_request_e2_e_e_key_exchange (TalkServiceIf * iface, const gint32 reqSeq, const GByteArray * temporalPublicKey, const E2EEPublicKey * publicKey, const GByteArray * verifier, TalkException ** e, GError ** error);
gboolean talk_service_client_send_request_e2_e_e_key_exchange (TalkServiceIf * iface, const gint32 reqSeq, const GByteArray * temporalPublicKey, const E2EEPublicKey * publicKey, const GByteArray * verifier, GError ** error);
gboolean talk_service_client_recv_request_e2_e_e_key_exchange (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_get_last_e2_e_e_public_keys (TalkServiceIf * iface, GHashTable ** _return, const gchar * chatMid, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_last_e2_e_e_public_keys (TalkServiceIf * iface, const gchar * chatMid, GError ** error);
gboolean talk_service_client_recv_get_last_e2_e_e_public_keys (TalkServiceIf * iface, GHashTable ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_register_e2_e_e_public_key (TalkServiceIf * iface, E2EEPublicKey ** _return, const gint32 reqSeq, const E2EEPublicKey * publicKey, TalkException ** e, GError ** error);
gboolean talk_service_client_send_register_e2_e_e_public_key (TalkServiceIf * iface, const gint32 reqSeq, const E2EEPublicKey * publicKey, GError ** error);
gboolean talk_service_client_recv_register_e2_e_e_public_key (TalkServiceIf * iface, E2EEPublicKey ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_e2_e_e_public_keys (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_e2_e_e_public_keys (TalkServiceIf * iface, GError ** error);
gboolean talk_service_client_recv_get_e2_e_e_public_keys (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_e2_e_e_public_keys_ex (TalkServiceIf * iface, GPtrArray ** _return, const gboolean ignoreE2EEStatus, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_e2_e_e_public_keys_ex (TalkServiceIf * iface, const gboolean ignoreE2EEStatus, GError ** error);
gboolean talk_service_client_recv_get_e2_e_e_public_keys_ex (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_read_message_ops_in_bulk (TalkServiceIf * iface, GPtrArray ** _return, const GPtrArray * chatIds, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_read_message_ops_in_bulk (TalkServiceIf * iface, const GPtrArray * chatIds, GError ** error);
gboolean talk_service_client_recv_get_read_message_ops_in_bulk (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_send_event (TalkServiceIf * iface, Message ** _return, const gint32 seq, const Message * message, TalkException ** e, GError ** error);
gboolean talk_service_client_send_send_event (TalkServiceIf * iface, const gint32 seq, const Message * message, GError ** error);
gboolean talk_service_client_recv_send_event (TalkServiceIf * iface, Message ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_send_message (TalkServiceIf * iface, Message ** _return, const gint32 seq, const Message * message, TalkException ** e, GError ** error);
gboolean talk_service_client_send_send_message (TalkServiceIf * iface, const gint32 seq, const Message * message, GError ** error);
gboolean talk_service_client_recv_send_message (TalkServiceIf * iface, Message ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_send_message_ignored (TalkServiceIf * iface, const gint32 seq, const gchar * consumer, const GPtrArray * messageIds, TalkException ** e, GError ** error);
gboolean talk_service_client_send_send_message_ignored (TalkServiceIf * iface, const gint32 seq, const gchar * consumer, const GPtrArray * messageIds, GError ** error);
gboolean talk_service_client_recv_send_message_ignored (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_send_message_receipt (TalkServiceIf * iface, const gint32 seq, const gchar * consumer, const GPtrArray * messageIds, TalkException ** e, GError ** error);
gboolean talk_service_client_send_send_message_receipt (TalkServiceIf * iface, const gint32 seq, const gchar * consumer, const GPtrArray * messageIds, GError ** error);
gboolean talk_service_client_recv_send_message_receipt (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_find_contact_by_meta_tag (TalkServiceIf * iface, Contact ** _return, const gchar * userid, const gchar * reference, TalkException ** e, GError ** error);
gboolean talk_service_client_send_find_contact_by_meta_tag (TalkServiceIf * iface, const gchar * userid, const gchar * reference, GError ** error);
gboolean talk_service_client_recv_find_contact_by_meta_tag (TalkServiceIf * iface, Contact ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_send_message_to_my_home (TalkServiceIf * iface, Message ** _return, const gint32 seq, const Message * message, TalkException ** e, GError ** error);
gboolean talk_service_client_send_send_message_to_my_home (TalkServiceIf * iface, const gint32 seq, const Message * message, GError ** error);
gboolean talk_service_client_recv_send_message_to_my_home (TalkServiceIf * iface, Message ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_set_buddy_location (TalkServiceIf * iface, const gchar * mid, const gint32 index, const Geolocation * location, TalkException ** e, GError ** error);
gboolean talk_service_client_send_set_buddy_location (TalkServiceIf * iface, const gchar * mid, const gint32 index, const Geolocation * location, GError ** error);
gboolean talk_service_client_recv_set_buddy_location (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_set_identity_credential (TalkServiceIf * iface, const gchar * identifier, const gchar * verifier, const IdentityProvider provider, TalkException ** e, GError ** error);
gboolean talk_service_client_send_set_identity_credential (TalkServiceIf * iface, const gchar * identifier, const gchar * verifier, const IdentityProvider provider, GError ** error);
gboolean talk_service_client_recv_set_identity_credential (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_set_notifications_enabled (TalkServiceIf * iface, const gint32 reqSeq, const MIDType type, const gchar * target, const gboolean enablement, TalkException ** e, GError ** error);
gboolean talk_service_client_send_set_notifications_enabled (TalkServiceIf * iface, const gint32 reqSeq, const MIDType type, const gchar * target, const gboolean enablement, GError ** error);
gboolean talk_service_client_recv_set_notifications_enabled (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_start_update_verification (TalkServiceIf * iface, VerificationSessionData ** _return, const gchar * region, const CarrierCode carrier, const gchar * phone, const gchar * udidHash, const DeviceInfo * deviceInfo, const gchar * networkCode, const gchar * locale, TalkException ** e, GError ** error);
gboolean talk_service_client_send_start_update_verification (TalkServiceIf * iface, const gchar * region, const CarrierCode carrier, const gchar * phone, const gchar * udidHash, const DeviceInfo * deviceInfo, const gchar * networkCode, const gchar * locale, GError ** error);
gboolean talk_service_client_recv_start_update_verification (TalkServiceIf * iface, VerificationSessionData ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_start_verification (TalkServiceIf * iface, VerificationSessionData ** _return, const gchar * region, const CarrierCode carrier, const gchar * phone, const gchar * udidHash, const DeviceInfo * deviceInfo, const gchar * networkCode, const gchar * mid, const gchar * locale, const SIMInfo * simInfo, const gchar * oldUdidHash, TalkException ** e, GError ** error);
gboolean talk_service_client_send_start_verification (TalkServiceIf * iface, const gchar * region, const CarrierCode carrier, const gchar * phone, const gchar * udidHash, const DeviceInfo * deviceInfo, const gchar * networkCode, const gchar * mid, const gchar * locale, const SIMInfo * simInfo, const gchar * oldUdidHash, GError ** error);
gboolean talk_service_client_recv_start_verification (TalkServiceIf * iface, VerificationSessionData ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_update_group_preference_attribute (TalkServiceIf * iface, const gint32 reqSeq, const gchar * groupMid, const GHashTable * updatedAttrs, TalkException ** e, GError ** error);
gboolean talk_service_client_send_update_group_preference_attribute (TalkServiceIf * iface, const gint32 reqSeq, const gchar * groupMid, const GHashTable * updatedAttrs, GError ** error);
gboolean talk_service_client_recv_update_group_preference_attribute (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_create_room_v2 (TalkServiceIf * iface, Room ** _return, const gint32 reqSeq, const GPtrArray * contactIds, TalkException ** e, GError ** error);
gboolean talk_service_client_send_create_room_v2 (TalkServiceIf * iface, const gint32 reqSeq, const GPtrArray * contactIds, GError ** error);
gboolean talk_service_client_recv_create_room_v2 (TalkServiceIf * iface, Room ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_store_update_profile_attribute (TalkServiceIf * iface, const gint32 seq, const ProfileAttribute profileAttribute, const gchar * value, TalkException ** e, GError ** error);
gboolean talk_service_client_send_store_update_profile_attribute (TalkServiceIf * iface, const gint32 seq, const ProfileAttribute profileAttribute, const gchar * value, GError ** error);
gboolean talk_service_client_recv_store_update_profile_attribute (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_sync_contact_by_sns_ids (TalkServiceIf * iface, GPtrArray ** _return, const gint32 reqSeq, const GPtrArray * modifications, TalkException ** e, GError ** error);
gboolean talk_service_client_send_sync_contact_by_sns_ids (TalkServiceIf * iface, const gint32 reqSeq, const GPtrArray * modifications, GError ** error);
gboolean talk_service_client_recv_sync_contact_by_sns_ids (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_sync_contacts (TalkServiceIf * iface, GHashTable ** _return, const gint32 reqSeq, const GPtrArray * localContacts, TalkException ** e, GError ** error);
gboolean talk_service_client_send_sync_contacts (TalkServiceIf * iface, const gint32 reqSeq, const GPtrArray * localContacts, GError ** error);
gboolean talk_service_client_recv_sync_contacts (TalkServiceIf * iface, GHashTable ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_try_send_message (TalkServiceIf * iface, Message ** _return, const gint32 seq, const Message * message, TalkException ** e, GError ** error);
gboolean talk_service_client_send_try_send_message (TalkServiceIf * iface, const gint32 seq, const Message * message, GError ** error);
gboolean talk_service_client_recv_try_send_message (TalkServiceIf * iface, Message ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_next_messages_v2 (TalkServiceIf * iface, GPtrArray ** _return, const gchar * messageBoxId, const MessageBoxV2MessageId * startMessageId, const gint32 messagesCount, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_next_messages_v2 (TalkServiceIf * iface, const gchar * messageBoxId, const MessageBoxV2MessageId * startMessageId, const gint32 messagesCount, GError ** error);
gboolean talk_service_client_recv_get_next_messages_v2 (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_message_box_compact_wrap_up_v2 (TalkServiceIf * iface, TMessageBoxWrapUp ** _return, const gchar * messageBoxId, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_message_box_compact_wrap_up_v2 (TalkServiceIf * iface, const gchar * messageBoxId, GError ** error);
gboolean talk_service_client_recv_get_message_box_compact_wrap_up_v2 (TalkServiceIf * iface, TMessageBoxWrapUp ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_get_recent_messages_v2 (TalkServiceIf * iface, GPtrArray ** _return, const gchar * messageBoxId, const gint32 messagesCount, TalkException ** e, GError ** error);
gboolean talk_service_client_send_get_recent_messages_v2 (TalkServiceIf * iface, const gchar * messageBoxId, const gint32 messagesCount, GError ** error);
gboolean talk_service_client_recv_get_recent_messages_v2 (TalkServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_validate_contacts_on_bot (TalkServiceIf * iface, GHashTable ** _return, const GPtrArray * contacts, TalkException ** e, GError ** error);
gboolean talk_service_client_send_validate_contacts_on_bot (TalkServiceIf * iface, const GPtrArray * contacts, GError ** error);
gboolean talk_service_client_recv_validate_contacts_on_bot (TalkServiceIf * iface, GHashTable ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_try_friend_request (TalkServiceIf * iface, const gchar * midOrEMid, const FriendRequestMethod method, const gchar * friendRequestParams, TalkException ** e, GError ** error);
gboolean talk_service_client_send_try_friend_request (TalkServiceIf * iface, const gchar * midOrEMid, const FriendRequestMethod method, const gchar * friendRequestParams, GError ** error);
gboolean talk_service_client_recv_try_friend_request (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_unblock_contact (TalkServiceIf * iface, const gint32 reqSeq, const gchar * id, TalkException ** e, GError ** error);
gboolean talk_service_client_send_unblock_contact (TalkServiceIf * iface, const gint32 reqSeq, const gchar * id, GError ** error);
gboolean talk_service_client_recv_unblock_contact (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_unblock_recommendation (TalkServiceIf * iface, const gint32 reqSeq, const gchar * id, TalkException ** e, GError ** error);
gboolean talk_service_client_send_unblock_recommendation (TalkServiceIf * iface, const gint32 reqSeq, const gchar * id, GError ** error);
gboolean talk_service_client_recv_unblock_recommendation (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_unregister_user_and_device (TalkServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_send_unregister_user_and_device (TalkServiceIf * iface, GError ** error);
gboolean talk_service_client_recv_unregister_user_and_device (TalkServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_update_apns_device_token (TalkServiceIf * iface, const GByteArray * apnsDeviceToken, TalkException ** e, GError ** error);
gboolean talk_service_client_send_update_apns_device_token (TalkServiceIf * iface, const GByteArray * apnsDeviceToken, GError ** error);
gboolean talk_service_client_recv_update_apns_device_token (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_update_buddy_setting (TalkServiceIf * iface, const gchar * key, const gchar * value, TalkException ** e, GError ** error);
gboolean talk_service_client_send_update_buddy_setting (TalkServiceIf * iface, const gchar * key, const gchar * value, GError ** error);
gboolean talk_service_client_recv_update_buddy_setting (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_update_c2_d_m_registration_id (TalkServiceIf * iface, const gchar * registrationId, TalkException ** e, GError ** error);
gboolean talk_service_client_send_update_c2_d_m_registration_id (TalkServiceIf * iface, const gchar * registrationId, GError ** error);
gboolean talk_service_client_recv_update_c2_d_m_registration_id (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_update_contact_setting (TalkServiceIf * iface, const gint32 reqSeq, const gchar * mid, const ContactSetting flag, const gchar * value, TalkException ** e, GError ** error);
gboolean talk_service_client_send_update_contact_setting (TalkServiceIf * iface, const gint32 reqSeq, const gchar * mid, const ContactSetting flag, const gchar * value, GError ** error);
gboolean talk_service_client_recv_update_contact_setting (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_update_custom_mode_settings (TalkServiceIf * iface, const CustomMode customMode, const GHashTable * paramMap, TalkException ** e, GError ** error);
gboolean talk_service_client_send_update_custom_mode_settings (TalkServiceIf * iface, const CustomMode customMode, const GHashTable * paramMap, GError ** error);
gboolean talk_service_client_recv_update_custom_mode_settings (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_update_device_info (TalkServiceIf * iface, const gchar * deviceUid, const DeviceInfo * deviceInfo, TalkException ** e, GError ** error);
gboolean talk_service_client_send_update_device_info (TalkServiceIf * iface, const gchar * deviceUid, const DeviceInfo * deviceInfo, GError ** error);
gboolean talk_service_client_recv_update_device_info (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_update_group (TalkServiceIf * iface, const gint32 reqSeq, const Group * group, TalkException ** e, GError ** error);
gboolean talk_service_client_send_update_group (TalkServiceIf * iface, const gint32 reqSeq, const Group * group, GError ** error);
gboolean talk_service_client_recv_update_group (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_update_notification_token (TalkServiceIf * iface, const NotificationType type, const gchar * token, TalkException ** e, GError ** error);
gboolean talk_service_client_send_update_notification_token (TalkServiceIf * iface, const NotificationType type, const gchar * token, GError ** error);
gboolean talk_service_client_recv_update_notification_token (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_update_notification_token_with_bytes (TalkServiceIf * iface, const NotificationType type, const GByteArray * token, TalkException ** e, GError ** error);
gboolean talk_service_client_send_update_notification_token_with_bytes (TalkServiceIf * iface, const NotificationType type, const GByteArray * token, GError ** error);
gboolean talk_service_client_recv_update_notification_token_with_bytes (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_update_profile (TalkServiceIf * iface, const gint32 reqSeq, const Profile * profile, TalkException ** e, GError ** error);
gboolean talk_service_client_send_update_profile (TalkServiceIf * iface, const gint32 reqSeq, const Profile * profile, GError ** error);
gboolean talk_service_client_recv_update_profile (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_update_profile_attribute (TalkServiceIf * iface, const gint32 reqSeq, const ProfileAttribute attr, const gchar * value, TalkException ** e, GError ** error);
gboolean talk_service_client_send_update_profile_attribute (TalkServiceIf * iface, const gint32 reqSeq, const ProfileAttribute attr, const gchar * value, GError ** error);
gboolean talk_service_client_recv_update_profile_attribute (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_update_region (TalkServiceIf * iface, const gchar * region, TalkException ** e, GError ** error);
gboolean talk_service_client_send_update_region (TalkServiceIf * iface, const gchar * region, GError ** error);
gboolean talk_service_client_recv_update_region (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_update_settings (TalkServiceIf * iface, const gint32 reqSeq, const Settings * settings, TalkException ** e, GError ** error);
gboolean talk_service_client_send_update_settings (TalkServiceIf * iface, const gint32 reqSeq, const Settings * settings, GError ** error);
gboolean talk_service_client_recv_update_settings (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_update_settings2 (TalkServiceIf * iface, gint32* _return, const gint32 reqSeq, const Settings * settings, TalkException ** e, GError ** error);
gboolean talk_service_client_send_update_settings2 (TalkServiceIf * iface, const gint32 reqSeq, const Settings * settings, GError ** error);
gboolean talk_service_client_recv_update_settings2 (TalkServiceIf * iface, gint32* _return, TalkException ** e, GError ** error);
gboolean talk_service_client_update_settings_attribute (TalkServiceIf * iface, const gint32 reqSeq, const SettingsAttribute attr, const gchar * value, TalkException ** e, GError ** error);
gboolean talk_service_client_send_update_settings_attribute (TalkServiceIf * iface, const gint32 reqSeq, const SettingsAttribute attr, const gchar * value, GError ** error);
gboolean talk_service_client_recv_update_settings_attribute (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_update_settings_attributes (TalkServiceIf * iface, gint32* _return, const gint32 reqSeq, const gint32 attrBitset, const Settings * settings, TalkException ** e, GError ** error);
gboolean talk_service_client_send_update_settings_attributes (TalkServiceIf * iface, const gint32 reqSeq, const gint32 attrBitset, const Settings * settings, GError ** error);
gboolean talk_service_client_recv_update_settings_attributes (TalkServiceIf * iface, gint32* _return, TalkException ** e, GError ** error);
gboolean talk_service_client_verify_identity_credential (TalkServiceIf * iface, const IdentityProvider identityProvider, const gchar * identifier, const gchar * password, TalkException ** e, GError ** error);
gboolean talk_service_client_send_verify_identity_credential (TalkServiceIf * iface, const IdentityProvider identityProvider, const gchar * identifier, const gchar * password, GError ** error);
gboolean talk_service_client_recv_verify_identity_credential (TalkServiceIf * iface, TalkException ** e, GError ** error);
gboolean talk_service_client_verify_identity_credential_with_result (TalkServiceIf * iface, UserAuthStatus ** _return, const IdentityCredential * identityCredential, TalkException ** e, GError ** error);
gboolean talk_service_client_send_verify_identity_credential_with_result (TalkServiceIf * iface, const IdentityCredential * identityCredential, GError ** error);
gboolean talk_service_client_recv_verify_identity_credential_with_result (TalkServiceIf * iface, UserAuthStatus ** _return, TalkException ** e, GError ** error);
gboolean talk_service_client_verify_phone (TalkServiceIf * iface, VerificationResult* _return, const gchar * sessionId, const gchar * pinCode, const gchar * udidHash, TalkException ** e, GError ** error);
gboolean talk_service_client_send_verify_phone (TalkServiceIf * iface, const gchar * sessionId, const gchar * pinCode, const gchar * udidHash, GError ** error);
gboolean talk_service_client_recv_verify_phone (TalkServiceIf * iface, VerificationResult* _return, TalkException ** e, GError ** error);
gboolean talk_service_client_verify_qrcode (TalkServiceIf * iface, gchar ** _return, const gchar * verifier, const gchar * pinCode, TalkException ** e, GError ** error);
gboolean talk_service_client_send_verify_qrcode (TalkServiceIf * iface, const gchar * verifier, const gchar * pinCode, GError ** error);
gboolean talk_service_client_recv_verify_qrcode (TalkServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
void talk_service_client_set_property (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);
void talk_service_client_get_property (GObject *object, guint property_id, GValue *value, GParamSpec *pspec);

/* TalkService handler (abstract base class) */
struct _TalkServiceHandler
{
  GObject parent;
};
typedef struct _TalkServiceHandler TalkServiceHandler;

struct _TalkServiceHandlerClass
{
  GObjectClass parent;

  gboolean (*get_chat_room_announcements_bulk) (TalkServiceIf *iface, GHashTable ** _return, const GPtrArray * chatRoomMids, TalkException ** e, GError **error);
  gboolean (*get_chat_room_announcements) (TalkServiceIf *iface, GPtrArray ** _return, const gchar * chatRoomMid, TalkException ** e, GError **error);
  gboolean (*create_chat_room_announcement) (TalkServiceIf *iface, ChatRoomAnnouncement ** _return, const gint32 reqSeq, const gchar * chatRoomMid, const ChatRoomAnnouncementType type, const ChatRoomAnnouncementContents * contents, TalkException ** e, GError **error);
  gboolean (*remove_chat_room_announcement) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * chatRoomMid, const gint64 announcementSeq, TalkException ** e, GError **error);
  gboolean (*unsend_message) (TalkServiceIf *iface, const gint32 seq, const gchar * messageId, TalkException ** e, GError **error);
  gboolean (*get_group_without_members) (TalkServiceIf *iface, Group ** _return, const gchar * groupId, TalkException ** e, GError **error);
  gboolean (*request_resend_message) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * senderMid, const gchar * messageId, TalkException ** e, GError **error);
  gboolean (*respond_resend_message) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * receiverMid, const gchar * originalMessageId, const Message * resendMessage, const ErrorCode errorCode, TalkException ** e, GError **error);
  gboolean (*accept_group_invitation) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * groupId, TalkException ** e, GError **error);
  gboolean (*accept_group_invitation_by_ticket) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * GroupMid, const gchar * ticketId, TalkException ** e, GError **error);
  gboolean (*accept_proximity_matches) (TalkServiceIf *iface, const gchar * sessionId, const GHashTable * ids, TalkException ** e, GError **error);
  gboolean (*acquire_call_route) (TalkServiceIf *iface, GPtrArray ** _return, const gchar * to, TalkException ** e, GError **error);
  gboolean (*acquire_call_ticket) (TalkServiceIf *iface, gchar ** _return, const gchar * to, TalkException ** e, GError **error);
  gboolean (*acquire_encrypted_access_token) (TalkServiceIf *iface, gchar ** _return, const FeatureType featureType, TalkException ** e, GError **error);
  gboolean (*add_sns_id) (TalkServiceIf *iface, gchar ** _return, const SnsIdType snsIdType, const gchar * snsAccessToken, TalkException ** e, GError **error);
  gboolean (*block_contact) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * id, TalkException ** e, GError **error);
  gboolean (*block_recommendation) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * id, TalkException ** e, GError **error);
  gboolean (*cancel_group_invitation) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * groupId, const GPtrArray * contactIds, TalkException ** e, GError **error);
  gboolean (*change_verification_method) (TalkServiceIf *iface, VerificationSessionData ** _return, const gchar * sessionId, const VerificationMethod method, TalkException ** e, GError **error);
  gboolean (*clear_identity_credential) (TalkServiceIf *iface, TalkException ** e, GError **error);
  gboolean (*clear_message_box) (TalkServiceIf *iface, const gchar * channelId, const gchar * messageBoxId, TalkException ** e, GError **error);
  gboolean (*close_proximity_match) (TalkServiceIf *iface, const gchar * sessionId, TalkException ** e, GError **error);
  gboolean (*commit_send_message) (TalkServiceIf *iface, GHashTable ** _return, const gint32 seq, const gchar * messageId, const GPtrArray * receiverMids, TalkException ** e, GError **error);
  gboolean (*commit_send_messages) (TalkServiceIf *iface, GHashTable ** _return, const gint32 seq, const GPtrArray * messageIds, const GPtrArray * receiverMids, TalkException ** e, GError **error);
  gboolean (*commit_update_profile) (TalkServiceIf *iface, GHashTable ** _return, const gint32 seq, const GArray * attrs, const GPtrArray * receiverMids, TalkException ** e, GError **error);
  gboolean (*confirm_email) (TalkServiceIf *iface, const gchar * verifier, const gchar * pinCode, TalkException ** e, GError **error);
  gboolean (*create_group) (TalkServiceIf *iface, Group ** _return, const gint32 seq, const gchar * name, const GPtrArray * contactIds, TalkException ** e, GError **error);
  gboolean (*create_qrcode_base64_image) (TalkServiceIf *iface, gchar ** _return, const gchar * url, const gchar * characterSet, const gint32 imageSize, const gint32 x, const gint32 y, const gint32 width, const gint32 height, TalkException ** e, GError **error);
  gboolean (*create_room) (TalkServiceIf *iface, Room ** _return, const gint32 reqSeq, const GPtrArray * contactIds, TalkException ** e, GError **error);
  gboolean (*create_session) (TalkServiceIf *iface, gchar ** _return, TalkException ** e, GError **error);
  gboolean (*fetch_announcements) (TalkServiceIf *iface, GPtrArray ** _return, const gint32 lastFetchedIndex, TalkException ** e, GError **error);
  gboolean (*fetch_messages) (TalkServiceIf *iface, GPtrArray ** _return, const gint64 localTs, const gint32 count, TalkException ** e, GError **error);
  gboolean (*fetch_operations) (TalkServiceIf *iface, GPtrArray ** _return, const gint64 localRev, const gint32 count, ShouldSyncException ** e, GError **error);
  gboolean (*fetch_ops) (TalkServiceIf *iface, GPtrArray ** _return, const gint64 localRev, const gint32 count, const gint64 globalRev, const gint64 individualRev, ShouldSyncException ** e, GError **error);
  gboolean (*find_and_add_contacts_by_email) (TalkServiceIf *iface, GHashTable ** _return, const gint32 reqSeq, const GHashTable * emails, TalkException ** e, GError **error);
  gboolean (*find_and_add_contacts_by_mid) (TalkServiceIf *iface, GHashTable ** _return, const gint32 reqSeq, const gchar * mid, const ContactType type, const gchar * reference, TalkException ** e, GError **error);
  gboolean (*find_group_by_ticket_v2) (TalkServiceIf *iface, Group ** _return, const gchar * ticketId, TalkException ** e, GError **error);
  gboolean (*find_and_add_contacts_by_phone) (TalkServiceIf *iface, GHashTable ** _return, const gint32 reqSeq, const GHashTable * phones, TalkException ** e, GError **error);
  gboolean (*get_friend_requests) (TalkServiceIf *iface, GPtrArray ** _return, const FriendRequestDirection direction, const gint64 lastSeenSeqId, TalkException ** e, GError **error);
  gboolean (*remove_friend_request) (TalkServiceIf *iface, const FriendRequestDirection direction, const gchar * midOrEMid, TalkException ** e, GError **error);
  gboolean (*find_and_add_contacts_by_userid) (TalkServiceIf *iface, GHashTable ** _return, const gint32 reqSeq, const gchar * userid, TalkException ** e, GError **error);
  gboolean (*find_contact_by_userid) (TalkServiceIf *iface, Contact ** _return, const gchar * userid, TalkException ** e, GError **error);
  gboolean (*find_contact_by_user_ticket) (TalkServiceIf *iface, Contact ** _return, const gchar * ticketIdWithTag, TalkException ** e, GError **error);
  gboolean (*find_contacts_by_email) (TalkServiceIf *iface, GHashTable ** _return, const GHashTable * emails, TalkException ** e, GError **error);
  gboolean (*find_contacts_by_phone) (TalkServiceIf *iface, GHashTable ** _return, const GHashTable * phones, TalkException ** e, GError **error);
  gboolean (*find_sns_id_user_status) (TalkServiceIf *iface, SnsIdUserStatus ** _return, const SnsIdType snsIdType, const gchar * snsAccessToken, const gchar * udidHash, TalkException ** e, GError **error);
  gboolean (*finish_update_verification) (TalkServiceIf *iface, const gchar * sessionId, TalkException ** e, GError **error);
  gboolean (*generate_user_ticket) (TalkServiceIf *iface, Ticket ** _return, const gint64 expirationTime, const gint32 maxUseCount, TalkException ** e, GError **error);
  gboolean (*destroy_message) (TalkServiceIf *iface, const gint32 seq, const gchar * chatId, const gchar * messageId, const gint8 sessionId, TalkException ** e, GError **error);
  gboolean (*get_accepted_proximity_matches) (TalkServiceIf *iface, GHashTable ** _return, const gchar * sessionId, TalkException ** e, GError **error);
  gboolean (*get_active_buddy_subscriber_ids) (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_all_contact_ids) (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_auth_qrcode) (TalkServiceIf *iface, AuthQrcode ** _return, const gboolean keepLoggedIn, const gchar * systemName, TalkException ** e, GError **error);
  gboolean (*get_blocked_contact_ids) (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*register_with_phone_number) (TalkServiceIf *iface, RegisterWithPhoneNumberResult ** _return, const gchar * sessionId, const gchar * migrationPincodeSessionId, TalkException ** e, GError **error);
  gboolean (*register_with_phone_number_and_password) (TalkServiceIf *iface, RegisterWithPhoneNumberResult ** _return, const gchar * sessionId, const gchar * keynm, const gchar * encrypted, TalkException ** e, GError **error);
  gboolean (*get_analytics_info) (TalkServiceIf *iface, AnalyticsInfo ** _return, TalkException ** e, GError **error);
  gboolean (*report_client_statistics) (TalkServiceIf *iface, const gint32 reqSeq, const ReportCategory category, const gint32 count, TalkException ** e, GError **error);
  gboolean (*verify_phone_number_for_login) (TalkServiceIf *iface, gchar ** _return, const gchar * verifierFromPhone, const gchar * pinCodeForPhone, const gchar * verifierFromLogin, TalkException ** e, GError **error);
  gboolean (*verify_phone_number) (TalkServiceIf *iface, PhoneVerificationResult ** _return, const gchar * sessionId, const gchar * pinCode, const gchar * udidHash, const gchar * migrationPincodeSessionId, const gchar * oldUdidHash, TalkException ** e, GError **error);
  gboolean (*get_blocked_contact_ids_by_range) (TalkServiceIf *iface, GPtrArray ** _return, const gint32 start, const gint32 count, TalkException ** e, GError **error);
  gboolean (*get_blocked_recommendation_ids) (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_buddy_blocker_ids) (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_buddy_location) (TalkServiceIf *iface, Geolocation ** _return, const gchar * mid, const gint32 index, TalkException ** e, GError **error);
  gboolean (*get_compact_contacts_modified_since) (TalkServiceIf *iface, GPtrArray ** _return, const gint64 timestamp, TalkException ** e, GError **error);
  gboolean (*get_compact_group) (TalkServiceIf *iface, Group ** _return, const gchar * groupId, TalkException ** e, GError **error);
  gboolean (*get_compact_room) (TalkServiceIf *iface, Room ** _return, const gchar * roomId, TalkException ** e, GError **error);
  gboolean (*get_contact) (TalkServiceIf *iface, Contact ** _return, const gchar * id, TalkException ** e, GError **error);
  gboolean (*get_contacts) (TalkServiceIf *iface, GPtrArray ** _return, const GPtrArray * ids, TalkException ** e, GError **error);
  gboolean (*get_contact_with_friend_request_status) (TalkServiceIf *iface, Contact ** _return, const gchar * id, TalkException ** e, GError **error);
  gboolean (*get_country_with_request_ip) (TalkServiceIf *iface, gchar ** _return, TalkException ** e, GError **error);
  gboolean (*get_favorite_mids) (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_group) (TalkServiceIf *iface, Group ** _return, const gchar * groupId, TalkException ** e, GError **error);
  gboolean (*get_group_ids_invited) (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_group_ids_joined) (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_groups) (TalkServiceIf *iface, GPtrArray ** _return, const GPtrArray * groupIds, TalkException ** e, GError **error);
  gboolean (*get_hidden_contact_mids) (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_identity_identifier) (TalkServiceIf *iface, gchar ** _return, TalkException ** e, GError **error);
  gboolean (*get_last_announcement_index) (TalkServiceIf *iface, gint32* _return, TalkException ** e, GError **error);
  gboolean (*get_last_op_revision) (TalkServiceIf *iface, gint64* _return, TalkException ** e, GError **error);
  gboolean (*get_suggest_revisions) (TalkServiceIf *iface, SuggestDictionaryRevisions ** _return, TalkException ** e, GError **error);
  gboolean (*get_previous_messages_v2_with_read_count) (TalkServiceIf *iface, GPtrArray ** _return, const gchar * messageBoxId, const MessageBoxV2MessageId * endMessageId, const gint32 messagesCount, TalkException ** e, GError **error);
  gboolean (*get_message_box) (TalkServiceIf *iface, TMessageBox ** _return, const gchar * channelId, const gchar * messageBoxId, const gint32 lastMessagesCount, TalkException ** e, GError **error);
  gboolean (*get_message_box_compact_wrap_up) (TalkServiceIf *iface, TMessageBoxWrapUp ** _return, const gchar * mid, TalkException ** e, GError **error);
  gboolean (*get_message_box_compact_wrap_up_list) (TalkServiceIf *iface, TMessageBoxWrapUpResponse ** _return, const gint32 start, const gint32 messageBoxCount, TalkException ** e, GError **error);
  gboolean (*get_message_box_list) (TalkServiceIf *iface, GPtrArray ** _return, const gchar * channelId, const gint32 lastMessagesCount, TalkException ** e, GError **error);
  gboolean (*get_message_box_list_by_status) (TalkServiceIf *iface, GPtrArray ** _return, const gchar * channelId, const gint32 lastMessagesCount, const gint32 status, TalkException ** e, GError **error);
  gboolean (*get_message_box_wrap_up) (TalkServiceIf *iface, TMessageBoxWrapUp ** _return, const gchar * mid, TalkException ** e, GError **error);
  gboolean (*get_message_box_wrap_up_list) (TalkServiceIf *iface, TMessageBoxWrapUpResponse ** _return, const gint32 start, const gint32 messageBoxCount, TalkException ** e, GError **error);
  gboolean (*get_messages_by_sequence_number) (TalkServiceIf *iface, GPtrArray ** _return, const gchar * channelId, const gchar * messageBoxId, const gint64 startSeq, const gint64 endSeq, TalkException ** e, GError **error);
  gboolean (*get_next_messages) (TalkServiceIf *iface, GPtrArray ** _return, const gchar * messageBoxId, const gint64 startSeq, const gint32 messagesCount, TalkException ** e, GError **error);
  gboolean (*get_notification_policy) (TalkServiceIf *iface, GArray ** _return, const CarrierCode carrier, TalkException ** e, GError **error);
  gboolean (*get_previous_messages) (TalkServiceIf *iface, GPtrArray ** _return, const gchar * messageBoxId, const gint64 endSeq, const gint32 messagesCount, TalkException ** e, GError **error);
  gboolean (*get_profile) (TalkServiceIf *iface, Profile ** _return, TalkException ** e, GError **error);
  gboolean (*get_proximity_match_candidate_list) (TalkServiceIf *iface, ProximityMatchCandidateResult ** _return, const gchar * sessionId, TalkException ** e, GError **error);
  gboolean (*get_proximity_match_candidates) (TalkServiceIf *iface, GHashTable ** _return, const gchar * sessionId, TalkException ** e, GError **error);
  gboolean (*get_recent_messages) (TalkServiceIf *iface, GPtrArray ** _return, const gchar * messageBoxId, const gint32 messagesCount, TalkException ** e, GError **error);
  gboolean (*get_recommendation_ids) (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_room) (TalkServiceIf *iface, Room ** _return, const gchar * roomId, TalkException ** e, GError **error);
  gboolean (*get_r_s_a_key_info) (TalkServiceIf *iface, RSAKey ** _return, const IdentityProvider provider, TalkException ** e, GError **error);
  gboolean (*get_server_time) (TalkServiceIf *iface, gint64* _return, TalkException ** e, GError **error);
  gboolean (*get_sessions) (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_settings) (TalkServiceIf *iface, Settings ** _return, TalkException ** e, GError **error);
  gboolean (*get_groups_v2) (TalkServiceIf *iface, GPtrArray ** _return, const GPtrArray * groupIds, TalkException ** e, GError **error);
  gboolean (*get_settings_attributes) (TalkServiceIf *iface, Settings ** _return, const gint32 attrBitset, TalkException ** e, GError **error);
  gboolean (*get_system_configuration) (TalkServiceIf *iface, SystemConfiguration ** _return, TalkException ** e, GError **error);
  gboolean (*get_user_ticket) (TalkServiceIf *iface, Ticket ** _return, TalkException ** e, GError **error);
  gboolean (*get_wap_invitation) (TalkServiceIf *iface, WapInvitation ** _return, const gchar * invitationHash, TalkException ** e, GError **error);
  gboolean (*invalidate_user_ticket) (TalkServiceIf *iface, TalkException ** e, GError **error);
  gboolean (*invite_friends_by_sms) (TalkServiceIf *iface, const GPtrArray * phoneNumberList, TalkException ** e, GError **error);
  gboolean (*invite_into_group) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * groupId, const GPtrArray * contactIds, TalkException ** e, GError **error);
  gboolean (*invite_into_room) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * roomId, const GPtrArray * contactIds, TalkException ** e, GError **error);
  gboolean (*invite_via_email) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * email, const gchar * name, TalkException ** e, GError **error);
  gboolean (*is_identity_identifier_available) (TalkServiceIf *iface, gboolean* _return, const IdentityProvider provider, const gchar * identifier, TalkException ** e, GError **error);
  gboolean (*is_userid_available) (TalkServiceIf *iface, gboolean* _return, const gchar * userid, TalkException ** e, GError **error);
  gboolean (*kickout_from_group) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * groupId, const GPtrArray * contactIds, TalkException ** e, GError **error);
  gboolean (*reissue_group_ticket) (TalkServiceIf *iface, gchar ** _return, const gchar * groupMid, TalkException ** e, GError **error);
  gboolean (*find_group_by_ticket) (TalkServiceIf *iface, Group ** _return, const gchar * ticketId, TalkException ** e, GError **error);
  gboolean (*leave_group) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * groupId, TalkException ** e, GError **error);
  gboolean (*leave_room) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * roomId, TalkException ** e, GError **error);
  gboolean (*login_with_identity_credential) (TalkServiceIf *iface, gchar ** _return, const IdentityProvider identityProvider, const gchar * identifier, const gchar * password, const gboolean keepLoggedIn, const gchar * accessLocation, const gchar * systemName, const gchar * certificate, TalkException ** e, GError **error);
  gboolean (*login_with_identity_credential_for_certificate) (TalkServiceIf *iface, LoginResult ** _return, const IdentityProvider identityProvider, const gchar * identifier, const gchar * password, const gboolean keepLoggedIn, const gchar * accessLocation, const gchar * systemName, const gchar * certificate, TalkException ** e, GError **error);
  gboolean (*login_with_verifier) (TalkServiceIf *iface, gchar ** _return, const gchar * verifier, TalkException ** e, GError **error);
  gboolean (*login_with_verifier_for_cerificate) (TalkServiceIf *iface, LoginResult ** _return, const gchar * verifier, TalkException ** e, GError **error);
  gboolean (*login_with_verifier_for_certificate) (TalkServiceIf *iface, LoginResult ** _return, const gchar * verifier, TalkException ** e, GError **error);
  gboolean (*logout) (TalkServiceIf *iface, TalkException ** e, GError **error);
  gboolean (*logout_session) (TalkServiceIf *iface, const gchar * tokenKey, TalkException ** e, GError **error);
  gboolean (*noop) (TalkServiceIf *iface, TalkException ** e, GError **error);
  gboolean (*notified_redirect) (TalkServiceIf *iface, const GHashTable * paramMap, TalkException ** e, GError **error);
  gboolean (*notify_buddy_on_air) (TalkServiceIf *iface, GHashTable ** _return, const gint32 seq, const GPtrArray * receiverMids, TalkException ** e, GError **error);
  gboolean (*notify_individual_event) (TalkServiceIf *iface, const NotificationStatus notificationStatus, const GPtrArray * receiverMids, TalkException ** e, GError **error);
  gboolean (*notify_installed) (TalkServiceIf *iface, const gchar * udidHash, const gchar * applicationTypeWithExtensions, TalkException ** e, GError **error);
  gboolean (*notify_registration_complete) (TalkServiceIf *iface, const gchar * udidHash, const gchar * applicationTypeWithExtensions, TalkException ** e, GError **error);
  gboolean (*notify_sleep) (TalkServiceIf *iface, const gint64 lastRev, const gint32 badge, TalkException ** e, GError **error);
  gboolean (*notify_updated) (TalkServiceIf *iface, const gint64 lastRev, const DeviceInfo * deviceInfo, TalkException ** e, GError **error);
  gboolean (*open_proximity_match) (TalkServiceIf *iface, gchar ** _return, const Location * location, TalkException ** e, GError **error);
  gboolean (*register_buddy_user) (TalkServiceIf *iface, gchar ** _return, const gchar * buddyId, const gchar * registrarPassword, TalkException ** e, GError **error);
  gboolean (*register_buddy_userid) (TalkServiceIf *iface, const gint32 seq, const gchar * userid, TalkException ** e, GError **error);
  gboolean (*register_device) (TalkServiceIf *iface, gchar ** _return, const gchar * sessionId, TalkException ** e, GError **error);
  gboolean (*register_device_with_identity_credential) (TalkServiceIf *iface, gchar ** _return, const gchar * sessionId, const IdentityProvider provider, const gchar * identifier, const gchar * verifier, TalkException ** e, GError **error);
  gboolean (*register_device_without_phone_number) (TalkServiceIf *iface, gchar ** _return, const gchar * region, const gchar * udidHash, const DeviceInfo * deviceInfo, TalkException ** e, GError **error);
  gboolean (*register_device_without_phone_number_with_identity_credential) (TalkServiceIf *iface, gchar ** _return, const gchar * region, const gchar * udidHash, const DeviceInfo * deviceInfo, const IdentityProvider provider, const gchar * identifier, const gchar * verifier, const gchar * mid, const gchar * migrationPincodeSessionId, TalkException ** e, GError **error);
  gboolean (*register_userid) (TalkServiceIf *iface, gboolean* _return, const gint32 reqSeq, const gchar * userid, TalkException ** e, GError **error);
  gboolean (*register_wap_device) (TalkServiceIf *iface, gchar ** _return, const gchar * invitationHash, const gchar * guidHash, const gchar * email, const DeviceInfo * deviceInfo, TalkException ** e, GError **error);
  gboolean (*register_with_existing_sns_id_and_identity_credential) (TalkServiceIf *iface, gchar ** _return, const IdentityCredential * identityCredential, const gchar * region, const gchar * udidHash, const DeviceInfo * deviceInfo, TalkException ** e, GError **error);
  gboolean (*register_with_sns_id) (TalkServiceIf *iface, RegisterWithSnsIdResult ** _return, const SnsIdType snsIdType, const gchar * snsAccessToken, const gchar * region, const gchar * udidHash, const DeviceInfo * deviceInfo, const gchar * mid, TalkException ** e, GError **error);
  gboolean (*register_with_sns_id_and_identity_credential) (TalkServiceIf *iface, gchar ** _return, const SnsIdType snsIdType, const gchar * snsAccessToken, const IdentityCredential * identityCredential, const gchar * region, const gchar * udidHash, const DeviceInfo * deviceInfo, TalkException ** e, GError **error);
  gboolean (*reissue_device_credential) (TalkServiceIf *iface, gchar ** _return, TalkException ** e, GError **error);
  gboolean (*reissue_user_ticket) (TalkServiceIf *iface, gchar ** _return, const gint64 expirationTime, const gint32 maxUseCount, TalkException ** e, GError **error);
  gboolean (*get_message_read_range) (TalkServiceIf *iface, GPtrArray ** _return, const GPtrArray * chatIds, TalkException ** e, GError **error);
  gboolean (*reject_group_invitation) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * groupId, TalkException ** e, GError **error);
  gboolean (*release_session) (TalkServiceIf *iface, TalkException ** e, GError **error);
  gboolean (*remove_all_messages) (TalkServiceIf *iface, const gint32 seq, const gchar * lastMessageId, TalkException ** e, GError **error);
  gboolean (*remove_buddy_location) (TalkServiceIf *iface, const gchar * mid, const gint32 index, TalkException ** e, GError **error);
  gboolean (*remove_message) (TalkServiceIf *iface, gboolean* _return, const gchar * messageId, TalkException ** e, GError **error);
  gboolean (*make_user_add_myself_as_contact) (TalkServiceIf *iface, ContactTransition ** _return, const gchar * contactOwnerMid, TalkException ** e, GError **error);
  gboolean (*remove_message_from_my_home) (TalkServiceIf *iface, gboolean* _return, const gchar * messageId, TalkException ** e, GError **error);
  gboolean (*remove_sns_id) (TalkServiceIf *iface, gchar ** _return, const SnsIdType snsIdType, TalkException ** e, GError **error);
  gboolean (*report) (TalkServiceIf *iface, const gint64 syncOpRevision, const SyncCategory category, const gchar * report, TalkException ** e, GError **error);
  gboolean (*report_contacts) (TalkServiceIf *iface, GPtrArray ** _return, const gint64 syncOpRevision, const SyncCategory category, const GPtrArray * contactReports, const SyncActionType actionType, TalkException ** e, GError **error);
  gboolean (*report_groups) (TalkServiceIf *iface, const gint64 syncOpRevision, const GPtrArray * groups, TalkException ** e, GError **error);
  gboolean (*report_profile) (TalkServiceIf *iface, const gint64 syncOpRevision, const Profile * profile, TalkException ** e, GError **error);
  gboolean (*report_rooms) (TalkServiceIf *iface, const gint64 syncOpRevision, const GPtrArray * rooms, TalkException ** e, GError **error);
  gboolean (*find_and_add_contact_by_meta_tag) (TalkServiceIf *iface, Contact ** _return, const gint32 reqSeq, const gchar * userid, const gchar * reference, TalkException ** e, GError **error);
  gboolean (*report_settings) (TalkServiceIf *iface, const gint64 syncOpRevision, const Settings * settings, TalkException ** e, GError **error);
  gboolean (*report_spam) (TalkServiceIf *iface, const gchar * chatMid, const GPtrArray * memberMids, const GArray * spammerReasons, const GPtrArray * senderMids, const GPtrArray * spamMessageIds, const GPtrArray * spamMessages, TalkException ** e, GError **error);
  gboolean (*report_spammer) (TalkServiceIf *iface, const gchar * spammerMid, const GArray * spammerReasons, const GPtrArray * spamMessageIds, TalkException ** e, GError **error);
  gboolean (*request_account_password_reset) (TalkServiceIf *iface, const IdentityProvider provider, const gchar * identifier, const gchar * locale, TalkException ** e, GError **error);
  gboolean (*request_email_confirmation) (TalkServiceIf *iface, EmailConfirmationSession ** _return, const EmailConfirmation * emailConfirmation, TalkException ** e, GError **error);
  gboolean (*request_identity_unbind) (TalkServiceIf *iface, const IdentityProvider provider, const gchar * identifier, TalkException ** e, GError **error);
  gboolean (*resend_email_confirmation) (TalkServiceIf *iface, EmailConfirmationSession ** _return, const gchar * verifier, TalkException ** e, GError **error);
  gboolean (*resend_pin_code) (TalkServiceIf *iface, const gchar * sessionId, TalkException ** e, GError **error);
  gboolean (*resend_pin_code_by_s_m_s) (TalkServiceIf *iface, const gchar * sessionId, TalkException ** e, GError **error);
  gboolean (*send_chat_checked) (TalkServiceIf *iface, const gint32 seq, const gchar * consumer, const gchar * lastMessageId, TalkException ** e, GError **error);
  gboolean (*send_message_await_commit) (TalkServiceIf *iface, CommitMessageResult ** _return, const gint32 seq, const Message * message, TalkException ** e, GError **error);
  gboolean (*send_chat_removed) (TalkServiceIf *iface, const gint32 seq, const gchar * consumer, const gchar * lastMessageId, TalkException ** e, GError **error);
  gboolean (*send_content_preview_updated) (TalkServiceIf *iface, GHashTable ** _return, const gint32 esq, const gchar * messageId, const GPtrArray * receiverMids, TalkException ** e, GError **error);
  gboolean (*send_content_receipt) (TalkServiceIf *iface, const gint32 seq, const gchar * consumer, const gchar * messageId, TalkException ** e, GError **error);
  gboolean (*send_dummy_push) (TalkServiceIf *iface, TalkException ** e, GError **error);
  gboolean (*remove_e2_e_e_public_key) (TalkServiceIf *iface, const E2EEPublicKey * publicKey, TalkException ** e, GError **error);
  gboolean (*negotiate_e2_e_e_public_key) (TalkServiceIf *iface, E2EENegotiationResult ** _return, const gchar * mid, TalkException ** e, GError **error);
  gboolean (*get_e2_e_e_public_key) (TalkServiceIf *iface, E2EEPublicKey ** _return, const gchar * mid, const gint32 version, const gint32 keyId, TalkException ** e, GError **error);
  gboolean (*request_e2_e_e_key_exchange) (TalkServiceIf *iface, const gint32 reqSeq, const GByteArray * temporalPublicKey, const E2EEPublicKey * publicKey, const GByteArray * verifier, TalkException ** e, GError **error);
  gboolean (*get_last_e2_e_e_public_keys) (TalkServiceIf *iface, GHashTable ** _return, const gchar * chatMid, TalkException ** e, GError **error);
  gboolean (*register_e2_e_e_public_key) (TalkServiceIf *iface, E2EEPublicKey ** _return, const gint32 reqSeq, const E2EEPublicKey * publicKey, TalkException ** e, GError **error);
  gboolean (*get_e2_e_e_public_keys) (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_e2_e_e_public_keys_ex) (TalkServiceIf *iface, GPtrArray ** _return, const gboolean ignoreE2EEStatus, TalkException ** e, GError **error);
  gboolean (*get_read_message_ops_in_bulk) (TalkServiceIf *iface, GPtrArray ** _return, const GPtrArray * chatIds, TalkException ** e, GError **error);
  gboolean (*send_event) (TalkServiceIf *iface, Message ** _return, const gint32 seq, const Message * message, TalkException ** e, GError **error);
  gboolean (*send_message) (TalkServiceIf *iface, Message ** _return, const gint32 seq, const Message * message, TalkException ** e, GError **error);
  gboolean (*send_message_ignored) (TalkServiceIf *iface, const gint32 seq, const gchar * consumer, const GPtrArray * messageIds, TalkException ** e, GError **error);
  gboolean (*send_message_receipt) (TalkServiceIf *iface, const gint32 seq, const gchar * consumer, const GPtrArray * messageIds, TalkException ** e, GError **error);
  gboolean (*find_contact_by_meta_tag) (TalkServiceIf *iface, Contact ** _return, const gchar * userid, const gchar * reference, TalkException ** e, GError **error);
  gboolean (*send_message_to_my_home) (TalkServiceIf *iface, Message ** _return, const gint32 seq, const Message * message, TalkException ** e, GError **error);
  gboolean (*set_buddy_location) (TalkServiceIf *iface, const gchar * mid, const gint32 index, const Geolocation * location, TalkException ** e, GError **error);
  gboolean (*set_identity_credential) (TalkServiceIf *iface, const gchar * identifier, const gchar * verifier, const IdentityProvider provider, TalkException ** e, GError **error);
  gboolean (*set_notifications_enabled) (TalkServiceIf *iface, const gint32 reqSeq, const MIDType type, const gchar * target, const gboolean enablement, TalkException ** e, GError **error);
  gboolean (*start_update_verification) (TalkServiceIf *iface, VerificationSessionData ** _return, const gchar * region, const CarrierCode carrier, const gchar * phone, const gchar * udidHash, const DeviceInfo * deviceInfo, const gchar * networkCode, const gchar * locale, TalkException ** e, GError **error);
  gboolean (*start_verification) (TalkServiceIf *iface, VerificationSessionData ** _return, const gchar * region, const CarrierCode carrier, const gchar * phone, const gchar * udidHash, const DeviceInfo * deviceInfo, const gchar * networkCode, const gchar * mid, const gchar * locale, const SIMInfo * simInfo, const gchar * oldUdidHash, TalkException ** e, GError **error);
  gboolean (*update_group_preference_attribute) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * groupMid, const GHashTable * updatedAttrs, TalkException ** e, GError **error);
  gboolean (*create_room_v2) (TalkServiceIf *iface, Room ** _return, const gint32 reqSeq, const GPtrArray * contactIds, TalkException ** e, GError **error);
  gboolean (*store_update_profile_attribute) (TalkServiceIf *iface, const gint32 seq, const ProfileAttribute profileAttribute, const gchar * value, TalkException ** e, GError **error);
  gboolean (*sync_contact_by_sns_ids) (TalkServiceIf *iface, GPtrArray ** _return, const gint32 reqSeq, const GPtrArray * modifications, TalkException ** e, GError **error);
  gboolean (*sync_contacts) (TalkServiceIf *iface, GHashTable ** _return, const gint32 reqSeq, const GPtrArray * localContacts, TalkException ** e, GError **error);
  gboolean (*try_send_message) (TalkServiceIf *iface, Message ** _return, const gint32 seq, const Message * message, TalkException ** e, GError **error);
  gboolean (*get_next_messages_v2) (TalkServiceIf *iface, GPtrArray ** _return, const gchar * messageBoxId, const MessageBoxV2MessageId * startMessageId, const gint32 messagesCount, TalkException ** e, GError **error);
  gboolean (*get_message_box_compact_wrap_up_v2) (TalkServiceIf *iface, TMessageBoxWrapUp ** _return, const gchar * messageBoxId, TalkException ** e, GError **error);
  gboolean (*get_recent_messages_v2) (TalkServiceIf *iface, GPtrArray ** _return, const gchar * messageBoxId, const gint32 messagesCount, TalkException ** e, GError **error);
  gboolean (*validate_contacts_on_bot) (TalkServiceIf *iface, GHashTable ** _return, const GPtrArray * contacts, TalkException ** e, GError **error);
  gboolean (*try_friend_request) (TalkServiceIf *iface, const gchar * midOrEMid, const FriendRequestMethod method, const gchar * friendRequestParams, TalkException ** e, GError **error);
  gboolean (*unblock_contact) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * id, TalkException ** e, GError **error);
  gboolean (*unblock_recommendation) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * id, TalkException ** e, GError **error);
  gboolean (*unregister_user_and_device) (TalkServiceIf *iface, gchar ** _return, TalkException ** e, GError **error);
  gboolean (*update_apns_device_token) (TalkServiceIf *iface, const GByteArray * apnsDeviceToken, TalkException ** e, GError **error);
  gboolean (*update_buddy_setting) (TalkServiceIf *iface, const gchar * key, const gchar * value, TalkException ** e, GError **error);
  gboolean (*update_c2_d_m_registration_id) (TalkServiceIf *iface, const gchar * registrationId, TalkException ** e, GError **error);
  gboolean (*update_contact_setting) (TalkServiceIf *iface, const gint32 reqSeq, const gchar * mid, const ContactSetting flag, const gchar * value, TalkException ** e, GError **error);
  gboolean (*update_custom_mode_settings) (TalkServiceIf *iface, const CustomMode customMode, const GHashTable * paramMap, TalkException ** e, GError **error);
  gboolean (*update_device_info) (TalkServiceIf *iface, const gchar * deviceUid, const DeviceInfo * deviceInfo, TalkException ** e, GError **error);
  gboolean (*update_group) (TalkServiceIf *iface, const gint32 reqSeq, const Group * group, TalkException ** e, GError **error);
  gboolean (*update_notification_token) (TalkServiceIf *iface, const NotificationType type, const gchar * token, TalkException ** e, GError **error);
  gboolean (*update_notification_token_with_bytes) (TalkServiceIf *iface, const NotificationType type, const GByteArray * token, TalkException ** e, GError **error);
  gboolean (*update_profile) (TalkServiceIf *iface, const gint32 reqSeq, const Profile * profile, TalkException ** e, GError **error);
  gboolean (*update_profile_attribute) (TalkServiceIf *iface, const gint32 reqSeq, const ProfileAttribute attr, const gchar * value, TalkException ** e, GError **error);
  gboolean (*update_region) (TalkServiceIf *iface, const gchar * region, TalkException ** e, GError **error);
  gboolean (*update_settings) (TalkServiceIf *iface, const gint32 reqSeq, const Settings * settings, TalkException ** e, GError **error);
  gboolean (*update_settings2) (TalkServiceIf *iface, gint32* _return, const gint32 reqSeq, const Settings * settings, TalkException ** e, GError **error);
  gboolean (*update_settings_attribute) (TalkServiceIf *iface, const gint32 reqSeq, const SettingsAttribute attr, const gchar * value, TalkException ** e, GError **error);
  gboolean (*update_settings_attributes) (TalkServiceIf *iface, gint32* _return, const gint32 reqSeq, const gint32 attrBitset, const Settings * settings, TalkException ** e, GError **error);
  gboolean (*verify_identity_credential) (TalkServiceIf *iface, const IdentityProvider identityProvider, const gchar * identifier, const gchar * password, TalkException ** e, GError **error);
  gboolean (*verify_identity_credential_with_result) (TalkServiceIf *iface, UserAuthStatus ** _return, const IdentityCredential * identityCredential, TalkException ** e, GError **error);
  gboolean (*verify_phone) (TalkServiceIf *iface, VerificationResult* _return, const gchar * sessionId, const gchar * pinCode, const gchar * udidHash, TalkException ** e, GError **error);
  gboolean (*verify_qrcode) (TalkServiceIf *iface, gchar ** _return, const gchar * verifier, const gchar * pinCode, TalkException ** e, GError **error);
};
typedef struct _TalkServiceHandlerClass TalkServiceHandlerClass;

GType talk_service_handler_get_type (void);
#define TYPE_TALK_SERVICE_HANDLER (talk_service_handler_get_type())
#define TALK_SERVICE_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_TALK_SERVICE_HANDLER, TalkServiceHandler))
#define IS_TALK_SERVICE_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_TALK_SERVICE_HANDLER))
#define TALK_SERVICE_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_TALK_SERVICE_HANDLER, TalkServiceHandlerClass))
#define IS_TALK_SERVICE_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_TALK_SERVICE_HANDLER))
#define TALK_SERVICE_HANDLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_TALK_SERVICE_HANDLER, TalkServiceHandlerClass))

gboolean talk_service_handler_get_chat_room_announcements_bulk (TalkServiceIf *iface, GHashTable ** _return, const GPtrArray * chatRoomMids, TalkException ** e, GError **error);
gboolean talk_service_handler_get_chat_room_announcements (TalkServiceIf *iface, GPtrArray ** _return, const gchar * chatRoomMid, TalkException ** e, GError **error);
gboolean talk_service_handler_create_chat_room_announcement (TalkServiceIf *iface, ChatRoomAnnouncement ** _return, const gint32 reqSeq, const gchar * chatRoomMid, const ChatRoomAnnouncementType type, const ChatRoomAnnouncementContents * contents, TalkException ** e, GError **error);
gboolean talk_service_handler_remove_chat_room_announcement (TalkServiceIf *iface, const gint32 reqSeq, const gchar * chatRoomMid, const gint64 announcementSeq, TalkException ** e, GError **error);
gboolean talk_service_handler_unsend_message (TalkServiceIf *iface, const gint32 seq, const gchar * messageId, TalkException ** e, GError **error);
gboolean talk_service_handler_get_group_without_members (TalkServiceIf *iface, Group ** _return, const gchar * groupId, TalkException ** e, GError **error);
gboolean talk_service_handler_request_resend_message (TalkServiceIf *iface, const gint32 reqSeq, const gchar * senderMid, const gchar * messageId, TalkException ** e, GError **error);
gboolean talk_service_handler_respond_resend_message (TalkServiceIf *iface, const gint32 reqSeq, const gchar * receiverMid, const gchar * originalMessageId, const Message * resendMessage, const ErrorCode errorCode, TalkException ** e, GError **error);
gboolean talk_service_handler_accept_group_invitation (TalkServiceIf *iface, const gint32 reqSeq, const gchar * groupId, TalkException ** e, GError **error);
gboolean talk_service_handler_accept_group_invitation_by_ticket (TalkServiceIf *iface, const gint32 reqSeq, const gchar * GroupMid, const gchar * ticketId, TalkException ** e, GError **error);
gboolean talk_service_handler_accept_proximity_matches (TalkServiceIf *iface, const gchar * sessionId, const GHashTable * ids, TalkException ** e, GError **error);
gboolean talk_service_handler_acquire_call_route (TalkServiceIf *iface, GPtrArray ** _return, const gchar * to, TalkException ** e, GError **error);
gboolean talk_service_handler_acquire_call_ticket (TalkServiceIf *iface, gchar ** _return, const gchar * to, TalkException ** e, GError **error);
gboolean talk_service_handler_acquire_encrypted_access_token (TalkServiceIf *iface, gchar ** _return, const FeatureType featureType, TalkException ** e, GError **error);
gboolean talk_service_handler_add_sns_id (TalkServiceIf *iface, gchar ** _return, const SnsIdType snsIdType, const gchar * snsAccessToken, TalkException ** e, GError **error);
gboolean talk_service_handler_block_contact (TalkServiceIf *iface, const gint32 reqSeq, const gchar * id, TalkException ** e, GError **error);
gboolean talk_service_handler_block_recommendation (TalkServiceIf *iface, const gint32 reqSeq, const gchar * id, TalkException ** e, GError **error);
gboolean talk_service_handler_cancel_group_invitation (TalkServiceIf *iface, const gint32 reqSeq, const gchar * groupId, const GPtrArray * contactIds, TalkException ** e, GError **error);
gboolean talk_service_handler_change_verification_method (TalkServiceIf *iface, VerificationSessionData ** _return, const gchar * sessionId, const VerificationMethod method, TalkException ** e, GError **error);
gboolean talk_service_handler_clear_identity_credential (TalkServiceIf *iface, TalkException ** e, GError **error);
gboolean talk_service_handler_clear_message_box (TalkServiceIf *iface, const gchar * channelId, const gchar * messageBoxId, TalkException ** e, GError **error);
gboolean talk_service_handler_close_proximity_match (TalkServiceIf *iface, const gchar * sessionId, TalkException ** e, GError **error);
gboolean talk_service_handler_commit_send_message (TalkServiceIf *iface, GHashTable ** _return, const gint32 seq, const gchar * messageId, const GPtrArray * receiverMids, TalkException ** e, GError **error);
gboolean talk_service_handler_commit_send_messages (TalkServiceIf *iface, GHashTable ** _return, const gint32 seq, const GPtrArray * messageIds, const GPtrArray * receiverMids, TalkException ** e, GError **error);
gboolean talk_service_handler_commit_update_profile (TalkServiceIf *iface, GHashTable ** _return, const gint32 seq, const GArray * attrs, const GPtrArray * receiverMids, TalkException ** e, GError **error);
gboolean talk_service_handler_confirm_email (TalkServiceIf *iface, const gchar * verifier, const gchar * pinCode, TalkException ** e, GError **error);
gboolean talk_service_handler_create_group (TalkServiceIf *iface, Group ** _return, const gint32 seq, const gchar * name, const GPtrArray * contactIds, TalkException ** e, GError **error);
gboolean talk_service_handler_create_qrcode_base64_image (TalkServiceIf *iface, gchar ** _return, const gchar * url, const gchar * characterSet, const gint32 imageSize, const gint32 x, const gint32 y, const gint32 width, const gint32 height, TalkException ** e, GError **error);
gboolean talk_service_handler_create_room (TalkServiceIf *iface, Room ** _return, const gint32 reqSeq, const GPtrArray * contactIds, TalkException ** e, GError **error);
gboolean talk_service_handler_create_session (TalkServiceIf *iface, gchar ** _return, TalkException ** e, GError **error);
gboolean talk_service_handler_fetch_announcements (TalkServiceIf *iface, GPtrArray ** _return, const gint32 lastFetchedIndex, TalkException ** e, GError **error);
gboolean talk_service_handler_fetch_messages (TalkServiceIf *iface, GPtrArray ** _return, const gint64 localTs, const gint32 count, TalkException ** e, GError **error);
gboolean talk_service_handler_fetch_operations (TalkServiceIf *iface, GPtrArray ** _return, const gint64 localRev, const gint32 count, ShouldSyncException ** e, GError **error);
gboolean talk_service_handler_fetch_ops (TalkServiceIf *iface, GPtrArray ** _return, const gint64 localRev, const gint32 count, const gint64 globalRev, const gint64 individualRev, ShouldSyncException ** e, GError **error);
gboolean talk_service_handler_find_and_add_contacts_by_email (TalkServiceIf *iface, GHashTable ** _return, const gint32 reqSeq, const GHashTable * emails, TalkException ** e, GError **error);
gboolean talk_service_handler_find_and_add_contacts_by_mid (TalkServiceIf *iface, GHashTable ** _return, const gint32 reqSeq, const gchar * mid, const ContactType type, const gchar * reference, TalkException ** e, GError **error);
gboolean talk_service_handler_find_group_by_ticket_v2 (TalkServiceIf *iface, Group ** _return, const gchar * ticketId, TalkException ** e, GError **error);
gboolean talk_service_handler_find_and_add_contacts_by_phone (TalkServiceIf *iface, GHashTable ** _return, const gint32 reqSeq, const GHashTable * phones, TalkException ** e, GError **error);
gboolean talk_service_handler_get_friend_requests (TalkServiceIf *iface, GPtrArray ** _return, const FriendRequestDirection direction, const gint64 lastSeenSeqId, TalkException ** e, GError **error);
gboolean talk_service_handler_remove_friend_request (TalkServiceIf *iface, const FriendRequestDirection direction, const gchar * midOrEMid, TalkException ** e, GError **error);
gboolean talk_service_handler_find_and_add_contacts_by_userid (TalkServiceIf *iface, GHashTable ** _return, const gint32 reqSeq, const gchar * userid, TalkException ** e, GError **error);
gboolean talk_service_handler_find_contact_by_userid (TalkServiceIf *iface, Contact ** _return, const gchar * userid, TalkException ** e, GError **error);
gboolean talk_service_handler_find_contact_by_user_ticket (TalkServiceIf *iface, Contact ** _return, const gchar * ticketIdWithTag, TalkException ** e, GError **error);
gboolean talk_service_handler_find_contacts_by_email (TalkServiceIf *iface, GHashTable ** _return, const GHashTable * emails, TalkException ** e, GError **error);
gboolean talk_service_handler_find_contacts_by_phone (TalkServiceIf *iface, GHashTable ** _return, const GHashTable * phones, TalkException ** e, GError **error);
gboolean talk_service_handler_find_sns_id_user_status (TalkServiceIf *iface, SnsIdUserStatus ** _return, const SnsIdType snsIdType, const gchar * snsAccessToken, const gchar * udidHash, TalkException ** e, GError **error);
gboolean talk_service_handler_finish_update_verification (TalkServiceIf *iface, const gchar * sessionId, TalkException ** e, GError **error);
gboolean talk_service_handler_generate_user_ticket (TalkServiceIf *iface, Ticket ** _return, const gint64 expirationTime, const gint32 maxUseCount, TalkException ** e, GError **error);
gboolean talk_service_handler_destroy_message (TalkServiceIf *iface, const gint32 seq, const gchar * chatId, const gchar * messageId, const gint8 sessionId, TalkException ** e, GError **error);
gboolean talk_service_handler_get_accepted_proximity_matches (TalkServiceIf *iface, GHashTable ** _return, const gchar * sessionId, TalkException ** e, GError **error);
gboolean talk_service_handler_get_active_buddy_subscriber_ids (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean talk_service_handler_get_all_contact_ids (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean talk_service_handler_get_auth_qrcode (TalkServiceIf *iface, AuthQrcode ** _return, const gboolean keepLoggedIn, const gchar * systemName, TalkException ** e, GError **error);
gboolean talk_service_handler_get_blocked_contact_ids (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean talk_service_handler_register_with_phone_number (TalkServiceIf *iface, RegisterWithPhoneNumberResult ** _return, const gchar * sessionId, const gchar * migrationPincodeSessionId, TalkException ** e, GError **error);
gboolean talk_service_handler_register_with_phone_number_and_password (TalkServiceIf *iface, RegisterWithPhoneNumberResult ** _return, const gchar * sessionId, const gchar * keynm, const gchar * encrypted, TalkException ** e, GError **error);
gboolean talk_service_handler_get_analytics_info (TalkServiceIf *iface, AnalyticsInfo ** _return, TalkException ** e, GError **error);
gboolean talk_service_handler_report_client_statistics (TalkServiceIf *iface, const gint32 reqSeq, const ReportCategory category, const gint32 count, TalkException ** e, GError **error);
gboolean talk_service_handler_verify_phone_number_for_login (TalkServiceIf *iface, gchar ** _return, const gchar * verifierFromPhone, const gchar * pinCodeForPhone, const gchar * verifierFromLogin, TalkException ** e, GError **error);
gboolean talk_service_handler_verify_phone_number (TalkServiceIf *iface, PhoneVerificationResult ** _return, const gchar * sessionId, const gchar * pinCode, const gchar * udidHash, const gchar * migrationPincodeSessionId, const gchar * oldUdidHash, TalkException ** e, GError **error);
gboolean talk_service_handler_get_blocked_contact_ids_by_range (TalkServiceIf *iface, GPtrArray ** _return, const gint32 start, const gint32 count, TalkException ** e, GError **error);
gboolean talk_service_handler_get_blocked_recommendation_ids (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean talk_service_handler_get_buddy_blocker_ids (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean talk_service_handler_get_buddy_location (TalkServiceIf *iface, Geolocation ** _return, const gchar * mid, const gint32 index, TalkException ** e, GError **error);
gboolean talk_service_handler_get_compact_contacts_modified_since (TalkServiceIf *iface, GPtrArray ** _return, const gint64 timestamp, TalkException ** e, GError **error);
gboolean talk_service_handler_get_compact_group (TalkServiceIf *iface, Group ** _return, const gchar * groupId, TalkException ** e, GError **error);
gboolean talk_service_handler_get_compact_room (TalkServiceIf *iface, Room ** _return, const gchar * roomId, TalkException ** e, GError **error);
gboolean talk_service_handler_get_contact (TalkServiceIf *iface, Contact ** _return, const gchar * id, TalkException ** e, GError **error);
gboolean talk_service_handler_get_contacts (TalkServiceIf *iface, GPtrArray ** _return, const GPtrArray * ids, TalkException ** e, GError **error);
gboolean talk_service_handler_get_contact_with_friend_request_status (TalkServiceIf *iface, Contact ** _return, const gchar * id, TalkException ** e, GError **error);
gboolean talk_service_handler_get_country_with_request_ip (TalkServiceIf *iface, gchar ** _return, TalkException ** e, GError **error);
gboolean talk_service_handler_get_favorite_mids (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean talk_service_handler_get_group (TalkServiceIf *iface, Group ** _return, const gchar * groupId, TalkException ** e, GError **error);
gboolean talk_service_handler_get_group_ids_invited (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean talk_service_handler_get_group_ids_joined (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean talk_service_handler_get_groups (TalkServiceIf *iface, GPtrArray ** _return, const GPtrArray * groupIds, TalkException ** e, GError **error);
gboolean talk_service_handler_get_hidden_contact_mids (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean talk_service_handler_get_identity_identifier (TalkServiceIf *iface, gchar ** _return, TalkException ** e, GError **error);
gboolean talk_service_handler_get_last_announcement_index (TalkServiceIf *iface, gint32* _return, TalkException ** e, GError **error);
gboolean talk_service_handler_get_last_op_revision (TalkServiceIf *iface, gint64* _return, TalkException ** e, GError **error);
gboolean talk_service_handler_get_suggest_revisions (TalkServiceIf *iface, SuggestDictionaryRevisions ** _return, TalkException ** e, GError **error);
gboolean talk_service_handler_get_previous_messages_v2_with_read_count (TalkServiceIf *iface, GPtrArray ** _return, const gchar * messageBoxId, const MessageBoxV2MessageId * endMessageId, const gint32 messagesCount, TalkException ** e, GError **error);
gboolean talk_service_handler_get_message_box (TalkServiceIf *iface, TMessageBox ** _return, const gchar * channelId, const gchar * messageBoxId, const gint32 lastMessagesCount, TalkException ** e, GError **error);
gboolean talk_service_handler_get_message_box_compact_wrap_up (TalkServiceIf *iface, TMessageBoxWrapUp ** _return, const gchar * mid, TalkException ** e, GError **error);
gboolean talk_service_handler_get_message_box_compact_wrap_up_list (TalkServiceIf *iface, TMessageBoxWrapUpResponse ** _return, const gint32 start, const gint32 messageBoxCount, TalkException ** e, GError **error);
gboolean talk_service_handler_get_message_box_list (TalkServiceIf *iface, GPtrArray ** _return, const gchar * channelId, const gint32 lastMessagesCount, TalkException ** e, GError **error);
gboolean talk_service_handler_get_message_box_list_by_status (TalkServiceIf *iface, GPtrArray ** _return, const gchar * channelId, const gint32 lastMessagesCount, const gint32 status, TalkException ** e, GError **error);
gboolean talk_service_handler_get_message_box_wrap_up (TalkServiceIf *iface, TMessageBoxWrapUp ** _return, const gchar * mid, TalkException ** e, GError **error);
gboolean talk_service_handler_get_message_box_wrap_up_list (TalkServiceIf *iface, TMessageBoxWrapUpResponse ** _return, const gint32 start, const gint32 messageBoxCount, TalkException ** e, GError **error);
gboolean talk_service_handler_get_messages_by_sequence_number (TalkServiceIf *iface, GPtrArray ** _return, const gchar * channelId, const gchar * messageBoxId, const gint64 startSeq, const gint64 endSeq, TalkException ** e, GError **error);
gboolean talk_service_handler_get_next_messages (TalkServiceIf *iface, GPtrArray ** _return, const gchar * messageBoxId, const gint64 startSeq, const gint32 messagesCount, TalkException ** e, GError **error);
gboolean talk_service_handler_get_notification_policy (TalkServiceIf *iface, GArray ** _return, const CarrierCode carrier, TalkException ** e, GError **error);
gboolean talk_service_handler_get_previous_messages (TalkServiceIf *iface, GPtrArray ** _return, const gchar * messageBoxId, const gint64 endSeq, const gint32 messagesCount, TalkException ** e, GError **error);
gboolean talk_service_handler_get_profile (TalkServiceIf *iface, Profile ** _return, TalkException ** e, GError **error);
gboolean talk_service_handler_get_proximity_match_candidate_list (TalkServiceIf *iface, ProximityMatchCandidateResult ** _return, const gchar * sessionId, TalkException ** e, GError **error);
gboolean talk_service_handler_get_proximity_match_candidates (TalkServiceIf *iface, GHashTable ** _return, const gchar * sessionId, TalkException ** e, GError **error);
gboolean talk_service_handler_get_recent_messages (TalkServiceIf *iface, GPtrArray ** _return, const gchar * messageBoxId, const gint32 messagesCount, TalkException ** e, GError **error);
gboolean talk_service_handler_get_recommendation_ids (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean talk_service_handler_get_room (TalkServiceIf *iface, Room ** _return, const gchar * roomId, TalkException ** e, GError **error);
gboolean talk_service_handler_get_r_s_a_key_info (TalkServiceIf *iface, RSAKey ** _return, const IdentityProvider provider, TalkException ** e, GError **error);
gboolean talk_service_handler_get_server_time (TalkServiceIf *iface, gint64* _return, TalkException ** e, GError **error);
gboolean talk_service_handler_get_sessions (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean talk_service_handler_get_settings (TalkServiceIf *iface, Settings ** _return, TalkException ** e, GError **error);
gboolean talk_service_handler_get_groups_v2 (TalkServiceIf *iface, GPtrArray ** _return, const GPtrArray * groupIds, TalkException ** e, GError **error);
gboolean talk_service_handler_get_settings_attributes (TalkServiceIf *iface, Settings ** _return, const gint32 attrBitset, TalkException ** e, GError **error);
gboolean talk_service_handler_get_system_configuration (TalkServiceIf *iface, SystemConfiguration ** _return, TalkException ** e, GError **error);
gboolean talk_service_handler_get_user_ticket (TalkServiceIf *iface, Ticket ** _return, TalkException ** e, GError **error);
gboolean talk_service_handler_get_wap_invitation (TalkServiceIf *iface, WapInvitation ** _return, const gchar * invitationHash, TalkException ** e, GError **error);
gboolean talk_service_handler_invalidate_user_ticket (TalkServiceIf *iface, TalkException ** e, GError **error);
gboolean talk_service_handler_invite_friends_by_sms (TalkServiceIf *iface, const GPtrArray * phoneNumberList, TalkException ** e, GError **error);
gboolean talk_service_handler_invite_into_group (TalkServiceIf *iface, const gint32 reqSeq, const gchar * groupId, const GPtrArray * contactIds, TalkException ** e, GError **error);
gboolean talk_service_handler_invite_into_room (TalkServiceIf *iface, const gint32 reqSeq, const gchar * roomId, const GPtrArray * contactIds, TalkException ** e, GError **error);
gboolean talk_service_handler_invite_via_email (TalkServiceIf *iface, const gint32 reqSeq, const gchar * email, const gchar * name, TalkException ** e, GError **error);
gboolean talk_service_handler_is_identity_identifier_available (TalkServiceIf *iface, gboolean* _return, const IdentityProvider provider, const gchar * identifier, TalkException ** e, GError **error);
gboolean talk_service_handler_is_userid_available (TalkServiceIf *iface, gboolean* _return, const gchar * userid, TalkException ** e, GError **error);
gboolean talk_service_handler_kickout_from_group (TalkServiceIf *iface, const gint32 reqSeq, const gchar * groupId, const GPtrArray * contactIds, TalkException ** e, GError **error);
gboolean talk_service_handler_reissue_group_ticket (TalkServiceIf *iface, gchar ** _return, const gchar * groupMid, TalkException ** e, GError **error);
gboolean talk_service_handler_find_group_by_ticket (TalkServiceIf *iface, Group ** _return, const gchar * ticketId, TalkException ** e, GError **error);
gboolean talk_service_handler_leave_group (TalkServiceIf *iface, const gint32 reqSeq, const gchar * groupId, TalkException ** e, GError **error);
gboolean talk_service_handler_leave_room (TalkServiceIf *iface, const gint32 reqSeq, const gchar * roomId, TalkException ** e, GError **error);
gboolean talk_service_handler_login_with_identity_credential (TalkServiceIf *iface, gchar ** _return, const IdentityProvider identityProvider, const gchar * identifier, const gchar * password, const gboolean keepLoggedIn, const gchar * accessLocation, const gchar * systemName, const gchar * certificate, TalkException ** e, GError **error);
gboolean talk_service_handler_login_with_identity_credential_for_certificate (TalkServiceIf *iface, LoginResult ** _return, const IdentityProvider identityProvider, const gchar * identifier, const gchar * password, const gboolean keepLoggedIn, const gchar * accessLocation, const gchar * systemName, const gchar * certificate, TalkException ** e, GError **error);
gboolean talk_service_handler_login_with_verifier (TalkServiceIf *iface, gchar ** _return, const gchar * verifier, TalkException ** e, GError **error);
gboolean talk_service_handler_login_with_verifier_for_cerificate (TalkServiceIf *iface, LoginResult ** _return, const gchar * verifier, TalkException ** e, GError **error);
gboolean talk_service_handler_login_with_verifier_for_certificate (TalkServiceIf *iface, LoginResult ** _return, const gchar * verifier, TalkException ** e, GError **error);
gboolean talk_service_handler_logout (TalkServiceIf *iface, TalkException ** e, GError **error);
gboolean talk_service_handler_logout_session (TalkServiceIf *iface, const gchar * tokenKey, TalkException ** e, GError **error);
gboolean talk_service_handler_noop (TalkServiceIf *iface, TalkException ** e, GError **error);
gboolean talk_service_handler_notified_redirect (TalkServiceIf *iface, const GHashTable * paramMap, TalkException ** e, GError **error);
gboolean talk_service_handler_notify_buddy_on_air (TalkServiceIf *iface, GHashTable ** _return, const gint32 seq, const GPtrArray * receiverMids, TalkException ** e, GError **error);
gboolean talk_service_handler_notify_individual_event (TalkServiceIf *iface, const NotificationStatus notificationStatus, const GPtrArray * receiverMids, TalkException ** e, GError **error);
gboolean talk_service_handler_notify_installed (TalkServiceIf *iface, const gchar * udidHash, const gchar * applicationTypeWithExtensions, TalkException ** e, GError **error);
gboolean talk_service_handler_notify_registration_complete (TalkServiceIf *iface, const gchar * udidHash, const gchar * applicationTypeWithExtensions, TalkException ** e, GError **error);
gboolean talk_service_handler_notify_sleep (TalkServiceIf *iface, const gint64 lastRev, const gint32 badge, TalkException ** e, GError **error);
gboolean talk_service_handler_notify_updated (TalkServiceIf *iface, const gint64 lastRev, const DeviceInfo * deviceInfo, TalkException ** e, GError **error);
gboolean talk_service_handler_open_proximity_match (TalkServiceIf *iface, gchar ** _return, const Location * location, TalkException ** e, GError **error);
gboolean talk_service_handler_register_buddy_user (TalkServiceIf *iface, gchar ** _return, const gchar * buddyId, const gchar * registrarPassword, TalkException ** e, GError **error);
gboolean talk_service_handler_register_buddy_userid (TalkServiceIf *iface, const gint32 seq, const gchar * userid, TalkException ** e, GError **error);
gboolean talk_service_handler_register_device (TalkServiceIf *iface, gchar ** _return, const gchar * sessionId, TalkException ** e, GError **error);
gboolean talk_service_handler_register_device_with_identity_credential (TalkServiceIf *iface, gchar ** _return, const gchar * sessionId, const IdentityProvider provider, const gchar * identifier, const gchar * verifier, TalkException ** e, GError **error);
gboolean talk_service_handler_register_device_without_phone_number (TalkServiceIf *iface, gchar ** _return, const gchar * region, const gchar * udidHash, const DeviceInfo * deviceInfo, TalkException ** e, GError **error);
gboolean talk_service_handler_register_device_without_phone_number_with_identity_credential (TalkServiceIf *iface, gchar ** _return, const gchar * region, const gchar * udidHash, const DeviceInfo * deviceInfo, const IdentityProvider provider, const gchar * identifier, const gchar * verifier, const gchar * mid, const gchar * migrationPincodeSessionId, TalkException ** e, GError **error);
gboolean talk_service_handler_register_userid (TalkServiceIf *iface, gboolean* _return, const gint32 reqSeq, const gchar * userid, TalkException ** e, GError **error);
gboolean talk_service_handler_register_wap_device (TalkServiceIf *iface, gchar ** _return, const gchar * invitationHash, const gchar * guidHash, const gchar * email, const DeviceInfo * deviceInfo, TalkException ** e, GError **error);
gboolean talk_service_handler_register_with_existing_sns_id_and_identity_credential (TalkServiceIf *iface, gchar ** _return, const IdentityCredential * identityCredential, const gchar * region, const gchar * udidHash, const DeviceInfo * deviceInfo, TalkException ** e, GError **error);
gboolean talk_service_handler_register_with_sns_id (TalkServiceIf *iface, RegisterWithSnsIdResult ** _return, const SnsIdType snsIdType, const gchar * snsAccessToken, const gchar * region, const gchar * udidHash, const DeviceInfo * deviceInfo, const gchar * mid, TalkException ** e, GError **error);
gboolean talk_service_handler_register_with_sns_id_and_identity_credential (TalkServiceIf *iface, gchar ** _return, const SnsIdType snsIdType, const gchar * snsAccessToken, const IdentityCredential * identityCredential, const gchar * region, const gchar * udidHash, const DeviceInfo * deviceInfo, TalkException ** e, GError **error);
gboolean talk_service_handler_reissue_device_credential (TalkServiceIf *iface, gchar ** _return, TalkException ** e, GError **error);
gboolean talk_service_handler_reissue_user_ticket (TalkServiceIf *iface, gchar ** _return, const gint64 expirationTime, const gint32 maxUseCount, TalkException ** e, GError **error);
gboolean talk_service_handler_get_message_read_range (TalkServiceIf *iface, GPtrArray ** _return, const GPtrArray * chatIds, TalkException ** e, GError **error);
gboolean talk_service_handler_reject_group_invitation (TalkServiceIf *iface, const gint32 reqSeq, const gchar * groupId, TalkException ** e, GError **error);
gboolean talk_service_handler_release_session (TalkServiceIf *iface, TalkException ** e, GError **error);
gboolean talk_service_handler_remove_all_messages (TalkServiceIf *iface, const gint32 seq, const gchar * lastMessageId, TalkException ** e, GError **error);
gboolean talk_service_handler_remove_buddy_location (TalkServiceIf *iface, const gchar * mid, const gint32 index, TalkException ** e, GError **error);
gboolean talk_service_handler_remove_message (TalkServiceIf *iface, gboolean* _return, const gchar * messageId, TalkException ** e, GError **error);
gboolean talk_service_handler_make_user_add_myself_as_contact (TalkServiceIf *iface, ContactTransition ** _return, const gchar * contactOwnerMid, TalkException ** e, GError **error);
gboolean talk_service_handler_remove_message_from_my_home (TalkServiceIf *iface, gboolean* _return, const gchar * messageId, TalkException ** e, GError **error);
gboolean talk_service_handler_remove_sns_id (TalkServiceIf *iface, gchar ** _return, const SnsIdType snsIdType, TalkException ** e, GError **error);
gboolean talk_service_handler_report (TalkServiceIf *iface, const gint64 syncOpRevision, const SyncCategory category, const gchar * report, TalkException ** e, GError **error);
gboolean talk_service_handler_report_contacts (TalkServiceIf *iface, GPtrArray ** _return, const gint64 syncOpRevision, const SyncCategory category, const GPtrArray * contactReports, const SyncActionType actionType, TalkException ** e, GError **error);
gboolean talk_service_handler_report_groups (TalkServiceIf *iface, const gint64 syncOpRevision, const GPtrArray * groups, TalkException ** e, GError **error);
gboolean talk_service_handler_report_profile (TalkServiceIf *iface, const gint64 syncOpRevision, const Profile * profile, TalkException ** e, GError **error);
gboolean talk_service_handler_report_rooms (TalkServiceIf *iface, const gint64 syncOpRevision, const GPtrArray * rooms, TalkException ** e, GError **error);
gboolean talk_service_handler_find_and_add_contact_by_meta_tag (TalkServiceIf *iface, Contact ** _return, const gint32 reqSeq, const gchar * userid, const gchar * reference, TalkException ** e, GError **error);
gboolean talk_service_handler_report_settings (TalkServiceIf *iface, const gint64 syncOpRevision, const Settings * settings, TalkException ** e, GError **error);
gboolean talk_service_handler_report_spam (TalkServiceIf *iface, const gchar * chatMid, const GPtrArray * memberMids, const GArray * spammerReasons, const GPtrArray * senderMids, const GPtrArray * spamMessageIds, const GPtrArray * spamMessages, TalkException ** e, GError **error);
gboolean talk_service_handler_report_spammer (TalkServiceIf *iface, const gchar * spammerMid, const GArray * spammerReasons, const GPtrArray * spamMessageIds, TalkException ** e, GError **error);
gboolean talk_service_handler_request_account_password_reset (TalkServiceIf *iface, const IdentityProvider provider, const gchar * identifier, const gchar * locale, TalkException ** e, GError **error);
gboolean talk_service_handler_request_email_confirmation (TalkServiceIf *iface, EmailConfirmationSession ** _return, const EmailConfirmation * emailConfirmation, TalkException ** e, GError **error);
gboolean talk_service_handler_request_identity_unbind (TalkServiceIf *iface, const IdentityProvider provider, const gchar * identifier, TalkException ** e, GError **error);
gboolean talk_service_handler_resend_email_confirmation (TalkServiceIf *iface, EmailConfirmationSession ** _return, const gchar * verifier, TalkException ** e, GError **error);
gboolean talk_service_handler_resend_pin_code (TalkServiceIf *iface, const gchar * sessionId, TalkException ** e, GError **error);
gboolean talk_service_handler_resend_pin_code_by_s_m_s (TalkServiceIf *iface, const gchar * sessionId, TalkException ** e, GError **error);
gboolean talk_service_handler_send_chat_checked (TalkServiceIf *iface, const gint32 seq, const gchar * consumer, const gchar * lastMessageId, TalkException ** e, GError **error);
gboolean talk_service_handler_send_message_await_commit (TalkServiceIf *iface, CommitMessageResult ** _return, const gint32 seq, const Message * message, TalkException ** e, GError **error);
gboolean talk_service_handler_send_chat_removed (TalkServiceIf *iface, const gint32 seq, const gchar * consumer, const gchar * lastMessageId, TalkException ** e, GError **error);
gboolean talk_service_handler_send_content_preview_updated (TalkServiceIf *iface, GHashTable ** _return, const gint32 esq, const gchar * messageId, const GPtrArray * receiverMids, TalkException ** e, GError **error);
gboolean talk_service_handler_send_content_receipt (TalkServiceIf *iface, const gint32 seq, const gchar * consumer, const gchar * messageId, TalkException ** e, GError **error);
gboolean talk_service_handler_send_dummy_push (TalkServiceIf *iface, TalkException ** e, GError **error);
gboolean talk_service_handler_remove_e2_e_e_public_key (TalkServiceIf *iface, const E2EEPublicKey * publicKey, TalkException ** e, GError **error);
gboolean talk_service_handler_negotiate_e2_e_e_public_key (TalkServiceIf *iface, E2EENegotiationResult ** _return, const gchar * mid, TalkException ** e, GError **error);
gboolean talk_service_handler_get_e2_e_e_public_key (TalkServiceIf *iface, E2EEPublicKey ** _return, const gchar * mid, const gint32 version, const gint32 keyId, TalkException ** e, GError **error);
gboolean talk_service_handler_request_e2_e_e_key_exchange (TalkServiceIf *iface, const gint32 reqSeq, const GByteArray * temporalPublicKey, const E2EEPublicKey * publicKey, const GByteArray * verifier, TalkException ** e, GError **error);
gboolean talk_service_handler_get_last_e2_e_e_public_keys (TalkServiceIf *iface, GHashTable ** _return, const gchar * chatMid, TalkException ** e, GError **error);
gboolean talk_service_handler_register_e2_e_e_public_key (TalkServiceIf *iface, E2EEPublicKey ** _return, const gint32 reqSeq, const E2EEPublicKey * publicKey, TalkException ** e, GError **error);
gboolean talk_service_handler_get_e2_e_e_public_keys (TalkServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean talk_service_handler_get_e2_e_e_public_keys_ex (TalkServiceIf *iface, GPtrArray ** _return, const gboolean ignoreE2EEStatus, TalkException ** e, GError **error);
gboolean talk_service_handler_get_read_message_ops_in_bulk (TalkServiceIf *iface, GPtrArray ** _return, const GPtrArray * chatIds, TalkException ** e, GError **error);
gboolean talk_service_handler_send_event (TalkServiceIf *iface, Message ** _return, const gint32 seq, const Message * message, TalkException ** e, GError **error);
gboolean talk_service_handler_send_message (TalkServiceIf *iface, Message ** _return, const gint32 seq, const Message * message, TalkException ** e, GError **error);
gboolean talk_service_handler_send_message_ignored (TalkServiceIf *iface, const gint32 seq, const gchar * consumer, const GPtrArray * messageIds, TalkException ** e, GError **error);
gboolean talk_service_handler_send_message_receipt (TalkServiceIf *iface, const gint32 seq, const gchar * consumer, const GPtrArray * messageIds, TalkException ** e, GError **error);
gboolean talk_service_handler_find_contact_by_meta_tag (TalkServiceIf *iface, Contact ** _return, const gchar * userid, const gchar * reference, TalkException ** e, GError **error);
gboolean talk_service_handler_send_message_to_my_home (TalkServiceIf *iface, Message ** _return, const gint32 seq, const Message * message, TalkException ** e, GError **error);
gboolean talk_service_handler_set_buddy_location (TalkServiceIf *iface, const gchar * mid, const gint32 index, const Geolocation * location, TalkException ** e, GError **error);
gboolean talk_service_handler_set_identity_credential (TalkServiceIf *iface, const gchar * identifier, const gchar * verifier, const IdentityProvider provider, TalkException ** e, GError **error);
gboolean talk_service_handler_set_notifications_enabled (TalkServiceIf *iface, const gint32 reqSeq, const MIDType type, const gchar * target, const gboolean enablement, TalkException ** e, GError **error);
gboolean talk_service_handler_start_update_verification (TalkServiceIf *iface, VerificationSessionData ** _return, const gchar * region, const CarrierCode carrier, const gchar * phone, const gchar * udidHash, const DeviceInfo * deviceInfo, const gchar * networkCode, const gchar * locale, TalkException ** e, GError **error);
gboolean talk_service_handler_start_verification (TalkServiceIf *iface, VerificationSessionData ** _return, const gchar * region, const CarrierCode carrier, const gchar * phone, const gchar * udidHash, const DeviceInfo * deviceInfo, const gchar * networkCode, const gchar * mid, const gchar * locale, const SIMInfo * simInfo, const gchar * oldUdidHash, TalkException ** e, GError **error);
gboolean talk_service_handler_update_group_preference_attribute (TalkServiceIf *iface, const gint32 reqSeq, const gchar * groupMid, const GHashTable * updatedAttrs, TalkException ** e, GError **error);
gboolean talk_service_handler_create_room_v2 (TalkServiceIf *iface, Room ** _return, const gint32 reqSeq, const GPtrArray * contactIds, TalkException ** e, GError **error);
gboolean talk_service_handler_store_update_profile_attribute (TalkServiceIf *iface, const gint32 seq, const ProfileAttribute profileAttribute, const gchar * value, TalkException ** e, GError **error);
gboolean talk_service_handler_sync_contact_by_sns_ids (TalkServiceIf *iface, GPtrArray ** _return, const gint32 reqSeq, const GPtrArray * modifications, TalkException ** e, GError **error);
gboolean talk_service_handler_sync_contacts (TalkServiceIf *iface, GHashTable ** _return, const gint32 reqSeq, const GPtrArray * localContacts, TalkException ** e, GError **error);
gboolean talk_service_handler_try_send_message (TalkServiceIf *iface, Message ** _return, const gint32 seq, const Message * message, TalkException ** e, GError **error);
gboolean talk_service_handler_get_next_messages_v2 (TalkServiceIf *iface, GPtrArray ** _return, const gchar * messageBoxId, const MessageBoxV2MessageId * startMessageId, const gint32 messagesCount, TalkException ** e, GError **error);
gboolean talk_service_handler_get_message_box_compact_wrap_up_v2 (TalkServiceIf *iface, TMessageBoxWrapUp ** _return, const gchar * messageBoxId, TalkException ** e, GError **error);
gboolean talk_service_handler_get_recent_messages_v2 (TalkServiceIf *iface, GPtrArray ** _return, const gchar * messageBoxId, const gint32 messagesCount, TalkException ** e, GError **error);
gboolean talk_service_handler_validate_contacts_on_bot (TalkServiceIf *iface, GHashTable ** _return, const GPtrArray * contacts, TalkException ** e, GError **error);
gboolean talk_service_handler_try_friend_request (TalkServiceIf *iface, const gchar * midOrEMid, const FriendRequestMethod method, const gchar * friendRequestParams, TalkException ** e, GError **error);
gboolean talk_service_handler_unblock_contact (TalkServiceIf *iface, const gint32 reqSeq, const gchar * id, TalkException ** e, GError **error);
gboolean talk_service_handler_unblock_recommendation (TalkServiceIf *iface, const gint32 reqSeq, const gchar * id, TalkException ** e, GError **error);
gboolean talk_service_handler_unregister_user_and_device (TalkServiceIf *iface, gchar ** _return, TalkException ** e, GError **error);
gboolean talk_service_handler_update_apns_device_token (TalkServiceIf *iface, const GByteArray * apnsDeviceToken, TalkException ** e, GError **error);
gboolean talk_service_handler_update_buddy_setting (TalkServiceIf *iface, const gchar * key, const gchar * value, TalkException ** e, GError **error);
gboolean talk_service_handler_update_c2_d_m_registration_id (TalkServiceIf *iface, const gchar * registrationId, TalkException ** e, GError **error);
gboolean talk_service_handler_update_contact_setting (TalkServiceIf *iface, const gint32 reqSeq, const gchar * mid, const ContactSetting flag, const gchar * value, TalkException ** e, GError **error);
gboolean talk_service_handler_update_custom_mode_settings (TalkServiceIf *iface, const CustomMode customMode, const GHashTable * paramMap, TalkException ** e, GError **error);
gboolean talk_service_handler_update_device_info (TalkServiceIf *iface, const gchar * deviceUid, const DeviceInfo * deviceInfo, TalkException ** e, GError **error);
gboolean talk_service_handler_update_group (TalkServiceIf *iface, const gint32 reqSeq, const Group * group, TalkException ** e, GError **error);
gboolean talk_service_handler_update_notification_token (TalkServiceIf *iface, const NotificationType type, const gchar * token, TalkException ** e, GError **error);
gboolean talk_service_handler_update_notification_token_with_bytes (TalkServiceIf *iface, const NotificationType type, const GByteArray * token, TalkException ** e, GError **error);
gboolean talk_service_handler_update_profile (TalkServiceIf *iface, const gint32 reqSeq, const Profile * profile, TalkException ** e, GError **error);
gboolean talk_service_handler_update_profile_attribute (TalkServiceIf *iface, const gint32 reqSeq, const ProfileAttribute attr, const gchar * value, TalkException ** e, GError **error);
gboolean talk_service_handler_update_region (TalkServiceIf *iface, const gchar * region, TalkException ** e, GError **error);
gboolean talk_service_handler_update_settings (TalkServiceIf *iface, const gint32 reqSeq, const Settings * settings, TalkException ** e, GError **error);
gboolean talk_service_handler_update_settings2 (TalkServiceIf *iface, gint32* _return, const gint32 reqSeq, const Settings * settings, TalkException ** e, GError **error);
gboolean talk_service_handler_update_settings_attribute (TalkServiceIf *iface, const gint32 reqSeq, const SettingsAttribute attr, const gchar * value, TalkException ** e, GError **error);
gboolean talk_service_handler_update_settings_attributes (TalkServiceIf *iface, gint32* _return, const gint32 reqSeq, const gint32 attrBitset, const Settings * settings, TalkException ** e, GError **error);
gboolean talk_service_handler_verify_identity_credential (TalkServiceIf *iface, const IdentityProvider identityProvider, const gchar * identifier, const gchar * password, TalkException ** e, GError **error);
gboolean talk_service_handler_verify_identity_credential_with_result (TalkServiceIf *iface, UserAuthStatus ** _return, const IdentityCredential * identityCredential, TalkException ** e, GError **error);
gboolean talk_service_handler_verify_phone (TalkServiceIf *iface, VerificationResult* _return, const gchar * sessionId, const gchar * pinCode, const gchar * udidHash, TalkException ** e, GError **error);
gboolean talk_service_handler_verify_qrcode (TalkServiceIf *iface, gchar ** _return, const gchar * verifier, const gchar * pinCode, TalkException ** e, GError **error);

/* TalkService processor */
struct _TalkServiceProcessor
{
  ThriftDispatchProcessor parent;

  /* protected */
  TalkServiceHandler *handler;
  GHashTable *process_map;
};
typedef struct _TalkServiceProcessor TalkServiceProcessor;

struct _TalkServiceProcessorClass
{
  ThriftDispatchProcessorClass parent;

  /* protected */
  gboolean (*dispatch_call) (ThriftDispatchProcessor *processor,
                             ThriftProtocol *in,
                             ThriftProtocol *out,
                             gchar *fname,
                             gint32 seqid,
                             GError **error);
};
typedef struct _TalkServiceProcessorClass TalkServiceProcessorClass;

GType talk_service_processor_get_type (void);
#define TYPE_TALK_SERVICE_PROCESSOR (talk_service_processor_get_type())
#define TALK_SERVICE_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_TALK_SERVICE_PROCESSOR, TalkServiceProcessor))
#define IS_TALK_SERVICE_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_TALK_SERVICE_PROCESSOR))
#define TALK_SERVICE_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_TALK_SERVICE_PROCESSOR, TalkServiceProcessorClass))
#define IS_TALK_SERVICE_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_TALK_SERVICE_PROCESSOR))
#define TALK_SERVICE_PROCESSOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_TALK_SERVICE_PROCESSOR, TalkServiceProcessorClass))

#endif /* TALK_SERVICE_H */
