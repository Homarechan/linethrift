/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CALL_SERVICE_H
#define CALL_SERVICE_H

#include <thrift/c_glib/processor/thrift_dispatch_processor.h>

#include "line_types.h"

/* CallService service interface */
typedef struct _CallServiceIf CallServiceIf;  /* dummy object */

struct _CallServiceIfInterface
{
  GTypeInterface parent;

  gboolean (*get_user_status) (CallServiceIf *iface, UserStatus* _return, const gchar * mid, TalkException ** e, GError **error);
  gboolean (*update_profile_attribute_for_channel) (CallServiceIf *iface, const ProfileAttribute profileAttribute, const gchar * value, TalkException ** e, GError **error);
  gboolean (*update_extended_profile_attribute) (CallServiceIf *iface, const ExtendedProfileAttribute attr, const ExtendedProfile * extendedProfile, TalkException ** e, GError **error);
  gboolean (*get_all_simple_channel_contacts) (CallServiceIf *iface, GPtrArray ** _return, const gboolean statusSticonFallbackDisabled, TalkException ** e, GError **error);
  gboolean (*get_user_identities) (CallServiceIf *iface, GHashTable ** _return, TalkException ** e, GError **error);
  gboolean (*mark_paid_call_ad) (CallServiceIf *iface, PaidCallDialing ** _return, const gchar * dialedNumber, const gchar * language, const gboolean disableCallerId, TalkException ** e, GError **error);
  gboolean (*is_group_member) (CallServiceIf *iface, gboolean* _return, const gchar * groupId, TalkException ** e, GError **error);
  gboolean (*get_phone_info_from_phone_number) (CallServiceIf *iface, PhoneInfoForChannel ** _return, const gchar * region, const gchar * phoneNumber, TalkException ** e, GError **error);
  gboolean (*redeem_paid_call_voucher) (CallServiceIf *iface, PaidCallRedeemResult ** _return, const gchar * serial, const gchar * language, TalkException ** e, GError **error);
  gboolean (*get_preferred_display_name) (CallServiceIf *iface, GHashTable ** _return, const GPtrArray * mids, TalkException ** e, GError **error);
  gboolean (*get_contacts_for_channel) (CallServiceIf *iface, GPtrArray ** _return, const GPtrArray * ids, TalkException ** e, GError **error);
  gboolean (*get_call_credit_products) (CallServiceIf *iface, GPtrArray ** _return, const PaymentType appStoreCode, const PaymentPgType pgCode, const gchar * country, const gchar * language, TalkException ** e, GError **error);
  gboolean (*get_compact_contacts) (CallServiceIf *iface, GPtrArray ** _return, const gint64 lastModifiedTimestamp, TalkException ** e, GError **error);
  gboolean (*notify_noti_center_event) (CallServiceIf *iface, const NotiCenterEventData * event, TalkException ** e, GError **error);
  gboolean (*is_in_contact) (CallServiceIf *iface, gboolean* _return, const gchar * mid, TalkException ** e, GError **error);
  gboolean (*lookup_group_members) (CallServiceIf *iface, GPtrArray ** _return, const gchar * groupId, const GPtrArray * mids, TalkException ** e, GError **error);
  gboolean (*get_room_information) (CallServiceIf *iface, Room ** _return, const gchar * roomMid, TalkException ** e, GError **error);
  gboolean (*get_group_call) (CallServiceIf *iface, GroupCall ** _return, const gchar * chatMid, TalkException ** e, GError **error);
  gboolean (*is_allow_secondary_device_login) (CallServiceIf *iface, gboolean* _return, TalkException ** e, GError **error);
  gboolean (*get_primary_client_for_channel) (CallServiceIf *iface, SimpleChannelClient ** _return, TalkException ** e, GError **error);
  gboolean (*create_room_with_buddy) (CallServiceIf *iface, Room ** _return, const gint32 reqSeq, const gchar * buddyMid, const GPtrArray * contactIds, TalkException ** e, GError **error);
  gboolean (*get_display_name) (CallServiceIf *iface, gchar ** _return, const gchar * mid, TalkException ** e, GError **error);
  gboolean (*get_paid_call_metadata) (CallServiceIf *iface, PaidCallMetadataResult ** _return, const gchar * language, TalkException ** e, GError **error);
  gboolean (*get_mid) (CallServiceIf *iface, gchar ** _return, TalkException ** e, GError **error);
  gboolean (*get_user_country_for_billing) (CallServiceIf *iface, gchar ** _return, const gchar * country, const gchar * remoteIp, TalkException ** e, GError **error);
  gboolean (*get_favorite_group_ids_for_channel) (CallServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_paid_call_history) (CallServiceIf *iface, PaidCallHistoryResult ** _return, const gint64 start, const gint32 size, const gchar * language, TalkException ** e, GError **error);
  gboolean (*send_pin_code_operation) (CallServiceIf *iface, const gchar * verifier, TalkException ** e, GError **error);
  gboolean (*invite_into_group_call) (CallServiceIf *iface, const gchar * chatMid, const GPtrArray * memberMids, const GroupCallMediaType mediaType, TalkException ** e, GError **error);
  gboolean (*get_friend_mids) (CallServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_meta_profile) (CallServiceIf *iface, MetaProfile ** _return, TalkException ** e, GError **error);
  gboolean (*send_message_for_channel) (CallServiceIf *iface, Message ** _return, const Message * message, TalkException ** e, GError **error);
  gboolean (*active_buddy_subscriber_count) (CallServiceIf *iface, gint64* _return, TalkException ** e, GError **error);
  gboolean (*get_call_credit_purchase_history) (CallServiceIf *iface, CoinHistoryResult ** _return, const CoinHistoryCondition * request, TalkException ** e, GError **error);
  gboolean (*is_room_member) (CallServiceIf *iface, gboolean* _return, const gchar * roomId, TalkException ** e, GError **error);
  gboolean (*send_system_o_a_message) (CallServiceIf *iface, Message ** _return, const Message * message, TalkException ** e, GError **error);
  gboolean (*acquire_paid_call_route) (CallServiceIf *iface, PaidCallResponse ** _return, const PaidCallType paidCallType, const gchar * dialedNumber, const gchar * language, const gchar * networkCode, const gboolean disableCallerId, const gchar * referer, const gchar * adSessionId, TalkException ** e, GError **error);
  gboolean (*get_groups_for_channel) (CallServiceIf *iface, GPtrArray ** _return, const GPtrArray * groupIds, TalkException ** e, GError **error);
  gboolean (*get_user_create_time) (CallServiceIf *iface, gint64* _return, TalkException ** e, GError **error);
  gboolean (*register_channel_c_p) (CallServiceIf *iface, gchar ** _return, const gchar * cpId, const gchar * registerPassword, TalkException ** e, GError **error);
  gboolean (*reserve_call_credit_purchase) (CallServiceIf *iface, PaymentReservationResult ** _return, const CoinPurchaseReservation * request, TalkException ** e, GError **error);
  gboolean (*acquire_paid_call_currency_exchange_rate) (CallServiceIf *iface, GPtrArray ** _return, const gchar * language, TalkException ** e, GError **error);
  gboolean (*get_room_member_mids_for_app_platform) (CallServiceIf *iface, GPtrArray ** _return, const gchar * roomId, TalkException ** e, GError **error);
  gboolean (*get_paid_call_balance_list) (CallServiceIf *iface, GPtrArray ** _return, const gchar * language, TalkException ** e, GError **error);
  gboolean (*get_personal_infos) (CallServiceIf *iface, GHashTable ** _return, const GHashTable * requiredPersonalInfos, TalkException ** e, GError **error);
  gboolean (*get_primary_clients_for_channel) (CallServiceIf *iface, GPtrArray ** _return, const GPtrArray * userMids, TalkException ** e, GError **error);
  gboolean (*add_buddy_to_contact) (CallServiceIf *iface, ContactTransition ** _return, const gchar * buddyMid, TalkException ** e, GError **error);
  gboolean (*get_group_member_mids_for_app_platform) (CallServiceIf *iface, GPtrArray ** _return, const gchar * groupId, TalkException ** e, GError **error);
  gboolean (*get_user_language) (CallServiceIf *iface, gchar ** _return, TalkException ** e, GError **error);
  gboolean (*lookup_paid_call) (CallServiceIf *iface, PaidCallResponse ** _return, const gchar * dialedNumber, const gchar * language, const gchar * referer, TalkException ** e, GError **error);
  gboolean (*get_extended_profile) (CallServiceIf *iface, ExtendedProfile ** _return, TalkException ** e, GError **error);
  gboolean (*get_reverse_compact_contacts) (CallServiceIf *iface, GHashTable ** _return, const GPtrArray * ids, TalkException ** e, GError **error);
  gboolean (*get_paid_call_ad_status) (CallServiceIf *iface, PaidCallAdResult ** _return, TalkException ** e, GError **error);
  gboolean (*find_contact_by_userid_without_abuse_block_for_channel) (CallServiceIf *iface, Contact ** _return, const gchar * userid, TalkException ** e, GError **error);
  gboolean (*get_group_member_mids) (CallServiceIf *iface, GPtrArray ** _return, const gchar * groupId, TalkException ** e, GError **error);
  gboolean (*send_message_without_relationship) (CallServiceIf *iface, Message ** _return, const Message * message, TalkException ** e, GError **error);
  gboolean (*display_buddy_subscriber_count_in_bulk) (CallServiceIf *iface, GHashTable ** _return, const GPtrArray * mids, TalkException ** e, GError **error);
  gboolean (*lookup_room_members) (CallServiceIf *iface, GPtrArray ** _return, const gchar * roomId, const GPtrArray * mids, TalkException ** e, GError **error);
  gboolean (*get_favorite_mids_for_channel) (CallServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_all_contact_ids_for_channel) (CallServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*display_buddy_subscriber_count) (CallServiceIf *iface, gint64* _return, TalkException ** e, GError **error);
  gboolean (*get_profile_for_channel) (CallServiceIf *iface, Profile ** _return, TalkException ** e, GError **error);
  gboolean (*get_user_tickets) (CallServiceIf *iface, GPtrArray ** _return, const GPtrArray * userMids, TalkException ** e, GError **error);
  gboolean (*get_o_a_friend_mids) (CallServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*search_paid_call_user_rate) (CallServiceIf *iface, GPtrArray ** _return, const gchar * countryCode, const gchar * language, TalkException ** e, GError **error);
  gboolean (*get_joined_group_ids_for_channel) (CallServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*acquire_group_call_route) (CallServiceIf *iface, GroupCallRoute ** _return, const gchar * chatMid, const GroupCallMediaType mediaType, TalkException ** e, GError **error);
  gboolean (*get_user_mids_who_added_me) (CallServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_identity_credential) (CallServiceIf *iface, IdentityCredential ** _return, TalkException ** e, GError **error);
  gboolean (*add_operation_for_channel) (CallServiceIf *iface, const OpType opType, const gchar * param1, const gchar * param2, const gchar * param3, TalkException ** e, GError **error);
  gboolean (*get_simple_channel_contacts) (CallServiceIf *iface, GPtrArray ** _return, const GPtrArray * ids, const gboolean statusSticonFallbackDisabled, TalkException ** e, GError **error);
  gboolean (*get_user_last_sent_message_time_stamp) (CallServiceIf *iface, gint64* _return, const gchar * mid, TalkException ** e, GError **error);
};
typedef struct _CallServiceIfInterface CallServiceIfInterface;

GType call_service_if_get_type (void);
#define TYPE_CALL_SERVICE_IF (call_service_if_get_type())
#define CALL_SERVICE_IF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CALL_SERVICE_IF, CallServiceIf))
#define IS_CALL_SERVICE_IF(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CALL_SERVICE_IF))
#define CALL_SERVICE_IF_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), TYPE_CALL_SERVICE_IF, CallServiceIfInterface))

gboolean call_service_if_get_user_status (CallServiceIf *iface, UserStatus* _return, const gchar * mid, TalkException ** e, GError **error);
gboolean call_service_if_update_profile_attribute_for_channel (CallServiceIf *iface, const ProfileAttribute profileAttribute, const gchar * value, TalkException ** e, GError **error);
gboolean call_service_if_update_extended_profile_attribute (CallServiceIf *iface, const ExtendedProfileAttribute attr, const ExtendedProfile * extendedProfile, TalkException ** e, GError **error);
gboolean call_service_if_get_all_simple_channel_contacts (CallServiceIf *iface, GPtrArray ** _return, const gboolean statusSticonFallbackDisabled, TalkException ** e, GError **error);
gboolean call_service_if_get_user_identities (CallServiceIf *iface, GHashTable ** _return, TalkException ** e, GError **error);
gboolean call_service_if_mark_paid_call_ad (CallServiceIf *iface, PaidCallDialing ** _return, const gchar * dialedNumber, const gchar * language, const gboolean disableCallerId, TalkException ** e, GError **error);
gboolean call_service_if_is_group_member (CallServiceIf *iface, gboolean* _return, const gchar * groupId, TalkException ** e, GError **error);
gboolean call_service_if_get_phone_info_from_phone_number (CallServiceIf *iface, PhoneInfoForChannel ** _return, const gchar * region, const gchar * phoneNumber, TalkException ** e, GError **error);
gboolean call_service_if_redeem_paid_call_voucher (CallServiceIf *iface, PaidCallRedeemResult ** _return, const gchar * serial, const gchar * language, TalkException ** e, GError **error);
gboolean call_service_if_get_preferred_display_name (CallServiceIf *iface, GHashTable ** _return, const GPtrArray * mids, TalkException ** e, GError **error);
gboolean call_service_if_get_contacts_for_channel (CallServiceIf *iface, GPtrArray ** _return, const GPtrArray * ids, TalkException ** e, GError **error);
gboolean call_service_if_get_call_credit_products (CallServiceIf *iface, GPtrArray ** _return, const PaymentType appStoreCode, const PaymentPgType pgCode, const gchar * country, const gchar * language, TalkException ** e, GError **error);
gboolean call_service_if_get_compact_contacts (CallServiceIf *iface, GPtrArray ** _return, const gint64 lastModifiedTimestamp, TalkException ** e, GError **error);
gboolean call_service_if_notify_noti_center_event (CallServiceIf *iface, const NotiCenterEventData * event, TalkException ** e, GError **error);
gboolean call_service_if_is_in_contact (CallServiceIf *iface, gboolean* _return, const gchar * mid, TalkException ** e, GError **error);
gboolean call_service_if_lookup_group_members (CallServiceIf *iface, GPtrArray ** _return, const gchar * groupId, const GPtrArray * mids, TalkException ** e, GError **error);
gboolean call_service_if_get_room_information (CallServiceIf *iface, Room ** _return, const gchar * roomMid, TalkException ** e, GError **error);
gboolean call_service_if_get_group_call (CallServiceIf *iface, GroupCall ** _return, const gchar * chatMid, TalkException ** e, GError **error);
gboolean call_service_if_is_allow_secondary_device_login (CallServiceIf *iface, gboolean* _return, TalkException ** e, GError **error);
gboolean call_service_if_get_primary_client_for_channel (CallServiceIf *iface, SimpleChannelClient ** _return, TalkException ** e, GError **error);
gboolean call_service_if_create_room_with_buddy (CallServiceIf *iface, Room ** _return, const gint32 reqSeq, const gchar * buddyMid, const GPtrArray * contactIds, TalkException ** e, GError **error);
gboolean call_service_if_get_display_name (CallServiceIf *iface, gchar ** _return, const gchar * mid, TalkException ** e, GError **error);
gboolean call_service_if_get_paid_call_metadata (CallServiceIf *iface, PaidCallMetadataResult ** _return, const gchar * language, TalkException ** e, GError **error);
gboolean call_service_if_get_mid (CallServiceIf *iface, gchar ** _return, TalkException ** e, GError **error);
gboolean call_service_if_get_user_country_for_billing (CallServiceIf *iface, gchar ** _return, const gchar * country, const gchar * remoteIp, TalkException ** e, GError **error);
gboolean call_service_if_get_favorite_group_ids_for_channel (CallServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean call_service_if_get_paid_call_history (CallServiceIf *iface, PaidCallHistoryResult ** _return, const gint64 start, const gint32 size, const gchar * language, TalkException ** e, GError **error);
gboolean call_service_if_send_pin_code_operation (CallServiceIf *iface, const gchar * verifier, TalkException ** e, GError **error);
gboolean call_service_if_invite_into_group_call (CallServiceIf *iface, const gchar * chatMid, const GPtrArray * memberMids, const GroupCallMediaType mediaType, TalkException ** e, GError **error);
gboolean call_service_if_get_friend_mids (CallServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean call_service_if_get_meta_profile (CallServiceIf *iface, MetaProfile ** _return, TalkException ** e, GError **error);
gboolean call_service_if_send_message_for_channel (CallServiceIf *iface, Message ** _return, const Message * message, TalkException ** e, GError **error);
gboolean call_service_if_active_buddy_subscriber_count (CallServiceIf *iface, gint64* _return, TalkException ** e, GError **error);
gboolean call_service_if_get_call_credit_purchase_history (CallServiceIf *iface, CoinHistoryResult ** _return, const CoinHistoryCondition * request, TalkException ** e, GError **error);
gboolean call_service_if_is_room_member (CallServiceIf *iface, gboolean* _return, const gchar * roomId, TalkException ** e, GError **error);
gboolean call_service_if_send_system_o_a_message (CallServiceIf *iface, Message ** _return, const Message * message, TalkException ** e, GError **error);
gboolean call_service_if_acquire_paid_call_route (CallServiceIf *iface, PaidCallResponse ** _return, const PaidCallType paidCallType, const gchar * dialedNumber, const gchar * language, const gchar * networkCode, const gboolean disableCallerId, const gchar * referer, const gchar * adSessionId, TalkException ** e, GError **error);
gboolean call_service_if_get_groups_for_channel (CallServiceIf *iface, GPtrArray ** _return, const GPtrArray * groupIds, TalkException ** e, GError **error);
gboolean call_service_if_get_user_create_time (CallServiceIf *iface, gint64* _return, TalkException ** e, GError **error);
gboolean call_service_if_register_channel_c_p (CallServiceIf *iface, gchar ** _return, const gchar * cpId, const gchar * registerPassword, TalkException ** e, GError **error);
gboolean call_service_if_reserve_call_credit_purchase (CallServiceIf *iface, PaymentReservationResult ** _return, const CoinPurchaseReservation * request, TalkException ** e, GError **error);
gboolean call_service_if_acquire_paid_call_currency_exchange_rate (CallServiceIf *iface, GPtrArray ** _return, const gchar * language, TalkException ** e, GError **error);
gboolean call_service_if_get_room_member_mids_for_app_platform (CallServiceIf *iface, GPtrArray ** _return, const gchar * roomId, TalkException ** e, GError **error);
gboolean call_service_if_get_paid_call_balance_list (CallServiceIf *iface, GPtrArray ** _return, const gchar * language, TalkException ** e, GError **error);
gboolean call_service_if_get_personal_infos (CallServiceIf *iface, GHashTable ** _return, const GHashTable * requiredPersonalInfos, TalkException ** e, GError **error);
gboolean call_service_if_get_primary_clients_for_channel (CallServiceIf *iface, GPtrArray ** _return, const GPtrArray * userMids, TalkException ** e, GError **error);
gboolean call_service_if_add_buddy_to_contact (CallServiceIf *iface, ContactTransition ** _return, const gchar * buddyMid, TalkException ** e, GError **error);
gboolean call_service_if_get_group_member_mids_for_app_platform (CallServiceIf *iface, GPtrArray ** _return, const gchar * groupId, TalkException ** e, GError **error);
gboolean call_service_if_get_user_language (CallServiceIf *iface, gchar ** _return, TalkException ** e, GError **error);
gboolean call_service_if_lookup_paid_call (CallServiceIf *iface, PaidCallResponse ** _return, const gchar * dialedNumber, const gchar * language, const gchar * referer, TalkException ** e, GError **error);
gboolean call_service_if_get_extended_profile (CallServiceIf *iface, ExtendedProfile ** _return, TalkException ** e, GError **error);
gboolean call_service_if_get_reverse_compact_contacts (CallServiceIf *iface, GHashTable ** _return, const GPtrArray * ids, TalkException ** e, GError **error);
gboolean call_service_if_get_paid_call_ad_status (CallServiceIf *iface, PaidCallAdResult ** _return, TalkException ** e, GError **error);
gboolean call_service_if_find_contact_by_userid_without_abuse_block_for_channel (CallServiceIf *iface, Contact ** _return, const gchar * userid, TalkException ** e, GError **error);
gboolean call_service_if_get_group_member_mids (CallServiceIf *iface, GPtrArray ** _return, const gchar * groupId, TalkException ** e, GError **error);
gboolean call_service_if_send_message_without_relationship (CallServiceIf *iface, Message ** _return, const Message * message, TalkException ** e, GError **error);
gboolean call_service_if_display_buddy_subscriber_count_in_bulk (CallServiceIf *iface, GHashTable ** _return, const GPtrArray * mids, TalkException ** e, GError **error);
gboolean call_service_if_lookup_room_members (CallServiceIf *iface, GPtrArray ** _return, const gchar * roomId, const GPtrArray * mids, TalkException ** e, GError **error);
gboolean call_service_if_get_favorite_mids_for_channel (CallServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean call_service_if_get_all_contact_ids_for_channel (CallServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean call_service_if_display_buddy_subscriber_count (CallServiceIf *iface, gint64* _return, TalkException ** e, GError **error);
gboolean call_service_if_get_profile_for_channel (CallServiceIf *iface, Profile ** _return, TalkException ** e, GError **error);
gboolean call_service_if_get_user_tickets (CallServiceIf *iface, GPtrArray ** _return, const GPtrArray * userMids, TalkException ** e, GError **error);
gboolean call_service_if_get_o_a_friend_mids (CallServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean call_service_if_search_paid_call_user_rate (CallServiceIf *iface, GPtrArray ** _return, const gchar * countryCode, const gchar * language, TalkException ** e, GError **error);
gboolean call_service_if_get_joined_group_ids_for_channel (CallServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean call_service_if_acquire_group_call_route (CallServiceIf *iface, GroupCallRoute ** _return, const gchar * chatMid, const GroupCallMediaType mediaType, TalkException ** e, GError **error);
gboolean call_service_if_get_user_mids_who_added_me (CallServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean call_service_if_get_identity_credential (CallServiceIf *iface, IdentityCredential ** _return, TalkException ** e, GError **error);
gboolean call_service_if_add_operation_for_channel (CallServiceIf *iface, const OpType opType, const gchar * param1, const gchar * param2, const gchar * param3, TalkException ** e, GError **error);
gboolean call_service_if_get_simple_channel_contacts (CallServiceIf *iface, GPtrArray ** _return, const GPtrArray * ids, const gboolean statusSticonFallbackDisabled, TalkException ** e, GError **error);
gboolean call_service_if_get_user_last_sent_message_time_stamp (CallServiceIf *iface, gint64* _return, const gchar * mid, TalkException ** e, GError **error);

/* CallService service client */
struct _CallServiceClient
{
  GObject parent;

  ThriftProtocol *input_protocol;
  ThriftProtocol *output_protocol;
};
typedef struct _CallServiceClient CallServiceClient;

struct _CallServiceClientClass
{
  GObjectClass parent;
};
typedef struct _CallServiceClientClass CallServiceClientClass;

GType call_service_client_get_type (void);
#define TYPE_CALL_SERVICE_CLIENT (call_service_client_get_type())
#define CALL_SERVICE_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CALL_SERVICE_CLIENT, CallServiceClient))
#define CALL_SERVICE_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_CALL_SERVICE_CLIENT, CallServiceClientClass))
#define CALL_SERVICE_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CALL_SERVICE_CLIENT))
#define CALL_SERVICE_IS_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_CALL_SERVICE_CLIENT))
#define CALL_SERVICE_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_CALL_SERVICE_CLIENT, CallServiceClientClass))

gboolean call_service_client_get_user_status (CallServiceIf * iface, UserStatus* _return, const gchar * mid, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_user_status (CallServiceIf * iface, const gchar * mid, GError ** error);
gboolean call_service_client_recv_get_user_status (CallServiceIf * iface, UserStatus* _return, TalkException ** e, GError ** error);
gboolean call_service_client_update_profile_attribute_for_channel (CallServiceIf * iface, const ProfileAttribute profileAttribute, const gchar * value, TalkException ** e, GError ** error);
gboolean call_service_client_send_update_profile_attribute_for_channel (CallServiceIf * iface, const ProfileAttribute profileAttribute, const gchar * value, GError ** error);
gboolean call_service_client_recv_update_profile_attribute_for_channel (CallServiceIf * iface, TalkException ** e, GError ** error);
gboolean call_service_client_update_extended_profile_attribute (CallServiceIf * iface, const ExtendedProfileAttribute attr, const ExtendedProfile * extendedProfile, TalkException ** e, GError ** error);
gboolean call_service_client_send_update_extended_profile_attribute (CallServiceIf * iface, const ExtendedProfileAttribute attr, const ExtendedProfile * extendedProfile, GError ** error);
gboolean call_service_client_recv_update_extended_profile_attribute (CallServiceIf * iface, TalkException ** e, GError ** error);
gboolean call_service_client_get_all_simple_channel_contacts (CallServiceIf * iface, GPtrArray ** _return, const gboolean statusSticonFallbackDisabled, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_all_simple_channel_contacts (CallServiceIf * iface, const gboolean statusSticonFallbackDisabled, GError ** error);
gboolean call_service_client_recv_get_all_simple_channel_contacts (CallServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_user_identities (CallServiceIf * iface, GHashTable ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_user_identities (CallServiceIf * iface, GError ** error);
gboolean call_service_client_recv_get_user_identities (CallServiceIf * iface, GHashTable ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_mark_paid_call_ad (CallServiceIf * iface, PaidCallDialing ** _return, const gchar * dialedNumber, const gchar * language, const gboolean disableCallerId, TalkException ** e, GError ** error);
gboolean call_service_client_send_mark_paid_call_ad (CallServiceIf * iface, const gchar * dialedNumber, const gchar * language, const gboolean disableCallerId, GError ** error);
gboolean call_service_client_recv_mark_paid_call_ad (CallServiceIf * iface, PaidCallDialing ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_is_group_member (CallServiceIf * iface, gboolean* _return, const gchar * groupId, TalkException ** e, GError ** error);
gboolean call_service_client_send_is_group_member (CallServiceIf * iface, const gchar * groupId, GError ** error);
gboolean call_service_client_recv_is_group_member (CallServiceIf * iface, gboolean* _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_phone_info_from_phone_number (CallServiceIf * iface, PhoneInfoForChannel ** _return, const gchar * region, const gchar * phoneNumber, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_phone_info_from_phone_number (CallServiceIf * iface, const gchar * region, const gchar * phoneNumber, GError ** error);
gboolean call_service_client_recv_get_phone_info_from_phone_number (CallServiceIf * iface, PhoneInfoForChannel ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_redeem_paid_call_voucher (CallServiceIf * iface, PaidCallRedeemResult ** _return, const gchar * serial, const gchar * language, TalkException ** e, GError ** error);
gboolean call_service_client_send_redeem_paid_call_voucher (CallServiceIf * iface, const gchar * serial, const gchar * language, GError ** error);
gboolean call_service_client_recv_redeem_paid_call_voucher (CallServiceIf * iface, PaidCallRedeemResult ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_preferred_display_name (CallServiceIf * iface, GHashTable ** _return, const GPtrArray * mids, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_preferred_display_name (CallServiceIf * iface, const GPtrArray * mids, GError ** error);
gboolean call_service_client_recv_get_preferred_display_name (CallServiceIf * iface, GHashTable ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_contacts_for_channel (CallServiceIf * iface, GPtrArray ** _return, const GPtrArray * ids, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_contacts_for_channel (CallServiceIf * iface, const GPtrArray * ids, GError ** error);
gboolean call_service_client_recv_get_contacts_for_channel (CallServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_call_credit_products (CallServiceIf * iface, GPtrArray ** _return, const PaymentType appStoreCode, const PaymentPgType pgCode, const gchar * country, const gchar * language, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_call_credit_products (CallServiceIf * iface, const PaymentType appStoreCode, const PaymentPgType pgCode, const gchar * country, const gchar * language, GError ** error);
gboolean call_service_client_recv_get_call_credit_products (CallServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_compact_contacts (CallServiceIf * iface, GPtrArray ** _return, const gint64 lastModifiedTimestamp, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_compact_contacts (CallServiceIf * iface, const gint64 lastModifiedTimestamp, GError ** error);
gboolean call_service_client_recv_get_compact_contacts (CallServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_notify_noti_center_event (CallServiceIf * iface, const NotiCenterEventData * event, TalkException ** e, GError ** error);
gboolean call_service_client_send_notify_noti_center_event (CallServiceIf * iface, const NotiCenterEventData * event, GError ** error);
gboolean call_service_client_recv_notify_noti_center_event (CallServiceIf * iface, TalkException ** e, GError ** error);
gboolean call_service_client_is_in_contact (CallServiceIf * iface, gboolean* _return, const gchar * mid, TalkException ** e, GError ** error);
gboolean call_service_client_send_is_in_contact (CallServiceIf * iface, const gchar * mid, GError ** error);
gboolean call_service_client_recv_is_in_contact (CallServiceIf * iface, gboolean* _return, TalkException ** e, GError ** error);
gboolean call_service_client_lookup_group_members (CallServiceIf * iface, GPtrArray ** _return, const gchar * groupId, const GPtrArray * mids, TalkException ** e, GError ** error);
gboolean call_service_client_send_lookup_group_members (CallServiceIf * iface, const gchar * groupId, const GPtrArray * mids, GError ** error);
gboolean call_service_client_recv_lookup_group_members (CallServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_room_information (CallServiceIf * iface, Room ** _return, const gchar * roomMid, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_room_information (CallServiceIf * iface, const gchar * roomMid, GError ** error);
gboolean call_service_client_recv_get_room_information (CallServiceIf * iface, Room ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_group_call (CallServiceIf * iface, GroupCall ** _return, const gchar * chatMid, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_group_call (CallServiceIf * iface, const gchar * chatMid, GError ** error);
gboolean call_service_client_recv_get_group_call (CallServiceIf * iface, GroupCall ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_is_allow_secondary_device_login (CallServiceIf * iface, gboolean* _return, TalkException ** e, GError ** error);
gboolean call_service_client_send_is_allow_secondary_device_login (CallServiceIf * iface, GError ** error);
gboolean call_service_client_recv_is_allow_secondary_device_login (CallServiceIf * iface, gboolean* _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_primary_client_for_channel (CallServiceIf * iface, SimpleChannelClient ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_primary_client_for_channel (CallServiceIf * iface, GError ** error);
gboolean call_service_client_recv_get_primary_client_for_channel (CallServiceIf * iface, SimpleChannelClient ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_create_room_with_buddy (CallServiceIf * iface, Room ** _return, const gint32 reqSeq, const gchar * buddyMid, const GPtrArray * contactIds, TalkException ** e, GError ** error);
gboolean call_service_client_send_create_room_with_buddy (CallServiceIf * iface, const gint32 reqSeq, const gchar * buddyMid, const GPtrArray * contactIds, GError ** error);
gboolean call_service_client_recv_create_room_with_buddy (CallServiceIf * iface, Room ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_display_name (CallServiceIf * iface, gchar ** _return, const gchar * mid, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_display_name (CallServiceIf * iface, const gchar * mid, GError ** error);
gboolean call_service_client_recv_get_display_name (CallServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_paid_call_metadata (CallServiceIf * iface, PaidCallMetadataResult ** _return, const gchar * language, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_paid_call_metadata (CallServiceIf * iface, const gchar * language, GError ** error);
gboolean call_service_client_recv_get_paid_call_metadata (CallServiceIf * iface, PaidCallMetadataResult ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_mid (CallServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_mid (CallServiceIf * iface, GError ** error);
gboolean call_service_client_recv_get_mid (CallServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_user_country_for_billing (CallServiceIf * iface, gchar ** _return, const gchar * country, const gchar * remoteIp, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_user_country_for_billing (CallServiceIf * iface, const gchar * country, const gchar * remoteIp, GError ** error);
gboolean call_service_client_recv_get_user_country_for_billing (CallServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_favorite_group_ids_for_channel (CallServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_favorite_group_ids_for_channel (CallServiceIf * iface, GError ** error);
gboolean call_service_client_recv_get_favorite_group_ids_for_channel (CallServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_paid_call_history (CallServiceIf * iface, PaidCallHistoryResult ** _return, const gint64 start, const gint32 size, const gchar * language, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_paid_call_history (CallServiceIf * iface, const gint64 start, const gint32 size, const gchar * language, GError ** error);
gboolean call_service_client_recv_get_paid_call_history (CallServiceIf * iface, PaidCallHistoryResult ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_send_pin_code_operation (CallServiceIf * iface, const gchar * verifier, TalkException ** e, GError ** error);
gboolean call_service_client_send_send_pin_code_operation (CallServiceIf * iface, const gchar * verifier, GError ** error);
gboolean call_service_client_recv_send_pin_code_operation (CallServiceIf * iface, TalkException ** e, GError ** error);
gboolean call_service_client_invite_into_group_call (CallServiceIf * iface, const gchar * chatMid, const GPtrArray * memberMids, const GroupCallMediaType mediaType, TalkException ** e, GError ** error);
gboolean call_service_client_send_invite_into_group_call (CallServiceIf * iface, const gchar * chatMid, const GPtrArray * memberMids, const GroupCallMediaType mediaType, GError ** error);
gboolean call_service_client_recv_invite_into_group_call (CallServiceIf * iface, TalkException ** e, GError ** error);
gboolean call_service_client_get_friend_mids (CallServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_friend_mids (CallServiceIf * iface, GError ** error);
gboolean call_service_client_recv_get_friend_mids (CallServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_meta_profile (CallServiceIf * iface, MetaProfile ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_meta_profile (CallServiceIf * iface, GError ** error);
gboolean call_service_client_recv_get_meta_profile (CallServiceIf * iface, MetaProfile ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_send_message_for_channel (CallServiceIf * iface, Message ** _return, const Message * message, TalkException ** e, GError ** error);
gboolean call_service_client_send_send_message_for_channel (CallServiceIf * iface, const Message * message, GError ** error);
gboolean call_service_client_recv_send_message_for_channel (CallServiceIf * iface, Message ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_active_buddy_subscriber_count (CallServiceIf * iface, gint64* _return, TalkException ** e, GError ** error);
gboolean call_service_client_send_active_buddy_subscriber_count (CallServiceIf * iface, GError ** error);
gboolean call_service_client_recv_active_buddy_subscriber_count (CallServiceIf * iface, gint64* _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_call_credit_purchase_history (CallServiceIf * iface, CoinHistoryResult ** _return, const CoinHistoryCondition * request, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_call_credit_purchase_history (CallServiceIf * iface, const CoinHistoryCondition * request, GError ** error);
gboolean call_service_client_recv_get_call_credit_purchase_history (CallServiceIf * iface, CoinHistoryResult ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_is_room_member (CallServiceIf * iface, gboolean* _return, const gchar * roomId, TalkException ** e, GError ** error);
gboolean call_service_client_send_is_room_member (CallServiceIf * iface, const gchar * roomId, GError ** error);
gboolean call_service_client_recv_is_room_member (CallServiceIf * iface, gboolean* _return, TalkException ** e, GError ** error);
gboolean call_service_client_send_system_o_a_message (CallServiceIf * iface, Message ** _return, const Message * message, TalkException ** e, GError ** error);
gboolean call_service_client_send_send_system_o_a_message (CallServiceIf * iface, const Message * message, GError ** error);
gboolean call_service_client_recv_send_system_o_a_message (CallServiceIf * iface, Message ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_acquire_paid_call_route (CallServiceIf * iface, PaidCallResponse ** _return, const PaidCallType paidCallType, const gchar * dialedNumber, const gchar * language, const gchar * networkCode, const gboolean disableCallerId, const gchar * referer, const gchar * adSessionId, TalkException ** e, GError ** error);
gboolean call_service_client_send_acquire_paid_call_route (CallServiceIf * iface, const PaidCallType paidCallType, const gchar * dialedNumber, const gchar * language, const gchar * networkCode, const gboolean disableCallerId, const gchar * referer, const gchar * adSessionId, GError ** error);
gboolean call_service_client_recv_acquire_paid_call_route (CallServiceIf * iface, PaidCallResponse ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_groups_for_channel (CallServiceIf * iface, GPtrArray ** _return, const GPtrArray * groupIds, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_groups_for_channel (CallServiceIf * iface, const GPtrArray * groupIds, GError ** error);
gboolean call_service_client_recv_get_groups_for_channel (CallServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_user_create_time (CallServiceIf * iface, gint64* _return, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_user_create_time (CallServiceIf * iface, GError ** error);
gboolean call_service_client_recv_get_user_create_time (CallServiceIf * iface, gint64* _return, TalkException ** e, GError ** error);
gboolean call_service_client_register_channel_c_p (CallServiceIf * iface, gchar ** _return, const gchar * cpId, const gchar * registerPassword, TalkException ** e, GError ** error);
gboolean call_service_client_send_register_channel_c_p (CallServiceIf * iface, const gchar * cpId, const gchar * registerPassword, GError ** error);
gboolean call_service_client_recv_register_channel_c_p (CallServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_reserve_call_credit_purchase (CallServiceIf * iface, PaymentReservationResult ** _return, const CoinPurchaseReservation * request, TalkException ** e, GError ** error);
gboolean call_service_client_send_reserve_call_credit_purchase (CallServiceIf * iface, const CoinPurchaseReservation * request, GError ** error);
gboolean call_service_client_recv_reserve_call_credit_purchase (CallServiceIf * iface, PaymentReservationResult ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_acquire_paid_call_currency_exchange_rate (CallServiceIf * iface, GPtrArray ** _return, const gchar * language, TalkException ** e, GError ** error);
gboolean call_service_client_send_acquire_paid_call_currency_exchange_rate (CallServiceIf * iface, const gchar * language, GError ** error);
gboolean call_service_client_recv_acquire_paid_call_currency_exchange_rate (CallServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_room_member_mids_for_app_platform (CallServiceIf * iface, GPtrArray ** _return, const gchar * roomId, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_room_member_mids_for_app_platform (CallServiceIf * iface, const gchar * roomId, GError ** error);
gboolean call_service_client_recv_get_room_member_mids_for_app_platform (CallServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_paid_call_balance_list (CallServiceIf * iface, GPtrArray ** _return, const gchar * language, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_paid_call_balance_list (CallServiceIf * iface, const gchar * language, GError ** error);
gboolean call_service_client_recv_get_paid_call_balance_list (CallServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_personal_infos (CallServiceIf * iface, GHashTable ** _return, const GHashTable * requiredPersonalInfos, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_personal_infos (CallServiceIf * iface, const GHashTable * requiredPersonalInfos, GError ** error);
gboolean call_service_client_recv_get_personal_infos (CallServiceIf * iface, GHashTable ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_primary_clients_for_channel (CallServiceIf * iface, GPtrArray ** _return, const GPtrArray * userMids, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_primary_clients_for_channel (CallServiceIf * iface, const GPtrArray * userMids, GError ** error);
gboolean call_service_client_recv_get_primary_clients_for_channel (CallServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_add_buddy_to_contact (CallServiceIf * iface, ContactTransition ** _return, const gchar * buddyMid, TalkException ** e, GError ** error);
gboolean call_service_client_send_add_buddy_to_contact (CallServiceIf * iface, const gchar * buddyMid, GError ** error);
gboolean call_service_client_recv_add_buddy_to_contact (CallServiceIf * iface, ContactTransition ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_group_member_mids_for_app_platform (CallServiceIf * iface, GPtrArray ** _return, const gchar * groupId, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_group_member_mids_for_app_platform (CallServiceIf * iface, const gchar * groupId, GError ** error);
gboolean call_service_client_recv_get_group_member_mids_for_app_platform (CallServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_user_language (CallServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_user_language (CallServiceIf * iface, GError ** error);
gboolean call_service_client_recv_get_user_language (CallServiceIf * iface, gchar ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_lookup_paid_call (CallServiceIf * iface, PaidCallResponse ** _return, const gchar * dialedNumber, const gchar * language, const gchar * referer, TalkException ** e, GError ** error);
gboolean call_service_client_send_lookup_paid_call (CallServiceIf * iface, const gchar * dialedNumber, const gchar * language, const gchar * referer, GError ** error);
gboolean call_service_client_recv_lookup_paid_call (CallServiceIf * iface, PaidCallResponse ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_extended_profile (CallServiceIf * iface, ExtendedProfile ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_extended_profile (CallServiceIf * iface, GError ** error);
gboolean call_service_client_recv_get_extended_profile (CallServiceIf * iface, ExtendedProfile ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_reverse_compact_contacts (CallServiceIf * iface, GHashTable ** _return, const GPtrArray * ids, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_reverse_compact_contacts (CallServiceIf * iface, const GPtrArray * ids, GError ** error);
gboolean call_service_client_recv_get_reverse_compact_contacts (CallServiceIf * iface, GHashTable ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_paid_call_ad_status (CallServiceIf * iface, PaidCallAdResult ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_paid_call_ad_status (CallServiceIf * iface, GError ** error);
gboolean call_service_client_recv_get_paid_call_ad_status (CallServiceIf * iface, PaidCallAdResult ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_find_contact_by_userid_without_abuse_block_for_channel (CallServiceIf * iface, Contact ** _return, const gchar * userid, TalkException ** e, GError ** error);
gboolean call_service_client_send_find_contact_by_userid_without_abuse_block_for_channel (CallServiceIf * iface, const gchar * userid, GError ** error);
gboolean call_service_client_recv_find_contact_by_userid_without_abuse_block_for_channel (CallServiceIf * iface, Contact ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_group_member_mids (CallServiceIf * iface, GPtrArray ** _return, const gchar * groupId, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_group_member_mids (CallServiceIf * iface, const gchar * groupId, GError ** error);
gboolean call_service_client_recv_get_group_member_mids (CallServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_send_message_without_relationship (CallServiceIf * iface, Message ** _return, const Message * message, TalkException ** e, GError ** error);
gboolean call_service_client_send_send_message_without_relationship (CallServiceIf * iface, const Message * message, GError ** error);
gboolean call_service_client_recv_send_message_without_relationship (CallServiceIf * iface, Message ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_display_buddy_subscriber_count_in_bulk (CallServiceIf * iface, GHashTable ** _return, const GPtrArray * mids, TalkException ** e, GError ** error);
gboolean call_service_client_send_display_buddy_subscriber_count_in_bulk (CallServiceIf * iface, const GPtrArray * mids, GError ** error);
gboolean call_service_client_recv_display_buddy_subscriber_count_in_bulk (CallServiceIf * iface, GHashTable ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_lookup_room_members (CallServiceIf * iface, GPtrArray ** _return, const gchar * roomId, const GPtrArray * mids, TalkException ** e, GError ** error);
gboolean call_service_client_send_lookup_room_members (CallServiceIf * iface, const gchar * roomId, const GPtrArray * mids, GError ** error);
gboolean call_service_client_recv_lookup_room_members (CallServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_favorite_mids_for_channel (CallServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_favorite_mids_for_channel (CallServiceIf * iface, GError ** error);
gboolean call_service_client_recv_get_favorite_mids_for_channel (CallServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_all_contact_ids_for_channel (CallServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_all_contact_ids_for_channel (CallServiceIf * iface, GError ** error);
gboolean call_service_client_recv_get_all_contact_ids_for_channel (CallServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_display_buddy_subscriber_count (CallServiceIf * iface, gint64* _return, TalkException ** e, GError ** error);
gboolean call_service_client_send_display_buddy_subscriber_count (CallServiceIf * iface, GError ** error);
gboolean call_service_client_recv_display_buddy_subscriber_count (CallServiceIf * iface, gint64* _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_profile_for_channel (CallServiceIf * iface, Profile ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_profile_for_channel (CallServiceIf * iface, GError ** error);
gboolean call_service_client_recv_get_profile_for_channel (CallServiceIf * iface, Profile ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_user_tickets (CallServiceIf * iface, GPtrArray ** _return, const GPtrArray * userMids, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_user_tickets (CallServiceIf * iface, const GPtrArray * userMids, GError ** error);
gboolean call_service_client_recv_get_user_tickets (CallServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_o_a_friend_mids (CallServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_o_a_friend_mids (CallServiceIf * iface, GError ** error);
gboolean call_service_client_recv_get_o_a_friend_mids (CallServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_search_paid_call_user_rate (CallServiceIf * iface, GPtrArray ** _return, const gchar * countryCode, const gchar * language, TalkException ** e, GError ** error);
gboolean call_service_client_send_search_paid_call_user_rate (CallServiceIf * iface, const gchar * countryCode, const gchar * language, GError ** error);
gboolean call_service_client_recv_search_paid_call_user_rate (CallServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_joined_group_ids_for_channel (CallServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_joined_group_ids_for_channel (CallServiceIf * iface, GError ** error);
gboolean call_service_client_recv_get_joined_group_ids_for_channel (CallServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_acquire_group_call_route (CallServiceIf * iface, GroupCallRoute ** _return, const gchar * chatMid, const GroupCallMediaType mediaType, TalkException ** e, GError ** error);
gboolean call_service_client_send_acquire_group_call_route (CallServiceIf * iface, const gchar * chatMid, const GroupCallMediaType mediaType, GError ** error);
gboolean call_service_client_recv_acquire_group_call_route (CallServiceIf * iface, GroupCallRoute ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_user_mids_who_added_me (CallServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_user_mids_who_added_me (CallServiceIf * iface, GError ** error);
gboolean call_service_client_recv_get_user_mids_who_added_me (CallServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_identity_credential (CallServiceIf * iface, IdentityCredential ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_identity_credential (CallServiceIf * iface, GError ** error);
gboolean call_service_client_recv_get_identity_credential (CallServiceIf * iface, IdentityCredential ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_add_operation_for_channel (CallServiceIf * iface, const OpType opType, const gchar * param1, const gchar * param2, const gchar * param3, TalkException ** e, GError ** error);
gboolean call_service_client_send_add_operation_for_channel (CallServiceIf * iface, const OpType opType, const gchar * param1, const gchar * param2, const gchar * param3, GError ** error);
gboolean call_service_client_recv_add_operation_for_channel (CallServiceIf * iface, TalkException ** e, GError ** error);
gboolean call_service_client_get_simple_channel_contacts (CallServiceIf * iface, GPtrArray ** _return, const GPtrArray * ids, const gboolean statusSticonFallbackDisabled, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_simple_channel_contacts (CallServiceIf * iface, const GPtrArray * ids, const gboolean statusSticonFallbackDisabled, GError ** error);
gboolean call_service_client_recv_get_simple_channel_contacts (CallServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean call_service_client_get_user_last_sent_message_time_stamp (CallServiceIf * iface, gint64* _return, const gchar * mid, TalkException ** e, GError ** error);
gboolean call_service_client_send_get_user_last_sent_message_time_stamp (CallServiceIf * iface, const gchar * mid, GError ** error);
gboolean call_service_client_recv_get_user_last_sent_message_time_stamp (CallServiceIf * iface, gint64* _return, TalkException ** e, GError ** error);
void call_service_client_set_property (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);
void call_service_client_get_property (GObject *object, guint property_id, GValue *value, GParamSpec *pspec);

/* CallService handler (abstract base class) */
struct _CallServiceHandler
{
  GObject parent;
};
typedef struct _CallServiceHandler CallServiceHandler;

struct _CallServiceHandlerClass
{
  GObjectClass parent;

  gboolean (*get_user_status) (CallServiceIf *iface, UserStatus* _return, const gchar * mid, TalkException ** e, GError **error);
  gboolean (*update_profile_attribute_for_channel) (CallServiceIf *iface, const ProfileAttribute profileAttribute, const gchar * value, TalkException ** e, GError **error);
  gboolean (*update_extended_profile_attribute) (CallServiceIf *iface, const ExtendedProfileAttribute attr, const ExtendedProfile * extendedProfile, TalkException ** e, GError **error);
  gboolean (*get_all_simple_channel_contacts) (CallServiceIf *iface, GPtrArray ** _return, const gboolean statusSticonFallbackDisabled, TalkException ** e, GError **error);
  gboolean (*get_user_identities) (CallServiceIf *iface, GHashTable ** _return, TalkException ** e, GError **error);
  gboolean (*mark_paid_call_ad) (CallServiceIf *iface, PaidCallDialing ** _return, const gchar * dialedNumber, const gchar * language, const gboolean disableCallerId, TalkException ** e, GError **error);
  gboolean (*is_group_member) (CallServiceIf *iface, gboolean* _return, const gchar * groupId, TalkException ** e, GError **error);
  gboolean (*get_phone_info_from_phone_number) (CallServiceIf *iface, PhoneInfoForChannel ** _return, const gchar * region, const gchar * phoneNumber, TalkException ** e, GError **error);
  gboolean (*redeem_paid_call_voucher) (CallServiceIf *iface, PaidCallRedeemResult ** _return, const gchar * serial, const gchar * language, TalkException ** e, GError **error);
  gboolean (*get_preferred_display_name) (CallServiceIf *iface, GHashTable ** _return, const GPtrArray * mids, TalkException ** e, GError **error);
  gboolean (*get_contacts_for_channel) (CallServiceIf *iface, GPtrArray ** _return, const GPtrArray * ids, TalkException ** e, GError **error);
  gboolean (*get_call_credit_products) (CallServiceIf *iface, GPtrArray ** _return, const PaymentType appStoreCode, const PaymentPgType pgCode, const gchar * country, const gchar * language, TalkException ** e, GError **error);
  gboolean (*get_compact_contacts) (CallServiceIf *iface, GPtrArray ** _return, const gint64 lastModifiedTimestamp, TalkException ** e, GError **error);
  gboolean (*notify_noti_center_event) (CallServiceIf *iface, const NotiCenterEventData * event, TalkException ** e, GError **error);
  gboolean (*is_in_contact) (CallServiceIf *iface, gboolean* _return, const gchar * mid, TalkException ** e, GError **error);
  gboolean (*lookup_group_members) (CallServiceIf *iface, GPtrArray ** _return, const gchar * groupId, const GPtrArray * mids, TalkException ** e, GError **error);
  gboolean (*get_room_information) (CallServiceIf *iface, Room ** _return, const gchar * roomMid, TalkException ** e, GError **error);
  gboolean (*get_group_call) (CallServiceIf *iface, GroupCall ** _return, const gchar * chatMid, TalkException ** e, GError **error);
  gboolean (*is_allow_secondary_device_login) (CallServiceIf *iface, gboolean* _return, TalkException ** e, GError **error);
  gboolean (*get_primary_client_for_channel) (CallServiceIf *iface, SimpleChannelClient ** _return, TalkException ** e, GError **error);
  gboolean (*create_room_with_buddy) (CallServiceIf *iface, Room ** _return, const gint32 reqSeq, const gchar * buddyMid, const GPtrArray * contactIds, TalkException ** e, GError **error);
  gboolean (*get_display_name) (CallServiceIf *iface, gchar ** _return, const gchar * mid, TalkException ** e, GError **error);
  gboolean (*get_paid_call_metadata) (CallServiceIf *iface, PaidCallMetadataResult ** _return, const gchar * language, TalkException ** e, GError **error);
  gboolean (*get_mid) (CallServiceIf *iface, gchar ** _return, TalkException ** e, GError **error);
  gboolean (*get_user_country_for_billing) (CallServiceIf *iface, gchar ** _return, const gchar * country, const gchar * remoteIp, TalkException ** e, GError **error);
  gboolean (*get_favorite_group_ids_for_channel) (CallServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_paid_call_history) (CallServiceIf *iface, PaidCallHistoryResult ** _return, const gint64 start, const gint32 size, const gchar * language, TalkException ** e, GError **error);
  gboolean (*send_pin_code_operation) (CallServiceIf *iface, const gchar * verifier, TalkException ** e, GError **error);
  gboolean (*invite_into_group_call) (CallServiceIf *iface, const gchar * chatMid, const GPtrArray * memberMids, const GroupCallMediaType mediaType, TalkException ** e, GError **error);
  gboolean (*get_friend_mids) (CallServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_meta_profile) (CallServiceIf *iface, MetaProfile ** _return, TalkException ** e, GError **error);
  gboolean (*send_message_for_channel) (CallServiceIf *iface, Message ** _return, const Message * message, TalkException ** e, GError **error);
  gboolean (*active_buddy_subscriber_count) (CallServiceIf *iface, gint64* _return, TalkException ** e, GError **error);
  gboolean (*get_call_credit_purchase_history) (CallServiceIf *iface, CoinHistoryResult ** _return, const CoinHistoryCondition * request, TalkException ** e, GError **error);
  gboolean (*is_room_member) (CallServiceIf *iface, gboolean* _return, const gchar * roomId, TalkException ** e, GError **error);
  gboolean (*send_system_o_a_message) (CallServiceIf *iface, Message ** _return, const Message * message, TalkException ** e, GError **error);
  gboolean (*acquire_paid_call_route) (CallServiceIf *iface, PaidCallResponse ** _return, const PaidCallType paidCallType, const gchar * dialedNumber, const gchar * language, const gchar * networkCode, const gboolean disableCallerId, const gchar * referer, const gchar * adSessionId, TalkException ** e, GError **error);
  gboolean (*get_groups_for_channel) (CallServiceIf *iface, GPtrArray ** _return, const GPtrArray * groupIds, TalkException ** e, GError **error);
  gboolean (*get_user_create_time) (CallServiceIf *iface, gint64* _return, TalkException ** e, GError **error);
  gboolean (*register_channel_c_p) (CallServiceIf *iface, gchar ** _return, const gchar * cpId, const gchar * registerPassword, TalkException ** e, GError **error);
  gboolean (*reserve_call_credit_purchase) (CallServiceIf *iface, PaymentReservationResult ** _return, const CoinPurchaseReservation * request, TalkException ** e, GError **error);
  gboolean (*acquire_paid_call_currency_exchange_rate) (CallServiceIf *iface, GPtrArray ** _return, const gchar * language, TalkException ** e, GError **error);
  gboolean (*get_room_member_mids_for_app_platform) (CallServiceIf *iface, GPtrArray ** _return, const gchar * roomId, TalkException ** e, GError **error);
  gboolean (*get_paid_call_balance_list) (CallServiceIf *iface, GPtrArray ** _return, const gchar * language, TalkException ** e, GError **error);
  gboolean (*get_personal_infos) (CallServiceIf *iface, GHashTable ** _return, const GHashTable * requiredPersonalInfos, TalkException ** e, GError **error);
  gboolean (*get_primary_clients_for_channel) (CallServiceIf *iface, GPtrArray ** _return, const GPtrArray * userMids, TalkException ** e, GError **error);
  gboolean (*add_buddy_to_contact) (CallServiceIf *iface, ContactTransition ** _return, const gchar * buddyMid, TalkException ** e, GError **error);
  gboolean (*get_group_member_mids_for_app_platform) (CallServiceIf *iface, GPtrArray ** _return, const gchar * groupId, TalkException ** e, GError **error);
  gboolean (*get_user_language) (CallServiceIf *iface, gchar ** _return, TalkException ** e, GError **error);
  gboolean (*lookup_paid_call) (CallServiceIf *iface, PaidCallResponse ** _return, const gchar * dialedNumber, const gchar * language, const gchar * referer, TalkException ** e, GError **error);
  gboolean (*get_extended_profile) (CallServiceIf *iface, ExtendedProfile ** _return, TalkException ** e, GError **error);
  gboolean (*get_reverse_compact_contacts) (CallServiceIf *iface, GHashTable ** _return, const GPtrArray * ids, TalkException ** e, GError **error);
  gboolean (*get_paid_call_ad_status) (CallServiceIf *iface, PaidCallAdResult ** _return, TalkException ** e, GError **error);
  gboolean (*find_contact_by_userid_without_abuse_block_for_channel) (CallServiceIf *iface, Contact ** _return, const gchar * userid, TalkException ** e, GError **error);
  gboolean (*get_group_member_mids) (CallServiceIf *iface, GPtrArray ** _return, const gchar * groupId, TalkException ** e, GError **error);
  gboolean (*send_message_without_relationship) (CallServiceIf *iface, Message ** _return, const Message * message, TalkException ** e, GError **error);
  gboolean (*display_buddy_subscriber_count_in_bulk) (CallServiceIf *iface, GHashTable ** _return, const GPtrArray * mids, TalkException ** e, GError **error);
  gboolean (*lookup_room_members) (CallServiceIf *iface, GPtrArray ** _return, const gchar * roomId, const GPtrArray * mids, TalkException ** e, GError **error);
  gboolean (*get_favorite_mids_for_channel) (CallServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_all_contact_ids_for_channel) (CallServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*display_buddy_subscriber_count) (CallServiceIf *iface, gint64* _return, TalkException ** e, GError **error);
  gboolean (*get_profile_for_channel) (CallServiceIf *iface, Profile ** _return, TalkException ** e, GError **error);
  gboolean (*get_user_tickets) (CallServiceIf *iface, GPtrArray ** _return, const GPtrArray * userMids, TalkException ** e, GError **error);
  gboolean (*get_o_a_friend_mids) (CallServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*search_paid_call_user_rate) (CallServiceIf *iface, GPtrArray ** _return, const gchar * countryCode, const gchar * language, TalkException ** e, GError **error);
  gboolean (*get_joined_group_ids_for_channel) (CallServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*acquire_group_call_route) (CallServiceIf *iface, GroupCallRoute ** _return, const gchar * chatMid, const GroupCallMediaType mediaType, TalkException ** e, GError **error);
  gboolean (*get_user_mids_who_added_me) (CallServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_identity_credential) (CallServiceIf *iface, IdentityCredential ** _return, TalkException ** e, GError **error);
  gboolean (*add_operation_for_channel) (CallServiceIf *iface, const OpType opType, const gchar * param1, const gchar * param2, const gchar * param3, TalkException ** e, GError **error);
  gboolean (*get_simple_channel_contacts) (CallServiceIf *iface, GPtrArray ** _return, const GPtrArray * ids, const gboolean statusSticonFallbackDisabled, TalkException ** e, GError **error);
  gboolean (*get_user_last_sent_message_time_stamp) (CallServiceIf *iface, gint64* _return, const gchar * mid, TalkException ** e, GError **error);
};
typedef struct _CallServiceHandlerClass CallServiceHandlerClass;

GType call_service_handler_get_type (void);
#define TYPE_CALL_SERVICE_HANDLER (call_service_handler_get_type())
#define CALL_SERVICE_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CALL_SERVICE_HANDLER, CallServiceHandler))
#define IS_CALL_SERVICE_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CALL_SERVICE_HANDLER))
#define CALL_SERVICE_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_CALL_SERVICE_HANDLER, CallServiceHandlerClass))
#define IS_CALL_SERVICE_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_CALL_SERVICE_HANDLER))
#define CALL_SERVICE_HANDLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_CALL_SERVICE_HANDLER, CallServiceHandlerClass))

gboolean call_service_handler_get_user_status (CallServiceIf *iface, UserStatus* _return, const gchar * mid, TalkException ** e, GError **error);
gboolean call_service_handler_update_profile_attribute_for_channel (CallServiceIf *iface, const ProfileAttribute profileAttribute, const gchar * value, TalkException ** e, GError **error);
gboolean call_service_handler_update_extended_profile_attribute (CallServiceIf *iface, const ExtendedProfileAttribute attr, const ExtendedProfile * extendedProfile, TalkException ** e, GError **error);
gboolean call_service_handler_get_all_simple_channel_contacts (CallServiceIf *iface, GPtrArray ** _return, const gboolean statusSticonFallbackDisabled, TalkException ** e, GError **error);
gboolean call_service_handler_get_user_identities (CallServiceIf *iface, GHashTable ** _return, TalkException ** e, GError **error);
gboolean call_service_handler_mark_paid_call_ad (CallServiceIf *iface, PaidCallDialing ** _return, const gchar * dialedNumber, const gchar * language, const gboolean disableCallerId, TalkException ** e, GError **error);
gboolean call_service_handler_is_group_member (CallServiceIf *iface, gboolean* _return, const gchar * groupId, TalkException ** e, GError **error);
gboolean call_service_handler_get_phone_info_from_phone_number (CallServiceIf *iface, PhoneInfoForChannel ** _return, const gchar * region, const gchar * phoneNumber, TalkException ** e, GError **error);
gboolean call_service_handler_redeem_paid_call_voucher (CallServiceIf *iface, PaidCallRedeemResult ** _return, const gchar * serial, const gchar * language, TalkException ** e, GError **error);
gboolean call_service_handler_get_preferred_display_name (CallServiceIf *iface, GHashTable ** _return, const GPtrArray * mids, TalkException ** e, GError **error);
gboolean call_service_handler_get_contacts_for_channel (CallServiceIf *iface, GPtrArray ** _return, const GPtrArray * ids, TalkException ** e, GError **error);
gboolean call_service_handler_get_call_credit_products (CallServiceIf *iface, GPtrArray ** _return, const PaymentType appStoreCode, const PaymentPgType pgCode, const gchar * country, const gchar * language, TalkException ** e, GError **error);
gboolean call_service_handler_get_compact_contacts (CallServiceIf *iface, GPtrArray ** _return, const gint64 lastModifiedTimestamp, TalkException ** e, GError **error);
gboolean call_service_handler_notify_noti_center_event (CallServiceIf *iface, const NotiCenterEventData * event, TalkException ** e, GError **error);
gboolean call_service_handler_is_in_contact (CallServiceIf *iface, gboolean* _return, const gchar * mid, TalkException ** e, GError **error);
gboolean call_service_handler_lookup_group_members (CallServiceIf *iface, GPtrArray ** _return, const gchar * groupId, const GPtrArray * mids, TalkException ** e, GError **error);
gboolean call_service_handler_get_room_information (CallServiceIf *iface, Room ** _return, const gchar * roomMid, TalkException ** e, GError **error);
gboolean call_service_handler_get_group_call (CallServiceIf *iface, GroupCall ** _return, const gchar * chatMid, TalkException ** e, GError **error);
gboolean call_service_handler_is_allow_secondary_device_login (CallServiceIf *iface, gboolean* _return, TalkException ** e, GError **error);
gboolean call_service_handler_get_primary_client_for_channel (CallServiceIf *iface, SimpleChannelClient ** _return, TalkException ** e, GError **error);
gboolean call_service_handler_create_room_with_buddy (CallServiceIf *iface, Room ** _return, const gint32 reqSeq, const gchar * buddyMid, const GPtrArray * contactIds, TalkException ** e, GError **error);
gboolean call_service_handler_get_display_name (CallServiceIf *iface, gchar ** _return, const gchar * mid, TalkException ** e, GError **error);
gboolean call_service_handler_get_paid_call_metadata (CallServiceIf *iface, PaidCallMetadataResult ** _return, const gchar * language, TalkException ** e, GError **error);
gboolean call_service_handler_get_mid (CallServiceIf *iface, gchar ** _return, TalkException ** e, GError **error);
gboolean call_service_handler_get_user_country_for_billing (CallServiceIf *iface, gchar ** _return, const gchar * country, const gchar * remoteIp, TalkException ** e, GError **error);
gboolean call_service_handler_get_favorite_group_ids_for_channel (CallServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean call_service_handler_get_paid_call_history (CallServiceIf *iface, PaidCallHistoryResult ** _return, const gint64 start, const gint32 size, const gchar * language, TalkException ** e, GError **error);
gboolean call_service_handler_send_pin_code_operation (CallServiceIf *iface, const gchar * verifier, TalkException ** e, GError **error);
gboolean call_service_handler_invite_into_group_call (CallServiceIf *iface, const gchar * chatMid, const GPtrArray * memberMids, const GroupCallMediaType mediaType, TalkException ** e, GError **error);
gboolean call_service_handler_get_friend_mids (CallServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean call_service_handler_get_meta_profile (CallServiceIf *iface, MetaProfile ** _return, TalkException ** e, GError **error);
gboolean call_service_handler_send_message_for_channel (CallServiceIf *iface, Message ** _return, const Message * message, TalkException ** e, GError **error);
gboolean call_service_handler_active_buddy_subscriber_count (CallServiceIf *iface, gint64* _return, TalkException ** e, GError **error);
gboolean call_service_handler_get_call_credit_purchase_history (CallServiceIf *iface, CoinHistoryResult ** _return, const CoinHistoryCondition * request, TalkException ** e, GError **error);
gboolean call_service_handler_is_room_member (CallServiceIf *iface, gboolean* _return, const gchar * roomId, TalkException ** e, GError **error);
gboolean call_service_handler_send_system_o_a_message (CallServiceIf *iface, Message ** _return, const Message * message, TalkException ** e, GError **error);
gboolean call_service_handler_acquire_paid_call_route (CallServiceIf *iface, PaidCallResponse ** _return, const PaidCallType paidCallType, const gchar * dialedNumber, const gchar * language, const gchar * networkCode, const gboolean disableCallerId, const gchar * referer, const gchar * adSessionId, TalkException ** e, GError **error);
gboolean call_service_handler_get_groups_for_channel (CallServiceIf *iface, GPtrArray ** _return, const GPtrArray * groupIds, TalkException ** e, GError **error);
gboolean call_service_handler_get_user_create_time (CallServiceIf *iface, gint64* _return, TalkException ** e, GError **error);
gboolean call_service_handler_register_channel_c_p (CallServiceIf *iface, gchar ** _return, const gchar * cpId, const gchar * registerPassword, TalkException ** e, GError **error);
gboolean call_service_handler_reserve_call_credit_purchase (CallServiceIf *iface, PaymentReservationResult ** _return, const CoinPurchaseReservation * request, TalkException ** e, GError **error);
gboolean call_service_handler_acquire_paid_call_currency_exchange_rate (CallServiceIf *iface, GPtrArray ** _return, const gchar * language, TalkException ** e, GError **error);
gboolean call_service_handler_get_room_member_mids_for_app_platform (CallServiceIf *iface, GPtrArray ** _return, const gchar * roomId, TalkException ** e, GError **error);
gboolean call_service_handler_get_paid_call_balance_list (CallServiceIf *iface, GPtrArray ** _return, const gchar * language, TalkException ** e, GError **error);
gboolean call_service_handler_get_personal_infos (CallServiceIf *iface, GHashTable ** _return, const GHashTable * requiredPersonalInfos, TalkException ** e, GError **error);
gboolean call_service_handler_get_primary_clients_for_channel (CallServiceIf *iface, GPtrArray ** _return, const GPtrArray * userMids, TalkException ** e, GError **error);
gboolean call_service_handler_add_buddy_to_contact (CallServiceIf *iface, ContactTransition ** _return, const gchar * buddyMid, TalkException ** e, GError **error);
gboolean call_service_handler_get_group_member_mids_for_app_platform (CallServiceIf *iface, GPtrArray ** _return, const gchar * groupId, TalkException ** e, GError **error);
gboolean call_service_handler_get_user_language (CallServiceIf *iface, gchar ** _return, TalkException ** e, GError **error);
gboolean call_service_handler_lookup_paid_call (CallServiceIf *iface, PaidCallResponse ** _return, const gchar * dialedNumber, const gchar * language, const gchar * referer, TalkException ** e, GError **error);
gboolean call_service_handler_get_extended_profile (CallServiceIf *iface, ExtendedProfile ** _return, TalkException ** e, GError **error);
gboolean call_service_handler_get_reverse_compact_contacts (CallServiceIf *iface, GHashTable ** _return, const GPtrArray * ids, TalkException ** e, GError **error);
gboolean call_service_handler_get_paid_call_ad_status (CallServiceIf *iface, PaidCallAdResult ** _return, TalkException ** e, GError **error);
gboolean call_service_handler_find_contact_by_userid_without_abuse_block_for_channel (CallServiceIf *iface, Contact ** _return, const gchar * userid, TalkException ** e, GError **error);
gboolean call_service_handler_get_group_member_mids (CallServiceIf *iface, GPtrArray ** _return, const gchar * groupId, TalkException ** e, GError **error);
gboolean call_service_handler_send_message_without_relationship (CallServiceIf *iface, Message ** _return, const Message * message, TalkException ** e, GError **error);
gboolean call_service_handler_display_buddy_subscriber_count_in_bulk (CallServiceIf *iface, GHashTable ** _return, const GPtrArray * mids, TalkException ** e, GError **error);
gboolean call_service_handler_lookup_room_members (CallServiceIf *iface, GPtrArray ** _return, const gchar * roomId, const GPtrArray * mids, TalkException ** e, GError **error);
gboolean call_service_handler_get_favorite_mids_for_channel (CallServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean call_service_handler_get_all_contact_ids_for_channel (CallServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean call_service_handler_display_buddy_subscriber_count (CallServiceIf *iface, gint64* _return, TalkException ** e, GError **error);
gboolean call_service_handler_get_profile_for_channel (CallServiceIf *iface, Profile ** _return, TalkException ** e, GError **error);
gboolean call_service_handler_get_user_tickets (CallServiceIf *iface, GPtrArray ** _return, const GPtrArray * userMids, TalkException ** e, GError **error);
gboolean call_service_handler_get_o_a_friend_mids (CallServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean call_service_handler_search_paid_call_user_rate (CallServiceIf *iface, GPtrArray ** _return, const gchar * countryCode, const gchar * language, TalkException ** e, GError **error);
gboolean call_service_handler_get_joined_group_ids_for_channel (CallServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean call_service_handler_acquire_group_call_route (CallServiceIf *iface, GroupCallRoute ** _return, const gchar * chatMid, const GroupCallMediaType mediaType, TalkException ** e, GError **error);
gboolean call_service_handler_get_user_mids_who_added_me (CallServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean call_service_handler_get_identity_credential (CallServiceIf *iface, IdentityCredential ** _return, TalkException ** e, GError **error);
gboolean call_service_handler_add_operation_for_channel (CallServiceIf *iface, const OpType opType, const gchar * param1, const gchar * param2, const gchar * param3, TalkException ** e, GError **error);
gboolean call_service_handler_get_simple_channel_contacts (CallServiceIf *iface, GPtrArray ** _return, const GPtrArray * ids, const gboolean statusSticonFallbackDisabled, TalkException ** e, GError **error);
gboolean call_service_handler_get_user_last_sent_message_time_stamp (CallServiceIf *iface, gint64* _return, const gchar * mid, TalkException ** e, GError **error);

/* CallService processor */
struct _CallServiceProcessor
{
  ThriftDispatchProcessor parent;

  /* protected */
  CallServiceHandler *handler;
  GHashTable *process_map;
};
typedef struct _CallServiceProcessor CallServiceProcessor;

struct _CallServiceProcessorClass
{
  ThriftDispatchProcessorClass parent;

  /* protected */
  gboolean (*dispatch_call) (ThriftDispatchProcessor *processor,
                             ThriftProtocol *in,
                             ThriftProtocol *out,
                             gchar *fname,
                             gint32 seqid,
                             GError **error);
};
typedef struct _CallServiceProcessorClass CallServiceProcessorClass;

GType call_service_processor_get_type (void);
#define TYPE_CALL_SERVICE_PROCESSOR (call_service_processor_get_type())
#define CALL_SERVICE_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CALL_SERVICE_PROCESSOR, CallServiceProcessor))
#define IS_CALL_SERVICE_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CALL_SERVICE_PROCESSOR))
#define CALL_SERVICE_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_CALL_SERVICE_PROCESSOR, CallServiceProcessorClass))
#define IS_CALL_SERVICE_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_CALL_SERVICE_PROCESSOR))
#define CALL_SERVICE_PROCESSOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_CALL_SERVICE_PROCESSOR, CallServiceProcessorClass))

#endif /* CALL_SERVICE_H */
