/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef BUDDY_SERVICE_H
#define BUDDY_SERVICE_H

#include <thrift/c_glib/processor/thrift_dispatch_processor.h>

#include "line_types.h"

/* BuddyService service interface */
typedef struct _BuddyServiceIf BuddyServiceIf;  /* dummy object */

struct _BuddyServiceIfInterface
{
  GTypeInterface parent;

  gboolean (*find_buddy_contacts_by_query) (BuddyServiceIf *iface, GPtrArray ** _return, const gchar * language, const gchar * country, const gchar * query, const gint32 fromIndex, const gint32 count, const BuddySearchRequestSource requestSource, TalkException ** e, GError **error);
  gboolean (*get_buddy_contacts) (BuddyServiceIf *iface, GPtrArray ** _return, const gchar * language, const gchar * country, const gchar * classification, const gint32 fromIndex, const gint32 count, TalkException ** e, GError **error);
  gboolean (*get_buddy_detail) (BuddyServiceIf *iface, BuddyDetail ** _return, const gchar * buddyMid, TalkException ** e, GError **error);
  gboolean (*get_buddy_on_air) (BuddyServiceIf *iface, BuddyOnAir ** _return, const gchar * buddyMid, TalkException ** e, GError **error);
  gboolean (*get_countries_having_buddy) (BuddyServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_newly_released_buddy_ids) (BuddyServiceIf *iface, GHashTable ** _return, const gchar * country, TalkException ** e, GError **error);
  gboolean (*get_popular_buddy_banner) (BuddyServiceIf *iface, BuddyBanner ** _return, const gchar * language, const gchar * country, const ApplicationType applicationType, const gchar * resourceSpecification, TalkException ** e, GError **error);
  gboolean (*get_popular_buddy_lists) (BuddyServiceIf *iface, GPtrArray ** _return, const gchar * language, const gchar * country, TalkException ** e, GError **error);
  gboolean (*get_promoted_buddy_contacts) (BuddyServiceIf *iface, GPtrArray ** _return, const gchar * language, const gchar * country, TalkException ** e, GError **error);
};
typedef struct _BuddyServiceIfInterface BuddyServiceIfInterface;

GType buddy_service_if_get_type (void);
#define TYPE_BUDDY_SERVICE_IF (buddy_service_if_get_type())
#define BUDDY_SERVICE_IF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BUDDY_SERVICE_IF, BuddyServiceIf))
#define IS_BUDDY_SERVICE_IF(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BUDDY_SERVICE_IF))
#define BUDDY_SERVICE_IF_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), TYPE_BUDDY_SERVICE_IF, BuddyServiceIfInterface))

gboolean buddy_service_if_find_buddy_contacts_by_query (BuddyServiceIf *iface, GPtrArray ** _return, const gchar * language, const gchar * country, const gchar * query, const gint32 fromIndex, const gint32 count, const BuddySearchRequestSource requestSource, TalkException ** e, GError **error);
gboolean buddy_service_if_get_buddy_contacts (BuddyServiceIf *iface, GPtrArray ** _return, const gchar * language, const gchar * country, const gchar * classification, const gint32 fromIndex, const gint32 count, TalkException ** e, GError **error);
gboolean buddy_service_if_get_buddy_detail (BuddyServiceIf *iface, BuddyDetail ** _return, const gchar * buddyMid, TalkException ** e, GError **error);
gboolean buddy_service_if_get_buddy_on_air (BuddyServiceIf *iface, BuddyOnAir ** _return, const gchar * buddyMid, TalkException ** e, GError **error);
gboolean buddy_service_if_get_countries_having_buddy (BuddyServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean buddy_service_if_get_newly_released_buddy_ids (BuddyServiceIf *iface, GHashTable ** _return, const gchar * country, TalkException ** e, GError **error);
gboolean buddy_service_if_get_popular_buddy_banner (BuddyServiceIf *iface, BuddyBanner ** _return, const gchar * language, const gchar * country, const ApplicationType applicationType, const gchar * resourceSpecification, TalkException ** e, GError **error);
gboolean buddy_service_if_get_popular_buddy_lists (BuddyServiceIf *iface, GPtrArray ** _return, const gchar * language, const gchar * country, TalkException ** e, GError **error);
gboolean buddy_service_if_get_promoted_buddy_contacts (BuddyServiceIf *iface, GPtrArray ** _return, const gchar * language, const gchar * country, TalkException ** e, GError **error);

/* BuddyService service client */
struct _BuddyServiceClient
{
  GObject parent;

  ThriftProtocol *input_protocol;
  ThriftProtocol *output_protocol;
};
typedef struct _BuddyServiceClient BuddyServiceClient;

struct _BuddyServiceClientClass
{
  GObjectClass parent;
};
typedef struct _BuddyServiceClientClass BuddyServiceClientClass;

GType buddy_service_client_get_type (void);
#define TYPE_BUDDY_SERVICE_CLIENT (buddy_service_client_get_type())
#define BUDDY_SERVICE_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BUDDY_SERVICE_CLIENT, BuddyServiceClient))
#define BUDDY_SERVICE_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_BUDDY_SERVICE_CLIENT, BuddyServiceClientClass))
#define BUDDY_SERVICE_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BUDDY_SERVICE_CLIENT))
#define BUDDY_SERVICE_IS_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_BUDDY_SERVICE_CLIENT))
#define BUDDY_SERVICE_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BUDDY_SERVICE_CLIENT, BuddyServiceClientClass))

gboolean buddy_service_client_find_buddy_contacts_by_query (BuddyServiceIf * iface, GPtrArray ** _return, const gchar * language, const gchar * country, const gchar * query, const gint32 fromIndex, const gint32 count, const BuddySearchRequestSource requestSource, TalkException ** e, GError ** error);
gboolean buddy_service_client_send_find_buddy_contacts_by_query (BuddyServiceIf * iface, const gchar * language, const gchar * country, const gchar * query, const gint32 fromIndex, const gint32 count, const BuddySearchRequestSource requestSource, GError ** error);
gboolean buddy_service_client_recv_find_buddy_contacts_by_query (BuddyServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean buddy_service_client_get_buddy_contacts (BuddyServiceIf * iface, GPtrArray ** _return, const gchar * language, const gchar * country, const gchar * classification, const gint32 fromIndex, const gint32 count, TalkException ** e, GError ** error);
gboolean buddy_service_client_send_get_buddy_contacts (BuddyServiceIf * iface, const gchar * language, const gchar * country, const gchar * classification, const gint32 fromIndex, const gint32 count, GError ** error);
gboolean buddy_service_client_recv_get_buddy_contacts (BuddyServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean buddy_service_client_get_buddy_detail (BuddyServiceIf * iface, BuddyDetail ** _return, const gchar * buddyMid, TalkException ** e, GError ** error);
gboolean buddy_service_client_send_get_buddy_detail (BuddyServiceIf * iface, const gchar * buddyMid, GError ** error);
gboolean buddy_service_client_recv_get_buddy_detail (BuddyServiceIf * iface, BuddyDetail ** _return, TalkException ** e, GError ** error);
gboolean buddy_service_client_get_buddy_on_air (BuddyServiceIf * iface, BuddyOnAir ** _return, const gchar * buddyMid, TalkException ** e, GError ** error);
gboolean buddy_service_client_send_get_buddy_on_air (BuddyServiceIf * iface, const gchar * buddyMid, GError ** error);
gboolean buddy_service_client_recv_get_buddy_on_air (BuddyServiceIf * iface, BuddyOnAir ** _return, TalkException ** e, GError ** error);
gboolean buddy_service_client_get_countries_having_buddy (BuddyServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean buddy_service_client_send_get_countries_having_buddy (BuddyServiceIf * iface, GError ** error);
gboolean buddy_service_client_recv_get_countries_having_buddy (BuddyServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean buddy_service_client_get_newly_released_buddy_ids (BuddyServiceIf * iface, GHashTable ** _return, const gchar * country, TalkException ** e, GError ** error);
gboolean buddy_service_client_send_get_newly_released_buddy_ids (BuddyServiceIf * iface, const gchar * country, GError ** error);
gboolean buddy_service_client_recv_get_newly_released_buddy_ids (BuddyServiceIf * iface, GHashTable ** _return, TalkException ** e, GError ** error);
gboolean buddy_service_client_get_popular_buddy_banner (BuddyServiceIf * iface, BuddyBanner ** _return, const gchar * language, const gchar * country, const ApplicationType applicationType, const gchar * resourceSpecification, TalkException ** e, GError ** error);
gboolean buddy_service_client_send_get_popular_buddy_banner (BuddyServiceIf * iface, const gchar * language, const gchar * country, const ApplicationType applicationType, const gchar * resourceSpecification, GError ** error);
gboolean buddy_service_client_recv_get_popular_buddy_banner (BuddyServiceIf * iface, BuddyBanner ** _return, TalkException ** e, GError ** error);
gboolean buddy_service_client_get_popular_buddy_lists (BuddyServiceIf * iface, GPtrArray ** _return, const gchar * language, const gchar * country, TalkException ** e, GError ** error);
gboolean buddy_service_client_send_get_popular_buddy_lists (BuddyServiceIf * iface, const gchar * language, const gchar * country, GError ** error);
gboolean buddy_service_client_recv_get_popular_buddy_lists (BuddyServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
gboolean buddy_service_client_get_promoted_buddy_contacts (BuddyServiceIf * iface, GPtrArray ** _return, const gchar * language, const gchar * country, TalkException ** e, GError ** error);
gboolean buddy_service_client_send_get_promoted_buddy_contacts (BuddyServiceIf * iface, const gchar * language, const gchar * country, GError ** error);
gboolean buddy_service_client_recv_get_promoted_buddy_contacts (BuddyServiceIf * iface, GPtrArray ** _return, TalkException ** e, GError ** error);
void buddy_service_client_set_property (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);
void buddy_service_client_get_property (GObject *object, guint property_id, GValue *value, GParamSpec *pspec);

/* BuddyService handler (abstract base class) */
struct _BuddyServiceHandler
{
  GObject parent;
};
typedef struct _BuddyServiceHandler BuddyServiceHandler;

struct _BuddyServiceHandlerClass
{
  GObjectClass parent;

  gboolean (*find_buddy_contacts_by_query) (BuddyServiceIf *iface, GPtrArray ** _return, const gchar * language, const gchar * country, const gchar * query, const gint32 fromIndex, const gint32 count, const BuddySearchRequestSource requestSource, TalkException ** e, GError **error);
  gboolean (*get_buddy_contacts) (BuddyServiceIf *iface, GPtrArray ** _return, const gchar * language, const gchar * country, const gchar * classification, const gint32 fromIndex, const gint32 count, TalkException ** e, GError **error);
  gboolean (*get_buddy_detail) (BuddyServiceIf *iface, BuddyDetail ** _return, const gchar * buddyMid, TalkException ** e, GError **error);
  gboolean (*get_buddy_on_air) (BuddyServiceIf *iface, BuddyOnAir ** _return, const gchar * buddyMid, TalkException ** e, GError **error);
  gboolean (*get_countries_having_buddy) (BuddyServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
  gboolean (*get_newly_released_buddy_ids) (BuddyServiceIf *iface, GHashTable ** _return, const gchar * country, TalkException ** e, GError **error);
  gboolean (*get_popular_buddy_banner) (BuddyServiceIf *iface, BuddyBanner ** _return, const gchar * language, const gchar * country, const ApplicationType applicationType, const gchar * resourceSpecification, TalkException ** e, GError **error);
  gboolean (*get_popular_buddy_lists) (BuddyServiceIf *iface, GPtrArray ** _return, const gchar * language, const gchar * country, TalkException ** e, GError **error);
  gboolean (*get_promoted_buddy_contacts) (BuddyServiceIf *iface, GPtrArray ** _return, const gchar * language, const gchar * country, TalkException ** e, GError **error);
};
typedef struct _BuddyServiceHandlerClass BuddyServiceHandlerClass;

GType buddy_service_handler_get_type (void);
#define TYPE_BUDDY_SERVICE_HANDLER (buddy_service_handler_get_type())
#define BUDDY_SERVICE_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BUDDY_SERVICE_HANDLER, BuddyServiceHandler))
#define IS_BUDDY_SERVICE_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BUDDY_SERVICE_HANDLER))
#define BUDDY_SERVICE_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_BUDDY_SERVICE_HANDLER, BuddyServiceHandlerClass))
#define IS_BUDDY_SERVICE_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_BUDDY_SERVICE_HANDLER))
#define BUDDY_SERVICE_HANDLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BUDDY_SERVICE_HANDLER, BuddyServiceHandlerClass))

gboolean buddy_service_handler_find_buddy_contacts_by_query (BuddyServiceIf *iface, GPtrArray ** _return, const gchar * language, const gchar * country, const gchar * query, const gint32 fromIndex, const gint32 count, const BuddySearchRequestSource requestSource, TalkException ** e, GError **error);
gboolean buddy_service_handler_get_buddy_contacts (BuddyServiceIf *iface, GPtrArray ** _return, const gchar * language, const gchar * country, const gchar * classification, const gint32 fromIndex, const gint32 count, TalkException ** e, GError **error);
gboolean buddy_service_handler_get_buddy_detail (BuddyServiceIf *iface, BuddyDetail ** _return, const gchar * buddyMid, TalkException ** e, GError **error);
gboolean buddy_service_handler_get_buddy_on_air (BuddyServiceIf *iface, BuddyOnAir ** _return, const gchar * buddyMid, TalkException ** e, GError **error);
gboolean buddy_service_handler_get_countries_having_buddy (BuddyServiceIf *iface, GPtrArray ** _return, TalkException ** e, GError **error);
gboolean buddy_service_handler_get_newly_released_buddy_ids (BuddyServiceIf *iface, GHashTable ** _return, const gchar * country, TalkException ** e, GError **error);
gboolean buddy_service_handler_get_popular_buddy_banner (BuddyServiceIf *iface, BuddyBanner ** _return, const gchar * language, const gchar * country, const ApplicationType applicationType, const gchar * resourceSpecification, TalkException ** e, GError **error);
gboolean buddy_service_handler_get_popular_buddy_lists (BuddyServiceIf *iface, GPtrArray ** _return, const gchar * language, const gchar * country, TalkException ** e, GError **error);
gboolean buddy_service_handler_get_promoted_buddy_contacts (BuddyServiceIf *iface, GPtrArray ** _return, const gchar * language, const gchar * country, TalkException ** e, GError **error);

/* BuddyService processor */
struct _BuddyServiceProcessor
{
  ThriftDispatchProcessor parent;

  /* protected */
  BuddyServiceHandler *handler;
  GHashTable *process_map;
};
typedef struct _BuddyServiceProcessor BuddyServiceProcessor;

struct _BuddyServiceProcessorClass
{
  ThriftDispatchProcessorClass parent;

  /* protected */
  gboolean (*dispatch_call) (ThriftDispatchProcessor *processor,
                             ThriftProtocol *in,
                             ThriftProtocol *out,
                             gchar *fname,
                             gint32 seqid,
                             GError **error);
};
typedef struct _BuddyServiceProcessorClass BuddyServiceProcessorClass;

GType buddy_service_processor_get_type (void);
#define TYPE_BUDDY_SERVICE_PROCESSOR (buddy_service_processor_get_type())
#define BUDDY_SERVICE_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BUDDY_SERVICE_PROCESSOR, BuddyServiceProcessor))
#define IS_BUDDY_SERVICE_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BUDDY_SERVICE_PROCESSOR))
#define BUDDY_SERVICE_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_BUDDY_SERVICE_PROCESSOR, BuddyServiceProcessorClass))
#define IS_BUDDY_SERVICE_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_BUDDY_SERVICE_PROCESSOR))
#define BUDDY_SERVICE_PROCESSOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BUDDY_SERVICE_PROCESSOR, BuddyServiceProcessorClass))

#endif /* BUDDY_SERVICE_H */
