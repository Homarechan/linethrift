/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef BOT_SERVICE_H
#define BOT_SERVICE_H

#include <thrift/c_glib/processor/thrift_dispatch_processor.h>

#include "line_types.h"

/* BotService service interface */
typedef struct _BotServiceIf BotServiceIf;  /* dummy object */

struct _BotServiceIfInterface
{
  GTypeInterface parent;

  gboolean (*notify_leave_group) (BotServiceIf *iface, const gchar * groupMid, TalkException ** e, GError **error);
  gboolean (*notify_leave_room) (BotServiceIf *iface, const gchar * roomMid, TalkException ** e, GError **error);
  gboolean (*get_bot_use_info) (BotServiceIf *iface, BotUseInfo ** _return, const gchar * botMid, TalkException ** e, GError **error);
  gboolean (*send_chat_checked_by_watermark) (BotServiceIf *iface, const gint32 seq, const gchar * mid, const gint64 watermark, const gint8 sessionId, TalkException ** e, GError **error);
};
typedef struct _BotServiceIfInterface BotServiceIfInterface;

GType bot_service_if_get_type (void);
#define TYPE_BOT_SERVICE_IF (bot_service_if_get_type())
#define BOT_SERVICE_IF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BOT_SERVICE_IF, BotServiceIf))
#define IS_BOT_SERVICE_IF(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BOT_SERVICE_IF))
#define BOT_SERVICE_IF_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), TYPE_BOT_SERVICE_IF, BotServiceIfInterface))

gboolean bot_service_if_notify_leave_group (BotServiceIf *iface, const gchar * groupMid, TalkException ** e, GError **error);
gboolean bot_service_if_notify_leave_room (BotServiceIf *iface, const gchar * roomMid, TalkException ** e, GError **error);
gboolean bot_service_if_get_bot_use_info (BotServiceIf *iface, BotUseInfo ** _return, const gchar * botMid, TalkException ** e, GError **error);
gboolean bot_service_if_send_chat_checked_by_watermark (BotServiceIf *iface, const gint32 seq, const gchar * mid, const gint64 watermark, const gint8 sessionId, TalkException ** e, GError **error);

/* BotService service client */
struct _BotServiceClient
{
  GObject parent;

  ThriftProtocol *input_protocol;
  ThriftProtocol *output_protocol;
};
typedef struct _BotServiceClient BotServiceClient;

struct _BotServiceClientClass
{
  GObjectClass parent;
};
typedef struct _BotServiceClientClass BotServiceClientClass;

GType bot_service_client_get_type (void);
#define TYPE_BOT_SERVICE_CLIENT (bot_service_client_get_type())
#define BOT_SERVICE_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BOT_SERVICE_CLIENT, BotServiceClient))
#define BOT_SERVICE_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_BOT_SERVICE_CLIENT, BotServiceClientClass))
#define BOT_SERVICE_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BOT_SERVICE_CLIENT))
#define BOT_SERVICE_IS_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_BOT_SERVICE_CLIENT))
#define BOT_SERVICE_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BOT_SERVICE_CLIENT, BotServiceClientClass))

gboolean bot_service_client_notify_leave_group (BotServiceIf * iface, const gchar * groupMid, TalkException ** e, GError ** error);
gboolean bot_service_client_send_notify_leave_group (BotServiceIf * iface, const gchar * groupMid, GError ** error);
gboolean bot_service_client_recv_notify_leave_group (BotServiceIf * iface, TalkException ** e, GError ** error);
gboolean bot_service_client_notify_leave_room (BotServiceIf * iface, const gchar * roomMid, TalkException ** e, GError ** error);
gboolean bot_service_client_send_notify_leave_room (BotServiceIf * iface, const gchar * roomMid, GError ** error);
gboolean bot_service_client_recv_notify_leave_room (BotServiceIf * iface, TalkException ** e, GError ** error);
gboolean bot_service_client_get_bot_use_info (BotServiceIf * iface, BotUseInfo ** _return, const gchar * botMid, TalkException ** e, GError ** error);
gboolean bot_service_client_send_get_bot_use_info (BotServiceIf * iface, const gchar * botMid, GError ** error);
gboolean bot_service_client_recv_get_bot_use_info (BotServiceIf * iface, BotUseInfo ** _return, TalkException ** e, GError ** error);
gboolean bot_service_client_send_chat_checked_by_watermark (BotServiceIf * iface, const gint32 seq, const gchar * mid, const gint64 watermark, const gint8 sessionId, TalkException ** e, GError ** error);
gboolean bot_service_client_send_send_chat_checked_by_watermark (BotServiceIf * iface, const gint32 seq, const gchar * mid, const gint64 watermark, const gint8 sessionId, GError ** error);
gboolean bot_service_client_recv_send_chat_checked_by_watermark (BotServiceIf * iface, TalkException ** e, GError ** error);
void bot_service_client_set_property (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);
void bot_service_client_get_property (GObject *object, guint property_id, GValue *value, GParamSpec *pspec);

/* BotService handler (abstract base class) */
struct _BotServiceHandler
{
  GObject parent;
};
typedef struct _BotServiceHandler BotServiceHandler;

struct _BotServiceHandlerClass
{
  GObjectClass parent;

  gboolean (*notify_leave_group) (BotServiceIf *iface, const gchar * groupMid, TalkException ** e, GError **error);
  gboolean (*notify_leave_room) (BotServiceIf *iface, const gchar * roomMid, TalkException ** e, GError **error);
  gboolean (*get_bot_use_info) (BotServiceIf *iface, BotUseInfo ** _return, const gchar * botMid, TalkException ** e, GError **error);
  gboolean (*send_chat_checked_by_watermark) (BotServiceIf *iface, const gint32 seq, const gchar * mid, const gint64 watermark, const gint8 sessionId, TalkException ** e, GError **error);
};
typedef struct _BotServiceHandlerClass BotServiceHandlerClass;

GType bot_service_handler_get_type (void);
#define TYPE_BOT_SERVICE_HANDLER (bot_service_handler_get_type())
#define BOT_SERVICE_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BOT_SERVICE_HANDLER, BotServiceHandler))
#define IS_BOT_SERVICE_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BOT_SERVICE_HANDLER))
#define BOT_SERVICE_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_BOT_SERVICE_HANDLER, BotServiceHandlerClass))
#define IS_BOT_SERVICE_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_BOT_SERVICE_HANDLER))
#define BOT_SERVICE_HANDLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BOT_SERVICE_HANDLER, BotServiceHandlerClass))

gboolean bot_service_handler_notify_leave_group (BotServiceIf *iface, const gchar * groupMid, TalkException ** e, GError **error);
gboolean bot_service_handler_notify_leave_room (BotServiceIf *iface, const gchar * roomMid, TalkException ** e, GError **error);
gboolean bot_service_handler_get_bot_use_info (BotServiceIf *iface, BotUseInfo ** _return, const gchar * botMid, TalkException ** e, GError **error);
gboolean bot_service_handler_send_chat_checked_by_watermark (BotServiceIf *iface, const gint32 seq, const gchar * mid, const gint64 watermark, const gint8 sessionId, TalkException ** e, GError **error);

/* BotService processor */
struct _BotServiceProcessor
{
  ThriftDispatchProcessor parent;

  /* protected */
  BotServiceHandler *handler;
  GHashTable *process_map;
};
typedef struct _BotServiceProcessor BotServiceProcessor;

struct _BotServiceProcessorClass
{
  ThriftDispatchProcessorClass parent;

  /* protected */
  gboolean (*dispatch_call) (ThriftDispatchProcessor *processor,
                             ThriftProtocol *in,
                             ThriftProtocol *out,
                             gchar *fname,
                             gint32 seqid,
                             GError **error);
};
typedef struct _BotServiceProcessorClass BotServiceProcessorClass;

GType bot_service_processor_get_type (void);
#define TYPE_BOT_SERVICE_PROCESSOR (bot_service_processor_get_type())
#define BOT_SERVICE_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BOT_SERVICE_PROCESSOR, BotServiceProcessor))
#define IS_BOT_SERVICE_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BOT_SERVICE_PROCESSOR))
#define BOT_SERVICE_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_BOT_SERVICE_PROCESSOR, BotServiceProcessorClass))
#define IS_BOT_SERVICE_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_BOT_SERVICE_PROCESSOR))
#define BOT_SERVICE_PROCESSOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BOT_SERVICE_PROCESSOR, BotServiceProcessorClass))

#endif /* BOT_SERVICE_H */
