/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-17")
public class AdditionalInfoItem implements org.apache.thrift.TBase<AdditionalInfoItem, AdditionalInfoItem._Fields>, java.io.Serializable, Cloneable, Comparable<AdditionalInfoItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AdditionalInfoItem");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField G_FIELD_DESC = new org.apache.thrift.protocol.TField("g", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DESCR_FIELD_DESC = new org.apache.thrift.protocol.TField("descr", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ICON_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("iconUrl", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField LINK_FIELD_DESC = new org.apache.thrift.protocol.TField("link", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AdditionalInfoItemStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AdditionalInfoItemTupleSchemeFactory();

  public java.lang.String id; // required
  public int g; // required
  public java.lang.String title; // required
  public java.lang.String descr; // required
  public java.lang.String iconUrl; // required
  public java.lang.String link; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    G((short)2, "g"),
    TITLE((short)3, "title"),
    DESCR((short)4, "descr"),
    ICON_URL((short)5, "iconUrl"),
    LINK((short)6, "link");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // G
          return G;
        case 3: // TITLE
          return TITLE;
        case 4: // DESCR
          return DESCR;
        case 5: // ICON_URL
          return ICON_URL;
        case 6: // LINK
          return LINK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __G_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.G, new org.apache.thrift.meta_data.FieldMetaData("g", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCR, new org.apache.thrift.meta_data.FieldMetaData("descr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ICON_URL, new org.apache.thrift.meta_data.FieldMetaData("iconUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINK, new org.apache.thrift.meta_data.FieldMetaData("link", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AdditionalInfoItem.class, metaDataMap);
  }

  public AdditionalInfoItem() {
  }

  public AdditionalInfoItem(
    java.lang.String id,
    int g,
    java.lang.String title,
    java.lang.String descr,
    java.lang.String iconUrl,
    java.lang.String link)
  {
    this();
    this.id = id;
    this.g = g;
    setGIsSet(true);
    this.title = title;
    this.descr = descr;
    this.iconUrl = iconUrl;
    this.link = link;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AdditionalInfoItem(AdditionalInfoItem other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    this.g = other.g;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetDescr()) {
      this.descr = other.descr;
    }
    if (other.isSetIconUrl()) {
      this.iconUrl = other.iconUrl;
    }
    if (other.isSetLink()) {
      this.link = other.link;
    }
  }

  public AdditionalInfoItem deepCopy() {
    return new AdditionalInfoItem(this);
  }

  @Override
  public void clear() {
    this.id = null;
    setGIsSet(false);
    this.g = 0;
    this.title = null;
    this.descr = null;
    this.iconUrl = null;
    this.link = null;
  }

  public java.lang.String getId() {
    return this.id;
  }

  public AdditionalInfoItem setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public int getG() {
    return this.g;
  }

  public AdditionalInfoItem setG(int g) {
    this.g = g;
    setGIsSet(true);
    return this;
  }

  public void unsetG() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __G_ISSET_ID);
  }

  /** Returns true if field g is set (has been assigned a value) and false otherwise */
  public boolean isSetG() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __G_ISSET_ID);
  }

  public void setGIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __G_ISSET_ID, value);
  }

  public java.lang.String getTitle() {
    return this.title;
  }

  public AdditionalInfoItem setTitle(java.lang.String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public java.lang.String getDescr() {
    return this.descr;
  }

  public AdditionalInfoItem setDescr(java.lang.String descr) {
    this.descr = descr;
    return this;
  }

  public void unsetDescr() {
    this.descr = null;
  }

  /** Returns true if field descr is set (has been assigned a value) and false otherwise */
  public boolean isSetDescr() {
    return this.descr != null;
  }

  public void setDescrIsSet(boolean value) {
    if (!value) {
      this.descr = null;
    }
  }

  public java.lang.String getIconUrl() {
    return this.iconUrl;
  }

  public AdditionalInfoItem setIconUrl(java.lang.String iconUrl) {
    this.iconUrl = iconUrl;
    return this;
  }

  public void unsetIconUrl() {
    this.iconUrl = null;
  }

  /** Returns true if field iconUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetIconUrl() {
    return this.iconUrl != null;
  }

  public void setIconUrlIsSet(boolean value) {
    if (!value) {
      this.iconUrl = null;
    }
  }

  public java.lang.String getLink() {
    return this.link;
  }

  public AdditionalInfoItem setLink(java.lang.String link) {
    this.link = link;
    return this;
  }

  public void unsetLink() {
    this.link = null;
  }

  /** Returns true if field link is set (has been assigned a value) and false otherwise */
  public boolean isSetLink() {
    return this.link != null;
  }

  public void setLinkIsSet(boolean value) {
    if (!value) {
      this.link = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case G:
      if (value == null) {
        unsetG();
      } else {
        setG((java.lang.Integer)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((java.lang.String)value);
      }
      break;

    case DESCR:
      if (value == null) {
        unsetDescr();
      } else {
        setDescr((java.lang.String)value);
      }
      break;

    case ICON_URL:
      if (value == null) {
        unsetIconUrl();
      } else {
        setIconUrl((java.lang.String)value);
      }
      break;

    case LINK:
      if (value == null) {
        unsetLink();
      } else {
        setLink((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case G:
      return getG();

    case TITLE:
      return getTitle();

    case DESCR:
      return getDescr();

    case ICON_URL:
      return getIconUrl();

    case LINK:
      return getLink();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case G:
      return isSetG();
    case TITLE:
      return isSetTitle();
    case DESCR:
      return isSetDescr();
    case ICON_URL:
      return isSetIconUrl();
    case LINK:
      return isSetLink();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof AdditionalInfoItem)
      return this.equals((AdditionalInfoItem)that);
    return false;
  }

  public boolean equals(AdditionalInfoItem that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_g = true;
    boolean that_present_g = true;
    if (this_present_g || that_present_g) {
      if (!(this_present_g && that_present_g))
        return false;
      if (this.g != that.g)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_descr = true && this.isSetDescr();
    boolean that_present_descr = true && that.isSetDescr();
    if (this_present_descr || that_present_descr) {
      if (!(this_present_descr && that_present_descr))
        return false;
      if (!this.descr.equals(that.descr))
        return false;
    }

    boolean this_present_iconUrl = true && this.isSetIconUrl();
    boolean that_present_iconUrl = true && that.isSetIconUrl();
    if (this_present_iconUrl || that_present_iconUrl) {
      if (!(this_present_iconUrl && that_present_iconUrl))
        return false;
      if (!this.iconUrl.equals(that.iconUrl))
        return false;
    }

    boolean this_present_link = true && this.isSetLink();
    boolean that_present_link = true && that.isSetLink();
    if (this_present_link || that_present_link) {
      if (!(this_present_link && that_present_link))
        return false;
      if (!this.link.equals(that.link))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + g;

    hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
    if (isSetTitle())
      hashCode = hashCode * 8191 + title.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescr()) ? 131071 : 524287);
    if (isSetDescr())
      hashCode = hashCode * 8191 + descr.hashCode();

    hashCode = hashCode * 8191 + ((isSetIconUrl()) ? 131071 : 524287);
    if (isSetIconUrl())
      hashCode = hashCode * 8191 + iconUrl.hashCode();

    hashCode = hashCode * 8191 + ((isSetLink()) ? 131071 : 524287);
    if (isSetLink())
      hashCode = hashCode * 8191 + link.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(AdditionalInfoItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetG()).compareTo(other.isSetG());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetG()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.g, other.g);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescr()).compareTo(other.isSetDescr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descr, other.descr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIconUrl()).compareTo(other.isSetIconUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIconUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iconUrl, other.iconUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLink()).compareTo(other.isSetLink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.link, other.link);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("AdditionalInfoItem(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("g:");
    sb.append(this.g);
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("descr:");
    if (this.descr == null) {
      sb.append("null");
    } else {
      sb.append(this.descr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("iconUrl:");
    if (this.iconUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.iconUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("link:");
    if (this.link == null) {
      sb.append("null");
    } else {
      sb.append(this.link);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AdditionalInfoItemStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AdditionalInfoItemStandardScheme getScheme() {
      return new AdditionalInfoItemStandardScheme();
    }
  }

  private static class AdditionalInfoItemStandardScheme extends org.apache.thrift.scheme.StandardScheme<AdditionalInfoItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AdditionalInfoItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // G
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.g = iprot.readI32();
              struct.setGIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DESCR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.descr = iprot.readString();
              struct.setDescrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ICON_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.iconUrl = iprot.readString();
              struct.setIconUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.link = iprot.readString();
              struct.setLinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AdditionalInfoItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(G_FIELD_DESC);
      oprot.writeI32(struct.g);
      oprot.writeFieldEnd();
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.descr != null) {
        oprot.writeFieldBegin(DESCR_FIELD_DESC);
        oprot.writeString(struct.descr);
        oprot.writeFieldEnd();
      }
      if (struct.iconUrl != null) {
        oprot.writeFieldBegin(ICON_URL_FIELD_DESC);
        oprot.writeString(struct.iconUrl);
        oprot.writeFieldEnd();
      }
      if (struct.link != null) {
        oprot.writeFieldBegin(LINK_FIELD_DESC);
        oprot.writeString(struct.link);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AdditionalInfoItemTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AdditionalInfoItemTupleScheme getScheme() {
      return new AdditionalInfoItemTupleScheme();
    }
  }

  private static class AdditionalInfoItemTupleScheme extends org.apache.thrift.scheme.TupleScheme<AdditionalInfoItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AdditionalInfoItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetG()) {
        optionals.set(1);
      }
      if (struct.isSetTitle()) {
        optionals.set(2);
      }
      if (struct.isSetDescr()) {
        optionals.set(3);
      }
      if (struct.isSetIconUrl()) {
        optionals.set(4);
      }
      if (struct.isSetLink()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetG()) {
        oprot.writeI32(struct.g);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetDescr()) {
        oprot.writeString(struct.descr);
      }
      if (struct.isSetIconUrl()) {
        oprot.writeString(struct.iconUrl);
      }
      if (struct.isSetLink()) {
        oprot.writeString(struct.link);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AdditionalInfoItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.g = iprot.readI32();
        struct.setGIsSet(true);
      }
      if (incoming.get(2)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(3)) {
        struct.descr = iprot.readString();
        struct.setDescrIsSet(true);
      }
      if (incoming.get(4)) {
        struct.iconUrl = iprot.readString();
        struct.setIconUrlIsSet(true);
      }
      if (incoming.get(5)) {
        struct.link = iprot.readString();
        struct.setLinkIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

