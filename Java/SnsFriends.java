/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-17")
public class SnsFriends implements org.apache.thrift.TBase<SnsFriends, SnsFriends._Fields>, java.io.Serializable, Cloneable, Comparable<SnsFriends> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SnsFriends");

  private static final org.apache.thrift.protocol.TField SNS_FRIENDS_FIELD_DESC = new org.apache.thrift.protocol.TField("snsFriends", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField HAS_MORE_FIELD_DESC = new org.apache.thrift.protocol.TField("hasMore", org.apache.thrift.protocol.TType.BOOL, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SnsFriendsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SnsFriendsTupleSchemeFactory();

  public java.util.List<SnsFriend> snsFriends; // required
  public boolean hasMore; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SNS_FRIENDS((short)1, "snsFriends"),
    HAS_MORE((short)2, "hasMore");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SNS_FRIENDS
          return SNS_FRIENDS;
        case 2: // HAS_MORE
          return HAS_MORE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HASMORE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SNS_FRIENDS, new org.apache.thrift.meta_data.FieldMetaData("snsFriends", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SnsFriend.class))));
    tmpMap.put(_Fields.HAS_MORE, new org.apache.thrift.meta_data.FieldMetaData("hasMore", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SnsFriends.class, metaDataMap);
  }

  public SnsFriends() {
  }

  public SnsFriends(
    java.util.List<SnsFriend> snsFriends,
    boolean hasMore)
  {
    this();
    this.snsFriends = snsFriends;
    this.hasMore = hasMore;
    setHasMoreIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SnsFriends(SnsFriends other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSnsFriends()) {
      java.util.List<SnsFriend> __this__snsFriends = new java.util.ArrayList<SnsFriend>(other.snsFriends.size());
      for (SnsFriend other_element : other.snsFriends) {
        __this__snsFriends.add(new SnsFriend(other_element));
      }
      this.snsFriends = __this__snsFriends;
    }
    this.hasMore = other.hasMore;
  }

  public SnsFriends deepCopy() {
    return new SnsFriends(this);
  }

  @Override
  public void clear() {
    this.snsFriends = null;
    setHasMoreIsSet(false);
    this.hasMore = false;
  }

  public int getSnsFriendsSize() {
    return (this.snsFriends == null) ? 0 : this.snsFriends.size();
  }

  public java.util.Iterator<SnsFriend> getSnsFriendsIterator() {
    return (this.snsFriends == null) ? null : this.snsFriends.iterator();
  }

  public void addToSnsFriends(SnsFriend elem) {
    if (this.snsFriends == null) {
      this.snsFriends = new java.util.ArrayList<SnsFriend>();
    }
    this.snsFriends.add(elem);
  }

  public java.util.List<SnsFriend> getSnsFriends() {
    return this.snsFriends;
  }

  public SnsFriends setSnsFriends(java.util.List<SnsFriend> snsFriends) {
    this.snsFriends = snsFriends;
    return this;
  }

  public void unsetSnsFriends() {
    this.snsFriends = null;
  }

  /** Returns true if field snsFriends is set (has been assigned a value) and false otherwise */
  public boolean isSetSnsFriends() {
    return this.snsFriends != null;
  }

  public void setSnsFriendsIsSet(boolean value) {
    if (!value) {
      this.snsFriends = null;
    }
  }

  public boolean isHasMore() {
    return this.hasMore;
  }

  public SnsFriends setHasMore(boolean hasMore) {
    this.hasMore = hasMore;
    setHasMoreIsSet(true);
    return this;
  }

  public void unsetHasMore() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HASMORE_ISSET_ID);
  }

  /** Returns true if field hasMore is set (has been assigned a value) and false otherwise */
  public boolean isSetHasMore() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HASMORE_ISSET_ID);
  }

  public void setHasMoreIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HASMORE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case SNS_FRIENDS:
      if (value == null) {
        unsetSnsFriends();
      } else {
        setSnsFriends((java.util.List<SnsFriend>)value);
      }
      break;

    case HAS_MORE:
      if (value == null) {
        unsetHasMore();
      } else {
        setHasMore((java.lang.Boolean)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SNS_FRIENDS:
      return getSnsFriends();

    case HAS_MORE:
      return isHasMore();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SNS_FRIENDS:
      return isSetSnsFriends();
    case HAS_MORE:
      return isSetHasMore();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SnsFriends)
      return this.equals((SnsFriends)that);
    return false;
  }

  public boolean equals(SnsFriends that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_snsFriends = true && this.isSetSnsFriends();
    boolean that_present_snsFriends = true && that.isSetSnsFriends();
    if (this_present_snsFriends || that_present_snsFriends) {
      if (!(this_present_snsFriends && that_present_snsFriends))
        return false;
      if (!this.snsFriends.equals(that.snsFriends))
        return false;
    }

    boolean this_present_hasMore = true;
    boolean that_present_hasMore = true;
    if (this_present_hasMore || that_present_hasMore) {
      if (!(this_present_hasMore && that_present_hasMore))
        return false;
      if (this.hasMore != that.hasMore)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSnsFriends()) ? 131071 : 524287);
    if (isSetSnsFriends())
      hashCode = hashCode * 8191 + snsFriends.hashCode();

    hashCode = hashCode * 8191 + ((hasMore) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(SnsFriends other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetSnsFriends()).compareTo(other.isSetSnsFriends());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSnsFriends()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snsFriends, other.snsFriends);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHasMore()).compareTo(other.isSetHasMore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasMore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasMore, other.hasMore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SnsFriends(");
    boolean first = true;

    sb.append("snsFriends:");
    if (this.snsFriends == null) {
      sb.append("null");
    } else {
      sb.append(this.snsFriends);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasMore:");
    sb.append(this.hasMore);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SnsFriendsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SnsFriendsStandardScheme getScheme() {
      return new SnsFriendsStandardScheme();
    }
  }

  private static class SnsFriendsStandardScheme extends org.apache.thrift.scheme.StandardScheme<SnsFriends> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SnsFriends struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SNS_FRIENDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list678 = iprot.readListBegin();
                struct.snsFriends = new java.util.ArrayList<SnsFriend>(_list678.size);
                SnsFriend _elem679;
                for (int _i680 = 0; _i680 < _list678.size; ++_i680)
                {
                  _elem679 = new SnsFriend();
                  _elem679.read(iprot);
                  struct.snsFriends.add(_elem679);
                }
                iprot.readListEnd();
              }
              struct.setSnsFriendsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HAS_MORE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasMore = iprot.readBool();
              struct.setHasMoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SnsFriends struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.snsFriends != null) {
        oprot.writeFieldBegin(SNS_FRIENDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.snsFriends.size()));
          for (SnsFriend _iter681 : struct.snsFriends)
          {
            _iter681.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HAS_MORE_FIELD_DESC);
      oprot.writeBool(struct.hasMore);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SnsFriendsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SnsFriendsTupleScheme getScheme() {
      return new SnsFriendsTupleScheme();
    }
  }

  private static class SnsFriendsTupleScheme extends org.apache.thrift.scheme.TupleScheme<SnsFriends> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SnsFriends struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSnsFriends()) {
        optionals.set(0);
      }
      if (struct.isSetHasMore()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetSnsFriends()) {
        {
          oprot.writeI32(struct.snsFriends.size());
          for (SnsFriend _iter682 : struct.snsFriends)
          {
            _iter682.write(oprot);
          }
        }
      }
      if (struct.isSetHasMore()) {
        oprot.writeBool(struct.hasMore);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SnsFriends struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list683 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.snsFriends = new java.util.ArrayList<SnsFriend>(_list683.size);
          SnsFriend _elem684;
          for (int _i685 = 0; _i685 < _list683.size; ++_i685)
          {
            _elem684 = new SnsFriend();
            _elem684.read(iprot);
            struct.snsFriends.add(_elem684);
          }
        }
        struct.setSnsFriendsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hasMore = iprot.readBool();
        struct.setHasMoreIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

