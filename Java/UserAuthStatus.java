/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-17")
public class UserAuthStatus implements org.apache.thrift.TBase<UserAuthStatus, UserAuthStatus._Fields>, java.io.Serializable, Cloneable, Comparable<UserAuthStatus> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserAuthStatus");

  private static final org.apache.thrift.protocol.TField PHONE_NUMBER_REGISTERED_FIELD_DESC = new org.apache.thrift.protocol.TField("phoneNumberRegistered", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField REGISTERED_SNS_ID_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("registeredSnsIdTypes", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField ACCOUNT_MIGRATION_CHECK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("accountMigrationCheckType", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UserAuthStatusStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UserAuthStatusTupleSchemeFactory();

  public boolean phoneNumberRegistered; // required
  public java.util.List<SnsIdType> registeredSnsIdTypes; // required
  /**
   * 
   * @see AccountMigrationCheckType
   */
  public AccountMigrationCheckType accountMigrationCheckType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PHONE_NUMBER_REGISTERED((short)1, "phoneNumberRegistered"),
    REGISTERED_SNS_ID_TYPES((short)2, "registeredSnsIdTypes"),
    /**
     * 
     * @see AccountMigrationCheckType
     */
    ACCOUNT_MIGRATION_CHECK_TYPE((short)3, "accountMigrationCheckType");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PHONE_NUMBER_REGISTERED
          return PHONE_NUMBER_REGISTERED;
        case 2: // REGISTERED_SNS_ID_TYPES
          return REGISTERED_SNS_ID_TYPES;
        case 3: // ACCOUNT_MIGRATION_CHECK_TYPE
          return ACCOUNT_MIGRATION_CHECK_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PHONENUMBERREGISTERED_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PHONE_NUMBER_REGISTERED, new org.apache.thrift.meta_data.FieldMetaData("phoneNumberRegistered", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.REGISTERED_SNS_ID_TYPES, new org.apache.thrift.meta_data.FieldMetaData("registeredSnsIdTypes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SnsIdType.class))));
    tmpMap.put(_Fields.ACCOUNT_MIGRATION_CHECK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("accountMigrationCheckType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AccountMigrationCheckType.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserAuthStatus.class, metaDataMap);
  }

  public UserAuthStatus() {
  }

  public UserAuthStatus(
    boolean phoneNumberRegistered,
    java.util.List<SnsIdType> registeredSnsIdTypes,
    AccountMigrationCheckType accountMigrationCheckType)
  {
    this();
    this.phoneNumberRegistered = phoneNumberRegistered;
    setPhoneNumberRegisteredIsSet(true);
    this.registeredSnsIdTypes = registeredSnsIdTypes;
    this.accountMigrationCheckType = accountMigrationCheckType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserAuthStatus(UserAuthStatus other) {
    __isset_bitfield = other.__isset_bitfield;
    this.phoneNumberRegistered = other.phoneNumberRegistered;
    if (other.isSetRegisteredSnsIdTypes()) {
      java.util.List<SnsIdType> __this__registeredSnsIdTypes = new java.util.ArrayList<SnsIdType>(other.registeredSnsIdTypes.size());
      for (SnsIdType other_element : other.registeredSnsIdTypes) {
        __this__registeredSnsIdTypes.add(other_element);
      }
      this.registeredSnsIdTypes = __this__registeredSnsIdTypes;
    }
    if (other.isSetAccountMigrationCheckType()) {
      this.accountMigrationCheckType = other.accountMigrationCheckType;
    }
  }

  public UserAuthStatus deepCopy() {
    return new UserAuthStatus(this);
  }

  @Override
  public void clear() {
    setPhoneNumberRegisteredIsSet(false);
    this.phoneNumberRegistered = false;
    this.registeredSnsIdTypes = null;
    this.accountMigrationCheckType = null;
  }

  public boolean isPhoneNumberRegistered() {
    return this.phoneNumberRegistered;
  }

  public UserAuthStatus setPhoneNumberRegistered(boolean phoneNumberRegistered) {
    this.phoneNumberRegistered = phoneNumberRegistered;
    setPhoneNumberRegisteredIsSet(true);
    return this;
  }

  public void unsetPhoneNumberRegistered() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PHONENUMBERREGISTERED_ISSET_ID);
  }

  /** Returns true if field phoneNumberRegistered is set (has been assigned a value) and false otherwise */
  public boolean isSetPhoneNumberRegistered() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PHONENUMBERREGISTERED_ISSET_ID);
  }

  public void setPhoneNumberRegisteredIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PHONENUMBERREGISTERED_ISSET_ID, value);
  }

  public int getRegisteredSnsIdTypesSize() {
    return (this.registeredSnsIdTypes == null) ? 0 : this.registeredSnsIdTypes.size();
  }

  public java.util.Iterator<SnsIdType> getRegisteredSnsIdTypesIterator() {
    return (this.registeredSnsIdTypes == null) ? null : this.registeredSnsIdTypes.iterator();
  }

  public void addToRegisteredSnsIdTypes(SnsIdType elem) {
    if (this.registeredSnsIdTypes == null) {
      this.registeredSnsIdTypes = new java.util.ArrayList<SnsIdType>();
    }
    this.registeredSnsIdTypes.add(elem);
  }

  public java.util.List<SnsIdType> getRegisteredSnsIdTypes() {
    return this.registeredSnsIdTypes;
  }

  public UserAuthStatus setRegisteredSnsIdTypes(java.util.List<SnsIdType> registeredSnsIdTypes) {
    this.registeredSnsIdTypes = registeredSnsIdTypes;
    return this;
  }

  public void unsetRegisteredSnsIdTypes() {
    this.registeredSnsIdTypes = null;
  }

  /** Returns true if field registeredSnsIdTypes is set (has been assigned a value) and false otherwise */
  public boolean isSetRegisteredSnsIdTypes() {
    return this.registeredSnsIdTypes != null;
  }

  public void setRegisteredSnsIdTypesIsSet(boolean value) {
    if (!value) {
      this.registeredSnsIdTypes = null;
    }
  }

  /**
   * 
   * @see AccountMigrationCheckType
   */
  public AccountMigrationCheckType getAccountMigrationCheckType() {
    return this.accountMigrationCheckType;
  }

  /**
   * 
   * @see AccountMigrationCheckType
   */
  public UserAuthStatus setAccountMigrationCheckType(AccountMigrationCheckType accountMigrationCheckType) {
    this.accountMigrationCheckType = accountMigrationCheckType;
    return this;
  }

  public void unsetAccountMigrationCheckType() {
    this.accountMigrationCheckType = null;
  }

  /** Returns true if field accountMigrationCheckType is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountMigrationCheckType() {
    return this.accountMigrationCheckType != null;
  }

  public void setAccountMigrationCheckTypeIsSet(boolean value) {
    if (!value) {
      this.accountMigrationCheckType = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case PHONE_NUMBER_REGISTERED:
      if (value == null) {
        unsetPhoneNumberRegistered();
      } else {
        setPhoneNumberRegistered((java.lang.Boolean)value);
      }
      break;

    case REGISTERED_SNS_ID_TYPES:
      if (value == null) {
        unsetRegisteredSnsIdTypes();
      } else {
        setRegisteredSnsIdTypes((java.util.List<SnsIdType>)value);
      }
      break;

    case ACCOUNT_MIGRATION_CHECK_TYPE:
      if (value == null) {
        unsetAccountMigrationCheckType();
      } else {
        setAccountMigrationCheckType((AccountMigrationCheckType)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PHONE_NUMBER_REGISTERED:
      return isPhoneNumberRegistered();

    case REGISTERED_SNS_ID_TYPES:
      return getRegisteredSnsIdTypes();

    case ACCOUNT_MIGRATION_CHECK_TYPE:
      return getAccountMigrationCheckType();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PHONE_NUMBER_REGISTERED:
      return isSetPhoneNumberRegistered();
    case REGISTERED_SNS_ID_TYPES:
      return isSetRegisteredSnsIdTypes();
    case ACCOUNT_MIGRATION_CHECK_TYPE:
      return isSetAccountMigrationCheckType();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof UserAuthStatus)
      return this.equals((UserAuthStatus)that);
    return false;
  }

  public boolean equals(UserAuthStatus that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_phoneNumberRegistered = true;
    boolean that_present_phoneNumberRegistered = true;
    if (this_present_phoneNumberRegistered || that_present_phoneNumberRegistered) {
      if (!(this_present_phoneNumberRegistered && that_present_phoneNumberRegistered))
        return false;
      if (this.phoneNumberRegistered != that.phoneNumberRegistered)
        return false;
    }

    boolean this_present_registeredSnsIdTypes = true && this.isSetRegisteredSnsIdTypes();
    boolean that_present_registeredSnsIdTypes = true && that.isSetRegisteredSnsIdTypes();
    if (this_present_registeredSnsIdTypes || that_present_registeredSnsIdTypes) {
      if (!(this_present_registeredSnsIdTypes && that_present_registeredSnsIdTypes))
        return false;
      if (!this.registeredSnsIdTypes.equals(that.registeredSnsIdTypes))
        return false;
    }

    boolean this_present_accountMigrationCheckType = true && this.isSetAccountMigrationCheckType();
    boolean that_present_accountMigrationCheckType = true && that.isSetAccountMigrationCheckType();
    if (this_present_accountMigrationCheckType || that_present_accountMigrationCheckType) {
      if (!(this_present_accountMigrationCheckType && that_present_accountMigrationCheckType))
        return false;
      if (!this.accountMigrationCheckType.equals(that.accountMigrationCheckType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((phoneNumberRegistered) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetRegisteredSnsIdTypes()) ? 131071 : 524287);
    if (isSetRegisteredSnsIdTypes())
      hashCode = hashCode * 8191 + registeredSnsIdTypes.hashCode();

    hashCode = hashCode * 8191 + ((isSetAccountMigrationCheckType()) ? 131071 : 524287);
    if (isSetAccountMigrationCheckType())
      hashCode = hashCode * 8191 + accountMigrationCheckType.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(UserAuthStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetPhoneNumberRegistered()).compareTo(other.isSetPhoneNumberRegistered());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhoneNumberRegistered()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phoneNumberRegistered, other.phoneNumberRegistered);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRegisteredSnsIdTypes()).compareTo(other.isSetRegisteredSnsIdTypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegisteredSnsIdTypes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registeredSnsIdTypes, other.registeredSnsIdTypes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAccountMigrationCheckType()).compareTo(other.isSetAccountMigrationCheckType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountMigrationCheckType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountMigrationCheckType, other.accountMigrationCheckType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("UserAuthStatus(");
    boolean first = true;

    sb.append("phoneNumberRegistered:");
    sb.append(this.phoneNumberRegistered);
    first = false;
    if (!first) sb.append(", ");
    sb.append("registeredSnsIdTypes:");
    if (this.registeredSnsIdTypes == null) {
      sb.append("null");
    } else {
      sb.append(this.registeredSnsIdTypes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountMigrationCheckType:");
    if (this.accountMigrationCheckType == null) {
      sb.append("null");
    } else {
      sb.append(this.accountMigrationCheckType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserAuthStatusStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserAuthStatusStandardScheme getScheme() {
      return new UserAuthStatusStandardScheme();
    }
  }

  private static class UserAuthStatusStandardScheme extends org.apache.thrift.scheme.StandardScheme<UserAuthStatus> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserAuthStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PHONE_NUMBER_REGISTERED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.phoneNumberRegistered = iprot.readBool();
              struct.setPhoneNumberRegisteredIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REGISTERED_SNS_ID_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1250 = iprot.readListBegin();
                struct.registeredSnsIdTypes = new java.util.ArrayList<SnsIdType>(_list1250.size);
                SnsIdType _elem1251;
                for (int _i1252 = 0; _i1252 < _list1250.size; ++_i1252)
                {
                  _elem1251 = SnsIdType.findByValue(iprot.readI32());
                  if (_elem1251 != null)
                  {
                    struct.registeredSnsIdTypes.add(_elem1251);
                  }
                }
                iprot.readListEnd();
              }
              struct.setRegisteredSnsIdTypesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACCOUNT_MIGRATION_CHECK_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.accountMigrationCheckType = AccountMigrationCheckType.findByValue(iprot.readI32());
              struct.setAccountMigrationCheckTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserAuthStatus struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PHONE_NUMBER_REGISTERED_FIELD_DESC);
      oprot.writeBool(struct.phoneNumberRegistered);
      oprot.writeFieldEnd();
      if (struct.registeredSnsIdTypes != null) {
        oprot.writeFieldBegin(REGISTERED_SNS_ID_TYPES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.registeredSnsIdTypes.size()));
          for (SnsIdType _iter1253 : struct.registeredSnsIdTypes)
          {
            oprot.writeI32(_iter1253.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.accountMigrationCheckType != null) {
        oprot.writeFieldBegin(ACCOUNT_MIGRATION_CHECK_TYPE_FIELD_DESC);
        oprot.writeI32(struct.accountMigrationCheckType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserAuthStatusTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserAuthStatusTupleScheme getScheme() {
      return new UserAuthStatusTupleScheme();
    }
  }

  private static class UserAuthStatusTupleScheme extends org.apache.thrift.scheme.TupleScheme<UserAuthStatus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserAuthStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPhoneNumberRegistered()) {
        optionals.set(0);
      }
      if (struct.isSetRegisteredSnsIdTypes()) {
        optionals.set(1);
      }
      if (struct.isSetAccountMigrationCheckType()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetPhoneNumberRegistered()) {
        oprot.writeBool(struct.phoneNumberRegistered);
      }
      if (struct.isSetRegisteredSnsIdTypes()) {
        {
          oprot.writeI32(struct.registeredSnsIdTypes.size());
          for (SnsIdType _iter1254 : struct.registeredSnsIdTypes)
          {
            oprot.writeI32(_iter1254.getValue());
          }
        }
      }
      if (struct.isSetAccountMigrationCheckType()) {
        oprot.writeI32(struct.accountMigrationCheckType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserAuthStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.phoneNumberRegistered = iprot.readBool();
        struct.setPhoneNumberRegisteredIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list1255 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.registeredSnsIdTypes = new java.util.ArrayList<SnsIdType>(_list1255.size);
          SnsIdType _elem1256;
          for (int _i1257 = 0; _i1257 < _list1255.size; ++_i1257)
          {
            _elem1256 = SnsIdType.findByValue(iprot.readI32());
            if (_elem1256 != null)
            {
              struct.registeredSnsIdTypes.add(_elem1256);
            }
          }
        }
        struct.setRegisteredSnsIdTypesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.accountMigrationCheckType = AccountMigrationCheckType.findByValue(iprot.readI32());
        struct.setAccountMigrationCheckTypeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

