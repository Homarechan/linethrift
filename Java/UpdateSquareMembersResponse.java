/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-17")
public class UpdateSquareMembersResponse implements org.apache.thrift.TBase<UpdateSquareMembersResponse, UpdateSquareMembersResponse._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateSquareMembersResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateSquareMembersResponse");

  private static final org.apache.thrift.protocol.TField UPDATED_ATTRS_FIELD_DESC = new org.apache.thrift.protocol.TField("updatedAttrs", org.apache.thrift.protocol.TType.SET, (short)1);
  private static final org.apache.thrift.protocol.TField EDITOR_FIELD_DESC = new org.apache.thrift.protocol.TField("editor", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField MEMBERS_FIELD_DESC = new org.apache.thrift.protocol.TField("members", org.apache.thrift.protocol.TType.MAP, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UpdateSquareMembersResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UpdateSquareMembersResponseTupleSchemeFactory();

  public java.util.Set<SquareMemberAttribute> updatedAttrs; // required
  public SquareMember editor; // required
  public java.util.Map<java.lang.String,SquareMember> members; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UPDATED_ATTRS((short)1, "updatedAttrs"),
    EDITOR((short)2, "editor"),
    MEMBERS((short)3, "members");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UPDATED_ATTRS
          return UPDATED_ATTRS;
        case 2: // EDITOR
          return EDITOR;
        case 3: // MEMBERS
          return MEMBERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UPDATED_ATTRS, new org.apache.thrift.meta_data.FieldMetaData("updatedAttrs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SquareMemberAttribute.class))));
    tmpMap.put(_Fields.EDITOR, new org.apache.thrift.meta_data.FieldMetaData("editor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SquareMember.class)));
    tmpMap.put(_Fields.MEMBERS, new org.apache.thrift.meta_data.FieldMetaData("members", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SquareMember.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateSquareMembersResponse.class, metaDataMap);
  }

  public UpdateSquareMembersResponse() {
  }

  public UpdateSquareMembersResponse(
    java.util.Set<SquareMemberAttribute> updatedAttrs,
    SquareMember editor,
    java.util.Map<java.lang.String,SquareMember> members)
  {
    this();
    this.updatedAttrs = updatedAttrs;
    this.editor = editor;
    this.members = members;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UpdateSquareMembersResponse(UpdateSquareMembersResponse other) {
    if (other.isSetUpdatedAttrs()) {
      java.util.Set<SquareMemberAttribute> __this__updatedAttrs = java.util.EnumSet.noneOf(SquareMemberAttribute.class);
      for (SquareMemberAttribute other_element : other.updatedAttrs) {
        __this__updatedAttrs.add(other_element);
      }
      this.updatedAttrs = __this__updatedAttrs;
    }
    if (other.isSetEditor()) {
      this.editor = new SquareMember(other.editor);
    }
    if (other.isSetMembers()) {
      java.util.Map<java.lang.String,SquareMember> __this__members = new java.util.HashMap<java.lang.String,SquareMember>(other.members.size());
      for (java.util.Map.Entry<java.lang.String, SquareMember> other_element : other.members.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        SquareMember other_element_value = other_element.getValue();

        java.lang.String __this__members_copy_key = other_element_key;

        SquareMember __this__members_copy_value = new SquareMember(other_element_value);

        __this__members.put(__this__members_copy_key, __this__members_copy_value);
      }
      this.members = __this__members;
    }
  }

  public UpdateSquareMembersResponse deepCopy() {
    return new UpdateSquareMembersResponse(this);
  }

  @Override
  public void clear() {
    this.updatedAttrs = null;
    this.editor = null;
    this.members = null;
  }

  public int getUpdatedAttrsSize() {
    return (this.updatedAttrs == null) ? 0 : this.updatedAttrs.size();
  }

  public java.util.Iterator<SquareMemberAttribute> getUpdatedAttrsIterator() {
    return (this.updatedAttrs == null) ? null : this.updatedAttrs.iterator();
  }

  public void addToUpdatedAttrs(SquareMemberAttribute elem) {
    if (this.updatedAttrs == null) {
      this.updatedAttrs = java.util.EnumSet.noneOf(SquareMemberAttribute.class);
    }
    this.updatedAttrs.add(elem);
  }

  public java.util.Set<SquareMemberAttribute> getUpdatedAttrs() {
    return this.updatedAttrs;
  }

  public UpdateSquareMembersResponse setUpdatedAttrs(java.util.Set<SquareMemberAttribute> updatedAttrs) {
    this.updatedAttrs = updatedAttrs;
    return this;
  }

  public void unsetUpdatedAttrs() {
    this.updatedAttrs = null;
  }

  /** Returns true if field updatedAttrs is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdatedAttrs() {
    return this.updatedAttrs != null;
  }

  public void setUpdatedAttrsIsSet(boolean value) {
    if (!value) {
      this.updatedAttrs = null;
    }
  }

  public SquareMember getEditor() {
    return this.editor;
  }

  public UpdateSquareMembersResponse setEditor(SquareMember editor) {
    this.editor = editor;
    return this;
  }

  public void unsetEditor() {
    this.editor = null;
  }

  /** Returns true if field editor is set (has been assigned a value) and false otherwise */
  public boolean isSetEditor() {
    return this.editor != null;
  }

  public void setEditorIsSet(boolean value) {
    if (!value) {
      this.editor = null;
    }
  }

  public int getMembersSize() {
    return (this.members == null) ? 0 : this.members.size();
  }

  public void putToMembers(java.lang.String key, SquareMember val) {
    if (this.members == null) {
      this.members = new java.util.HashMap<java.lang.String,SquareMember>();
    }
    this.members.put(key, val);
  }

  public java.util.Map<java.lang.String,SquareMember> getMembers() {
    return this.members;
  }

  public UpdateSquareMembersResponse setMembers(java.util.Map<java.lang.String,SquareMember> members) {
    this.members = members;
    return this;
  }

  public void unsetMembers() {
    this.members = null;
  }

  /** Returns true if field members is set (has been assigned a value) and false otherwise */
  public boolean isSetMembers() {
    return this.members != null;
  }

  public void setMembersIsSet(boolean value) {
    if (!value) {
      this.members = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case UPDATED_ATTRS:
      if (value == null) {
        unsetUpdatedAttrs();
      } else {
        setUpdatedAttrs((java.util.Set<SquareMemberAttribute>)value);
      }
      break;

    case EDITOR:
      if (value == null) {
        unsetEditor();
      } else {
        setEditor((SquareMember)value);
      }
      break;

    case MEMBERS:
      if (value == null) {
        unsetMembers();
      } else {
        setMembers((java.util.Map<java.lang.String,SquareMember>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case UPDATED_ATTRS:
      return getUpdatedAttrs();

    case EDITOR:
      return getEditor();

    case MEMBERS:
      return getMembers();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case UPDATED_ATTRS:
      return isSetUpdatedAttrs();
    case EDITOR:
      return isSetEditor();
    case MEMBERS:
      return isSetMembers();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof UpdateSquareMembersResponse)
      return this.equals((UpdateSquareMembersResponse)that);
    return false;
  }

  public boolean equals(UpdateSquareMembersResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_updatedAttrs = true && this.isSetUpdatedAttrs();
    boolean that_present_updatedAttrs = true && that.isSetUpdatedAttrs();
    if (this_present_updatedAttrs || that_present_updatedAttrs) {
      if (!(this_present_updatedAttrs && that_present_updatedAttrs))
        return false;
      if (!this.updatedAttrs.equals(that.updatedAttrs))
        return false;
    }

    boolean this_present_editor = true && this.isSetEditor();
    boolean that_present_editor = true && that.isSetEditor();
    if (this_present_editor || that_present_editor) {
      if (!(this_present_editor && that_present_editor))
        return false;
      if (!this.editor.equals(that.editor))
        return false;
    }

    boolean this_present_members = true && this.isSetMembers();
    boolean that_present_members = true && that.isSetMembers();
    if (this_present_members || that_present_members) {
      if (!(this_present_members && that_present_members))
        return false;
      if (!this.members.equals(that.members))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUpdatedAttrs()) ? 131071 : 524287);
    if (isSetUpdatedAttrs())
      hashCode = hashCode * 8191 + updatedAttrs.hashCode();

    hashCode = hashCode * 8191 + ((isSetEditor()) ? 131071 : 524287);
    if (isSetEditor())
      hashCode = hashCode * 8191 + editor.hashCode();

    hashCode = hashCode * 8191 + ((isSetMembers()) ? 131071 : 524287);
    if (isSetMembers())
      hashCode = hashCode * 8191 + members.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(UpdateSquareMembersResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUpdatedAttrs()).compareTo(other.isSetUpdatedAttrs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatedAttrs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatedAttrs, other.updatedAttrs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEditor()).compareTo(other.isSetEditor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEditor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.editor, other.editor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMembers()).compareTo(other.isSetMembers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMembers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.members, other.members);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("UpdateSquareMembersResponse(");
    boolean first = true;

    sb.append("updatedAttrs:");
    if (this.updatedAttrs == null) {
      sb.append("null");
    } else {
      sb.append(this.updatedAttrs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("editor:");
    if (this.editor == null) {
      sb.append("null");
    } else {
      sb.append(this.editor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("members:");
    if (this.members == null) {
      sb.append("null");
    } else {
      sb.append(this.members);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (editor != null) {
      editor.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UpdateSquareMembersResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UpdateSquareMembersResponseStandardScheme getScheme() {
      return new UpdateSquareMembersResponseStandardScheme();
    }
  }

  private static class UpdateSquareMembersResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<UpdateSquareMembersResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateSquareMembersResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UPDATED_ATTRS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set1058 = iprot.readSetBegin();
                struct.updatedAttrs = java.util.EnumSet.noneOf(SquareMemberAttribute.class);
                SquareMemberAttribute _elem1059;
                for (int _i1060 = 0; _i1060 < _set1058.size; ++_i1060)
                {
                  _elem1059 = SquareMemberAttribute.findByValue(iprot.readI32());
                  if (_elem1059 != null)
                  {
                    struct.updatedAttrs.add(_elem1059);
                  }
                }
                iprot.readSetEnd();
              }
              struct.setUpdatedAttrsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EDITOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.editor = new SquareMember();
              struct.editor.read(iprot);
              struct.setEditorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEMBERS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map1061 = iprot.readMapBegin();
                struct.members = new java.util.HashMap<java.lang.String,SquareMember>(2*_map1061.size);
                java.lang.String _key1062;
                SquareMember _val1063;
                for (int _i1064 = 0; _i1064 < _map1061.size; ++_i1064)
                {
                  _key1062 = iprot.readString();
                  _val1063 = new SquareMember();
                  _val1063.read(iprot);
                  struct.members.put(_key1062, _val1063);
                }
                iprot.readMapEnd();
              }
              struct.setMembersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateSquareMembersResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.updatedAttrs != null) {
        oprot.writeFieldBegin(UPDATED_ATTRS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.updatedAttrs.size()));
          for (SquareMemberAttribute _iter1065 : struct.updatedAttrs)
          {
            oprot.writeI32(_iter1065.getValue());
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.editor != null) {
        oprot.writeFieldBegin(EDITOR_FIELD_DESC);
        struct.editor.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.members != null) {
        oprot.writeFieldBegin(MEMBERS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.members.size()));
          for (java.util.Map.Entry<java.lang.String, SquareMember> _iter1066 : struct.members.entrySet())
          {
            oprot.writeString(_iter1066.getKey());
            _iter1066.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UpdateSquareMembersResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UpdateSquareMembersResponseTupleScheme getScheme() {
      return new UpdateSquareMembersResponseTupleScheme();
    }
  }

  private static class UpdateSquareMembersResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<UpdateSquareMembersResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UpdateSquareMembersResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUpdatedAttrs()) {
        optionals.set(0);
      }
      if (struct.isSetEditor()) {
        optionals.set(1);
      }
      if (struct.isSetMembers()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetUpdatedAttrs()) {
        {
          oprot.writeI32(struct.updatedAttrs.size());
          for (SquareMemberAttribute _iter1067 : struct.updatedAttrs)
          {
            oprot.writeI32(_iter1067.getValue());
          }
        }
      }
      if (struct.isSetEditor()) {
        struct.editor.write(oprot);
      }
      if (struct.isSetMembers()) {
        {
          oprot.writeI32(struct.members.size());
          for (java.util.Map.Entry<java.lang.String, SquareMember> _iter1068 : struct.members.entrySet())
          {
            oprot.writeString(_iter1068.getKey());
            _iter1068.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UpdateSquareMembersResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set1069 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.updatedAttrs = java.util.EnumSet.noneOf(SquareMemberAttribute.class);
          SquareMemberAttribute _elem1070;
          for (int _i1071 = 0; _i1071 < _set1069.size; ++_i1071)
          {
            _elem1070 = SquareMemberAttribute.findByValue(iprot.readI32());
            if (_elem1070 != null)
            {
              struct.updatedAttrs.add(_elem1070);
            }
          }
        }
        struct.setUpdatedAttrsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.editor = new SquareMember();
        struct.editor.read(iprot);
        struct.setEditorIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map1072 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.members = new java.util.HashMap<java.lang.String,SquareMember>(2*_map1072.size);
          java.lang.String _key1073;
          SquareMember _val1074;
          for (int _i1075 = 0; _i1075 < _map1072.size; ++_i1075)
          {
            _key1073 = iprot.readString();
            _val1074 = new SquareMember();
            _val1074.read(iprot);
            struct.members.put(_key1073, _val1074);
          }
        }
        struct.setMembersIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

