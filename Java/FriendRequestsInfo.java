/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-17")
public class FriendRequestsInfo implements org.apache.thrift.TBase<FriendRequestsInfo, FriendRequestsInfo._Fields>, java.io.Serializable, Cloneable, Comparable<FriendRequestsInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FriendRequestsInfo");

  private static final org.apache.thrift.protocol.TField TOTAL_INCOMING_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalIncomingCount", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TOTAL_OUTGOING_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalOutgoingCount", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField RECENT_INCOMINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("recentIncomings", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField RECENT_OUTGOINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("recentOutgoings", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField TOTAL_INCOMING_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalIncomingLimit", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TOTAL_OUTGOING_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalOutgoingLimit", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FriendRequestsInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FriendRequestsInfoTupleSchemeFactory();

  public int totalIncomingCount; // required
  public int totalOutgoingCount; // required
  public java.util.List<FriendRequest> recentIncomings; // required
  public java.util.List<FriendRequest> recentOutgoings; // required
  public int totalIncomingLimit; // required
  public int totalOutgoingLimit; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOTAL_INCOMING_COUNT((short)1, "totalIncomingCount"),
    TOTAL_OUTGOING_COUNT((short)2, "totalOutgoingCount"),
    RECENT_INCOMINGS((short)3, "recentIncomings"),
    RECENT_OUTGOINGS((short)4, "recentOutgoings"),
    TOTAL_INCOMING_LIMIT((short)5, "totalIncomingLimit"),
    TOTAL_OUTGOING_LIMIT((short)6, "totalOutgoingLimit");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOTAL_INCOMING_COUNT
          return TOTAL_INCOMING_COUNT;
        case 2: // TOTAL_OUTGOING_COUNT
          return TOTAL_OUTGOING_COUNT;
        case 3: // RECENT_INCOMINGS
          return RECENT_INCOMINGS;
        case 4: // RECENT_OUTGOINGS
          return RECENT_OUTGOINGS;
        case 5: // TOTAL_INCOMING_LIMIT
          return TOTAL_INCOMING_LIMIT;
        case 6: // TOTAL_OUTGOING_LIMIT
          return TOTAL_OUTGOING_LIMIT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALINCOMINGCOUNT_ISSET_ID = 0;
  private static final int __TOTALOUTGOINGCOUNT_ISSET_ID = 1;
  private static final int __TOTALINCOMINGLIMIT_ISSET_ID = 2;
  private static final int __TOTALOUTGOINGLIMIT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOTAL_INCOMING_COUNT, new org.apache.thrift.meta_data.FieldMetaData("totalIncomingCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_OUTGOING_COUNT, new org.apache.thrift.meta_data.FieldMetaData("totalOutgoingCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECENT_INCOMINGS, new org.apache.thrift.meta_data.FieldMetaData("recentIncomings", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FriendRequest.class))));
    tmpMap.put(_Fields.RECENT_OUTGOINGS, new org.apache.thrift.meta_data.FieldMetaData("recentOutgoings", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FriendRequest.class))));
    tmpMap.put(_Fields.TOTAL_INCOMING_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("totalIncomingLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_OUTGOING_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("totalOutgoingLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FriendRequestsInfo.class, metaDataMap);
  }

  public FriendRequestsInfo() {
  }

  public FriendRequestsInfo(
    int totalIncomingCount,
    int totalOutgoingCount,
    java.util.List<FriendRequest> recentIncomings,
    java.util.List<FriendRequest> recentOutgoings,
    int totalIncomingLimit,
    int totalOutgoingLimit)
  {
    this();
    this.totalIncomingCount = totalIncomingCount;
    setTotalIncomingCountIsSet(true);
    this.totalOutgoingCount = totalOutgoingCount;
    setTotalOutgoingCountIsSet(true);
    this.recentIncomings = recentIncomings;
    this.recentOutgoings = recentOutgoings;
    this.totalIncomingLimit = totalIncomingLimit;
    setTotalIncomingLimitIsSet(true);
    this.totalOutgoingLimit = totalOutgoingLimit;
    setTotalOutgoingLimitIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FriendRequestsInfo(FriendRequestsInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.totalIncomingCount = other.totalIncomingCount;
    this.totalOutgoingCount = other.totalOutgoingCount;
    if (other.isSetRecentIncomings()) {
      java.util.List<FriendRequest> __this__recentIncomings = new java.util.ArrayList<FriendRequest>(other.recentIncomings.size());
      for (FriendRequest other_element : other.recentIncomings) {
        __this__recentIncomings.add(new FriendRequest(other_element));
      }
      this.recentIncomings = __this__recentIncomings;
    }
    if (other.isSetRecentOutgoings()) {
      java.util.List<FriendRequest> __this__recentOutgoings = new java.util.ArrayList<FriendRequest>(other.recentOutgoings.size());
      for (FriendRequest other_element : other.recentOutgoings) {
        __this__recentOutgoings.add(new FriendRequest(other_element));
      }
      this.recentOutgoings = __this__recentOutgoings;
    }
    this.totalIncomingLimit = other.totalIncomingLimit;
    this.totalOutgoingLimit = other.totalOutgoingLimit;
  }

  public FriendRequestsInfo deepCopy() {
    return new FriendRequestsInfo(this);
  }

  @Override
  public void clear() {
    setTotalIncomingCountIsSet(false);
    this.totalIncomingCount = 0;
    setTotalOutgoingCountIsSet(false);
    this.totalOutgoingCount = 0;
    this.recentIncomings = null;
    this.recentOutgoings = null;
    setTotalIncomingLimitIsSet(false);
    this.totalIncomingLimit = 0;
    setTotalOutgoingLimitIsSet(false);
    this.totalOutgoingLimit = 0;
  }

  public int getTotalIncomingCount() {
    return this.totalIncomingCount;
  }

  public FriendRequestsInfo setTotalIncomingCount(int totalIncomingCount) {
    this.totalIncomingCount = totalIncomingCount;
    setTotalIncomingCountIsSet(true);
    return this;
  }

  public void unsetTotalIncomingCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALINCOMINGCOUNT_ISSET_ID);
  }

  /** Returns true if field totalIncomingCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalIncomingCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALINCOMINGCOUNT_ISSET_ID);
  }

  public void setTotalIncomingCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALINCOMINGCOUNT_ISSET_ID, value);
  }

  public int getTotalOutgoingCount() {
    return this.totalOutgoingCount;
  }

  public FriendRequestsInfo setTotalOutgoingCount(int totalOutgoingCount) {
    this.totalOutgoingCount = totalOutgoingCount;
    setTotalOutgoingCountIsSet(true);
    return this;
  }

  public void unsetTotalOutgoingCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALOUTGOINGCOUNT_ISSET_ID);
  }

  /** Returns true if field totalOutgoingCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalOutgoingCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALOUTGOINGCOUNT_ISSET_ID);
  }

  public void setTotalOutgoingCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALOUTGOINGCOUNT_ISSET_ID, value);
  }

  public int getRecentIncomingsSize() {
    return (this.recentIncomings == null) ? 0 : this.recentIncomings.size();
  }

  public java.util.Iterator<FriendRequest> getRecentIncomingsIterator() {
    return (this.recentIncomings == null) ? null : this.recentIncomings.iterator();
  }

  public void addToRecentIncomings(FriendRequest elem) {
    if (this.recentIncomings == null) {
      this.recentIncomings = new java.util.ArrayList<FriendRequest>();
    }
    this.recentIncomings.add(elem);
  }

  public java.util.List<FriendRequest> getRecentIncomings() {
    return this.recentIncomings;
  }

  public FriendRequestsInfo setRecentIncomings(java.util.List<FriendRequest> recentIncomings) {
    this.recentIncomings = recentIncomings;
    return this;
  }

  public void unsetRecentIncomings() {
    this.recentIncomings = null;
  }

  /** Returns true if field recentIncomings is set (has been assigned a value) and false otherwise */
  public boolean isSetRecentIncomings() {
    return this.recentIncomings != null;
  }

  public void setRecentIncomingsIsSet(boolean value) {
    if (!value) {
      this.recentIncomings = null;
    }
  }

  public int getRecentOutgoingsSize() {
    return (this.recentOutgoings == null) ? 0 : this.recentOutgoings.size();
  }

  public java.util.Iterator<FriendRequest> getRecentOutgoingsIterator() {
    return (this.recentOutgoings == null) ? null : this.recentOutgoings.iterator();
  }

  public void addToRecentOutgoings(FriendRequest elem) {
    if (this.recentOutgoings == null) {
      this.recentOutgoings = new java.util.ArrayList<FriendRequest>();
    }
    this.recentOutgoings.add(elem);
  }

  public java.util.List<FriendRequest> getRecentOutgoings() {
    return this.recentOutgoings;
  }

  public FriendRequestsInfo setRecentOutgoings(java.util.List<FriendRequest> recentOutgoings) {
    this.recentOutgoings = recentOutgoings;
    return this;
  }

  public void unsetRecentOutgoings() {
    this.recentOutgoings = null;
  }

  /** Returns true if field recentOutgoings is set (has been assigned a value) and false otherwise */
  public boolean isSetRecentOutgoings() {
    return this.recentOutgoings != null;
  }

  public void setRecentOutgoingsIsSet(boolean value) {
    if (!value) {
      this.recentOutgoings = null;
    }
  }

  public int getTotalIncomingLimit() {
    return this.totalIncomingLimit;
  }

  public FriendRequestsInfo setTotalIncomingLimit(int totalIncomingLimit) {
    this.totalIncomingLimit = totalIncomingLimit;
    setTotalIncomingLimitIsSet(true);
    return this;
  }

  public void unsetTotalIncomingLimit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALINCOMINGLIMIT_ISSET_ID);
  }

  /** Returns true if field totalIncomingLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalIncomingLimit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALINCOMINGLIMIT_ISSET_ID);
  }

  public void setTotalIncomingLimitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALINCOMINGLIMIT_ISSET_ID, value);
  }

  public int getTotalOutgoingLimit() {
    return this.totalOutgoingLimit;
  }

  public FriendRequestsInfo setTotalOutgoingLimit(int totalOutgoingLimit) {
    this.totalOutgoingLimit = totalOutgoingLimit;
    setTotalOutgoingLimitIsSet(true);
    return this;
  }

  public void unsetTotalOutgoingLimit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALOUTGOINGLIMIT_ISSET_ID);
  }

  /** Returns true if field totalOutgoingLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalOutgoingLimit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALOUTGOINGLIMIT_ISSET_ID);
  }

  public void setTotalOutgoingLimitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALOUTGOINGLIMIT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TOTAL_INCOMING_COUNT:
      if (value == null) {
        unsetTotalIncomingCount();
      } else {
        setTotalIncomingCount((java.lang.Integer)value);
      }
      break;

    case TOTAL_OUTGOING_COUNT:
      if (value == null) {
        unsetTotalOutgoingCount();
      } else {
        setTotalOutgoingCount((java.lang.Integer)value);
      }
      break;

    case RECENT_INCOMINGS:
      if (value == null) {
        unsetRecentIncomings();
      } else {
        setRecentIncomings((java.util.List<FriendRequest>)value);
      }
      break;

    case RECENT_OUTGOINGS:
      if (value == null) {
        unsetRecentOutgoings();
      } else {
        setRecentOutgoings((java.util.List<FriendRequest>)value);
      }
      break;

    case TOTAL_INCOMING_LIMIT:
      if (value == null) {
        unsetTotalIncomingLimit();
      } else {
        setTotalIncomingLimit((java.lang.Integer)value);
      }
      break;

    case TOTAL_OUTGOING_LIMIT:
      if (value == null) {
        unsetTotalOutgoingLimit();
      } else {
        setTotalOutgoingLimit((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TOTAL_INCOMING_COUNT:
      return getTotalIncomingCount();

    case TOTAL_OUTGOING_COUNT:
      return getTotalOutgoingCount();

    case RECENT_INCOMINGS:
      return getRecentIncomings();

    case RECENT_OUTGOINGS:
      return getRecentOutgoings();

    case TOTAL_INCOMING_LIMIT:
      return getTotalIncomingLimit();

    case TOTAL_OUTGOING_LIMIT:
      return getTotalOutgoingLimit();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TOTAL_INCOMING_COUNT:
      return isSetTotalIncomingCount();
    case TOTAL_OUTGOING_COUNT:
      return isSetTotalOutgoingCount();
    case RECENT_INCOMINGS:
      return isSetRecentIncomings();
    case RECENT_OUTGOINGS:
      return isSetRecentOutgoings();
    case TOTAL_INCOMING_LIMIT:
      return isSetTotalIncomingLimit();
    case TOTAL_OUTGOING_LIMIT:
      return isSetTotalOutgoingLimit();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof FriendRequestsInfo)
      return this.equals((FriendRequestsInfo)that);
    return false;
  }

  public boolean equals(FriendRequestsInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_totalIncomingCount = true;
    boolean that_present_totalIncomingCount = true;
    if (this_present_totalIncomingCount || that_present_totalIncomingCount) {
      if (!(this_present_totalIncomingCount && that_present_totalIncomingCount))
        return false;
      if (this.totalIncomingCount != that.totalIncomingCount)
        return false;
    }

    boolean this_present_totalOutgoingCount = true;
    boolean that_present_totalOutgoingCount = true;
    if (this_present_totalOutgoingCount || that_present_totalOutgoingCount) {
      if (!(this_present_totalOutgoingCount && that_present_totalOutgoingCount))
        return false;
      if (this.totalOutgoingCount != that.totalOutgoingCount)
        return false;
    }

    boolean this_present_recentIncomings = true && this.isSetRecentIncomings();
    boolean that_present_recentIncomings = true && that.isSetRecentIncomings();
    if (this_present_recentIncomings || that_present_recentIncomings) {
      if (!(this_present_recentIncomings && that_present_recentIncomings))
        return false;
      if (!this.recentIncomings.equals(that.recentIncomings))
        return false;
    }

    boolean this_present_recentOutgoings = true && this.isSetRecentOutgoings();
    boolean that_present_recentOutgoings = true && that.isSetRecentOutgoings();
    if (this_present_recentOutgoings || that_present_recentOutgoings) {
      if (!(this_present_recentOutgoings && that_present_recentOutgoings))
        return false;
      if (!this.recentOutgoings.equals(that.recentOutgoings))
        return false;
    }

    boolean this_present_totalIncomingLimit = true;
    boolean that_present_totalIncomingLimit = true;
    if (this_present_totalIncomingLimit || that_present_totalIncomingLimit) {
      if (!(this_present_totalIncomingLimit && that_present_totalIncomingLimit))
        return false;
      if (this.totalIncomingLimit != that.totalIncomingLimit)
        return false;
    }

    boolean this_present_totalOutgoingLimit = true;
    boolean that_present_totalOutgoingLimit = true;
    if (this_present_totalOutgoingLimit || that_present_totalOutgoingLimit) {
      if (!(this_present_totalOutgoingLimit && that_present_totalOutgoingLimit))
        return false;
      if (this.totalOutgoingLimit != that.totalOutgoingLimit)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + totalIncomingCount;

    hashCode = hashCode * 8191 + totalOutgoingCount;

    hashCode = hashCode * 8191 + ((isSetRecentIncomings()) ? 131071 : 524287);
    if (isSetRecentIncomings())
      hashCode = hashCode * 8191 + recentIncomings.hashCode();

    hashCode = hashCode * 8191 + ((isSetRecentOutgoings()) ? 131071 : 524287);
    if (isSetRecentOutgoings())
      hashCode = hashCode * 8191 + recentOutgoings.hashCode();

    hashCode = hashCode * 8191 + totalIncomingLimit;

    hashCode = hashCode * 8191 + totalOutgoingLimit;

    return hashCode;
  }

  @Override
  public int compareTo(FriendRequestsInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTotalIncomingCount()).compareTo(other.isSetTotalIncomingCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalIncomingCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalIncomingCount, other.totalIncomingCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTotalOutgoingCount()).compareTo(other.isSetTotalOutgoingCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalOutgoingCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalOutgoingCount, other.totalOutgoingCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRecentIncomings()).compareTo(other.isSetRecentIncomings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecentIncomings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recentIncomings, other.recentIncomings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRecentOutgoings()).compareTo(other.isSetRecentOutgoings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecentOutgoings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recentOutgoings, other.recentOutgoings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTotalIncomingLimit()).compareTo(other.isSetTotalIncomingLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalIncomingLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalIncomingLimit, other.totalIncomingLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTotalOutgoingLimit()).compareTo(other.isSetTotalOutgoingLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalOutgoingLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalOutgoingLimit, other.totalOutgoingLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("FriendRequestsInfo(");
    boolean first = true;

    sb.append("totalIncomingCount:");
    sb.append(this.totalIncomingCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalOutgoingCount:");
    sb.append(this.totalOutgoingCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recentIncomings:");
    if (this.recentIncomings == null) {
      sb.append("null");
    } else {
      sb.append(this.recentIncomings);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recentOutgoings:");
    if (this.recentOutgoings == null) {
      sb.append("null");
    } else {
      sb.append(this.recentOutgoings);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalIncomingLimit:");
    sb.append(this.totalIncomingLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalOutgoingLimit:");
    sb.append(this.totalOutgoingLimit);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FriendRequestsInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FriendRequestsInfoStandardScheme getScheme() {
      return new FriendRequestsInfoStandardScheme();
    }
  }

  private static class FriendRequestsInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<FriendRequestsInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FriendRequestsInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOTAL_INCOMING_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalIncomingCount = iprot.readI32();
              struct.setTotalIncomingCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOTAL_OUTGOING_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalOutgoingCount = iprot.readI32();
              struct.setTotalOutgoingCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RECENT_INCOMINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list418 = iprot.readListBegin();
                struct.recentIncomings = new java.util.ArrayList<FriendRequest>(_list418.size);
                FriendRequest _elem419;
                for (int _i420 = 0; _i420 < _list418.size; ++_i420)
                {
                  _elem419 = new FriendRequest();
                  _elem419.read(iprot);
                  struct.recentIncomings.add(_elem419);
                }
                iprot.readListEnd();
              }
              struct.setRecentIncomingsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RECENT_OUTGOINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list421 = iprot.readListBegin();
                struct.recentOutgoings = new java.util.ArrayList<FriendRequest>(_list421.size);
                FriendRequest _elem422;
                for (int _i423 = 0; _i423 < _list421.size; ++_i423)
                {
                  _elem422 = new FriendRequest();
                  _elem422.read(iprot);
                  struct.recentOutgoings.add(_elem422);
                }
                iprot.readListEnd();
              }
              struct.setRecentOutgoingsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TOTAL_INCOMING_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalIncomingLimit = iprot.readI32();
              struct.setTotalIncomingLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TOTAL_OUTGOING_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalOutgoingLimit = iprot.readI32();
              struct.setTotalOutgoingLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FriendRequestsInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TOTAL_INCOMING_COUNT_FIELD_DESC);
      oprot.writeI32(struct.totalIncomingCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_OUTGOING_COUNT_FIELD_DESC);
      oprot.writeI32(struct.totalOutgoingCount);
      oprot.writeFieldEnd();
      if (struct.recentIncomings != null) {
        oprot.writeFieldBegin(RECENT_INCOMINGS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.recentIncomings.size()));
          for (FriendRequest _iter424 : struct.recentIncomings)
          {
            _iter424.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.recentOutgoings != null) {
        oprot.writeFieldBegin(RECENT_OUTGOINGS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.recentOutgoings.size()));
          for (FriendRequest _iter425 : struct.recentOutgoings)
          {
            _iter425.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_INCOMING_LIMIT_FIELD_DESC);
      oprot.writeI32(struct.totalIncomingLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_OUTGOING_LIMIT_FIELD_DESC);
      oprot.writeI32(struct.totalOutgoingLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FriendRequestsInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FriendRequestsInfoTupleScheme getScheme() {
      return new FriendRequestsInfoTupleScheme();
    }
  }

  private static class FriendRequestsInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<FriendRequestsInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FriendRequestsInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTotalIncomingCount()) {
        optionals.set(0);
      }
      if (struct.isSetTotalOutgoingCount()) {
        optionals.set(1);
      }
      if (struct.isSetRecentIncomings()) {
        optionals.set(2);
      }
      if (struct.isSetRecentOutgoings()) {
        optionals.set(3);
      }
      if (struct.isSetTotalIncomingLimit()) {
        optionals.set(4);
      }
      if (struct.isSetTotalOutgoingLimit()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetTotalIncomingCount()) {
        oprot.writeI32(struct.totalIncomingCount);
      }
      if (struct.isSetTotalOutgoingCount()) {
        oprot.writeI32(struct.totalOutgoingCount);
      }
      if (struct.isSetRecentIncomings()) {
        {
          oprot.writeI32(struct.recentIncomings.size());
          for (FriendRequest _iter426 : struct.recentIncomings)
          {
            _iter426.write(oprot);
          }
        }
      }
      if (struct.isSetRecentOutgoings()) {
        {
          oprot.writeI32(struct.recentOutgoings.size());
          for (FriendRequest _iter427 : struct.recentOutgoings)
          {
            _iter427.write(oprot);
          }
        }
      }
      if (struct.isSetTotalIncomingLimit()) {
        oprot.writeI32(struct.totalIncomingLimit);
      }
      if (struct.isSetTotalOutgoingLimit()) {
        oprot.writeI32(struct.totalOutgoingLimit);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FriendRequestsInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.totalIncomingCount = iprot.readI32();
        struct.setTotalIncomingCountIsSet(true);
      }
      if (incoming.get(1)) {
        struct.totalOutgoingCount = iprot.readI32();
        struct.setTotalOutgoingCountIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list428 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.recentIncomings = new java.util.ArrayList<FriendRequest>(_list428.size);
          FriendRequest _elem429;
          for (int _i430 = 0; _i430 < _list428.size; ++_i430)
          {
            _elem429 = new FriendRequest();
            _elem429.read(iprot);
            struct.recentIncomings.add(_elem429);
          }
        }
        struct.setRecentIncomingsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list431 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.recentOutgoings = new java.util.ArrayList<FriendRequest>(_list431.size);
          FriendRequest _elem432;
          for (int _i433 = 0; _i433 < _list431.size; ++_i433)
          {
            _elem432 = new FriendRequest();
            _elem432.read(iprot);
            struct.recentOutgoings.add(_elem432);
          }
        }
        struct.setRecentOutgoingsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.totalIncomingLimit = iprot.readI32();
        struct.setTotalIncomingLimitIsSet(true);
      }
      if (incoming.get(5)) {
        struct.totalOutgoingLimit = iprot.readI32();
        struct.setTotalOutgoingLimitIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

