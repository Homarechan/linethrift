/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2019-09-28")
public class SuggestDictionaryRevisions implements org.apache.thrift.TBase<SuggestDictionaryRevisions, SuggestDictionaryRevisions._Fields>, java.io.Serializable, Cloneable, Comparable<SuggestDictionaryRevisions> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SuggestDictionaryRevisions");

  private static final org.apache.thrift.protocol.TField ITEM_REVISION_FIELD_DESC = new org.apache.thrift.protocol.TField("itemRevision", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TAG_REVISIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("tagRevisions", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SuggestDictionaryRevisionsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SuggestDictionaryRevisionsTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable SuggestItemDictionaryRevision itemRevision; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<SuggestTagDictionaryRevision> tagRevisions; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ITEM_REVISION((short)1, "itemRevision"),
    TAG_REVISIONS((short)2, "tagRevisions");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ITEM_REVISION
          return ITEM_REVISION;
        case 2: // TAG_REVISIONS
          return TAG_REVISIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ITEM_REVISION, new org.apache.thrift.meta_data.FieldMetaData("itemRevision", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SuggestItemDictionaryRevision.class)));
    tmpMap.put(_Fields.TAG_REVISIONS, new org.apache.thrift.meta_data.FieldMetaData("tagRevisions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SuggestTagDictionaryRevision.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SuggestDictionaryRevisions.class, metaDataMap);
  }

  public SuggestDictionaryRevisions() {
  }

  public SuggestDictionaryRevisions(
    SuggestItemDictionaryRevision itemRevision,
    java.util.List<SuggestTagDictionaryRevision> tagRevisions)
  {
    this();
    this.itemRevision = itemRevision;
    this.tagRevisions = tagRevisions;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SuggestDictionaryRevisions(SuggestDictionaryRevisions other) {
    if (other.isSetItemRevision()) {
      this.itemRevision = new SuggestItemDictionaryRevision(other.itemRevision);
    }
    if (other.isSetTagRevisions()) {
      java.util.List<SuggestTagDictionaryRevision> __this__tagRevisions = new java.util.ArrayList<SuggestTagDictionaryRevision>(other.tagRevisions.size());
      for (SuggestTagDictionaryRevision other_element : other.tagRevisions) {
        __this__tagRevisions.add(new SuggestTagDictionaryRevision(other_element));
      }
      this.tagRevisions = __this__tagRevisions;
    }
  }

  public SuggestDictionaryRevisions deepCopy() {
    return new SuggestDictionaryRevisions(this);
  }

  @Override
  public void clear() {
    this.itemRevision = null;
    this.tagRevisions = null;
  }

  @org.apache.thrift.annotation.Nullable
  public SuggestItemDictionaryRevision getItemRevision() {
    return this.itemRevision;
  }

  public SuggestDictionaryRevisions setItemRevision(@org.apache.thrift.annotation.Nullable SuggestItemDictionaryRevision itemRevision) {
    this.itemRevision = itemRevision;
    return this;
  }

  public void unsetItemRevision() {
    this.itemRevision = null;
  }

  /** Returns true if field itemRevision is set (has been assigned a value) and false otherwise */
  public boolean isSetItemRevision() {
    return this.itemRevision != null;
  }

  public void setItemRevisionIsSet(boolean value) {
    if (!value) {
      this.itemRevision = null;
    }
  }

  public int getTagRevisionsSize() {
    return (this.tagRevisions == null) ? 0 : this.tagRevisions.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<SuggestTagDictionaryRevision> getTagRevisionsIterator() {
    return (this.tagRevisions == null) ? null : this.tagRevisions.iterator();
  }

  public void addToTagRevisions(SuggestTagDictionaryRevision elem) {
    if (this.tagRevisions == null) {
      this.tagRevisions = new java.util.ArrayList<SuggestTagDictionaryRevision>();
    }
    this.tagRevisions.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<SuggestTagDictionaryRevision> getTagRevisions() {
    return this.tagRevisions;
  }

  public SuggestDictionaryRevisions setTagRevisions(@org.apache.thrift.annotation.Nullable java.util.List<SuggestTagDictionaryRevision> tagRevisions) {
    this.tagRevisions = tagRevisions;
    return this;
  }

  public void unsetTagRevisions() {
    this.tagRevisions = null;
  }

  /** Returns true if field tagRevisions is set (has been assigned a value) and false otherwise */
  public boolean isSetTagRevisions() {
    return this.tagRevisions != null;
  }

  public void setTagRevisionsIsSet(boolean value) {
    if (!value) {
      this.tagRevisions = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ITEM_REVISION:
      if (value == null) {
        unsetItemRevision();
      } else {
        setItemRevision((SuggestItemDictionaryRevision)value);
      }
      break;

    case TAG_REVISIONS:
      if (value == null) {
        unsetTagRevisions();
      } else {
        setTagRevisions((java.util.List<SuggestTagDictionaryRevision>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ITEM_REVISION:
      return getItemRevision();

    case TAG_REVISIONS:
      return getTagRevisions();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ITEM_REVISION:
      return isSetItemRevision();
    case TAG_REVISIONS:
      return isSetTagRevisions();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SuggestDictionaryRevisions)
      return this.equals((SuggestDictionaryRevisions)that);
    return false;
  }

  public boolean equals(SuggestDictionaryRevisions that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_itemRevision = true && this.isSetItemRevision();
    boolean that_present_itemRevision = true && that.isSetItemRevision();
    if (this_present_itemRevision || that_present_itemRevision) {
      if (!(this_present_itemRevision && that_present_itemRevision))
        return false;
      if (!this.itemRevision.equals(that.itemRevision))
        return false;
    }

    boolean this_present_tagRevisions = true && this.isSetTagRevisions();
    boolean that_present_tagRevisions = true && that.isSetTagRevisions();
    if (this_present_tagRevisions || that_present_tagRevisions) {
      if (!(this_present_tagRevisions && that_present_tagRevisions))
        return false;
      if (!this.tagRevisions.equals(that.tagRevisions))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetItemRevision()) ? 131071 : 524287);
    if (isSetItemRevision())
      hashCode = hashCode * 8191 + itemRevision.hashCode();

    hashCode = hashCode * 8191 + ((isSetTagRevisions()) ? 131071 : 524287);
    if (isSetTagRevisions())
      hashCode = hashCode * 8191 + tagRevisions.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SuggestDictionaryRevisions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetItemRevision()).compareTo(other.isSetItemRevision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemRevision()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemRevision, other.itemRevision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTagRevisions()).compareTo(other.isSetTagRevisions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagRevisions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagRevisions, other.tagRevisions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SuggestDictionaryRevisions(");
    boolean first = true;

    sb.append("itemRevision:");
    if (this.itemRevision == null) {
      sb.append("null");
    } else {
      sb.append(this.itemRevision);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tagRevisions:");
    if (this.tagRevisions == null) {
      sb.append("null");
    } else {
      sb.append(this.tagRevisions);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (itemRevision != null) {
      itemRevision.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SuggestDictionaryRevisionsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SuggestDictionaryRevisionsStandardScheme getScheme() {
      return new SuggestDictionaryRevisionsStandardScheme();
    }
  }

  private static class SuggestDictionaryRevisionsStandardScheme extends org.apache.thrift.scheme.StandardScheme<SuggestDictionaryRevisions> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SuggestDictionaryRevisions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ITEM_REVISION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.itemRevision = new SuggestItemDictionaryRevision();
              struct.itemRevision.read(iprot);
              struct.setItemRevisionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TAG_REVISIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list458 = iprot.readListBegin();
                struct.tagRevisions = new java.util.ArrayList<SuggestTagDictionaryRevision>(_list458.size);
                @org.apache.thrift.annotation.Nullable SuggestTagDictionaryRevision _elem459;
                for (int _i460 = 0; _i460 < _list458.size; ++_i460)
                {
                  _elem459 = new SuggestTagDictionaryRevision();
                  _elem459.read(iprot);
                  struct.tagRevisions.add(_elem459);
                }
                iprot.readListEnd();
              }
              struct.setTagRevisionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SuggestDictionaryRevisions struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.itemRevision != null) {
        oprot.writeFieldBegin(ITEM_REVISION_FIELD_DESC);
        struct.itemRevision.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.tagRevisions != null) {
        oprot.writeFieldBegin(TAG_REVISIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tagRevisions.size()));
          for (SuggestTagDictionaryRevision _iter461 : struct.tagRevisions)
          {
            _iter461.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SuggestDictionaryRevisionsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SuggestDictionaryRevisionsTupleScheme getScheme() {
      return new SuggestDictionaryRevisionsTupleScheme();
    }
  }

  private static class SuggestDictionaryRevisionsTupleScheme extends org.apache.thrift.scheme.TupleScheme<SuggestDictionaryRevisions> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SuggestDictionaryRevisions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetItemRevision()) {
        optionals.set(0);
      }
      if (struct.isSetTagRevisions()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetItemRevision()) {
        struct.itemRevision.write(oprot);
      }
      if (struct.isSetTagRevisions()) {
        {
          oprot.writeI32(struct.tagRevisions.size());
          for (SuggestTagDictionaryRevision _iter462 : struct.tagRevisions)
          {
            _iter462.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SuggestDictionaryRevisions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.itemRevision = new SuggestItemDictionaryRevision();
        struct.itemRevision.read(iprot);
        struct.setItemRevisionIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list463 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tagRevisions = new java.util.ArrayList<SuggestTagDictionaryRevision>(_list463.size);
          @org.apache.thrift.annotation.Nullable SuggestTagDictionaryRevision _elem464;
          for (int _i465 = 0; _i465 < _list463.size; ++_i465)
          {
            _elem464 = new SuggestTagDictionaryRevision();
            _elem464.read(iprot);
            struct.tagRevisions.add(_elem464);
          }
        }
        struct.setTagRevisionsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

