/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-17")
public class SearchResultItem implements org.apache.thrift.TBase<SearchResultItem, SearchResultItem._Fields>, java.io.Serializable, Cloneable, Comparable<SearchResultItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SearchResultItem");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ITEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ItemType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("item", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SUB1_FIELD_DESC = new org.apache.thrift.protocol.TField("sub1", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SUB2_FIELD_DESC = new org.apache.thrift.protocol.TField("sub2", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ICON_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("iconUrl", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TITLE_LINK_FIELD_DESC = new org.apache.thrift.protocol.TField("titleLink", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ICON_LINK_FIELD_DESC = new org.apache.thrift.protocol.TField("iconLink", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DISPLAY_TEMPLATE_FIELD_DESC = new org.apache.thrift.protocol.TField("displayTemplate", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ADDITIONAL_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("additionalInfo", org.apache.thrift.protocol.TType.LIST, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SearchResultItemStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SearchResultItemTupleSchemeFactory();

  public java.lang.String id; // required
  public int ItemType; // required
  public SearchItemUnion item; // required
  public java.lang.String title; // required
  public java.lang.String sub1; // required
  public java.lang.String sub2; // required
  public java.lang.String iconUrl; // required
  public java.lang.String titleLink; // required
  public java.lang.String iconLink; // required
  public java.lang.String displayTemplate; // required
  public java.util.List<AdditionalInfoItem> additionalInfo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    ITEM_TYPE((short)2, "ItemType"),
    ITEM((short)3, "item"),
    TITLE((short)4, "title"),
    SUB1((short)5, "sub1"),
    SUB2((short)6, "sub2"),
    ICON_URL((short)7, "iconUrl"),
    TITLE_LINK((short)8, "titleLink"),
    ICON_LINK((short)9, "iconLink"),
    DISPLAY_TEMPLATE((short)10, "displayTemplate"),
    ADDITIONAL_INFO((short)11, "additionalInfo");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // ITEM_TYPE
          return ITEM_TYPE;
        case 3: // ITEM
          return ITEM;
        case 4: // TITLE
          return TITLE;
        case 5: // SUB1
          return SUB1;
        case 6: // SUB2
          return SUB2;
        case 7: // ICON_URL
          return ICON_URL;
        case 8: // TITLE_LINK
          return TITLE_LINK;
        case 9: // ICON_LINK
          return ICON_LINK;
        case 10: // DISPLAY_TEMPLATE
          return DISPLAY_TEMPLATE;
        case 11: // ADDITIONAL_INFO
          return ADDITIONAL_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ITEMTYPE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ITEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("ItemType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ITEM, new org.apache.thrift.meta_data.FieldMetaData("item", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchItemUnion.class)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUB1, new org.apache.thrift.meta_data.FieldMetaData("sub1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUB2, new org.apache.thrift.meta_data.FieldMetaData("sub2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ICON_URL, new org.apache.thrift.meta_data.FieldMetaData("iconUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE_LINK, new org.apache.thrift.meta_data.FieldMetaData("titleLink", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ICON_LINK, new org.apache.thrift.meta_data.FieldMetaData("iconLink", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISPLAY_TEMPLATE, new org.apache.thrift.meta_data.FieldMetaData("displayTemplate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDITIONAL_INFO, new org.apache.thrift.meta_data.FieldMetaData("additionalInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdditionalInfoItem.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SearchResultItem.class, metaDataMap);
  }

  public SearchResultItem() {
  }

  public SearchResultItem(
    java.lang.String id,
    int ItemType,
    SearchItemUnion item,
    java.lang.String title,
    java.lang.String sub1,
    java.lang.String sub2,
    java.lang.String iconUrl,
    java.lang.String titleLink,
    java.lang.String iconLink,
    java.lang.String displayTemplate,
    java.util.List<AdditionalInfoItem> additionalInfo)
  {
    this();
    this.id = id;
    this.ItemType = ItemType;
    setItemTypeIsSet(true);
    this.item = item;
    this.title = title;
    this.sub1 = sub1;
    this.sub2 = sub2;
    this.iconUrl = iconUrl;
    this.titleLink = titleLink;
    this.iconLink = iconLink;
    this.displayTemplate = displayTemplate;
    this.additionalInfo = additionalInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SearchResultItem(SearchResultItem other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    this.ItemType = other.ItemType;
    if (other.isSetItem()) {
      this.item = new SearchItemUnion(other.item);
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetSub1()) {
      this.sub1 = other.sub1;
    }
    if (other.isSetSub2()) {
      this.sub2 = other.sub2;
    }
    if (other.isSetIconUrl()) {
      this.iconUrl = other.iconUrl;
    }
    if (other.isSetTitleLink()) {
      this.titleLink = other.titleLink;
    }
    if (other.isSetIconLink()) {
      this.iconLink = other.iconLink;
    }
    if (other.isSetDisplayTemplate()) {
      this.displayTemplate = other.displayTemplate;
    }
    if (other.isSetAdditionalInfo()) {
      java.util.List<AdditionalInfoItem> __this__additionalInfo = new java.util.ArrayList<AdditionalInfoItem>(other.additionalInfo.size());
      for (AdditionalInfoItem other_element : other.additionalInfo) {
        __this__additionalInfo.add(new AdditionalInfoItem(other_element));
      }
      this.additionalInfo = __this__additionalInfo;
    }
  }

  public SearchResultItem deepCopy() {
    return new SearchResultItem(this);
  }

  @Override
  public void clear() {
    this.id = null;
    setItemTypeIsSet(false);
    this.ItemType = 0;
    this.item = null;
    this.title = null;
    this.sub1 = null;
    this.sub2 = null;
    this.iconUrl = null;
    this.titleLink = null;
    this.iconLink = null;
    this.displayTemplate = null;
    this.additionalInfo = null;
  }

  public java.lang.String getId() {
    return this.id;
  }

  public SearchResultItem setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public int getItemType() {
    return this.ItemType;
  }

  public SearchResultItem setItemType(int ItemType) {
    this.ItemType = ItemType;
    setItemTypeIsSet(true);
    return this;
  }

  public void unsetItemType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ITEMTYPE_ISSET_ID);
  }

  /** Returns true if field ItemType is set (has been assigned a value) and false otherwise */
  public boolean isSetItemType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ITEMTYPE_ISSET_ID);
  }

  public void setItemTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ITEMTYPE_ISSET_ID, value);
  }

  public SearchItemUnion getItem() {
    return this.item;
  }

  public SearchResultItem setItem(SearchItemUnion item) {
    this.item = item;
    return this;
  }

  public void unsetItem() {
    this.item = null;
  }

  /** Returns true if field item is set (has been assigned a value) and false otherwise */
  public boolean isSetItem() {
    return this.item != null;
  }

  public void setItemIsSet(boolean value) {
    if (!value) {
      this.item = null;
    }
  }

  public java.lang.String getTitle() {
    return this.title;
  }

  public SearchResultItem setTitle(java.lang.String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public java.lang.String getSub1() {
    return this.sub1;
  }

  public SearchResultItem setSub1(java.lang.String sub1) {
    this.sub1 = sub1;
    return this;
  }

  public void unsetSub1() {
    this.sub1 = null;
  }

  /** Returns true if field sub1 is set (has been assigned a value) and false otherwise */
  public boolean isSetSub1() {
    return this.sub1 != null;
  }

  public void setSub1IsSet(boolean value) {
    if (!value) {
      this.sub1 = null;
    }
  }

  public java.lang.String getSub2() {
    return this.sub2;
  }

  public SearchResultItem setSub2(java.lang.String sub2) {
    this.sub2 = sub2;
    return this;
  }

  public void unsetSub2() {
    this.sub2 = null;
  }

  /** Returns true if field sub2 is set (has been assigned a value) and false otherwise */
  public boolean isSetSub2() {
    return this.sub2 != null;
  }

  public void setSub2IsSet(boolean value) {
    if (!value) {
      this.sub2 = null;
    }
  }

  public java.lang.String getIconUrl() {
    return this.iconUrl;
  }

  public SearchResultItem setIconUrl(java.lang.String iconUrl) {
    this.iconUrl = iconUrl;
    return this;
  }

  public void unsetIconUrl() {
    this.iconUrl = null;
  }

  /** Returns true if field iconUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetIconUrl() {
    return this.iconUrl != null;
  }

  public void setIconUrlIsSet(boolean value) {
    if (!value) {
      this.iconUrl = null;
    }
  }

  public java.lang.String getTitleLink() {
    return this.titleLink;
  }

  public SearchResultItem setTitleLink(java.lang.String titleLink) {
    this.titleLink = titleLink;
    return this;
  }

  public void unsetTitleLink() {
    this.titleLink = null;
  }

  /** Returns true if field titleLink is set (has been assigned a value) and false otherwise */
  public boolean isSetTitleLink() {
    return this.titleLink != null;
  }

  public void setTitleLinkIsSet(boolean value) {
    if (!value) {
      this.titleLink = null;
    }
  }

  public java.lang.String getIconLink() {
    return this.iconLink;
  }

  public SearchResultItem setIconLink(java.lang.String iconLink) {
    this.iconLink = iconLink;
    return this;
  }

  public void unsetIconLink() {
    this.iconLink = null;
  }

  /** Returns true if field iconLink is set (has been assigned a value) and false otherwise */
  public boolean isSetIconLink() {
    return this.iconLink != null;
  }

  public void setIconLinkIsSet(boolean value) {
    if (!value) {
      this.iconLink = null;
    }
  }

  public java.lang.String getDisplayTemplate() {
    return this.displayTemplate;
  }

  public SearchResultItem setDisplayTemplate(java.lang.String displayTemplate) {
    this.displayTemplate = displayTemplate;
    return this;
  }

  public void unsetDisplayTemplate() {
    this.displayTemplate = null;
  }

  /** Returns true if field displayTemplate is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayTemplate() {
    return this.displayTemplate != null;
  }

  public void setDisplayTemplateIsSet(boolean value) {
    if (!value) {
      this.displayTemplate = null;
    }
  }

  public int getAdditionalInfoSize() {
    return (this.additionalInfo == null) ? 0 : this.additionalInfo.size();
  }

  public java.util.Iterator<AdditionalInfoItem> getAdditionalInfoIterator() {
    return (this.additionalInfo == null) ? null : this.additionalInfo.iterator();
  }

  public void addToAdditionalInfo(AdditionalInfoItem elem) {
    if (this.additionalInfo == null) {
      this.additionalInfo = new java.util.ArrayList<AdditionalInfoItem>();
    }
    this.additionalInfo.add(elem);
  }

  public java.util.List<AdditionalInfoItem> getAdditionalInfo() {
    return this.additionalInfo;
  }

  public SearchResultItem setAdditionalInfo(java.util.List<AdditionalInfoItem> additionalInfo) {
    this.additionalInfo = additionalInfo;
    return this;
  }

  public void unsetAdditionalInfo() {
    this.additionalInfo = null;
  }

  /** Returns true if field additionalInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetAdditionalInfo() {
    return this.additionalInfo != null;
  }

  public void setAdditionalInfoIsSet(boolean value) {
    if (!value) {
      this.additionalInfo = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case ITEM_TYPE:
      if (value == null) {
        unsetItemType();
      } else {
        setItemType((java.lang.Integer)value);
      }
      break;

    case ITEM:
      if (value == null) {
        unsetItem();
      } else {
        setItem((SearchItemUnion)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((java.lang.String)value);
      }
      break;

    case SUB1:
      if (value == null) {
        unsetSub1();
      } else {
        setSub1((java.lang.String)value);
      }
      break;

    case SUB2:
      if (value == null) {
        unsetSub2();
      } else {
        setSub2((java.lang.String)value);
      }
      break;

    case ICON_URL:
      if (value == null) {
        unsetIconUrl();
      } else {
        setIconUrl((java.lang.String)value);
      }
      break;

    case TITLE_LINK:
      if (value == null) {
        unsetTitleLink();
      } else {
        setTitleLink((java.lang.String)value);
      }
      break;

    case ICON_LINK:
      if (value == null) {
        unsetIconLink();
      } else {
        setIconLink((java.lang.String)value);
      }
      break;

    case DISPLAY_TEMPLATE:
      if (value == null) {
        unsetDisplayTemplate();
      } else {
        setDisplayTemplate((java.lang.String)value);
      }
      break;

    case ADDITIONAL_INFO:
      if (value == null) {
        unsetAdditionalInfo();
      } else {
        setAdditionalInfo((java.util.List<AdditionalInfoItem>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case ITEM_TYPE:
      return getItemType();

    case ITEM:
      return getItem();

    case TITLE:
      return getTitle();

    case SUB1:
      return getSub1();

    case SUB2:
      return getSub2();

    case ICON_URL:
      return getIconUrl();

    case TITLE_LINK:
      return getTitleLink();

    case ICON_LINK:
      return getIconLink();

    case DISPLAY_TEMPLATE:
      return getDisplayTemplate();

    case ADDITIONAL_INFO:
      return getAdditionalInfo();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case ITEM_TYPE:
      return isSetItemType();
    case ITEM:
      return isSetItem();
    case TITLE:
      return isSetTitle();
    case SUB1:
      return isSetSub1();
    case SUB2:
      return isSetSub2();
    case ICON_URL:
      return isSetIconUrl();
    case TITLE_LINK:
      return isSetTitleLink();
    case ICON_LINK:
      return isSetIconLink();
    case DISPLAY_TEMPLATE:
      return isSetDisplayTemplate();
    case ADDITIONAL_INFO:
      return isSetAdditionalInfo();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SearchResultItem)
      return this.equals((SearchResultItem)that);
    return false;
  }

  public boolean equals(SearchResultItem that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_ItemType = true;
    boolean that_present_ItemType = true;
    if (this_present_ItemType || that_present_ItemType) {
      if (!(this_present_ItemType && that_present_ItemType))
        return false;
      if (this.ItemType != that.ItemType)
        return false;
    }

    boolean this_present_item = true && this.isSetItem();
    boolean that_present_item = true && that.isSetItem();
    if (this_present_item || that_present_item) {
      if (!(this_present_item && that_present_item))
        return false;
      if (!this.item.equals(that.item))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_sub1 = true && this.isSetSub1();
    boolean that_present_sub1 = true && that.isSetSub1();
    if (this_present_sub1 || that_present_sub1) {
      if (!(this_present_sub1 && that_present_sub1))
        return false;
      if (!this.sub1.equals(that.sub1))
        return false;
    }

    boolean this_present_sub2 = true && this.isSetSub2();
    boolean that_present_sub2 = true && that.isSetSub2();
    if (this_present_sub2 || that_present_sub2) {
      if (!(this_present_sub2 && that_present_sub2))
        return false;
      if (!this.sub2.equals(that.sub2))
        return false;
    }

    boolean this_present_iconUrl = true && this.isSetIconUrl();
    boolean that_present_iconUrl = true && that.isSetIconUrl();
    if (this_present_iconUrl || that_present_iconUrl) {
      if (!(this_present_iconUrl && that_present_iconUrl))
        return false;
      if (!this.iconUrl.equals(that.iconUrl))
        return false;
    }

    boolean this_present_titleLink = true && this.isSetTitleLink();
    boolean that_present_titleLink = true && that.isSetTitleLink();
    if (this_present_titleLink || that_present_titleLink) {
      if (!(this_present_titleLink && that_present_titleLink))
        return false;
      if (!this.titleLink.equals(that.titleLink))
        return false;
    }

    boolean this_present_iconLink = true && this.isSetIconLink();
    boolean that_present_iconLink = true && that.isSetIconLink();
    if (this_present_iconLink || that_present_iconLink) {
      if (!(this_present_iconLink && that_present_iconLink))
        return false;
      if (!this.iconLink.equals(that.iconLink))
        return false;
    }

    boolean this_present_displayTemplate = true && this.isSetDisplayTemplate();
    boolean that_present_displayTemplate = true && that.isSetDisplayTemplate();
    if (this_present_displayTemplate || that_present_displayTemplate) {
      if (!(this_present_displayTemplate && that_present_displayTemplate))
        return false;
      if (!this.displayTemplate.equals(that.displayTemplate))
        return false;
    }

    boolean this_present_additionalInfo = true && this.isSetAdditionalInfo();
    boolean that_present_additionalInfo = true && that.isSetAdditionalInfo();
    if (this_present_additionalInfo || that_present_additionalInfo) {
      if (!(this_present_additionalInfo && that_present_additionalInfo))
        return false;
      if (!this.additionalInfo.equals(that.additionalInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ItemType;

    hashCode = hashCode * 8191 + ((isSetItem()) ? 131071 : 524287);
    if (isSetItem())
      hashCode = hashCode * 8191 + item.hashCode();

    hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
    if (isSetTitle())
      hashCode = hashCode * 8191 + title.hashCode();

    hashCode = hashCode * 8191 + ((isSetSub1()) ? 131071 : 524287);
    if (isSetSub1())
      hashCode = hashCode * 8191 + sub1.hashCode();

    hashCode = hashCode * 8191 + ((isSetSub2()) ? 131071 : 524287);
    if (isSetSub2())
      hashCode = hashCode * 8191 + sub2.hashCode();

    hashCode = hashCode * 8191 + ((isSetIconUrl()) ? 131071 : 524287);
    if (isSetIconUrl())
      hashCode = hashCode * 8191 + iconUrl.hashCode();

    hashCode = hashCode * 8191 + ((isSetTitleLink()) ? 131071 : 524287);
    if (isSetTitleLink())
      hashCode = hashCode * 8191 + titleLink.hashCode();

    hashCode = hashCode * 8191 + ((isSetIconLink()) ? 131071 : 524287);
    if (isSetIconLink())
      hashCode = hashCode * 8191 + iconLink.hashCode();

    hashCode = hashCode * 8191 + ((isSetDisplayTemplate()) ? 131071 : 524287);
    if (isSetDisplayTemplate())
      hashCode = hashCode * 8191 + displayTemplate.hashCode();

    hashCode = hashCode * 8191 + ((isSetAdditionalInfo()) ? 131071 : 524287);
    if (isSetAdditionalInfo())
      hashCode = hashCode * 8191 + additionalInfo.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SearchResultItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetItemType()).compareTo(other.isSetItemType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ItemType, other.ItemType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetItem()).compareTo(other.isSetItem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item, other.item);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSub1()).compareTo(other.isSetSub1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSub1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sub1, other.sub1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSub2()).compareTo(other.isSetSub2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSub2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sub2, other.sub2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIconUrl()).compareTo(other.isSetIconUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIconUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iconUrl, other.iconUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTitleLink()).compareTo(other.isSetTitleLink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitleLink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.titleLink, other.titleLink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIconLink()).compareTo(other.isSetIconLink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIconLink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iconLink, other.iconLink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDisplayTemplate()).compareTo(other.isSetDisplayTemplate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayTemplate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayTemplate, other.displayTemplate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAdditionalInfo()).compareTo(other.isSetAdditionalInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdditionalInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.additionalInfo, other.additionalInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SearchResultItem(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ItemType:");
    sb.append(this.ItemType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("item:");
    if (this.item == null) {
      sb.append("null");
    } else {
      sb.append(this.item);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sub1:");
    if (this.sub1 == null) {
      sb.append("null");
    } else {
      sb.append(this.sub1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sub2:");
    if (this.sub2 == null) {
      sb.append("null");
    } else {
      sb.append(this.sub2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("iconUrl:");
    if (this.iconUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.iconUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("titleLink:");
    if (this.titleLink == null) {
      sb.append("null");
    } else {
      sb.append(this.titleLink);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("iconLink:");
    if (this.iconLink == null) {
      sb.append("null");
    } else {
      sb.append(this.iconLink);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("displayTemplate:");
    if (this.displayTemplate == null) {
      sb.append("null");
    } else {
      sb.append(this.displayTemplate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("additionalInfo:");
    if (this.additionalInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.additionalInfo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (item != null) {
      item.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SearchResultItemStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SearchResultItemStandardScheme getScheme() {
      return new SearchResultItemStandardScheme();
    }
  }

  private static class SearchResultItemStandardScheme extends org.apache.thrift.scheme.StandardScheme<SearchResultItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SearchResultItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ITEM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ItemType = iprot.readI32();
              struct.setItemTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ITEM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.item = new SearchItemUnion();
              struct.item.read(iprot);
              struct.setItemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SUB1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sub1 = iprot.readString();
              struct.setSub1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SUB2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sub2 = iprot.readString();
              struct.setSub2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ICON_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.iconUrl = iprot.readString();
              struct.setIconUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TITLE_LINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.titleLink = iprot.readString();
              struct.setTitleLinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ICON_LINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.iconLink = iprot.readString();
              struct.setIconLinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DISPLAY_TEMPLATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.displayTemplate = iprot.readString();
              struct.setDisplayTemplateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ADDITIONAL_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list118 = iprot.readListBegin();
                struct.additionalInfo = new java.util.ArrayList<AdditionalInfoItem>(_list118.size);
                AdditionalInfoItem _elem119;
                for (int _i120 = 0; _i120 < _list118.size; ++_i120)
                {
                  _elem119 = new AdditionalInfoItem();
                  _elem119.read(iprot);
                  struct.additionalInfo.add(_elem119);
                }
                iprot.readListEnd();
              }
              struct.setAdditionalInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SearchResultItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ITEM_TYPE_FIELD_DESC);
      oprot.writeI32(struct.ItemType);
      oprot.writeFieldEnd();
      if (struct.item != null) {
        oprot.writeFieldBegin(ITEM_FIELD_DESC);
        struct.item.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.sub1 != null) {
        oprot.writeFieldBegin(SUB1_FIELD_DESC);
        oprot.writeString(struct.sub1);
        oprot.writeFieldEnd();
      }
      if (struct.sub2 != null) {
        oprot.writeFieldBegin(SUB2_FIELD_DESC);
        oprot.writeString(struct.sub2);
        oprot.writeFieldEnd();
      }
      if (struct.iconUrl != null) {
        oprot.writeFieldBegin(ICON_URL_FIELD_DESC);
        oprot.writeString(struct.iconUrl);
        oprot.writeFieldEnd();
      }
      if (struct.titleLink != null) {
        oprot.writeFieldBegin(TITLE_LINK_FIELD_DESC);
        oprot.writeString(struct.titleLink);
        oprot.writeFieldEnd();
      }
      if (struct.iconLink != null) {
        oprot.writeFieldBegin(ICON_LINK_FIELD_DESC);
        oprot.writeString(struct.iconLink);
        oprot.writeFieldEnd();
      }
      if (struct.displayTemplate != null) {
        oprot.writeFieldBegin(DISPLAY_TEMPLATE_FIELD_DESC);
        oprot.writeString(struct.displayTemplate);
        oprot.writeFieldEnd();
      }
      if (struct.additionalInfo != null) {
        oprot.writeFieldBegin(ADDITIONAL_INFO_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.additionalInfo.size()));
          for (AdditionalInfoItem _iter121 : struct.additionalInfo)
          {
            _iter121.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SearchResultItemTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SearchResultItemTupleScheme getScheme() {
      return new SearchResultItemTupleScheme();
    }
  }

  private static class SearchResultItemTupleScheme extends org.apache.thrift.scheme.TupleScheme<SearchResultItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SearchResultItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetItemType()) {
        optionals.set(1);
      }
      if (struct.isSetItem()) {
        optionals.set(2);
      }
      if (struct.isSetTitle()) {
        optionals.set(3);
      }
      if (struct.isSetSub1()) {
        optionals.set(4);
      }
      if (struct.isSetSub2()) {
        optionals.set(5);
      }
      if (struct.isSetIconUrl()) {
        optionals.set(6);
      }
      if (struct.isSetTitleLink()) {
        optionals.set(7);
      }
      if (struct.isSetIconLink()) {
        optionals.set(8);
      }
      if (struct.isSetDisplayTemplate()) {
        optionals.set(9);
      }
      if (struct.isSetAdditionalInfo()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetItemType()) {
        oprot.writeI32(struct.ItemType);
      }
      if (struct.isSetItem()) {
        struct.item.write(oprot);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetSub1()) {
        oprot.writeString(struct.sub1);
      }
      if (struct.isSetSub2()) {
        oprot.writeString(struct.sub2);
      }
      if (struct.isSetIconUrl()) {
        oprot.writeString(struct.iconUrl);
      }
      if (struct.isSetTitleLink()) {
        oprot.writeString(struct.titleLink);
      }
      if (struct.isSetIconLink()) {
        oprot.writeString(struct.iconLink);
      }
      if (struct.isSetDisplayTemplate()) {
        oprot.writeString(struct.displayTemplate);
      }
      if (struct.isSetAdditionalInfo()) {
        {
          oprot.writeI32(struct.additionalInfo.size());
          for (AdditionalInfoItem _iter122 : struct.additionalInfo)
          {
            _iter122.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SearchResultItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ItemType = iprot.readI32();
        struct.setItemTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.item = new SearchItemUnion();
        struct.item.read(iprot);
        struct.setItemIsSet(true);
      }
      if (incoming.get(3)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sub1 = iprot.readString();
        struct.setSub1IsSet(true);
      }
      if (incoming.get(5)) {
        struct.sub2 = iprot.readString();
        struct.setSub2IsSet(true);
      }
      if (incoming.get(6)) {
        struct.iconUrl = iprot.readString();
        struct.setIconUrlIsSet(true);
      }
      if (incoming.get(7)) {
        struct.titleLink = iprot.readString();
        struct.setTitleLinkIsSet(true);
      }
      if (incoming.get(8)) {
        struct.iconLink = iprot.readString();
        struct.setIconLinkIsSet(true);
      }
      if (incoming.get(9)) {
        struct.displayTemplate = iprot.readString();
        struct.setDisplayTemplateIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list123 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.additionalInfo = new java.util.ArrayList<AdditionalInfoItem>(_list123.size);
          AdditionalInfoItem _elem124;
          for (int _i125 = 0; _i125 < _list123.size; ++_i125)
          {
            _elem124 = new AdditionalInfoItem();
            _elem124.read(iprot);
            struct.additionalInfo.add(_elem124);
          }
        }
        struct.setAdditionalInfoIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

