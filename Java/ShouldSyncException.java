/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2019-09-28")
public class ShouldSyncException extends org.apache.thrift.TException implements org.apache.thrift.TBase<ShouldSyncException, ShouldSyncException._Fields>, java.io.Serializable, Cloneable, Comparable<ShouldSyncException> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ShouldSyncException");

  private static final org.apache.thrift.protocol.TField SYNC_OP_REVISION_FIELD_DESC = new org.apache.thrift.protocol.TField("syncOpRevision", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SYNC_SCOPE_FIELD_DESC = new org.apache.thrift.protocol.TField("syncScope", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField SYNC_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("syncReason", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ShouldSyncExceptionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ShouldSyncExceptionTupleSchemeFactory();

  public long syncOpRevision; // required
  public @org.apache.thrift.annotation.Nullable SyncScope syncScope; // required
  /**
   * 
   * @see SyncTriggerReason
   */
  public @org.apache.thrift.annotation.Nullable SyncTriggerReason syncReason; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String message; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SYNC_OP_REVISION((short)1, "syncOpRevision"),
    SYNC_SCOPE((short)2, "syncScope"),
    /**
     * 
     * @see SyncTriggerReason
     */
    SYNC_REASON((short)3, "syncReason"),
    MESSAGE((short)4, "message");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SYNC_OP_REVISION
          return SYNC_OP_REVISION;
        case 2: // SYNC_SCOPE
          return SYNC_SCOPE;
        case 3: // SYNC_REASON
          return SYNC_REASON;
        case 4: // MESSAGE
          return MESSAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SYNCOPREVISION_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SYNC_OP_REVISION, new org.apache.thrift.meta_data.FieldMetaData("syncOpRevision", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SYNC_SCOPE, new org.apache.thrift.meta_data.FieldMetaData("syncScope", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SyncScope.class)));
    tmpMap.put(_Fields.SYNC_REASON, new org.apache.thrift.meta_data.FieldMetaData("syncReason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SyncTriggerReason.class)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ShouldSyncException.class, metaDataMap);
  }

  public ShouldSyncException() {
  }

  public ShouldSyncException(
    long syncOpRevision,
    SyncScope syncScope,
    SyncTriggerReason syncReason,
    java.lang.String message)
  {
    this();
    this.syncOpRevision = syncOpRevision;
    setSyncOpRevisionIsSet(true);
    this.syncScope = syncScope;
    this.syncReason = syncReason;
    this.message = message;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ShouldSyncException(ShouldSyncException other) {
    __isset_bitfield = other.__isset_bitfield;
    this.syncOpRevision = other.syncOpRevision;
    if (other.isSetSyncScope()) {
      this.syncScope = new SyncScope(other.syncScope);
    }
    if (other.isSetSyncReason()) {
      this.syncReason = other.syncReason;
    }
    if (other.isSetMessage()) {
      this.message = other.message;
    }
  }

  public ShouldSyncException deepCopy() {
    return new ShouldSyncException(this);
  }

  @Override
  public void clear() {
    setSyncOpRevisionIsSet(false);
    this.syncOpRevision = 0;
    this.syncScope = null;
    this.syncReason = null;
    this.message = null;
  }

  public long getSyncOpRevision() {
    return this.syncOpRevision;
  }

  public ShouldSyncException setSyncOpRevision(long syncOpRevision) {
    this.syncOpRevision = syncOpRevision;
    setSyncOpRevisionIsSet(true);
    return this;
  }

  public void unsetSyncOpRevision() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SYNCOPREVISION_ISSET_ID);
  }

  /** Returns true if field syncOpRevision is set (has been assigned a value) and false otherwise */
  public boolean isSetSyncOpRevision() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SYNCOPREVISION_ISSET_ID);
  }

  public void setSyncOpRevisionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SYNCOPREVISION_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public SyncScope getSyncScope() {
    return this.syncScope;
  }

  public ShouldSyncException setSyncScope(@org.apache.thrift.annotation.Nullable SyncScope syncScope) {
    this.syncScope = syncScope;
    return this;
  }

  public void unsetSyncScope() {
    this.syncScope = null;
  }

  /** Returns true if field syncScope is set (has been assigned a value) and false otherwise */
  public boolean isSetSyncScope() {
    return this.syncScope != null;
  }

  public void setSyncScopeIsSet(boolean value) {
    if (!value) {
      this.syncScope = null;
    }
  }

  /**
   * 
   * @see SyncTriggerReason
   */
  @org.apache.thrift.annotation.Nullable
  public SyncTriggerReason getSyncReason() {
    return this.syncReason;
  }

  /**
   * 
   * @see SyncTriggerReason
   */
  public ShouldSyncException setSyncReason(@org.apache.thrift.annotation.Nullable SyncTriggerReason syncReason) {
    this.syncReason = syncReason;
    return this;
  }

  public void unsetSyncReason() {
    this.syncReason = null;
  }

  /** Returns true if field syncReason is set (has been assigned a value) and false otherwise */
  public boolean isSetSyncReason() {
    return this.syncReason != null;
  }

  public void setSyncReasonIsSet(boolean value) {
    if (!value) {
      this.syncReason = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMessage() {
    return this.message;
  }

  public ShouldSyncException setMessage(@org.apache.thrift.annotation.Nullable java.lang.String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SYNC_OP_REVISION:
      if (value == null) {
        unsetSyncOpRevision();
      } else {
        setSyncOpRevision((java.lang.Long)value);
      }
      break;

    case SYNC_SCOPE:
      if (value == null) {
        unsetSyncScope();
      } else {
        setSyncScope((SyncScope)value);
      }
      break;

    case SYNC_REASON:
      if (value == null) {
        unsetSyncReason();
      } else {
        setSyncReason((SyncTriggerReason)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SYNC_OP_REVISION:
      return getSyncOpRevision();

    case SYNC_SCOPE:
      return getSyncScope();

    case SYNC_REASON:
      return getSyncReason();

    case MESSAGE:
      return getMessage();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SYNC_OP_REVISION:
      return isSetSyncOpRevision();
    case SYNC_SCOPE:
      return isSetSyncScope();
    case SYNC_REASON:
      return isSetSyncReason();
    case MESSAGE:
      return isSetMessage();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ShouldSyncException)
      return this.equals((ShouldSyncException)that);
    return false;
  }

  public boolean equals(ShouldSyncException that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_syncOpRevision = true;
    boolean that_present_syncOpRevision = true;
    if (this_present_syncOpRevision || that_present_syncOpRevision) {
      if (!(this_present_syncOpRevision && that_present_syncOpRevision))
        return false;
      if (this.syncOpRevision != that.syncOpRevision)
        return false;
    }

    boolean this_present_syncScope = true && this.isSetSyncScope();
    boolean that_present_syncScope = true && that.isSetSyncScope();
    if (this_present_syncScope || that_present_syncScope) {
      if (!(this_present_syncScope && that_present_syncScope))
        return false;
      if (!this.syncScope.equals(that.syncScope))
        return false;
    }

    boolean this_present_syncReason = true && this.isSetSyncReason();
    boolean that_present_syncReason = true && that.isSetSyncReason();
    if (this_present_syncReason || that_present_syncReason) {
      if (!(this_present_syncReason && that_present_syncReason))
        return false;
      if (!this.syncReason.equals(that.syncReason))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(syncOpRevision);

    hashCode = hashCode * 8191 + ((isSetSyncScope()) ? 131071 : 524287);
    if (isSetSyncScope())
      hashCode = hashCode * 8191 + syncScope.hashCode();

    hashCode = hashCode * 8191 + ((isSetSyncReason()) ? 131071 : 524287);
    if (isSetSyncReason())
      hashCode = hashCode * 8191 + syncReason.getValue();

    hashCode = hashCode * 8191 + ((isSetMessage()) ? 131071 : 524287);
    if (isSetMessage())
      hashCode = hashCode * 8191 + message.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ShouldSyncException other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetSyncOpRevision()).compareTo(other.isSetSyncOpRevision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSyncOpRevision()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.syncOpRevision, other.syncOpRevision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSyncScope()).compareTo(other.isSetSyncScope());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSyncScope()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.syncScope, other.syncScope);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSyncReason()).compareTo(other.isSetSyncReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSyncReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.syncReason, other.syncReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ShouldSyncException(");
    boolean first = true;

    sb.append("syncOpRevision:");
    sb.append(this.syncOpRevision);
    first = false;
    if (!first) sb.append(", ");
    sb.append("syncScope:");
    if (this.syncScope == null) {
      sb.append("null");
    } else {
      sb.append(this.syncScope);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("syncReason:");
    if (this.syncReason == null) {
      sb.append("null");
    } else {
      sb.append(this.syncReason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (syncScope != null) {
      syncScope.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ShouldSyncExceptionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ShouldSyncExceptionStandardScheme getScheme() {
      return new ShouldSyncExceptionStandardScheme();
    }
  }

  private static class ShouldSyncExceptionStandardScheme extends org.apache.thrift.scheme.StandardScheme<ShouldSyncException> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ShouldSyncException struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SYNC_OP_REVISION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.syncOpRevision = iprot.readI64();
              struct.setSyncOpRevisionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SYNC_SCOPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.syncScope = new SyncScope();
              struct.syncScope.read(iprot);
              struct.setSyncScopeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SYNC_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.syncReason = SyncTriggerReason.findByValue(iprot.readI32());
              struct.setSyncReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ShouldSyncException struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SYNC_OP_REVISION_FIELD_DESC);
      oprot.writeI64(struct.syncOpRevision);
      oprot.writeFieldEnd();
      if (struct.syncScope != null) {
        oprot.writeFieldBegin(SYNC_SCOPE_FIELD_DESC);
        struct.syncScope.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.syncReason != null) {
        oprot.writeFieldBegin(SYNC_REASON_FIELD_DESC);
        oprot.writeI32(struct.syncReason.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeString(struct.message);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ShouldSyncExceptionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ShouldSyncExceptionTupleScheme getScheme() {
      return new ShouldSyncExceptionTupleScheme();
    }
  }

  private static class ShouldSyncExceptionTupleScheme extends org.apache.thrift.scheme.TupleScheme<ShouldSyncException> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ShouldSyncException struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSyncOpRevision()) {
        optionals.set(0);
      }
      if (struct.isSetSyncScope()) {
        optionals.set(1);
      }
      if (struct.isSetSyncReason()) {
        optionals.set(2);
      }
      if (struct.isSetMessage()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSyncOpRevision()) {
        oprot.writeI64(struct.syncOpRevision);
      }
      if (struct.isSetSyncScope()) {
        struct.syncScope.write(oprot);
      }
      if (struct.isSetSyncReason()) {
        oprot.writeI32(struct.syncReason.getValue());
      }
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ShouldSyncException struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.syncOpRevision = iprot.readI64();
        struct.setSyncOpRevisionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.syncScope = new SyncScope();
        struct.syncScope.read(iprot);
        struct.setSyncScopeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.syncReason = SyncTriggerReason.findByValue(iprot.readI32());
        struct.setSyncReasonIsSet(true);
      }
      if (incoming.get(3)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

