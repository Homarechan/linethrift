/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.0)", date = "2020-03-23")
public class GetJoinedSquaresResponse implements org.apache.thrift.TBase<GetJoinedSquaresResponse, GetJoinedSquaresResponse._Fields>, java.io.Serializable, Cloneable, Comparable<GetJoinedSquaresResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetJoinedSquaresResponse");

  private static final org.apache.thrift.protocol.TField SQUARES_FIELD_DESC = new org.apache.thrift.protocol.TField("squares", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField MEMBERS_FIELD_DESC = new org.apache.thrift.protocol.TField("members", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField AUTHORITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("authorities", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField STATUSES_FIELD_DESC = new org.apache.thrift.protocol.TField("statuses", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField CONTINUATION_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("continuationToken", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NOTE_STATUSES_FIELD_DESC = new org.apache.thrift.protocol.TField("noteStatuses", org.apache.thrift.protocol.TType.MAP, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetJoinedSquaresResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetJoinedSquaresResponseTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<Square> squares; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,SquareMember> members; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,SquareAuthority> authorities; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,SquareStatus> statuses; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String continuationToken; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,NoteStatus> noteStatuses; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SQUARES((short)1, "squares"),
    MEMBERS((short)2, "members"),
    AUTHORITIES((short)3, "authorities"),
    STATUSES((short)4, "statuses"),
    CONTINUATION_TOKEN((short)5, "continuationToken"),
    NOTE_STATUSES((short)6, "noteStatuses");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SQUARES
          return SQUARES;
        case 2: // MEMBERS
          return MEMBERS;
        case 3: // AUTHORITIES
          return AUTHORITIES;
        case 4: // STATUSES
          return STATUSES;
        case 5: // CONTINUATION_TOKEN
          return CONTINUATION_TOKEN;
        case 6: // NOTE_STATUSES
          return NOTE_STATUSES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SQUARES, new org.apache.thrift.meta_data.FieldMetaData("squares", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Square.class))));
    tmpMap.put(_Fields.MEMBERS, new org.apache.thrift.meta_data.FieldMetaData("members", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SquareMember.class))));
    tmpMap.put(_Fields.AUTHORITIES, new org.apache.thrift.meta_data.FieldMetaData("authorities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SquareAuthority.class))));
    tmpMap.put(_Fields.STATUSES, new org.apache.thrift.meta_data.FieldMetaData("statuses", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SquareStatus.class))));
    tmpMap.put(_Fields.CONTINUATION_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("continuationToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTE_STATUSES, new org.apache.thrift.meta_data.FieldMetaData("noteStatuses", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoteStatus.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetJoinedSquaresResponse.class, metaDataMap);
  }

  public GetJoinedSquaresResponse() {
  }

  public GetJoinedSquaresResponse(
    java.util.List<Square> squares,
    java.util.Map<java.lang.String,SquareMember> members,
    java.util.Map<java.lang.String,SquareAuthority> authorities,
    java.util.Map<java.lang.String,SquareStatus> statuses,
    java.lang.String continuationToken,
    java.util.Map<java.lang.String,NoteStatus> noteStatuses)
  {
    this();
    this.squares = squares;
    this.members = members;
    this.authorities = authorities;
    this.statuses = statuses;
    this.continuationToken = continuationToken;
    this.noteStatuses = noteStatuses;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetJoinedSquaresResponse(GetJoinedSquaresResponse other) {
    if (other.isSetSquares()) {
      java.util.List<Square> __this__squares = new java.util.ArrayList<Square>(other.squares.size());
      for (Square other_element : other.squares) {
        __this__squares.add(new Square(other_element));
      }
      this.squares = __this__squares;
    }
    if (other.isSetMembers()) {
      java.util.Map<java.lang.String,SquareMember> __this__members = new java.util.HashMap<java.lang.String,SquareMember>(other.members.size());
      for (java.util.Map.Entry<java.lang.String, SquareMember> other_element : other.members.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        SquareMember other_element_value = other_element.getValue();

        java.lang.String __this__members_copy_key = other_element_key;

        SquareMember __this__members_copy_value = new SquareMember(other_element_value);

        __this__members.put(__this__members_copy_key, __this__members_copy_value);
      }
      this.members = __this__members;
    }
    if (other.isSetAuthorities()) {
      java.util.Map<java.lang.String,SquareAuthority> __this__authorities = new java.util.HashMap<java.lang.String,SquareAuthority>(other.authorities.size());
      for (java.util.Map.Entry<java.lang.String, SquareAuthority> other_element : other.authorities.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        SquareAuthority other_element_value = other_element.getValue();

        java.lang.String __this__authorities_copy_key = other_element_key;

        SquareAuthority __this__authorities_copy_value = new SquareAuthority(other_element_value);

        __this__authorities.put(__this__authorities_copy_key, __this__authorities_copy_value);
      }
      this.authorities = __this__authorities;
    }
    if (other.isSetStatuses()) {
      java.util.Map<java.lang.String,SquareStatus> __this__statuses = new java.util.HashMap<java.lang.String,SquareStatus>(other.statuses.size());
      for (java.util.Map.Entry<java.lang.String, SquareStatus> other_element : other.statuses.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        SquareStatus other_element_value = other_element.getValue();

        java.lang.String __this__statuses_copy_key = other_element_key;

        SquareStatus __this__statuses_copy_value = new SquareStatus(other_element_value);

        __this__statuses.put(__this__statuses_copy_key, __this__statuses_copy_value);
      }
      this.statuses = __this__statuses;
    }
    if (other.isSetContinuationToken()) {
      this.continuationToken = other.continuationToken;
    }
    if (other.isSetNoteStatuses()) {
      java.util.Map<java.lang.String,NoteStatus> __this__noteStatuses = new java.util.HashMap<java.lang.String,NoteStatus>(other.noteStatuses.size());
      for (java.util.Map.Entry<java.lang.String, NoteStatus> other_element : other.noteStatuses.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        NoteStatus other_element_value = other_element.getValue();

        java.lang.String __this__noteStatuses_copy_key = other_element_key;

        NoteStatus __this__noteStatuses_copy_value = new NoteStatus(other_element_value);

        __this__noteStatuses.put(__this__noteStatuses_copy_key, __this__noteStatuses_copy_value);
      }
      this.noteStatuses = __this__noteStatuses;
    }
  }

  public GetJoinedSquaresResponse deepCopy() {
    return new GetJoinedSquaresResponse(this);
  }

  @Override
  public void clear() {
    this.squares = null;
    this.members = null;
    this.authorities = null;
    this.statuses = null;
    this.continuationToken = null;
    this.noteStatuses = null;
  }

  public int getSquaresSize() {
    return (this.squares == null) ? 0 : this.squares.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Square> getSquaresIterator() {
    return (this.squares == null) ? null : this.squares.iterator();
  }

  public void addToSquares(Square elem) {
    if (this.squares == null) {
      this.squares = new java.util.ArrayList<Square>();
    }
    this.squares.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<Square> getSquares() {
    return this.squares;
  }

  public GetJoinedSquaresResponse setSquares(@org.apache.thrift.annotation.Nullable java.util.List<Square> squares) {
    this.squares = squares;
    return this;
  }

  public void unsetSquares() {
    this.squares = null;
  }

  /** Returns true if field squares is set (has been assigned a value) and false otherwise */
  public boolean isSetSquares() {
    return this.squares != null;
  }

  public void setSquaresIsSet(boolean value) {
    if (!value) {
      this.squares = null;
    }
  }

  public int getMembersSize() {
    return (this.members == null) ? 0 : this.members.size();
  }

  public void putToMembers(java.lang.String key, SquareMember val) {
    if (this.members == null) {
      this.members = new java.util.HashMap<java.lang.String,SquareMember>();
    }
    this.members.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,SquareMember> getMembers() {
    return this.members;
  }

  public GetJoinedSquaresResponse setMembers(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,SquareMember> members) {
    this.members = members;
    return this;
  }

  public void unsetMembers() {
    this.members = null;
  }

  /** Returns true if field members is set (has been assigned a value) and false otherwise */
  public boolean isSetMembers() {
    return this.members != null;
  }

  public void setMembersIsSet(boolean value) {
    if (!value) {
      this.members = null;
    }
  }

  public int getAuthoritiesSize() {
    return (this.authorities == null) ? 0 : this.authorities.size();
  }

  public void putToAuthorities(java.lang.String key, SquareAuthority val) {
    if (this.authorities == null) {
      this.authorities = new java.util.HashMap<java.lang.String,SquareAuthority>();
    }
    this.authorities.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,SquareAuthority> getAuthorities() {
    return this.authorities;
  }

  public GetJoinedSquaresResponse setAuthorities(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,SquareAuthority> authorities) {
    this.authorities = authorities;
    return this;
  }

  public void unsetAuthorities() {
    this.authorities = null;
  }

  /** Returns true if field authorities is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthorities() {
    return this.authorities != null;
  }

  public void setAuthoritiesIsSet(boolean value) {
    if (!value) {
      this.authorities = null;
    }
  }

  public int getStatusesSize() {
    return (this.statuses == null) ? 0 : this.statuses.size();
  }

  public void putToStatuses(java.lang.String key, SquareStatus val) {
    if (this.statuses == null) {
      this.statuses = new java.util.HashMap<java.lang.String,SquareStatus>();
    }
    this.statuses.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,SquareStatus> getStatuses() {
    return this.statuses;
  }

  public GetJoinedSquaresResponse setStatuses(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,SquareStatus> statuses) {
    this.statuses = statuses;
    return this;
  }

  public void unsetStatuses() {
    this.statuses = null;
  }

  /** Returns true if field statuses is set (has been assigned a value) and false otherwise */
  public boolean isSetStatuses() {
    return this.statuses != null;
  }

  public void setStatusesIsSet(boolean value) {
    if (!value) {
      this.statuses = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getContinuationToken() {
    return this.continuationToken;
  }

  public GetJoinedSquaresResponse setContinuationToken(@org.apache.thrift.annotation.Nullable java.lang.String continuationToken) {
    this.continuationToken = continuationToken;
    return this;
  }

  public void unsetContinuationToken() {
    this.continuationToken = null;
  }

  /** Returns true if field continuationToken is set (has been assigned a value) and false otherwise */
  public boolean isSetContinuationToken() {
    return this.continuationToken != null;
  }

  public void setContinuationTokenIsSet(boolean value) {
    if (!value) {
      this.continuationToken = null;
    }
  }

  public int getNoteStatusesSize() {
    return (this.noteStatuses == null) ? 0 : this.noteStatuses.size();
  }

  public void putToNoteStatuses(java.lang.String key, NoteStatus val) {
    if (this.noteStatuses == null) {
      this.noteStatuses = new java.util.HashMap<java.lang.String,NoteStatus>();
    }
    this.noteStatuses.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,NoteStatus> getNoteStatuses() {
    return this.noteStatuses;
  }

  public GetJoinedSquaresResponse setNoteStatuses(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,NoteStatus> noteStatuses) {
    this.noteStatuses = noteStatuses;
    return this;
  }

  public void unsetNoteStatuses() {
    this.noteStatuses = null;
  }

  /** Returns true if field noteStatuses is set (has been assigned a value) and false otherwise */
  public boolean isSetNoteStatuses() {
    return this.noteStatuses != null;
  }

  public void setNoteStatusesIsSet(boolean value) {
    if (!value) {
      this.noteStatuses = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SQUARES:
      if (value == null) {
        unsetSquares();
      } else {
        setSquares((java.util.List<Square>)value);
      }
      break;

    case MEMBERS:
      if (value == null) {
        unsetMembers();
      } else {
        setMembers((java.util.Map<java.lang.String,SquareMember>)value);
      }
      break;

    case AUTHORITIES:
      if (value == null) {
        unsetAuthorities();
      } else {
        setAuthorities((java.util.Map<java.lang.String,SquareAuthority>)value);
      }
      break;

    case STATUSES:
      if (value == null) {
        unsetStatuses();
      } else {
        setStatuses((java.util.Map<java.lang.String,SquareStatus>)value);
      }
      break;

    case CONTINUATION_TOKEN:
      if (value == null) {
        unsetContinuationToken();
      } else {
        setContinuationToken((java.lang.String)value);
      }
      break;

    case NOTE_STATUSES:
      if (value == null) {
        unsetNoteStatuses();
      } else {
        setNoteStatuses((java.util.Map<java.lang.String,NoteStatus>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SQUARES:
      return getSquares();

    case MEMBERS:
      return getMembers();

    case AUTHORITIES:
      return getAuthorities();

    case STATUSES:
      return getStatuses();

    case CONTINUATION_TOKEN:
      return getContinuationToken();

    case NOTE_STATUSES:
      return getNoteStatuses();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SQUARES:
      return isSetSquares();
    case MEMBERS:
      return isSetMembers();
    case AUTHORITIES:
      return isSetAuthorities();
    case STATUSES:
      return isSetStatuses();
    case CONTINUATION_TOKEN:
      return isSetContinuationToken();
    case NOTE_STATUSES:
      return isSetNoteStatuses();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof GetJoinedSquaresResponse)
      return this.equals((GetJoinedSquaresResponse)that);
    return false;
  }

  public boolean equals(GetJoinedSquaresResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_squares = true && this.isSetSquares();
    boolean that_present_squares = true && that.isSetSquares();
    if (this_present_squares || that_present_squares) {
      if (!(this_present_squares && that_present_squares))
        return false;
      if (!this.squares.equals(that.squares))
        return false;
    }

    boolean this_present_members = true && this.isSetMembers();
    boolean that_present_members = true && that.isSetMembers();
    if (this_present_members || that_present_members) {
      if (!(this_present_members && that_present_members))
        return false;
      if (!this.members.equals(that.members))
        return false;
    }

    boolean this_present_authorities = true && this.isSetAuthorities();
    boolean that_present_authorities = true && that.isSetAuthorities();
    if (this_present_authorities || that_present_authorities) {
      if (!(this_present_authorities && that_present_authorities))
        return false;
      if (!this.authorities.equals(that.authorities))
        return false;
    }

    boolean this_present_statuses = true && this.isSetStatuses();
    boolean that_present_statuses = true && that.isSetStatuses();
    if (this_present_statuses || that_present_statuses) {
      if (!(this_present_statuses && that_present_statuses))
        return false;
      if (!this.statuses.equals(that.statuses))
        return false;
    }

    boolean this_present_continuationToken = true && this.isSetContinuationToken();
    boolean that_present_continuationToken = true && that.isSetContinuationToken();
    if (this_present_continuationToken || that_present_continuationToken) {
      if (!(this_present_continuationToken && that_present_continuationToken))
        return false;
      if (!this.continuationToken.equals(that.continuationToken))
        return false;
    }

    boolean this_present_noteStatuses = true && this.isSetNoteStatuses();
    boolean that_present_noteStatuses = true && that.isSetNoteStatuses();
    if (this_present_noteStatuses || that_present_noteStatuses) {
      if (!(this_present_noteStatuses && that_present_noteStatuses))
        return false;
      if (!this.noteStatuses.equals(that.noteStatuses))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSquares()) ? 131071 : 524287);
    if (isSetSquares())
      hashCode = hashCode * 8191 + squares.hashCode();

    hashCode = hashCode * 8191 + ((isSetMembers()) ? 131071 : 524287);
    if (isSetMembers())
      hashCode = hashCode * 8191 + members.hashCode();

    hashCode = hashCode * 8191 + ((isSetAuthorities()) ? 131071 : 524287);
    if (isSetAuthorities())
      hashCode = hashCode * 8191 + authorities.hashCode();

    hashCode = hashCode * 8191 + ((isSetStatuses()) ? 131071 : 524287);
    if (isSetStatuses())
      hashCode = hashCode * 8191 + statuses.hashCode();

    hashCode = hashCode * 8191 + ((isSetContinuationToken()) ? 131071 : 524287);
    if (isSetContinuationToken())
      hashCode = hashCode * 8191 + continuationToken.hashCode();

    hashCode = hashCode * 8191 + ((isSetNoteStatuses()) ? 131071 : 524287);
    if (isSetNoteStatuses())
      hashCode = hashCode * 8191 + noteStatuses.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(GetJoinedSquaresResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetSquares(), other.isSetSquares());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSquares()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.squares, other.squares);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMembers(), other.isSetMembers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMembers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.members, other.members);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAuthorities(), other.isSetAuthorities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthorities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorities, other.authorities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStatuses(), other.isSetStatuses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatuses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statuses, other.statuses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetContinuationToken(), other.isSetContinuationToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContinuationToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.continuationToken, other.continuationToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNoteStatuses(), other.isSetNoteStatuses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoteStatuses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noteStatuses, other.noteStatuses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("GetJoinedSquaresResponse(");
    boolean first = true;

    sb.append("squares:");
    if (this.squares == null) {
      sb.append("null");
    } else {
      sb.append(this.squares);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("members:");
    if (this.members == null) {
      sb.append("null");
    } else {
      sb.append(this.members);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("authorities:");
    if (this.authorities == null) {
      sb.append("null");
    } else {
      sb.append(this.authorities);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("statuses:");
    if (this.statuses == null) {
      sb.append("null");
    } else {
      sb.append(this.statuses);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("continuationToken:");
    if (this.continuationToken == null) {
      sb.append("null");
    } else {
      sb.append(this.continuationToken);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("noteStatuses:");
    if (this.noteStatuses == null) {
      sb.append("null");
    } else {
      sb.append(this.noteStatuses);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetJoinedSquaresResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GetJoinedSquaresResponseStandardScheme getScheme() {
      return new GetJoinedSquaresResponseStandardScheme();
    }
  }

  private static class GetJoinedSquaresResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetJoinedSquaresResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetJoinedSquaresResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SQUARES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list592 = iprot.readListBegin();
                struct.squares = new java.util.ArrayList<Square>(_list592.size);
                @org.apache.thrift.annotation.Nullable Square _elem593;
                for (int _i594 = 0; _i594 < _list592.size; ++_i594)
                {
                  _elem593 = new Square();
                  _elem593.read(iprot);
                  struct.squares.add(_elem593);
                }
                iprot.readListEnd();
              }
              struct.setSquaresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MEMBERS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map595 = iprot.readMapBegin();
                struct.members = new java.util.HashMap<java.lang.String,SquareMember>(2*_map595.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key596;
                @org.apache.thrift.annotation.Nullable SquareMember _val597;
                for (int _i598 = 0; _i598 < _map595.size; ++_i598)
                {
                  _key596 = iprot.readString();
                  _val597 = new SquareMember();
                  _val597.read(iprot);
                  struct.members.put(_key596, _val597);
                }
                iprot.readMapEnd();
              }
              struct.setMembersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AUTHORITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map599 = iprot.readMapBegin();
                struct.authorities = new java.util.HashMap<java.lang.String,SquareAuthority>(2*_map599.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key600;
                @org.apache.thrift.annotation.Nullable SquareAuthority _val601;
                for (int _i602 = 0; _i602 < _map599.size; ++_i602)
                {
                  _key600 = iprot.readString();
                  _val601 = new SquareAuthority();
                  _val601.read(iprot);
                  struct.authorities.put(_key600, _val601);
                }
                iprot.readMapEnd();
              }
              struct.setAuthoritiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STATUSES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map603 = iprot.readMapBegin();
                struct.statuses = new java.util.HashMap<java.lang.String,SquareStatus>(2*_map603.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key604;
                @org.apache.thrift.annotation.Nullable SquareStatus _val605;
                for (int _i606 = 0; _i606 < _map603.size; ++_i606)
                {
                  _key604 = iprot.readString();
                  _val605 = new SquareStatus();
                  _val605.read(iprot);
                  struct.statuses.put(_key604, _val605);
                }
                iprot.readMapEnd();
              }
              struct.setStatusesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONTINUATION_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.continuationToken = iprot.readString();
              struct.setContinuationTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NOTE_STATUSES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map607 = iprot.readMapBegin();
                struct.noteStatuses = new java.util.HashMap<java.lang.String,NoteStatus>(2*_map607.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key608;
                @org.apache.thrift.annotation.Nullable NoteStatus _val609;
                for (int _i610 = 0; _i610 < _map607.size; ++_i610)
                {
                  _key608 = iprot.readString();
                  _val609 = new NoteStatus();
                  _val609.read(iprot);
                  struct.noteStatuses.put(_key608, _val609);
                }
                iprot.readMapEnd();
              }
              struct.setNoteStatusesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetJoinedSquaresResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.squares != null) {
        oprot.writeFieldBegin(SQUARES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.squares.size()));
          for (Square _iter611 : struct.squares)
          {
            _iter611.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.members != null) {
        oprot.writeFieldBegin(MEMBERS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.members.size()));
          for (java.util.Map.Entry<java.lang.String, SquareMember> _iter612 : struct.members.entrySet())
          {
            oprot.writeString(_iter612.getKey());
            _iter612.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.authorities != null) {
        oprot.writeFieldBegin(AUTHORITIES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.authorities.size()));
          for (java.util.Map.Entry<java.lang.String, SquareAuthority> _iter613 : struct.authorities.entrySet())
          {
            oprot.writeString(_iter613.getKey());
            _iter613.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.statuses != null) {
        oprot.writeFieldBegin(STATUSES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.statuses.size()));
          for (java.util.Map.Entry<java.lang.String, SquareStatus> _iter614 : struct.statuses.entrySet())
          {
            oprot.writeString(_iter614.getKey());
            _iter614.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.continuationToken != null) {
        oprot.writeFieldBegin(CONTINUATION_TOKEN_FIELD_DESC);
        oprot.writeString(struct.continuationToken);
        oprot.writeFieldEnd();
      }
      if (struct.noteStatuses != null) {
        oprot.writeFieldBegin(NOTE_STATUSES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.noteStatuses.size()));
          for (java.util.Map.Entry<java.lang.String, NoteStatus> _iter615 : struct.noteStatuses.entrySet())
          {
            oprot.writeString(_iter615.getKey());
            _iter615.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetJoinedSquaresResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GetJoinedSquaresResponseTupleScheme getScheme() {
      return new GetJoinedSquaresResponseTupleScheme();
    }
  }

  private static class GetJoinedSquaresResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetJoinedSquaresResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetJoinedSquaresResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSquares()) {
        optionals.set(0);
      }
      if (struct.isSetMembers()) {
        optionals.set(1);
      }
      if (struct.isSetAuthorities()) {
        optionals.set(2);
      }
      if (struct.isSetStatuses()) {
        optionals.set(3);
      }
      if (struct.isSetContinuationToken()) {
        optionals.set(4);
      }
      if (struct.isSetNoteStatuses()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetSquares()) {
        {
          oprot.writeI32(struct.squares.size());
          for (Square _iter616 : struct.squares)
          {
            _iter616.write(oprot);
          }
        }
      }
      if (struct.isSetMembers()) {
        {
          oprot.writeI32(struct.members.size());
          for (java.util.Map.Entry<java.lang.String, SquareMember> _iter617 : struct.members.entrySet())
          {
            oprot.writeString(_iter617.getKey());
            _iter617.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetAuthorities()) {
        {
          oprot.writeI32(struct.authorities.size());
          for (java.util.Map.Entry<java.lang.String, SquareAuthority> _iter618 : struct.authorities.entrySet())
          {
            oprot.writeString(_iter618.getKey());
            _iter618.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetStatuses()) {
        {
          oprot.writeI32(struct.statuses.size());
          for (java.util.Map.Entry<java.lang.String, SquareStatus> _iter619 : struct.statuses.entrySet())
          {
            oprot.writeString(_iter619.getKey());
            _iter619.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetContinuationToken()) {
        oprot.writeString(struct.continuationToken);
      }
      if (struct.isSetNoteStatuses()) {
        {
          oprot.writeI32(struct.noteStatuses.size());
          for (java.util.Map.Entry<java.lang.String, NoteStatus> _iter620 : struct.noteStatuses.entrySet())
          {
            oprot.writeString(_iter620.getKey());
            _iter620.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetJoinedSquaresResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list621 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.squares = new java.util.ArrayList<Square>(_list621.size);
          @org.apache.thrift.annotation.Nullable Square _elem622;
          for (int _i623 = 0; _i623 < _list621.size; ++_i623)
          {
            _elem622 = new Square();
            _elem622.read(iprot);
            struct.squares.add(_elem622);
          }
        }
        struct.setSquaresIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map624 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.members = new java.util.HashMap<java.lang.String,SquareMember>(2*_map624.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key625;
          @org.apache.thrift.annotation.Nullable SquareMember _val626;
          for (int _i627 = 0; _i627 < _map624.size; ++_i627)
          {
            _key625 = iprot.readString();
            _val626 = new SquareMember();
            _val626.read(iprot);
            struct.members.put(_key625, _val626);
          }
        }
        struct.setMembersIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map628 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.authorities = new java.util.HashMap<java.lang.String,SquareAuthority>(2*_map628.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key629;
          @org.apache.thrift.annotation.Nullable SquareAuthority _val630;
          for (int _i631 = 0; _i631 < _map628.size; ++_i631)
          {
            _key629 = iprot.readString();
            _val630 = new SquareAuthority();
            _val630.read(iprot);
            struct.authorities.put(_key629, _val630);
          }
        }
        struct.setAuthoritiesIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map632 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.statuses = new java.util.HashMap<java.lang.String,SquareStatus>(2*_map632.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key633;
          @org.apache.thrift.annotation.Nullable SquareStatus _val634;
          for (int _i635 = 0; _i635 < _map632.size; ++_i635)
          {
            _key633 = iprot.readString();
            _val634 = new SquareStatus();
            _val634.read(iprot);
            struct.statuses.put(_key633, _val634);
          }
        }
        struct.setStatusesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.continuationToken = iprot.readString();
        struct.setContinuationTokenIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map636 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.noteStatuses = new java.util.HashMap<java.lang.String,NoteStatus>(2*_map636.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key637;
          @org.apache.thrift.annotation.Nullable NoteStatus _val638;
          for (int _i639 = 0; _i639 < _map636.size; ++_i639)
          {
            _key637 = iprot.readString();
            _val638 = new NoteStatus();
            _val638.read(iprot);
            struct.noteStatuses.put(_key637, _val638);
          }
        }
        struct.setNoteStatusesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

