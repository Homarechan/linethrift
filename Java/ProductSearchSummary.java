/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-17")
public class ProductSearchSummary implements org.apache.thrift.TBase<ProductSearchSummary, ProductSearchSummary._Fields>, java.io.Serializable, Cloneable, Comparable<ProductSearchSummary> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProductSearchSummary");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField AUTHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("author", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PROMOTION_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("promotionInfo", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField NEW_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("newFlag", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField PRICE_TIER_FIELD_DESC = new org.apache.thrift.protocol.TField("priceTier", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField PRICE_IN_LINE_COIN_FIELD_DESC = new org.apache.thrift.protocol.TField("priceInLineCoin", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("property", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField SUB_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("subType", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField ON_SALE_FIELD_DESC = new org.apache.thrift.protocol.TField("onSale", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField AVAILABLE_FOR_PRESENT_FIELD_DESC = new org.apache.thrift.protocol.TField("availableForPresent", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField AVAILABLE_FOR_PURCHASE_FIELD_DESC = new org.apache.thrift.protocol.TField("availableForPurchase", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField VALID_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("validDays", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField AUTHOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("authorId", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField SALE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("saleFlag", org.apache.thrift.protocol.TType.BOOL, (short)17);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ProductSearchSummaryStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ProductSearchSummaryTupleSchemeFactory();

  public java.lang.String id; // required
  /**
   * 
   * @see PType
   */
  public PType type; // required
  public java.lang.String name; // required
  public java.lang.String author; // required
  public PromotionInfo promotionInfo; // required
  public long version; // required
  public boolean newFlag; // required
  public int priceTier; // required
  public java.lang.String priceInLineCoin; // required
  public ProductProperty property; // required
  /**
   * 
   * @see SubType
   */
  public SubType subType; // required
  public boolean onSale; // required
  public boolean availableForPresent; // required
  public boolean availableForPurchase; // required
  public int validDays; // required
  public java.lang.String authorId; // required
  public boolean saleFlag; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    /**
     * 
     * @see PType
     */
    TYPE((short)2, "type"),
    NAME((short)3, "name"),
    AUTHOR((short)4, "author"),
    PROMOTION_INFO((short)5, "promotionInfo"),
    VERSION((short)6, "version"),
    NEW_FLAG((short)7, "newFlag"),
    PRICE_TIER((short)8, "priceTier"),
    PRICE_IN_LINE_COIN((short)9, "priceInLineCoin"),
    PROPERTY((short)10, "property"),
    /**
     * 
     * @see SubType
     */
    SUB_TYPE((short)11, "subType"),
    ON_SALE((short)12, "onSale"),
    AVAILABLE_FOR_PRESENT((short)13, "availableForPresent"),
    AVAILABLE_FOR_PURCHASE((short)14, "availableForPurchase"),
    VALID_DAYS((short)15, "validDays"),
    AUTHOR_ID((short)16, "authorId"),
    SALE_FLAG((short)17, "saleFlag");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TYPE
          return TYPE;
        case 3: // NAME
          return NAME;
        case 4: // AUTHOR
          return AUTHOR;
        case 5: // PROMOTION_INFO
          return PROMOTION_INFO;
        case 6: // VERSION
          return VERSION;
        case 7: // NEW_FLAG
          return NEW_FLAG;
        case 8: // PRICE_TIER
          return PRICE_TIER;
        case 9: // PRICE_IN_LINE_COIN
          return PRICE_IN_LINE_COIN;
        case 10: // PROPERTY
          return PROPERTY;
        case 11: // SUB_TYPE
          return SUB_TYPE;
        case 12: // ON_SALE
          return ON_SALE;
        case 13: // AVAILABLE_FOR_PRESENT
          return AVAILABLE_FOR_PRESENT;
        case 14: // AVAILABLE_FOR_PURCHASE
          return AVAILABLE_FOR_PURCHASE;
        case 15: // VALID_DAYS
          return VALID_DAYS;
        case 16: // AUTHOR_ID
          return AUTHOR_ID;
        case 17: // SALE_FLAG
          return SALE_FLAG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSION_ISSET_ID = 0;
  private static final int __NEWFLAG_ISSET_ID = 1;
  private static final int __PRICETIER_ISSET_ID = 2;
  private static final int __ONSALE_ISSET_ID = 3;
  private static final int __AVAILABLEFORPRESENT_ISSET_ID = 4;
  private static final int __AVAILABLEFORPURCHASE_ISSET_ID = 5;
  private static final int __VALIDDAYS_ISSET_ID = 6;
  private static final int __SALEFLAG_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PType.class)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTHOR, new org.apache.thrift.meta_data.FieldMetaData("author", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROMOTION_INFO, new org.apache.thrift.meta_data.FieldMetaData("promotionInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PromotionInfo.class)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NEW_FLAG, new org.apache.thrift.meta_data.FieldMetaData("newFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PRICE_TIER, new org.apache.thrift.meta_data.FieldMetaData("priceTier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRICE_IN_LINE_COIN, new org.apache.thrift.meta_data.FieldMetaData("priceInLineCoin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("property", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductProperty.class)));
    tmpMap.put(_Fields.SUB_TYPE, new org.apache.thrift.meta_data.FieldMetaData("subType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SubType.class)));
    tmpMap.put(_Fields.ON_SALE, new org.apache.thrift.meta_data.FieldMetaData("onSale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.AVAILABLE_FOR_PRESENT, new org.apache.thrift.meta_data.FieldMetaData("availableForPresent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.AVAILABLE_FOR_PURCHASE, new org.apache.thrift.meta_data.FieldMetaData("availableForPurchase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.VALID_DAYS, new org.apache.thrift.meta_data.FieldMetaData("validDays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AUTHOR_ID, new org.apache.thrift.meta_data.FieldMetaData("authorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SALE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("saleFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProductSearchSummary.class, metaDataMap);
  }

  public ProductSearchSummary() {
  }

  public ProductSearchSummary(
    java.lang.String id,
    PType type,
    java.lang.String name,
    java.lang.String author,
    PromotionInfo promotionInfo,
    long version,
    boolean newFlag,
    int priceTier,
    java.lang.String priceInLineCoin,
    ProductProperty property,
    SubType subType,
    boolean onSale,
    boolean availableForPresent,
    boolean availableForPurchase,
    int validDays,
    java.lang.String authorId,
    boolean saleFlag)
  {
    this();
    this.id = id;
    this.type = type;
    this.name = name;
    this.author = author;
    this.promotionInfo = promotionInfo;
    this.version = version;
    setVersionIsSet(true);
    this.newFlag = newFlag;
    setNewFlagIsSet(true);
    this.priceTier = priceTier;
    setPriceTierIsSet(true);
    this.priceInLineCoin = priceInLineCoin;
    this.property = property;
    this.subType = subType;
    this.onSale = onSale;
    setOnSaleIsSet(true);
    this.availableForPresent = availableForPresent;
    setAvailableForPresentIsSet(true);
    this.availableForPurchase = availableForPurchase;
    setAvailableForPurchaseIsSet(true);
    this.validDays = validDays;
    setValidDaysIsSet(true);
    this.authorId = authorId;
    this.saleFlag = saleFlag;
    setSaleFlagIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProductSearchSummary(ProductSearchSummary other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetAuthor()) {
      this.author = other.author;
    }
    if (other.isSetPromotionInfo()) {
      this.promotionInfo = new PromotionInfo(other.promotionInfo);
    }
    this.version = other.version;
    this.newFlag = other.newFlag;
    this.priceTier = other.priceTier;
    if (other.isSetPriceInLineCoin()) {
      this.priceInLineCoin = other.priceInLineCoin;
    }
    if (other.isSetProperty()) {
      this.property = new ProductProperty(other.property);
    }
    if (other.isSetSubType()) {
      this.subType = other.subType;
    }
    this.onSale = other.onSale;
    this.availableForPresent = other.availableForPresent;
    this.availableForPurchase = other.availableForPurchase;
    this.validDays = other.validDays;
    if (other.isSetAuthorId()) {
      this.authorId = other.authorId;
    }
    this.saleFlag = other.saleFlag;
  }

  public ProductSearchSummary deepCopy() {
    return new ProductSearchSummary(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.type = null;
    this.name = null;
    this.author = null;
    this.promotionInfo = null;
    setVersionIsSet(false);
    this.version = 0;
    setNewFlagIsSet(false);
    this.newFlag = false;
    setPriceTierIsSet(false);
    this.priceTier = 0;
    this.priceInLineCoin = null;
    this.property = null;
    this.subType = null;
    setOnSaleIsSet(false);
    this.onSale = false;
    setAvailableForPresentIsSet(false);
    this.availableForPresent = false;
    setAvailableForPurchaseIsSet(false);
    this.availableForPurchase = false;
    setValidDaysIsSet(false);
    this.validDays = 0;
    this.authorId = null;
    setSaleFlagIsSet(false);
    this.saleFlag = false;
  }

  public java.lang.String getId() {
    return this.id;
  }

  public ProductSearchSummary setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * 
   * @see PType
   */
  public PType getType() {
    return this.type;
  }

  /**
   * 
   * @see PType
   */
  public ProductSearchSummary setType(PType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public java.lang.String getName() {
    return this.name;
  }

  public ProductSearchSummary setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public java.lang.String getAuthor() {
    return this.author;
  }

  public ProductSearchSummary setAuthor(java.lang.String author) {
    this.author = author;
    return this;
  }

  public void unsetAuthor() {
    this.author = null;
  }

  /** Returns true if field author is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthor() {
    return this.author != null;
  }

  public void setAuthorIsSet(boolean value) {
    if (!value) {
      this.author = null;
    }
  }

  public PromotionInfo getPromotionInfo() {
    return this.promotionInfo;
  }

  public ProductSearchSummary setPromotionInfo(PromotionInfo promotionInfo) {
    this.promotionInfo = promotionInfo;
    return this;
  }

  public void unsetPromotionInfo() {
    this.promotionInfo = null;
  }

  /** Returns true if field promotionInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetPromotionInfo() {
    return this.promotionInfo != null;
  }

  public void setPromotionInfoIsSet(boolean value) {
    if (!value) {
      this.promotionInfo = null;
    }
  }

  public long getVersion() {
    return this.version;
  }

  public ProductSearchSummary setVersion(long version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public boolean isNewFlag() {
    return this.newFlag;
  }

  public ProductSearchSummary setNewFlag(boolean newFlag) {
    this.newFlag = newFlag;
    setNewFlagIsSet(true);
    return this;
  }

  public void unsetNewFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEWFLAG_ISSET_ID);
  }

  /** Returns true if field newFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetNewFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEWFLAG_ISSET_ID);
  }

  public void setNewFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEWFLAG_ISSET_ID, value);
  }

  public int getPriceTier() {
    return this.priceTier;
  }

  public ProductSearchSummary setPriceTier(int priceTier) {
    this.priceTier = priceTier;
    setPriceTierIsSet(true);
    return this;
  }

  public void unsetPriceTier() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRICETIER_ISSET_ID);
  }

  /** Returns true if field priceTier is set (has been assigned a value) and false otherwise */
  public boolean isSetPriceTier() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRICETIER_ISSET_ID);
  }

  public void setPriceTierIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRICETIER_ISSET_ID, value);
  }

  public java.lang.String getPriceInLineCoin() {
    return this.priceInLineCoin;
  }

  public ProductSearchSummary setPriceInLineCoin(java.lang.String priceInLineCoin) {
    this.priceInLineCoin = priceInLineCoin;
    return this;
  }

  public void unsetPriceInLineCoin() {
    this.priceInLineCoin = null;
  }

  /** Returns true if field priceInLineCoin is set (has been assigned a value) and false otherwise */
  public boolean isSetPriceInLineCoin() {
    return this.priceInLineCoin != null;
  }

  public void setPriceInLineCoinIsSet(boolean value) {
    if (!value) {
      this.priceInLineCoin = null;
    }
  }

  public ProductProperty getProperty() {
    return this.property;
  }

  public ProductSearchSummary setProperty(ProductProperty property) {
    this.property = property;
    return this;
  }

  public void unsetProperty() {
    this.property = null;
  }

  /** Returns true if field property is set (has been assigned a value) and false otherwise */
  public boolean isSetProperty() {
    return this.property != null;
  }

  public void setPropertyIsSet(boolean value) {
    if (!value) {
      this.property = null;
    }
  }

  /**
   * 
   * @see SubType
   */
  public SubType getSubType() {
    return this.subType;
  }

  /**
   * 
   * @see SubType
   */
  public ProductSearchSummary setSubType(SubType subType) {
    this.subType = subType;
    return this;
  }

  public void unsetSubType() {
    this.subType = null;
  }

  /** Returns true if field subType is set (has been assigned a value) and false otherwise */
  public boolean isSetSubType() {
    return this.subType != null;
  }

  public void setSubTypeIsSet(boolean value) {
    if (!value) {
      this.subType = null;
    }
  }

  public boolean isOnSale() {
    return this.onSale;
  }

  public ProductSearchSummary setOnSale(boolean onSale) {
    this.onSale = onSale;
    setOnSaleIsSet(true);
    return this;
  }

  public void unsetOnSale() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ONSALE_ISSET_ID);
  }

  /** Returns true if field onSale is set (has been assigned a value) and false otherwise */
  public boolean isSetOnSale() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ONSALE_ISSET_ID);
  }

  public void setOnSaleIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ONSALE_ISSET_ID, value);
  }

  public boolean isAvailableForPresent() {
    return this.availableForPresent;
  }

  public ProductSearchSummary setAvailableForPresent(boolean availableForPresent) {
    this.availableForPresent = availableForPresent;
    setAvailableForPresentIsSet(true);
    return this;
  }

  public void unsetAvailableForPresent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AVAILABLEFORPRESENT_ISSET_ID);
  }

  /** Returns true if field availableForPresent is set (has been assigned a value) and false otherwise */
  public boolean isSetAvailableForPresent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AVAILABLEFORPRESENT_ISSET_ID);
  }

  public void setAvailableForPresentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AVAILABLEFORPRESENT_ISSET_ID, value);
  }

  public boolean isAvailableForPurchase() {
    return this.availableForPurchase;
  }

  public ProductSearchSummary setAvailableForPurchase(boolean availableForPurchase) {
    this.availableForPurchase = availableForPurchase;
    setAvailableForPurchaseIsSet(true);
    return this;
  }

  public void unsetAvailableForPurchase() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AVAILABLEFORPURCHASE_ISSET_ID);
  }

  /** Returns true if field availableForPurchase is set (has been assigned a value) and false otherwise */
  public boolean isSetAvailableForPurchase() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AVAILABLEFORPURCHASE_ISSET_ID);
  }

  public void setAvailableForPurchaseIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AVAILABLEFORPURCHASE_ISSET_ID, value);
  }

  public int getValidDays() {
    return this.validDays;
  }

  public ProductSearchSummary setValidDays(int validDays) {
    this.validDays = validDays;
    setValidDaysIsSet(true);
    return this;
  }

  public void unsetValidDays() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VALIDDAYS_ISSET_ID);
  }

  /** Returns true if field validDays is set (has been assigned a value) and false otherwise */
  public boolean isSetValidDays() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VALIDDAYS_ISSET_ID);
  }

  public void setValidDaysIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VALIDDAYS_ISSET_ID, value);
  }

  public java.lang.String getAuthorId() {
    return this.authorId;
  }

  public ProductSearchSummary setAuthorId(java.lang.String authorId) {
    this.authorId = authorId;
    return this;
  }

  public void unsetAuthorId() {
    this.authorId = null;
  }

  /** Returns true if field authorId is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthorId() {
    return this.authorId != null;
  }

  public void setAuthorIdIsSet(boolean value) {
    if (!value) {
      this.authorId = null;
    }
  }

  public boolean isSaleFlag() {
    return this.saleFlag;
  }

  public ProductSearchSummary setSaleFlag(boolean saleFlag) {
    this.saleFlag = saleFlag;
    setSaleFlagIsSet(true);
    return this;
  }

  public void unsetSaleFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SALEFLAG_ISSET_ID);
  }

  /** Returns true if field saleFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetSaleFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SALEFLAG_ISSET_ID);
  }

  public void setSaleFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SALEFLAG_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((PType)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case AUTHOR:
      if (value == null) {
        unsetAuthor();
      } else {
        setAuthor((java.lang.String)value);
      }
      break;

    case PROMOTION_INFO:
      if (value == null) {
        unsetPromotionInfo();
      } else {
        setPromotionInfo((PromotionInfo)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((java.lang.Long)value);
      }
      break;

    case NEW_FLAG:
      if (value == null) {
        unsetNewFlag();
      } else {
        setNewFlag((java.lang.Boolean)value);
      }
      break;

    case PRICE_TIER:
      if (value == null) {
        unsetPriceTier();
      } else {
        setPriceTier((java.lang.Integer)value);
      }
      break;

    case PRICE_IN_LINE_COIN:
      if (value == null) {
        unsetPriceInLineCoin();
      } else {
        setPriceInLineCoin((java.lang.String)value);
      }
      break;

    case PROPERTY:
      if (value == null) {
        unsetProperty();
      } else {
        setProperty((ProductProperty)value);
      }
      break;

    case SUB_TYPE:
      if (value == null) {
        unsetSubType();
      } else {
        setSubType((SubType)value);
      }
      break;

    case ON_SALE:
      if (value == null) {
        unsetOnSale();
      } else {
        setOnSale((java.lang.Boolean)value);
      }
      break;

    case AVAILABLE_FOR_PRESENT:
      if (value == null) {
        unsetAvailableForPresent();
      } else {
        setAvailableForPresent((java.lang.Boolean)value);
      }
      break;

    case AVAILABLE_FOR_PURCHASE:
      if (value == null) {
        unsetAvailableForPurchase();
      } else {
        setAvailableForPurchase((java.lang.Boolean)value);
      }
      break;

    case VALID_DAYS:
      if (value == null) {
        unsetValidDays();
      } else {
        setValidDays((java.lang.Integer)value);
      }
      break;

    case AUTHOR_ID:
      if (value == null) {
        unsetAuthorId();
      } else {
        setAuthorId((java.lang.String)value);
      }
      break;

    case SALE_FLAG:
      if (value == null) {
        unsetSaleFlag();
      } else {
        setSaleFlag((java.lang.Boolean)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TYPE:
      return getType();

    case NAME:
      return getName();

    case AUTHOR:
      return getAuthor();

    case PROMOTION_INFO:
      return getPromotionInfo();

    case VERSION:
      return getVersion();

    case NEW_FLAG:
      return isNewFlag();

    case PRICE_TIER:
      return getPriceTier();

    case PRICE_IN_LINE_COIN:
      return getPriceInLineCoin();

    case PROPERTY:
      return getProperty();

    case SUB_TYPE:
      return getSubType();

    case ON_SALE:
      return isOnSale();

    case AVAILABLE_FOR_PRESENT:
      return isAvailableForPresent();

    case AVAILABLE_FOR_PURCHASE:
      return isAvailableForPurchase();

    case VALID_DAYS:
      return getValidDays();

    case AUTHOR_ID:
      return getAuthorId();

    case SALE_FLAG:
      return isSaleFlag();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TYPE:
      return isSetType();
    case NAME:
      return isSetName();
    case AUTHOR:
      return isSetAuthor();
    case PROMOTION_INFO:
      return isSetPromotionInfo();
    case VERSION:
      return isSetVersion();
    case NEW_FLAG:
      return isSetNewFlag();
    case PRICE_TIER:
      return isSetPriceTier();
    case PRICE_IN_LINE_COIN:
      return isSetPriceInLineCoin();
    case PROPERTY:
      return isSetProperty();
    case SUB_TYPE:
      return isSetSubType();
    case ON_SALE:
      return isSetOnSale();
    case AVAILABLE_FOR_PRESENT:
      return isSetAvailableForPresent();
    case AVAILABLE_FOR_PURCHASE:
      return isSetAvailableForPurchase();
    case VALID_DAYS:
      return isSetValidDays();
    case AUTHOR_ID:
      return isSetAuthorId();
    case SALE_FLAG:
      return isSetSaleFlag();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ProductSearchSummary)
      return this.equals((ProductSearchSummary)that);
    return false;
  }

  public boolean equals(ProductSearchSummary that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_author = true && this.isSetAuthor();
    boolean that_present_author = true && that.isSetAuthor();
    if (this_present_author || that_present_author) {
      if (!(this_present_author && that_present_author))
        return false;
      if (!this.author.equals(that.author))
        return false;
    }

    boolean this_present_promotionInfo = true && this.isSetPromotionInfo();
    boolean that_present_promotionInfo = true && that.isSetPromotionInfo();
    if (this_present_promotionInfo || that_present_promotionInfo) {
      if (!(this_present_promotionInfo && that_present_promotionInfo))
        return false;
      if (!this.promotionInfo.equals(that.promotionInfo))
        return false;
    }

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_newFlag = true;
    boolean that_present_newFlag = true;
    if (this_present_newFlag || that_present_newFlag) {
      if (!(this_present_newFlag && that_present_newFlag))
        return false;
      if (this.newFlag != that.newFlag)
        return false;
    }

    boolean this_present_priceTier = true;
    boolean that_present_priceTier = true;
    if (this_present_priceTier || that_present_priceTier) {
      if (!(this_present_priceTier && that_present_priceTier))
        return false;
      if (this.priceTier != that.priceTier)
        return false;
    }

    boolean this_present_priceInLineCoin = true && this.isSetPriceInLineCoin();
    boolean that_present_priceInLineCoin = true && that.isSetPriceInLineCoin();
    if (this_present_priceInLineCoin || that_present_priceInLineCoin) {
      if (!(this_present_priceInLineCoin && that_present_priceInLineCoin))
        return false;
      if (!this.priceInLineCoin.equals(that.priceInLineCoin))
        return false;
    }

    boolean this_present_property = true && this.isSetProperty();
    boolean that_present_property = true && that.isSetProperty();
    if (this_present_property || that_present_property) {
      if (!(this_present_property && that_present_property))
        return false;
      if (!this.property.equals(that.property))
        return false;
    }

    boolean this_present_subType = true && this.isSetSubType();
    boolean that_present_subType = true && that.isSetSubType();
    if (this_present_subType || that_present_subType) {
      if (!(this_present_subType && that_present_subType))
        return false;
      if (!this.subType.equals(that.subType))
        return false;
    }

    boolean this_present_onSale = true;
    boolean that_present_onSale = true;
    if (this_present_onSale || that_present_onSale) {
      if (!(this_present_onSale && that_present_onSale))
        return false;
      if (this.onSale != that.onSale)
        return false;
    }

    boolean this_present_availableForPresent = true;
    boolean that_present_availableForPresent = true;
    if (this_present_availableForPresent || that_present_availableForPresent) {
      if (!(this_present_availableForPresent && that_present_availableForPresent))
        return false;
      if (this.availableForPresent != that.availableForPresent)
        return false;
    }

    boolean this_present_availableForPurchase = true;
    boolean that_present_availableForPurchase = true;
    if (this_present_availableForPurchase || that_present_availableForPurchase) {
      if (!(this_present_availableForPurchase && that_present_availableForPurchase))
        return false;
      if (this.availableForPurchase != that.availableForPurchase)
        return false;
    }

    boolean this_present_validDays = true;
    boolean that_present_validDays = true;
    if (this_present_validDays || that_present_validDays) {
      if (!(this_present_validDays && that_present_validDays))
        return false;
      if (this.validDays != that.validDays)
        return false;
    }

    boolean this_present_authorId = true && this.isSetAuthorId();
    boolean that_present_authorId = true && that.isSetAuthorId();
    if (this_present_authorId || that_present_authorId) {
      if (!(this_present_authorId && that_present_authorId))
        return false;
      if (!this.authorId.equals(that.authorId))
        return false;
    }

    boolean this_present_saleFlag = true;
    boolean that_present_saleFlag = true;
    if (this_present_saleFlag || that_present_saleFlag) {
      if (!(this_present_saleFlag && that_present_saleFlag))
        return false;
      if (this.saleFlag != that.saleFlag)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.getValue();

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetAuthor()) ? 131071 : 524287);
    if (isSetAuthor())
      hashCode = hashCode * 8191 + author.hashCode();

    hashCode = hashCode * 8191 + ((isSetPromotionInfo()) ? 131071 : 524287);
    if (isSetPromotionInfo())
      hashCode = hashCode * 8191 + promotionInfo.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(version);

    hashCode = hashCode * 8191 + ((newFlag) ? 131071 : 524287);

    hashCode = hashCode * 8191 + priceTier;

    hashCode = hashCode * 8191 + ((isSetPriceInLineCoin()) ? 131071 : 524287);
    if (isSetPriceInLineCoin())
      hashCode = hashCode * 8191 + priceInLineCoin.hashCode();

    hashCode = hashCode * 8191 + ((isSetProperty()) ? 131071 : 524287);
    if (isSetProperty())
      hashCode = hashCode * 8191 + property.hashCode();

    hashCode = hashCode * 8191 + ((isSetSubType()) ? 131071 : 524287);
    if (isSetSubType())
      hashCode = hashCode * 8191 + subType.getValue();

    hashCode = hashCode * 8191 + ((onSale) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((availableForPresent) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((availableForPurchase) ? 131071 : 524287);

    hashCode = hashCode * 8191 + validDays;

    hashCode = hashCode * 8191 + ((isSetAuthorId()) ? 131071 : 524287);
    if (isSetAuthorId())
      hashCode = hashCode * 8191 + authorId.hashCode();

    hashCode = hashCode * 8191 + ((saleFlag) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(ProductSearchSummary other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAuthor()).compareTo(other.isSetAuthor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.author, other.author);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPromotionInfo()).compareTo(other.isSetPromotionInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPromotionInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.promotionInfo, other.promotionInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNewFlag()).compareTo(other.isSetNewFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newFlag, other.newFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPriceTier()).compareTo(other.isSetPriceTier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriceTier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceTier, other.priceTier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPriceInLineCoin()).compareTo(other.isSetPriceInLineCoin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriceInLineCoin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceInLineCoin, other.priceInLineCoin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProperty()).compareTo(other.isSetProperty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.property, other.property);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSubType()).compareTo(other.isSetSubType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subType, other.subType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOnSale()).compareTo(other.isSetOnSale());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnSale()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.onSale, other.onSale);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAvailableForPresent()).compareTo(other.isSetAvailableForPresent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvailableForPresent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.availableForPresent, other.availableForPresent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAvailableForPurchase()).compareTo(other.isSetAvailableForPurchase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvailableForPurchase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.availableForPurchase, other.availableForPurchase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetValidDays()).compareTo(other.isSetValidDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValidDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validDays, other.validDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAuthorId()).compareTo(other.isSetAuthorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorId, other.authorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSaleFlag()).compareTo(other.isSetSaleFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSaleFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.saleFlag, other.saleFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ProductSearchSummary(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("author:");
    if (this.author == null) {
      sb.append("null");
    } else {
      sb.append(this.author);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("promotionInfo:");
    if (this.promotionInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.promotionInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("newFlag:");
    sb.append(this.newFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("priceTier:");
    sb.append(this.priceTier);
    first = false;
    if (!first) sb.append(", ");
    sb.append("priceInLineCoin:");
    if (this.priceInLineCoin == null) {
      sb.append("null");
    } else {
      sb.append(this.priceInLineCoin);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("property:");
    if (this.property == null) {
      sb.append("null");
    } else {
      sb.append(this.property);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subType:");
    if (this.subType == null) {
      sb.append("null");
    } else {
      sb.append(this.subType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("onSale:");
    sb.append(this.onSale);
    first = false;
    if (!first) sb.append(", ");
    sb.append("availableForPresent:");
    sb.append(this.availableForPresent);
    first = false;
    if (!first) sb.append(", ");
    sb.append("availableForPurchase:");
    sb.append(this.availableForPurchase);
    first = false;
    if (!first) sb.append(", ");
    sb.append("validDays:");
    sb.append(this.validDays);
    first = false;
    if (!first) sb.append(", ");
    sb.append("authorId:");
    if (this.authorId == null) {
      sb.append("null");
    } else {
      sb.append(this.authorId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("saleFlag:");
    sb.append(this.saleFlag);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (promotionInfo != null) {
      promotionInfo.validate();
    }
    if (property != null) {
      property.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProductSearchSummaryStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ProductSearchSummaryStandardScheme getScheme() {
      return new ProductSearchSummaryStandardScheme();
    }
  }

  private static class ProductSearchSummaryStandardScheme extends org.apache.thrift.scheme.StandardScheme<ProductSearchSummary> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProductSearchSummary struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = PType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AUTHOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.author = iprot.readString();
              struct.setAuthorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROMOTION_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.promotionInfo = new PromotionInfo();
              struct.promotionInfo.read(iprot);
              struct.setPromotionInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.version = iprot.readI64();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NEW_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.newFlag = iprot.readBool();
              struct.setNewFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PRICE_TIER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.priceTier = iprot.readI32();
              struct.setPriceTierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PRICE_IN_LINE_COIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.priceInLineCoin = iprot.readString();
              struct.setPriceInLineCoinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PROPERTY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.property = new ProductProperty();
              struct.property.read(iprot);
              struct.setPropertyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SUB_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.subType = SubType.findByValue(iprot.readI32());
              struct.setSubTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ON_SALE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.onSale = iprot.readBool();
              struct.setOnSaleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // AVAILABLE_FOR_PRESENT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.availableForPresent = iprot.readBool();
              struct.setAvailableForPresentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // AVAILABLE_FOR_PURCHASE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.availableForPurchase = iprot.readBool();
              struct.setAvailableForPurchaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // VALID_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.validDays = iprot.readI32();
              struct.setValidDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // AUTHOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.authorId = iprot.readString();
              struct.setAuthorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // SALE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.saleFlag = iprot.readBool();
              struct.setSaleFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProductSearchSummary struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.author != null) {
        oprot.writeFieldBegin(AUTHOR_FIELD_DESC);
        oprot.writeString(struct.author);
        oprot.writeFieldEnd();
      }
      if (struct.promotionInfo != null) {
        oprot.writeFieldBegin(PROMOTION_INFO_FIELD_DESC);
        struct.promotionInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI64(struct.version);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEW_FLAG_FIELD_DESC);
      oprot.writeBool(struct.newFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRICE_TIER_FIELD_DESC);
      oprot.writeI32(struct.priceTier);
      oprot.writeFieldEnd();
      if (struct.priceInLineCoin != null) {
        oprot.writeFieldBegin(PRICE_IN_LINE_COIN_FIELD_DESC);
        oprot.writeString(struct.priceInLineCoin);
        oprot.writeFieldEnd();
      }
      if (struct.property != null) {
        oprot.writeFieldBegin(PROPERTY_FIELD_DESC);
        struct.property.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.subType != null) {
        oprot.writeFieldBegin(SUB_TYPE_FIELD_DESC);
        oprot.writeI32(struct.subType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ON_SALE_FIELD_DESC);
      oprot.writeBool(struct.onSale);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVAILABLE_FOR_PRESENT_FIELD_DESC);
      oprot.writeBool(struct.availableForPresent);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVAILABLE_FOR_PURCHASE_FIELD_DESC);
      oprot.writeBool(struct.availableForPurchase);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VALID_DAYS_FIELD_DESC);
      oprot.writeI32(struct.validDays);
      oprot.writeFieldEnd();
      if (struct.authorId != null) {
        oprot.writeFieldBegin(AUTHOR_ID_FIELD_DESC);
        oprot.writeString(struct.authorId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SALE_FLAG_FIELD_DESC);
      oprot.writeBool(struct.saleFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProductSearchSummaryTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ProductSearchSummaryTupleScheme getScheme() {
      return new ProductSearchSummaryTupleScheme();
    }
  }

  private static class ProductSearchSummaryTupleScheme extends org.apache.thrift.scheme.TupleScheme<ProductSearchSummary> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProductSearchSummary struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetType()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetAuthor()) {
        optionals.set(3);
      }
      if (struct.isSetPromotionInfo()) {
        optionals.set(4);
      }
      if (struct.isSetVersion()) {
        optionals.set(5);
      }
      if (struct.isSetNewFlag()) {
        optionals.set(6);
      }
      if (struct.isSetPriceTier()) {
        optionals.set(7);
      }
      if (struct.isSetPriceInLineCoin()) {
        optionals.set(8);
      }
      if (struct.isSetProperty()) {
        optionals.set(9);
      }
      if (struct.isSetSubType()) {
        optionals.set(10);
      }
      if (struct.isSetOnSale()) {
        optionals.set(11);
      }
      if (struct.isSetAvailableForPresent()) {
        optionals.set(12);
      }
      if (struct.isSetAvailableForPurchase()) {
        optionals.set(13);
      }
      if (struct.isSetValidDays()) {
        optionals.set(14);
      }
      if (struct.isSetAuthorId()) {
        optionals.set(15);
      }
      if (struct.isSetSaleFlag()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetAuthor()) {
        oprot.writeString(struct.author);
      }
      if (struct.isSetPromotionInfo()) {
        struct.promotionInfo.write(oprot);
      }
      if (struct.isSetVersion()) {
        oprot.writeI64(struct.version);
      }
      if (struct.isSetNewFlag()) {
        oprot.writeBool(struct.newFlag);
      }
      if (struct.isSetPriceTier()) {
        oprot.writeI32(struct.priceTier);
      }
      if (struct.isSetPriceInLineCoin()) {
        oprot.writeString(struct.priceInLineCoin);
      }
      if (struct.isSetProperty()) {
        struct.property.write(oprot);
      }
      if (struct.isSetSubType()) {
        oprot.writeI32(struct.subType.getValue());
      }
      if (struct.isSetOnSale()) {
        oprot.writeBool(struct.onSale);
      }
      if (struct.isSetAvailableForPresent()) {
        oprot.writeBool(struct.availableForPresent);
      }
      if (struct.isSetAvailableForPurchase()) {
        oprot.writeBool(struct.availableForPurchase);
      }
      if (struct.isSetValidDays()) {
        oprot.writeI32(struct.validDays);
      }
      if (struct.isSetAuthorId()) {
        oprot.writeString(struct.authorId);
      }
      if (struct.isSetSaleFlag()) {
        oprot.writeBool(struct.saleFlag);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProductSearchSummary struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.type = PType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.author = iprot.readString();
        struct.setAuthorIsSet(true);
      }
      if (incoming.get(4)) {
        struct.promotionInfo = new PromotionInfo();
        struct.promotionInfo.read(iprot);
        struct.setPromotionInfoIsSet(true);
      }
      if (incoming.get(5)) {
        struct.version = iprot.readI64();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(6)) {
        struct.newFlag = iprot.readBool();
        struct.setNewFlagIsSet(true);
      }
      if (incoming.get(7)) {
        struct.priceTier = iprot.readI32();
        struct.setPriceTierIsSet(true);
      }
      if (incoming.get(8)) {
        struct.priceInLineCoin = iprot.readString();
        struct.setPriceInLineCoinIsSet(true);
      }
      if (incoming.get(9)) {
        struct.property = new ProductProperty();
        struct.property.read(iprot);
        struct.setPropertyIsSet(true);
      }
      if (incoming.get(10)) {
        struct.subType = SubType.findByValue(iprot.readI32());
        struct.setSubTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.onSale = iprot.readBool();
        struct.setOnSaleIsSet(true);
      }
      if (incoming.get(12)) {
        struct.availableForPresent = iprot.readBool();
        struct.setAvailableForPresentIsSet(true);
      }
      if (incoming.get(13)) {
        struct.availableForPurchase = iprot.readBool();
        struct.setAvailableForPurchaseIsSet(true);
      }
      if (incoming.get(14)) {
        struct.validDays = iprot.readI32();
        struct.setValidDaysIsSet(true);
      }
      if (incoming.get(15)) {
        struct.authorId = iprot.readString();
        struct.setAuthorIdIsSet(true);
      }
      if (incoming.get(16)) {
        struct.saleFlag = iprot.readBool();
        struct.setSaleFlagIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

