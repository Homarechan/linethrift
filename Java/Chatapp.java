/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-17")
public class Chatapp implements org.apache.thrift.TBase<Chatapp, Chatapp._Fields>, java.io.Serializable, Cloneable, Comparable<Chatapp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Chatapp");

  private static final org.apache.thrift.protocol.TField CHATAPP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chatappId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ICON_FIELD_DESC = new org.apache.thrift.protocol.TField("icon", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField AVAILABLE_CHAT_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("availableChatTypes", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ChatappStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ChatappTupleSchemeFactory();

  public java.lang.String chatappId; // required
  public java.lang.String name; // required
  public java.lang.String icon; // required
  public java.lang.String url; // required
  public java.util.List<AvailableChatTypes> availableChatTypes; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHATAPP_ID((short)1, "chatappId"),
    NAME((short)2, "name"),
    ICON((short)3, "icon"),
    URL((short)4, "url"),
    AVAILABLE_CHAT_TYPES((short)5, "availableChatTypes");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHATAPP_ID
          return CHATAPP_ID;
        case 2: // NAME
          return NAME;
        case 3: // ICON
          return ICON;
        case 4: // URL
          return URL;
        case 5: // AVAILABLE_CHAT_TYPES
          return AVAILABLE_CHAT_TYPES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHATAPP_ID, new org.apache.thrift.meta_data.FieldMetaData("chatappId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ICON, new org.apache.thrift.meta_data.FieldMetaData("icon", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AVAILABLE_CHAT_TYPES, new org.apache.thrift.meta_data.FieldMetaData("availableChatTypes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AvailableChatTypes.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Chatapp.class, metaDataMap);
  }

  public Chatapp() {
  }

  public Chatapp(
    java.lang.String chatappId,
    java.lang.String name,
    java.lang.String icon,
    java.lang.String url,
    java.util.List<AvailableChatTypes> availableChatTypes)
  {
    this();
    this.chatappId = chatappId;
    this.name = name;
    this.icon = icon;
    this.url = url;
    this.availableChatTypes = availableChatTypes;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Chatapp(Chatapp other) {
    if (other.isSetChatappId()) {
      this.chatappId = other.chatappId;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetIcon()) {
      this.icon = other.icon;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetAvailableChatTypes()) {
      java.util.List<AvailableChatTypes> __this__availableChatTypes = new java.util.ArrayList<AvailableChatTypes>(other.availableChatTypes.size());
      for (AvailableChatTypes other_element : other.availableChatTypes) {
        __this__availableChatTypes.add(other_element);
      }
      this.availableChatTypes = __this__availableChatTypes;
    }
  }

  public Chatapp deepCopy() {
    return new Chatapp(this);
  }

  @Override
  public void clear() {
    this.chatappId = null;
    this.name = null;
    this.icon = null;
    this.url = null;
    this.availableChatTypes = null;
  }

  public java.lang.String getChatappId() {
    return this.chatappId;
  }

  public Chatapp setChatappId(java.lang.String chatappId) {
    this.chatappId = chatappId;
    return this;
  }

  public void unsetChatappId() {
    this.chatappId = null;
  }

  /** Returns true if field chatappId is set (has been assigned a value) and false otherwise */
  public boolean isSetChatappId() {
    return this.chatappId != null;
  }

  public void setChatappIdIsSet(boolean value) {
    if (!value) {
      this.chatappId = null;
    }
  }

  public java.lang.String getName() {
    return this.name;
  }

  public Chatapp setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public java.lang.String getIcon() {
    return this.icon;
  }

  public Chatapp setIcon(java.lang.String icon) {
    this.icon = icon;
    return this;
  }

  public void unsetIcon() {
    this.icon = null;
  }

  /** Returns true if field icon is set (has been assigned a value) and false otherwise */
  public boolean isSetIcon() {
    return this.icon != null;
  }

  public void setIconIsSet(boolean value) {
    if (!value) {
      this.icon = null;
    }
  }

  public java.lang.String getUrl() {
    return this.url;
  }

  public Chatapp setUrl(java.lang.String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public int getAvailableChatTypesSize() {
    return (this.availableChatTypes == null) ? 0 : this.availableChatTypes.size();
  }

  public java.util.Iterator<AvailableChatTypes> getAvailableChatTypesIterator() {
    return (this.availableChatTypes == null) ? null : this.availableChatTypes.iterator();
  }

  public void addToAvailableChatTypes(AvailableChatTypes elem) {
    if (this.availableChatTypes == null) {
      this.availableChatTypes = new java.util.ArrayList<AvailableChatTypes>();
    }
    this.availableChatTypes.add(elem);
  }

  public java.util.List<AvailableChatTypes> getAvailableChatTypes() {
    return this.availableChatTypes;
  }

  public Chatapp setAvailableChatTypes(java.util.List<AvailableChatTypes> availableChatTypes) {
    this.availableChatTypes = availableChatTypes;
    return this;
  }

  public void unsetAvailableChatTypes() {
    this.availableChatTypes = null;
  }

  /** Returns true if field availableChatTypes is set (has been assigned a value) and false otherwise */
  public boolean isSetAvailableChatTypes() {
    return this.availableChatTypes != null;
  }

  public void setAvailableChatTypesIsSet(boolean value) {
    if (!value) {
      this.availableChatTypes = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case CHATAPP_ID:
      if (value == null) {
        unsetChatappId();
      } else {
        setChatappId((java.lang.String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case ICON:
      if (value == null) {
        unsetIcon();
      } else {
        setIcon((java.lang.String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((java.lang.String)value);
      }
      break;

    case AVAILABLE_CHAT_TYPES:
      if (value == null) {
        unsetAvailableChatTypes();
      } else {
        setAvailableChatTypes((java.util.List<AvailableChatTypes>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CHATAPP_ID:
      return getChatappId();

    case NAME:
      return getName();

    case ICON:
      return getIcon();

    case URL:
      return getUrl();

    case AVAILABLE_CHAT_TYPES:
      return getAvailableChatTypes();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CHATAPP_ID:
      return isSetChatappId();
    case NAME:
      return isSetName();
    case ICON:
      return isSetIcon();
    case URL:
      return isSetUrl();
    case AVAILABLE_CHAT_TYPES:
      return isSetAvailableChatTypes();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Chatapp)
      return this.equals((Chatapp)that);
    return false;
  }

  public boolean equals(Chatapp that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_chatappId = true && this.isSetChatappId();
    boolean that_present_chatappId = true && that.isSetChatappId();
    if (this_present_chatappId || that_present_chatappId) {
      if (!(this_present_chatappId && that_present_chatappId))
        return false;
      if (!this.chatappId.equals(that.chatappId))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_icon = true && this.isSetIcon();
    boolean that_present_icon = true && that.isSetIcon();
    if (this_present_icon || that_present_icon) {
      if (!(this_present_icon && that_present_icon))
        return false;
      if (!this.icon.equals(that.icon))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_availableChatTypes = true && this.isSetAvailableChatTypes();
    boolean that_present_availableChatTypes = true && that.isSetAvailableChatTypes();
    if (this_present_availableChatTypes || that_present_availableChatTypes) {
      if (!(this_present_availableChatTypes && that_present_availableChatTypes))
        return false;
      if (!this.availableChatTypes.equals(that.availableChatTypes))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetChatappId()) ? 131071 : 524287);
    if (isSetChatappId())
      hashCode = hashCode * 8191 + chatappId.hashCode();

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetIcon()) ? 131071 : 524287);
    if (isSetIcon())
      hashCode = hashCode * 8191 + icon.hashCode();

    hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
    if (isSetUrl())
      hashCode = hashCode * 8191 + url.hashCode();

    hashCode = hashCode * 8191 + ((isSetAvailableChatTypes()) ? 131071 : 524287);
    if (isSetAvailableChatTypes())
      hashCode = hashCode * 8191 + availableChatTypes.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Chatapp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetChatappId()).compareTo(other.isSetChatappId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChatappId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chatappId, other.chatappId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIcon()).compareTo(other.isSetIcon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIcon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.icon, other.icon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAvailableChatTypes()).compareTo(other.isSetAvailableChatTypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvailableChatTypes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.availableChatTypes, other.availableChatTypes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Chatapp(");
    boolean first = true;

    sb.append("chatappId:");
    if (this.chatappId == null) {
      sb.append("null");
    } else {
      sb.append(this.chatappId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("icon:");
    if (this.icon == null) {
      sb.append("null");
    } else {
      sb.append(this.icon);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("availableChatTypes:");
    if (this.availableChatTypes == null) {
      sb.append("null");
    } else {
      sb.append(this.availableChatTypes);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChatappStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ChatappStandardScheme getScheme() {
      return new ChatappStandardScheme();
    }
  }

  private static class ChatappStandardScheme extends org.apache.thrift.scheme.StandardScheme<Chatapp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Chatapp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHATAPP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chatappId = iprot.readString();
              struct.setChatappIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ICON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.icon = iprot.readString();
              struct.setIconIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AVAILABLE_CHAT_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.availableChatTypes = new java.util.ArrayList<AvailableChatTypes>(_list0.size);
                AvailableChatTypes _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = AvailableChatTypes.findByValue(iprot.readI32());
                  if (_elem1 != null)
                  {
                    struct.availableChatTypes.add(_elem1);
                  }
                }
                iprot.readListEnd();
              }
              struct.setAvailableChatTypesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Chatapp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.chatappId != null) {
        oprot.writeFieldBegin(CHATAPP_ID_FIELD_DESC);
        oprot.writeString(struct.chatappId);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.icon != null) {
        oprot.writeFieldBegin(ICON_FIELD_DESC);
        oprot.writeString(struct.icon);
        oprot.writeFieldEnd();
      }
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      if (struct.availableChatTypes != null) {
        oprot.writeFieldBegin(AVAILABLE_CHAT_TYPES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.availableChatTypes.size()));
          for (AvailableChatTypes _iter3 : struct.availableChatTypes)
          {
            oprot.writeI32(_iter3.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChatappTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ChatappTupleScheme getScheme() {
      return new ChatappTupleScheme();
    }
  }

  private static class ChatappTupleScheme extends org.apache.thrift.scheme.TupleScheme<Chatapp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Chatapp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetChatappId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetIcon()) {
        optionals.set(2);
      }
      if (struct.isSetUrl()) {
        optionals.set(3);
      }
      if (struct.isSetAvailableChatTypes()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetChatappId()) {
        oprot.writeString(struct.chatappId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetIcon()) {
        oprot.writeString(struct.icon);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetAvailableChatTypes()) {
        {
          oprot.writeI32(struct.availableChatTypes.size());
          for (AvailableChatTypes _iter4 : struct.availableChatTypes)
          {
            oprot.writeI32(_iter4.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Chatapp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.chatappId = iprot.readString();
        struct.setChatappIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.icon = iprot.readString();
        struct.setIconIsSet(true);
      }
      if (incoming.get(3)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.availableChatTypes = new java.util.ArrayList<AvailableChatTypes>(_list5.size);
          AvailableChatTypes _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = AvailableChatTypes.findByValue(iprot.readI32());
            if (_elem6 != null)
            {
              struct.availableChatTypes.add(_elem6);
            }
          }
        }
        struct.setAvailableChatTypesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

