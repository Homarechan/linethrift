/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-17")
public class ChannelIdWithLastUpdated implements org.apache.thrift.TBase<ChannelIdWithLastUpdated, ChannelIdWithLastUpdated._Fields>, java.io.Serializable, Cloneable, Comparable<ChannelIdWithLastUpdated> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ChannelIdWithLastUpdated");

  private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LAST_UPDATED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdated", org.apache.thrift.protocol.TType.I64, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ChannelIdWithLastUpdatedStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ChannelIdWithLastUpdatedTupleSchemeFactory();

  public java.lang.String channelId; // required
  public long lastUpdated; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHANNEL_ID((short)1, "channelId"),
    LAST_UPDATED((short)2, "lastUpdated");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHANNEL_ID
          return CHANNEL_ID;
        case 2: // LAST_UPDATED
          return LAST_UPDATED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LASTUPDATED_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATED, new org.apache.thrift.meta_data.FieldMetaData("lastUpdated", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ChannelIdWithLastUpdated.class, metaDataMap);
  }

  public ChannelIdWithLastUpdated() {
  }

  public ChannelIdWithLastUpdated(
    java.lang.String channelId,
    long lastUpdated)
  {
    this();
    this.channelId = channelId;
    this.lastUpdated = lastUpdated;
    setLastUpdatedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChannelIdWithLastUpdated(ChannelIdWithLastUpdated other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetChannelId()) {
      this.channelId = other.channelId;
    }
    this.lastUpdated = other.lastUpdated;
  }

  public ChannelIdWithLastUpdated deepCopy() {
    return new ChannelIdWithLastUpdated(this);
  }

  @Override
  public void clear() {
    this.channelId = null;
    setLastUpdatedIsSet(false);
    this.lastUpdated = 0;
  }

  public java.lang.String getChannelId() {
    return this.channelId;
  }

  public ChannelIdWithLastUpdated setChannelId(java.lang.String channelId) {
    this.channelId = channelId;
    return this;
  }

  public void unsetChannelId() {
    this.channelId = null;
  }

  /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelId() {
    return this.channelId != null;
  }

  public void setChannelIdIsSet(boolean value) {
    if (!value) {
      this.channelId = null;
    }
  }

  public long getLastUpdated() {
    return this.lastUpdated;
  }

  public ChannelIdWithLastUpdated setLastUpdated(long lastUpdated) {
    this.lastUpdated = lastUpdated;
    setLastUpdatedIsSet(true);
    return this;
  }

  public void unsetLastUpdated() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LASTUPDATED_ISSET_ID);
  }

  /** Returns true if field lastUpdated is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdated() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LASTUPDATED_ISSET_ID);
  }

  public void setLastUpdatedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LASTUPDATED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case CHANNEL_ID:
      if (value == null) {
        unsetChannelId();
      } else {
        setChannelId((java.lang.String)value);
      }
      break;

    case LAST_UPDATED:
      if (value == null) {
        unsetLastUpdated();
      } else {
        setLastUpdated((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CHANNEL_ID:
      return getChannelId();

    case LAST_UPDATED:
      return getLastUpdated();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CHANNEL_ID:
      return isSetChannelId();
    case LAST_UPDATED:
      return isSetLastUpdated();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ChannelIdWithLastUpdated)
      return this.equals((ChannelIdWithLastUpdated)that);
    return false;
  }

  public boolean equals(ChannelIdWithLastUpdated that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_channelId = true && this.isSetChannelId();
    boolean that_present_channelId = true && that.isSetChannelId();
    if (this_present_channelId || that_present_channelId) {
      if (!(this_present_channelId && that_present_channelId))
        return false;
      if (!this.channelId.equals(that.channelId))
        return false;
    }

    boolean this_present_lastUpdated = true;
    boolean that_present_lastUpdated = true;
    if (this_present_lastUpdated || that_present_lastUpdated) {
      if (!(this_present_lastUpdated && that_present_lastUpdated))
        return false;
      if (this.lastUpdated != that.lastUpdated)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetChannelId()) ? 131071 : 524287);
    if (isSetChannelId())
      hashCode = hashCode * 8191 + channelId.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lastUpdated);

    return hashCode;
  }

  @Override
  public int compareTo(ChannelIdWithLastUpdated other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetChannelId()).compareTo(other.isSetChannelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, other.channelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLastUpdated()).compareTo(other.isSetLastUpdated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdated, other.lastUpdated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ChannelIdWithLastUpdated(");
    boolean first = true;

    sb.append("channelId:");
    if (this.channelId == null) {
      sb.append("null");
    } else {
      sb.append(this.channelId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdated:");
    sb.append(this.lastUpdated);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChannelIdWithLastUpdatedStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ChannelIdWithLastUpdatedStandardScheme getScheme() {
      return new ChannelIdWithLastUpdatedStandardScheme();
    }
  }

  private static class ChannelIdWithLastUpdatedStandardScheme extends org.apache.thrift.scheme.StandardScheme<ChannelIdWithLastUpdated> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ChannelIdWithLastUpdated struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHANNEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelId = iprot.readString();
              struct.setChannelIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LAST_UPDATED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastUpdated = iprot.readI64();
              struct.setLastUpdatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ChannelIdWithLastUpdated struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.channelId != null) {
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeString(struct.channelId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LAST_UPDATED_FIELD_DESC);
      oprot.writeI64(struct.lastUpdated);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChannelIdWithLastUpdatedTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ChannelIdWithLastUpdatedTupleScheme getScheme() {
      return new ChannelIdWithLastUpdatedTupleScheme();
    }
  }

  private static class ChannelIdWithLastUpdatedTupleScheme extends org.apache.thrift.scheme.TupleScheme<ChannelIdWithLastUpdated> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ChannelIdWithLastUpdated struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetChannelId()) {
        optionals.set(0);
      }
      if (struct.isSetLastUpdated()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetChannelId()) {
        oprot.writeString(struct.channelId);
      }
      if (struct.isSetLastUpdated()) {
        oprot.writeI64(struct.lastUpdated);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ChannelIdWithLastUpdated struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.channelId = iprot.readString();
        struct.setChannelIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.lastUpdated = iprot.readI64();
        struct.setLastUpdatedIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

