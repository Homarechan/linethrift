/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2019-09-28")
public class ProductCategory implements org.apache.thrift.TBase<ProductCategory, ProductCategory._Fields>, java.io.Serializable, Cloneable, Comparable<ProductCategory> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProductCategory");

  private static final org.apache.thrift.protocol.TField PRODUCT_CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productCategoryId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PRODUCT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("productCount", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NEW_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("newFlag", org.apache.thrift.protocol.TType.BOOL, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ProductCategoryStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ProductCategoryTupleSchemeFactory();

  public long productCategoryId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String title; // required
  public int productCount; // required
  public boolean newFlag; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PRODUCT_CATEGORY_ID((short)1, "productCategoryId"),
    TITLE((short)2, "title"),
    PRODUCT_COUNT((short)3, "productCount"),
    NEW_FLAG((short)4, "newFlag");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRODUCT_CATEGORY_ID
          return PRODUCT_CATEGORY_ID;
        case 2: // TITLE
          return TITLE;
        case 3: // PRODUCT_COUNT
          return PRODUCT_COUNT;
        case 4: // NEW_FLAG
          return NEW_FLAG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PRODUCTCATEGORYID_ISSET_ID = 0;
  private static final int __PRODUCTCOUNT_ISSET_ID = 1;
  private static final int __NEWFLAG_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRODUCT_CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("productCategoryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("productCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NEW_FLAG, new org.apache.thrift.meta_data.FieldMetaData("newFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProductCategory.class, metaDataMap);
  }

  public ProductCategory() {
  }

  public ProductCategory(
    long productCategoryId,
    java.lang.String title,
    int productCount,
    boolean newFlag)
  {
    this();
    this.productCategoryId = productCategoryId;
    setProductCategoryIdIsSet(true);
    this.title = title;
    this.productCount = productCount;
    setProductCountIsSet(true);
    this.newFlag = newFlag;
    setNewFlagIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProductCategory(ProductCategory other) {
    __isset_bitfield = other.__isset_bitfield;
    this.productCategoryId = other.productCategoryId;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    this.productCount = other.productCount;
    this.newFlag = other.newFlag;
  }

  public ProductCategory deepCopy() {
    return new ProductCategory(this);
  }

  @Override
  public void clear() {
    setProductCategoryIdIsSet(false);
    this.productCategoryId = 0;
    this.title = null;
    setProductCountIsSet(false);
    this.productCount = 0;
    setNewFlagIsSet(false);
    this.newFlag = false;
  }

  public long getProductCategoryId() {
    return this.productCategoryId;
  }

  public ProductCategory setProductCategoryId(long productCategoryId) {
    this.productCategoryId = productCategoryId;
    setProductCategoryIdIsSet(true);
    return this;
  }

  public void unsetProductCategoryId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRODUCTCATEGORYID_ISSET_ID);
  }

  /** Returns true if field productCategoryId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductCategoryId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRODUCTCATEGORYID_ISSET_ID);
  }

  public void setProductCategoryIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRODUCTCATEGORYID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTitle() {
    return this.title;
  }

  public ProductCategory setTitle(@org.apache.thrift.annotation.Nullable java.lang.String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public int getProductCount() {
    return this.productCount;
  }

  public ProductCategory setProductCount(int productCount) {
    this.productCount = productCount;
    setProductCountIsSet(true);
    return this;
  }

  public void unsetProductCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRODUCTCOUNT_ISSET_ID);
  }

  /** Returns true if field productCount is set (has been assigned a value) and false otherwise */
  public boolean isSetProductCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRODUCTCOUNT_ISSET_ID);
  }

  public void setProductCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRODUCTCOUNT_ISSET_ID, value);
  }

  public boolean isNewFlag() {
    return this.newFlag;
  }

  public ProductCategory setNewFlag(boolean newFlag) {
    this.newFlag = newFlag;
    setNewFlagIsSet(true);
    return this;
  }

  public void unsetNewFlag() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEWFLAG_ISSET_ID);
  }

  /** Returns true if field newFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetNewFlag() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEWFLAG_ISSET_ID);
  }

  public void setNewFlagIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEWFLAG_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case PRODUCT_CATEGORY_ID:
      if (value == null) {
        unsetProductCategoryId();
      } else {
        setProductCategoryId((java.lang.Long)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((java.lang.String)value);
      }
      break;

    case PRODUCT_COUNT:
      if (value == null) {
        unsetProductCount();
      } else {
        setProductCount((java.lang.Integer)value);
      }
      break;

    case NEW_FLAG:
      if (value == null) {
        unsetNewFlag();
      } else {
        setNewFlag((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PRODUCT_CATEGORY_ID:
      return getProductCategoryId();

    case TITLE:
      return getTitle();

    case PRODUCT_COUNT:
      return getProductCount();

    case NEW_FLAG:
      return isNewFlag();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PRODUCT_CATEGORY_ID:
      return isSetProductCategoryId();
    case TITLE:
      return isSetTitle();
    case PRODUCT_COUNT:
      return isSetProductCount();
    case NEW_FLAG:
      return isSetNewFlag();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ProductCategory)
      return this.equals((ProductCategory)that);
    return false;
  }

  public boolean equals(ProductCategory that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_productCategoryId = true;
    boolean that_present_productCategoryId = true;
    if (this_present_productCategoryId || that_present_productCategoryId) {
      if (!(this_present_productCategoryId && that_present_productCategoryId))
        return false;
      if (this.productCategoryId != that.productCategoryId)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_productCount = true;
    boolean that_present_productCount = true;
    if (this_present_productCount || that_present_productCount) {
      if (!(this_present_productCount && that_present_productCount))
        return false;
      if (this.productCount != that.productCount)
        return false;
    }

    boolean this_present_newFlag = true;
    boolean that_present_newFlag = true;
    if (this_present_newFlag || that_present_newFlag) {
      if (!(this_present_newFlag && that_present_newFlag))
        return false;
      if (this.newFlag != that.newFlag)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(productCategoryId);

    hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
    if (isSetTitle())
      hashCode = hashCode * 8191 + title.hashCode();

    hashCode = hashCode * 8191 + productCount;

    hashCode = hashCode * 8191 + ((newFlag) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(ProductCategory other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetProductCategoryId()).compareTo(other.isSetProductCategoryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductCategoryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCategoryId, other.productCategoryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProductCount()).compareTo(other.isSetProductCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCount, other.productCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNewFlag()).compareTo(other.isSetNewFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newFlag, other.newFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ProductCategory(");
    boolean first = true;

    sb.append("productCategoryId:");
    sb.append(this.productCategoryId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productCount:");
    sb.append(this.productCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("newFlag:");
    sb.append(this.newFlag);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProductCategoryStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ProductCategoryStandardScheme getScheme() {
      return new ProductCategoryStandardScheme();
    }
  }

  private static class ProductCategoryStandardScheme extends org.apache.thrift.scheme.StandardScheme<ProductCategory> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProductCategory struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRODUCT_CATEGORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.productCategoryId = iprot.readI64();
              struct.setProductCategoryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRODUCT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.productCount = iprot.readI32();
              struct.setProductCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NEW_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.newFlag = iprot.readBool();
              struct.setNewFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProductCategory struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PRODUCT_CATEGORY_ID_FIELD_DESC);
      oprot.writeI64(struct.productCategoryId);
      oprot.writeFieldEnd();
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRODUCT_COUNT_FIELD_DESC);
      oprot.writeI32(struct.productCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEW_FLAG_FIELD_DESC);
      oprot.writeBool(struct.newFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProductCategoryTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ProductCategoryTupleScheme getScheme() {
      return new ProductCategoryTupleScheme();
    }
  }

  private static class ProductCategoryTupleScheme extends org.apache.thrift.scheme.TupleScheme<ProductCategory> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProductCategory struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetProductCategoryId()) {
        optionals.set(0);
      }
      if (struct.isSetTitle()) {
        optionals.set(1);
      }
      if (struct.isSetProductCount()) {
        optionals.set(2);
      }
      if (struct.isSetNewFlag()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetProductCategoryId()) {
        oprot.writeI64(struct.productCategoryId);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetProductCount()) {
        oprot.writeI32(struct.productCount);
      }
      if (struct.isSetNewFlag()) {
        oprot.writeBool(struct.newFlag);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProductCategory struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.productCategoryId = iprot.readI64();
        struct.setProductCategoryIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.productCount = iprot.readI32();
        struct.setProductCountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.newFlag = iprot.readBool();
        struct.setNewFlagIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

