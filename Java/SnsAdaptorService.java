/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-04-18")
public class SnsAdaptorService {

  public interface Iface {

    public SnsFriends getSnsFriends(SnsIdType snsIdType, java.lang.String snsAccessToken, int startIdx, int limit) throws TalkException, org.apache.thrift.TException;

    public SnsProfile getSnsMyProfile(SnsIdType snsIdType, java.lang.String snsAccessToken) throws TalkException, org.apache.thrift.TException;

    public void postSnsInvitationMessage(SnsIdType snsIdType, java.lang.String snsAccessToken, java.lang.String toSnsUserId) throws TalkException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getSnsFriends(SnsIdType snsIdType, java.lang.String snsAccessToken, int startIdx, int limit, org.apache.thrift.async.AsyncMethodCallback<SnsFriends> resultHandler) throws org.apache.thrift.TException;

    public void getSnsMyProfile(SnsIdType snsIdType, java.lang.String snsAccessToken, org.apache.thrift.async.AsyncMethodCallback<SnsProfile> resultHandler) throws org.apache.thrift.TException;

    public void postSnsInvitationMessage(SnsIdType snsIdType, java.lang.String snsAccessToken, java.lang.String toSnsUserId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public SnsFriends getSnsFriends(SnsIdType snsIdType, java.lang.String snsAccessToken, int startIdx, int limit) throws TalkException, org.apache.thrift.TException
    {
      send_getSnsFriends(snsIdType, snsAccessToken, startIdx, limit);
      return recv_getSnsFriends();
    }

    public void send_getSnsFriends(SnsIdType snsIdType, java.lang.String snsAccessToken, int startIdx, int limit) throws org.apache.thrift.TException
    {
      getSnsFriends_args args = new getSnsFriends_args();
      args.setSnsIdType(snsIdType);
      args.setSnsAccessToken(snsAccessToken);
      args.setStartIdx(startIdx);
      args.setLimit(limit);
      sendBase("getSnsFriends", args);
    }

    public SnsFriends recv_getSnsFriends() throws TalkException, org.apache.thrift.TException
    {
      getSnsFriends_result result = new getSnsFriends_result();
      receiveBase(result, "getSnsFriends");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSnsFriends failed: unknown result");
    }

    public SnsProfile getSnsMyProfile(SnsIdType snsIdType, java.lang.String snsAccessToken) throws TalkException, org.apache.thrift.TException
    {
      send_getSnsMyProfile(snsIdType, snsAccessToken);
      return recv_getSnsMyProfile();
    }

    public void send_getSnsMyProfile(SnsIdType snsIdType, java.lang.String snsAccessToken) throws org.apache.thrift.TException
    {
      getSnsMyProfile_args args = new getSnsMyProfile_args();
      args.setSnsIdType(snsIdType);
      args.setSnsAccessToken(snsAccessToken);
      sendBase("getSnsMyProfile", args);
    }

    public SnsProfile recv_getSnsMyProfile() throws TalkException, org.apache.thrift.TException
    {
      getSnsMyProfile_result result = new getSnsMyProfile_result();
      receiveBase(result, "getSnsMyProfile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSnsMyProfile failed: unknown result");
    }

    public void postSnsInvitationMessage(SnsIdType snsIdType, java.lang.String snsAccessToken, java.lang.String toSnsUserId) throws TalkException, org.apache.thrift.TException
    {
      send_postSnsInvitationMessage(snsIdType, snsAccessToken, toSnsUserId);
      recv_postSnsInvitationMessage();
    }

    public void send_postSnsInvitationMessage(SnsIdType snsIdType, java.lang.String snsAccessToken, java.lang.String toSnsUserId) throws org.apache.thrift.TException
    {
      postSnsInvitationMessage_args args = new postSnsInvitationMessage_args();
      args.setSnsIdType(snsIdType);
      args.setSnsAccessToken(snsAccessToken);
      args.setToSnsUserId(toSnsUserId);
      sendBase("postSnsInvitationMessage", args);
    }

    public void recv_postSnsInvitationMessage() throws TalkException, org.apache.thrift.TException
    {
      postSnsInvitationMessage_result result = new postSnsInvitationMessage_result();
      receiveBase(result, "postSnsInvitationMessage");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getSnsFriends(SnsIdType snsIdType, java.lang.String snsAccessToken, int startIdx, int limit, org.apache.thrift.async.AsyncMethodCallback<SnsFriends> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSnsFriends_call method_call = new getSnsFriends_call(snsIdType, snsAccessToken, startIdx, limit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSnsFriends_call extends org.apache.thrift.async.TAsyncMethodCall<SnsFriends> {
      private SnsIdType snsIdType;
      private java.lang.String snsAccessToken;
      private int startIdx;
      private int limit;
      public getSnsFriends_call(SnsIdType snsIdType, java.lang.String snsAccessToken, int startIdx, int limit, org.apache.thrift.async.AsyncMethodCallback<SnsFriends> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.snsIdType = snsIdType;
        this.snsAccessToken = snsAccessToken;
        this.startIdx = startIdx;
        this.limit = limit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSnsFriends", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSnsFriends_args args = new getSnsFriends_args();
        args.setSnsIdType(snsIdType);
        args.setSnsAccessToken(snsAccessToken);
        args.setStartIdx(startIdx);
        args.setLimit(limit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SnsFriends getResult() throws TalkException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSnsFriends();
      }
    }

    public void getSnsMyProfile(SnsIdType snsIdType, java.lang.String snsAccessToken, org.apache.thrift.async.AsyncMethodCallback<SnsProfile> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSnsMyProfile_call method_call = new getSnsMyProfile_call(snsIdType, snsAccessToken, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSnsMyProfile_call extends org.apache.thrift.async.TAsyncMethodCall<SnsProfile> {
      private SnsIdType snsIdType;
      private java.lang.String snsAccessToken;
      public getSnsMyProfile_call(SnsIdType snsIdType, java.lang.String snsAccessToken, org.apache.thrift.async.AsyncMethodCallback<SnsProfile> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.snsIdType = snsIdType;
        this.snsAccessToken = snsAccessToken;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSnsMyProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSnsMyProfile_args args = new getSnsMyProfile_args();
        args.setSnsIdType(snsIdType);
        args.setSnsAccessToken(snsAccessToken);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SnsProfile getResult() throws TalkException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSnsMyProfile();
      }
    }

    public void postSnsInvitationMessage(SnsIdType snsIdType, java.lang.String snsAccessToken, java.lang.String toSnsUserId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postSnsInvitationMessage_call method_call = new postSnsInvitationMessage_call(snsIdType, snsAccessToken, toSnsUserId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postSnsInvitationMessage_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private SnsIdType snsIdType;
      private java.lang.String snsAccessToken;
      private java.lang.String toSnsUserId;
      public postSnsInvitationMessage_call(SnsIdType snsIdType, java.lang.String snsAccessToken, java.lang.String toSnsUserId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.snsIdType = snsIdType;
        this.snsAccessToken = snsAccessToken;
        this.toSnsUserId = toSnsUserId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postSnsInvitationMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postSnsInvitationMessage_args args = new postSnsInvitationMessage_args();
        args.setSnsIdType(snsIdType);
        args.setSnsAccessToken(snsAccessToken);
        args.setToSnsUserId(toSnsUserId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws TalkException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getSnsFriends", new getSnsFriends());
      processMap.put("getSnsMyProfile", new getSnsMyProfile());
      processMap.put("postSnsInvitationMessage", new postSnsInvitationMessage());
      return processMap;
    }

    public static class getSnsFriends<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSnsFriends_args> {
      public getSnsFriends() {
        super("getSnsFriends");
      }

      public getSnsFriends_args getEmptyArgsInstance() {
        return new getSnsFriends_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getSnsFriends_result getResult(I iface, getSnsFriends_args args) throws org.apache.thrift.TException {
        getSnsFriends_result result = new getSnsFriends_result();
        try {
          result.success = iface.getSnsFriends(args.snsIdType, args.snsAccessToken, args.startIdx, args.limit);
        } catch (TalkException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getSnsMyProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSnsMyProfile_args> {
      public getSnsMyProfile() {
        super("getSnsMyProfile");
      }

      public getSnsMyProfile_args getEmptyArgsInstance() {
        return new getSnsMyProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getSnsMyProfile_result getResult(I iface, getSnsMyProfile_args args) throws org.apache.thrift.TException {
        getSnsMyProfile_result result = new getSnsMyProfile_result();
        try {
          result.success = iface.getSnsMyProfile(args.snsIdType, args.snsAccessToken);
        } catch (TalkException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class postSnsInvitationMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postSnsInvitationMessage_args> {
      public postSnsInvitationMessage() {
        super("postSnsInvitationMessage");
      }

      public postSnsInvitationMessage_args getEmptyArgsInstance() {
        return new postSnsInvitationMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public postSnsInvitationMessage_result getResult(I iface, postSnsInvitationMessage_args args) throws org.apache.thrift.TException {
        postSnsInvitationMessage_result result = new postSnsInvitationMessage_result();
        try {
          iface.postSnsInvitationMessage(args.snsIdType, args.snsAccessToken, args.toSnsUserId);
        } catch (TalkException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getSnsFriends", new getSnsFriends());
      processMap.put("getSnsMyProfile", new getSnsMyProfile());
      processMap.put("postSnsInvitationMessage", new postSnsInvitationMessage());
      return processMap;
    }

    public static class getSnsFriends<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSnsFriends_args, SnsFriends> {
      public getSnsFriends() {
        super("getSnsFriends");
      }

      public getSnsFriends_args getEmptyArgsInstance() {
        return new getSnsFriends_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<SnsFriends> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<SnsFriends>() { 
          public void onComplete(SnsFriends o) {
            getSnsFriends_result result = new getSnsFriends_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getSnsFriends_result result = new getSnsFriends_result();
            if (e instanceof TalkException) {
              result.e = (TalkException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSnsFriends_args args, org.apache.thrift.async.AsyncMethodCallback<SnsFriends> resultHandler) throws org.apache.thrift.TException {
        iface.getSnsFriends(args.snsIdType, args.snsAccessToken, args.startIdx, args.limit,resultHandler);
      }
    }

    public static class getSnsMyProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSnsMyProfile_args, SnsProfile> {
      public getSnsMyProfile() {
        super("getSnsMyProfile");
      }

      public getSnsMyProfile_args getEmptyArgsInstance() {
        return new getSnsMyProfile_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<SnsProfile> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<SnsProfile>() { 
          public void onComplete(SnsProfile o) {
            getSnsMyProfile_result result = new getSnsMyProfile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getSnsMyProfile_result result = new getSnsMyProfile_result();
            if (e instanceof TalkException) {
              result.e = (TalkException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSnsMyProfile_args args, org.apache.thrift.async.AsyncMethodCallback<SnsProfile> resultHandler) throws org.apache.thrift.TException {
        iface.getSnsMyProfile(args.snsIdType, args.snsAccessToken,resultHandler);
      }
    }

    public static class postSnsInvitationMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postSnsInvitationMessage_args, Void> {
      public postSnsInvitationMessage() {
        super("postSnsInvitationMessage");
      }

      public postSnsInvitationMessage_args getEmptyArgsInstance() {
        return new postSnsInvitationMessage_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            postSnsInvitationMessage_result result = new postSnsInvitationMessage_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            postSnsInvitationMessage_result result = new postSnsInvitationMessage_result();
            if (e instanceof TalkException) {
              result.e = (TalkException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postSnsInvitationMessage_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.postSnsInvitationMessage(args.snsIdType, args.snsAccessToken, args.toSnsUserId,resultHandler);
      }
    }

  }

  public static class getSnsFriends_args implements org.apache.thrift.TBase<getSnsFriends_args, getSnsFriends_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSnsFriends_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSnsFriends_args");

    private static final org.apache.thrift.protocol.TField SNS_ID_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("snsIdType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SNS_ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("snsAccessToken", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField START_IDX_FIELD_DESC = new org.apache.thrift.protocol.TField("startIdx", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSnsFriends_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSnsFriends_argsTupleSchemeFactory();

    /**
     * 
     * @see SnsIdType
     */
    public SnsIdType snsIdType; // required
    public java.lang.String snsAccessToken; // required
    public int startIdx; // required
    public int limit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see SnsIdType
       */
      SNS_ID_TYPE((short)2, "snsIdType"),
      SNS_ACCESS_TOKEN((short)3, "snsAccessToken"),
      START_IDX((short)4, "startIdx"),
      LIMIT((short)5, "limit");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 2: // SNS_ID_TYPE
            return SNS_ID_TYPE;
          case 3: // SNS_ACCESS_TOKEN
            return SNS_ACCESS_TOKEN;
          case 4: // START_IDX
            return START_IDX;
          case 5: // LIMIT
            return LIMIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STARTIDX_ISSET_ID = 0;
    private static final int __LIMIT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SNS_ID_TYPE, new org.apache.thrift.meta_data.FieldMetaData("snsIdType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SnsIdType.class)));
      tmpMap.put(_Fields.SNS_ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("snsAccessToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_IDX, new org.apache.thrift.meta_data.FieldMetaData("startIdx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSnsFriends_args.class, metaDataMap);
    }

    public getSnsFriends_args() {
    }

    public getSnsFriends_args(
      SnsIdType snsIdType,
      java.lang.String snsAccessToken,
      int startIdx,
      int limit)
    {
      this();
      this.snsIdType = snsIdType;
      this.snsAccessToken = snsAccessToken;
      this.startIdx = startIdx;
      setStartIdxIsSet(true);
      this.limit = limit;
      setLimitIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSnsFriends_args(getSnsFriends_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSnsIdType()) {
        this.snsIdType = other.snsIdType;
      }
      if (other.isSetSnsAccessToken()) {
        this.snsAccessToken = other.snsAccessToken;
      }
      this.startIdx = other.startIdx;
      this.limit = other.limit;
    }

    public getSnsFriends_args deepCopy() {
      return new getSnsFriends_args(this);
    }

    @Override
    public void clear() {
      this.snsIdType = null;
      this.snsAccessToken = null;
      setStartIdxIsSet(false);
      this.startIdx = 0;
      setLimitIsSet(false);
      this.limit = 0;
    }

    /**
     * 
     * @see SnsIdType
     */
    public SnsIdType getSnsIdType() {
      return this.snsIdType;
    }

    /**
     * 
     * @see SnsIdType
     */
    public getSnsFriends_args setSnsIdType(SnsIdType snsIdType) {
      this.snsIdType = snsIdType;
      return this;
    }

    public void unsetSnsIdType() {
      this.snsIdType = null;
    }

    /** Returns true if field snsIdType is set (has been assigned a value) and false otherwise */
    public boolean isSetSnsIdType() {
      return this.snsIdType != null;
    }

    public void setSnsIdTypeIsSet(boolean value) {
      if (!value) {
        this.snsIdType = null;
      }
    }

    public java.lang.String getSnsAccessToken() {
      return this.snsAccessToken;
    }

    public getSnsFriends_args setSnsAccessToken(java.lang.String snsAccessToken) {
      this.snsAccessToken = snsAccessToken;
      return this;
    }

    public void unsetSnsAccessToken() {
      this.snsAccessToken = null;
    }

    /** Returns true if field snsAccessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSnsAccessToken() {
      return this.snsAccessToken != null;
    }

    public void setSnsAccessTokenIsSet(boolean value) {
      if (!value) {
        this.snsAccessToken = null;
      }
    }

    public int getStartIdx() {
      return this.startIdx;
    }

    public getSnsFriends_args setStartIdx(int startIdx) {
      this.startIdx = startIdx;
      setStartIdxIsSet(true);
      return this;
    }

    public void unsetStartIdx() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STARTIDX_ISSET_ID);
    }

    /** Returns true if field startIdx is set (has been assigned a value) and false otherwise */
    public boolean isSetStartIdx() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STARTIDX_ISSET_ID);
    }

    public void setStartIdxIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STARTIDX_ISSET_ID, value);
    }

    public int getLimit() {
      return this.limit;
    }

    public getSnsFriends_args setLimit(int limit) {
      this.limit = limit;
      setLimitIsSet(true);
      return this;
    }

    public void unsetLimit() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    /** Returns true if field limit is set (has been assigned a value) and false otherwise */
    public boolean isSetLimit() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    public void setLimitIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SNS_ID_TYPE:
        if (value == null) {
          unsetSnsIdType();
        } else {
          setSnsIdType((SnsIdType)value);
        }
        break;

      case SNS_ACCESS_TOKEN:
        if (value == null) {
          unsetSnsAccessToken();
        } else {
          setSnsAccessToken((java.lang.String)value);
        }
        break;

      case START_IDX:
        if (value == null) {
          unsetStartIdx();
        } else {
          setStartIdx((java.lang.Integer)value);
        }
        break;

      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          setLimit((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SNS_ID_TYPE:
        return getSnsIdType();

      case SNS_ACCESS_TOKEN:
        return getSnsAccessToken();

      case START_IDX:
        return getStartIdx();

      case LIMIT:
        return getLimit();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SNS_ID_TYPE:
        return isSetSnsIdType();
      case SNS_ACCESS_TOKEN:
        return isSetSnsAccessToken();
      case START_IDX:
        return isSetStartIdx();
      case LIMIT:
        return isSetLimit();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getSnsFriends_args)
        return this.equals((getSnsFriends_args)that);
      return false;
    }

    public boolean equals(getSnsFriends_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_snsIdType = true && this.isSetSnsIdType();
      boolean that_present_snsIdType = true && that.isSetSnsIdType();
      if (this_present_snsIdType || that_present_snsIdType) {
        if (!(this_present_snsIdType && that_present_snsIdType))
          return false;
        if (!this.snsIdType.equals(that.snsIdType))
          return false;
      }

      boolean this_present_snsAccessToken = true && this.isSetSnsAccessToken();
      boolean that_present_snsAccessToken = true && that.isSetSnsAccessToken();
      if (this_present_snsAccessToken || that_present_snsAccessToken) {
        if (!(this_present_snsAccessToken && that_present_snsAccessToken))
          return false;
        if (!this.snsAccessToken.equals(that.snsAccessToken))
          return false;
      }

      boolean this_present_startIdx = true;
      boolean that_present_startIdx = true;
      if (this_present_startIdx || that_present_startIdx) {
        if (!(this_present_startIdx && that_present_startIdx))
          return false;
        if (this.startIdx != that.startIdx)
          return false;
      }

      boolean this_present_limit = true;
      boolean that_present_limit = true;
      if (this_present_limit || that_present_limit) {
        if (!(this_present_limit && that_present_limit))
          return false;
        if (this.limit != that.limit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSnsIdType()) ? 131071 : 524287);
      if (isSetSnsIdType())
        hashCode = hashCode * 8191 + snsIdType.getValue();

      hashCode = hashCode * 8191 + ((isSetSnsAccessToken()) ? 131071 : 524287);
      if (isSetSnsAccessToken())
        hashCode = hashCode * 8191 + snsAccessToken.hashCode();

      hashCode = hashCode * 8191 + startIdx;

      hashCode = hashCode * 8191 + limit;

      return hashCode;
    }

    @Override
    public int compareTo(getSnsFriends_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSnsIdType()).compareTo(other.isSetSnsIdType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSnsIdType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snsIdType, other.snsIdType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSnsAccessToken()).compareTo(other.isSetSnsAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSnsAccessToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snsAccessToken, other.snsAccessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetStartIdx()).compareTo(other.isSetStartIdx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartIdx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startIdx, other.startIdx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getSnsFriends_args(");
      boolean first = true;

      sb.append("snsIdType:");
      if (this.snsIdType == null) {
        sb.append("null");
      } else {
        sb.append(this.snsIdType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("snsAccessToken:");
      if (this.snsAccessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.snsAccessToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startIdx:");
      sb.append(this.startIdx);
      first = false;
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSnsFriends_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSnsFriends_argsStandardScheme getScheme() {
        return new getSnsFriends_argsStandardScheme();
      }
    }

    private static class getSnsFriends_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSnsFriends_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSnsFriends_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 2: // SNS_ID_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.snsIdType = SnsIdType.findByValue(iprot.readI32());
                struct.setSnsIdTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SNS_ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.snsAccessToken = iprot.readString();
                struct.setSnsAccessTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // START_IDX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.startIdx = iprot.readI32();
                struct.setStartIdxIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.limit = iprot.readI32();
                struct.setLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSnsFriends_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.snsIdType != null) {
          oprot.writeFieldBegin(SNS_ID_TYPE_FIELD_DESC);
          oprot.writeI32(struct.snsIdType.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.snsAccessToken != null) {
          oprot.writeFieldBegin(SNS_ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.snsAccessToken);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_IDX_FIELD_DESC);
        oprot.writeI32(struct.startIdx);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(struct.limit);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSnsFriends_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSnsFriends_argsTupleScheme getScheme() {
        return new getSnsFriends_argsTupleScheme();
      }
    }

    private static class getSnsFriends_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSnsFriends_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSnsFriends_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSnsIdType()) {
          optionals.set(0);
        }
        if (struct.isSetSnsAccessToken()) {
          optionals.set(1);
        }
        if (struct.isSetStartIdx()) {
          optionals.set(2);
        }
        if (struct.isSetLimit()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSnsIdType()) {
          oprot.writeI32(struct.snsIdType.getValue());
        }
        if (struct.isSetSnsAccessToken()) {
          oprot.writeString(struct.snsAccessToken);
        }
        if (struct.isSetStartIdx()) {
          oprot.writeI32(struct.startIdx);
        }
        if (struct.isSetLimit()) {
          oprot.writeI32(struct.limit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSnsFriends_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.snsIdType = SnsIdType.findByValue(iprot.readI32());
          struct.setSnsIdTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.snsAccessToken = iprot.readString();
          struct.setSnsAccessTokenIsSet(true);
        }
        if (incoming.get(2)) {
          struct.startIdx = iprot.readI32();
          struct.setStartIdxIsSet(true);
        }
        if (incoming.get(3)) {
          struct.limit = iprot.readI32();
          struct.setLimitIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSnsFriends_result implements org.apache.thrift.TBase<getSnsFriends_result, getSnsFriends_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSnsFriends_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSnsFriends_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSnsFriends_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSnsFriends_resultTupleSchemeFactory();

    public SnsFriends success; // required
    public TalkException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SnsFriends.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TalkException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSnsFriends_result.class, metaDataMap);
    }

    public getSnsFriends_result() {
    }

    public getSnsFriends_result(
      SnsFriends success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSnsFriends_result(getSnsFriends_result other) {
      if (other.isSetSuccess()) {
        this.success = new SnsFriends(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getSnsFriends_result deepCopy() {
      return new getSnsFriends_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public SnsFriends getSuccess() {
      return this.success;
    }

    public getSnsFriends_result setSuccess(SnsFriends success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public getSnsFriends_result setE(TalkException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SnsFriends)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((TalkException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getSnsFriends_result)
        return this.equals((getSnsFriends_result)that);
      return false;
    }

    public boolean equals(getSnsFriends_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getSnsFriends_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getSnsFriends_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSnsFriends_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSnsFriends_resultStandardScheme getScheme() {
        return new getSnsFriends_resultStandardScheme();
      }
    }

    private static class getSnsFriends_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSnsFriends_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSnsFriends_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SnsFriends();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new TalkException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSnsFriends_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSnsFriends_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSnsFriends_resultTupleScheme getScheme() {
        return new getSnsFriends_resultTupleScheme();
      }
    }

    private static class getSnsFriends_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSnsFriends_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSnsFriends_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSnsFriends_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new SnsFriends();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new TalkException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSnsMyProfile_args implements org.apache.thrift.TBase<getSnsMyProfile_args, getSnsMyProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSnsMyProfile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSnsMyProfile_args");

    private static final org.apache.thrift.protocol.TField SNS_ID_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("snsIdType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SNS_ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("snsAccessToken", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSnsMyProfile_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSnsMyProfile_argsTupleSchemeFactory();

    /**
     * 
     * @see SnsIdType
     */
    public SnsIdType snsIdType; // required
    public java.lang.String snsAccessToken; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see SnsIdType
       */
      SNS_ID_TYPE((short)2, "snsIdType"),
      SNS_ACCESS_TOKEN((short)3, "snsAccessToken");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 2: // SNS_ID_TYPE
            return SNS_ID_TYPE;
          case 3: // SNS_ACCESS_TOKEN
            return SNS_ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SNS_ID_TYPE, new org.apache.thrift.meta_data.FieldMetaData("snsIdType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SnsIdType.class)));
      tmpMap.put(_Fields.SNS_ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("snsAccessToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSnsMyProfile_args.class, metaDataMap);
    }

    public getSnsMyProfile_args() {
    }

    public getSnsMyProfile_args(
      SnsIdType snsIdType,
      java.lang.String snsAccessToken)
    {
      this();
      this.snsIdType = snsIdType;
      this.snsAccessToken = snsAccessToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSnsMyProfile_args(getSnsMyProfile_args other) {
      if (other.isSetSnsIdType()) {
        this.snsIdType = other.snsIdType;
      }
      if (other.isSetSnsAccessToken()) {
        this.snsAccessToken = other.snsAccessToken;
      }
    }

    public getSnsMyProfile_args deepCopy() {
      return new getSnsMyProfile_args(this);
    }

    @Override
    public void clear() {
      this.snsIdType = null;
      this.snsAccessToken = null;
    }

    /**
     * 
     * @see SnsIdType
     */
    public SnsIdType getSnsIdType() {
      return this.snsIdType;
    }

    /**
     * 
     * @see SnsIdType
     */
    public getSnsMyProfile_args setSnsIdType(SnsIdType snsIdType) {
      this.snsIdType = snsIdType;
      return this;
    }

    public void unsetSnsIdType() {
      this.snsIdType = null;
    }

    /** Returns true if field snsIdType is set (has been assigned a value) and false otherwise */
    public boolean isSetSnsIdType() {
      return this.snsIdType != null;
    }

    public void setSnsIdTypeIsSet(boolean value) {
      if (!value) {
        this.snsIdType = null;
      }
    }

    public java.lang.String getSnsAccessToken() {
      return this.snsAccessToken;
    }

    public getSnsMyProfile_args setSnsAccessToken(java.lang.String snsAccessToken) {
      this.snsAccessToken = snsAccessToken;
      return this;
    }

    public void unsetSnsAccessToken() {
      this.snsAccessToken = null;
    }

    /** Returns true if field snsAccessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSnsAccessToken() {
      return this.snsAccessToken != null;
    }

    public void setSnsAccessTokenIsSet(boolean value) {
      if (!value) {
        this.snsAccessToken = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SNS_ID_TYPE:
        if (value == null) {
          unsetSnsIdType();
        } else {
          setSnsIdType((SnsIdType)value);
        }
        break;

      case SNS_ACCESS_TOKEN:
        if (value == null) {
          unsetSnsAccessToken();
        } else {
          setSnsAccessToken((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SNS_ID_TYPE:
        return getSnsIdType();

      case SNS_ACCESS_TOKEN:
        return getSnsAccessToken();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SNS_ID_TYPE:
        return isSetSnsIdType();
      case SNS_ACCESS_TOKEN:
        return isSetSnsAccessToken();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getSnsMyProfile_args)
        return this.equals((getSnsMyProfile_args)that);
      return false;
    }

    public boolean equals(getSnsMyProfile_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_snsIdType = true && this.isSetSnsIdType();
      boolean that_present_snsIdType = true && that.isSetSnsIdType();
      if (this_present_snsIdType || that_present_snsIdType) {
        if (!(this_present_snsIdType && that_present_snsIdType))
          return false;
        if (!this.snsIdType.equals(that.snsIdType))
          return false;
      }

      boolean this_present_snsAccessToken = true && this.isSetSnsAccessToken();
      boolean that_present_snsAccessToken = true && that.isSetSnsAccessToken();
      if (this_present_snsAccessToken || that_present_snsAccessToken) {
        if (!(this_present_snsAccessToken && that_present_snsAccessToken))
          return false;
        if (!this.snsAccessToken.equals(that.snsAccessToken))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSnsIdType()) ? 131071 : 524287);
      if (isSetSnsIdType())
        hashCode = hashCode * 8191 + snsIdType.getValue();

      hashCode = hashCode * 8191 + ((isSetSnsAccessToken()) ? 131071 : 524287);
      if (isSetSnsAccessToken())
        hashCode = hashCode * 8191 + snsAccessToken.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getSnsMyProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSnsIdType()).compareTo(other.isSetSnsIdType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSnsIdType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snsIdType, other.snsIdType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSnsAccessToken()).compareTo(other.isSetSnsAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSnsAccessToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snsAccessToken, other.snsAccessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getSnsMyProfile_args(");
      boolean first = true;

      sb.append("snsIdType:");
      if (this.snsIdType == null) {
        sb.append("null");
      } else {
        sb.append(this.snsIdType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("snsAccessToken:");
      if (this.snsAccessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.snsAccessToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSnsMyProfile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSnsMyProfile_argsStandardScheme getScheme() {
        return new getSnsMyProfile_argsStandardScheme();
      }
    }

    private static class getSnsMyProfile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSnsMyProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSnsMyProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 2: // SNS_ID_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.snsIdType = SnsIdType.findByValue(iprot.readI32());
                struct.setSnsIdTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SNS_ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.snsAccessToken = iprot.readString();
                struct.setSnsAccessTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSnsMyProfile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.snsIdType != null) {
          oprot.writeFieldBegin(SNS_ID_TYPE_FIELD_DESC);
          oprot.writeI32(struct.snsIdType.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.snsAccessToken != null) {
          oprot.writeFieldBegin(SNS_ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.snsAccessToken);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSnsMyProfile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSnsMyProfile_argsTupleScheme getScheme() {
        return new getSnsMyProfile_argsTupleScheme();
      }
    }

    private static class getSnsMyProfile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSnsMyProfile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSnsMyProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSnsIdType()) {
          optionals.set(0);
        }
        if (struct.isSetSnsAccessToken()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSnsIdType()) {
          oprot.writeI32(struct.snsIdType.getValue());
        }
        if (struct.isSetSnsAccessToken()) {
          oprot.writeString(struct.snsAccessToken);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSnsMyProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.snsIdType = SnsIdType.findByValue(iprot.readI32());
          struct.setSnsIdTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.snsAccessToken = iprot.readString();
          struct.setSnsAccessTokenIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSnsMyProfile_result implements org.apache.thrift.TBase<getSnsMyProfile_result, getSnsMyProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSnsMyProfile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSnsMyProfile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSnsMyProfile_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSnsMyProfile_resultTupleSchemeFactory();

    public SnsProfile success; // required
    public TalkException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SnsProfile.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TalkException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSnsMyProfile_result.class, metaDataMap);
    }

    public getSnsMyProfile_result() {
    }

    public getSnsMyProfile_result(
      SnsProfile success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSnsMyProfile_result(getSnsMyProfile_result other) {
      if (other.isSetSuccess()) {
        this.success = new SnsProfile(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getSnsMyProfile_result deepCopy() {
      return new getSnsMyProfile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public SnsProfile getSuccess() {
      return this.success;
    }

    public getSnsMyProfile_result setSuccess(SnsProfile success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public getSnsMyProfile_result setE(TalkException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SnsProfile)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((TalkException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getSnsMyProfile_result)
        return this.equals((getSnsMyProfile_result)that);
      return false;
    }

    public boolean equals(getSnsMyProfile_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getSnsMyProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getSnsMyProfile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSnsMyProfile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSnsMyProfile_resultStandardScheme getScheme() {
        return new getSnsMyProfile_resultStandardScheme();
      }
    }

    private static class getSnsMyProfile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSnsMyProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSnsMyProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SnsProfile();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new TalkException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSnsMyProfile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSnsMyProfile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSnsMyProfile_resultTupleScheme getScheme() {
        return new getSnsMyProfile_resultTupleScheme();
      }
    }

    private static class getSnsMyProfile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSnsMyProfile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSnsMyProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSnsMyProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new SnsProfile();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new TalkException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class postSnsInvitationMessage_args implements org.apache.thrift.TBase<postSnsInvitationMessage_args, postSnsInvitationMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<postSnsInvitationMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postSnsInvitationMessage_args");

    private static final org.apache.thrift.protocol.TField SNS_ID_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("snsIdType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SNS_ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("snsAccessToken", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TO_SNS_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("toSnsUserId", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new postSnsInvitationMessage_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new postSnsInvitationMessage_argsTupleSchemeFactory();

    /**
     * 
     * @see SnsIdType
     */
    public SnsIdType snsIdType; // required
    public java.lang.String snsAccessToken; // required
    public java.lang.String toSnsUserId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see SnsIdType
       */
      SNS_ID_TYPE((short)2, "snsIdType"),
      SNS_ACCESS_TOKEN((short)3, "snsAccessToken"),
      TO_SNS_USER_ID((short)4, "toSnsUserId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 2: // SNS_ID_TYPE
            return SNS_ID_TYPE;
          case 3: // SNS_ACCESS_TOKEN
            return SNS_ACCESS_TOKEN;
          case 4: // TO_SNS_USER_ID
            return TO_SNS_USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SNS_ID_TYPE, new org.apache.thrift.meta_data.FieldMetaData("snsIdType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SnsIdType.class)));
      tmpMap.put(_Fields.SNS_ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("snsAccessToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TO_SNS_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("toSnsUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postSnsInvitationMessage_args.class, metaDataMap);
    }

    public postSnsInvitationMessage_args() {
    }

    public postSnsInvitationMessage_args(
      SnsIdType snsIdType,
      java.lang.String snsAccessToken,
      java.lang.String toSnsUserId)
    {
      this();
      this.snsIdType = snsIdType;
      this.snsAccessToken = snsAccessToken;
      this.toSnsUserId = toSnsUserId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postSnsInvitationMessage_args(postSnsInvitationMessage_args other) {
      if (other.isSetSnsIdType()) {
        this.snsIdType = other.snsIdType;
      }
      if (other.isSetSnsAccessToken()) {
        this.snsAccessToken = other.snsAccessToken;
      }
      if (other.isSetToSnsUserId()) {
        this.toSnsUserId = other.toSnsUserId;
      }
    }

    public postSnsInvitationMessage_args deepCopy() {
      return new postSnsInvitationMessage_args(this);
    }

    @Override
    public void clear() {
      this.snsIdType = null;
      this.snsAccessToken = null;
      this.toSnsUserId = null;
    }

    /**
     * 
     * @see SnsIdType
     */
    public SnsIdType getSnsIdType() {
      return this.snsIdType;
    }

    /**
     * 
     * @see SnsIdType
     */
    public postSnsInvitationMessage_args setSnsIdType(SnsIdType snsIdType) {
      this.snsIdType = snsIdType;
      return this;
    }

    public void unsetSnsIdType() {
      this.snsIdType = null;
    }

    /** Returns true if field snsIdType is set (has been assigned a value) and false otherwise */
    public boolean isSetSnsIdType() {
      return this.snsIdType != null;
    }

    public void setSnsIdTypeIsSet(boolean value) {
      if (!value) {
        this.snsIdType = null;
      }
    }

    public java.lang.String getSnsAccessToken() {
      return this.snsAccessToken;
    }

    public postSnsInvitationMessage_args setSnsAccessToken(java.lang.String snsAccessToken) {
      this.snsAccessToken = snsAccessToken;
      return this;
    }

    public void unsetSnsAccessToken() {
      this.snsAccessToken = null;
    }

    /** Returns true if field snsAccessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSnsAccessToken() {
      return this.snsAccessToken != null;
    }

    public void setSnsAccessTokenIsSet(boolean value) {
      if (!value) {
        this.snsAccessToken = null;
      }
    }

    public java.lang.String getToSnsUserId() {
      return this.toSnsUserId;
    }

    public postSnsInvitationMessage_args setToSnsUserId(java.lang.String toSnsUserId) {
      this.toSnsUserId = toSnsUserId;
      return this;
    }

    public void unsetToSnsUserId() {
      this.toSnsUserId = null;
    }

    /** Returns true if field toSnsUserId is set (has been assigned a value) and false otherwise */
    public boolean isSetToSnsUserId() {
      return this.toSnsUserId != null;
    }

    public void setToSnsUserIdIsSet(boolean value) {
      if (!value) {
        this.toSnsUserId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SNS_ID_TYPE:
        if (value == null) {
          unsetSnsIdType();
        } else {
          setSnsIdType((SnsIdType)value);
        }
        break;

      case SNS_ACCESS_TOKEN:
        if (value == null) {
          unsetSnsAccessToken();
        } else {
          setSnsAccessToken((java.lang.String)value);
        }
        break;

      case TO_SNS_USER_ID:
        if (value == null) {
          unsetToSnsUserId();
        } else {
          setToSnsUserId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SNS_ID_TYPE:
        return getSnsIdType();

      case SNS_ACCESS_TOKEN:
        return getSnsAccessToken();

      case TO_SNS_USER_ID:
        return getToSnsUserId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SNS_ID_TYPE:
        return isSetSnsIdType();
      case SNS_ACCESS_TOKEN:
        return isSetSnsAccessToken();
      case TO_SNS_USER_ID:
        return isSetToSnsUserId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof postSnsInvitationMessage_args)
        return this.equals((postSnsInvitationMessage_args)that);
      return false;
    }

    public boolean equals(postSnsInvitationMessage_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_snsIdType = true && this.isSetSnsIdType();
      boolean that_present_snsIdType = true && that.isSetSnsIdType();
      if (this_present_snsIdType || that_present_snsIdType) {
        if (!(this_present_snsIdType && that_present_snsIdType))
          return false;
        if (!this.snsIdType.equals(that.snsIdType))
          return false;
      }

      boolean this_present_snsAccessToken = true && this.isSetSnsAccessToken();
      boolean that_present_snsAccessToken = true && that.isSetSnsAccessToken();
      if (this_present_snsAccessToken || that_present_snsAccessToken) {
        if (!(this_present_snsAccessToken && that_present_snsAccessToken))
          return false;
        if (!this.snsAccessToken.equals(that.snsAccessToken))
          return false;
      }

      boolean this_present_toSnsUserId = true && this.isSetToSnsUserId();
      boolean that_present_toSnsUserId = true && that.isSetToSnsUserId();
      if (this_present_toSnsUserId || that_present_toSnsUserId) {
        if (!(this_present_toSnsUserId && that_present_toSnsUserId))
          return false;
        if (!this.toSnsUserId.equals(that.toSnsUserId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSnsIdType()) ? 131071 : 524287);
      if (isSetSnsIdType())
        hashCode = hashCode * 8191 + snsIdType.getValue();

      hashCode = hashCode * 8191 + ((isSetSnsAccessToken()) ? 131071 : 524287);
      if (isSetSnsAccessToken())
        hashCode = hashCode * 8191 + snsAccessToken.hashCode();

      hashCode = hashCode * 8191 + ((isSetToSnsUserId()) ? 131071 : 524287);
      if (isSetToSnsUserId())
        hashCode = hashCode * 8191 + toSnsUserId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(postSnsInvitationMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSnsIdType()).compareTo(other.isSetSnsIdType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSnsIdType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snsIdType, other.snsIdType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSnsAccessToken()).compareTo(other.isSetSnsAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSnsAccessToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snsAccessToken, other.snsAccessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetToSnsUserId()).compareTo(other.isSetToSnsUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToSnsUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toSnsUserId, other.toSnsUserId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("postSnsInvitationMessage_args(");
      boolean first = true;

      sb.append("snsIdType:");
      if (this.snsIdType == null) {
        sb.append("null");
      } else {
        sb.append(this.snsIdType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("snsAccessToken:");
      if (this.snsAccessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.snsAccessToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("toSnsUserId:");
      if (this.toSnsUserId == null) {
        sb.append("null");
      } else {
        sb.append(this.toSnsUserId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postSnsInvitationMessage_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public postSnsInvitationMessage_argsStandardScheme getScheme() {
        return new postSnsInvitationMessage_argsStandardScheme();
      }
    }

    private static class postSnsInvitationMessage_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<postSnsInvitationMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postSnsInvitationMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 2: // SNS_ID_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.snsIdType = SnsIdType.findByValue(iprot.readI32());
                struct.setSnsIdTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SNS_ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.snsAccessToken = iprot.readString();
                struct.setSnsAccessTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TO_SNS_USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.toSnsUserId = iprot.readString();
                struct.setToSnsUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postSnsInvitationMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.snsIdType != null) {
          oprot.writeFieldBegin(SNS_ID_TYPE_FIELD_DESC);
          oprot.writeI32(struct.snsIdType.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.snsAccessToken != null) {
          oprot.writeFieldBegin(SNS_ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.snsAccessToken);
          oprot.writeFieldEnd();
        }
        if (struct.toSnsUserId != null) {
          oprot.writeFieldBegin(TO_SNS_USER_ID_FIELD_DESC);
          oprot.writeString(struct.toSnsUserId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postSnsInvitationMessage_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public postSnsInvitationMessage_argsTupleScheme getScheme() {
        return new postSnsInvitationMessage_argsTupleScheme();
      }
    }

    private static class postSnsInvitationMessage_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<postSnsInvitationMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postSnsInvitationMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSnsIdType()) {
          optionals.set(0);
        }
        if (struct.isSetSnsAccessToken()) {
          optionals.set(1);
        }
        if (struct.isSetToSnsUserId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSnsIdType()) {
          oprot.writeI32(struct.snsIdType.getValue());
        }
        if (struct.isSetSnsAccessToken()) {
          oprot.writeString(struct.snsAccessToken);
        }
        if (struct.isSetToSnsUserId()) {
          oprot.writeString(struct.toSnsUserId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postSnsInvitationMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.snsIdType = SnsIdType.findByValue(iprot.readI32());
          struct.setSnsIdTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.snsAccessToken = iprot.readString();
          struct.setSnsAccessTokenIsSet(true);
        }
        if (incoming.get(2)) {
          struct.toSnsUserId = iprot.readString();
          struct.setToSnsUserIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class postSnsInvitationMessage_result implements org.apache.thrift.TBase<postSnsInvitationMessage_result, postSnsInvitationMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<postSnsInvitationMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postSnsInvitationMessage_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new postSnsInvitationMessage_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new postSnsInvitationMessage_resultTupleSchemeFactory();

    public TalkException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TalkException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postSnsInvitationMessage_result.class, metaDataMap);
    }

    public postSnsInvitationMessage_result() {
    }

    public postSnsInvitationMessage_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postSnsInvitationMessage_result(postSnsInvitationMessage_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public postSnsInvitationMessage_result deepCopy() {
      return new postSnsInvitationMessage_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public postSnsInvitationMessage_result setE(TalkException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((TalkException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof postSnsInvitationMessage_result)
        return this.equals((postSnsInvitationMessage_result)that);
      return false;
    }

    public boolean equals(postSnsInvitationMessage_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(postSnsInvitationMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("postSnsInvitationMessage_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postSnsInvitationMessage_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public postSnsInvitationMessage_resultStandardScheme getScheme() {
        return new postSnsInvitationMessage_resultStandardScheme();
      }
    }

    private static class postSnsInvitationMessage_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<postSnsInvitationMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postSnsInvitationMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new TalkException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postSnsInvitationMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postSnsInvitationMessage_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public postSnsInvitationMessage_resultTupleScheme getScheme() {
        return new postSnsInvitationMessage_resultTupleScheme();
      }
    }

    private static class postSnsInvitationMessage_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<postSnsInvitationMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postSnsInvitationMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postSnsInvitationMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new TalkException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
