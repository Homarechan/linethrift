/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2019-09-28")
public class CoinHistory implements org.apache.thrift.TBase<CoinHistory, CoinHistory._Fields>, java.io.Serializable, Cloneable, Comparable<CoinHistory> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CoinHistory");

  private static final org.apache.thrift.protocol.TField PAY_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("payDate", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField COIN_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("coinBalance", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField COIN_FIELD_DESC = new org.apache.thrift.protocol.TField("coin", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField REFUND_FIELD_DESC = new org.apache.thrift.protocol.TField("refund", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField PAY_SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("paySeq", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CURRENCY_SIGN_FIELD_DESC = new org.apache.thrift.protocol.TField("currencySign", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DISPLAY_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("displayPrice", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField PAYLOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("payload", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CoinHistoryStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CoinHistoryTupleSchemeFactory();

  public long payDate; // required
  public int coinBalance; // required
  public int coin; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String price; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String title; // required
  public boolean refund; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String paySeq; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String currency; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String currencySign; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String displayPrice; // required
  public @org.apache.thrift.annotation.Nullable CoinPayLoad payload; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String channelId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PAY_DATE((short)1, "payDate"),
    COIN_BALANCE((short)2, "coinBalance"),
    COIN((short)3, "coin"),
    PRICE((short)4, "price"),
    TITLE((short)5, "title"),
    REFUND((short)6, "refund"),
    PAY_SEQ((short)7, "paySeq"),
    CURRENCY((short)8, "currency"),
    CURRENCY_SIGN((short)9, "currencySign"),
    DISPLAY_PRICE((short)10, "displayPrice"),
    PAYLOAD((short)11, "payload"),
    CHANNEL_ID((short)12, "channelId");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAY_DATE
          return PAY_DATE;
        case 2: // COIN_BALANCE
          return COIN_BALANCE;
        case 3: // COIN
          return COIN;
        case 4: // PRICE
          return PRICE;
        case 5: // TITLE
          return TITLE;
        case 6: // REFUND
          return REFUND;
        case 7: // PAY_SEQ
          return PAY_SEQ;
        case 8: // CURRENCY
          return CURRENCY;
        case 9: // CURRENCY_SIGN
          return CURRENCY_SIGN;
        case 10: // DISPLAY_PRICE
          return DISPLAY_PRICE;
        case 11: // PAYLOAD
          return PAYLOAD;
        case 12: // CHANNEL_ID
          return CHANNEL_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PAYDATE_ISSET_ID = 0;
  private static final int __COINBALANCE_ISSET_ID = 1;
  private static final int __COIN_ISSET_ID = 2;
  private static final int __REFUND_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAY_DATE, new org.apache.thrift.meta_data.FieldMetaData("payDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COIN_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("coinBalance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COIN, new org.apache.thrift.meta_data.FieldMetaData("coin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUND, new org.apache.thrift.meta_data.FieldMetaData("refund", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PAY_SEQ, new org.apache.thrift.meta_data.FieldMetaData("paySeq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENCY_SIGN, new org.apache.thrift.meta_data.FieldMetaData("currencySign", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISPLAY_PRICE, new org.apache.thrift.meta_data.FieldMetaData("displayPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYLOAD, new org.apache.thrift.meta_data.FieldMetaData("payload", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CoinPayLoad.class)));
    tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CoinHistory.class, metaDataMap);
  }

  public CoinHistory() {
  }

  public CoinHistory(
    long payDate,
    int coinBalance,
    int coin,
    java.lang.String price,
    java.lang.String title,
    boolean refund,
    java.lang.String paySeq,
    java.lang.String currency,
    java.lang.String currencySign,
    java.lang.String displayPrice,
    CoinPayLoad payload,
    java.lang.String channelId)
  {
    this();
    this.payDate = payDate;
    setPayDateIsSet(true);
    this.coinBalance = coinBalance;
    setCoinBalanceIsSet(true);
    this.coin = coin;
    setCoinIsSet(true);
    this.price = price;
    this.title = title;
    this.refund = refund;
    setRefundIsSet(true);
    this.paySeq = paySeq;
    this.currency = currency;
    this.currencySign = currencySign;
    this.displayPrice = displayPrice;
    this.payload = payload;
    this.channelId = channelId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CoinHistory(CoinHistory other) {
    __isset_bitfield = other.__isset_bitfield;
    this.payDate = other.payDate;
    this.coinBalance = other.coinBalance;
    this.coin = other.coin;
    if (other.isSetPrice()) {
      this.price = other.price;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    this.refund = other.refund;
    if (other.isSetPaySeq()) {
      this.paySeq = other.paySeq;
    }
    if (other.isSetCurrency()) {
      this.currency = other.currency;
    }
    if (other.isSetCurrencySign()) {
      this.currencySign = other.currencySign;
    }
    if (other.isSetDisplayPrice()) {
      this.displayPrice = other.displayPrice;
    }
    if (other.isSetPayload()) {
      this.payload = new CoinPayLoad(other.payload);
    }
    if (other.isSetChannelId()) {
      this.channelId = other.channelId;
    }
  }

  public CoinHistory deepCopy() {
    return new CoinHistory(this);
  }

  @Override
  public void clear() {
    setPayDateIsSet(false);
    this.payDate = 0;
    setCoinBalanceIsSet(false);
    this.coinBalance = 0;
    setCoinIsSet(false);
    this.coin = 0;
    this.price = null;
    this.title = null;
    setRefundIsSet(false);
    this.refund = false;
    this.paySeq = null;
    this.currency = null;
    this.currencySign = null;
    this.displayPrice = null;
    this.payload = null;
    this.channelId = null;
  }

  public long getPayDate() {
    return this.payDate;
  }

  public CoinHistory setPayDate(long payDate) {
    this.payDate = payDate;
    setPayDateIsSet(true);
    return this;
  }

  public void unsetPayDate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAYDATE_ISSET_ID);
  }

  /** Returns true if field payDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPayDate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAYDATE_ISSET_ID);
  }

  public void setPayDateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAYDATE_ISSET_ID, value);
  }

  public int getCoinBalance() {
    return this.coinBalance;
  }

  public CoinHistory setCoinBalance(int coinBalance) {
    this.coinBalance = coinBalance;
    setCoinBalanceIsSet(true);
    return this;
  }

  public void unsetCoinBalance() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COINBALANCE_ISSET_ID);
  }

  /** Returns true if field coinBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetCoinBalance() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COINBALANCE_ISSET_ID);
  }

  public void setCoinBalanceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COINBALANCE_ISSET_ID, value);
  }

  public int getCoin() {
    return this.coin;
  }

  public CoinHistory setCoin(int coin) {
    this.coin = coin;
    setCoinIsSet(true);
    return this;
  }

  public void unsetCoin() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COIN_ISSET_ID);
  }

  /** Returns true if field coin is set (has been assigned a value) and false otherwise */
  public boolean isSetCoin() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COIN_ISSET_ID);
  }

  public void setCoinIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COIN_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPrice() {
    return this.price;
  }

  public CoinHistory setPrice(@org.apache.thrift.annotation.Nullable java.lang.String price) {
    this.price = price;
    return this;
  }

  public void unsetPrice() {
    this.price = null;
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return this.price != null;
  }

  public void setPriceIsSet(boolean value) {
    if (!value) {
      this.price = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTitle() {
    return this.title;
  }

  public CoinHistory setTitle(@org.apache.thrift.annotation.Nullable java.lang.String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public boolean isRefund() {
    return this.refund;
  }

  public CoinHistory setRefund(boolean refund) {
    this.refund = refund;
    setRefundIsSet(true);
    return this;
  }

  public void unsetRefund() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REFUND_ISSET_ID);
  }

  /** Returns true if field refund is set (has been assigned a value) and false otherwise */
  public boolean isSetRefund() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REFUND_ISSET_ID);
  }

  public void setRefundIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REFUND_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPaySeq() {
    return this.paySeq;
  }

  public CoinHistory setPaySeq(@org.apache.thrift.annotation.Nullable java.lang.String paySeq) {
    this.paySeq = paySeq;
    return this;
  }

  public void unsetPaySeq() {
    this.paySeq = null;
  }

  /** Returns true if field paySeq is set (has been assigned a value) and false otherwise */
  public boolean isSetPaySeq() {
    return this.paySeq != null;
  }

  public void setPaySeqIsSet(boolean value) {
    if (!value) {
      this.paySeq = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCurrency() {
    return this.currency;
  }

  public CoinHistory setCurrency(@org.apache.thrift.annotation.Nullable java.lang.String currency) {
    this.currency = currency;
    return this;
  }

  public void unsetCurrency() {
    this.currency = null;
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return this.currency != null;
  }

  public void setCurrencyIsSet(boolean value) {
    if (!value) {
      this.currency = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCurrencySign() {
    return this.currencySign;
  }

  public CoinHistory setCurrencySign(@org.apache.thrift.annotation.Nullable java.lang.String currencySign) {
    this.currencySign = currencySign;
    return this;
  }

  public void unsetCurrencySign() {
    this.currencySign = null;
  }

  /** Returns true if field currencySign is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrencySign() {
    return this.currencySign != null;
  }

  public void setCurrencySignIsSet(boolean value) {
    if (!value) {
      this.currencySign = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDisplayPrice() {
    return this.displayPrice;
  }

  public CoinHistory setDisplayPrice(@org.apache.thrift.annotation.Nullable java.lang.String displayPrice) {
    this.displayPrice = displayPrice;
    return this;
  }

  public void unsetDisplayPrice() {
    this.displayPrice = null;
  }

  /** Returns true if field displayPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayPrice() {
    return this.displayPrice != null;
  }

  public void setDisplayPriceIsSet(boolean value) {
    if (!value) {
      this.displayPrice = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public CoinPayLoad getPayload() {
    return this.payload;
  }

  public CoinHistory setPayload(@org.apache.thrift.annotation.Nullable CoinPayLoad payload) {
    this.payload = payload;
    return this;
  }

  public void unsetPayload() {
    this.payload = null;
  }

  /** Returns true if field payload is set (has been assigned a value) and false otherwise */
  public boolean isSetPayload() {
    return this.payload != null;
  }

  public void setPayloadIsSet(boolean value) {
    if (!value) {
      this.payload = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getChannelId() {
    return this.channelId;
  }

  public CoinHistory setChannelId(@org.apache.thrift.annotation.Nullable java.lang.String channelId) {
    this.channelId = channelId;
    return this;
  }

  public void unsetChannelId() {
    this.channelId = null;
  }

  /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelId() {
    return this.channelId != null;
  }

  public void setChannelIdIsSet(boolean value) {
    if (!value) {
      this.channelId = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case PAY_DATE:
      if (value == null) {
        unsetPayDate();
      } else {
        setPayDate((java.lang.Long)value);
      }
      break;

    case COIN_BALANCE:
      if (value == null) {
        unsetCoinBalance();
      } else {
        setCoinBalance((java.lang.Integer)value);
      }
      break;

    case COIN:
      if (value == null) {
        unsetCoin();
      } else {
        setCoin((java.lang.Integer)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((java.lang.String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((java.lang.String)value);
      }
      break;

    case REFUND:
      if (value == null) {
        unsetRefund();
      } else {
        setRefund((java.lang.Boolean)value);
      }
      break;

    case PAY_SEQ:
      if (value == null) {
        unsetPaySeq();
      } else {
        setPaySeq((java.lang.String)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((java.lang.String)value);
      }
      break;

    case CURRENCY_SIGN:
      if (value == null) {
        unsetCurrencySign();
      } else {
        setCurrencySign((java.lang.String)value);
      }
      break;

    case DISPLAY_PRICE:
      if (value == null) {
        unsetDisplayPrice();
      } else {
        setDisplayPrice((java.lang.String)value);
      }
      break;

    case PAYLOAD:
      if (value == null) {
        unsetPayload();
      } else {
        setPayload((CoinPayLoad)value);
      }
      break;

    case CHANNEL_ID:
      if (value == null) {
        unsetChannelId();
      } else {
        setChannelId((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PAY_DATE:
      return getPayDate();

    case COIN_BALANCE:
      return getCoinBalance();

    case COIN:
      return getCoin();

    case PRICE:
      return getPrice();

    case TITLE:
      return getTitle();

    case REFUND:
      return isRefund();

    case PAY_SEQ:
      return getPaySeq();

    case CURRENCY:
      return getCurrency();

    case CURRENCY_SIGN:
      return getCurrencySign();

    case DISPLAY_PRICE:
      return getDisplayPrice();

    case PAYLOAD:
      return getPayload();

    case CHANNEL_ID:
      return getChannelId();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PAY_DATE:
      return isSetPayDate();
    case COIN_BALANCE:
      return isSetCoinBalance();
    case COIN:
      return isSetCoin();
    case PRICE:
      return isSetPrice();
    case TITLE:
      return isSetTitle();
    case REFUND:
      return isSetRefund();
    case PAY_SEQ:
      return isSetPaySeq();
    case CURRENCY:
      return isSetCurrency();
    case CURRENCY_SIGN:
      return isSetCurrencySign();
    case DISPLAY_PRICE:
      return isSetDisplayPrice();
    case PAYLOAD:
      return isSetPayload();
    case CHANNEL_ID:
      return isSetChannelId();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof CoinHistory)
      return this.equals((CoinHistory)that);
    return false;
  }

  public boolean equals(CoinHistory that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_payDate = true;
    boolean that_present_payDate = true;
    if (this_present_payDate || that_present_payDate) {
      if (!(this_present_payDate && that_present_payDate))
        return false;
      if (this.payDate != that.payDate)
        return false;
    }

    boolean this_present_coinBalance = true;
    boolean that_present_coinBalance = true;
    if (this_present_coinBalance || that_present_coinBalance) {
      if (!(this_present_coinBalance && that_present_coinBalance))
        return false;
      if (this.coinBalance != that.coinBalance)
        return false;
    }

    boolean this_present_coin = true;
    boolean that_present_coin = true;
    if (this_present_coin || that_present_coin) {
      if (!(this_present_coin && that_present_coin))
        return false;
      if (this.coin != that.coin)
        return false;
    }

    boolean this_present_price = true && this.isSetPrice();
    boolean that_present_price = true && that.isSetPrice();
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (!this.price.equals(that.price))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_refund = true;
    boolean that_present_refund = true;
    if (this_present_refund || that_present_refund) {
      if (!(this_present_refund && that_present_refund))
        return false;
      if (this.refund != that.refund)
        return false;
    }

    boolean this_present_paySeq = true && this.isSetPaySeq();
    boolean that_present_paySeq = true && that.isSetPaySeq();
    if (this_present_paySeq || that_present_paySeq) {
      if (!(this_present_paySeq && that_present_paySeq))
        return false;
      if (!this.paySeq.equals(that.paySeq))
        return false;
    }

    boolean this_present_currency = true && this.isSetCurrency();
    boolean that_present_currency = true && that.isSetCurrency();
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (!this.currency.equals(that.currency))
        return false;
    }

    boolean this_present_currencySign = true && this.isSetCurrencySign();
    boolean that_present_currencySign = true && that.isSetCurrencySign();
    if (this_present_currencySign || that_present_currencySign) {
      if (!(this_present_currencySign && that_present_currencySign))
        return false;
      if (!this.currencySign.equals(that.currencySign))
        return false;
    }

    boolean this_present_displayPrice = true && this.isSetDisplayPrice();
    boolean that_present_displayPrice = true && that.isSetDisplayPrice();
    if (this_present_displayPrice || that_present_displayPrice) {
      if (!(this_present_displayPrice && that_present_displayPrice))
        return false;
      if (!this.displayPrice.equals(that.displayPrice))
        return false;
    }

    boolean this_present_payload = true && this.isSetPayload();
    boolean that_present_payload = true && that.isSetPayload();
    if (this_present_payload || that_present_payload) {
      if (!(this_present_payload && that_present_payload))
        return false;
      if (!this.payload.equals(that.payload))
        return false;
    }

    boolean this_present_channelId = true && this.isSetChannelId();
    boolean that_present_channelId = true && that.isSetChannelId();
    if (this_present_channelId || that_present_channelId) {
      if (!(this_present_channelId && that_present_channelId))
        return false;
      if (!this.channelId.equals(that.channelId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(payDate);

    hashCode = hashCode * 8191 + coinBalance;

    hashCode = hashCode * 8191 + coin;

    hashCode = hashCode * 8191 + ((isSetPrice()) ? 131071 : 524287);
    if (isSetPrice())
      hashCode = hashCode * 8191 + price.hashCode();

    hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
    if (isSetTitle())
      hashCode = hashCode * 8191 + title.hashCode();

    hashCode = hashCode * 8191 + ((refund) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetPaySeq()) ? 131071 : 524287);
    if (isSetPaySeq())
      hashCode = hashCode * 8191 + paySeq.hashCode();

    hashCode = hashCode * 8191 + ((isSetCurrency()) ? 131071 : 524287);
    if (isSetCurrency())
      hashCode = hashCode * 8191 + currency.hashCode();

    hashCode = hashCode * 8191 + ((isSetCurrencySign()) ? 131071 : 524287);
    if (isSetCurrencySign())
      hashCode = hashCode * 8191 + currencySign.hashCode();

    hashCode = hashCode * 8191 + ((isSetDisplayPrice()) ? 131071 : 524287);
    if (isSetDisplayPrice())
      hashCode = hashCode * 8191 + displayPrice.hashCode();

    hashCode = hashCode * 8191 + ((isSetPayload()) ? 131071 : 524287);
    if (isSetPayload())
      hashCode = hashCode * 8191 + payload.hashCode();

    hashCode = hashCode * 8191 + ((isSetChannelId()) ? 131071 : 524287);
    if (isSetChannelId())
      hashCode = hashCode * 8191 + channelId.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(CoinHistory other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetPayDate()).compareTo(other.isSetPayDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payDate, other.payDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCoinBalance()).compareTo(other.isSetCoinBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoinBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coinBalance, other.coinBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCoin()).compareTo(other.isSetCoin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coin, other.coin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRefund()).compareTo(other.isSetRefund());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefund()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refund, other.refund);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPaySeq()).compareTo(other.isSetPaySeq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaySeq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paySeq, other.paySeq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCurrency()).compareTo(other.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, other.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCurrencySign()).compareTo(other.isSetCurrencySign());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrencySign()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currencySign, other.currencySign);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDisplayPrice()).compareTo(other.isSetDisplayPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayPrice, other.displayPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPayload()).compareTo(other.isSetPayload());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayload()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payload, other.payload);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChannelId()).compareTo(other.isSetChannelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, other.channelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("CoinHistory(");
    boolean first = true;

    sb.append("payDate:");
    sb.append(this.payDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("coinBalance:");
    sb.append(this.coinBalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("coin:");
    sb.append(this.coin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("price:");
    if (this.price == null) {
      sb.append("null");
    } else {
      sb.append(this.price);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refund:");
    sb.append(this.refund);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paySeq:");
    if (this.paySeq == null) {
      sb.append("null");
    } else {
      sb.append(this.paySeq);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currency:");
    if (this.currency == null) {
      sb.append("null");
    } else {
      sb.append(this.currency);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currencySign:");
    if (this.currencySign == null) {
      sb.append("null");
    } else {
      sb.append(this.currencySign);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("displayPrice:");
    if (this.displayPrice == null) {
      sb.append("null");
    } else {
      sb.append(this.displayPrice);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payload:");
    if (this.payload == null) {
      sb.append("null");
    } else {
      sb.append(this.payload);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelId:");
    if (this.channelId == null) {
      sb.append("null");
    } else {
      sb.append(this.channelId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (payload != null) {
      payload.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CoinHistoryStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CoinHistoryStandardScheme getScheme() {
      return new CoinHistoryStandardScheme();
    }
  }

  private static class CoinHistoryStandardScheme extends org.apache.thrift.scheme.StandardScheme<CoinHistory> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CoinHistory struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAY_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.payDate = iprot.readI64();
              struct.setPayDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COIN_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.coinBalance = iprot.readI32();
              struct.setCoinBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.coin = iprot.readI32();
              struct.setCoinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.price = iprot.readString();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REFUND
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.refund = iprot.readBool();
              struct.setRefundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PAY_SEQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paySeq = iprot.readString();
              struct.setPaySeqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currency = iprot.readString();
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CURRENCY_SIGN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currencySign = iprot.readString();
              struct.setCurrencySignIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DISPLAY_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.displayPrice = iprot.readString();
              struct.setDisplayPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PAYLOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.payload = new CoinPayLoad();
              struct.payload.read(iprot);
              struct.setPayloadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CHANNEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelId = iprot.readString();
              struct.setChannelIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CoinHistory struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PAY_DATE_FIELD_DESC);
      oprot.writeI64(struct.payDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COIN_BALANCE_FIELD_DESC);
      oprot.writeI32(struct.coinBalance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COIN_FIELD_DESC);
      oprot.writeI32(struct.coin);
      oprot.writeFieldEnd();
      if (struct.price != null) {
        oprot.writeFieldBegin(PRICE_FIELD_DESC);
        oprot.writeString(struct.price);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REFUND_FIELD_DESC);
      oprot.writeBool(struct.refund);
      oprot.writeFieldEnd();
      if (struct.paySeq != null) {
        oprot.writeFieldBegin(PAY_SEQ_FIELD_DESC);
        oprot.writeString(struct.paySeq);
        oprot.writeFieldEnd();
      }
      if (struct.currency != null) {
        oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
        oprot.writeString(struct.currency);
        oprot.writeFieldEnd();
      }
      if (struct.currencySign != null) {
        oprot.writeFieldBegin(CURRENCY_SIGN_FIELD_DESC);
        oprot.writeString(struct.currencySign);
        oprot.writeFieldEnd();
      }
      if (struct.displayPrice != null) {
        oprot.writeFieldBegin(DISPLAY_PRICE_FIELD_DESC);
        oprot.writeString(struct.displayPrice);
        oprot.writeFieldEnd();
      }
      if (struct.payload != null) {
        oprot.writeFieldBegin(PAYLOAD_FIELD_DESC);
        struct.payload.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.channelId != null) {
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeString(struct.channelId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CoinHistoryTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CoinHistoryTupleScheme getScheme() {
      return new CoinHistoryTupleScheme();
    }
  }

  private static class CoinHistoryTupleScheme extends org.apache.thrift.scheme.TupleScheme<CoinHistory> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CoinHistory struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPayDate()) {
        optionals.set(0);
      }
      if (struct.isSetCoinBalance()) {
        optionals.set(1);
      }
      if (struct.isSetCoin()) {
        optionals.set(2);
      }
      if (struct.isSetPrice()) {
        optionals.set(3);
      }
      if (struct.isSetTitle()) {
        optionals.set(4);
      }
      if (struct.isSetRefund()) {
        optionals.set(5);
      }
      if (struct.isSetPaySeq()) {
        optionals.set(6);
      }
      if (struct.isSetCurrency()) {
        optionals.set(7);
      }
      if (struct.isSetCurrencySign()) {
        optionals.set(8);
      }
      if (struct.isSetDisplayPrice()) {
        optionals.set(9);
      }
      if (struct.isSetPayload()) {
        optionals.set(10);
      }
      if (struct.isSetChannelId()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetPayDate()) {
        oprot.writeI64(struct.payDate);
      }
      if (struct.isSetCoinBalance()) {
        oprot.writeI32(struct.coinBalance);
      }
      if (struct.isSetCoin()) {
        oprot.writeI32(struct.coin);
      }
      if (struct.isSetPrice()) {
        oprot.writeString(struct.price);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetRefund()) {
        oprot.writeBool(struct.refund);
      }
      if (struct.isSetPaySeq()) {
        oprot.writeString(struct.paySeq);
      }
      if (struct.isSetCurrency()) {
        oprot.writeString(struct.currency);
      }
      if (struct.isSetCurrencySign()) {
        oprot.writeString(struct.currencySign);
      }
      if (struct.isSetDisplayPrice()) {
        oprot.writeString(struct.displayPrice);
      }
      if (struct.isSetPayload()) {
        struct.payload.write(oprot);
      }
      if (struct.isSetChannelId()) {
        oprot.writeString(struct.channelId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CoinHistory struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.payDate = iprot.readI64();
        struct.setPayDateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.coinBalance = iprot.readI32();
        struct.setCoinBalanceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.coin = iprot.readI32();
        struct.setCoinIsSet(true);
      }
      if (incoming.get(3)) {
        struct.price = iprot.readString();
        struct.setPriceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(5)) {
        struct.refund = iprot.readBool();
        struct.setRefundIsSet(true);
      }
      if (incoming.get(6)) {
        struct.paySeq = iprot.readString();
        struct.setPaySeqIsSet(true);
      }
      if (incoming.get(7)) {
        struct.currency = iprot.readString();
        struct.setCurrencyIsSet(true);
      }
      if (incoming.get(8)) {
        struct.currencySign = iprot.readString();
        struct.setCurrencySignIsSet(true);
      }
      if (incoming.get(9)) {
        struct.displayPrice = iprot.readString();
        struct.setDisplayPriceIsSet(true);
      }
      if (incoming.get(10)) {
        struct.payload = new CoinPayLoad();
        struct.payload.read(iprot);
        struct.setPayloadIsSet(true);
      }
      if (incoming.get(11)) {
        struct.channelId = iprot.readString();
        struct.setChannelIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

