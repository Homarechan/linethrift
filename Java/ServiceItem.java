/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-17")
public class ServiceItem implements org.apache.thrift.TBase<ServiceItem, ServiceItem._Fields>, java.io.Serializable, Cloneable, Comparable<ServiceItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ServiceItem");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField G_FIELD_DESC = new org.apache.thrift.protocol.TField("g", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SUB_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("subType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField BADGE_FIELD_DESC = new org.apache.thrift.protocol.TField("badge", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ICON_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("iconUrl", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DOWNLOAD_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("downloadUrl", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField LAUNCH_SCHEME_FIELD_DESC = new org.apache.thrift.protocol.TField("launchScheme", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ICON_TINT_FIELD_DESC = new org.apache.thrift.protocol.TField("iconTint", org.apache.thrift.protocol.TType.BOOL, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ServiceItemStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ServiceItemTupleSchemeFactory();

  public java.lang.String id; // required
  public java.lang.String title; // required
  public int g; // required
  /**
   * 
   * @see SubType
   */
  public SubType subType; // required
  public java.lang.String appId; // required
  public java.lang.String channelId; // required
  public java.lang.String badge; // required
  public java.lang.String iconUrl; // required
  public java.lang.String downloadUrl; // required
  public java.lang.String launchScheme; // required
  public boolean iconTint; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TITLE((short)2, "title"),
    G((short)3, "g"),
    /**
     * 
     * @see SubType
     */
    SUB_TYPE((short)4, "subType"),
    APP_ID((short)5, "appId"),
    CHANNEL_ID((short)6, "channelId"),
    BADGE((short)7, "badge"),
    ICON_URL((short)8, "iconUrl"),
    DOWNLOAD_URL((short)9, "downloadUrl"),
    LAUNCH_SCHEME((short)10, "launchScheme"),
    ICON_TINT((short)11, "iconTint");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TITLE
          return TITLE;
        case 3: // G
          return G;
        case 4: // SUB_TYPE
          return SUB_TYPE;
        case 5: // APP_ID
          return APP_ID;
        case 6: // CHANNEL_ID
          return CHANNEL_ID;
        case 7: // BADGE
          return BADGE;
        case 8: // ICON_URL
          return ICON_URL;
        case 9: // DOWNLOAD_URL
          return DOWNLOAD_URL;
        case 10: // LAUNCH_SCHEME
          return LAUNCH_SCHEME;
        case 11: // ICON_TINT
          return ICON_TINT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __G_ISSET_ID = 0;
  private static final int __ICONTINT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.G, new org.apache.thrift.meta_data.FieldMetaData("g", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUB_TYPE, new org.apache.thrift.meta_data.FieldMetaData("subType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SubType.class)));
    tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BADGE, new org.apache.thrift.meta_data.FieldMetaData("badge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ICON_URL, new org.apache.thrift.meta_data.FieldMetaData("iconUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOWNLOAD_URL, new org.apache.thrift.meta_data.FieldMetaData("downloadUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAUNCH_SCHEME, new org.apache.thrift.meta_data.FieldMetaData("launchScheme", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ICON_TINT, new org.apache.thrift.meta_data.FieldMetaData("iconTint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ServiceItem.class, metaDataMap);
  }

  public ServiceItem() {
  }

  public ServiceItem(
    java.lang.String id,
    java.lang.String title,
    int g,
    SubType subType,
    java.lang.String appId,
    java.lang.String channelId,
    java.lang.String badge,
    java.lang.String iconUrl,
    java.lang.String downloadUrl,
    java.lang.String launchScheme,
    boolean iconTint)
  {
    this();
    this.id = id;
    this.title = title;
    this.g = g;
    setGIsSet(true);
    this.subType = subType;
    this.appId = appId;
    this.channelId = channelId;
    this.badge = badge;
    this.iconUrl = iconUrl;
    this.downloadUrl = downloadUrl;
    this.launchScheme = launchScheme;
    this.iconTint = iconTint;
    setIconTintIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ServiceItem(ServiceItem other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    this.g = other.g;
    if (other.isSetSubType()) {
      this.subType = other.subType;
    }
    if (other.isSetAppId()) {
      this.appId = other.appId;
    }
    if (other.isSetChannelId()) {
      this.channelId = other.channelId;
    }
    if (other.isSetBadge()) {
      this.badge = other.badge;
    }
    if (other.isSetIconUrl()) {
      this.iconUrl = other.iconUrl;
    }
    if (other.isSetDownloadUrl()) {
      this.downloadUrl = other.downloadUrl;
    }
    if (other.isSetLaunchScheme()) {
      this.launchScheme = other.launchScheme;
    }
    this.iconTint = other.iconTint;
  }

  public ServiceItem deepCopy() {
    return new ServiceItem(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.title = null;
    setGIsSet(false);
    this.g = 0;
    this.subType = null;
    this.appId = null;
    this.channelId = null;
    this.badge = null;
    this.iconUrl = null;
    this.downloadUrl = null;
    this.launchScheme = null;
    setIconTintIsSet(false);
    this.iconTint = false;
  }

  public java.lang.String getId() {
    return this.id;
  }

  public ServiceItem setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public java.lang.String getTitle() {
    return this.title;
  }

  public ServiceItem setTitle(java.lang.String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public int getG() {
    return this.g;
  }

  public ServiceItem setG(int g) {
    this.g = g;
    setGIsSet(true);
    return this;
  }

  public void unsetG() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __G_ISSET_ID);
  }

  /** Returns true if field g is set (has been assigned a value) and false otherwise */
  public boolean isSetG() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __G_ISSET_ID);
  }

  public void setGIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __G_ISSET_ID, value);
  }

  /**
   * 
   * @see SubType
   */
  public SubType getSubType() {
    return this.subType;
  }

  /**
   * 
   * @see SubType
   */
  public ServiceItem setSubType(SubType subType) {
    this.subType = subType;
    return this;
  }

  public void unsetSubType() {
    this.subType = null;
  }

  /** Returns true if field subType is set (has been assigned a value) and false otherwise */
  public boolean isSetSubType() {
    return this.subType != null;
  }

  public void setSubTypeIsSet(boolean value) {
    if (!value) {
      this.subType = null;
    }
  }

  public java.lang.String getAppId() {
    return this.appId;
  }

  public ServiceItem setAppId(java.lang.String appId) {
    this.appId = appId;
    return this;
  }

  public void unsetAppId() {
    this.appId = null;
  }

  /** Returns true if field appId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppId() {
    return this.appId != null;
  }

  public void setAppIdIsSet(boolean value) {
    if (!value) {
      this.appId = null;
    }
  }

  public java.lang.String getChannelId() {
    return this.channelId;
  }

  public ServiceItem setChannelId(java.lang.String channelId) {
    this.channelId = channelId;
    return this;
  }

  public void unsetChannelId() {
    this.channelId = null;
  }

  /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelId() {
    return this.channelId != null;
  }

  public void setChannelIdIsSet(boolean value) {
    if (!value) {
      this.channelId = null;
    }
  }

  public java.lang.String getBadge() {
    return this.badge;
  }

  public ServiceItem setBadge(java.lang.String badge) {
    this.badge = badge;
    return this;
  }

  public void unsetBadge() {
    this.badge = null;
  }

  /** Returns true if field badge is set (has been assigned a value) and false otherwise */
  public boolean isSetBadge() {
    return this.badge != null;
  }

  public void setBadgeIsSet(boolean value) {
    if (!value) {
      this.badge = null;
    }
  }

  public java.lang.String getIconUrl() {
    return this.iconUrl;
  }

  public ServiceItem setIconUrl(java.lang.String iconUrl) {
    this.iconUrl = iconUrl;
    return this;
  }

  public void unsetIconUrl() {
    this.iconUrl = null;
  }

  /** Returns true if field iconUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetIconUrl() {
    return this.iconUrl != null;
  }

  public void setIconUrlIsSet(boolean value) {
    if (!value) {
      this.iconUrl = null;
    }
  }

  public java.lang.String getDownloadUrl() {
    return this.downloadUrl;
  }

  public ServiceItem setDownloadUrl(java.lang.String downloadUrl) {
    this.downloadUrl = downloadUrl;
    return this;
  }

  public void unsetDownloadUrl() {
    this.downloadUrl = null;
  }

  /** Returns true if field downloadUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetDownloadUrl() {
    return this.downloadUrl != null;
  }

  public void setDownloadUrlIsSet(boolean value) {
    if (!value) {
      this.downloadUrl = null;
    }
  }

  public java.lang.String getLaunchScheme() {
    return this.launchScheme;
  }

  public ServiceItem setLaunchScheme(java.lang.String launchScheme) {
    this.launchScheme = launchScheme;
    return this;
  }

  public void unsetLaunchScheme() {
    this.launchScheme = null;
  }

  /** Returns true if field launchScheme is set (has been assigned a value) and false otherwise */
  public boolean isSetLaunchScheme() {
    return this.launchScheme != null;
  }

  public void setLaunchSchemeIsSet(boolean value) {
    if (!value) {
      this.launchScheme = null;
    }
  }

  public boolean isIconTint() {
    return this.iconTint;
  }

  public ServiceItem setIconTint(boolean iconTint) {
    this.iconTint = iconTint;
    setIconTintIsSet(true);
    return this;
  }

  public void unsetIconTint() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ICONTINT_ISSET_ID);
  }

  /** Returns true if field iconTint is set (has been assigned a value) and false otherwise */
  public boolean isSetIconTint() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ICONTINT_ISSET_ID);
  }

  public void setIconTintIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ICONTINT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((java.lang.String)value);
      }
      break;

    case G:
      if (value == null) {
        unsetG();
      } else {
        setG((java.lang.Integer)value);
      }
      break;

    case SUB_TYPE:
      if (value == null) {
        unsetSubType();
      } else {
        setSubType((SubType)value);
      }
      break;

    case APP_ID:
      if (value == null) {
        unsetAppId();
      } else {
        setAppId((java.lang.String)value);
      }
      break;

    case CHANNEL_ID:
      if (value == null) {
        unsetChannelId();
      } else {
        setChannelId((java.lang.String)value);
      }
      break;

    case BADGE:
      if (value == null) {
        unsetBadge();
      } else {
        setBadge((java.lang.String)value);
      }
      break;

    case ICON_URL:
      if (value == null) {
        unsetIconUrl();
      } else {
        setIconUrl((java.lang.String)value);
      }
      break;

    case DOWNLOAD_URL:
      if (value == null) {
        unsetDownloadUrl();
      } else {
        setDownloadUrl((java.lang.String)value);
      }
      break;

    case LAUNCH_SCHEME:
      if (value == null) {
        unsetLaunchScheme();
      } else {
        setLaunchScheme((java.lang.String)value);
      }
      break;

    case ICON_TINT:
      if (value == null) {
        unsetIconTint();
      } else {
        setIconTint((java.lang.Boolean)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TITLE:
      return getTitle();

    case G:
      return getG();

    case SUB_TYPE:
      return getSubType();

    case APP_ID:
      return getAppId();

    case CHANNEL_ID:
      return getChannelId();

    case BADGE:
      return getBadge();

    case ICON_URL:
      return getIconUrl();

    case DOWNLOAD_URL:
      return getDownloadUrl();

    case LAUNCH_SCHEME:
      return getLaunchScheme();

    case ICON_TINT:
      return isIconTint();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TITLE:
      return isSetTitle();
    case G:
      return isSetG();
    case SUB_TYPE:
      return isSetSubType();
    case APP_ID:
      return isSetAppId();
    case CHANNEL_ID:
      return isSetChannelId();
    case BADGE:
      return isSetBadge();
    case ICON_URL:
      return isSetIconUrl();
    case DOWNLOAD_URL:
      return isSetDownloadUrl();
    case LAUNCH_SCHEME:
      return isSetLaunchScheme();
    case ICON_TINT:
      return isSetIconTint();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ServiceItem)
      return this.equals((ServiceItem)that);
    return false;
  }

  public boolean equals(ServiceItem that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_g = true;
    boolean that_present_g = true;
    if (this_present_g || that_present_g) {
      if (!(this_present_g && that_present_g))
        return false;
      if (this.g != that.g)
        return false;
    }

    boolean this_present_subType = true && this.isSetSubType();
    boolean that_present_subType = true && that.isSetSubType();
    if (this_present_subType || that_present_subType) {
      if (!(this_present_subType && that_present_subType))
        return false;
      if (!this.subType.equals(that.subType))
        return false;
    }

    boolean this_present_appId = true && this.isSetAppId();
    boolean that_present_appId = true && that.isSetAppId();
    if (this_present_appId || that_present_appId) {
      if (!(this_present_appId && that_present_appId))
        return false;
      if (!this.appId.equals(that.appId))
        return false;
    }

    boolean this_present_channelId = true && this.isSetChannelId();
    boolean that_present_channelId = true && that.isSetChannelId();
    if (this_present_channelId || that_present_channelId) {
      if (!(this_present_channelId && that_present_channelId))
        return false;
      if (!this.channelId.equals(that.channelId))
        return false;
    }

    boolean this_present_badge = true && this.isSetBadge();
    boolean that_present_badge = true && that.isSetBadge();
    if (this_present_badge || that_present_badge) {
      if (!(this_present_badge && that_present_badge))
        return false;
      if (!this.badge.equals(that.badge))
        return false;
    }

    boolean this_present_iconUrl = true && this.isSetIconUrl();
    boolean that_present_iconUrl = true && that.isSetIconUrl();
    if (this_present_iconUrl || that_present_iconUrl) {
      if (!(this_present_iconUrl && that_present_iconUrl))
        return false;
      if (!this.iconUrl.equals(that.iconUrl))
        return false;
    }

    boolean this_present_downloadUrl = true && this.isSetDownloadUrl();
    boolean that_present_downloadUrl = true && that.isSetDownloadUrl();
    if (this_present_downloadUrl || that_present_downloadUrl) {
      if (!(this_present_downloadUrl && that_present_downloadUrl))
        return false;
      if (!this.downloadUrl.equals(that.downloadUrl))
        return false;
    }

    boolean this_present_launchScheme = true && this.isSetLaunchScheme();
    boolean that_present_launchScheme = true && that.isSetLaunchScheme();
    if (this_present_launchScheme || that_present_launchScheme) {
      if (!(this_present_launchScheme && that_present_launchScheme))
        return false;
      if (!this.launchScheme.equals(that.launchScheme))
        return false;
    }

    boolean this_present_iconTint = true;
    boolean that_present_iconTint = true;
    if (this_present_iconTint || that_present_iconTint) {
      if (!(this_present_iconTint && that_present_iconTint))
        return false;
      if (this.iconTint != that.iconTint)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
    if (isSetTitle())
      hashCode = hashCode * 8191 + title.hashCode();

    hashCode = hashCode * 8191 + g;

    hashCode = hashCode * 8191 + ((isSetSubType()) ? 131071 : 524287);
    if (isSetSubType())
      hashCode = hashCode * 8191 + subType.getValue();

    hashCode = hashCode * 8191 + ((isSetAppId()) ? 131071 : 524287);
    if (isSetAppId())
      hashCode = hashCode * 8191 + appId.hashCode();

    hashCode = hashCode * 8191 + ((isSetChannelId()) ? 131071 : 524287);
    if (isSetChannelId())
      hashCode = hashCode * 8191 + channelId.hashCode();

    hashCode = hashCode * 8191 + ((isSetBadge()) ? 131071 : 524287);
    if (isSetBadge())
      hashCode = hashCode * 8191 + badge.hashCode();

    hashCode = hashCode * 8191 + ((isSetIconUrl()) ? 131071 : 524287);
    if (isSetIconUrl())
      hashCode = hashCode * 8191 + iconUrl.hashCode();

    hashCode = hashCode * 8191 + ((isSetDownloadUrl()) ? 131071 : 524287);
    if (isSetDownloadUrl())
      hashCode = hashCode * 8191 + downloadUrl.hashCode();

    hashCode = hashCode * 8191 + ((isSetLaunchScheme()) ? 131071 : 524287);
    if (isSetLaunchScheme())
      hashCode = hashCode * 8191 + launchScheme.hashCode();

    hashCode = hashCode * 8191 + ((iconTint) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(ServiceItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetG()).compareTo(other.isSetG());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetG()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.g, other.g);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSubType()).compareTo(other.isSetSubType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subType, other.subType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChannelId()).compareTo(other.isSetChannelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, other.channelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBadge()).compareTo(other.isSetBadge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBadge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.badge, other.badge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIconUrl()).compareTo(other.isSetIconUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIconUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iconUrl, other.iconUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDownloadUrl()).compareTo(other.isSetDownloadUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDownloadUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.downloadUrl, other.downloadUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLaunchScheme()).compareTo(other.isSetLaunchScheme());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLaunchScheme()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.launchScheme, other.launchScheme);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIconTint()).compareTo(other.isSetIconTint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIconTint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iconTint, other.iconTint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ServiceItem(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("g:");
    sb.append(this.g);
    first = false;
    if (!first) sb.append(", ");
    sb.append("subType:");
    if (this.subType == null) {
      sb.append("null");
    } else {
      sb.append(this.subType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appId:");
    if (this.appId == null) {
      sb.append("null");
    } else {
      sb.append(this.appId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelId:");
    if (this.channelId == null) {
      sb.append("null");
    } else {
      sb.append(this.channelId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("badge:");
    if (this.badge == null) {
      sb.append("null");
    } else {
      sb.append(this.badge);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("iconUrl:");
    if (this.iconUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.iconUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("downloadUrl:");
    if (this.downloadUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.downloadUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("launchScheme:");
    if (this.launchScheme == null) {
      sb.append("null");
    } else {
      sb.append(this.launchScheme);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("iconTint:");
    sb.append(this.iconTint);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ServiceItemStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ServiceItemStandardScheme getScheme() {
      return new ServiceItemStandardScheme();
    }
  }

  private static class ServiceItemStandardScheme extends org.apache.thrift.scheme.StandardScheme<ServiceItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ServiceItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // G
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.g = iprot.readI32();
              struct.setGIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUB_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.subType = SubType.findByValue(iprot.readI32());
              struct.setSubTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appId = iprot.readString();
              struct.setAppIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CHANNEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelId = iprot.readString();
              struct.setChannelIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BADGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.badge = iprot.readString();
              struct.setBadgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ICON_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.iconUrl = iprot.readString();
              struct.setIconUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DOWNLOAD_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.downloadUrl = iprot.readString();
              struct.setDownloadUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LAUNCH_SCHEME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.launchScheme = iprot.readString();
              struct.setLaunchSchemeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ICON_TINT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.iconTint = iprot.readBool();
              struct.setIconTintIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ServiceItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(G_FIELD_DESC);
      oprot.writeI32(struct.g);
      oprot.writeFieldEnd();
      if (struct.subType != null) {
        oprot.writeFieldBegin(SUB_TYPE_FIELD_DESC);
        oprot.writeI32(struct.subType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.appId != null) {
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeString(struct.appId);
        oprot.writeFieldEnd();
      }
      if (struct.channelId != null) {
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeString(struct.channelId);
        oprot.writeFieldEnd();
      }
      if (struct.badge != null) {
        oprot.writeFieldBegin(BADGE_FIELD_DESC);
        oprot.writeString(struct.badge);
        oprot.writeFieldEnd();
      }
      if (struct.iconUrl != null) {
        oprot.writeFieldBegin(ICON_URL_FIELD_DESC);
        oprot.writeString(struct.iconUrl);
        oprot.writeFieldEnd();
      }
      if (struct.downloadUrl != null) {
        oprot.writeFieldBegin(DOWNLOAD_URL_FIELD_DESC);
        oprot.writeString(struct.downloadUrl);
        oprot.writeFieldEnd();
      }
      if (struct.launchScheme != null) {
        oprot.writeFieldBegin(LAUNCH_SCHEME_FIELD_DESC);
        oprot.writeString(struct.launchScheme);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ICON_TINT_FIELD_DESC);
      oprot.writeBool(struct.iconTint);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ServiceItemTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ServiceItemTupleScheme getScheme() {
      return new ServiceItemTupleScheme();
    }
  }

  private static class ServiceItemTupleScheme extends org.apache.thrift.scheme.TupleScheme<ServiceItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ServiceItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetTitle()) {
        optionals.set(1);
      }
      if (struct.isSetG()) {
        optionals.set(2);
      }
      if (struct.isSetSubType()) {
        optionals.set(3);
      }
      if (struct.isSetAppId()) {
        optionals.set(4);
      }
      if (struct.isSetChannelId()) {
        optionals.set(5);
      }
      if (struct.isSetBadge()) {
        optionals.set(6);
      }
      if (struct.isSetIconUrl()) {
        optionals.set(7);
      }
      if (struct.isSetDownloadUrl()) {
        optionals.set(8);
      }
      if (struct.isSetLaunchScheme()) {
        optionals.set(9);
      }
      if (struct.isSetIconTint()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetG()) {
        oprot.writeI32(struct.g);
      }
      if (struct.isSetSubType()) {
        oprot.writeI32(struct.subType.getValue());
      }
      if (struct.isSetAppId()) {
        oprot.writeString(struct.appId);
      }
      if (struct.isSetChannelId()) {
        oprot.writeString(struct.channelId);
      }
      if (struct.isSetBadge()) {
        oprot.writeString(struct.badge);
      }
      if (struct.isSetIconUrl()) {
        oprot.writeString(struct.iconUrl);
      }
      if (struct.isSetDownloadUrl()) {
        oprot.writeString(struct.downloadUrl);
      }
      if (struct.isSetLaunchScheme()) {
        oprot.writeString(struct.launchScheme);
      }
      if (struct.isSetIconTint()) {
        oprot.writeBool(struct.iconTint);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ServiceItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.g = iprot.readI32();
        struct.setGIsSet(true);
      }
      if (incoming.get(3)) {
        struct.subType = SubType.findByValue(iprot.readI32());
        struct.setSubTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.appId = iprot.readString();
        struct.setAppIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.channelId = iprot.readString();
        struct.setChannelIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.badge = iprot.readString();
        struct.setBadgeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.iconUrl = iprot.readString();
        struct.setIconUrlIsSet(true);
      }
      if (incoming.get(8)) {
        struct.downloadUrl = iprot.readString();
        struct.setDownloadUrlIsSet(true);
      }
      if (incoming.get(9)) {
        struct.launchScheme = iprot.readString();
        struct.setLaunchSchemeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.iconTint = iprot.readBool();
        struct.setIconTintIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

