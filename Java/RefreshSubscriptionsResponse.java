/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2019-09-28")
public class RefreshSubscriptionsResponse implements org.apache.thrift.TBase<RefreshSubscriptionsResponse, RefreshSubscriptionsResponse._Fields>, java.io.Serializable, Cloneable, Comparable<RefreshSubscriptionsResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RefreshSubscriptionsResponse");

  private static final org.apache.thrift.protocol.TField TTL_MILLIS_FIELD_DESC = new org.apache.thrift.protocol.TField("ttlMillis", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SUBSCRIPTION_STATES_FIELD_DESC = new org.apache.thrift.protocol.TField("subscriptionStates", org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RefreshSubscriptionsResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RefreshSubscriptionsResponseTupleSchemeFactory();

  public long ttlMillis; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Long,SubscriptionState> subscriptionStates; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TTL_MILLIS((short)1, "ttlMillis"),
    SUBSCRIPTION_STATES((short)2, "subscriptionStates");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TTL_MILLIS
          return TTL_MILLIS;
        case 2: // SUBSCRIPTION_STATES
          return SUBSCRIPTION_STATES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TTLMILLIS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TTL_MILLIS, new org.apache.thrift.meta_data.FieldMetaData("ttlMillis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUBSCRIPTION_STATES, new org.apache.thrift.meta_data.FieldMetaData("subscriptionStates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SubscriptionState.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RefreshSubscriptionsResponse.class, metaDataMap);
  }

  public RefreshSubscriptionsResponse() {
  }

  public RefreshSubscriptionsResponse(
    long ttlMillis,
    java.util.Map<java.lang.Long,SubscriptionState> subscriptionStates)
  {
    this();
    this.ttlMillis = ttlMillis;
    setTtlMillisIsSet(true);
    this.subscriptionStates = subscriptionStates;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RefreshSubscriptionsResponse(RefreshSubscriptionsResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    this.ttlMillis = other.ttlMillis;
    if (other.isSetSubscriptionStates()) {
      java.util.Map<java.lang.Long,SubscriptionState> __this__subscriptionStates = new java.util.HashMap<java.lang.Long,SubscriptionState>(other.subscriptionStates.size());
      for (java.util.Map.Entry<java.lang.Long, SubscriptionState> other_element : other.subscriptionStates.entrySet()) {

        java.lang.Long other_element_key = other_element.getKey();
        SubscriptionState other_element_value = other_element.getValue();

        java.lang.Long __this__subscriptionStates_copy_key = other_element_key;

        SubscriptionState __this__subscriptionStates_copy_value = new SubscriptionState(other_element_value);

        __this__subscriptionStates.put(__this__subscriptionStates_copy_key, __this__subscriptionStates_copy_value);
      }
      this.subscriptionStates = __this__subscriptionStates;
    }
  }

  public RefreshSubscriptionsResponse deepCopy() {
    return new RefreshSubscriptionsResponse(this);
  }

  @Override
  public void clear() {
    setTtlMillisIsSet(false);
    this.ttlMillis = 0;
    this.subscriptionStates = null;
  }

  public long getTtlMillis() {
    return this.ttlMillis;
  }

  public RefreshSubscriptionsResponse setTtlMillis(long ttlMillis) {
    this.ttlMillis = ttlMillis;
    setTtlMillisIsSet(true);
    return this;
  }

  public void unsetTtlMillis() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TTLMILLIS_ISSET_ID);
  }

  /** Returns true if field ttlMillis is set (has been assigned a value) and false otherwise */
  public boolean isSetTtlMillis() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TTLMILLIS_ISSET_ID);
  }

  public void setTtlMillisIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TTLMILLIS_ISSET_ID, value);
  }

  public int getSubscriptionStatesSize() {
    return (this.subscriptionStates == null) ? 0 : this.subscriptionStates.size();
  }

  public void putToSubscriptionStates(long key, SubscriptionState val) {
    if (this.subscriptionStates == null) {
      this.subscriptionStates = new java.util.HashMap<java.lang.Long,SubscriptionState>();
    }
    this.subscriptionStates.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Long,SubscriptionState> getSubscriptionStates() {
    return this.subscriptionStates;
  }

  public RefreshSubscriptionsResponse setSubscriptionStates(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Long,SubscriptionState> subscriptionStates) {
    this.subscriptionStates = subscriptionStates;
    return this;
  }

  public void unsetSubscriptionStates() {
    this.subscriptionStates = null;
  }

  /** Returns true if field subscriptionStates is set (has been assigned a value) and false otherwise */
  public boolean isSetSubscriptionStates() {
    return this.subscriptionStates != null;
  }

  public void setSubscriptionStatesIsSet(boolean value) {
    if (!value) {
      this.subscriptionStates = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TTL_MILLIS:
      if (value == null) {
        unsetTtlMillis();
      } else {
        setTtlMillis((java.lang.Long)value);
      }
      break;

    case SUBSCRIPTION_STATES:
      if (value == null) {
        unsetSubscriptionStates();
      } else {
        setSubscriptionStates((java.util.Map<java.lang.Long,SubscriptionState>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TTL_MILLIS:
      return getTtlMillis();

    case SUBSCRIPTION_STATES:
      return getSubscriptionStates();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TTL_MILLIS:
      return isSetTtlMillis();
    case SUBSCRIPTION_STATES:
      return isSetSubscriptionStates();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof RefreshSubscriptionsResponse)
      return this.equals((RefreshSubscriptionsResponse)that);
    return false;
  }

  public boolean equals(RefreshSubscriptionsResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_ttlMillis = true;
    boolean that_present_ttlMillis = true;
    if (this_present_ttlMillis || that_present_ttlMillis) {
      if (!(this_present_ttlMillis && that_present_ttlMillis))
        return false;
      if (this.ttlMillis != that.ttlMillis)
        return false;
    }

    boolean this_present_subscriptionStates = true && this.isSetSubscriptionStates();
    boolean that_present_subscriptionStates = true && that.isSetSubscriptionStates();
    if (this_present_subscriptionStates || that_present_subscriptionStates) {
      if (!(this_present_subscriptionStates && that_present_subscriptionStates))
        return false;
      if (!this.subscriptionStates.equals(that.subscriptionStates))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(ttlMillis);

    hashCode = hashCode * 8191 + ((isSetSubscriptionStates()) ? 131071 : 524287);
    if (isSetSubscriptionStates())
      hashCode = hashCode * 8191 + subscriptionStates.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(RefreshSubscriptionsResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTtlMillis()).compareTo(other.isSetTtlMillis());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTtlMillis()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ttlMillis, other.ttlMillis);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSubscriptionStates()).compareTo(other.isSetSubscriptionStates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubscriptionStates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subscriptionStates, other.subscriptionStates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("RefreshSubscriptionsResponse(");
    boolean first = true;

    sb.append("ttlMillis:");
    sb.append(this.ttlMillis);
    first = false;
    if (!first) sb.append(", ");
    sb.append("subscriptionStates:");
    if (this.subscriptionStates == null) {
      sb.append("null");
    } else {
      sb.append(this.subscriptionStates);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RefreshSubscriptionsResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RefreshSubscriptionsResponseStandardScheme getScheme() {
      return new RefreshSubscriptionsResponseStandardScheme();
    }
  }

  private static class RefreshSubscriptionsResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<RefreshSubscriptionsResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RefreshSubscriptionsResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TTL_MILLIS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ttlMillis = iprot.readI64();
              struct.setTtlMillisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUBSCRIPTION_STATES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map932 = iprot.readMapBegin();
                struct.subscriptionStates = new java.util.HashMap<java.lang.Long,SubscriptionState>(2*_map932.size);
                long _key933;
                @org.apache.thrift.annotation.Nullable SubscriptionState _val934;
                for (int _i935 = 0; _i935 < _map932.size; ++_i935)
                {
                  _key933 = iprot.readI64();
                  _val934 = new SubscriptionState();
                  _val934.read(iprot);
                  struct.subscriptionStates.put(_key933, _val934);
                }
                iprot.readMapEnd();
              }
              struct.setSubscriptionStatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RefreshSubscriptionsResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TTL_MILLIS_FIELD_DESC);
      oprot.writeI64(struct.ttlMillis);
      oprot.writeFieldEnd();
      if (struct.subscriptionStates != null) {
        oprot.writeFieldBegin(SUBSCRIPTION_STATES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, struct.subscriptionStates.size()));
          for (java.util.Map.Entry<java.lang.Long, SubscriptionState> _iter936 : struct.subscriptionStates.entrySet())
          {
            oprot.writeI64(_iter936.getKey());
            _iter936.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RefreshSubscriptionsResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RefreshSubscriptionsResponseTupleScheme getScheme() {
      return new RefreshSubscriptionsResponseTupleScheme();
    }
  }

  private static class RefreshSubscriptionsResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<RefreshSubscriptionsResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RefreshSubscriptionsResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTtlMillis()) {
        optionals.set(0);
      }
      if (struct.isSetSubscriptionStates()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetTtlMillis()) {
        oprot.writeI64(struct.ttlMillis);
      }
      if (struct.isSetSubscriptionStates()) {
        {
          oprot.writeI32(struct.subscriptionStates.size());
          for (java.util.Map.Entry<java.lang.Long, SubscriptionState> _iter937 : struct.subscriptionStates.entrySet())
          {
            oprot.writeI64(_iter937.getKey());
            _iter937.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RefreshSubscriptionsResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.ttlMillis = iprot.readI64();
        struct.setTtlMillisIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map938 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.subscriptionStates = new java.util.HashMap<java.lang.Long,SubscriptionState>(2*_map938.size);
          long _key939;
          @org.apache.thrift.annotation.Nullable SubscriptionState _val940;
          for (int _i941 = 0; _i941 < _map938.size; ++_i941)
          {
            _key939 = iprot.readI64();
            _val940 = new SubscriptionState();
            _val940.read(iprot);
            struct.subscriptionStates.put(_key939, _val940);
          }
        }
        struct.setSubscriptionStatesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

