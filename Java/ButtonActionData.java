/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-17")
public class ButtonActionData implements org.apache.thrift.TBase<ButtonActionData, ButtonActionData._Fields>, java.io.Serializable, Cloneable, Comparable<ButtonActionData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ButtonActionData");

  private static final org.apache.thrift.protocol.TField ADD_FRIEND_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("addFriendData", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField INSTALL_APP_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("installAppData", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField JUMP_URL_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("jumpUrlData", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ButtonActionDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ButtonActionDataTupleSchemeFactory();

  public AddFriendData addFriendData; // required
  public InstallAppData installAppData; // required
  public JumpUrlData jumpUrlData; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ADD_FRIEND_DATA((short)1, "addFriendData"),
    INSTALL_APP_DATA((short)2, "installAppData"),
    JUMP_URL_DATA((short)3, "jumpUrlData");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ADD_FRIEND_DATA
          return ADD_FRIEND_DATA;
        case 2: // INSTALL_APP_DATA
          return INSTALL_APP_DATA;
        case 3: // JUMP_URL_DATA
          return JUMP_URL_DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ADD_FRIEND_DATA, new org.apache.thrift.meta_data.FieldMetaData("addFriendData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AddFriendData.class)));
    tmpMap.put(_Fields.INSTALL_APP_DATA, new org.apache.thrift.meta_data.FieldMetaData("installAppData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InstallAppData.class)));
    tmpMap.put(_Fields.JUMP_URL_DATA, new org.apache.thrift.meta_data.FieldMetaData("jumpUrlData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JumpUrlData.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ButtonActionData.class, metaDataMap);
  }

  public ButtonActionData() {
  }

  public ButtonActionData(
    AddFriendData addFriendData,
    InstallAppData installAppData,
    JumpUrlData jumpUrlData)
  {
    this();
    this.addFriendData = addFriendData;
    this.installAppData = installAppData;
    this.jumpUrlData = jumpUrlData;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ButtonActionData(ButtonActionData other) {
    if (other.isSetAddFriendData()) {
      this.addFriendData = new AddFriendData(other.addFriendData);
    }
    if (other.isSetInstallAppData()) {
      this.installAppData = new InstallAppData(other.installAppData);
    }
    if (other.isSetJumpUrlData()) {
      this.jumpUrlData = new JumpUrlData(other.jumpUrlData);
    }
  }

  public ButtonActionData deepCopy() {
    return new ButtonActionData(this);
  }

  @Override
  public void clear() {
    this.addFriendData = null;
    this.installAppData = null;
    this.jumpUrlData = null;
  }

  public AddFriendData getAddFriendData() {
    return this.addFriendData;
  }

  public ButtonActionData setAddFriendData(AddFriendData addFriendData) {
    this.addFriendData = addFriendData;
    return this;
  }

  public void unsetAddFriendData() {
    this.addFriendData = null;
  }

  /** Returns true if field addFriendData is set (has been assigned a value) and false otherwise */
  public boolean isSetAddFriendData() {
    return this.addFriendData != null;
  }

  public void setAddFriendDataIsSet(boolean value) {
    if (!value) {
      this.addFriendData = null;
    }
  }

  public InstallAppData getInstallAppData() {
    return this.installAppData;
  }

  public ButtonActionData setInstallAppData(InstallAppData installAppData) {
    this.installAppData = installAppData;
    return this;
  }

  public void unsetInstallAppData() {
    this.installAppData = null;
  }

  /** Returns true if field installAppData is set (has been assigned a value) and false otherwise */
  public boolean isSetInstallAppData() {
    return this.installAppData != null;
  }

  public void setInstallAppDataIsSet(boolean value) {
    if (!value) {
      this.installAppData = null;
    }
  }

  public JumpUrlData getJumpUrlData() {
    return this.jumpUrlData;
  }

  public ButtonActionData setJumpUrlData(JumpUrlData jumpUrlData) {
    this.jumpUrlData = jumpUrlData;
    return this;
  }

  public void unsetJumpUrlData() {
    this.jumpUrlData = null;
  }

  /** Returns true if field jumpUrlData is set (has been assigned a value) and false otherwise */
  public boolean isSetJumpUrlData() {
    return this.jumpUrlData != null;
  }

  public void setJumpUrlDataIsSet(boolean value) {
    if (!value) {
      this.jumpUrlData = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ADD_FRIEND_DATA:
      if (value == null) {
        unsetAddFriendData();
      } else {
        setAddFriendData((AddFriendData)value);
      }
      break;

    case INSTALL_APP_DATA:
      if (value == null) {
        unsetInstallAppData();
      } else {
        setInstallAppData((InstallAppData)value);
      }
      break;

    case JUMP_URL_DATA:
      if (value == null) {
        unsetJumpUrlData();
      } else {
        setJumpUrlData((JumpUrlData)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ADD_FRIEND_DATA:
      return getAddFriendData();

    case INSTALL_APP_DATA:
      return getInstallAppData();

    case JUMP_URL_DATA:
      return getJumpUrlData();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ADD_FRIEND_DATA:
      return isSetAddFriendData();
    case INSTALL_APP_DATA:
      return isSetInstallAppData();
    case JUMP_URL_DATA:
      return isSetJumpUrlData();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ButtonActionData)
      return this.equals((ButtonActionData)that);
    return false;
  }

  public boolean equals(ButtonActionData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_addFriendData = true && this.isSetAddFriendData();
    boolean that_present_addFriendData = true && that.isSetAddFriendData();
    if (this_present_addFriendData || that_present_addFriendData) {
      if (!(this_present_addFriendData && that_present_addFriendData))
        return false;
      if (!this.addFriendData.equals(that.addFriendData))
        return false;
    }

    boolean this_present_installAppData = true && this.isSetInstallAppData();
    boolean that_present_installAppData = true && that.isSetInstallAppData();
    if (this_present_installAppData || that_present_installAppData) {
      if (!(this_present_installAppData && that_present_installAppData))
        return false;
      if (!this.installAppData.equals(that.installAppData))
        return false;
    }

    boolean this_present_jumpUrlData = true && this.isSetJumpUrlData();
    boolean that_present_jumpUrlData = true && that.isSetJumpUrlData();
    if (this_present_jumpUrlData || that_present_jumpUrlData) {
      if (!(this_present_jumpUrlData && that_present_jumpUrlData))
        return false;
      if (!this.jumpUrlData.equals(that.jumpUrlData))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAddFriendData()) ? 131071 : 524287);
    if (isSetAddFriendData())
      hashCode = hashCode * 8191 + addFriendData.hashCode();

    hashCode = hashCode * 8191 + ((isSetInstallAppData()) ? 131071 : 524287);
    if (isSetInstallAppData())
      hashCode = hashCode * 8191 + installAppData.hashCode();

    hashCode = hashCode * 8191 + ((isSetJumpUrlData()) ? 131071 : 524287);
    if (isSetJumpUrlData())
      hashCode = hashCode * 8191 + jumpUrlData.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ButtonActionData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetAddFriendData()).compareTo(other.isSetAddFriendData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddFriendData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addFriendData, other.addFriendData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInstallAppData()).compareTo(other.isSetInstallAppData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstallAppData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.installAppData, other.installAppData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJumpUrlData()).compareTo(other.isSetJumpUrlData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJumpUrlData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jumpUrlData, other.jumpUrlData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ButtonActionData(");
    boolean first = true;

    sb.append("addFriendData:");
    if (this.addFriendData == null) {
      sb.append("null");
    } else {
      sb.append(this.addFriendData);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("installAppData:");
    if (this.installAppData == null) {
      sb.append("null");
    } else {
      sb.append(this.installAppData);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jumpUrlData:");
    if (this.jumpUrlData == null) {
      sb.append("null");
    } else {
      sb.append(this.jumpUrlData);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (addFriendData != null) {
      addFriendData.validate();
    }
    if (installAppData != null) {
      installAppData.validate();
    }
    if (jumpUrlData != null) {
      jumpUrlData.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ButtonActionDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ButtonActionDataStandardScheme getScheme() {
      return new ButtonActionDataStandardScheme();
    }
  }

  private static class ButtonActionDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<ButtonActionData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ButtonActionData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ADD_FRIEND_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.addFriendData = new AddFriendData();
              struct.addFriendData.read(iprot);
              struct.setAddFriendDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INSTALL_APP_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.installAppData = new InstallAppData();
              struct.installAppData.read(iprot);
              struct.setInstallAppDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // JUMP_URL_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.jumpUrlData = new JumpUrlData();
              struct.jumpUrlData.read(iprot);
              struct.setJumpUrlDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ButtonActionData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.addFriendData != null) {
        oprot.writeFieldBegin(ADD_FRIEND_DATA_FIELD_DESC);
        struct.addFriendData.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.installAppData != null) {
        oprot.writeFieldBegin(INSTALL_APP_DATA_FIELD_DESC);
        struct.installAppData.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.jumpUrlData != null) {
        oprot.writeFieldBegin(JUMP_URL_DATA_FIELD_DESC);
        struct.jumpUrlData.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ButtonActionDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ButtonActionDataTupleScheme getScheme() {
      return new ButtonActionDataTupleScheme();
    }
  }

  private static class ButtonActionDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<ButtonActionData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ButtonActionData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAddFriendData()) {
        optionals.set(0);
      }
      if (struct.isSetInstallAppData()) {
        optionals.set(1);
      }
      if (struct.isSetJumpUrlData()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetAddFriendData()) {
        struct.addFriendData.write(oprot);
      }
      if (struct.isSetInstallAppData()) {
        struct.installAppData.write(oprot);
      }
      if (struct.isSetJumpUrlData()) {
        struct.jumpUrlData.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ButtonActionData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.addFriendData = new AddFriendData();
        struct.addFriendData.read(iprot);
        struct.setAddFriendDataIsSet(true);
      }
      if (incoming.get(1)) {
        struct.installAppData = new InstallAppData();
        struct.installAppData.read(iprot);
        struct.setInstallAppDataIsSet(true);
      }
      if (incoming.get(2)) {
        struct.jumpUrlData = new JumpUrlData();
        struct.jumpUrlData.read(iprot);
        struct.setJumpUrlDataIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

