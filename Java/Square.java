/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-17")
public class Square implements org.apache.thrift.TBase<Square, Square._Fields>, java.io.Serializable, Cloneable, Comparable<Square> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Square");

  private static final org.apache.thrift.protocol.TField MID_FIELD_DESC = new org.apache.thrift.protocol.TField("mid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField WELCOME_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("welcomeMessage", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PROFILE_IMAGE_OBS_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("profileImageObsHash", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SEARCHABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("searchable", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryID", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField INVITATION_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("invitationURL", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField REVISION_FIELD_DESC = new org.apache.thrift.protocol.TField("revision", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField ABLE_TO_USE_INVITATION_TICKET_FIELD_DESC = new org.apache.thrift.protocol.TField("ableToUseInvitationTicket", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SquareStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SquareTupleSchemeFactory();

  public java.lang.String mid; // required
  public java.lang.String name; // required
  public java.lang.String welcomeMessage; // required
  public java.lang.String profileImageObsHash; // required
  public java.lang.String desc; // required
  public boolean searchable; // required
  /**
   * 
   * @see SquareType
   */
  public SquareType type; // required
  public int categoryID; // required
  public java.lang.String invitationURL; // required
  public long revision; // required
  public boolean ableToUseInvitationTicket; // required
  /**
   * 
   * @see SquareState
   */
  public SquareState state; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MID((short)1, "mid"),
    NAME((short)2, "name"),
    WELCOME_MESSAGE((short)3, "welcomeMessage"),
    PROFILE_IMAGE_OBS_HASH((short)4, "profileImageObsHash"),
    DESC((short)5, "desc"),
    SEARCHABLE((short)6, "searchable"),
    /**
     * 
     * @see SquareType
     */
    TYPE((short)7, "type"),
    CATEGORY_ID((short)8, "categoryID"),
    INVITATION_URL((short)9, "invitationURL"),
    REVISION((short)10, "revision"),
    ABLE_TO_USE_INVITATION_TICKET((short)11, "ableToUseInvitationTicket"),
    /**
     * 
     * @see SquareState
     */
    STATE((short)12, "state");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MID
          return MID;
        case 2: // NAME
          return NAME;
        case 3: // WELCOME_MESSAGE
          return WELCOME_MESSAGE;
        case 4: // PROFILE_IMAGE_OBS_HASH
          return PROFILE_IMAGE_OBS_HASH;
        case 5: // DESC
          return DESC;
        case 6: // SEARCHABLE
          return SEARCHABLE;
        case 7: // TYPE
          return TYPE;
        case 8: // CATEGORY_ID
          return CATEGORY_ID;
        case 9: // INVITATION_URL
          return INVITATION_URL;
        case 10: // REVISION
          return REVISION;
        case 11: // ABLE_TO_USE_INVITATION_TICKET
          return ABLE_TO_USE_INVITATION_TICKET;
        case 12: // STATE
          return STATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SEARCHABLE_ISSET_ID = 0;
  private static final int __CATEGORYID_ISSET_ID = 1;
  private static final int __REVISION_ISSET_ID = 2;
  private static final int __ABLETOUSEINVITATIONTICKET_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MID, new org.apache.thrift.meta_data.FieldMetaData("mid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WELCOME_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("welcomeMessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROFILE_IMAGE_OBS_HASH, new org.apache.thrift.meta_data.FieldMetaData("profileImageObsHash", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEARCHABLE, new org.apache.thrift.meta_data.FieldMetaData("searchable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SquareType.class)));
    tmpMap.put(_Fields.CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("categoryID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INVITATION_URL, new org.apache.thrift.meta_data.FieldMetaData("invitationURL", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REVISION, new org.apache.thrift.meta_data.FieldMetaData("revision", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ABLE_TO_USE_INVITATION_TICKET, new org.apache.thrift.meta_data.FieldMetaData("ableToUseInvitationTicket", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SquareState.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Square.class, metaDataMap);
  }

  public Square() {
  }

  public Square(
    java.lang.String mid,
    java.lang.String name,
    java.lang.String welcomeMessage,
    java.lang.String profileImageObsHash,
    java.lang.String desc,
    boolean searchable,
    SquareType type,
    int categoryID,
    java.lang.String invitationURL,
    long revision,
    boolean ableToUseInvitationTicket,
    SquareState state)
  {
    this();
    this.mid = mid;
    this.name = name;
    this.welcomeMessage = welcomeMessage;
    this.profileImageObsHash = profileImageObsHash;
    this.desc = desc;
    this.searchable = searchable;
    setSearchableIsSet(true);
    this.type = type;
    this.categoryID = categoryID;
    setCategoryIDIsSet(true);
    this.invitationURL = invitationURL;
    this.revision = revision;
    setRevisionIsSet(true);
    this.ableToUseInvitationTicket = ableToUseInvitationTicket;
    setAbleToUseInvitationTicketIsSet(true);
    this.state = state;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Square(Square other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMid()) {
      this.mid = other.mid;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetWelcomeMessage()) {
      this.welcomeMessage = other.welcomeMessage;
    }
    if (other.isSetProfileImageObsHash()) {
      this.profileImageObsHash = other.profileImageObsHash;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    this.searchable = other.searchable;
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.categoryID = other.categoryID;
    if (other.isSetInvitationURL()) {
      this.invitationURL = other.invitationURL;
    }
    this.revision = other.revision;
    this.ableToUseInvitationTicket = other.ableToUseInvitationTicket;
    if (other.isSetState()) {
      this.state = other.state;
    }
  }

  public Square deepCopy() {
    return new Square(this);
  }

  @Override
  public void clear() {
    this.mid = null;
    this.name = null;
    this.welcomeMessage = null;
    this.profileImageObsHash = null;
    this.desc = null;
    setSearchableIsSet(false);
    this.searchable = false;
    this.type = null;
    setCategoryIDIsSet(false);
    this.categoryID = 0;
    this.invitationURL = null;
    setRevisionIsSet(false);
    this.revision = 0;
    setAbleToUseInvitationTicketIsSet(false);
    this.ableToUseInvitationTicket = false;
    this.state = null;
  }

  public java.lang.String getMid() {
    return this.mid;
  }

  public Square setMid(java.lang.String mid) {
    this.mid = mid;
    return this;
  }

  public void unsetMid() {
    this.mid = null;
  }

  /** Returns true if field mid is set (has been assigned a value) and false otherwise */
  public boolean isSetMid() {
    return this.mid != null;
  }

  public void setMidIsSet(boolean value) {
    if (!value) {
      this.mid = null;
    }
  }

  public java.lang.String getName() {
    return this.name;
  }

  public Square setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public java.lang.String getWelcomeMessage() {
    return this.welcomeMessage;
  }

  public Square setWelcomeMessage(java.lang.String welcomeMessage) {
    this.welcomeMessage = welcomeMessage;
    return this;
  }

  public void unsetWelcomeMessage() {
    this.welcomeMessage = null;
  }

  /** Returns true if field welcomeMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetWelcomeMessage() {
    return this.welcomeMessage != null;
  }

  public void setWelcomeMessageIsSet(boolean value) {
    if (!value) {
      this.welcomeMessage = null;
    }
  }

  public java.lang.String getProfileImageObsHash() {
    return this.profileImageObsHash;
  }

  public Square setProfileImageObsHash(java.lang.String profileImageObsHash) {
    this.profileImageObsHash = profileImageObsHash;
    return this;
  }

  public void unsetProfileImageObsHash() {
    this.profileImageObsHash = null;
  }

  /** Returns true if field profileImageObsHash is set (has been assigned a value) and false otherwise */
  public boolean isSetProfileImageObsHash() {
    return this.profileImageObsHash != null;
  }

  public void setProfileImageObsHashIsSet(boolean value) {
    if (!value) {
      this.profileImageObsHash = null;
    }
  }

  public java.lang.String getDesc() {
    return this.desc;
  }

  public Square setDesc(java.lang.String desc) {
    this.desc = desc;
    return this;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public boolean isSearchable() {
    return this.searchable;
  }

  public Square setSearchable(boolean searchable) {
    this.searchable = searchable;
    setSearchableIsSet(true);
    return this;
  }

  public void unsetSearchable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEARCHABLE_ISSET_ID);
  }

  /** Returns true if field searchable is set (has been assigned a value) and false otherwise */
  public boolean isSetSearchable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEARCHABLE_ISSET_ID);
  }

  public void setSearchableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEARCHABLE_ISSET_ID, value);
  }

  /**
   * 
   * @see SquareType
   */
  public SquareType getType() {
    return this.type;
  }

  /**
   * 
   * @see SquareType
   */
  public Square setType(SquareType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getCategoryID() {
    return this.categoryID;
  }

  public Square setCategoryID(int categoryID) {
    this.categoryID = categoryID;
    setCategoryIDIsSet(true);
    return this;
  }

  public void unsetCategoryID() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
  }

  /** Returns true if field categoryID is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryID() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
  }

  public void setCategoryIDIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CATEGORYID_ISSET_ID, value);
  }

  public java.lang.String getInvitationURL() {
    return this.invitationURL;
  }

  public Square setInvitationURL(java.lang.String invitationURL) {
    this.invitationURL = invitationURL;
    return this;
  }

  public void unsetInvitationURL() {
    this.invitationURL = null;
  }

  /** Returns true if field invitationURL is set (has been assigned a value) and false otherwise */
  public boolean isSetInvitationURL() {
    return this.invitationURL != null;
  }

  public void setInvitationURLIsSet(boolean value) {
    if (!value) {
      this.invitationURL = null;
    }
  }

  public long getRevision() {
    return this.revision;
  }

  public Square setRevision(long revision) {
    this.revision = revision;
    setRevisionIsSet(true);
    return this;
  }

  public void unsetRevision() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REVISION_ISSET_ID);
  }

  /** Returns true if field revision is set (has been assigned a value) and false otherwise */
  public boolean isSetRevision() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REVISION_ISSET_ID);
  }

  public void setRevisionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REVISION_ISSET_ID, value);
  }

  public boolean isAbleToUseInvitationTicket() {
    return this.ableToUseInvitationTicket;
  }

  public Square setAbleToUseInvitationTicket(boolean ableToUseInvitationTicket) {
    this.ableToUseInvitationTicket = ableToUseInvitationTicket;
    setAbleToUseInvitationTicketIsSet(true);
    return this;
  }

  public void unsetAbleToUseInvitationTicket() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ABLETOUSEINVITATIONTICKET_ISSET_ID);
  }

  /** Returns true if field ableToUseInvitationTicket is set (has been assigned a value) and false otherwise */
  public boolean isSetAbleToUseInvitationTicket() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ABLETOUSEINVITATIONTICKET_ISSET_ID);
  }

  public void setAbleToUseInvitationTicketIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ABLETOUSEINVITATIONTICKET_ISSET_ID, value);
  }

  /**
   * 
   * @see SquareState
   */
  public SquareState getState() {
    return this.state;
  }

  /**
   * 
   * @see SquareState
   */
  public Square setState(SquareState state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case MID:
      if (value == null) {
        unsetMid();
      } else {
        setMid((java.lang.String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case WELCOME_MESSAGE:
      if (value == null) {
        unsetWelcomeMessage();
      } else {
        setWelcomeMessage((java.lang.String)value);
      }
      break;

    case PROFILE_IMAGE_OBS_HASH:
      if (value == null) {
        unsetProfileImageObsHash();
      } else {
        setProfileImageObsHash((java.lang.String)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((java.lang.String)value);
      }
      break;

    case SEARCHABLE:
      if (value == null) {
        unsetSearchable();
      } else {
        setSearchable((java.lang.Boolean)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((SquareType)value);
      }
      break;

    case CATEGORY_ID:
      if (value == null) {
        unsetCategoryID();
      } else {
        setCategoryID((java.lang.Integer)value);
      }
      break;

    case INVITATION_URL:
      if (value == null) {
        unsetInvitationURL();
      } else {
        setInvitationURL((java.lang.String)value);
      }
      break;

    case REVISION:
      if (value == null) {
        unsetRevision();
      } else {
        setRevision((java.lang.Long)value);
      }
      break;

    case ABLE_TO_USE_INVITATION_TICKET:
      if (value == null) {
        unsetAbleToUseInvitationTicket();
      } else {
        setAbleToUseInvitationTicket((java.lang.Boolean)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((SquareState)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case MID:
      return getMid();

    case NAME:
      return getName();

    case WELCOME_MESSAGE:
      return getWelcomeMessage();

    case PROFILE_IMAGE_OBS_HASH:
      return getProfileImageObsHash();

    case DESC:
      return getDesc();

    case SEARCHABLE:
      return isSearchable();

    case TYPE:
      return getType();

    case CATEGORY_ID:
      return getCategoryID();

    case INVITATION_URL:
      return getInvitationURL();

    case REVISION:
      return getRevision();

    case ABLE_TO_USE_INVITATION_TICKET:
      return isAbleToUseInvitationTicket();

    case STATE:
      return getState();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case MID:
      return isSetMid();
    case NAME:
      return isSetName();
    case WELCOME_MESSAGE:
      return isSetWelcomeMessage();
    case PROFILE_IMAGE_OBS_HASH:
      return isSetProfileImageObsHash();
    case DESC:
      return isSetDesc();
    case SEARCHABLE:
      return isSetSearchable();
    case TYPE:
      return isSetType();
    case CATEGORY_ID:
      return isSetCategoryID();
    case INVITATION_URL:
      return isSetInvitationURL();
    case REVISION:
      return isSetRevision();
    case ABLE_TO_USE_INVITATION_TICKET:
      return isSetAbleToUseInvitationTicket();
    case STATE:
      return isSetState();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Square)
      return this.equals((Square)that);
    return false;
  }

  public boolean equals(Square that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_mid = true && this.isSetMid();
    boolean that_present_mid = true && that.isSetMid();
    if (this_present_mid || that_present_mid) {
      if (!(this_present_mid && that_present_mid))
        return false;
      if (!this.mid.equals(that.mid))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_welcomeMessage = true && this.isSetWelcomeMessage();
    boolean that_present_welcomeMessage = true && that.isSetWelcomeMessage();
    if (this_present_welcomeMessage || that_present_welcomeMessage) {
      if (!(this_present_welcomeMessage && that_present_welcomeMessage))
        return false;
      if (!this.welcomeMessage.equals(that.welcomeMessage))
        return false;
    }

    boolean this_present_profileImageObsHash = true && this.isSetProfileImageObsHash();
    boolean that_present_profileImageObsHash = true && that.isSetProfileImageObsHash();
    if (this_present_profileImageObsHash || that_present_profileImageObsHash) {
      if (!(this_present_profileImageObsHash && that_present_profileImageObsHash))
        return false;
      if (!this.profileImageObsHash.equals(that.profileImageObsHash))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_searchable = true;
    boolean that_present_searchable = true;
    if (this_present_searchable || that_present_searchable) {
      if (!(this_present_searchable && that_present_searchable))
        return false;
      if (this.searchable != that.searchable)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_categoryID = true;
    boolean that_present_categoryID = true;
    if (this_present_categoryID || that_present_categoryID) {
      if (!(this_present_categoryID && that_present_categoryID))
        return false;
      if (this.categoryID != that.categoryID)
        return false;
    }

    boolean this_present_invitationURL = true && this.isSetInvitationURL();
    boolean that_present_invitationURL = true && that.isSetInvitationURL();
    if (this_present_invitationURL || that_present_invitationURL) {
      if (!(this_present_invitationURL && that_present_invitationURL))
        return false;
      if (!this.invitationURL.equals(that.invitationURL))
        return false;
    }

    boolean this_present_revision = true;
    boolean that_present_revision = true;
    if (this_present_revision || that_present_revision) {
      if (!(this_present_revision && that_present_revision))
        return false;
      if (this.revision != that.revision)
        return false;
    }

    boolean this_present_ableToUseInvitationTicket = true;
    boolean that_present_ableToUseInvitationTicket = true;
    if (this_present_ableToUseInvitationTicket || that_present_ableToUseInvitationTicket) {
      if (!(this_present_ableToUseInvitationTicket && that_present_ableToUseInvitationTicket))
        return false;
      if (this.ableToUseInvitationTicket != that.ableToUseInvitationTicket)
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetMid()) ? 131071 : 524287);
    if (isSetMid())
      hashCode = hashCode * 8191 + mid.hashCode();

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetWelcomeMessage()) ? 131071 : 524287);
    if (isSetWelcomeMessage())
      hashCode = hashCode * 8191 + welcomeMessage.hashCode();

    hashCode = hashCode * 8191 + ((isSetProfileImageObsHash()) ? 131071 : 524287);
    if (isSetProfileImageObsHash())
      hashCode = hashCode * 8191 + profileImageObsHash.hashCode();

    hashCode = hashCode * 8191 + ((isSetDesc()) ? 131071 : 524287);
    if (isSetDesc())
      hashCode = hashCode * 8191 + desc.hashCode();

    hashCode = hashCode * 8191 + ((searchable) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.getValue();

    hashCode = hashCode * 8191 + categoryID;

    hashCode = hashCode * 8191 + ((isSetInvitationURL()) ? 131071 : 524287);
    if (isSetInvitationURL())
      hashCode = hashCode * 8191 + invitationURL.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(revision);

    hashCode = hashCode * 8191 + ((ableToUseInvitationTicket) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetState()) ? 131071 : 524287);
    if (isSetState())
      hashCode = hashCode * 8191 + state.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(Square other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetMid()).compareTo(other.isSetMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mid, other.mid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWelcomeMessage()).compareTo(other.isSetWelcomeMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWelcomeMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.welcomeMessage, other.welcomeMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProfileImageObsHash()).compareTo(other.isSetProfileImageObsHash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfileImageObsHash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileImageObsHash, other.profileImageObsHash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDesc()).compareTo(other.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, other.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSearchable()).compareTo(other.isSetSearchable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearchable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchable, other.searchable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCategoryID()).compareTo(other.isSetCategoryID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryID, other.categoryID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInvitationURL()).compareTo(other.isSetInvitationURL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvitationURL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invitationURL, other.invitationURL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRevision()).compareTo(other.isSetRevision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRevision()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.revision, other.revision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAbleToUseInvitationTicket()).compareTo(other.isSetAbleToUseInvitationTicket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAbleToUseInvitationTicket()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ableToUseInvitationTicket, other.ableToUseInvitationTicket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Square(");
    boolean first = true;

    sb.append("mid:");
    if (this.mid == null) {
      sb.append("null");
    } else {
      sb.append(this.mid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("welcomeMessage:");
    if (this.welcomeMessage == null) {
      sb.append("null");
    } else {
      sb.append(this.welcomeMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("profileImageObsHash:");
    if (this.profileImageObsHash == null) {
      sb.append("null");
    } else {
      sb.append(this.profileImageObsHash);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("desc:");
    if (this.desc == null) {
      sb.append("null");
    } else {
      sb.append(this.desc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("searchable:");
    sb.append(this.searchable);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("categoryID:");
    sb.append(this.categoryID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("invitationURL:");
    if (this.invitationURL == null) {
      sb.append("null");
    } else {
      sb.append(this.invitationURL);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("revision:");
    sb.append(this.revision);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ableToUseInvitationTicket:");
    sb.append(this.ableToUseInvitationTicket);
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SquareStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SquareStandardScheme getScheme() {
      return new SquareStandardScheme();
    }
  }

  private static class SquareStandardScheme extends org.apache.thrift.scheme.StandardScheme<Square> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Square struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mid = iprot.readString();
              struct.setMidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WELCOME_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.welcomeMessage = iprot.readString();
              struct.setWelcomeMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROFILE_IMAGE_OBS_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.profileImageObsHash = iprot.readString();
              struct.setProfileImageObsHashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SEARCHABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.searchable = iprot.readBool();
              struct.setSearchableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = SquareType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CATEGORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.categoryID = iprot.readI32();
              struct.setCategoryIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // INVITATION_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.invitationURL = iprot.readString();
              struct.setInvitationURLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REVISION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.revision = iprot.readI64();
              struct.setRevisionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ABLE_TO_USE_INVITATION_TICKET
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.ableToUseInvitationTicket = iprot.readBool();
              struct.setAbleToUseInvitationTicketIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = SquareState.findByValue(iprot.readI32());
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Square struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.mid != null) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeString(struct.mid);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.welcomeMessage != null) {
        oprot.writeFieldBegin(WELCOME_MESSAGE_FIELD_DESC);
        oprot.writeString(struct.welcomeMessage);
        oprot.writeFieldEnd();
      }
      if (struct.profileImageObsHash != null) {
        oprot.writeFieldBegin(PROFILE_IMAGE_OBS_HASH_FIELD_DESC);
        oprot.writeString(struct.profileImageObsHash);
        oprot.writeFieldEnd();
      }
      if (struct.desc != null) {
        oprot.writeFieldBegin(DESC_FIELD_DESC);
        oprot.writeString(struct.desc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEARCHABLE_FIELD_DESC);
      oprot.writeBool(struct.searchable);
      oprot.writeFieldEnd();
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
      oprot.writeI32(struct.categoryID);
      oprot.writeFieldEnd();
      if (struct.invitationURL != null) {
        oprot.writeFieldBegin(INVITATION_URL_FIELD_DESC);
        oprot.writeString(struct.invitationURL);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REVISION_FIELD_DESC);
      oprot.writeI64(struct.revision);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ABLE_TO_USE_INVITATION_TICKET_FIELD_DESC);
      oprot.writeBool(struct.ableToUseInvitationTicket);
      oprot.writeFieldEnd();
      if (struct.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SquareTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SquareTupleScheme getScheme() {
      return new SquareTupleScheme();
    }
  }

  private static class SquareTupleScheme extends org.apache.thrift.scheme.TupleScheme<Square> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Square struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetMid()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetWelcomeMessage()) {
        optionals.set(2);
      }
      if (struct.isSetProfileImageObsHash()) {
        optionals.set(3);
      }
      if (struct.isSetDesc()) {
        optionals.set(4);
      }
      if (struct.isSetSearchable()) {
        optionals.set(5);
      }
      if (struct.isSetType()) {
        optionals.set(6);
      }
      if (struct.isSetCategoryID()) {
        optionals.set(7);
      }
      if (struct.isSetInvitationURL()) {
        optionals.set(8);
      }
      if (struct.isSetRevision()) {
        optionals.set(9);
      }
      if (struct.isSetAbleToUseInvitationTicket()) {
        optionals.set(10);
      }
      if (struct.isSetState()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetMid()) {
        oprot.writeString(struct.mid);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetWelcomeMessage()) {
        oprot.writeString(struct.welcomeMessage);
      }
      if (struct.isSetProfileImageObsHash()) {
        oprot.writeString(struct.profileImageObsHash);
      }
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
      if (struct.isSetSearchable()) {
        oprot.writeBool(struct.searchable);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetCategoryID()) {
        oprot.writeI32(struct.categoryID);
      }
      if (struct.isSetInvitationURL()) {
        oprot.writeString(struct.invitationURL);
      }
      if (struct.isSetRevision()) {
        oprot.writeI64(struct.revision);
      }
      if (struct.isSetAbleToUseInvitationTicket()) {
        oprot.writeBool(struct.ableToUseInvitationTicket);
      }
      if (struct.isSetState()) {
        oprot.writeI32(struct.state.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Square struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.mid = iprot.readString();
        struct.setMidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.welcomeMessage = iprot.readString();
        struct.setWelcomeMessageIsSet(true);
      }
      if (incoming.get(3)) {
        struct.profileImageObsHash = iprot.readString();
        struct.setProfileImageObsHashIsSet(true);
      }
      if (incoming.get(4)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
      if (incoming.get(5)) {
        struct.searchable = iprot.readBool();
        struct.setSearchableIsSet(true);
      }
      if (incoming.get(6)) {
        struct.type = SquareType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.categoryID = iprot.readI32();
        struct.setCategoryIDIsSet(true);
      }
      if (incoming.get(8)) {
        struct.invitationURL = iprot.readString();
        struct.setInvitationURLIsSet(true);
      }
      if (incoming.get(9)) {
        struct.revision = iprot.readI64();
        struct.setRevisionIsSet(true);
      }
      if (incoming.get(10)) {
        struct.ableToUseInvitationTicket = iprot.readBool();
        struct.setAbleToUseInvitationTicketIsSet(true);
      }
      if (incoming.get(11)) {
        struct.state = SquareState.findByValue(iprot.readI32());
        struct.setStateIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

