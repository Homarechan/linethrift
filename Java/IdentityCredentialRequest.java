/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-17")
public class IdentityCredentialRequest implements org.apache.thrift.TBase<IdentityCredentialRequest, IdentityCredentialRequest._Fields>, java.io.Serializable, Cloneable, Comparable<IdentityCredentialRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IdentityCredentialRequest");

  private static final org.apache.thrift.protocol.TField META_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metaData", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField IDENTITY_PROVIDER_FIELD_DESC = new org.apache.thrift.protocol.TField("identityProvider", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CIPHER_KEY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cipherKeyId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CIPHER_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("cipherText", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CONFIRMATION_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("confirmationRequest", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new IdentityCredentialRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new IdentityCredentialRequestTupleSchemeFactory();

  public java.util.Map<java.lang.String,java.lang.String> metaData; // required
  /**
   * 
   * @see IdentityProvider
   */
  public IdentityProvider identityProvider; // required
  public java.lang.String cipherKeyId; // required
  public java.lang.String cipherText; // required
  public IdentifierConfirmationRequest confirmationRequest; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    META_DATA((short)1, "metaData"),
    /**
     * 
     * @see IdentityProvider
     */
    IDENTITY_PROVIDER((short)2, "identityProvider"),
    CIPHER_KEY_ID((short)3, "cipherKeyId"),
    CIPHER_TEXT((short)4, "cipherText"),
    CONFIRMATION_REQUEST((short)5, "confirmationRequest");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // META_DATA
          return META_DATA;
        case 2: // IDENTITY_PROVIDER
          return IDENTITY_PROVIDER;
        case 3: // CIPHER_KEY_ID
          return CIPHER_KEY_ID;
        case 4: // CIPHER_TEXT
          return CIPHER_TEXT;
        case 5: // CONFIRMATION_REQUEST
          return CONFIRMATION_REQUEST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.META_DATA, new org.apache.thrift.meta_data.FieldMetaData("metaData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.IDENTITY_PROVIDER, new org.apache.thrift.meta_data.FieldMetaData("identityProvider", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, IdentityProvider.class)));
    tmpMap.put(_Fields.CIPHER_KEY_ID, new org.apache.thrift.meta_data.FieldMetaData("cipherKeyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CIPHER_TEXT, new org.apache.thrift.meta_data.FieldMetaData("cipherText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONFIRMATION_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("confirmationRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IdentifierConfirmationRequest.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IdentityCredentialRequest.class, metaDataMap);
  }

  public IdentityCredentialRequest() {
  }

  public IdentityCredentialRequest(
    java.util.Map<java.lang.String,java.lang.String> metaData,
    IdentityProvider identityProvider,
    java.lang.String cipherKeyId,
    java.lang.String cipherText,
    IdentifierConfirmationRequest confirmationRequest)
  {
    this();
    this.metaData = metaData;
    this.identityProvider = identityProvider;
    this.cipherKeyId = cipherKeyId;
    this.cipherText = cipherText;
    this.confirmationRequest = confirmationRequest;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IdentityCredentialRequest(IdentityCredentialRequest other) {
    if (other.isSetMetaData()) {
      java.util.Map<java.lang.String,java.lang.String> __this__metaData = new java.util.HashMap<java.lang.String,java.lang.String>(other.metaData);
      this.metaData = __this__metaData;
    }
    if (other.isSetIdentityProvider()) {
      this.identityProvider = other.identityProvider;
    }
    if (other.isSetCipherKeyId()) {
      this.cipherKeyId = other.cipherKeyId;
    }
    if (other.isSetCipherText()) {
      this.cipherText = other.cipherText;
    }
    if (other.isSetConfirmationRequest()) {
      this.confirmationRequest = new IdentifierConfirmationRequest(other.confirmationRequest);
    }
  }

  public IdentityCredentialRequest deepCopy() {
    return new IdentityCredentialRequest(this);
  }

  @Override
  public void clear() {
    this.metaData = null;
    this.identityProvider = null;
    this.cipherKeyId = null;
    this.cipherText = null;
    this.confirmationRequest = null;
  }

  public int getMetaDataSize() {
    return (this.metaData == null) ? 0 : this.metaData.size();
  }

  public void putToMetaData(java.lang.String key, java.lang.String val) {
    if (this.metaData == null) {
      this.metaData = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.metaData.put(key, val);
  }

  public java.util.Map<java.lang.String,java.lang.String> getMetaData() {
    return this.metaData;
  }

  public IdentityCredentialRequest setMetaData(java.util.Map<java.lang.String,java.lang.String> metaData) {
    this.metaData = metaData;
    return this;
  }

  public void unsetMetaData() {
    this.metaData = null;
  }

  /** Returns true if field metaData is set (has been assigned a value) and false otherwise */
  public boolean isSetMetaData() {
    return this.metaData != null;
  }

  public void setMetaDataIsSet(boolean value) {
    if (!value) {
      this.metaData = null;
    }
  }

  /**
   * 
   * @see IdentityProvider
   */
  public IdentityProvider getIdentityProvider() {
    return this.identityProvider;
  }

  /**
   * 
   * @see IdentityProvider
   */
  public IdentityCredentialRequest setIdentityProvider(IdentityProvider identityProvider) {
    this.identityProvider = identityProvider;
    return this;
  }

  public void unsetIdentityProvider() {
    this.identityProvider = null;
  }

  /** Returns true if field identityProvider is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentityProvider() {
    return this.identityProvider != null;
  }

  public void setIdentityProviderIsSet(boolean value) {
    if (!value) {
      this.identityProvider = null;
    }
  }

  public java.lang.String getCipherKeyId() {
    return this.cipherKeyId;
  }

  public IdentityCredentialRequest setCipherKeyId(java.lang.String cipherKeyId) {
    this.cipherKeyId = cipherKeyId;
    return this;
  }

  public void unsetCipherKeyId() {
    this.cipherKeyId = null;
  }

  /** Returns true if field cipherKeyId is set (has been assigned a value) and false otherwise */
  public boolean isSetCipherKeyId() {
    return this.cipherKeyId != null;
  }

  public void setCipherKeyIdIsSet(boolean value) {
    if (!value) {
      this.cipherKeyId = null;
    }
  }

  public java.lang.String getCipherText() {
    return this.cipherText;
  }

  public IdentityCredentialRequest setCipherText(java.lang.String cipherText) {
    this.cipherText = cipherText;
    return this;
  }

  public void unsetCipherText() {
    this.cipherText = null;
  }

  /** Returns true if field cipherText is set (has been assigned a value) and false otherwise */
  public boolean isSetCipherText() {
    return this.cipherText != null;
  }

  public void setCipherTextIsSet(boolean value) {
    if (!value) {
      this.cipherText = null;
    }
  }

  public IdentifierConfirmationRequest getConfirmationRequest() {
    return this.confirmationRequest;
  }

  public IdentityCredentialRequest setConfirmationRequest(IdentifierConfirmationRequest confirmationRequest) {
    this.confirmationRequest = confirmationRequest;
    return this;
  }

  public void unsetConfirmationRequest() {
    this.confirmationRequest = null;
  }

  /** Returns true if field confirmationRequest is set (has been assigned a value) and false otherwise */
  public boolean isSetConfirmationRequest() {
    return this.confirmationRequest != null;
  }

  public void setConfirmationRequestIsSet(boolean value) {
    if (!value) {
      this.confirmationRequest = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case META_DATA:
      if (value == null) {
        unsetMetaData();
      } else {
        setMetaData((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case IDENTITY_PROVIDER:
      if (value == null) {
        unsetIdentityProvider();
      } else {
        setIdentityProvider((IdentityProvider)value);
      }
      break;

    case CIPHER_KEY_ID:
      if (value == null) {
        unsetCipherKeyId();
      } else {
        setCipherKeyId((java.lang.String)value);
      }
      break;

    case CIPHER_TEXT:
      if (value == null) {
        unsetCipherText();
      } else {
        setCipherText((java.lang.String)value);
      }
      break;

    case CONFIRMATION_REQUEST:
      if (value == null) {
        unsetConfirmationRequest();
      } else {
        setConfirmationRequest((IdentifierConfirmationRequest)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case META_DATA:
      return getMetaData();

    case IDENTITY_PROVIDER:
      return getIdentityProvider();

    case CIPHER_KEY_ID:
      return getCipherKeyId();

    case CIPHER_TEXT:
      return getCipherText();

    case CONFIRMATION_REQUEST:
      return getConfirmationRequest();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case META_DATA:
      return isSetMetaData();
    case IDENTITY_PROVIDER:
      return isSetIdentityProvider();
    case CIPHER_KEY_ID:
      return isSetCipherKeyId();
    case CIPHER_TEXT:
      return isSetCipherText();
    case CONFIRMATION_REQUEST:
      return isSetConfirmationRequest();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof IdentityCredentialRequest)
      return this.equals((IdentityCredentialRequest)that);
    return false;
  }

  public boolean equals(IdentityCredentialRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_metaData = true && this.isSetMetaData();
    boolean that_present_metaData = true && that.isSetMetaData();
    if (this_present_metaData || that_present_metaData) {
      if (!(this_present_metaData && that_present_metaData))
        return false;
      if (!this.metaData.equals(that.metaData))
        return false;
    }

    boolean this_present_identityProvider = true && this.isSetIdentityProvider();
    boolean that_present_identityProvider = true && that.isSetIdentityProvider();
    if (this_present_identityProvider || that_present_identityProvider) {
      if (!(this_present_identityProvider && that_present_identityProvider))
        return false;
      if (!this.identityProvider.equals(that.identityProvider))
        return false;
    }

    boolean this_present_cipherKeyId = true && this.isSetCipherKeyId();
    boolean that_present_cipherKeyId = true && that.isSetCipherKeyId();
    if (this_present_cipherKeyId || that_present_cipherKeyId) {
      if (!(this_present_cipherKeyId && that_present_cipherKeyId))
        return false;
      if (!this.cipherKeyId.equals(that.cipherKeyId))
        return false;
    }

    boolean this_present_cipherText = true && this.isSetCipherText();
    boolean that_present_cipherText = true && that.isSetCipherText();
    if (this_present_cipherText || that_present_cipherText) {
      if (!(this_present_cipherText && that_present_cipherText))
        return false;
      if (!this.cipherText.equals(that.cipherText))
        return false;
    }

    boolean this_present_confirmationRequest = true && this.isSetConfirmationRequest();
    boolean that_present_confirmationRequest = true && that.isSetConfirmationRequest();
    if (this_present_confirmationRequest || that_present_confirmationRequest) {
      if (!(this_present_confirmationRequest && that_present_confirmationRequest))
        return false;
      if (!this.confirmationRequest.equals(that.confirmationRequest))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetMetaData()) ? 131071 : 524287);
    if (isSetMetaData())
      hashCode = hashCode * 8191 + metaData.hashCode();

    hashCode = hashCode * 8191 + ((isSetIdentityProvider()) ? 131071 : 524287);
    if (isSetIdentityProvider())
      hashCode = hashCode * 8191 + identityProvider.getValue();

    hashCode = hashCode * 8191 + ((isSetCipherKeyId()) ? 131071 : 524287);
    if (isSetCipherKeyId())
      hashCode = hashCode * 8191 + cipherKeyId.hashCode();

    hashCode = hashCode * 8191 + ((isSetCipherText()) ? 131071 : 524287);
    if (isSetCipherText())
      hashCode = hashCode * 8191 + cipherText.hashCode();

    hashCode = hashCode * 8191 + ((isSetConfirmationRequest()) ? 131071 : 524287);
    if (isSetConfirmationRequest())
      hashCode = hashCode * 8191 + confirmationRequest.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(IdentityCredentialRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetMetaData()).compareTo(other.isSetMetaData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetaData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metaData, other.metaData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIdentityProvider()).compareTo(other.isSetIdentityProvider());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentityProvider()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identityProvider, other.identityProvider);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCipherKeyId()).compareTo(other.isSetCipherKeyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCipherKeyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cipherKeyId, other.cipherKeyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCipherText()).compareTo(other.isSetCipherText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCipherText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cipherText, other.cipherText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetConfirmationRequest()).compareTo(other.isSetConfirmationRequest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfirmationRequest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confirmationRequest, other.confirmationRequest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("IdentityCredentialRequest(");
    boolean first = true;

    sb.append("metaData:");
    if (this.metaData == null) {
      sb.append("null");
    } else {
      sb.append(this.metaData);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("identityProvider:");
    if (this.identityProvider == null) {
      sb.append("null");
    } else {
      sb.append(this.identityProvider);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cipherKeyId:");
    if (this.cipherKeyId == null) {
      sb.append("null");
    } else {
      sb.append(this.cipherKeyId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cipherText:");
    if (this.cipherText == null) {
      sb.append("null");
    } else {
      sb.append(this.cipherText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("confirmationRequest:");
    if (this.confirmationRequest == null) {
      sb.append("null");
    } else {
      sb.append(this.confirmationRequest);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (confirmationRequest != null) {
      confirmationRequest.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IdentityCredentialRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public IdentityCredentialRequestStandardScheme getScheme() {
      return new IdentityCredentialRequestStandardScheme();
    }
  }

  private static class IdentityCredentialRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<IdentityCredentialRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, IdentityCredentialRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // META_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map56 = iprot.readMapBegin();
                struct.metaData = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map56.size);
                java.lang.String _key57;
                java.lang.String _val58;
                for (int _i59 = 0; _i59 < _map56.size; ++_i59)
                {
                  _key57 = iprot.readString();
                  _val58 = iprot.readString();
                  struct.metaData.put(_key57, _val58);
                }
                iprot.readMapEnd();
              }
              struct.setMetaDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IDENTITY_PROVIDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.identityProvider = IdentityProvider.findByValue(iprot.readI32());
              struct.setIdentityProviderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CIPHER_KEY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cipherKeyId = iprot.readString();
              struct.setCipherKeyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CIPHER_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cipherText = iprot.readString();
              struct.setCipherTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONFIRMATION_REQUEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.confirmationRequest = new IdentifierConfirmationRequest();
              struct.confirmationRequest.read(iprot);
              struct.setConfirmationRequestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, IdentityCredentialRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.metaData != null) {
        oprot.writeFieldBegin(META_DATA_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.metaData.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter60 : struct.metaData.entrySet())
          {
            oprot.writeString(_iter60.getKey());
            oprot.writeString(_iter60.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.identityProvider != null) {
        oprot.writeFieldBegin(IDENTITY_PROVIDER_FIELD_DESC);
        oprot.writeI32(struct.identityProvider.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.cipherKeyId != null) {
        oprot.writeFieldBegin(CIPHER_KEY_ID_FIELD_DESC);
        oprot.writeString(struct.cipherKeyId);
        oprot.writeFieldEnd();
      }
      if (struct.cipherText != null) {
        oprot.writeFieldBegin(CIPHER_TEXT_FIELD_DESC);
        oprot.writeString(struct.cipherText);
        oprot.writeFieldEnd();
      }
      if (struct.confirmationRequest != null) {
        oprot.writeFieldBegin(CONFIRMATION_REQUEST_FIELD_DESC);
        struct.confirmationRequest.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IdentityCredentialRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public IdentityCredentialRequestTupleScheme getScheme() {
      return new IdentityCredentialRequestTupleScheme();
    }
  }

  private static class IdentityCredentialRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<IdentityCredentialRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, IdentityCredentialRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetMetaData()) {
        optionals.set(0);
      }
      if (struct.isSetIdentityProvider()) {
        optionals.set(1);
      }
      if (struct.isSetCipherKeyId()) {
        optionals.set(2);
      }
      if (struct.isSetCipherText()) {
        optionals.set(3);
      }
      if (struct.isSetConfirmationRequest()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetMetaData()) {
        {
          oprot.writeI32(struct.metaData.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter61 : struct.metaData.entrySet())
          {
            oprot.writeString(_iter61.getKey());
            oprot.writeString(_iter61.getValue());
          }
        }
      }
      if (struct.isSetIdentityProvider()) {
        oprot.writeI32(struct.identityProvider.getValue());
      }
      if (struct.isSetCipherKeyId()) {
        oprot.writeString(struct.cipherKeyId);
      }
      if (struct.isSetCipherText()) {
        oprot.writeString(struct.cipherText);
      }
      if (struct.isSetConfirmationRequest()) {
        struct.confirmationRequest.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, IdentityCredentialRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map62 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.metaData = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map62.size);
          java.lang.String _key63;
          java.lang.String _val64;
          for (int _i65 = 0; _i65 < _map62.size; ++_i65)
          {
            _key63 = iprot.readString();
            _val64 = iprot.readString();
            struct.metaData.put(_key63, _val64);
          }
        }
        struct.setMetaDataIsSet(true);
      }
      if (incoming.get(1)) {
        struct.identityProvider = IdentityProvider.findByValue(iprot.readI32());
        struct.setIdentityProviderIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cipherKeyId = iprot.readString();
        struct.setCipherKeyIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cipherText = iprot.readString();
        struct.setCipherTextIsSet(true);
      }
      if (incoming.get(4)) {
        struct.confirmationRequest = new IdentifierConfirmationRequest();
        struct.confirmationRequest.read(iprot);
        struct.setConfirmationRequestIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

