/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.0)", date = "2020-03-23")
public class FetchSquareChatEventsResponse implements org.apache.thrift.TBase<FetchSquareChatEventsResponse, FetchSquareChatEventsResponse._Fields>, java.io.Serializable, Cloneable, Comparable<FetchSquareChatEventsResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FetchSquareChatEventsResponse");

  private static final org.apache.thrift.protocol.TField SUBSCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("subscription", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField EVENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("events", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField SYNC_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("syncToken", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CONTINUATION_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("continuationToken", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FetchSquareChatEventsResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FetchSquareChatEventsResponseTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable SubscriptionState subscription; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<SquareEvent> events; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String syncToken; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String continuationToken; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUBSCRIPTION((short)1, "subscription"),
    EVENTS((short)2, "events"),
    SYNC_TOKEN((short)3, "syncToken"),
    CONTINUATION_TOKEN((short)4, "continuationToken");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUBSCRIPTION
          return SUBSCRIPTION;
        case 2: // EVENTS
          return EVENTS;
        case 3: // SYNC_TOKEN
          return SYNC_TOKEN;
        case 4: // CONTINUATION_TOKEN
          return CONTINUATION_TOKEN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUBSCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("subscription", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SubscriptionState.class)));
    tmpMap.put(_Fields.EVENTS, new org.apache.thrift.meta_data.FieldMetaData("events", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SquareEvent.class))));
    tmpMap.put(_Fields.SYNC_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("syncToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTINUATION_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("continuationToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FetchSquareChatEventsResponse.class, metaDataMap);
  }

  public FetchSquareChatEventsResponse() {
  }

  public FetchSquareChatEventsResponse(
    SubscriptionState subscription,
    java.util.List<SquareEvent> events,
    java.lang.String syncToken,
    java.lang.String continuationToken)
  {
    this();
    this.subscription = subscription;
    this.events = events;
    this.syncToken = syncToken;
    this.continuationToken = continuationToken;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FetchSquareChatEventsResponse(FetchSquareChatEventsResponse other) {
    if (other.isSetSubscription()) {
      this.subscription = new SubscriptionState(other.subscription);
    }
    if (other.isSetEvents()) {
      java.util.List<SquareEvent> __this__events = new java.util.ArrayList<SquareEvent>(other.events.size());
      for (SquareEvent other_element : other.events) {
        __this__events.add(new SquareEvent(other_element));
      }
      this.events = __this__events;
    }
    if (other.isSetSyncToken()) {
      this.syncToken = other.syncToken;
    }
    if (other.isSetContinuationToken()) {
      this.continuationToken = other.continuationToken;
    }
  }

  public FetchSquareChatEventsResponse deepCopy() {
    return new FetchSquareChatEventsResponse(this);
  }

  @Override
  public void clear() {
    this.subscription = null;
    this.events = null;
    this.syncToken = null;
    this.continuationToken = null;
  }

  @org.apache.thrift.annotation.Nullable
  public SubscriptionState getSubscription() {
    return this.subscription;
  }

  public FetchSquareChatEventsResponse setSubscription(@org.apache.thrift.annotation.Nullable SubscriptionState subscription) {
    this.subscription = subscription;
    return this;
  }

  public void unsetSubscription() {
    this.subscription = null;
  }

  /** Returns true if field subscription is set (has been assigned a value) and false otherwise */
  public boolean isSetSubscription() {
    return this.subscription != null;
  }

  public void setSubscriptionIsSet(boolean value) {
    if (!value) {
      this.subscription = null;
    }
  }

  public int getEventsSize() {
    return (this.events == null) ? 0 : this.events.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<SquareEvent> getEventsIterator() {
    return (this.events == null) ? null : this.events.iterator();
  }

  public void addToEvents(SquareEvent elem) {
    if (this.events == null) {
      this.events = new java.util.ArrayList<SquareEvent>();
    }
    this.events.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<SquareEvent> getEvents() {
    return this.events;
  }

  public FetchSquareChatEventsResponse setEvents(@org.apache.thrift.annotation.Nullable java.util.List<SquareEvent> events) {
    this.events = events;
    return this;
  }

  public void unsetEvents() {
    this.events = null;
  }

  /** Returns true if field events is set (has been assigned a value) and false otherwise */
  public boolean isSetEvents() {
    return this.events != null;
  }

  public void setEventsIsSet(boolean value) {
    if (!value) {
      this.events = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSyncToken() {
    return this.syncToken;
  }

  public FetchSquareChatEventsResponse setSyncToken(@org.apache.thrift.annotation.Nullable java.lang.String syncToken) {
    this.syncToken = syncToken;
    return this;
  }

  public void unsetSyncToken() {
    this.syncToken = null;
  }

  /** Returns true if field syncToken is set (has been assigned a value) and false otherwise */
  public boolean isSetSyncToken() {
    return this.syncToken != null;
  }

  public void setSyncTokenIsSet(boolean value) {
    if (!value) {
      this.syncToken = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getContinuationToken() {
    return this.continuationToken;
  }

  public FetchSquareChatEventsResponse setContinuationToken(@org.apache.thrift.annotation.Nullable java.lang.String continuationToken) {
    this.continuationToken = continuationToken;
    return this;
  }

  public void unsetContinuationToken() {
    this.continuationToken = null;
  }

  /** Returns true if field continuationToken is set (has been assigned a value) and false otherwise */
  public boolean isSetContinuationToken() {
    return this.continuationToken != null;
  }

  public void setContinuationTokenIsSet(boolean value) {
    if (!value) {
      this.continuationToken = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SUBSCRIPTION:
      if (value == null) {
        unsetSubscription();
      } else {
        setSubscription((SubscriptionState)value);
      }
      break;

    case EVENTS:
      if (value == null) {
        unsetEvents();
      } else {
        setEvents((java.util.List<SquareEvent>)value);
      }
      break;

    case SYNC_TOKEN:
      if (value == null) {
        unsetSyncToken();
      } else {
        setSyncToken((java.lang.String)value);
      }
      break;

    case CONTINUATION_TOKEN:
      if (value == null) {
        unsetContinuationToken();
      } else {
        setContinuationToken((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SUBSCRIPTION:
      return getSubscription();

    case EVENTS:
      return getEvents();

    case SYNC_TOKEN:
      return getSyncToken();

    case CONTINUATION_TOKEN:
      return getContinuationToken();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SUBSCRIPTION:
      return isSetSubscription();
    case EVENTS:
      return isSetEvents();
    case SYNC_TOKEN:
      return isSetSyncToken();
    case CONTINUATION_TOKEN:
      return isSetContinuationToken();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof FetchSquareChatEventsResponse)
      return this.equals((FetchSquareChatEventsResponse)that);
    return false;
  }

  public boolean equals(FetchSquareChatEventsResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_subscription = true && this.isSetSubscription();
    boolean that_present_subscription = true && that.isSetSubscription();
    if (this_present_subscription || that_present_subscription) {
      if (!(this_present_subscription && that_present_subscription))
        return false;
      if (!this.subscription.equals(that.subscription))
        return false;
    }

    boolean this_present_events = true && this.isSetEvents();
    boolean that_present_events = true && that.isSetEvents();
    if (this_present_events || that_present_events) {
      if (!(this_present_events && that_present_events))
        return false;
      if (!this.events.equals(that.events))
        return false;
    }

    boolean this_present_syncToken = true && this.isSetSyncToken();
    boolean that_present_syncToken = true && that.isSetSyncToken();
    if (this_present_syncToken || that_present_syncToken) {
      if (!(this_present_syncToken && that_present_syncToken))
        return false;
      if (!this.syncToken.equals(that.syncToken))
        return false;
    }

    boolean this_present_continuationToken = true && this.isSetContinuationToken();
    boolean that_present_continuationToken = true && that.isSetContinuationToken();
    if (this_present_continuationToken || that_present_continuationToken) {
      if (!(this_present_continuationToken && that_present_continuationToken))
        return false;
      if (!this.continuationToken.equals(that.continuationToken))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSubscription()) ? 131071 : 524287);
    if (isSetSubscription())
      hashCode = hashCode * 8191 + subscription.hashCode();

    hashCode = hashCode * 8191 + ((isSetEvents()) ? 131071 : 524287);
    if (isSetEvents())
      hashCode = hashCode * 8191 + events.hashCode();

    hashCode = hashCode * 8191 + ((isSetSyncToken()) ? 131071 : 524287);
    if (isSetSyncToken())
      hashCode = hashCode * 8191 + syncToken.hashCode();

    hashCode = hashCode * 8191 + ((isSetContinuationToken()) ? 131071 : 524287);
    if (isSetContinuationToken())
      hashCode = hashCode * 8191 + continuationToken.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(FetchSquareChatEventsResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetSubscription(), other.isSetSubscription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubscription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subscription, other.subscription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEvents(), other.isSetEvents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.events, other.events);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSyncToken(), other.isSetSyncToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSyncToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.syncToken, other.syncToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetContinuationToken(), other.isSetContinuationToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContinuationToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.continuationToken, other.continuationToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("FetchSquareChatEventsResponse(");
    boolean first = true;

    sb.append("subscription:");
    if (this.subscription == null) {
      sb.append("null");
    } else {
      sb.append(this.subscription);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("events:");
    if (this.events == null) {
      sb.append("null");
    } else {
      sb.append(this.events);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("syncToken:");
    if (this.syncToken == null) {
      sb.append("null");
    } else {
      sb.append(this.syncToken);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("continuationToken:");
    if (this.continuationToken == null) {
      sb.append("null");
    } else {
      sb.append(this.continuationToken);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (subscription != null) {
      subscription.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FetchSquareChatEventsResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FetchSquareChatEventsResponseStandardScheme getScheme() {
      return new FetchSquareChatEventsResponseStandardScheme();
    }
  }

  private static class FetchSquareChatEventsResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<FetchSquareChatEventsResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FetchSquareChatEventsResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUBSCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.subscription = new SubscriptionState();
              struct.subscription.read(iprot);
              struct.setSubscriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EVENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list698 = iprot.readListBegin();
                struct.events = new java.util.ArrayList<SquareEvent>(_list698.size);
                @org.apache.thrift.annotation.Nullable SquareEvent _elem699;
                for (int _i700 = 0; _i700 < _list698.size; ++_i700)
                {
                  _elem699 = new SquareEvent();
                  _elem699.read(iprot);
                  struct.events.add(_elem699);
                }
                iprot.readListEnd();
              }
              struct.setEventsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SYNC_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.syncToken = iprot.readString();
              struct.setSyncTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTINUATION_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.continuationToken = iprot.readString();
              struct.setContinuationTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FetchSquareChatEventsResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.subscription != null) {
        oprot.writeFieldBegin(SUBSCRIPTION_FIELD_DESC);
        struct.subscription.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.events != null) {
        oprot.writeFieldBegin(EVENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.events.size()));
          for (SquareEvent _iter701 : struct.events)
          {
            _iter701.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.syncToken != null) {
        oprot.writeFieldBegin(SYNC_TOKEN_FIELD_DESC);
        oprot.writeString(struct.syncToken);
        oprot.writeFieldEnd();
      }
      if (struct.continuationToken != null) {
        oprot.writeFieldBegin(CONTINUATION_TOKEN_FIELD_DESC);
        oprot.writeString(struct.continuationToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FetchSquareChatEventsResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FetchSquareChatEventsResponseTupleScheme getScheme() {
      return new FetchSquareChatEventsResponseTupleScheme();
    }
  }

  private static class FetchSquareChatEventsResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<FetchSquareChatEventsResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FetchSquareChatEventsResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSubscription()) {
        optionals.set(0);
      }
      if (struct.isSetEvents()) {
        optionals.set(1);
      }
      if (struct.isSetSyncToken()) {
        optionals.set(2);
      }
      if (struct.isSetContinuationToken()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSubscription()) {
        struct.subscription.write(oprot);
      }
      if (struct.isSetEvents()) {
        {
          oprot.writeI32(struct.events.size());
          for (SquareEvent _iter702 : struct.events)
          {
            _iter702.write(oprot);
          }
        }
      }
      if (struct.isSetSyncToken()) {
        oprot.writeString(struct.syncToken);
      }
      if (struct.isSetContinuationToken()) {
        oprot.writeString(struct.continuationToken);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FetchSquareChatEventsResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.subscription = new SubscriptionState();
        struct.subscription.read(iprot);
        struct.setSubscriptionIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list703 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.events = new java.util.ArrayList<SquareEvent>(_list703.size);
          @org.apache.thrift.annotation.Nullable SquareEvent _elem704;
          for (int _i705 = 0; _i705 < _list703.size; ++_i705)
          {
            _elem704 = new SquareEvent();
            _elem704.read(iprot);
            struct.events.add(_elem704);
          }
        }
        struct.setEventsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.syncToken = iprot.readString();
        struct.setSyncTokenIsSet(true);
      }
      if (incoming.get(3)) {
        struct.continuationToken = iprot.readString();
        struct.setContinuationTokenIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

